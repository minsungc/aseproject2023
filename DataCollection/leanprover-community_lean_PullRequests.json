[{"author":"legrosbuffle","number":801,"diff_summary":[{"file":"src/library/tactic/simplify.cpp","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2023-01-17T15:55:14Z","update_date":"2023-01-20T02:10:46Z","discussion":[{"author":"bryangingechen","date":"2023-01-18T18:26:37Z","comment":"> @gebner do you have any idea why the CI isn't running and I don't have an option to enable it?\r\n\r\nI guess it's because the PR was made from a fork rather than from a branch. We can run it manually with bors:\r\n\r\nbors try"},{"author":"bryangingechen","date":"2023-01-18T18:28:24Z","comment":"Er, we should be able to but it's also not working for some reason...\r\n\r\n**edit**: ah, bors was just delayed for some reason."},{"author":"gebner","date":"2023-01-18T18:31:21Z","comment":"> do you have any idea why the CI isn't running and I don't have an option to enable it?\r\n\r\nI can't enable it either.  As Bryan said, it's probably because the PR is from a fork, and Clement didn't enable actions there."},{"author":"bors[bot]","date":"2023-01-18T19:03:41Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766154355)\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766153431)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766153645)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766154211)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766153815)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766154527)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766154054)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766153234)"},{"author":"gebner","date":"2023-01-18T19:10:23Z","comment":"bors r+"},{"author":"legrosbuffle","date":"2023-01-19T06:49:35Z","comment":"> and Clement didn't enable actions there\r\n\r\nSorry about that, I don't know the process there. Is there anything I need to do now ? It looks like you got the CI working ?"},{"author":"gebner","date":"2023-01-20T01:24:53Z","comment":"> Is there anything I need to do now ?\r\n\r\nNo, you don't need to do anything."},{"author":"gebner","date":"2023-01-20T01:24:59Z","comment":"bors r+\r\n"},{"author":"bors[bot]","date":"2023-01-20T02:10:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223227)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223450)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792224157)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223554)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223394)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223299)\n  * Build sanitized\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223502)"}],"review_discussion":[],"tags":[],"commits":[{"author":"legrosbuffle","committer":"legrosbuffle","hash":"4e186e99d04546504e4222b4b0e6a70379f04a3b","message":"Avoid an expensive copy.\n\nIn that context, `auto` is deduced to be `expr_map<simp_result>`, which\ncreates a local copy of the map. However, the call to `find()` below can\nbe made on a `const&`, so the copy is unnecessary.\n\nWe've measured this copy to be using ~1% of total runtime.\n\nThis is intended as a non-functional change. It was generated by automated tools.","date":"2023-01-17T15:52:30Z"}]},{"author":"gebner","number":800,"diff_summary":[{"file":"README.md","status":"M","additions":8,"deletions":2},{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2}],"state":"closed","open_date":"2022-12-26T18:56:45Z","update_date":"2022-12-26T20:37:54Z","discussion":[{"author":"gebner","date":"2022-12-26T20:08:18Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-26T20:37:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646438)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646356)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3783248651/jobs/6431643869)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646713)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3783248651/jobs/6431643715)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646523)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646269)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3783248651/jobs/6431643924)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"4fdd6993f8cef01e26cdcdb44ed669b368baa53e","message":"chore(*): release 3.50.3","date":"2022-12-26T18:56:19Z"}]},{"author":"gebner","number":799,"diff_summary":[{"file":"src/kernel/expr.h","status":"M","additions":11,"deletions":10},{"file":"src/library/constructions/projection.cpp","status":"M","additions":11,"deletions":10},{"file":"src/library/quote.cpp","status":"M","additions":11,"deletions":10},{"file":"src/library/sorry.cpp","status":"M","additions":11,"deletions":10},{"file":"src/library/tlean_exporter.cpp","status":"M","additions":11,"deletions":10}],"state":"closed","open_date":"2022-12-25T20:01:11Z","update_date":"2022-12-25T23:10:42Z","discussion":[{"author":"digama0","date":"2022-12-25T20:41:53Z","comment":"This is just getting rid of the subexpression entirely? I'm okay with this if we're just trying to fix the broken build, but this export strategy is plainly unusable if we actually care about reconstructing the value."},{"author":"gebner","date":"2022-12-25T21:05:28Z","comment":"I've put the subexpression back in."},{"author":"gebner","date":"2022-12-25T22:30:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-25T23:10:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421717230)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716791)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716927)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716880)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421717188)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716982)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716838)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421717260)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"5b142966c747d74b6ab8ba5dc049cec7a046d199","message":"fix: tlean expression numbering","date":"2022-12-25T19:59:41Z"},{"author":"gebner","committer":"gebner","hash":"604677701c4fa800708b02c30fb3ebe1b6d5b31c","message":"include quote value again","date":"2022-12-25T21:03:40Z"},{"author":"gebner","committer":"gebner","hash":"9d3366ba27b9ec4469eaef019fc43fb513838d00","message":"pacify linter","date":"2022-12-25T21:27:59Z"}]},{"author":"gebner","number":798,"diff_summary":[{"file":"README.md","status":"M","additions":9,"deletions":2},{"file":"doc/changes.md","status":"M","additions":9,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":9,"deletions":2}],"state":"closed","open_date":"2022-12-23T22:22:34Z","update_date":"2022-12-23T22:56:30Z","discussion":[{"author":"gebner","date":"2022-12-23T22:22:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-23T22:56:29Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3768551978/jobs/6407075102)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3768551978/jobs/6407075011)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3768551978/jobs/6407074846)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3768550210/jobs/6407071596)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3768550210/jobs/6407071925)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3768550210/jobs/6407071864)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3768550210/jobs/6407072049)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3768551978/jobs/6407075236)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"8c090963884d71d1bbf1aaf1dbbc96ccfe69bcb1","message":"chore(*): release 3.50.2","date":"2022-12-23T22:22:22Z"}]},{"author":"gebner","number":797,"diff_summary":[{"file":"src/library/tlean_exporter.cpp","status":"M","additions":6,"deletions":2}],"state":"closed","open_date":"2022-12-23T21:04:36Z","update_date":"2022-12-23T21:38:08Z","discussion":[{"author":"gebner","date":"2022-12-23T21:04:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-23T21:38:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406490999)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491080)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406490876)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406490789)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491269)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491183)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491384)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491480)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"cc30b6463456cd398af42ab5e2e1adb7d75bec7b","message":"feat: tlean export for local constants and mvars","date":"2022-12-23T21:04:20Z"}]},{"author":"gebner","number":796,"diff_summary":[{"file":"src/kernel/expr.h","status":"M","additions":16,"deletions":11},{"file":"src/library/constructions/projection.cpp","status":"M","additions":16,"deletions":11},{"file":"src/library/module_mgr.cpp","status":"M","additions":16,"deletions":11},{"file":"src/library/quote.cpp","status":"M","additions":16,"deletions":11},{"file":"src/library/sorry.cpp","status":"M","additions":16,"deletions":11},{"file":"src/library/tlean_exporter.cpp","status":"M","additions":16,"deletions":11}],"state":"closed","open_date":"2022-12-23T19:37:35Z","update_date":"2022-12-23T20:55:28Z","discussion":[{"author":"gebner","date":"2022-12-23T19:38:31Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-23T19:49:07Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3767867555/jobs/6405808538)"},{"author":"gebner","date":"2022-12-23T20:17:32Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-23T20:55:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131603)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131552)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131498)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131437)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131373)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131296)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131651)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131790)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"750d8ecbb43f6d1fc584d5046af09f599b2751eb","message":"fix: report tlean export errors","date":"2022-12-23T19:37:25Z"},{"author":"gebner","committer":"gebner","hash":"1c5570c6e22269955075976927bdb8b6050134e1","message":"textualize quote macro","date":"2022-12-23T19:59:00Z"},{"author":"gebner","committer":"gebner","hash":"d7db72005e01477c3c3873ab6254ae837a2dddd7","message":"export quote value","date":"2022-12-23T20:15:49Z"}]},{"author":"gebner","number":795,"diff_summary":[{"file":"README.md","status":"M","additions":8,"deletions":2},{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2}],"state":"closed","open_date":"2022-12-21T18:51:50Z","update_date":"2022-12-21T19:22:32Z","discussion":[{"author":"gebner","date":"2022-12-21T18:52:02Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-21T19:22:30Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3752015528/jobs/6373690097)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3752013892/jobs/6373686320)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3752013892/jobs/6373686776)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3752013892/jobs/6373686681)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3752015528/jobs/6373690348)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3752015528/jobs/6373690249)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3752015528/jobs/6373690492)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3752013892/jobs/6373686859)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"cb9b27b99057c15eff50543e83d3f7a8c2e356c2","message":"chore(*): release 3.50.1","date":"2022-12-21T18:51:18Z"}]},{"author":"gebner","number":794,"diff_summary":[{"file":"src/frontends/lean/definition_cmds.cpp","status":"M","additions":5,"deletions":13},{"file":"src/frontends/lean/inductive_cmds.cpp","status":"M","additions":5,"deletions":13},{"file":"src/frontends/lean/structure_cmd.cpp","status":"M","additions":5,"deletions":13},{"file":"tests/lean/sec_param_pp.lean.expected.out","status":"M","additions":5,"deletions":13}],"state":"closed","open_date":"2022-12-15T01:58:09Z","update_date":"2022-12-15T16:40:17Z","discussion":[{"author":"gebner","date":"2022-12-15T01:58:28Z","comment":"As confirmed by Mario: https://github.com/leanprover-community/mathlib/pull/17951#issuecomment-1352445212\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-12-15T07:59:23Z","comment":"Timed out."},{"author":"gebner","date":"2022-12-15T15:51:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-15T16:40:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033581)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033176)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280034259)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280034113)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033942)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033765)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033401)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280034444)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"17dccfab65c05f128ae943a673fd84721589c727","message":"Revert \"fix(frontends/lean/definition_cmds): put auto-bound universes before explicit (#788)\"\n\nThis reverts commit 0c617d7d95d418e9bc509e845d58f5ac0a922556.","date":"2022-12-15T01:57:30Z"}]},{"author":"gebner","number":793,"diff_summary":[{"file":"README.md","status":"M","additions":16,"deletions":3},{"file":"doc/changes.md","status":"M","additions":16,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":16,"deletions":3}],"state":"closed","open_date":"2022-12-15T00:38:11Z","update_date":"2022-12-15T01:13:20Z","discussion":[{"author":"gebner","date":"2022-12-15T00:38:17Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-15T01:13:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267921934)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267922043)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267922225)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267922142)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3699971502/jobs/6267918321)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267921774)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3699971502/jobs/6267918576)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267922307)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"e6cd50124e03ed0b7c1baa0bfaba78a25b4d2ec6","message":"chore(*): release 3.50.0","date":"2022-12-15T00:37:34Z"}]},{"author":"gebner","number":792,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":4,"deletions":4}],"state":"closed","open_date":"2022-12-07T19:45:00Z","update_date":"2022-12-07T20:24:27Z","discussion":[{"author":"gebner","date":"2022-12-07T19:45:26Z","comment":"It appears that this fixes #791."},{"author":"gebner","date":"2022-12-07T19:45:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-07T20:24:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149194039)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149193558)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149194378)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149194298)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149193932)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149193789)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149193692)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149194163)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"a259a97ee70518cf3e2d72e166b9a5cb4c6877b8","message":"hack: use ubuntu 20.04 for CI","date":"2022-12-07T19:44:23Z"}]},{"author":"digama0","number":791,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":199,"deletions":185},{"file":"src/library/reducible.cpp","status":"M","additions":199,"deletions":185}],"state":"closed","open_date":"2022-12-07T00:10:30Z","update_date":"2022-12-08T02:07:41Z","discussion":[{"author":"digama0","date":"2022-12-07T00:19:16Z","comment":"@gebner Help! Do you have any ideas what could cause these segfaults?"},{"author":"gebner","date":"2022-12-07T18:27:53Z","comment":"Oh no, this week is not going well...."},{"author":"gebner","date":"2022-12-07T19:16:38Z","comment":"Oof, I've got a stacktrace:\r\n```\r\n#1  0x0000000000c9d4bd in std::condition_variable::notify_all() ()\r\n#2  0x00000000008fdd67 in lean::shared_mutex::unlock (this=0x13c5390) at /home/runner/work/lean/lean/src/util/shared_mutex.cpp:66\r\n#3  0x0000000000497da5 in lean::exclusive_lock::~exclusive_lock (this=0x7fff760d0f18, __in_chrg=<optimized out>)\r\n    at /home/runner/work/lean/lean/src/util/shared_mutex.h:76\r\n#4  0x0000000000497c45 in lean::register_option (n='verbose', k=lean::BoolOption, default_value=0xe36e48 \"true\",\r\n    description=0xe36e28 \"disable/enable verbose messages\") at /home/runner/work/lean/lean/src/util/sexpr/option_declarations.cpp:79\r\n#5  0x000000000049493c in lean::initialize_options () at /home/runner/work/lean/lean/src/util/sexpr/options.cpp:27\r\n#6  0x000000000090d60f in lean::initialize_sexpr_module () at /home/runner/work/lean/lean/src/util/sexpr/init_module.cpp:15\r\n#7  0x00000000008fc60e in lean::initialize () at /home/runner/work/lean/lean/src/init/init.cpp:29\r\n#8  0x00000000008fc6d1 in lean::initializer::initializer (this=0x7fff760d1050) at /home/runner/work/lean/lean/src/init/init.cpp:86\r\n#9  0x000000000040cb0d in initializer::initializer (this=0x7fff760d1050) at /home/runner/work/lean/lean/src/shell/lean.cpp:315\r\n#10 0x00000000004058f7 in main (argc=2, argv=0x7fff760d26a8) at /home/runner/work/lean/lean/src/shell/lean.cpp:437\r\n```"},{"author":"gebner","date":"2022-12-07T20:28:28Z","comment":"There is a workaround on master now."}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"27420ea6e6a5848fcae9b9e21a9adafc316237f2","message":"[DO NOT MERGE] chore: testing CI","date":"2022-12-07T00:08:50Z"},{"author":"gebner","committer":"gebner","hash":"a480d52039ec69ac894adaacd49e2ec7a6b64327","message":"comment out other tests","date":"2022-12-07T18:25:30Z"},{"author":"gebner","committer":"gebner","hash":"2da3ce398d0529ecf4e1f049f3bd9b73bc64b47c","message":"get some info","date":"2022-12-07T18:27:16Z"},{"author":"gebner","committer":"gebner","hash":"b159f830286eeaff38917df64c94dce78e9ace31","message":"fingers crossed","date":"2022-12-07T18:32:57Z"},{"author":"gebner","committer":"gebner","hash":"a8d3f8830ee1d6dedee5a70c6198e4e468014e85","message":"try","date":"2022-12-07T19:00:41Z"},{"author":"gebner","committer":"gebner","hash":"f62916b88cdfa9907912ac1300c7fea52b3994a5","message":"ok","date":"2022-12-07T19:02:25Z"},{"author":"gebner","committer":"gebner","hash":"d75abfdec389378a2b0547ca2490f19114f01f4e","message":"artifacts overwrite each other, sigh","date":"2022-12-07T19:12:56Z"},{"author":"gebner","committer":"gebner","hash":"98c30db54ef96a07f97586573427009b80038fae","message":"bundle lean-gdb.py as well","date":"2022-12-07T19:15:12Z"},{"author":"gebner","committer":"gebner","hash":"e188e1cc0ecba43c59eaa454c6f84706987e5343","message":"downgrade ubuntu version?","date":"2022-12-07T19:32:45Z"}]},{"author":"digama0","number":790,"diff_summary":[{"file":"src/library/attribute_manager.cpp","status":"M","additions":24,"deletions":20},{"file":"src/library/attribute_manager.h","status":"M","additions":24,"deletions":20},{"file":"src/library/reducible.cpp","status":"M","additions":24,"deletions":20},{"file":"src/library/tactic/user_attribute.cpp","status":"M","additions":24,"deletions":20}],"state":"closed","open_date":"2022-12-06T22:47:09Z","update_date":"2022-12-14T23:19:40Z","discussion":[{"author":"digama0","date":"2022-12-08T02:15:09Z","comment":"`tlean`s are a line-oriented format, and the attribute data export function is called in a context where it is in the middle of a line because the line starts with `#ATTR` and the attribute data is supposed to go at the end. So if you call the functions like `export_expr` on the tlean_exporter directly the line will be garbled if it needs to output any new expr nodes, since expr nodes have to go on their own line.\r\n\r\nThe fix here is to have the attribute data get passed two streams: one of them is in the `tlean_exporter` and used for additional nodes (like `export_expr`), and the ostringstream is used to buffer additional information to be placed in the `#ATTR` line (no newlines are allowed here)."},{"author":"gebner","date":"2022-12-14T22:40:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-14T23:19:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266592707)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266592909)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266593270)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266593168)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266593072)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266592995)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266592822)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266593356)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"9c33846b5e509ce92bb2e1fbdec184207aa0b2f5","message":"fix: export user attribute data in tlean files","date":"2022-12-08T02:59:20Z"}]},{"author":"digama0","number":788,"diff_summary":[{"file":"src/frontends/lean/definition_cmds.cpp","status":"M","additions":13,"deletions":5},{"file":"src/frontends/lean/inductive_cmds.cpp","status":"M","additions":13,"deletions":5},{"file":"src/frontends/lean/structure_cmd.cpp","status":"M","additions":13,"deletions":5},{"file":"tests/lean/sec_param_pp.lean.expected.out","status":"M","additions":13,"deletions":5}],"state":"closed","open_date":"2022-12-01T06:22:02Z","update_date":"2022-12-15T00:03:19Z","discussion":[{"author":"gebner","date":"2022-12-01T06:44:07Z","comment":"I'm not sure I can reproduce this.  The following file produces the same order of universe parameters in both Lean 3 and Lean 4:\r\n```lean\r\nuniverse a universe z\r\ndef foo (α : Type a) (β : Type _) (γ : Type z) := α × β × γ\r\nset_option pp.universes true\r\n#print foo\r\n```\r\n\r\n```\r\n$ lean +leanprover-community/lean:3.49.1 788.lean\r\ndef {a z u_1} foo : Type a → Type u_1 → Type z → Type (max a u_1 z) :=\r\nλ (α : Type a) (β : Type u_1) (γ : Type z), α × β × γ\r\n$ lean +leanprover/lean4:nightly-2022-11-30 788.lean\r\ndef foo.{a, z, u_1} : Type a → Type u_1 → Type z → Type (max a z u_1) :=\r\nfun α β γ => Prod.{a, max z u_1} α (Prod.{u_1, z} β γ)\r\n```\r\n\r\nAlso do we really want this order (and not change Lean 4)?  Also please add a test."},{"author":"digama0","date":"2022-12-01T08:30:12Z","comment":"You are right, this isn't the issue. The mystery `_aux_param_0` is actually in the definition of `List.traverse._main`:\r\n```lean\r\nnamespace list\r\nuniverses u v\r\n\r\nprotected def traverse {F : Type u → Type v} [applicative F] {α β : Type*} (f : α → F β) :\r\n  list α → F (list β)\r\n| [] := pure []\r\n| (x :: xs) := list.cons <$> f x <*> traverse xs\r\n\r\nset_option pp.universes true\r\n#print list.traverse._main\r\n\r\nend list\r\n```\r\n```lean\r\ndef {_aux_param_0 u v} list.traverse._main : Π {F : Type u → Type v} [_inst_1 : applicative.{u v} F] {α : Type _aux_param_0} {β : Type u},\r\n  (α → F β) → list.{_aux_param_0} α → F (list.{u} β) := ...\r\n```\r\nI think cause is actually this line:\r\n\r\nhttps://github.com/leanprover-community/lean/blob/44be9cdbfdce562df6c93ebe2e045738bc0a2ad2/src/library/aux_definition.cpp#L111\r\nwhich sorts the newly generated universe parameters alphabetically, after introducing fresh variables using the `_aux_param_i` naming convention which of course will put them first. I think we should just remove the sort and let them be ordered by appearance in the term."},{"author":"gebner","date":"2022-12-14T22:43:59Z","comment":"Let's just try this out.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-12-15T00:03:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049190)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049276)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049110)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049030)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049433)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049350)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267048916)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049507)"},{"author":"gebner","date":"2022-12-15T01:23:59Z","comment":"Apparently this also broke Lean 4 compatibility in the example I posted:\r\n```lean\r\nuniverse a universe z\r\ndef foo (α : Type a) (β : Type _) (γ : Type z) := α × β × γ\r\nset_option pp.universes true\r\n#print foo\r\n```\r\nNow prints `u_1 a z` instead of `a z u_1`.  I think we should just revert this PR."}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"e33c052a7bde91f4aa0b79e49a02a00537d56858","message":"fix(frontends/lean/definition_cmds): put auto-bound universes before explicit","date":"2022-12-08T02:09:05Z"}]},{"author":"digama0","number":787,"diff_summary":[{"file":"src/frontends/lean/definition_cmds.cpp","status":"M","additions":1,"deletions":0}],"state":"closed","open_date":"2022-11-22T19:27:56Z","update_date":"2022-11-22T20:44:21Z","discussion":[{"author":"gebner","date":"2022-11-22T20:05:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-22T20:44:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942699)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942270)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942941)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942813)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942559)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942443)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914943106)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914943221)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"e69943275acc8029e0c966c266432569bdda1b34","message":"fix: push null using_well_founded node after `:=`","date":"2022-11-22T19:27:24Z"}]},{"author":"gebner","number":786,"diff_summary":[{"file":"README.md","status":"M","additions":11,"deletions":2},{"file":"doc/changes.md","status":"M","additions":11,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":11,"deletions":2}],"state":"closed","open_date":"2022-11-18T16:59:02Z","update_date":"2022-11-18T17:39:09Z","discussion":[{"author":"gebner","date":"2022-11-18T17:01:46Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-11-18T17:39:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3498778315/jobs/5859571408)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3498778315/jobs/5859570693)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3498778315/jobs/5859571755)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3498775413/jobs/5859565096)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3498775413/jobs/5859564918)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3498778315/jobs/5859571072)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3498775413/jobs/5859564620)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3498775413/jobs/5859565398)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"89b47aa1aa3c56296f2f05a7a391785086ebecb7","message":"chore(*): release 3.49.1","date":"2022-11-18T16:58:47Z"}]},{"author":"digama0","number":785,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"M","additions":6,"deletions":5}],"state":"open","open_date":"2022-11-18T10:50:16Z","update_date":"2022-11-18T12:33:29Z","discussion":[{"author":"eric-wieser","date":"2022-11-18T12:00:03Z","comment":"CI seems unhappy with this test:\r\n\r\nhttps://github.com/leanprover-community/lean/blob/cb0da9f301ab2b85d8d96847c41b92d973a7b151/tests/lean/interactive/info.lean#L15-L16\r\n\r\nwhich no longer produces\r\n\r\nhttps://github.com/leanprover-community/lean/blob/cb0da9f301ab2b85d8d96847c41b92d973a7b151/tests/lean/interactive/info.lean.expected.out#L8\r\n\r\n"}],"review_discussion":[{"author":"eric-wieser","file":"src/frontends/lean/parser.cpp","date":"2022-11-18T12:15:42Z","comment":"~~I don't understand this change; I'm probably blind, but it appears that nothing uses `p` below any more?~~"}],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"91a77d8d57ecb81c74c0e918356b3301ece6522a","message":"fix(frontends/lean/parser): start positions of trailing parser (NuD) nodes","date":"2022-11-18T10:46:28Z"}]},{"author":"digama0","number":784,"diff_summary":[{"file":"src/frontends/lean/definition_cmds.cpp","status":"M","additions":1,"deletions":0}],"state":"closed","open_date":"2022-11-18T05:56:39Z","update_date":"2022-11-18T07:04:18Z","discussion":[{"author":"bors[bot]","date":"2022-11-18T06:13:41Z","comment":":v: digama0 can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"digama0","date":"2022-11-18T06:22:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-18T07:04:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695173)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695272)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850694999)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850694904)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695441)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695362)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695086)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695521)"}],"review_discussion":[{"author":"gebner","file":".vscode/settings.json","date":"2022-11-18T06:13:35Z","comment":"Can you please revert this change?"},{"author":"digama0","file":".vscode/settings.json","date":"2022-11-18T06:22:20Z","comment":"oops, not sure how that got in there. --assume-unchanged is always finicky..."}],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"72b19154ca252e9b1676e3b92d1de4541c47d399","message":"fix(frontends/lean/definition_cmds): export `using_well_founded` AST node","date":"2022-11-18T06:21:26Z"}]},{"author":"eric-wieser","number":783,"diff_summary":[{"file":"library/init/meta/declaration.lean","status":"M","additions":21,"deletions":20}],"state":"closed","open_date":"2022-11-17T00:09:42Z","update_date":"2022-11-17T01:23:40Z","discussion":[{"author":"gebner","date":"2022-11-17T00:45:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-17T01:23:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839983)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839889)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828840249)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828840160)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839690)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839598)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839802)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828840067)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"89c290b52c5c87f2716b513653b5cd85e682a703","message":"chore(library/init/meta/declaration): give explicit names to declaration constructor arguments\n\nThese are useful for documentation and generating recursive definitions.","date":"2022-11-17T00:17:31Z"}]},{"author":"eric-wieser","number":782,"diff_summary":[{"file":"library/init/cc_lemmas.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/classical.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/control/monad.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/core.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/data/int/basic.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/data/int/comp_lemmas.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/data/int/order.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/data/list/lemmas.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/data/list/qsort.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/data/nat/basic.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/data/nat/bitwise.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/data/nat/gcd.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/data/string/basic.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/ite_simp.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/logic.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/backward.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/constructor_tactic.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/exceptional.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/has_reflect.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/injection_tactic.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/interaction_monad.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/interactive.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/mk_dec_eq_instance.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/mk_has_reflect_instance.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/mk_has_sizeof_instance.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/mk_inhabited_instance.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/name.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/simp_tactic.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/smt/ematch.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/smt/smt_tactic.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/meta/tactic.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/propext.lean","status":"M","additions":163,"deletions":162},{"file":"library/init/wf.lean","status":"M","additions":163,"deletions":162},{"file":"library/system/io.lean","status":"M","additions":163,"deletions":162},{"file":"library/system/random.lean","status":"M","additions":163,"deletions":162}],"state":"closed","open_date":"2022-11-16T22:26:22Z","update_date":"2022-11-17T00:03:58Z","discussion":[{"author":"gebner","date":"2022-11-16T23:31:14Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-17T00:03:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828053825)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828053945)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054619)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054525)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054310)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054230)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054119)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054422)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"65e482735afd59f704a1f03803a365c841ca0330","message":"chore(library/init): convert `/-` comments to `/--` or `/-!` comments\n\nThis isn't exhaustive, but converts the majority.\nIt also does not check that the comments have reasonable markdown formatting.","date":"2022-11-16T22:25:53Z"}]},{"author":"eric-wieser","number":781,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"M","additions":13,"deletions":6},{"file":"src/frontends/lean/pp.h","status":"M","additions":13,"deletions":6},{"file":"tests/lean/pp_links.lean","status":"M","additions":13,"deletions":6},{"file":"tests/lean/pp_links.lean.expected.out","status":"M","additions":13,"deletions":6}],"state":"closed","open_date":"2022-11-14T00:01:26Z","update_date":"2022-11-15T05:53:48Z","discussion":[{"author":"gebner","date":"2022-11-15T05:11:01Z","comment":"I don't see how this could've worked before.  :+1: for adding the test now.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-11-15T05:53:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712449)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712551)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792713078)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712982)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712864)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712778)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712660)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792713186)"}],"review_discussion":[{"author":"eric-wieser","file":"tests/lean/pp_links.lean.expected.out","date":"2022-11-14T00:02:09Z","comment":"Previously this would print without any link on the `∃`."}],"tags":[],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"8eb15d4d3072a793f16320f471adf576adbd6ae8","message":"fix(frontends/lean/pp): correct binder links\n\nPreviously these used the notation definition (the RHS of the `:=`) rather than the matched expression.\nThis usually doesn't work at all, since often the RHS is just `#0` and all the notation happens within the `scoped` block.","date":"2022-11-13T23:58:14Z"},{"author":"eric-wieser","committer":"web-flow","hash":"492a003ebfc439303dcdff355893990fa270f589","message":"Different order in CI!?","date":"2022-11-14T00:20:40Z"}]},{"author":"gebner","number":780,"diff_summary":[{"file":"README.md","status":"M","additions":16,"deletions":2},{"file":"doc/changes.md","status":"M","additions":16,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":16,"deletions":2}],"state":"closed","open_date":"2022-11-11T19:02:42Z","update_date":"2022-11-11T20:17:17Z","discussion":[{"author":"gebner","date":"2022-11-11T19:04:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-11-11T20:17:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663198)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663093)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753662968)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753662847)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663376)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663301)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753662730)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663468)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"98da2b1c2a421487d7598b64ed48c61759c875e0","message":"chore(*): release 3.49.0","date":"2022-11-11T09:00:12Z"}]},{"author":"semorrison","number":779,"diff_summary":[{"file":"library/init/algebra/functions.lean","status":"M","additions":6,"deletions":6},{"file":"library/init/algebra/order.lean","status":"M","additions":6,"deletions":6}],"state":"closed","open_date":"2022-11-11T07:23:27Z","update_date":"2022-11-11T08:19:58Z","discussion":[{"author":"semorrison","date":"2022-11-11T07:24:26Z","comment":"Corresponding mathlib PR is https://github.com/leanprover-community/mathlib/pull/17470"},{"author":"gebner","date":"2022-11-11T07:32:58Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-11T08:19:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704169)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704255)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704623)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704539)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704436)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704334)\n  * Build sanitized\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704838)"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"08c97f07e5db72cae60f4889224a6e9af3093877","message":"fix","date":"2022-11-11T06:54:25Z"}]},{"author":"eric-wieser","number":778,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"M","additions":26,"deletions":9},{"file":"src/frontends/lean/pp.h","status":"M","additions":26,"deletions":9},{"file":"tests/lean/pp_links.lean.expected.out","status":"M","additions":26,"deletions":9}],"state":"closed","open_date":"2022-11-04T00:37:59Z","update_date":"2022-11-11T18:50:33Z","discussion":[{"author":"gebner","date":"2022-11-11T18:07:07Z","comment":"bors r+"},{"author":"gebner","date":"2022-11-11T18:07:53Z","comment":"Thanks!"},{"author":"bors[bot]","date":"2022-11-11T18:50:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674412)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674248)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752675095)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674998)\n  * Build macos Debug\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674740)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674567)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752675195)"},{"author":"eric-wieser","date":"2022-11-11T19:36:27Z","comment":"Mind looking at the related https://github.com/leanprover-community/doc-gen/pull/173 too?"},{"author":"gebner","date":"2022-11-11T20:40:18Z","comment":"The doc-gen PR is also a 👍 from me, but we'll first need to bump mathlib to 3.49.  https://github.com/leanprover-community/mathlib/pull/17470"},{"author":"eric-wieser","date":"2022-11-11T21:19:02Z","comment":"The doc-gen PR doesn't need a lean bump"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"04021884864e4ce7aa286a8a007dafc29ff9ac67","message":"feat: extend `pp.links` to support Pi, Prop, Type, and Sort\n\nThis uses `U+E003` (the next available private use character) to prefix the names:\n\n* `pi`\n* `forall`\n* `function`\n* `implies`\n* `Sort`\n* `Prop`\n* `Type`\n\nThe motivation is to be able to link these ideas in doc-gen.","date":"2022-11-04T00:34:19Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"ab29f492093f508d791fc34f504f06370c9841f4","message":"fix","date":"2022-11-04T00:53:07Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"7aa37c54df405af93bfe1c5881bdbb6f2f417ed0","message":"update test","date":"2022-11-04T01:14:33Z"}]},{"author":"semorrison","number":777,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2022-10-28T05:32:30Z","update_date":"2022-11-05T12:40:41Z","discussion":[{"author":"semorrison","date":"2022-10-28T05:38:16Z","comment":"The alternative, I guess would be to see if we can change the Lean 4 behaviour. \r\n\r\nThe required diff in mathlib is at https://github.com/leanprover-community/mathlib/compare/revert_530."},{"author":"gebner","date":"2022-11-01T21:10:41Z","comment":"The order was requested by Kevin: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/specialize.20h.20_.2C.20swap/near/225703117"},{"author":"semorrison","date":"2022-11-05T12:40:41Z","comment":"The Lean 4 behaviour was changed to match Lean 3 in https://github.com/leanprover/lean4/pull/1796."}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"ed00d8e753545727257cbb845c77f7d358f986f1","message":"feat(specialize): additional goals come after the main goal","date":"2022-10-28T04:35:21Z"}]},{"author":"digama0","number":775,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":14,"deletions":28},{"file":"src/library/constants.cpp","status":"M","additions":14,"deletions":28},{"file":"src/library/constants.h","status":"M","additions":14,"deletions":28},{"file":"src/library/constants.txt","status":"M","additions":14,"deletions":28},{"file":"src/library/vm/vm_format.cpp","status":"M","additions":14,"deletions":28},{"file":"tests/lean/run/check_constants.lean","status":"M","additions":14,"deletions":28},{"file":"tests/lean/tc_caching.lean","status":"M","additions":14,"deletions":28}],"state":"closed","open_date":"2022-10-24T10:31:28Z","update_date":"2022-11-11T19:37:32Z","discussion":[{"author":"gebner","date":"2022-11-11T18:07:43Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-11T19:37:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142164)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142025)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142572)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142479)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142367)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142272)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753141935)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142675)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"57742ab4f0a59df6024c8e107ff7d1b2df8fa10b","message":"chore(init/core.lean): remove combinator.{I,K,S}","date":"2022-10-24T10:22:10Z"},{"author":"digama0","committer":"digama0","hash":"bbb4aa2cf124ed32749ba2de8f868ffd136d6498","message":"fix test","date":"2022-10-24T11:08:08Z"}]},{"author":"semorrison","number":774,"diff_summary":[{"file":"library/init/propext.lean","status":"M","additions":0,"deletions":7}],"state":"closed","open_date":"2022-10-19T03:15:39Z","update_date":"2022-10-19T05:04:32Z","discussion":[{"author":"gebner","date":"2022-10-19T04:26:23Z","comment":"We use `eq_true` four times in mathlib, including in category theory.  I'm fine with moving it to mathlib and renaming it to `eq_true_iff` or something.\r\n\r\nbors d+"},{"author":"bors[bot]","date":"2022-10-19T04:26:24Z","comment":":v: semorrison can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"semorrison","date":"2022-10-19T04:27:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-10-19T05:04:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602409)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602283)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602836)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602762)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602671)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602586)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602492)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602918)"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"50d6bc237e2d2a735fbf6ce2087e3de1a2b76ba4","message":"chore: remove unused theorems, to match port to mathlib4","date":"2022-10-19T03:13:29Z"}]},{"author":"eric-wieser","number":773,"diff_summary":[{"file":"library/init/meta/expr.lean","status":"M","additions":9,"deletions":9}],"state":"closed","open_date":"2022-10-03T17:11:51Z","update_date":"2022-10-03T18:14:29Z","discussion":[{"author":"gebner","date":"2022-10-03T17:33:15Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-10-03T18:14:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177120)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177585)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177839)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177737)\n  * Build macos Debug\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177271)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175176942)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177962)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"2b3e549dbe8b30f439cdb9f7298fd53bc816d9dd","message":"chore(library/init/meta/expr): name the arguments to the remaining constructors\n\nThis means that the auto-generated match expression do not include `ᾰ`.","date":"2022-10-03T17:07:22Z"}]},{"author":"YaelDillies","number":771,"diff_summary":[{"file":"library/data/buffer.lean","status":"M","additions":104,"deletions":111},{"file":"library/data/dlist.lean","status":"M","additions":104,"deletions":111},{"file":"library/data/vector.lean","status":"M","additions":104,"deletions":111},{"file":"library/init/core.lean","status":"M","additions":104,"deletions":111},{"file":"library/init/data/list/basic.lean","status":"M","additions":104,"deletions":111},{"file":"library/init/data/list/instances.lean","status":"M","additions":104,"deletions":111},{"file":"library/init/data/list/lemmas.lean","status":"M","additions":104,"deletions":111},{"file":"library/init/data/string/basic.lean","status":"M","additions":104,"deletions":111},{"file":"library/init/meta/expr_address.lean","status":"M","additions":104,"deletions":111},{"file":"library/init/meta/format.lean","status":"M","additions":104,"deletions":111},{"file":"library/init/meta/name.lean","status":"M","additions":104,"deletions":111},{"file":"library/init/meta/smt/smt_tactic.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/bad_unification_hint.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/interactive/info.lean.expected.out","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/back1.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/back1b.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/back2.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/back3.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/back4.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/ind_issue.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/lamexp.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/listex.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/listex2.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/regset.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/simp_match_reducibility_issue.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/run/soundness.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/unfold1.lean","status":"M","additions":104,"deletions":111},{"file":"tests/lean/unfold1.lean.expected.out","status":"M","additions":104,"deletions":111},{"file":"tests/lean/unification_hints2.lean","status":"M","additions":104,"deletions":111}],"state":"open","open_date":"2022-09-19T18:34:02Z","update_date":"2022-09-19T18:37:37Z","discussion":[{"author":"gebner","date":"2022-09-19T18:37:37Z","comment":"Pending discussion on Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/append.20and.20concat/near/299602232"}],"review_discussion":[],"tags":[],"commits":[{"author":"YaelDillies","committer":"YaelDillies","hash":"9d7d7b2a87d1b1e3aa52ef05f227ef3bfa6cef7a","message":"initial commit","date":"2022-09-19T17:45:06Z"}]},{"author":"kmill","number":770,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"A","additions":161,"deletions":77},{"file":"tests/lean/1917.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/584a.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/634d.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/652.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/as_is_leak_bug.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/class_instance_param.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/derive.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/elab6.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/elab9.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/elab_error_msgs.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/error_pos.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/extends_priority.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/interactive/info.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/let1.lean","status":"A","additions":161,"deletions":77},{"file":"tests/lean/let1.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/out_param_proj.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/pp_forall.lean","status":"A","additions":161,"deletions":77},{"file":"tests/lean/pp_forall.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/pp_parens.lean","status":"A","additions":161,"deletions":77},{"file":"tests/lean/pp_parens.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/pp_shadowed_const.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/pp_zero_bug.lean.expected.out","status":"A","additions":161,"deletions":77},{"file":"tests/lean/struct_class.lean.expected.out","status":"A","additions":161,"deletions":77}],"state":"open","open_date":"2022-09-19T18:09:38Z","update_date":"2022-11-16T10:09:10Z","discussion":[{"author":"kmill","date":"2022-09-19T18:17:23Z","comment":"I had wondered about this behavior of the pretty printer before, and [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Forall.20vs.2E.20if-then/near/299317772) led me to check how hard it would be to make the change. If it's unwanted, that's fine.\r\n\r\nOne one hand, it's an improvement because you can tell immediately whether a pi type with a binding domain in Type is a Prop since it will always show forall notation. On the other you can't immediately tell whether a forall is dependent or not. I think it's still on the balance an improvement that helps align Lean with common practice mathematics at little cost."},{"author":"eric-wieser","date":"2022-09-22T21:43:00Z","comment":"To an experienced user, I'd argue being able to spot a non-dependent binder at a glance is more valuable than matching pen and paper mathematics, but I understand the pedagogical appeal.\r\n\r\nDo you think using underscores for the variable names in non-dependent binders is a good idea? I think that would remove the downside regarding dependent types."},{"author":"kmill","date":"2022-09-23T04:53:36Z","comment":"> Do you think using underscores for the variable names in non-dependent binders is a good idea? I think that would remove the downside regarding dependent types.\r\n\r\nI like this idea @eric-wieser. I added a mild hack to get this to work -- anonymous names can't round-trip anyway, so I made the binder pp routine print anonymous names as `_` rather than `[anonymous]`. That way the `pp_pi` function can set the `pp_name` of a local associated to a non-dependent pi to `name()` to get it to show up as `_`. This was the simplest way to get this feature to work that I could think of.\r\n\r\nI generalized this to also apply to non-dependent pi types with non-explicit binders. For example, `Π {n : ℕ}, ℤ` pretty prints as `Π {_ : ℕ}, ℤ`."},{"author":"kmill","date":"2022-09-27T14:00:25Z","comment":"[(Zulip PR Reviews thread)](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23770/near/300819312)"},{"author":"eric-wieser","date":"2022-11-15T09:23:11Z","comment":"I created some conflicts in my other PR; some tests might need fixing yet."},{"author":"kmill","date":"2022-11-15T09:26:15Z","comment":"@eric-wieser I just noticed your other PRs and was in the process of getting my dev environment set up for lean to merge and test (I'm at Orsay for the year, by the way).\r\n\r\n**Edit:** Your merge looks good to me, thanks! The tests all pass locally too."}],"review_discussion":[{"author":"digama0","file":"tests/lean/584a.lean.expected.out","date":"2022-09-27T18:23:55Z","comment":"I think it would make more sense to print anonymous instance binders as `[inhabited A]` instead of `[_ : inhabited A]`"},{"author":"kmill","file":"tests/lean/584a.lean.expected.out","date":"2022-09-27T19:33:30Z","comment":"Good idea -- added that feature."},{"author":"eric-wieser","file":"tests/lean/let1.lean.expected.out","date":"2022-11-15T12:53:12Z","comment":"@kmill, this looks like it should have printed as `∀ (_ : p) (_ : q), and q p`?"},{"author":"eric-wieser","file":"tests/lean/pp_forall.lean","date":"2022-11-15T12:53:36Z","comment":"Can you add a test for\r\n```suggestion\r\n#check Π (m n : ℕ), ℤ\r\n```"},{"author":"kmill","file":"tests/lean/let1.lean.expected.out","date":"2022-11-15T13:07:07Z","comment":"This particular file is odd since it's using this let-bound `bool` synonym for `Prop`. There's a `Note(kmill)` in the corresponding test file, but I'll take another look to see if this is due to any subtle bugs."},{"author":"kmill","file":"tests/lean/pp_forall.lean","date":"2022-11-15T13:11:20Z","comment":"I added that and a number of variations"},{"author":"kmill","file":"tests/lean/let1.lean.expected.out","date":"2022-11-15T13:54:54Z","comment":"As far as I can tell, it's just that the `is_prop` test for `and q p` is false but for `∀ (_ : q), and q p` it's true.\r\n\r\nHere's an example that suggests this theory is correct:\r\n```lean\r\nabbreviation bool' := Sort 0\r\n\r\n#check let and' (p q : bool')         := ∀ c : bool', (p → q → c) → c\r\n          in ∀ (p q : bool'), q → and' p q\r\n/-\r\nlet and' : bool' → bool' → Prop := λ (p q : bool'), ∀ (c : bool'), (p → q → c) → c\r\nin ∀ (p q : bool'), q → and' p q :\r\n  Prop\r\n-/\r\n\r\n#check let bool'                      := Sort 0,\r\n          and' (p q : bool')         := ∀ c : bool', (p → q → c) → c\r\n          in ∀ (p q : bool'), q → and' p q\r\n/-\r\nlet bool' : Type := Prop,\r\n    and' : bool' → bool' → Prop := λ (p q : bool'), Π (c : bool'), (p → q → c) → c\r\nin ∀ (p q : bool') (_ : q), and' p q :\r\n  Prop\r\n-/\r\n```\r\nIn the first case, the relaxed weak head normal form is able to see that `bool'` is `Prop`, but in the second it can't."},{"author":"kmill","file":"tests/lean/let1.lean.expected.out","date":"2022-11-15T14:02:49Z","comment":"I've added some simpler tests that point out this limitation."},{"author":"eric-wieser","file":"tests/lean/let1.lean.expected.out","date":"2022-11-16T10:09:10Z","comment":"Thanks! I don't think this is a big deal, especially since the non-weird two-binder cases work fine."}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"kmill","committer":"kmill","hash":"d3972f5baf963932a8580e243bc19249cae42f7f","message":"feat(frontends/lean/pp): use forall notation for all pi types from a Type to a Prop","date":"2022-09-19T18:01:42Z"},{"author":"kmill","committer":"kmill","hash":"d205cc56826106507358631ba415196daa31e7c8","message":"make non-dependent pi bindings pp as _","date":"2022-09-23T04:43:12Z"},{"author":"kmill","committer":"kmill","hash":"a9cbf4997a06a2c1b0b3cf9c034ab0dbd0c59def","message":"blindly fix tests","date":"2022-09-23T04:47:27Z"},{"author":"kmill","committer":"kmill","hash":"24e8eacf9ea55f87dab2bc37f579a2729aa1043e","message":"failing tests","date":"2022-09-23T05:15:09Z"},{"author":"kmill","committer":"kmill","hash":"d2d4eded7332b153153c0677779ee9963dab7ce7","message":"missed a test fix","date":"2022-09-23T05:38:28Z"},{"author":"kmill","committer":"kmill","hash":"920495c2577419377ebeb592b1475ec757b0c94a","message":"Mario suggestion of preferring [foo] over [_ : foo]","date":"2022-09-27T19:28:11Z"},{"author":"eric-wieser","committer":"web-flow","hash":"3548b340674457fffb944abddfc4abfb948b1194","message":"Merge branch 'master' into kmill_pp_forall","date":"2022-11-15T09:22:04Z"},{"author":"kmill","committer":"kmill","hash":"e483cf620be08a98d3edba14665dfebce4b77cb3","message":"extra tests for multiple binders","date":"2022-11-15T13:09:37Z"},{"author":"kmill","committer":"kmill","hash":"cf3b7c5fa86bac793e97804a2aef5a8613bb017e","message":"test showing limitation","date":"2022-11-15T14:01:38Z"}]},{"author":"eric-wieser","number":766,"diff_summary":[{"file":"library/init/coe.lean","status":"M","additions":4,"deletions":4}],"state":"closed","open_date":"2022-09-04T12:34:45Z","update_date":"2022-09-05T11:50:08Z","discussion":[{"author":"gebner","date":"2022-09-05T11:13:19Z","comment":"Thanks!\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-09-05T11:50:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8187290459?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8187290639?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8187291391?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8187291303?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8187291182?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8187291089?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8187290931?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8187291509?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"c2061a47e83c04cb00d9770376d403f4fc58c988","message":"doc(library/init/coe): fix markdown","date":"2022-09-04T12:34:25Z"}]},{"author":"yurivict","number":764,"diff_summary":[{"file":"src/CMakeLists.txt","status":"M","additions":44,"deletions":1},{"file":"src/util/debug.cpp","status":"M","additions":44,"deletions":1},{"file":"src/util/memory.cpp","status":"M","additions":44,"deletions":1}],"state":"open","open_date":"2022-09-01T02:17:40Z","update_date":"2022-09-02T16:58:51Z","discussion":[{"author":"gebner","date":"2022-09-02T16:58:51Z","comment":"Please title the PR `fix(util/memory): support freebsd`\r\n\r\nOtherwise LGTM."}],"review_discussion":[],"tags":[],"commits":[{"author":"yurivict","committer":"yurivict","hash":"5eecaa0b9c860858372a22ab242566671907c913","message":"FreeBSD patches","date":"2022-09-01T03:48:03Z"}]},{"author":"gebner","number":762,"diff_summary":[{"file":"README.md","status":"M","additions":8,"deletions":2},{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2}],"state":"closed","open_date":"2022-08-30T09:53:15Z","update_date":"2022-08-30T11:50:48Z","discussion":[{"author":"gebner","date":"2022-08-30T11:07:09Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-30T11:50:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8090547928?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8090654970?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8090655845?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8090655622?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8090547592?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8090547460?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8090655415?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8090656088?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"524caca3b10e51816ccdafd9c258696d22e1e0a6","message":"chore(*): release 3.48.0","date":"2022-08-30T09:52:26Z"}]},{"author":"gebner","number":761,"diff_summary":[{"file":"library/init/data/fin/basic.lean","status":"M","additions":16,"deletions":8},{"file":"library/init/meta/comp_value_tactics.lean","status":"M","additions":16,"deletions":8},{"file":"src/frontends/lean/local_context_adapter.cpp","status":"M","additions":16,"deletions":8},{"file":"tests/lean/pp_char_bug.lean.expected.out","status":"M","additions":16,"deletions":8}],"state":"closed","open_date":"2022-08-29T12:25:14Z","update_date":"2022-08-30T10:28:33Z","discussion":[{"author":"gebner","date":"2022-08-30T09:51:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-30T10:28:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8089242686?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8089243433?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8089243771?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8089243622?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8089243212?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8089243088?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8089242906?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8089243936?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"29ed51f67e537542262e746bbf99ef999d9168f4","message":"feat(init/data/fin/basic): make `fin` a structure","date":"2022-08-26T10:31:03Z"}]},{"author":"gebner","number":760,"diff_summary":[{"file":"README.md","status":"M","additions":11,"deletions":2},{"file":"doc/changes.md","status":"M","additions":11,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":11,"deletions":2}],"state":"closed","open_date":"2022-08-25T18:36:05Z","update_date":"2022-08-25T19:18:21Z","discussion":[{"author":"gebner","date":"2022-08-25T18:36:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-25T19:18:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8022944795?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8022940137?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8022940859?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8022945606?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8022940580?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8022945083?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8022940331?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8022945907?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c75cbc87781b702e50b217f40c0a9ef851544688","message":"chore(*): release 3.47.0","date":"2022-08-25T18:32:02Z"}]},{"author":"digama0","number":759,"diff_summary":[{"file":"src/frontends/lean/parser_config.cpp","status":"M","additions":6,"deletions":6}],"state":"closed","open_date":"2022-08-24T21:21:21Z","update_date":"2022-08-25T17:48:13Z","discussion":[{"author":"gebner","date":"2022-08-25T16:24:58Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-25T17:48:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8021373328?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8021372704?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8021373147?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8021373042?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8021373601?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8021373465?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8021372881?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8021373793?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"36406aeb03b0e525f4af7d3e6672a72527f91a8d","message":"fix(frontends/lean/parser_config): serialize notation names","date":"2022-08-24T20:44:52Z"}]},{"author":"digama0","number":758,"diff_summary":[{"file":"src/frontends/lean/notation_cmd.cpp","status":"M","additions":26,"deletions":19},{"file":"src/frontends/lean/parser_config.cpp","status":"M","additions":26,"deletions":19},{"file":"src/frontends/lean/parser_config.h","status":"M","additions":26,"deletions":19}],"state":"closed","open_date":"2022-08-24T06:23:49Z","update_date":"2022-08-24T19:06:15Z","discussion":[{"author":"gebner","date":"2022-08-24T11:55:17Z","comment":"Is there a way to deduplicate the `open_locale` commands?  In Lean 4, duplicate notations result in ambiguous syntax errors, so it's not a bad idea to flag this in Lean 3:\r\n```lean\r\nlocal notation \"foo\" => Nat\r\nlocal notation \"foo\" => Nat\r\n\r\n#check foo\r\n/-\r\nambiguous, possible interpretations \r\n  foo : Type\r\n  \r\n  foo : Type\r\n-/\r\n```"},{"author":"digama0","date":"2022-08-24T16:54:26Z","comment":"It's not really a problem for synport, because we aren't still using the old `open_locale` implementation and are just using `open` instead, which handles scoped notations correctly. In lean 3, there are also no issues because when you add the exact same notation twice, the first one is *overridden* by the second. Notice that this works:\r\n```lean\r\nnotation (name := a) `foo`:20 := nat\r\nnotation (name := b) `foo`:20 := nat\r\n#check foo -- ok\r\nnotation (name := c) `foo`:20 := int\r\n#check foo -- ambiguous\r\n```\r\nSo the only case to worry about is if the user actually writes the same `notation` line twice in the file and synport translates it to an ambiguous pair, and I don't think people actually do this in practice enough for it to be a concern."},{"author":"gebner","date":"2022-08-24T18:26:23Z","comment":"> I don't think people actually do this in practice enough for it to be a concern.\r\n\r\nThat was what I was thinking about but it's indeed a rare case.  Let's ship it.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-08-24T19:06:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8001667961?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8001668401?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8001669085?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8001668656?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8001667747?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8001667590?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8001668190?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8001669254?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-author","description":""}],"commits":[{"author":"digama0","committer":"digama0","hash":"35be2800d0d6993c68f213f8216e1cd90f47f3ad","message":"feat(frontends/lean/notation_cmd): allow duplicate notations with the same name","date":"2022-08-24T06:18:23Z"}]},{"author":"kmill","number":757,"diff_summary":[{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":453,"deletions":93},{"file":"src/frontends/lean/elaborator.h","status":"A","additions":453,"deletions":93},{"file":"src/frontends/lean/structure_cmd.cpp","status":"A","additions":453,"deletions":93},{"file":"src/frontends/lean/structure_cmd.h","status":"A","additions":453,"deletions":93},{"file":"src/library/attribute_manager.h","status":"A","additions":453,"deletions":93},{"file":"src/library/constants.cpp","status":"A","additions":453,"deletions":93},{"file":"src/library/constants.h","status":"A","additions":453,"deletions":93},{"file":"src/library/constants.txt","status":"A","additions":453,"deletions":93},{"file":"tests/lean/assertion1.lean.expected.out","status":"A","additions":453,"deletions":93},{"file":"tests/lean/field_resolution.lean","status":"A","additions":453,"deletions":93},{"file":"tests/lean/field_resolution.lean.expected.out","status":"A","additions":453,"deletions":93},{"file":"tests/lean/interactive/field_info.lean.expected.out","status":"A","additions":453,"deletions":93}],"state":"closed","open_date":"2022-08-23T23:18:13Z","update_date":"2022-08-25T17:03:03Z","discussion":[{"author":"gebner","date":"2022-08-25T16:23:36Z","comment":"I think it would be better to match the Lean 4 behavior eventually (either by changing Lean 3 or Lean 4).\r\n\r\nBut we can do this in steps.  Let's get the partial version in first, which is easy to port mathlib to.  We can then do the more complicated change later.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-08-25T17:03:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8020683931?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8020683767?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8020684399?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8020684242?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8020683592?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8020683467?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8020683273?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8020684086?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"src/frontends/lean/elaborator.h","date":"2022-08-24T11:57:35Z","comment":"I'd rather avoid unions.  Could we just inline all the fields instead?"},{"author":"kmill","file":"src/frontends/lean/elaborator.h","date":"2022-08-24T16:15:03Z","comment":"Ok, I've inlined them. I kept the structures for the three types, though, since they're a nicer interface than trying to use constructors, and they seem like they might be better than using factory methods since they can hold onto documentation about fields.\r\n\r\nRegarding mathlib, I've compiled part of it, and the only change so far has been the different handling of un-applied projections (where before they'd keep their implicit arguments). This detail isn't used often and it's easy to fix. I still need to compile all of mathlib -- the big changes to notation handling have made compiling it more difficult, but I'm going to try again with that change removed."},{"author":"kmill","file":"src/frontends/lean/elaborator.h","date":"2022-08-24T16:56:45Z","comment":"So far a difference that's shown up is that if `hab : a < b` with `a b : ℤ` then you need to do `int.lt.dest hab` rather than `hab.dest` (which gives \"error: invalid field notation, function 'int.lt.dest' does not have explicit argument with type (int.lt ...)\"). This appears to match Lean 4 behavior using this test:\r\n```lean\r\ndef Nat.lt.foo {a b : Nat} (h : a < b) := a\r\n\r\nvariable (h : 1 < 2)\r\n#check h.foo\r\n/-\r\ninvalid field notation, function 'Nat.lt.foo' does not have argument\r\nwith type (Nat.lt ...) that can be used, it must be explicit or implicit\r\nwith an unique name\r\n-/\r\n```"},{"author":"kmill","file":"src/frontends/lean/elaborator.h","date":"2022-08-25T01:52:06Z","comment":"It turns out this `h.foo` feature depends on a (mis?)-feature of dot notation, which is that when you have `h.foo` in a non-application position (like here) then it will insert `h` as the first argument. With the change to unify the behavior of applications and non-applications, this no longer works. It turns out this feature is used often in mathlib (for example, `a.of_dual` [here](https://github.com/leanprover-community/mathlib/blob/f5afe205c23d7e9f065a04390cc337dfdb7e6e65/src/order/bounded_order.lean#L895) manages to invoke the `has_coe_to_fun` instance for `with_top.of_dual : with_top αᵒᵈ ≃ with_bot α`).\r\n\r\nFor now, I've added a generalized version of this feature, where if the resolution procedure fails to find an explicit argument of the right type, it inserts it as the first argument. It's not compatible with Lean 4, though. We could artificially limit this feature to only apply when there are no arguments, matching the previous behavior, but it seems useful for implementing extension methods, which this and the alias method feature would give you. (Another design would be for dot notation to try synthesizing `has_coe_to_fun` instances when the resolved method is not a function.)"},{"author":"kmill","file":"src/frontends/lean/elaborator.h","date":"2022-08-25T01:55:39Z","comment":"I've compiled about 910 mathlib oleans with this PR, and the only kind of change has been to deal with reverse incompatibility like so:\r\n```\r\n-  add_mem' := W.add_mem',\r\n+  add_mem' := λ _ _, W.add_mem',\r\n```\r\nThis is because `add_mem'` has implicit arguments, so we need the lambda to ensure there are arguments for them.\r\n\r\nSometimes the fix is to move arguments before the colon:\r\n```\r\n-theorem map_rel_iff (f : r ≃r s) : ∀ {a b}, s (f a) (f b) ↔ r a b := f.map_rel_iff'\r\n+theorem map_rel_iff (f : r ≃r s) {a b} : s (f a) (f b) ↔ r a b := f.map_rel_iff'\r\n```"}],"tags":[{"tag":"awaiting-author","description":""}],"commits":[{"author":"kmill","committer":"kmill","hash":"8be02a8c8780a247f645e527924fc34bf1ad0d28","message":"feat(elaborator,pp): improvements to dot notation\n\nThis is a work in progress","date":"2022-03-26T04:04:27Z"},{"author":"kmill","committer":"kmill","hash":"94c335e5e74f85128db717821ce3ce7692390929","message":"Merge branch 'master' of https://github.com/leanprover-community/lean into kmill_backport_dot","date":"2022-08-23T02:10:56Z"},{"author":"kmill","committer":"kmill","hash":"46aad4de2f8e33e400bafb6c2dcc6925dba93aa1","message":"more accurate backport of field elaboration","date":"2022-08-23T21:36:09Z"},{"author":"kmill","committer":"kmill","hash":"5e0a5d6890fbaa5d3e0047d0f1ba3b9dec46d7e6","message":"allow error to make progress","date":"2022-08-23T22:57:08Z"},{"author":"kmill","committer":"kmill","hash":"5b22baea90edffb0e60233f4794d12c0698be266","message":"eliminate union","date":"2022-08-24T16:05:25Z"},{"author":"kmill","committer":"kmill","hash":"7d3f355ac4e8d0d2236c19cc96e0a3f68cea5758","message":"improve error message; add stopgap to simplify mathlib update","date":"2022-08-25T01:21:00Z"},{"author":"kmill","committer":"kmill","hash":"4c29498b76acc5a5d94116cf97a9b1c8322e72aa","message":"fix test","date":"2022-08-25T01:40:00Z"}]},{"author":"digama0","number":756,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"M","additions":5,"deletions":4}],"state":"closed","open_date":"2022-08-18T19:21:37Z","update_date":"2022-08-24T12:48:19Z","discussion":[{"author":"gebner","date":"2022-08-24T11:59:15Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-08-24T12:48:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7994188172?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7994188617?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7994188867?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7994188762?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7994188452?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7994188332?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7994188024?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7994189079?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"132e37a91247568bcf39dff8d33efaaf93c109f8","message":"feat(frontends/lean/parser.cpp): store command end pos","date":"2022-08-18T19:21:12Z"}]},{"author":"eric-wieser","number":755,"diff_summary":[{"file":"library/init/logic.lean","status":"M","additions":3,"deletions":4}],"state":"closed","open_date":"2022-08-17T16:18:39Z","update_date":"2022-08-17T19:15:11Z","discussion":[{"author":"gebner","date":"2022-08-17T16:24:12Z","comment":"I guess we can also remove the `[decidable q]` argument now."},{"author":"eric-wieser","date":"2022-08-17T18:31:11Z","comment":"Good point, done"},{"author":"gebner","date":"2022-08-17T18:37:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-08-17T19:15:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7885390066?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7885389471?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7885390656?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7885390554?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7885390385?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7885390292?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7885389789?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7885390809?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"bfc6cd3183b7e20cf449b55d394513bc723146b6","message":"chore(library/init/logic): remove an unnecessary case split from `or.by_cases`","date":"2022-08-17T16:17:52Z"},{"author":"eric-wieser","committer":"web-flow","hash":"085eb8fcfd06d7c640fff32b9f8a8c50e8bac76f","message":"Update logic.lean","date":"2022-08-17T18:30:18Z"}]},{"author":"digama0","number":754,"diff_summary":[{"file":"library/init/algebra/classes.lean","status":"M","additions":164,"deletions":95},{"file":"library/init/logic.lean","status":"M","additions":164,"deletions":95},{"file":"src/frontends/lean/notation_cmd.cpp","status":"M","additions":164,"deletions":95},{"file":"src/frontends/lean/parser.h","status":"M","additions":164,"deletions":95},{"file":"src/frontends/lean/parser_config.cpp","status":"M","additions":164,"deletions":95},{"file":"src/frontends/lean/parser_config.h","status":"M","additions":164,"deletions":95},{"file":"src/frontends/lean/tokens.cpp","status":"M","additions":164,"deletions":95},{"file":"src/frontends/lean/tokens.h","status":"M","additions":164,"deletions":95},{"file":"src/frontends/lean/tokens.txt","status":"M","additions":164,"deletions":95},{"file":"src/library/tactic/backward/backward_lemmas.cpp","status":"M","additions":164,"deletions":95},{"file":"tests/lean/712.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/assertion1.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/bad_quoted_symbol.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/calc1.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/hole_issue2.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/local_notation_meta_bug.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/nary_overload.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/notation2.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/notation3.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/notation4.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/over_notation.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/reserve_bugs.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/1705.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/assoc_flat.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/choice_anon_ctor.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/coe_to_fn.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/e1.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/match_convoy.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/match_convoy3.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/monad_univ_lift.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/nat_bug4.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/nat_bug7.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/not_bug1.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/over_subst.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/overload2.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/prec_max.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/reserve.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/rvec.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/secnot.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/simp_univ_poly.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/soundness.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/tc_inout1.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/type_equations.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/run/u_eq_max_u_v.lean","status":"M","additions":164,"deletions":95},{"file":"tests/lean/t13.lean","status":"M","additions":164,"deletions":95}],"state":"closed","open_date":"2022-08-16T20:51:42Z","update_date":"2022-08-17T15:29:58Z","discussion":[{"author":"gebner","date":"2022-08-17T14:51:31Z","comment":"I guess this doesn't do anything if you import two notations with conflicting names, but it's good enough for the port.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-08-17T15:29:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7881437475?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7881436428?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7881437915?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7881437740?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7881437219?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7881436844?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7881436623?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7881438140?check_suite_focus=true)"},{"author":"digama0","date":"2022-08-17T22:43:01Z","comment":"> I guess this doesn't do anything if you import two notations with conflicting names, but it's good enough for the port.\r\n\r\nNot sure what you mean: it gives an error if it ever has overlapping names in a scope. If you have two conflicting notations in separate imports, it should be an import error, although I didn't test that. As long as the env extension is constructed by calling `add` on each thing in the new file it should hit the error."},{"author":"gebner","date":"2022-08-18T08:23:51Z","comment":"Ah, my bad.  You're right of course.  I only saw the `check_notation_name` function at first, which is called from the parser but not during imports.  But then there's also a second check in `notation_config::add_entry` that I overlooked."},{"author":"kmill","date":"2022-08-23T23:45:56Z","comment":"Does anyone have a mathlib branch that's been updated with this change? I haven't been able to figure out how to alter mathlib in some cases. For example, no matter what I do to the stream `cons` notation I get the following error:\r\n```\r\nsrc/data/stream/init.lean:7:0: error: invalid import: data.stream.defs\r\ninvalid notation, a notation named '«expr :: »' has already been declared\r\n```"},{"author":"digama0","date":"2022-08-24T01:51:39Z","comment":"The following seems to work (at `data/stream/defs.lean`):\r\n```\r\nnotation (name := stream.cons) h :: t := cons h t\r\n```\r\nFor updating mathlib generally, you should start a branch and we can work on it together, if you like.\r\n\r\nNote: I encountered issues here with outdated oleans causing the import error even after I fixed the issue. Make sure you clear oleans, and maybe there is an issue in the hashing algorithm that is preventing it from picking up on changes when the only thing that is changed is a notation name."},{"author":"kmill","date":"2022-08-24T15:46:02Z","comment":"> Note: I encountered issues here with outdated oleans causing the import error even after I fixed the issue.\r\n\r\nAh, that was it, thanks!"},{"author":"digama0","date":"2022-08-24T19:17:28Z","comment":"By the way, I have pushed the mathlib update work I have done so far to https://github.com/leanprover-community/mathlib/tree/notation_name ."}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"e53c19521cbb79b44a546973003dee0639ce948e","message":"feat(frontend/lean/notation_cmds.cpp): `notation (name := ...)` syntax","date":"2022-08-16T20:45:17Z"},{"author":"digama0","committer":"digama0","hash":"1b8ee2c0ed982e2dd4bf3ed168b8209dacfa419f","message":"fix tests","date":"2022-08-17T00:54:33Z"}]},{"author":"gebner","number":753,"diff_summary":[{"file":"README.md","status":"M","additions":14,"deletions":2},{"file":"doc/changes.md","status":"M","additions":14,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":14,"deletions":2}],"state":"closed","open_date":"2022-08-08T09:02:38Z","update_date":"2022-08-08T10:28:42Z","discussion":[{"author":"gebner","date":"2022-08-08T09:48:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-08T10:28:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7722926673?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7722926190?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7722941458?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7722941339?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7722940861?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7722926858?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7722940438?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7722941679?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"129af39bc99b26e4bb5e084874aee9aad9b2da9b","message":"chore(*): release 3.46.0","date":"2022-08-08T09:02:20Z"},{"author":"gebner","committer":"gebner","hash":"37286c886354f74f775bc1a6dcb4d2763a64a520","message":"merge one more pr","date":"2022-08-08T09:04:01Z"}]},{"author":"digama0","number":752,"diff_summary":[{"file":"src/library/tlean_exporter.cpp","status":"M","additions":17,"deletions":14}],"state":"closed","open_date":"2022-08-07T18:00:38Z","update_date":"2022-08-08T08:01:22Z","discussion":[{"author":"gebner","date":"2022-08-08T07:21:37Z","comment":"> For reasons unknown, this doesn't just throw a stack overflow exception instead of segfaulting: it actually terminates correctly. Does `check_system` do some split stack shenanigans?\r\n\r\nNot that I know of, but there might be a `try { export_expr(); } catch (...) {}` somewhere.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-08-08T08:01:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7720638641?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7720638892?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7720639527?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7720639418?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7720639152?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7720639049?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7720639302?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7720639683?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"8a8aa65fa8352f01e258bb8360d385bba3b15fbc","message":"fix(library/tlean_exporter): add recursion guard","date":"2022-08-07T17:58:16Z"}]},{"author":"vihdzp","number":747,"diff_summary":[{"file":"library/init/algebra/classes.lean","status":"M","additions":19,"deletions":0}],"state":"closed","open_date":"2022-07-16T06:15:04Z","update_date":"2022-08-08T09:44:51Z","discussion":[{"author":"gebner","date":"2022-07-16T11:30:46Z","comment":"> I don't know what `is_per` means, so I skipped that one.\r\n\r\nThat obviously means P.E.R. and is short for partial equivalence relation.  That is, the relation is an equivalence relation on the subset `{ x | R x x }`."},{"author":"gebner","date":"2022-08-08T09:03:21Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-08-08T09:44:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7722195868?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7722196130?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7722196940?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7722196803?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7722196560?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7722196393?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7722195526?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7722197174?check_suite_focus=true)"}],"review_discussion":[{"author":"eric-wieser","file":"library/init/algebra/classes.lean","date":"2022-07-21T16:32:31Z","comment":"```suggestion\r\n/-- `is_equiv X r` means that the binary relation `r` on `X` is an equivalence relation, that\r\n```"}],"tags":[],"commits":[{"author":"vihdzp","committer":"vihdzp","hash":"298fe8e187f1795b733d8bf339b3c6759d54d8a3","message":"add docstrings","date":"2022-07-16T06:13:13Z"},{"author":"vihdzp","committer":"vihdzp","hash":"293653257b1a84b59dec58379ec6f1be8b1ac5bf","message":"Update classes.lean","date":"2022-07-16T15:58:00Z"},{"author":"vihdzp","committer":"web-flow","hash":"fca43e4f5d79944363e798d3f9b02d1671913c21","message":"Update library/init/algebra/classes.lean\n\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>","date":"2022-07-21T16:32:58Z"}]},{"author":"vihdzp","number":746,"diff_summary":[{"file":"library/init/algebra/classes.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2022-07-15T04:47:37Z","update_date":"2022-07-15T08:59:27Z","discussion":[{"author":"gebner","date":"2022-07-15T08:24:10Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-07-15T08:59:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7354526714?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7354526912?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7354527728?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7354527634?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7354527290?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7354527167?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7354527457?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7354527920?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"vihdzp","committer":"vihdzp","hash":"eda0f840bd80ab3ad3c09a4a40d0f5b62eb97281","message":"Update classes.lean","date":"2022-07-15T04:39:05Z"}]},{"author":"eric-wieser","number":745,"diff_summary":[{"file":"README.md","status":"M","additions":89,"deletions":32},{"file":"doc/changes.md","status":"M","additions":89,"deletions":32},{"file":"library/init/meta/json.lean","status":"M","additions":89,"deletions":32},{"file":"src/CMakeLists.txt","status":"M","additions":89,"deletions":32},{"file":"src/library/vm/vm_json.cpp","status":"M","additions":89,"deletions":32},{"file":"tests/lean/json.lean","status":"M","additions":89,"deletions":32}],"state":"closed","open_date":"2022-07-13T16:11:51Z","update_date":"2022-07-13T19:48:04Z","discussion":[{"author":"eric-wieser","date":"2022-07-13T16:26:53Z","comment":"This should wait for #743 to finish merging"},{"author":"gebner","date":"2022-07-13T19:14:58Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-07-13T19:48:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7327793630?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7327793106?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7327793853?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7327793764?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7327793389?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7327793285?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7327792933?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7327794011?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"a17a1922c334180fca768604b2ac6735ee8d0916","message":"fix(library/vm/vm_json): avoid overflow and maximize precision in json serialization (#743)\n\nThe original code for reading integers from the json would truncate large integers. This now ensures that no precision is lost converting between the `json` C++ API and the lean API.\r\nThis now also uses `uint64_t` or `int64_t` to write Lean integers into json if possible, choosing whichever the lean integer fits in.\r\n\r\nUnfortunately our json library does not support big integers, so overflow into inexact floats is unavoidable for larger integers. This probably is made worse by the fact that we don't have a `native.double`, so the precision loss can be quite significant.\r\n\r\nThis also adds a `json.decidable_eq` instance, since it's useful in the tests and I needed it in downstream tests too.\r\n\r\nAlternative to #740.\n\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>","date":"2022-07-13T16:00:25Z"},{"author":"eric-wieser","committer":"web-flow","hash":"5a7f1edce442fc01d321d624001ecf7bd86ee2e6","message":"Version bump","date":"2022-07-13T16:03:04Z"},{"author":"eric-wieser","committer":"web-flow","hash":"950bfa2049409ea2704362569a0ebbd4ab5c8ed9","message":"Update README.md","date":"2022-07-13T16:03:40Z"},{"author":"eric-wieser","committer":"web-flow","hash":"c2964faa6d5f921f7767a45181cc13249ba95047","message":"Update changes.md","date":"2022-07-13T16:11:32Z"},{"author":"eric-wieser","committer":"web-flow","hash":"cb3b3287e93b0560343c58667d9e31e107b8e01b","message":"Update changes.md","date":"2022-07-13T16:12:55Z"}]},{"author":"digama0","number":744,"diff_summary":[{"file":"src/frontends/lean/builtin_cmds.cpp","status":"M","additions":5,"deletions":5},{"file":"tests/lean/interactive/info_id_pre_elab.lean.expected.out","status":"M","additions":5,"deletions":5}],"state":"closed","open_date":"2022-07-13T04:34:07Z","update_date":"2022-07-13T07:37:45Z","discussion":[{"author":"eric-wieser","date":"2022-07-13T06:36:50Z","comment":"This looks great!\r\n\r\n![image](https://user-images.githubusercontent.com/425260/178666974-c6ef37f9-6df3-4215-86c1-181a0475e7c5.png)\r\n"},{"author":"eric-wieser","date":"2022-07-13T06:36:58Z","comment":"bors merge"},{"author":"gebner","date":"2022-07-13T06:52:13Z","comment":"Ha, this was an easy fix!"},{"author":"bors[bot]","date":"2022-07-13T07:37:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7315656100?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7315656205?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7315656627?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7315656570?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7315656468?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7315656387?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7315656301?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7315656701?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"62dde70dadd4945ee7cd8315118371b41aa7d211","message":"fix(frontends/lean/builtin_cmds): use correct end pos for #check et al","date":"2022-07-13T04:33:22Z"}]},{"author":"eric-wieser","number":743,"diff_summary":[{"file":"library/init/meta/json.lean","status":"M","additions":73,"deletions":29},{"file":"src/library/vm/vm_json.cpp","status":"M","additions":73,"deletions":29},{"file":"tests/lean/json.lean","status":"M","additions":73,"deletions":29}],"state":"closed","open_date":"2022-07-12T17:05:08Z","update_date":"2022-07-13T16:34:56Z","discussion":[{"author":"gebner","date":"2022-07-13T16:00:07Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-07-13T16:34:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7324796992?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7324798534?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7324799221?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7324799032?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7324798115?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7324797952?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7324797404?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7324799689?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"cbdeeea46a61979144d40ec93b39e59ed826e77e","message":"fix: issue where json encoding integers used nat","date":"2022-07-11T08:27:54Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a090f43c7b978bf25503e3c637a87af968cb0190","message":"fix: different cases for signed and unsigned","date":"2022-07-11T13:15:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7941553b522ec84f8021208eaf5afb74ce4a5ec0","message":"fix: make it an mpz before passing to mk_vm_int","date":"2022-07-11T13:33:05Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"ed4432b1bd49edf0554eaf35f4344ca5af4e0bce","message":"wip","date":"2022-07-11T15:15:16Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"792e9a0d1cdd8a6c7d0dfd3315e59fbc689ea99b","message":"refactor(util/numerics/mpz): rename `get_int` and `is_int` to `get<int>` and `is<int>`\n\nThis makes it easier to write downstream templates","date":"2022-07-11T15:27:51Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"d365e31adcc82ccede6406b5bd98369a87e8dc99","message":"add tests","date":"2022-07-11T15:43:28Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"744cdd047e0813f0aab8f585e6aba088f5bf5970","message":"fix style complaints","date":"2022-07-11T16:25:45Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"4b78978340a1f64d231d0c18b710ef743baf11d4","message":"golf","date":"2022-07-11T16:57:44Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"8957b7f6b432c6fa01e0d8cf9c860608e7eb461d","message":"fix","date":"2022-07-11T17:47:54Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"a85b57b66f3c87196c7ca0d0c734d4e4f63937bc","message":"add the other fields","date":"2022-07-11T18:05:03Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"bcf6db889767f2e127f981674632df3b084d4265","message":"style fix","date":"2022-07-11T18:05:50Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"bf5040c6499477767c567fa6ea2935e0c6da9efe","message":"fix CI","date":"2022-07-11T18:13:43Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"b3151251d19453dd31da5ccf9ce321781ff0133b","message":"unswap","date":"2022-07-11T21:06:59Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"5095accc2a46d2c6b0ee0b082520143dfcf8f60f","message":"add assertion, column align","date":"2022-07-11T21:10:36Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"ee0489da3e3bc4cd9cf32e2a469edaaba56e8c13","message":"Merge branch 'eric-wieser/tidy-mpz' into eric-wieser/json-fix","date":"2022-07-11T22:06:12Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"f5b5d6f56b0a78d3ab9d49aa23b31ac995f24671","message":"wip","date":"2022-07-11T22:33:40Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"1b5f6c6a31757cf7ba482ea60935bec767aad6c7","message":"Merge remote-tracking branch 'origin/master' into eric-wieser/json-fix","date":"2022-07-12T16:27:54Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"46be3600e2ec2f1885178b24749c3b8f2c9a2cbc","message":"add json.decidable_eq and tests","date":"2022-07-12T17:04:30Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"49fd98b3a65c22ee5c48b9c399b69930cc2c0d9d","message":"add more tests","date":"2022-07-13T08:41:29Z"}]},{"author":"eric-wieser","number":742,"diff_summary":[{"file":"library/init/meta/float.lean","status":"M","additions":120,"deletions":50},{"file":"src/frontends/lean/parser.cpp","status":"M","additions":120,"deletions":50},{"file":"src/library/string.cpp","status":"M","additions":120,"deletions":50},{"file":"src/library/type_context.cpp","status":"M","additions":120,"deletions":50},{"file":"src/library/vm/vm.cpp","status":"M","additions":120,"deletions":50},{"file":"src/library/vm/vm_float.cpp","status":"M","additions":120,"deletions":50},{"file":"src/library/vm/vm_int.cpp","status":"M","additions":120,"deletions":50},{"file":"src/library/vm/vm_int.h","status":"M","additions":120,"deletions":50},{"file":"src/library/vm/vm_nat.cpp","status":"M","additions":120,"deletions":50},{"file":"src/tests/util/numerics/mpz.cpp","status":"M","additions":120,"deletions":50},{"file":"src/util/numerics/mpz.cpp","status":"M","additions":120,"deletions":50},{"file":"src/util/numerics/mpz.h","status":"M","additions":120,"deletions":50},{"file":"tests/lean/float.lean","status":"M","additions":120,"deletions":50},{"file":"tests/lean/float.lean.expected.out","status":"M","additions":120,"deletions":50}],"state":"closed","open_date":"2022-07-12T00:19:28Z","update_date":"2022-07-12T15:47:11Z","discussion":[{"author":"bors[bot]","date":"2022-07-12T12:34:25Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2022-07-12T15:05:08Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-07-12T15:47:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7304595776?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7304595284?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7304596845?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7304596677?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7304596337?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7304596203?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7304596024?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7304597152?check_suite_focus=true)"}],"review_discussion":[{"author":"eric-wieser","file":"src/util/numerics/mpz.h","date":"2022-07-12T09:24:21Z","comment":"This seems to set an FPU error if called with `v = inf`. I think that's ok, since I think `x / 0` also sets an FPU error, and the contract of the API is to Not Do That."},{"author":"EdAyers","file":"src/util/numerics/mpz.h","date":"2022-07-12T11:02:42Z","comment":"Yeah errors are ok here, it's not worth trying to make a error-safe api for floats"},{"author":"EdAyers","file":"src/library/vm/vm_float.cpp","date":"2022-07-12T11:04:06Z","comment":"maybe add a note to the docstrings of these functions saying that they panic when passed an infinite number."},{"author":"eric-wieser","file":"src/library/vm/vm_float.cpp","date":"2022-07-12T12:25:20Z","comment":"I added a remark that the input must be finite. I wasn't sure it was worth mentioning a panic."},{"author":"gebner","file":"src/util/numerics/mpz.h","date":"2022-07-12T12:30:31Z","comment":"Does the FPU error affect anything?"},{"author":"gebner","file":"src/library/vm/vm_float.cpp","date":"2022-07-12T12:31:43Z","comment":"```suggestion\r\n        if (!std::isfinite(b)) return mk_vm_int(0);\r\n```\r\nExceptions are very inconvenient in the VM, since there's no way to catch them."},{"author":"eric-wieser","file":"src/library/vm/vm_float.cpp","date":"2022-07-12T13:01:55Z","comment":"I based the decision off of\r\nhttps://github.com/leanprover-community/lean/blob/b2ebf25256ada9ebf888bf5c5fe327e2022207b9/src/library/vm/vm_int.cpp#L197\r\n\r\nBut looking again that's a \"if I tried to do what you asked I'd exhaust all your memory\" situation.\r\n\r\nI guess I should move this behavior to `mk_vm_int(double)` now that I don't need to specialize the error message?"},{"author":"eric-wieser","file":"src/util/numerics/mpz.h","date":"2022-07-12T13:13:45Z","comment":"It causes the process to exit, at least in ctest"}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"eaf4117edee377d2e4273d2c24298a0b4f8f4756","message":"refactor(util/numerics/mpz): replace `v.get<T>()` with `static_cast<T>(v)`\n\nThe benefit here is that we don't then need to treat `mpz` specially when writing functions which are generic over numeric types.\n\nThis also adds a missing constructor from doubles, which we can later use to prevent overflow in `native.float.floor`.","date":"2022-07-11T23:10:39Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"5aed22b149ec814f5190115d9b989cb6a18046a4","message":"fix(library/vm/vm_float): fix overflow errors\n\nThe behavior before this change was:\n```\n#eval native.float.of_nat 0x100000000    -- 0\n#eval native.float.of_int 0x100000000    -- 0\n#eval (0x100000000 : native.float).floor  -- -2147483648\n#eval (0x100000000 : native.float).ceil   -- -2147483648\n#eval (0x100000000 : native.float).round  -- -2147483648\n```\n\nThe fix is to convert between floats and large ints/nats through `mpz`.","date":"2022-07-12T00:15:59Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"3dc6a8fe7bcfd5f1cb93a369f9f82d5323ef3790","message":"fix","date":"2022-07-12T07:42:59Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"28c84fbedb3aad8ba282f07fbdb56ec1a302821e","message":"fix the floating point fault","date":"2022-07-12T07:58:50Z"},{"author":"eric-wieser","committer":"web-flow","hash":"16d9d28d0f95abd3cba39863cde422d9dab756ca","message":"Update settings.json","date":"2022-07-12T09:22:47Z"},{"author":"eric-wieser","committer":"web-flow","hash":"b2ebf25256ada9ebf888bf5c5fe327e2022207b9","message":"Add to docstrings","date":"2022-07-12T11:31:05Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"1816dd28d1bed628e654422469a927353e6d1073","message":"fix","date":"2022-07-12T14:33:40Z"}]},{"author":"eric-wieser","number":741,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"M","additions":118,"deletions":29},{"file":"src/library/string.cpp","status":"M","additions":118,"deletions":29},{"file":"src/library/type_context.cpp","status":"M","additions":118,"deletions":29},{"file":"src/library/vm/vm.cpp","status":"M","additions":118,"deletions":29},{"file":"src/library/vm/vm_int.cpp","status":"M","additions":118,"deletions":29},{"file":"src/library/vm/vm_nat.cpp","status":"M","additions":118,"deletions":29},{"file":"src/tests/util/numerics/mpz.cpp","status":"M","additions":118,"deletions":29},{"file":"src/util/numerics/mpz.cpp","status":"M","additions":118,"deletions":29},{"file":"src/util/numerics/mpz.h","status":"M","additions":118,"deletions":29}],"state":"closed","open_date":"2022-07-11T15:31:23Z","update_date":"2022-07-11T22:42:34Z","discussion":[{"author":"eric-wieser","date":"2022-07-11T22:02:44Z","comment":"> Otherwise LGTM.\r\n\r\nI'm going to assume that's a \"bors d+\", since I added the suggested assertion; that should unblock #740\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-07-11T22:42:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7291551452?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7291551587?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7291552146?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7291551969?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7291551298?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7291551219?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7291551754?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7291552326?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"src/util/numerics/mpz.cpp","date":"2022-07-11T18:10:07Z","comment":"Should these have a `lean_assert` like the other ones?"},{"author":"eric-wieser","file":"src/util/numerics/mpz.cpp","date":"2022-07-11T18:19:16Z","comment":"The `is<long long>` check is much more expensive here, and we'll hit the assertions when we call the functions for the high and low word anyway "},{"author":"gebner","file":"src/util/numerics/mpz.cpp","date":"2022-07-11T18:26:47Z","comment":"Note that `lean_assert` is only called in debug builds."},{"author":"eric-wieser","file":"src/util/numerics/mpz.h","date":"2022-07-11T18:55:02Z","comment":"This assertion is failing but I'm not sure where or why."},{"author":"eric-wieser","file":"src/util/numerics/mpz.cpp","date":"2022-07-11T21:11:06Z","comment":"Added"}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"792e9a0d1cdd8a6c7d0dfd3315e59fbc689ea99b","message":"refactor(util/numerics/mpz): rename `get_int` and `is_int` to `get<int>` and `is<int>`\n\nThis makes it easier to write downstream templates","date":"2022-07-11T15:27:51Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"d365e31adcc82ccede6406b5bd98369a87e8dc99","message":"add tests","date":"2022-07-11T15:43:28Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"744cdd047e0813f0aab8f585e6aba088f5bf5970","message":"fix style complaints","date":"2022-07-11T16:25:45Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"4b78978340a1f64d231d0c18b710ef743baf11d4","message":"golf","date":"2022-07-11T16:57:44Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"8957b7f6b432c6fa01e0d8cf9c860608e7eb461d","message":"fix","date":"2022-07-11T17:47:54Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"a85b57b66f3c87196c7ca0d0c734d4e4f63937bc","message":"add the other fields","date":"2022-07-11T18:05:03Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"bcf6db889767f2e127f981674632df3b084d4265","message":"style fix","date":"2022-07-11T18:05:50Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"bf5040c6499477767c567fa6ea2935e0c6da9efe","message":"fix CI","date":"2022-07-11T18:13:43Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"b3151251d19453dd31da5ccf9ce321781ff0133b","message":"unswap","date":"2022-07-11T21:06:59Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"5095accc2a46d2c6b0ee0b082520143dfcf8f60f","message":"add assertion, column align","date":"2022-07-11T21:10:36Z"}]},{"author":"EdAyers","number":740,"diff_summary":[{"file":"src/library/vm/vm_json.cpp","status":"M","additions":19,"deletions":4},{"file":"src/util/numerics/mpz.h","status":"M","additions":19,"deletions":4},{"file":"tests/lean/json.lean","status":"M","additions":19,"deletions":4},{"file":"tests/lean/json.lean.expected.out","status":"M","additions":19,"deletions":4}],"state":"closed","open_date":"2022-07-11T08:31:54Z","update_date":"2022-07-15T10:04:00Z","discussion":[{"author":"eric-wieser","date":"2022-07-12T09:21:19Z","comment":"I have another branch based off #742 that fixes this, as well as fixing the encoding too."}],"review_discussion":[{"author":"eric-wieser","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T08:41:54Z","comment":"I think you need to check `is_number_unsigned` and `is_number_signed` separately"},{"author":"EdAyers","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T09:29:23Z","comment":"The code is the same for both cases no?"},{"author":"gebner","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T09:33:34Z","comment":"https://nlohmann.github.io/json/features/types/number_handling/  We should also use `uint64_t` and `int64_t` instead of `int`."},{"author":"eric-wieser","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T09:39:24Z","comment":"I had a quick go at using mpz directly in the json parser, but I think heap objects aren't supported"},{"author":"eric-wieser","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T09:41:05Z","comment":"@EdAyers: it's not the same, you need a different type for `i` in the two cases"},{"author":"gebner","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T13:03:16Z","comment":"Do you know which `mk_vm_int` this resolves to?  Is it the `mpz` overload?"},{"author":"EdAyers","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T13:20:57Z","comment":"I would guess it's the middle one. But I don't know.\r\n\r\n```\r\nvm_obj mk_vm_int(int n) {\r\n    return is_small_int(n) ? mk_vm_simple(to_unsigned(n)) : mk_vm_mpz(mpz(n));\r\n}\r\n\r\nvm_obj mk_vm_int(unsigned n) {\r\n    return is_small_int(n) ? mk_vm_simple(to_unsigned(n)) : mk_vm_mpz(mpz(n));\r\n}\r\n\r\nvm_obj mk_vm_int(mpz const & n) {\r\n    return is_small_int(n) ? mk_vm_simple(to_unsigned(n.get_int())) : mk_vm_mpz(n);\r\n}\r\n```"},{"author":"gebner","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T13:26:26Z","comment":"The middle and top ones are bad and will truncate the value.  Can we just always use `mpz`?"},{"author":"EdAyers","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T14:04:37Z","comment":"I don't get why the top ones are bad, doesn't the is_small_int(n) stop the truncation? And the `mk_vm_int(mpz const & n)` method converts to a non-mpz anyway."},{"author":"eric-wieser","file":"src/util/numerics/mpz.h","date":"2022-07-11T14:43:49Z","comment":"This isn't safe on windows (where long = int). Let me push the corrected version..."},{"author":"eric-wieser","file":"src/util/numerics/mpz.h","date":"2022-07-11T15:31:42Z","comment":"The correct definition is in #741"},{"author":"gebner","file":"src/library/vm/vm_json.cpp","date":"2022-07-11T18:07:46Z","comment":"It's because `unsigned`/`int` are 32-bit while `uint64_t`/`int64_t` are 64-bit."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"cbdeeea46a61979144d40ec93b39e59ed826e77e","message":"fix: issue where json encoding integers used nat","date":"2022-07-11T08:27:54Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a090f43c7b978bf25503e3c637a87af968cb0190","message":"fix: different cases for signed and unsigned","date":"2022-07-11T13:15:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"1ec8e70575a4b59e9d2179ddef005a2b7ecabe9c","message":"fix: make it an mpz before passing to mk_vm_int","date":"2022-07-11T14:10:51Z"}]},{"author":"eric-wieser","number":739,"diff_summary":[{"file":"src/frontends/lean/structure_cmd.cpp","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2022-07-10T09:17:54Z","update_date":"2022-07-11T14:18:44Z","discussion":[{"author":"gebner","date":"2022-07-11T13:34:53Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-07-11T14:18:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7283329322?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7283329071?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7283329935?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7283329813?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7283328862?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7283328635?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7283329523?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7283330142?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"e12af5f5224665ea98daa41178dfc814027d82e8","message":"fix(frontends/lean/structure_cmd): empty structures are structures","date":"2022-07-10T09:17:40Z"}]},{"author":"gebner","number":737,"diff_summary":[{"file":"README.md","status":"M","additions":8,"deletions":2},{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2}],"state":"closed","open_date":"2022-06-27T10:10:54Z","update_date":"2022-06-27T10:41:12Z","discussion":[{"author":"gebner","date":"2022-06-27T10:11:14Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-27T10:41:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7070600423?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7070606513?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7070601198?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7070607129?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7070606843?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7070606744?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7070600850?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7070607342?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"578c9c35f8b7aaf4b925eca312651a737858288b","message":"chore(*): release 3.44.1","date":"2022-06-27T10:10:44Z"}]},{"author":"eric-wieser","number":736,"diff_summary":[{"file":"src/library/tactic/dsimplify.cpp","status":"M","additions":28,"deletions":25},{"file":"src/library/tactic/dsimplify.h","status":"M","additions":28,"deletions":25},{"file":"src/library/tactic/simp_lemmas.cpp","status":"M","additions":28,"deletions":25},{"file":"src/library/tactic/smt/hinst_lemmas.cpp","status":"M","additions":28,"deletions":25},{"file":"src/library/tactic/smt/smt_state.cpp","status":"M","additions":28,"deletions":25}],"state":"closed","open_date":"2022-06-26T14:41:10Z","update_date":"2022-06-26T15:44:09Z","discussion":[{"author":"gebner","date":"2022-06-26T15:07:52Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-26T15:44:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7061605477?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7061605580?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7061605794?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7061605756?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7061605674?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7061605641?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7061605720?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7061605842?check_suite_focus=true)"}],"review_discussion":[{"author":"kmill","file":"src/library/tactic/dsimplify.cpp","date":"2022-06-26T15:24:44Z","comment":"You could still include the early break (`if (!simp_lemmas_ptr) break;`) in the form of\r\n```c++\r\nif (simp_lemmas.empty()) break;\r\n```\r\nthough this is a micro-optimization since `new_e == curr_e` does start with a pointer check after just a couple layers of indirection."},{"author":"kmill","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-26T15:33:08Z","comment":"Is this proof not used, even for `simp`?"},{"author":"eric-wieser","file":"src/library/tactic/dsimplify.cpp","date":"2022-06-26T16:21:58Z","comment":"Yeah, I concluded this was a micro-optimization so there was no point."},{"author":"eric-wieser","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-26T16:22:55Z","comment":"The proof is used by `simp`; the new diff just doesn't invoke `propext` here, as its best to let `simp` handle that itself so that this lemma is keyed by the right head symbol."}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"39e039cdc30ef0792eaecd8e7e9845f4ae008607","message":"fix(tactic/simp_lemmas): do not treat `iff` refl lemmas as if they were `eq` refl lemmas","date":"2022-06-26T14:36:13Z"}]},{"author":"gebner","number":735,"diff_summary":[{"file":"README.md","status":"M","additions":18,"deletions":2},{"file":"doc/changes.md","status":"M","additions":18,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":18,"deletions":2}],"state":"closed","open_date":"2022-06-24T12:45:07Z","update_date":"2022-06-24T13:21:32Z","discussion":[{"author":"gebner","date":"2022-06-24T12:49:48Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-24T13:21:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7041824538?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7041824668?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7041807512?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7041825061?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7041807015?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7041824897?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7041824779?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7041807233?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"b6a05497b985c1472af40794faecd41c1a5ac32f","message":"chore(*): release 3.44.0","date":"2022-06-24T12:44:53Z"}]},{"author":"eric-wieser","number":734,"diff_summary":[{"file":"library/init/meta/attribute.lean","status":"M","additions":53,"deletions":37},{"file":"library/init/meta/derive.lean","status":"M","additions":53,"deletions":37},{"file":"library/init/meta/expr.lean","status":"M","additions":53,"deletions":37},{"file":"library/init/meta/has_reflect.lean","status":"M","additions":53,"deletions":37},{"file":"library/init/meta/lean/parser.lean","status":"M","additions":53,"deletions":37},{"file":"library/init/meta/mk_has_reflect_instance.lean","status":"M","additions":53,"deletions":37},{"file":"library/init/meta/pexpr.lean","status":"M","additions":53,"deletions":37},{"file":"library/init/meta/tactic.lean","status":"M","additions":53,"deletions":37},{"file":"tests/lean/derive.lean.expected.out","status":"M","additions":53,"deletions":37},{"file":"tests/lean/eval_expr_error.lean.expected.out","status":"M","additions":53,"deletions":37},{"file":"tests/lean/reflect_type_defeq.lean","status":"M","additions":53,"deletions":37},{"file":"tests/lean/reflect_type_defeq.lean.expected.out","status":"M","additions":53,"deletions":37},{"file":"tests/lean/run/1590.lean","status":"M","additions":53,"deletions":37},{"file":"tests/lean/run/exhaustive_vm_impl_test.lean","status":"M","additions":53,"deletions":37},{"file":"tests/lean/run/reflected.lean","status":"M","additions":53,"deletions":37}],"state":"closed","open_date":"2022-06-23T10:00:13Z","update_date":"2022-06-23T20:56:08Z","discussion":[{"author":"eric-wieser","date":"2022-06-23T17:00:56Z","comment":"> Did you actually run into any issues with the wrong instance or was it just cosmetics? From what I can tell, even if you get the wrong instance the expr should still be defeq to the expected one.\r\n\r\nThe expr is defeq, but I assume it won't pick up the right typeclass instances if you antiquote it into an expression because its inferred type is wrong."},{"author":"gebner","date":"2022-06-23T18:06:37Z","comment":"> I assume it won't pick up the right typeclass instances if you antiquote it into an expression because its inferred type is wrong.\r\n\r\nI still can't tell if you encountered an actual error.  Could you please post the antiquotation issue that is broken/wrong now, and will work after this PR?"},{"author":"eric-wieser","date":"2022-06-23T19:19:50Z","comment":"Sure, here's a mwe on mathlib master:\r\n```lean\r\nimport algebra.group.type_tags\r\nimport data.int.basic\r\n\r\nrun_cmd do\r\n  let x : multiplicative ℤ := multiplicative.of_add 3,\r\n  let p1 : pexpr := ``(%%`(x) * %%`(x)),\r\n  let p2 : pexpr := ``(%%`(x * x)),\r\n  e1 ← tactic.to_expr p1,\r\n  e2 ← tactic.to_expr p2,\r\n  x1 ← tactic.eval_expr (multiplicative ℤ) e1,\r\n  x2 ← tactic.eval_expr (multiplicative ℤ) e2,\r\n  tactic.trace (x1.to_add, x2.to_add)  -- (9, 6)\r\n```\r\nThe correct output should be `(6, 6)`, but without the change in this PR it's impossible to add the instance that makes that fix without running into a loop / having it fire on `ℤ` too"},{"author":"gebner","date":"2022-06-23T20:24:48Z","comment":"Okay, got it.  That one could probably also be fixed in the quotation code directly, without modifying `reflected`.\r\n\r\nBut there's also the cosmetic issue that `reflect` should pick `coe` instead of `some` etc. so it's probably a good idea to change `reflected` anyhow.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-06-23T20:56:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7031306456?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7031306325?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7031307126?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7031307037?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7031306918?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7031306804?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7031306650?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7031307295?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"tests/lean/run/reflected.lean","date":"2022-06-23T16:09:55Z","comment":"These are the \"run\" tests.  If the output matters, please make a new test in the `tests/lean` directory (where the output is compared to the checked-in `.expected` file)."},{"author":"eric-wieser","file":"tests/lean/run/reflected.lean","date":"2022-06-23T17:25:00Z","comment":"Moved, good call"}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"2a9cfb94c1231a349493e05eb2bdaba1c16f15dc","message":"add test","date":"2022-06-23T09:58:46Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"f3d039f145153757fa78249355840a7f01388ad3","message":"fix","date":"2022-06-23T11:33:01Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"3f9320bb37e6a5036b6c3d447b495e6a66b9969f","message":"fix tests","date":"2022-06-23T12:15:13Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"4ae84bfb3e271f8889c7a677ed6418bf0a8a8489","message":"move tests","date":"2022-06-23T17:05:20Z"}]},{"author":"digama0","number":732,"diff_summary":[{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":12,"deletions":1},{"file":"tests/lean/sort.lean","status":"A","additions":12,"deletions":1},{"file":"tests/lean/sort.lean.expected.out","status":"A","additions":12,"deletions":1}],"state":"closed","open_date":"2022-06-19T15:34:35Z","update_date":"2022-06-23T13:52:40Z","discussion":[{"author":"eric-wieser","date":"2022-06-23T13:17:41Z","comment":"bors merge\r\n\r\nSince this has plenty of :+1:s on Zulip, and the diff looks good"},{"author":"bors[bot]","date":"2022-06-23T13:52:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7024295221?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7024295695?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7024296658?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7024296489?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7024296205?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7024295996?check_suite_focus=true)\n  * Build sanitized\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7024296903?check_suite_focus=true)"}],"review_discussion":[{"author":"kmill","file":"tests/lean/sort.lean","date":"2022-06-19T15:46:29Z","comment":"They're not really necessary given the rest of the test suite, but would you mind adding `#check Sort 0` and `#check Prop` as passing tests?"}],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"3ca9443c54395d1fff0cae1441c6b87e65adfffd","message":"fix(lean/elaborator.cpp): reject `Sort` and suggest `Prop`","date":"2022-06-19T15:33:45Z"},{"author":"digama0","committer":"digama0","hash":"6fb5ac5c2158c4b59a05dd55e17658d8d2eeacca","message":"add more tests","date":"2022-06-19T15:48:09Z"}]},{"author":"EdAyers","number":730,"diff_summary":[{"file":"library/system/io.lean","status":"A","additions":41,"deletions":14},{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":41,"deletions":14},{"file":"tests/lean/run/io_unsafe_perform_io.lean","status":"A","additions":41,"deletions":14}],"state":"closed","open_date":"2022-06-14T20:21:35Z","update_date":"2022-06-15T10:44:47Z","discussion":[{"author":"gebner","date":"2022-06-14T21:25:55Z","comment":"You can also derive this with `cast undefined` if you're too clever:\r\n```lean\r\nimport system.io\r\nmeta def unsafe_perform_io {α} (m : io α) : except io.error α :=\r\nmatch (cast undefined m : unit → sum α io.error) () with\r\n| sum.inl a := except.ok a\r\n| sum.inr err := except.error err\r\nend\r\n```\r\n\r\nEither way we should remove the dangling reference to `tactic_state.mk_empty`."},{"author":"gebner","date":"2022-06-14T21:33:49Z","comment":"And we can now define `tactic_state.mk_empty`:\r\n```lean\r\nmeta def tactic_state.mk_empty : tactic_state :=\r\nmatch unsafe_perform_io (io.run_tactic tactic.read) with\r\n| except.ok s := s\r\n| except.error _ := undefined\r\nend\r\n```"},{"author":"gebner","date":"2022-06-15T10:09:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-15T10:44:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6897582357?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6897582219?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6897582601?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6897582503?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6897582081?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6897581997?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6897581820?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6897582748?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"library/system/io.lean","date":"2022-06-14T21:26:29Z","comment":"This remark doesn't work since we don't have `tactic_state.mk_empty`, right?  If that's correct we should remove it."},{"author":"EdAyers","file":"library/system/io.lean","date":"2022-06-14T21:28:59Z","comment":"yep"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"243fe35428216d9d19b2e292ea4fad77bed239e6","message":"feat: io.unsafe_perform_io\n\nIntroduces a function `io.unsafe_perform_io : io α → except io.error α`.\nIt is not possible to derive this from `tactic.unsafe_run_io` because\nthere is no `tactic_state.mk_empty`. The warnings about compiler\noptimisations have been moved from the `tactic.unsafe_run_io` docstring\nto `io.unsafe_perform_io`.","date":"2022-06-14T20:22:16Z"},{"author":"EdAyers","committer":"EdAyers","hash":"73b902f21e5c17e068891b6d114effb2735b972d","message":"fix: remove dangling reference to tactic_state.mk_empty","date":"2022-06-14T21:31:03Z"}]},{"author":"eric-wieser","number":729,"diff_summary":[{"file":"library/init/meta/expr.lean","status":"M","additions":3,"deletions":0}],"state":"closed","open_date":"2022-06-13T11:52:18Z","update_date":"2022-06-13T20:44:19Z","discussion":[{"author":"gebner","date":"2022-06-13T16:24:24Z","comment":"bors d+"},{"author":"bors[bot]","date":"2022-06-13T16:24:25Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2022-06-13T17:08:40Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-13T20:44:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6868755961?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6868756586?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6868756825?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6868756717?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6868756415?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6868756326?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6868756196?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6868756969?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"library/init/meta/expr.lean","date":"2022-06-13T14:06:56Z","comment":"```suggestion\r\nreflected. When working with `reflected`, `` `(foo %%ex %%ey) `` is syntactical sugar\r\nfor `` (`(λ x y, foo x y).subst ex).subst ey``. -/\r\n```\r\n\r\nOr maybe you wanted to say something different here?"},{"author":"eric-wieser","file":"library/init/meta/expr.lean","date":"2022-06-13T15:19:44Z","comment":"Your statement is true as a docstring for `expr.subst` but not for `reflected.subst`. While `` `(x) `` has type `reflected x`, `` `(foo %%x) `` has type `expr`."},{"author":"gebner","file":"library/init/meta/expr.lean","date":"2022-06-13T15:25:38Z","comment":"Ah!\r\n\r\n```suggestion\r\nreflected. To obtain a term of type `reflected _`, use `` (`(λ x y, foo x y).subst ex).subst ey`` instead of\r\nusing `` `(foo %%ex %%ey) `` (which returns an `expr`). -/\r\n```"},{"author":"eric-wieser","file":"library/init/meta/expr.lean","date":"2022-06-13T15:35:16Z","comment":"Do we care about line-wrapping?"},{"author":"gebner","file":"library/init/meta/expr.lean","date":"2022-06-13T16:24:21Z","comment":"That's up to you, I wouldn't worry about it."}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"36afbc308b1d069e8cd181bd3c7889e7b73fff6d","message":"Update expr.lean","date":"2022-06-13T11:51:51Z"},{"author":"eric-wieser","committer":"web-flow","hash":"17c453f7dc4ae7fc92e3b76f4b0344a65d900382","message":"Update library/init/meta/expr.lean\n\nCo-authored-by: Gabriel Ebner <gebner@gebner.org>","date":"2022-06-13T15:34:37Z"}]},{"author":"vihdzp","number":728,"diff_summary":[{"file":"library/init/logic.lean","status":"M","additions":2,"deletions":0}],"state":"closed","open_date":"2022-06-11T17:26:25Z","update_date":"2022-06-13T19:37:46Z","discussion":[{"author":"gebner","date":"2022-06-13T14:07:49Z","comment":"Usually we put these lemmas directly in mathlib (where they will also be checked by linters, etc.)."},{"author":"vihdzp","date":"2022-06-13T19:37:46Z","comment":"Alright, I'll add it as part of another PR in mathlib instead."}],"review_discussion":[],"tags":[],"commits":[{"author":"vihdzp","committer":"vihdzp","hash":"1ba036baf342ff59525bdaf93f8b26a587c6bf50","message":"Update logic.lean","date":"2022-06-11T17:22:42Z"},{"author":"vihdzp","committer":"vihdzp","hash":"ba104621017ae14212e6ad343f46ec62b875e0be","message":"Update logic.lean","date":"2022-06-11T17:47:58Z"}]},{"author":"eric-wieser","number":727,"diff_summary":[{"file":"src/frontends/lean/json.cpp","status":"M","additions":49,"deletions":20},{"file":"tests/lean/interactive/complete.lean.expected.out","status":"M","additions":49,"deletions":20},{"file":"tests/lean/interactive/complete_trailing_period.lean.expected.out","status":"M","additions":49,"deletions":20},{"file":"tests/lean/interactive/focus.lean.expected.out","status":"M","additions":49,"deletions":20},{"file":"tests/lean/interactive/goal_info_rw.lean.expected.out","status":"M","additions":49,"deletions":20},{"file":"tests/lean/interactive/info_goal.lean.expected.out","status":"M","additions":49,"deletions":20},{"file":"tests/lean/interactive/info_tactic.lean.expected.out","status":"M","additions":49,"deletions":20},{"file":"tests/lean/interactive/my_tac_class.lean.expected.out","status":"M","additions":49,"deletions":20},{"file":"tests/lean/interactive/rb_map_ts.lean.expected.out","status":"M","additions":49,"deletions":20},{"file":"tests/lean/interactive/term_goal_info.lean.expected.out","status":"M","additions":49,"deletions":20}],"state":"closed","open_date":"2022-06-10T21:34:47Z","update_date":"2022-06-14T14:59:42Z","discussion":[{"author":"gebner","date":"2022-06-13T10:02:35Z","comment":"LGTM.  You know that we're switching to Lean 4 soon™, right? :smile: \r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-06-13T10:04:06Z","comment":"Build failed:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6859138162?check_suite_focus=true)"},{"author":"gebner","date":"2022-06-13T10:17:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-13T10:18:50Z","comment":"Build failed:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6859359728?check_suite_focus=true)"},{"author":"gebner","date":"2022-06-13T14:02:00Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-13T20:03:02Z","comment":"Build failed:\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6862863197?check_suite_focus=true)"},{"author":"eric-wieser","date":"2022-06-14T07:33:30Z","comment":"I assume that was a network failure since it built fine in the PR?"},{"author":"eric-wieser","date":"2022-06-14T14:26:20Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-14T14:59:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6882487208?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6882487497?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6882487966?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6882487788?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6882486577?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6882486433?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6882486895?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6882488287?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"d82dd665f5fce38c9cf68d36391914e514f2b32b","message":"feat(server): record symbol kinds in completion info","date":"2022-06-10T21:15:31Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"ed10c2312c8c4400c6a4e65efef58ecefed34a80","message":"remove projections and constructors","date":"2022-06-10T22:41:03Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"30852e5b0531e3ca8352eb95f222d43d0eb0a3a0","message":"Overhaul detection","date":"2022-06-10T23:54:57Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"b05b237e94fe8c8224a905593c97e8db664c3bc3","message":"fix test","date":"2022-06-11T11:25:10Z"}]},{"author":"eric-wieser","number":726,"diff_summary":[{"file":".vscode/launch.json","status":"A","additions":31,"deletions":0},{"file":".vscode/settings.json","status":"A","additions":31,"deletions":0}],"state":"closed","open_date":"2022-06-10T17:03:17Z","update_date":"2022-06-10T19:13:43Z","discussion":[{"author":"gebner","date":"2022-06-10T17:13:06Z","comment":"I think you might be the first one to use the vscode debugger to debug Lean!\r\n\r\nPlease prepend `chore(.vscode):` or `feat(.vscode):` to the PR title."},{"author":"gebner","date":"2022-06-10T18:10:40Z","comment":"bors d+"},{"author":"bors[bot]","date":"2022-06-10T18:10:41Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2022-06-10T18:11:54Z","comment":"> I think you might be the first one to use the vscode debugger to debug Lean!\r\n\r\nI was actually able to do it in-browser in gitpod by sideloading `ms-vscode.cpptools`, but today I discovered that that violates the license agreement of `ms-vscode.cpptools` so I shouldn't be doing that any more, and shouldn't commit any config that enables it.\r\n"},{"author":"eric-wieser","date":"2022-06-10T18:39:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-10T19:13:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6836286551?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6836286123?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6836286884?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6836286806?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6836286383?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6836286306?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6836286671?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6836287020?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":".vscode/launch.json","date":"2022-06-10T17:15:05Z","comment":"Hah, this is an unorthodox way to make Lean figure out the correct search path."},{"author":"gebner","file":".vscode/launch.json","date":"2022-06-10T17:15:35Z","comment":"```suggestion\r\n            \"program\": \"${workspaceRoot}/bin/lean\",\r\n```\r\nWould this also work for you?  Then we wouldn't hardcode the cmake build path."},{"author":"eric-wieser","file":".vscode/launch.json","date":"2022-06-10T17:37:09Z","comment":"That's almost certainly fine; does cmake always copy the most recently-build target to that bin directory?"},{"author":"eric-wieser","file":".vscode/launch.json","date":"2022-06-10T17:40:57Z","comment":"(tested, this works just fine)"},{"author":"gebner","file":".vscode/launch.json","date":"2022-06-10T18:09:46Z","comment":"Yes, as long as you call `make bin_lean` or `make standard_lib` or `make` (instead of `make lean`)."}],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"450f80e7f7b73241b31f5ad43841b5dbc691c81e","message":"Add a debug configuration for vscode\n\nThis makes it slightly easier to debug `lean` when run against a single `.lean` file.","date":"2022-06-10T17:03:04Z"},{"author":"eric-wieser","committer":"web-flow","hash":"0a90eedc5d873695e2506ed33e340bd2bd9a3974","message":"Update .vscode/launch.json\n\nCo-authored-by: Gabriel Ebner <gebner@gebner.org>","date":"2022-06-10T17:38:11Z"},{"author":"eric-wieser","committer":"web-flow","hash":"e7eea28f54a0610139800821631f8d1b4ec97bb4","message":"Add basic cmake config too","date":"2022-06-10T17:45:28Z"}]},{"author":"eric-wieser","number":724,"diff_summary":[{"file":"src/frontends/lean/json.cpp","status":"A","additions":57,"deletions":6},{"file":"src/frontends/lean/json.h","status":"A","additions":57,"deletions":6},{"file":"src/shell/server.cpp","status":"A","additions":57,"deletions":6},{"file":"src/shell/server.h","status":"A","additions":57,"deletions":6},{"file":"tests/lean/interactive/symbols.input","status":"A","additions":57,"deletions":6},{"file":"tests/lean/interactive/symbols.input.expected.out","status":"A","additions":57,"deletions":6}],"state":"closed","open_date":"2022-06-09T08:33:20Z","update_date":"2022-06-15T16:03:23Z","discussion":[{"author":"gebner","date":"2022-06-09T08:51:00Z","comment":"> I'm not sure how best to test this\r\n\r\nYou could add a test like this one: https://github.com/leanprover-community/lean/blob/38b59111b2b4e6c572582b27e8937e92fc70ac02/tests/lean/interactive/info_import.input"},{"author":"gebner","date":"2022-06-10T17:03:25Z","comment":"Please prepend `feat(shell/server):` to the PR title.  Otherwise LGTM.\r\n\r\nbors d+"},{"author":"bors[bot]","date":"2022-06-10T17:03:26Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2022-06-10T17:42:24Z","comment":"Having through about this a little more, the \"what type is this\" characterizations probably  should leak through to the autocompletion API; I'll split out a PR to do that once I have my build systems set up again."},{"author":"eric-wieser","date":"2022-06-15T15:26:06Z","comment":"@gebner: this has changed a little bit (to include types), are you still happy with it? The downstream PRs are up to date with the new version."},{"author":"gebner","date":"2022-06-15T15:29:24Z","comment":"lgtm\r\nbors r+"},{"author":"bors[bot]","date":"2022-06-15T16:03:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6903039832?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6903039562?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6903040587?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6903040477?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6903040229?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6903040102?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6903039274?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6903040826?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"4f5e834433e48ffe0429741457f318e8cb60bad0","message":"add support for listing symbols in a file","date":"2022-06-09T08:26:07Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"5bc10d76aba425afa880728221376d1194631cd2","message":"Revert \"add support for listing symbols in a file\"\n\nThis reverts commit 4f5e834433e48ffe0429741457f318e8cb60bad0, which was pushed by accident.","date":"2022-06-09T08:30:35Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"da235887d7c80eedcee81acc8f0fc5415f901d58","message":"add support for listing symbols in a file:","date":"2022-06-09T08:32:37Z"},{"author":"eric-wieser","committer":"web-flow","hash":"e95dfed59f37827746f25ee3cc872c60c34969a9","message":"Create symbols.input","date":"2022-06-09T09:11:17Z"},{"author":"eric-wieser","committer":"web-flow","hash":"512d768ff62785cb341d74d4501f4aaff698ef78","message":"Create symbols.input.expected.out","date":"2022-06-09T09:18:57Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"e743d1aa476ba5904377987d3e0921e43a56c25c","message":"filter","date":"2022-06-09T09:34:32Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"86b820c8b7775fc506b61145d839fc542af63a3f","message":"Merge branch 'eric-wieser/list-symbols' of https://github.com/leanprover-community/lean into eric-wieser/list-symbols","date":"2022-06-09T09:34:38Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"d10b18be1cca71e777be9d6e24e6099b437d67f4","message":"fix test","date":"2022-06-09T10:07:21Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"03001d7945d1533501c8ffec6605256852d1a1f8","message":"golf","date":"2022-06-09T10:22:36Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"0ce2d779e06ca867af938e8eae5253d0544a3af2","message":"Record symbol type too","date":"2022-06-09T12:11:42Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"3762e3cdfa8c0d084fd3b114ac219d8c88bbfa78","message":"fix style","date":"2022-06-09T13:02:47Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"dc02b451eb253d0dee5798921b4e390958a37e1f","message":"Merge remote-tracking branch 'origin/master' into eric-wieser/list-symbols","date":"2022-06-14T16:01:37Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"baead1e26403fd1fc3069e9bf9eaae9c609e3de2","message":"wip","date":"2022-06-14T16:13:51Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"ddda085f3d6509752d8957b5d107e0690233b419","message":"add type info","date":"2022-06-15T09:50:06Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"4d09091a3211c9e46e1fe3eb9c1d14c14d3dceec","message":"update test to include types","date":"2022-06-15T10:50:45Z"},{"author":"eric-wieser","committer":"web-flow","hash":"811362dd42f55ff12e443bcb6102143478c492a7","message":"Update json.h","date":"2022-06-15T13:18:00Z"},{"author":"eric-wieser","committer":"web-flow","hash":"578e289f24a40cd251c90eb9e4313e537fb6bb0a","message":"Update json.h","date":"2022-06-15T13:18:16Z"}]},{"author":"eric-wieser","number":723,"diff_summary":[{"file":"src/frontends/lean/definition_cmds.cpp","status":"M","additions":38,"deletions":5},{"file":"src/library/app_builder.h","status":"M","additions":38,"deletions":5},{"file":"src/library/constants.cpp","status":"M","additions":38,"deletions":5},{"file":"src/library/constants.h","status":"M","additions":38,"deletions":5},{"file":"src/library/constants.txt","status":"M","additions":38,"deletions":5},{"file":"src/library/tactic/simp_lemmas.cpp","status":"M","additions":38,"deletions":5},{"file":"tests/lean/run/check_constants.lean","status":"M","additions":38,"deletions":5},{"file":"tests/lean/run/dsimp_test.lean","status":"M","additions":38,"deletions":5}],"state":"closed","open_date":"2022-06-08T20:02:30Z","update_date":"2022-06-24T11:24:27Z","discussion":[{"author":"eric-wieser","date":"2022-06-08T21:31:41Z","comment":"For my own reference, I was able to debug this in gitpod with the following `launch.json`:\r\n<details>\r\n\r\n```\r\n{\r\n    // Use IntelliSense to learn about possible attributes.\r\n    // Hover to view descriptions of existing attributes.\r\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\r\n    \"version\": \"0.2.0\",\r\n    \"configurations\": [\r\n        {\r\n            \"name\": \"Launch\",\r\n            \"cwd\": \"${workspaceFolder}/library\",\r\n            \"program\": \"${workspaceRoot}/build/debug/shell/lean\",\r\n            \"args\": [\"init/data/list/lemmas.lean\"],\r\n            \"type\":\"cppdbg\",\r\n            \"request\": \"launch\",\r\n            \"setupCommands\": [\r\n                {\r\n                  \"description\": \"Enable pretty-printing for gdb\",\r\n                  \"text\": \"-enable-pretty-printing\",\r\n                  \"ignoreFailures\": false\r\n                },\r\n                {\r\n                  \"description\": \"Enable pretty-printing for gdb\",\r\n                  \"text\": \"-interpreter-exec console \\\"source ${workspaceRoot}/bin/lean-gdb.py\\\"\",\r\n                  \"ignoreFailures\": false\r\n                }\r\n            ],\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n</details>"},{"author":"gebner","date":"2022-06-24T10:27:53Z","comment":"LGTM\r\nbors r+"},{"author":"bors[bot]","date":"2022-06-24T10:34:52Z","comment":"Canceled."},{"author":"eric-wieser","date":"2022-06-24T10:35:40Z","comment":"I updated a comment' ; I tried a different approach changing `get_eq_name()` to `get_iff_name()` for `iff`s, but dsimp then doesn't find those lemmas. The comment now reflects that that doesn't work."},{"author":"gebner","date":"2022-06-24T10:51:51Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-24T11:24:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7040289707?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7040289843?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7040290549?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7040290404?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7040290226?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7040290114?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7040289996?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7040290799?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"src/library/constants.h","date":"2022-06-09T08:42:55Z","comment":"Please add `iff.rfl` in the `constants.txt` file instead and then run `python3 script/gen_constants_cpp.py src/library/constants.txt` to regenerate this file."},{"author":"gebner","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-09T08:44:08Z","comment":"```suggestion\r\n            if (is_eq(type, lhs, rhs)) {\r\n                proof = mk_eq_symm(ctx, proof);\r\n            } else {\r\n                proof = mk_iff_symm(ctx, proof);\r\n            }\r\n            std::swap(lhs, rhs);\r\n```"},{"author":"eric-wieser","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-09T09:19:40Z","comment":"We don't have an `mk_iff_symm`, and even `mk_eq_symm` seems pointless since it just returns `proof` unmodified."},{"author":"gebner","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-09T09:29:21Z","comment":"> and even `mk_eq_symm` seems pointless since it just returns `proof` unmodified.\r\n\r\nAre you sure about that?  There's a special case if the proof is `eq.refl`, but we're passing the declared simp-lemma here.\r\n\r\nBut rereading this function, we need to do something else anyhow.  We insert the simp-lemma for the `eq` relation, so it needs to be a equality and not an iff.  Adding `if (is_iff(type, lhs, rhs)) proof = mk_propext(lhs, rhs)` right after the while-loop should be enough.\r\n"},{"author":"eric-wieser","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T08:50:02Z","comment":"> There's a special case if the proof is `eq.refl`, but we're passing the declared simp-lemma here.\r\n\r\nAren't we only looking at the dsimp lemmas (those proven by `rfl`) at this point though?"},{"author":"gebner","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T09:01:42Z","comment":"I'm not completely sure, but I believe simp will still use the proof term here, even if it is a rfl-lemma."},{"author":"gebner","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T09:28:13Z","comment":"An important reason why we want to keep the original lemma is because of `squeeze_simp`.  Replacing the proof by `eq.refl` will cause `squeeze_simp` to fail because it no longer knows that this lemma was used.\r\n\r\nAlso please please think of the case `symm && !is_iff`, I believe the current code calls `mk_eq_symm` on iff-proofs, which may or may not fail spectacularly."},{"author":"eric-wieser","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T09:30:42Z","comment":"I don't think I agree; isn't `cname` the bit that squeeze_simp looks at? I would assume that `proof` contains only an expression, and no trace of the original lemma name that produced it."},{"author":"eric-wieser","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T09:32:39Z","comment":"Its entirely possible though that this comment is wrong and we could leave the proof alone"},{"author":"eric-wieser","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T09:47:58Z","comment":"I tested this; using\r\n```lean\r\n        } else if (is_iff(type, lhs, rhs)) {\r\n            if (symm) {\r\n                proof = mk_iff_symm(ctx, proof);\r\n                std::swap(lhs, rhs);\r\n            }\r\n        }\r\n```\r\nseems not to work; there's no error, but `simp` seems unable to apply the lemma."},{"author":"gebner","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T09:58:10Z","comment":"> I don't think I agree; isn't `cname` the bit that squeeze_simp looks at?\r\n\r\n`squeeze_simp` looks at the proof term produced by simp. It doesn't know about any internal data structures.  In particular it never sees `cname`.\r\n\r\n> I would assume that `proof` contains only an expression,\r\n\r\n`proof` is a constant (the lemma) applied to some local constants here.  It is an expression, but it very much contains the lemma name."},{"author":"eric-wieser","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T10:21:38Z","comment":"> But rereading this function, we need to do something else anyhow. We insert the simp-lemma for the `eq` relation, so it needs to be a equality and not an iff. Adding `if (is_iff(type, lhs, rhs)) proof = mk_propext(lhs, rhs)` right after the while-loop should be enough.\r\n\r\nYou're quite right, this was the right thing to do after all. I'd naively assumed that `simp` used `dsimp` internally to rewrite definitional equalities, but it seems it does not."},{"author":"gebner","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T10:28:35Z","comment":"The Lean 4 simp uses dsimp internally, but not Lean 3.  Which means we'll need to figure out something different for `squeeze_simp` in Lean 4."},{"author":"eric-wieser","file":"src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T10:34:34Z","comment":"```suggestion\r\n            // We need to turn the `iff` into a `eq` for `simp`. `dsimp` doesn't look at this proof,\r\n            // but does require that we use `get_eq_name()` below and not `get_iff_name()`.\r\n```"}],"tags":[{"tag":"enhancement","description":"New feature or request"}],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"955c53f83d2761e71956762313dc0e0ef985efb6","message":"feat(frontends/lean/definition_cmds): tag lemmas proved with `iff.rfl` as refl lemmas","date":"2022-06-08T20:01:42Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"593e92709bc64bdc59d277a79dd601c34178ce2a","message":"fix","date":"2022-06-08T20:11:39Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"ed07d82a357405252a18ac31b24cb51066cede29","message":"fix","date":"2022-06-08T20:50:46Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"2041d63d96b66747fb1f846de46a64426dd44162","message":"fix number of arguments","date":"2022-06-08T21:25:21Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"091807ec8d288298b2b33cb0545018326e3fe3a5","message":"generate constants","date":"2022-06-24T08:48:23Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"04929229c226b9bb69af97c76a579288a32843e4","message":"Merge remote-tracking branch 'origin/master' into iff.rfl-_refl_lemma","date":"2022-06-24T08:49:15Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"775e57d8c286872341c2e6946999336851ba097c","message":"fix?","date":"2022-06-24T09:18:27Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"04ac7ca7eab2ae729028a58922296927a5d1b0ba","message":"actually swap lhs and rhs for iff.symm","date":"2022-06-24T09:31:41Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"956791fed85cd37bbc1069eaa3c75fa936c7023d","message":"slightly more conservative version","date":"2022-06-24T10:07:25Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"e24043ba2725b4f868686fe6a1e7b02eab376f1f","message":"use propext after all","date":"2022-06-24T10:20:39Z"},{"author":"eric-wieser","committer":"web-flow","hash":"6d7c5fa22b0ab72b9ae2ab03a9e44e1f5b22d2d7","message":"Update src/library/tactic/simp_lemmas.cpp","date":"2022-06-24T10:34:50Z"}]},{"author":"vihdzp","number":722,"diff_summary":[{"file":"library/init/logic.lean","status":"M","additions":4,"deletions":0}],"state":"closed","open_date":"2022-06-08T07:49:51Z","update_date":"2022-06-08T07:55:30Z","discussion":[{"author":"vihdzp","date":"2022-06-08T07:55:30Z","comment":"Oh, I should have searched it up first. "}],"review_discussion":[{"author":"eric-wieser","file":"library/init/logic.lean","date":"2022-06-08T07:52:52Z","comment":"```suggestion\r\ntheorem pi.default_def (α : Sort u) {β : α → Sort v} [Π x, inhabited (β x)] : \r\n```"}],"tags":[{"tag":"awaiting-author","description":""}],"commits":[{"author":"vihdzp","committer":"vihdzp","hash":"410de33f85401287c22690637a1c01a7c874256e","message":"Update logic.lean","date":"2022-06-08T07:42:52Z"}]},{"author":"YaelDillies","number":721,"diff_summary":[{"file":"library/init/data/basic.lean","status":"D","additions":1,"deletions":41},{"file":"library/init/data/set.lean","status":"D","additions":1,"deletions":41}],"state":"open","open_date":"2022-06-05T16:21:50Z","update_date":"2022-06-26T17:21:04Z","discussion":[{"author":"fpvandoorn","date":"2022-06-06T09:09:48Z","comment":"> Feel free to move the rest to mathlib as well. Except for `set_of` because that's referenced by Lean.\r\n\r\nShould we leave `set_of` here?"},{"author":"YaelDillies","date":"2022-06-06T09:19:52Z","comment":"Oh, I missed this. Where is it referenced?"},{"author":"fpvandoorn","date":"2022-06-06T09:21:26Z","comment":"Probably in the C++ code, on how to parse `{ ... | ... }`."},{"author":"fpvandoorn","date":"2022-06-06T09:22:35Z","comment":"Then again, I don't *think* it causes any problems if we move this to mathlib, except that you'll get an error when writing `{ ... | ... }` before you import the appropriate file. But I'd like to let @gebner chime in on that."},{"author":"gebner","date":"2022-06-06T10:02:34Z","comment":"I believe `set_of` is the only reason some of the `set` definition is still in core (see https://github.com/leanprover-community/lean/pull/675#issuecomment-1024411237).  There's also a test that checks whether every definition referenced from the C++ side actually exists in the library:\r\nbors try"},{"author":"bors[bot]","date":"2022-06-06T10:11:49Z","comment":"## try\n\nBuild failed:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6753550822?check_suite_focus=true)"},{"author":"fpvandoorn","date":"2022-06-07T09:50:40Z","comment":"Relevant line in the build failure: `init.data.basic` cannot find `init.data.set`."},{"author":"eric-wieser","date":"2022-06-24T00:32:09Z","comment":"bors try"},{"author":"bors[bot]","date":"2022-06-24T00:45:00Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7034021279?check_suite_focus=true)"},{"author":"eric-wieser","date":"2022-06-24T08:46:11Z","comment":"Looks like there are 24 failing tests (search for `***Failed` in the logs to find them)"}],"review_discussion":[],"tags":[{"tag":"awaiting-author","description":""}],"commits":[{"author":"YaelDillies","committer":"YaelDillies","hash":"ff656e4cb29f498e8423af248daed456984e9df5","message":"chore(init/data/set): Delete","date":"2022-06-05T15:59:47Z"},{"author":"YaelDillies","committer":"YaelDillies","hash":"81bbf9dab726ed802c99a1bde29c464b1f997c79","message":"remove init.data.set from init.data.basic","date":"2022-06-07T21:41:16Z"}]},{"author":"YaelDillies","number":719,"diff_summary":[{"file":"library/init/data/nat/bitwise.lean","status":"M","additions":26,"deletions":45},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":26,"deletions":45}],"state":"closed","open_date":"2022-05-31T08:58:33Z","update_date":"2022-06-06T10:41:43Z","discussion":[{"author":"gebner","date":"2022-06-06T10:04:09Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-06T10:41:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6753575803?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6753575670?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6753576361?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6753576292?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6753576039?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6753575965?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6753576163?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6753576492?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"YaelDillies","committer":"YaelDillies","hash":"9a16579408e9bf75b081ceebb444980cab566df4","message":"chore(data/nat): Turn implicit arguments to `↔`","date":"2022-05-31T08:57:05Z"}]},{"author":"vihdzp","number":717,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":4,"deletions":2}],"state":"closed","open_date":"2022-05-19T03:13:11Z","update_date":"2022-05-20T08:13:52Z","discussion":[{"author":"gebner","date":"2022-05-20T07:43:39Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-05-20T08:13:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6520895958?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6520895637?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6520896130?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6520896072?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6520895834?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6520895756?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6520895491?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6520896223?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"library/init/core.lean","date":"2022-05-19T09:00:47Z","comment":"```suggestion\r\n   Note that we use `pair` in the name of lemmas about `insert y (singleton x) = {x, y}`. -/\r\n```\r\nI think that's what you mean?"},{"author":"gebner","file":"library/init/core.lean","date":"2022-05-19T09:01:19Z","comment":"```suggestion\r\n   Example: `{a, b, c} = insert c (insert b (singleton a))`.\r\n```"},{"author":"gebner","file":"library/init/core.lean","date":"2022-05-19T09:01:26Z","comment":"Hope I got the order right."},{"author":"fpvandoorn","file":"library/init/core.lean","date":"2022-05-19T16:32:43Z","comment":"```suggestion\r\n/-! Type classes `has_emptyc` and `has_insert` are\r\n```\r\nso that it shows up in the generated documentation?"},{"author":"vihdzp","file":"library/init/core.lean","date":"2022-05-19T20:48:21Z","comment":"```lean\r\nexample : ({1, 2, 3} : finset ℕ) = insert 1 (insert 2 (singleton 3)) := rfl\r\n```\r\nSeems like I originally got the order wrong, fixed."}],"tags":[],"commits":[{"author":"vihdzp","committer":"vihdzp","hash":"1d7bff895899c5556216e606f02a9844213ae0ea","message":"Update core.lean","date":"2022-05-19T03:12:16Z"},{"author":"vihdzp","committer":"vihdzp","hash":"358b71ed2b9e057d43a2d4fbe532292a873d2007","message":"Apply suggestions","date":"2022-05-19T20:48:27Z"}]},{"author":"gebner","number":716,"diff_summary":[{"file":"README.md","status":"M","additions":19,"deletions":3},{"file":"doc/changes.md","status":"M","additions":19,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":19,"deletions":3}],"state":"closed","open_date":"2022-05-18T12:25:21Z","update_date":"2022-05-18T13:17:10Z","discussion":[{"author":"gebner","date":"2022-05-18T12:46:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-05-18T13:17:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6489434725?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6489434974?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6489433576?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6489435713?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6489432539?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6489432440?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6489432971?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6489433766?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"2fbbc5df7fcc861e060e11d24fbdcb13cea0ca7b","message":"chore(*): release 3.43.0","date":"2022-05-18T12:10:55Z"},{"author":"gebner","committer":"gebner","hash":"c28678d765849d3d40a437d4a4c6959da9c77939","message":"more","date":"2022-05-18T12:23:30Z"}]},{"author":"vihdzp","number":715,"diff_summary":[{"file":"library/init/wf.lean","status":"M","additions":10,"deletions":1}],"state":"closed","open_date":"2022-05-17T18:39:22Z","update_date":"2022-05-17T20:37:17Z","discussion":[{"author":"gebner","date":"2022-05-17T19:50:11Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-05-17T20:37:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6477681648?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6477681252?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6477681831?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6477681735?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6477681409?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6477681347?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6477681530?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6477681968?check_suite_focus=true)"},{"author":"alreadydone","date":"2022-05-18T13:46:28Z","comment":"The changes haven't shown up in the [docs](https://leanprover-community.github.io/mathlib_docs/init/wf.html#acc) even with a new release. How could the docs be updated?"},{"author":"gebner","date":"2022-05-18T13:51:56Z","comment":"The changes will show up once mathlib has been upgraded to the latest Lean version.  The mathlib docs always show the Lean version used in mathlib."}],"review_discussion":[],"tags":[],"commits":[{"author":"vihdzp","committer":"vihdzp","hash":"dd581e6417d3a42cae37de31de1425a06f336841","message":"Improve docs","date":"2022-05-17T18:36:30Z"}]},{"author":"YaelDillies","number":714,"diff_summary":[{"file":"library/init/algebra/order.lean","status":"M","additions":4,"deletions":4}],"state":"closed","open_date":"2022-05-08T09:22:59Z","update_date":"2022-05-08T12:03:42Z","discussion":[{"author":"eric-wieser","date":"2022-05-08T09:28:14Z","comment":"bors try"},{"author":"bors[bot]","date":"2022-05-08T10:05:46Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6340068567?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6340068498?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6340068465?check_suite_focus=true)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6340068539?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6340068587?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6340068614?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6340068513?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6340068439?check_suite_focus=true)"},{"author":"gebner","date":"2022-05-08T10:52:31Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-05-08T12:03:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6340614427?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6340614348?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6340614502?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6340614474?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6340614402?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6340614382?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6340614452?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6340614544?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"YaelDillies","committer":"YaelDillies","hash":"d4c4cd87d1e618bfe61b5c20f0d526ea7659b5c9","message":"initial commit","date":"2022-05-08T08:51:22Z"}]},{"author":"kmill","number":713,"diff_summary":[{"file":"library/init/logic.lean","status":"M","additions":25,"deletions":25},{"file":"library/init/wf.lean","status":"M","additions":25,"deletions":25},{"file":"tests/lean/run/type_equations.lean","status":"M","additions":25,"deletions":25}],"state":"closed","open_date":"2022-05-07T16:14:58Z","update_date":"2022-05-08T11:22:38Z","discussion":[{"author":"kmill","date":"2022-05-07T16:19:02Z","comment":"Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Why.20are.20there.20two.20transitive.20closures.3F/near/281526286"},{"author":"gebner","date":"2022-05-08T10:51:25Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-05-08T11:22:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6340467410?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6340467387?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6340467642?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6340467592?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6340467544?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6340467497?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6340467453?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6340467684?check_suite_focus=true)"}],"review_discussion":[{"author":"eric-wieser","file":"library/init/wf.lean","date":"2022-05-07T21:03:38Z","comment":"Do you think this lemma should exist in mathlib?"},{"author":"alreadydone","file":"library/init/wf.lean","date":"2022-05-17T08:15:04Z","comment":"https://github.com/leanprover-community/mathlib/pull/14190"}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"kmill","committer":"kmill","hash":"fd5feb030987aaf79044aa6e29cf9fb2e9c07f89","message":"refactor(library/init/logic): remove tc\n\nMathlib has its own version of transitive closure, so removing this\nrelatively unused version from core. The transitive closure of a\nwell-founded relation is being moved to mathlib.","date":"2022-05-07T16:12:14Z"}]},{"author":"kmill","number":712,"diff_summary":[{"file":"src/frontends/lean/cmd_table.h","status":"M","additions":21,"deletions":4},{"file":"src/frontends/lean/definition_cmds.cpp","status":"M","additions":21,"deletions":4},{"file":"tests/lean/noncomputable_lemma.lean","status":"M","additions":21,"deletions":4},{"file":"tests/lean/noncomputable_lemma.lean.expected.out","status":"M","additions":21,"deletions":4}],"state":"closed","open_date":"2022-04-30T20:27:13Z","update_date":"2022-05-02T09:23:52Z","discussion":[{"author":"kmill","date":"2022-04-30T20:33:34Z","comment":"This PR is to try to fix the error messages to be more informative and less confusing. There have been some Zulip questions from new users that have shown how confusing they can be. I'm still not completely sure how to phrase them.\r\n\r\nI've also found the `noncomputable` suggestion for partially written theorems to be annoying, and this disables it when the type of the theorem contains a sorry."},{"author":"gebner","date":"2022-05-02T08:40:33Z","comment":"Seems reasonable enough.\r\nbors r+"},{"author":"bors[bot]","date":"2022-05-02T09:23:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6254525811?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6254526270?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6254526484?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6254526406?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6254526148?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6254526070?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6254525944?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6254526589?check_suite_focus=true)"}],"review_discussion":[{"author":"kmill","file":"src/frontends/lean/cmd_table.h","date":"2022-04-30T20:28:13Z","comment":"I slipped in this change, correcting my last PR, since `const &`, while it works, is odd since it constrains this function to only work for lvalues."},{"author":"kmill","file":"src/frontends/lean/definition_cmds.cpp","date":"2022-04-30T20:30:30Z","comment":"There is nothing that actually uses this condition now. Not sure what to do about that, if anything."}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"kmill","committer":"kmill","hash":"2c7d06d2fec53f6228474c74fb814fdfdc62bf8d","message":"fix(noncomputable, definition_cmds): better error message for non-Prop theorems\n\nThe error message for non-Prop theorems gives misleading advice -- you\nlikely want to switch to using a `def` rather than adding\n`noncomputable`. This change also prevents the error from appearing if\nthe type of the theorem contains `sorry`, since a user is likely in\nthe process of editing the theorem and the `def`/`noncomputable`\nadvice is unhelpful.","date":"2022-04-30T20:23:51Z"}]},{"author":"kmill","number":711,"diff_summary":[{"file":"src/frontends/lean/builtin_cmds.cpp","status":"A","additions":20,"deletions":6},{"file":"src/frontends/lean/cmd_table.h","status":"A","additions":20,"deletions":6},{"file":"tests/lean/local_notation_meta_bug.lean","status":"A","additions":20,"deletions":6},{"file":"tests/lean/local_notation_meta_bug.lean.expected.out","status":"A","additions":20,"deletions":6}],"state":"closed","open_date":"2022-04-23T17:22:53Z","update_date":"2022-04-29T13:22:45Z","discussion":[{"author":"gebner","date":"2022-04-29T12:47:11Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-04-29T13:22:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6228333649?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6228333435?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6228334110?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6228334026?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6228333904?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6228333811?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6228333215?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6228334259?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"src/frontends/lean/cmd_table.h","date":"2022-04-29T12:47:00Z","comment":"I have to admit this is the first time I've come across ref-qualifiers."},{"author":"kmill","file":"src/frontends/lean/cmd_table.h","date":"2022-04-29T13:07:29Z","comment":"I have to admit I meant to write just `const` and am only barely aware of ref-qualifiers! The `const &` restricts `throw_exception_if_nonempty` to only be callable with lvalues, which is ok but a little weird."}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"kmill","committer":"kmill","hash":"a349fddaca15addd187c2be7547f2bca13e0586a","message":"fix(frontends/lean/builtin_cmds): add check to 'local' command for no modifiers/attrs/docstring","date":"2022-04-23T17:17:13Z"}]},{"author":"eric-wieser","number":710,"diff_summary":[{"file":"library/init/meta/well_founded_tactics.lean","status":"M","additions":8,"deletions":0},{"file":"tests/lean/well_founded_tactics.lean","status":"M","additions":8,"deletions":0}],"state":"closed","open_date":"2022-03-30T12:54:37Z","update_date":"2022-03-31T09:48:47Z","discussion":[{"author":"fpvandoorn","date":"2022-03-31T09:08:49Z","comment":"LGTM\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-03-31T09:48:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5768267546?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5768267741?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5768268106?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5768267918?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5768267342?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5768267218?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5768267036?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5768268258?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"3bbaaf781c7b2a130aaab7471cf524261d9e6648","message":"feat(init/meta/well_founded_tactics): teach `well_founded_tactics.default_dec_tac` that `n < n.succ`\n\nThis feels like a \"trivial\" enough result to go in `trivial_nat_lt`","date":"2022-03-30T12:54:29Z"},{"author":"eric-wieser","committer":"web-flow","hash":"b030509b97849f76f22a5fe66254f935c0c085aa","message":"Add a test","date":"2022-03-30T12:56:17Z"}]},{"author":"kmill","number":709,"diff_summary":[{"file":"src/library/tactic/simp_lemmas.cpp","status":"A","additions":27,"deletions":1},{"file":"tests/lean/congr_user_fixed.lean","status":"A","additions":27,"deletions":1},{"file":"tests/lean/congr_user_fixed.lean.expected.out","status":"A","additions":27,"deletions":1}],"state":"open","open_date":"2022-03-28T02:11:59Z","update_date":"2022-06-24T00:36:56Z","discussion":[],"review_discussion":[{"author":"eric-wieser","file":"tests/lean/congr_user_fixed.lean","date":"2022-06-24T00:36:27Z","comment":"Can you add a comment describing what is considered the \"fixed\" argument here?"},{"author":"eric-wieser","file":"tests/lean/congr_user_fixed.lean","date":"2022-06-24T00:36:56Z","comment":"To avoid the sorry output, maybe this should be an `axiom`"}],"tags":[],"commits":[{"author":"kmill","committer":"kmill","hash":"0d978d44293c4bb575dc8fb3feb0d704bd48b4a9","message":"feat(simp_lemmas): allow user congr lemma to have fixed parameters","date":"2022-03-28T02:09:13Z"}]},{"author":"kmill","number":708,"diff_summary":[{"file":"src/frontends/lean/decl_attributes.cpp","status":"M","additions":369,"deletions":88},{"file":"src/frontends/lean/elaborator.cpp","status":"M","additions":369,"deletions":88},{"file":"src/frontends/lean/elaborator.h","status":"M","additions":369,"deletions":88},{"file":"src/frontends/lean/structure_cmd.cpp","status":"M","additions":369,"deletions":88},{"file":"src/frontends/lean/structure_cmd.h","status":"M","additions":369,"deletions":88},{"file":"src/library/attribute_manager.cpp","status":"M","additions":369,"deletions":88},{"file":"src/library/attribute_manager.h","status":"M","additions":369,"deletions":88},{"file":"src/library/constants.cpp","status":"M","additions":369,"deletions":88},{"file":"src/library/constants.h","status":"M","additions":369,"deletions":88},{"file":"src/library/constants.txt","status":"M","additions":369,"deletions":88}],"state":"open","open_date":"2022-03-26T04:05:44Z","update_date":"2022-06-09T08:34:10Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"kmill","committer":"kmill","hash":"8be02a8c8780a247f645e527924fc34bf1ad0d28","message":"feat(elaborator,pp): improvements to dot notation\n\nThis is a work in progress","date":"2022-03-26T04:04:27Z"}]},{"author":"gebner","number":707,"diff_summary":[{"file":"README.md","status":"M","additions":11,"deletions":2},{"file":"doc/changes.md","status":"M","additions":11,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":11,"deletions":2}],"state":"closed","open_date":"2022-03-24T13:32:42Z","update_date":"2022-03-24T14:07:19Z","discussion":[{"author":"gebner","date":"2022-03-24T13:33:20Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-03-24T14:07:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5677136928?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5677132593?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5677133084?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5677137262?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5677132440?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5677136664?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5677132751?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5677133263?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f0bdae387fa3763494a30ee2c60baa84553f444d","message":"chore(*): release 3.42.1c","date":"2022-03-24T13:32:18Z"}]},{"author":"jcommelin","number":706,"diff_summary":[{"file":"library/init/meta/async_tactic.lean","status":"M","additions":3,"deletions":2}],"state":"closed","open_date":"2022-03-23T10:17:06Z","update_date":"2022-03-23T12:05:19Z","discussion":[{"author":"gebner","date":"2022-03-23T10:18:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-03-23T10:26:59Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5658508132?check_suite_focus=true)"},{"author":"gebner","date":"2022-03-23T10:54:19Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-03-23T11:33:55Z","comment":"This PR was included in a batch that successfully built, but then failed to merge into master (it was a non-fast-forward update). It will be automatically retried."},{"author":"bors[bot]","date":"2022-03-23T12:05:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5659528394?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5659528593?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5659528888?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5659528805?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5659528149?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5659528015?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5659527831?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5659529006?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null},{"tag":"easy","description":null}],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"06cf2fad4a9a72d375c8077e47ae7ab8203f6744","message":"fix(library/init/meta/async_tactic): make async aware of instance cache\n\nKudos to @gebner for the pointer!","date":"2022-03-23T10:15:45Z"},{"author":"jcommelin","committer":"jcommelin","hash":"a8551612a96e02c50eb53a02820175344c39551f","message":"missing import","date":"2022-03-23T10:43:26Z"}]},{"author":"gebner","number":705,"diff_summary":[{"file":"README.md","status":"M","additions":13,"deletions":2},{"file":"doc/changes.md","status":"M","additions":13,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":13,"deletions":2}],"state":"closed","open_date":"2022-03-18T12:42:12Z","update_date":"2022-03-18T13:44:04Z","discussion":[{"author":"gebner","date":"2022-03-18T13:12:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-03-18T13:44:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5600841506?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5600841366?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5600842014?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5600836228?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5600836084?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5600841713?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5600835866?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5600836438?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"9b3c9edafb400f5362dbb2d65c80d317b9c4518d","message":"chore(*): release 3.42.0c","date":"2022-03-18T12:42:01Z"}]},{"author":"kmill","number":704,"diff_summary":[{"file":"library/init/classical.lean","status":"A","additions":55,"deletions":35},{"file":"library/init/core.lean","status":"A","additions":55,"deletions":35},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":55,"deletions":35},{"file":"src/library/noncomputable.cpp","status":"A","additions":55,"deletions":35},{"file":"src/library/noncomputable.h","status":"A","additions":55,"deletions":35},{"file":"tests/lean/def2.lean.expected.out","status":"A","additions":55,"deletions":35},{"file":"tests/lean/empty.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/noncomp.lean.expected.out","status":"A","additions":55,"deletions":35},{"file":"tests/lean/noncomp_error.lean.expected.out","status":"A","additions":55,"deletions":35},{"file":"tests/lean/noncomp_thm.lean.expected.out","status":"A","additions":55,"deletions":35},{"file":"tests/lean/noncomputable_lemma.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/noncomputable_lemma.lean.expected.out","status":"A","additions":55,"deletions":35},{"file":"tests/lean/noncomputable_modifier.lean.expected.out","status":"A","additions":55,"deletions":35},{"file":"tests/lean/noncomputable_reason.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/noncomputable_reason.lean.expected.out","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/1728.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/372c.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/abstract_zeta.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/class2.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/class3.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/class6.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/e3.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/has_sizeof_indices.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/match3.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/partial_explicit1.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/soundness.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/specialize.lean","status":"A","additions":55,"deletions":35},{"file":"tests/lean/run/whnfinst.lean","status":"A","additions":55,"deletions":35}],"state":"closed","open_date":"2022-03-17T23:42:38Z","update_date":"2022-03-18T12:14:56Z","discussion":[{"author":"kmill","date":"2022-03-18T00:11:42Z","comment":"I still need to check this against mathlib, and I'll report back when it succeeds."},{"author":"kmill","date":"2022-03-18T09:06:40Z","comment":"Mathlib compiles in debug mode without any errors."},{"author":"gebner","date":"2022-03-18T11:27:44Z","comment":"Seems reasonable enough.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-03-18T12:14:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5599649470?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5599649379?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5599649642?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5599649574?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5599649274?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5599649200?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5599649055?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5599649709?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"kmill","committer":"kmill","hash":"9d4660bcec9f4590384243191b6e21b3ab87182f","message":"fix(noncomputable,definition_cmds): require non-Prop theorems to be noncomputable\n\nThe noncomputability checker is meant to determine what can and cannot\nbe VM compiled, and since theorems do not get VM compiled, non-Prop\ntheorems should be noncomputable. This is more restrictive than\nnecessary, but at least for mathlib these are the only theorems that\npass the linter anyway.","date":"2022-03-17T23:33:00Z"},{"author":"kmill","committer":"kmill","hash":"dd262a22adb32a3a4e36cbf7465e36ba8b7573dd","message":"additional test","date":"2022-03-17T23:59:00Z"},{"author":"kmill","committer":"kmill","hash":"d3357def00c9bc77d4e810784f4dfe38fc14e7bd","message":"forgot one of the additional tests","date":"2022-03-18T00:18:00Z"}]},{"author":"kmill","number":703,"diff_summary":[{"file":"library/init/meta/interactive_base.lean","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/decl_cmds.cpp","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/decl_util.cpp","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/decl_util.h","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/inductive_cmds.cpp","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/parser.h","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/parser_state.h","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/tokens.cpp","status":"A","additions":159,"deletions":47},{"file":"src/frontends/lean/tokens.h","status":"A","additions":159,"deletions":47},{"file":"src/library/module.cpp","status":"A","additions":159,"deletions":47},{"file":"src/library/module.h","status":"A","additions":159,"deletions":47},{"file":"src/library/vm/vm_parser.cpp","status":"A","additions":159,"deletions":47},{"file":"tests/lean/noncomputable_modifier.lean","status":"A","additions":159,"deletions":47},{"file":"tests/lean/noncomputable_modifier.lean.expected.out","status":"A","additions":159,"deletions":47}],"state":"closed","open_date":"2022-03-17T04:05:48Z","update_date":"2022-03-17T20:17:29Z","discussion":[{"author":"gebner","date":"2022-03-17T08:16:20Z","comment":"Strategically speaking, we should be aiming to move closer to Lean 4, and avoid features that are not in Lean 4 because that just makes porting harder.  From that perspective, we should do:\r\n - `noncomputable def` unconditionally marks the definition as noncomputable\r\n - `noncomputable theory` marks definitions as noncomputable if necessary\r\n\r\nThis is trivial to port, and obviates the `force_noncomputable` hack.  I'm also happy with adding `noncomputable! def` and keeping `noncomputable def` as it is.\r\n\r\nI would prefer to remove the `noncomputable! theory` command because we can't easily port it to Lean 4."},{"author":"kmill","date":"2022-03-17T18:54:08Z","comment":"@gebner Ok, `noncomputable! theory` is gone. I had thought it could be useful for non-mathlib purposes, but (1) I don't want to make mathport any more complicated and (2) there was still some work to do with figuring out how to properly handle theorems and whether they should be marked noncomputable too (and that's more work and complexity than I'm willing to put into this feature!)\r\n\r\nI'd like to leave `noncomputable` alone, since some people like how Lean raises an error if it's misapplied. It seems like this shouldn't make mathport that much more complex, since if I've understood it correctly both `noncomputable` and `noncomputable!` can be translated in the same way. (And if we run into definitions where this is a problem, it likely would point toward performance issues in the Lean 4 compiler. This at least is a motivation behind introducing this feature in Lean 3, where it's less clearly useful spending significant time trying to improve the VM compiler, especially since the afflicted definitions are never going to be evaluated.)"},{"author":"gebner","date":"2022-03-17T19:37:50Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-03-17T20:17:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5591129091?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5591128274?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5591128975?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5591128838?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5591128693?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5591128620?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5591128473?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5591129267?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"src/frontends/lean/decl_cmds.cpp","date":"2022-03-17T08:16:44Z","comment":"This should be reflected in the AST.\r\ncc @digama0 "},{"author":"digama0","file":"src/frontends/lean/decl_cmds.cpp","date":"2022-03-17T08:35:07Z","comment":"Yes, this is not correct since it does not store the generated AST node anywhere. I think it would be best to just pretend that `noncomputable!` is a single token here: if the `!` token is parsed after `noncomputable` then it creates a `noncomputable!` token in the AST, otherwise it just creates a `noncomputable` token. (This then has to be handled on the mathport side.)"}],"tags":[],"commits":[{"author":"kmill","committer":"kmill","hash":"e71915b77a51851ceb4d59ad7820c0b510092a17","message":"feat(modifiers): `noncomputable!` to force noncomputability\n\nThis revamps the noncomputability system to allow the user to force\nLean to mark declarations as noncomputable and inhibit VM compilation.\nThe new system is completely reverse compatible.\n\nThere are two new user-visible parts:\n1. The `noncomputable!` modifier. Definitions with this will not have\n   their computability checked, will be marked noncomputable when\n   added to the environment, and will not have VM compilation.\n2. The `noncomputable! theory` command. Each definition following it\n   will be processed as if it were given the `noncomputable!` modifier.\n\nThese interact in the following way:\n\n1. Without either `theory` command\n   1. No modifier: check is computable, run VM compiler\n   2. `noncomputable`: check is noncomputable, do not VM compile, mark\n      declaration as noncomputable\n   3. `noncomputable!`: do not test computability, do not VM compile,\n      and mark declaration as noncomputable\n2. With `noncomputable theory`\n   1. No modifier or `noncomputable`: if computable, run the VM\n      compiler; if noncomputable, mark declaration as noncomputable\n   2. `noncomputable!`: do not test computability, do not VM compile,\n      and mark declaration as noncomputable\n3. With `noncomputable! theory`\n   1. All cases: do not test computability, do not VM compile, and\n      mark declaration as noncomputable\n\nSince the equation compiler changes its operation based on the\n`noncomputable` modifier, the `noncomputable! theory` command inserts\nthis modifier into each definition following it.\nThis is not the case for `noncomputable theory`.","date":"2022-03-17T03:39:54Z"},{"author":"digama0","committer":"digama0","hash":"0d6f9e3700ee854e4b38098404e129cd97c2ead6","message":"push `!` node as child of `noncomputable`","date":"2022-03-17T08:48:27Z"},{"author":"kmill","committer":"kmill","hash":"7fb576108a2f11129899aea6d687fff00c87e1c4","message":"walked back `noncomputable! theory`; forgot to commit test","date":"2022-03-17T18:06:50Z"}]},{"author":"dselsam","number":702,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"M","additions":46,"deletions":7},{"file":"src/library/abstract_parser.h","status":"M","additions":46,"deletions":7},{"file":"src/library/ast_exporter.cpp","status":"M","additions":46,"deletions":7},{"file":"src/library/module_mgr.h","status":"M","additions":46,"deletions":7},{"file":"src/library/tactic/tactic_log.cpp","status":"M","additions":46,"deletions":7},{"file":"src/library/tactic/tactic_log.h","status":"M","additions":46,"deletions":7},{"file":"src/shell/lean.cpp","status":"M","additions":46,"deletions":7}],"state":"merged","open_date":"2022-03-17T02:39:47Z","update_date":"2022-03-23T11:13:36Z","discussion":[{"author":"PatrickMassot","date":"2022-03-23T10:32:56Z","comment":"What is the status of this PR?"},{"author":"gebner","date":"2022-03-23T10:39:47Z","comment":"Mario had some comments, from my side it looks good.\r\n\r\nbors d=digama0"},{"author":"bors[bot]","date":"2022-03-23T10:39:48Z","comment":":v: digama0 can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"digama0","date":"2022-03-23T11:15:12Z","comment":"Oops, I did squash and merge instead of bors. I assume it's fine?"},{"author":"gebner","date":"2022-03-23T11:17:20Z","comment":"The commit message is fugly, but I'm happy as long as it builds."}],"review_discussion":[{"author":"digama0","file":"src/library/tactic/tactic_log.h","date":"2022-03-17T05:21:01Z","comment":"```suggestion\r\n    mutable std::vector<std::pair<summary, std::string>> m_states;\r\n```\r\nIf you push the pp into the state array then you only ever pretty print a state once. Correspondingly, the json export should put the pretty printed state at `root.states[i].pp` instead of `root.tspps`."},{"author":"dselsam","file":"src/library/tactic/tactic_log.h","date":"2022-03-17T20:33:48Z","comment":"Thanks. I just added it to the summary object instead."},{"author":"digama0","file":"src/library/tactic/tactic_log.cpp","date":"2022-03-18T01:14:04Z","comment":"No, this should not be done in `summarize` because that is before deduplication. It should either be like I wrote it, separate from the `summary` so that `summarize` does not produce it, or else `summarize` should always produce `pp = none`, the hash and eq should ignore this field, and it should only be set in `get_id` when we actually want to push it to `get_states`."}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"dselsam","committer":"dselsam","hash":"e1e9b2ff8cd1aec2203f788a2e6fa5a85d0c6d2d","message":"feat: export pretty-printed tactic states in ast\n\nThis small commit, in combination with the ast parsing in mathport, together make it straightforward to produce high-quality datasets of tactic applications.","date":"2022-03-17T02:35:37Z"},{"author":"dselsam","committer":"dselsam","hash":"3dadc13775a7abdd05cce69c1e8755a32574fa00","message":"chore: put tspp behind flag","date":"2022-03-17T02:35:37Z"},{"author":"dselsam","committer":"dselsam","hash":"f456c7d17ef53dd796baa16e66758bf740d6ea9d","message":"perf: put tactic state ast export behind flag","date":"2022-03-17T02:35:37Z"},{"author":"dselsam","committer":"dselsam","hash":"e5cf90c62352866a4c232b0ec2e7253efd3408a6","message":"feat: store (best effort) end positions","date":"2022-03-17T02:35:37Z"},{"author":"dselsam","committer":"dselsam","hash":"a8b8424c6dd64e2135661c6a580a397c3663b2e8","message":"chore: store tspp in the summary\n\n@digama0 suggested something similar\nhttps://github.com/leanprover-community/lean/pull/702#discussion_r828763589","date":"2022-03-17T20:32:45Z"},{"author":"dselsam","committer":"dselsam","hash":"299f872a82b1c26d1050cef93873c83448c59396","message":"style: include <string>","date":"2022-03-17T21:59:54Z"},{"author":"dselsam","committer":"dselsam","hash":"d22aa3371bb7c9688fa9be13dfd7f56b9ae7400f","message":"fix: add pp to tactic-state summary after dedup","date":"2022-03-18T14:37:51Z"}]},{"author":"b-mehta","number":701,"diff_summary":[{"file":"src/frontends/lean/user_notation.cpp","status":"M","additions":1,"deletions":1}],"state":"open","open_date":"2022-03-15T16:43:31Z","update_date":"2022-06-09T08:34:10Z","discussion":[],"review_discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"commits":[{"author":"b-mehta","committer":"web-flow","hash":"95fbefc1cf32ee8b0513397ea80031338cad509d","message":"allow non-local terms\n\nThe exception only says closed terms are a problem, I want to test what happens if I allow non-local terms as well to see if the docstring needs editing","date":"2022-03-15T16:42:24Z"}]},{"author":"gebner","number":700,"diff_summary":[{"file":"src/library/module.cpp","status":"M","additions":74,"deletions":23},{"file":"src/library/module.h","status":"M","additions":74,"deletions":23},{"file":"src/library/module_mgr.cpp","status":"M","additions":74,"deletions":23},{"file":"src/library/module_mgr.h","status":"M","additions":74,"deletions":23},{"file":"src/shell/server.cpp","status":"M","additions":74,"deletions":23},{"file":"src/shell/server.h","status":"M","additions":74,"deletions":23},{"file":"src/util/hash.cpp","status":"M","additions":74,"deletions":23},{"file":"src/util/hash.h","status":"M","additions":74,"deletions":23}],"state":"closed","open_date":"2022-03-14T16:46:23Z","update_date":"2022-03-14T18:22:30Z","discussion":[{"author":"gebner","date":"2022-03-14T17:48:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-03-14T18:22:29Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5542000558?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5541999995?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5542000767?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5542000706?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5542000400?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5542000330?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5542000197?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5542000933?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"d52a03e176164d30eb483cc0646a806b9f1f07fd","message":"fix(library/module_mgr): use 64-bit hashes","date":"2022-03-14T16:32:45Z"},{"author":"gebner","committer":"gebner","hash":"8ea5c3496a5efeea355b7774c06e6ab470ec4efe","message":"missed some unsigneds","date":"2022-03-14T16:46:07Z"},{"author":"gebner","committer":"gebner","hash":"85fff6779b6f6d0268b8545adc1e9f14a6e0dc55","message":"remove misleading init_value","date":"2022-03-14T16:48:51Z"}]},{"author":"gebner","number":699,"diff_summary":[{"file":"src/library/private.cpp","status":"M","additions":4,"deletions":2}],"state":"closed","open_date":"2022-03-14T11:33:00Z","update_date":"2022-03-14T14:15:15Z","discussion":[{"author":"meithecatte","date":"2022-03-14T11:47:00Z","comment":"Does this mean only the row and column in the file get hashed? Perhaps instead we should hash the contents, or at least the contents preceding the private definition? "},{"author":"eric-wieser","date":"2022-03-14T11:53:18Z","comment":"Can we somehow use the filename relative to the project root? Isn't this already used to some extent when producing olean files?"},{"author":"gebner","date":"2022-03-14T11:53:22Z","comment":"> or at least the contents preceding the private definition?\r\n\r\nThe hash already contains the environment fingerprint, which contains at least:\r\n 1. `import` statements\r\n 2. (indirectly) definition names\r\n 3. `open` and `set_option` commands\r\n"},{"author":"gebner","date":"2022-03-14T11:55:25Z","comment":"> Can we somehow use the filename relative to the project root?\r\n\r\nUnfortunately no.  Lean doesn't really know about project roots."},{"author":"gebner","date":"2022-03-14T13:40:19Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-03-14T14:15:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5538102730?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5538102552?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5538103114?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5538103030?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5538102441?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5538102367?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5538102904?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5538103309?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"9eaaae5c5e22a671777ea3b204fc9526c702a7f2","message":"fix(library/private): do not use file name for private name generation","date":"2022-03-14T11:32:27Z"}]},{"author":"gebner","number":698,"diff_summary":[{"file":"README.md","status":"M","additions":17,"deletions":2},{"file":"doc/changes.md","status":"M","additions":17,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":17,"deletions":2}],"state":"closed","open_date":"2022-03-11T09:15:29Z","update_date":"2022-03-11T10:09:32Z","discussion":[{"author":"gebner","date":"2022-03-11T09:37:30Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-03-11T10:09:30Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5508916724?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5508917257?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5508917379?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5508914426?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5508914311?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5508914245?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5508914094?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5508917450?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"896f0f1d0e1149409f56852b405199b99b2ad742","message":"chore(*): release 3.41.0","date":"2022-03-11T09:15:19Z"}]},{"author":"gebner","number":697,"diff_summary":[{"file":"src/library/equations_compiler/elim_match.cpp","status":"A","additions":12,"deletions":1},{"file":"tests/lean/695.lean","status":"A","additions":12,"deletions":1},{"file":"tests/lean/695.lean.expected.out","status":"A","additions":12,"deletions":1}],"state":"closed","open_date":"2022-03-10T18:33:12Z","update_date":"2022-03-10T19:27:01Z","discussion":[{"author":"gebner","date":"2022-03-10T18:51:58Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-03-10T19:27:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5500991485?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5500991138?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5500991815?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5500991755?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5500991649?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5500991597?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5500991312?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5500991938?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"9f07ba228230170fd8b41f655342d85c5983b8b9","message":"chore(library/equations_compiler/elim_match): better error message","date":"2022-03-10T18:31:58Z"},{"author":"gebner","committer":"gebner","hash":"1d1df9053087b75c12b1ac8954a18bf0c89e9c31","message":"fix test","date":"2022-03-10T18:32:59Z"}]},{"author":"gebner","number":696,"diff_summary":[{"file":"library/init/default.lean","status":"A","additions":2642,"deletions":1},{"file":"library/init/meta/feature_search.lean","status":"A","additions":2642,"deletions":1},{"file":"src/CMakeLists.txt","status":"A","additions":2642,"deletions":1},{"file":"src/library/CMakeLists.txt","status":"A","additions":2642,"deletions":1},{"file":"src/library/feature_search.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/feature_search.h","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/CMakeLists.txt","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/LICENSE","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/README.md","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/dtree.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/format.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/knn.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/main.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/mepo.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/nbayes.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/predict.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/predict.h","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/predictor.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/rforest.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/predict/tfidf.cpp","status":"A","additions":2642,"deletions":1},{"file":"src/library/vm/init_module.cpp","status":"A","additions":2642,"deletions":1},{"file":"tests/lean/widget/widget4.input.expected.out","status":"A","additions":2642,"deletions":1}],"state":"closed","open_date":"2022-03-10T18:06:16Z","update_date":"2022-03-10T20:07:45Z","discussion":[{"author":"gebner","date":"2022-03-10T18:07:45Z","comment":"cc @BartoszPiotrowski"},{"author":"gebner","date":"2022-03-10T19:14:18Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-03-10T20:07:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5501423705?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5501423884?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5501424528?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5501424433?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5501424110?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5501424048?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5501424267?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5501424644?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"a324297b39b29e9be0f8566072bcfab6443af587","message":"feat: premise selection","date":"2022-03-10T18:01:32Z"},{"author":"gebner","committer":"gebner","hash":"a7edbf9b86a3b749e6cd3ae454851c2b24cc456a","message":"lint","date":"2022-03-10T18:13:55Z"},{"author":"gebner","committer":"gebner","hash":"35b736a89f4ef9052ee0d6957a3cc164567c8f12","message":"fix test","date":"2022-03-10T18:17:38Z"},{"author":"gebner","committer":"gebner","hash":"a1fac62d93d4340b5ecb3a90f865fa31f5e5401a","message":"fix test","date":"2022-03-10T18:36:10Z"},{"author":"gebner","committer":"gebner","hash":"d3e3252a4aa29bf7406239d93e50378b646fb4ed","message":"fix emscripten build","date":"2022-03-10T18:38:40Z"}]},{"author":"kmill","number":694,"diff_summary":[{"file":"src/frontends/lean/decl_util.cpp","status":"A","additions":14,"deletions":2},{"file":"tests/lean/heuristic_name_field_anonymous.lean","status":"A","additions":14,"deletions":2},{"file":"tests/lean/heuristic_name_field_anonymous.lean.expected.out","status":"A","additions":14,"deletions":2}],"state":"closed","open_date":"2022-03-08T21:45:45Z","update_date":"2022-03-09T09:10:48Z","discussion":[{"author":"gebner","date":"2022-03-09T08:32:33Z","comment":"Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-03-09T09:10:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5477161765?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5477161653?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5477161979?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5477161900?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5477161497?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5477161437?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5477161325?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5477162124?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"kmill","committer":"kmill","hash":"0d28a208b1603d4f8faeb4da7ef4200c83d8f4e9","message":"fix(heuristic_inst_name): give the heuristic name awareness of anonymous fields\n\nThis fixes an assertion error when compiling the most recent mathlib\nusing a debug build of Lean.","date":"2022-03-08T21:42:57Z"}]},{"author":"kmill","number":693,"diff_summary":[{"file":"src/library/compiler/erase_irrelevant.cpp","status":"A","additions":62,"deletions":2},{"file":"src/library/noncomputable.cpp","status":"A","additions":62,"deletions":2},{"file":"tests/lean/noncomputable_constructor_param.lean","status":"A","additions":62,"deletions":2},{"file":"tests/lean/noncomputable_constructor_param.lean.expected.out","status":"A","additions":62,"deletions":2}],"state":"closed","open_date":"2022-03-07T05:50:00Z","update_date":"2022-03-08T09:53:11Z","discussion":[{"author":"eric-wieser","date":"2022-03-07T09:43:53Z","comment":"I guess the downside of only treating constructors specially is that wrapping a constructor in a convenience definition presumably means this feature can't be used"},{"author":"gebner","date":"2022-03-07T10:05:09Z","comment":"> I guess the downside of only treating constructors specially is that wrapping a constructor in a convenience definition presumably means this feature can't be used\r\n\r\nI believe the noncomputable checker honors the `@[inline]` attribute so you can work around this in some cases."},{"author":"kmill","date":"2022-03-07T10:25:52Z","comment":"I've been trying to compile mathlib with this, and there are some mysterious\r\n```\r\nwarning: failed to generate bytecode for 'foo'\r\ncode generation failed, VM does not have code for 'classical.choice'\r\n```\r\nerrors (with `foo` standing in for things like `finsupp.dom_congr`). Haven't gotten to the bottom of it yet..."},{"author":"kmill","date":"2022-03-07T10:28:11Z","comment":"Yep, the `noncomputable` checker [honors `@[inline]`](https://github.com/leanprover-community/lean/blob/106bf80dadd60e839de75b824a259e5a25fdc7ab/src/library/noncomputable.cpp#L163)."},{"author":"kmill","date":"2022-03-07T15:37:45Z","comment":"I think I've tracked down the mystery (and have successfully compiled part of mathlib). The code generator was erasing arguments to constructors, but this was after the lambda lifting transformation, which can take noncomputable typeclass arguments and put them into an unerasable position. I modified the `erase_irrelevant` transformation to clear out inductive type parameter arguments to constructors, which solves this.\r\n\r\nHowever, this needed to be aware of whether the constructor corresponds to a vm builtin (like `d_array.mk`), since that they can end up using the parameters in a computationally relevant way. Getting this wrong, Lean runs very slowly and occasionally crashes (all arrays are initialized to be length-0...).\r\n\r\nInterestingly, the noncomputable [`finsupp.dom_congr`](https://leanprover-community.github.io/mathlib_docs/data/finsupp/basic.html#finsupp.dom_congr), which was giving me trouble earlier, is now computable. While the noncomputable addition for `finsupp` is necessary to define the `add_equiv`, it's not used during computation at all."},{"author":"eric-wieser","date":"2022-03-07T15:55:24Z","comment":"> Interestingly, the noncomputable [`finsupp.dom_congr`](https://leanprover-community.github.io/mathlib_docs/data/finsupp/basic.html#finsupp.dom_congr), which was giving me trouble earlier, is now computable. While the noncomputable addition for `finsupp` is necessary to define the `add_equiv`, it's not used during computation at all.\r\n\r\nThis is exactly what I was hoping would happen!"},{"author":"gebner","date":"2022-03-07T18:16:37Z","comment":"Looks good to me, please merge if mathlib builds with this change.\r\n\r\nbors d+"},{"author":"bors[bot]","date":"2022-03-07T18:16:38Z","comment":":v: kmill can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"kmill","date":"2022-03-08T04:12:32Z","comment":"Unfortunately there's a new mystery, first spotted at [`category_theory.AdditiveFunctor.functor.additive`](https://leanprover-community.github.io/mathlib_docs/category_theory/preadditive/additive_functor.html#category_theory.AdditiveFunctor.functor.additive). MWE:\r\n```lean\r\nclass A {α : Type*} (x : α)\r\n\r\ninstance {α : Type*} {p : α → Prop} (x : subtype p) : A x.1 := A.mk\r\n```\r\nThis instance causes an assertion error when trying to compute the `heuristic_inst_name`. It's looking at the field notation and using `get_field_notation_field_name`, but that's for non-anonymous fields.\r\n\r\nThis doesn't affect lean:3.40.0, and it generates the heuristic name `subtype.A`. If you change `A x.1` to `A x.val`, they both generate the name `subtype.val.A` without error.\r\n\r\nI'm not sure how my changes would affect this yet, but I'll keep looking."},{"author":"kmill","date":"2022-03-08T04:52:33Z","comment":"I've compiled a debug build of lean:3.40.0, and I'm seeing the same assertion error."},{"author":"kmill","date":"2022-03-08T09:12:13Z","comment":"The assertion error ended up being unrelated and will have a separate PR to fix it.\r\n\r\nMathlib seems to compile fine after slight modification. Mostly it's removing about 20-30 `noncomputable` indicators, but one function, `measure_theory.measure.finite_spanning_sets_in.pi`, requires pushing a noncomputable let binding down into the proofs."},{"author":"kmill","date":"2022-03-08T09:12:55Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-03-08T09:53:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5461968538?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5461968180?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5461968913?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5461968846?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5461968397?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5461968301?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5461968644?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5461968750?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"kmill","committer":"kmill","hash":"8e31c5a65e6681248946405df9b9bbd56decd31d","message":"use computational relevance of constructors when computing noncomputability","date":"2022-03-07T04:47:44Z"},{"author":"kmill","committer":"kmill","hash":"065c07f2ec59eb8402ad3bf21ef6a3adee71d2e2","message":"correct that rel_fields starts from num_params","date":"2022-03-07T05:43:18Z"},{"author":"kmill","committer":"kmill","hash":"f74be2ac305b286766de7b83b0efc1a58a0a049f","message":"simplify implementation","date":"2022-03-07T06:15:25Z"},{"author":"kmill","committer":"kmill","hash":"106bf80dadd60e839de75b824a259e5a25fdc7ab","message":"tests","date":"2022-03-07T06:44:42Z"},{"author":"kmill","committer":"kmill","hash":"03714e95e4bf34ba5ab6664d37f10cec3acb5fbd","message":"attempt to inhibit lambda lifting by erasure","date":"2022-03-07T12:34:42Z"},{"author":"kmill","committer":"kmill","hash":"ea43077e080d5117048b9f40e264b491a6c4255e","message":"account for vm builtins","date":"2022-03-07T14:23:06Z"}]},{"author":"kmill","number":692,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"M","additions":45,"deletions":11},{"file":"src/frontends/lean/pp.h","status":"M","additions":45,"deletions":11},{"file":"src/library/pp_options.cpp","status":"M","additions":45,"deletions":11},{"file":"src/library/pp_options.h","status":"M","additions":45,"deletions":11},{"file":"tests/lean/pp_numeral_types.lean","status":"M","additions":45,"deletions":11},{"file":"tests/lean/pp_numeral_types.lean.expected.out","status":"M","additions":45,"deletions":11}],"state":"closed","open_date":"2022-03-03T22:20:15Z","update_date":"2022-03-07T19:44:09Z","discussion":[{"author":"gebner","date":"2022-03-07T18:23:40Z","comment":"The change is technically okay, and the behavior only changes if the option is set.  So I don't really have any objections here.  Please merge if it helps your use case.\r\n\r\nbors d+\r\n\r\nThis kind of tweak is trivial to implement in Lean 4.  I wouldn't spend any time on creating the perfect numeral pretty-printer in Lean 3; make it work for what you need it for and then let it be."},{"author":"bors[bot]","date":"2022-03-07T18:23:42Z","comment":":v: kmill can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"kmill","date":"2022-03-07T19:05:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-03-07T19:44:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5453868204?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5453868081?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5453868371?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5453868307?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5453867824?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5453867770?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5453867956?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5453868453?check_suite_focus=true)"}],"review_discussion":[{"author":"kmill","file":"tests/lean/pp_numeral_types.lean.expected.out","date":"2022-03-05T23:10:33Z","comment":"This is not ideal, since such an expression doesn't round-trip.  I'm not sure if there's a good way to fix this.\r\n\r\nMaybe it makes sense to scale back this PR to just changing the block of code at line 2042 of src/frontends/lean/pp.cpp and not adding the `pp.nat_numerals` option."}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"kmill","committer":"kmill","hash":"f5a18ff8255593d73e4b00d0aa0bbc62db071ad3","message":"feat(pp): add option to control pretty printing of unary nats\n\nThere was already a variable to control pretty printing of unary nats,\nbut at some point it lost a corresponding option and instead has\nbeen using `pp.numerals`. This reintroduces the option.\n\nThis also makes the `pp.numeral_types` less confusing for unary nats,\nhaving them instead be displayed in exactly the same way as other numerals.","date":"2022-03-03T22:14:08Z"},{"author":"kmill","committer":"kmill","hash":"43db8840d927a13599d69bc579cacd08beb3b2bc","message":"make nat_numerals contingent on numerals","date":"2022-03-03T22:34:27Z"}]},{"author":"kmill","number":691,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"A","additions":75,"deletions":10},{"file":"src/frontends/lean/pp.h","status":"A","additions":75,"deletions":10},{"file":"src/library/pp_options.cpp","status":"A","additions":75,"deletions":10},{"file":"src/library/pp_options.h","status":"A","additions":75,"deletions":10},{"file":"tests/lean/pp_numeral_types.lean","status":"A","additions":75,"deletions":10},{"file":"tests/lean/pp_numeral_types.lean.expected.out","status":"A","additions":75,"deletions":10}],"state":"closed","open_date":"2022-03-02T06:02:41Z","update_date":"2022-03-03T10:21:05Z","discussion":[{"author":"gebner","date":"2022-03-03T09:45:41Z","comment":"Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-03-03T10:21:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5404987571?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5404987705?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5404988329?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5404988271?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5404987885?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5404987823?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5404987995?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5404988145?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"kmill","committer":"kmill","hash":"87501dc1d73a5493df63f2eb29b8d51c0bbc6ac5","message":"feat(pp): add option and attribute to display type ascriptions for numerals","date":"2022-03-02T06:01:33Z"},{"author":"kmill","committer":"kmill","hash":"30365ddadc3640ae55937f3d6525dfe5021c7bff","message":"tests","date":"2022-03-02T06:18:30Z"}]},{"author":"kmill","number":690,"diff_summary":[{"file":"src/library/tactic/rewrite_tactic.cpp","status":"A","additions":9,"deletions":2},{"file":"tests/lean/rw_symm_mvar.lean","status":"A","additions":9,"deletions":2},{"file":"tests/lean/rw_symm_mvar.lean.expected.out","status":"A","additions":9,"deletions":2}],"state":"closed","open_date":"2022-03-02T00:31:52Z","update_date":"2022-03-02T10:17:21Z","discussion":[{"author":"gebner","date":"2022-03-02T09:43:46Z","comment":"Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-03-02T10:17:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5389342828?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5389342197?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5389343189?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5389343053?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5389342724?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5389342643?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5389342533?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5389343300?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"kmill","committer":"kmill","hash":"40059818c5062cf706109f80b777b00130c31953","message":"fix(src/library/tactic/rewrite_tactic): move LHS metavar check\n\nThe LHS metavar check for rw occurred before symmetry (the `←`) was\napplied, leading to the bug where `rw ← h` might fail with \"rewrite\ntactic failed, lemma lhs is a metavariable\" but `rw h.symm` would\nsucceed.","date":"2022-03-02T00:24:18Z"}]},{"author":"kmill","number":689,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"A","additions":58,"deletions":4},{"file":"library/init/meta/interactive_base.lean","status":"A","additions":58,"deletions":4},{"file":"tests/lean/sorry_itactic.lean","status":"A","additions":58,"deletions":4},{"file":"tests/lean/sorry_itactic.lean.expected.out","status":"A","additions":58,"deletions":4}],"state":"closed","open_date":"2022-02-22T18:12:03Z","update_date":"2022-02-22T19:58:40Z","discussion":[{"author":"gebner","date":"2022-02-22T18:16:51Z","comment":"Thanks!\r\nbors r+"},{"author":"gebner","date":"2022-02-22T18:17:30Z","comment":"bors r-"},{"author":"bors[bot]","date":"2022-02-22T18:17:30Z","comment":"Canceled."},{"author":"gebner","date":"2022-02-22T18:20:57Z","comment":"bors r+"},{"author":"gebner","date":"2022-02-22T18:28:21Z","comment":"bors d+"},{"author":"bors[bot]","date":"2022-02-22T18:28:22Z","comment":":v: kmill can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"bors[bot]","date":"2022-02-22T18:35:12Z","comment":"Canceled."},{"author":"kmill","date":"2022-02-22T19:22:30Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-02-22T19:58:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5293648458?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5293648336?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5293649025?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5293648960?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5293648741?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5293648645?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5293648874?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5293649104?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"kmill","committer":"kmill","hash":"96eaf45b75ed224a97af2fb1e48352d05da8ed4b","message":"feat(library/init/meta/interactive): give sorry ignored itactic block\n\nThis supports being able to \"comment out\" parts of a tactic proof, which is\nuseful during proof development when there are slow subproofs.","date":"2022-02-22T18:06:23Z"},{"author":"kmill","committer":"kmill","hash":"6fcbecdeaff2925df318c74b3dffbfa82a35995e","message":"removed spaces in comment","date":"2022-02-22T18:11:39Z"},{"author":"kmill","committer":"kmill","hash":"4251759881ad9edd8691fc7439ec0840ae29f595","message":"corrected test output","date":"2022-02-22T18:31:41Z"},{"author":"kmill","committer":"kmill","hash":"25fbaf4d89384dd9778721de42a28487e7c19e8b","message":"added extra tests","date":"2022-02-22T18:34:46Z"}]},{"author":"gebner","number":688,"diff_summary":[{"file":"README.md","status":"M","additions":10,"deletions":3},{"file":"doc/changes.md","status":"M","additions":10,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":10,"deletions":3}],"state":"closed","open_date":"2022-02-22T15:12:24Z","update_date":"2022-02-22T15:49:31Z","discussion":[{"author":"gebner","date":"2022-02-22T15:14:25Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-22T15:49:30Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5290310050?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5290309569?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5290310763?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5290303708?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5290310452?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5290310331?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5290309850?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5290304019?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"8dad01f1ef3098c5a9997aff0a0ba9e3ca2f00fb","message":"chore(*): release 3.40.0","date":"2022-02-22T15:12:13Z"}]},{"author":"digama0","number":687,"diff_summary":[{"file":"src/frontends/lean/parser_config.cpp","status":"M","additions":4,"deletions":2}],"state":"closed","open_date":"2022-02-22T12:02:33Z","update_date":"2022-02-22T13:37:12Z","discussion":[{"author":"gebner","date":"2022-02-22T12:16:04Z","comment":"Wouldn't it be faster to just change mathport instead?"},{"author":"digama0","date":"2022-02-22T12:35:43Z","comment":"Sure, we can patch mathport until this lands. But the current behavior is wrong and will cause additional naming conflicts."},{"author":"gebner","date":"2022-02-22T12:55:19Z","comment":"OK then.\r\nbors r+"},{"author":"bors[bot]","date":"2022-02-22T13:37:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5288365458?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5288365921?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5288366121?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5288366063?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5288365693?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5288365622?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5288365336?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5288366229?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"d4cda5b78c191802fa841b1bb771d86cdbbae95f","message":"fix(frontends/lean/parser_config.cpp): strip spaces in heuristic_name","date":"2022-02-22T12:01:23Z"}]},{"author":"digama0","number":686,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":2,"deletions":1}],"state":"closed","open_date":"2022-02-21T23:56:15Z","update_date":"2022-02-22T10:06:51Z","discussion":[{"author":"gebner","date":"2022-02-22T09:22:39Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-02-22T10:06:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5285722966?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5285723115?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5285723623?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5285723578?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5285723334?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5285723242?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5285723447?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5285723724?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"6a9b28c5e71c6a70634d5c9baa58dc39da514f7a","message":"fix(init/meta/interactive): don't skip remainder in rw_hyp","date":"2022-02-21T23:55:49Z"}]},{"author":"gebner","number":684,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":10,"deletions":3},{"file":"README.md","status":"M","additions":10,"deletions":3},{"file":"doc/changes.md","status":"M","additions":10,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":10,"deletions":3}],"state":"closed","open_date":"2022-02-17T12:08:38Z","update_date":"2022-02-17T13:55:47Z","discussion":[{"author":"gebner","date":"2022-02-17T12:08:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-17T12:20:48Z","comment":"Build failed:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5231702468?check_suite_focus=true)"},{"author":"gebner","date":"2022-02-17T13:25:19Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-17T13:55:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5232663968?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5232664274?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5232672116?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5232672025?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5232671410?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5232671324?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5232664128?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5232664820?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c55387b3ea9e97cebccc331c7a8568531c183aec","message":"chore(*): release 3.39.2","date":"2022-02-17T12:08:17Z"},{"author":"gebner","committer":"gebner","hash":"3741851a23bf65810937e81d229659e4ebe21fcb","message":"try to fix build","date":"2022-02-17T12:25:11Z"},{"author":"gebner","committer":"gebner","hash":"ad66c3a2759e0bb8a843d3e256eba3cb226496c0","message":"fix windows build, take 2","date":"2022-02-17T12:42:22Z"}]},{"author":"dselsam","number":683,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"M","additions":41,"deletions":47},{"file":"src/frontends/lean/parser.h","status":"M","additions":41,"deletions":47}],"state":"closed","open_date":"2022-02-15T03:37:19Z","update_date":"2022-02-15T12:14:17Z","discussion":[{"author":"gebner","date":"2022-02-15T11:34:21Z","comment":"Okay, I'm not sure what the actual change here is but let's try it out.\r\n\r\nbors r+"},{"author":"digama0","date":"2022-02-15T11:58:23Z","comment":"The actual change in control flow is: if you get to the `mk_field_notation_compact` line inside `if (allow_field_notation && ...)`, previously that expression would be returned, captured by the `if (auto r = ...)` line and then `finalize_ast` is called on it. The revised version returns the result of `mk_field_notation_compact` directly without `finalize_ast`-wrapping"},{"author":"bors[bot]","date":"2022-02-15T12:14:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5199315018?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5199314751?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5199315211?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5199315129?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5199315501?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5199315352?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5199314890?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5199315631?check_suite_focus=true)"},{"author":"gebner","date":"2022-02-18T10:33:20Z","comment":"> I haven't run the full mathport pipeline with it though.\r\n\r\nThe latest nightly looks good.  There are still some regressions but they seem to be restricted to the core library:\r\n```diff\r\n @[inline]\r\n def mmap {m} [Monadₓ m] (b : Buffer α) (f : α → m β) : m (Buffer β) := do\r\n   let b' ← b.2.mmap f\r\n-  return b'.to_buffer\r\n+  return b'\r\n```"}],"review_discussion":[],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"f29c26416561aa18d4076a61cc923b27d6a2cab9","message":"Revert \"fix: export ast field info for <local>.<field> (#677)\"\n\nThis reverts commit be0751e72e91827d4058c7fe5b0375216b04bb83.","date":"2022-02-15T01:51:18Z"},{"author":"dselsam","committer":"dselsam","hash":"93b4b0a02a5fe28d1e16f65d9a5aaec1a1b36068","message":"fix: be0751e72e91827d4058c7fe5b0375216b04bb83 was buggy","date":"2022-02-15T03:34:20Z"}]},{"author":"digama0","number":682,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"M","additions":43,"deletions":20},{"file":"src/library/expr_address.cpp","status":"M","additions":43,"deletions":20},{"file":"src/library/expr_address.h","status":"M","additions":43,"deletions":20},{"file":"src/library/type_context.cpp","status":"M","additions":43,"deletions":20},{"file":"tests/lean/pp_tagged.lean","status":"M","additions":43,"deletions":20},{"file":"tests/lean/pp_tagged.lean.expected.out","status":"M","additions":43,"deletions":20}],"state":"closed","open_date":"2022-02-10T20:50:53Z","update_date":"2022-02-11T10:05:28Z","discussion":[{"author":"gebner","date":"2022-02-11T09:31:09Z","comment":"It's amazing we haven't run into this bug much earlier.   Thanks for debugging the issue!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-02-11T10:05:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5154018183?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5154018026?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5154018617?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5154018553?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5154018467?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5154018391?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5154018292?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5154018710?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"31384209f39c58cc150c2e2dd5947c47ad721668","message":"Fix `pp_tagged` output for have statements\n\nFixes #673","date":"2022-02-10T20:49:45Z"}]},{"author":"dselsam","number":681,"diff_summary":[{"file":"src/library/ast_exporter.cpp","status":"M","additions":15,"deletions":4},{"file":"src/library/tactic/tactic_log.cpp","status":"M","additions":15,"deletions":4},{"file":"src/library/tactic/tactic_log.h","status":"M","additions":15,"deletions":4}],"state":"closed","open_date":"2022-02-10T03:47:38Z","update_date":"2022-02-15T03:38:46Z","discussion":[{"author":"digama0","date":"2022-02-10T05:07:25Z","comment":"This could be significantly expensive. It should be controlled by a command line flag."},{"author":"gebner","date":"2022-02-10T09:25:01Z","comment":"> This could be significantly expensive. It should be controlled by a command line flag.\r\n\r\nYes, both in terms of CPU time and disk space."},{"author":"dselsam","date":"2022-02-15T03:38:46Z","comment":"This is niche enough and a small enough delta that it doesn't seem worth merging into master."}],"review_discussion":[{"author":"digama0","file":"src/library/tactic/tactic_log.cpp","date":"2022-02-10T05:09:37Z","comment":"Why not just call `summarize` in `get_id` if you are going to pass the tactic_state?"}],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"e58c26a1d754a456138ffe535aad4b13fc88a76b","message":"feat: export pretty-printed tactic states in ast\n\nThis small commit, in combination with the ast parsing in mathport, together make it straightforward to produce high-quality datasets of tactic applications.","date":"2022-02-10T03:40:55Z"},{"author":"dselsam","committer":"dselsam","hash":"2b9654caa8182462105f2d9631fcd6e4bc43a6aa","message":"chore: make style checker happy","date":"2022-02-10T04:27:05Z"},{"author":"dselsam","committer":"dselsam","hash":"abff8b9633c8aa90c5d4267f8c726ddd7a33a1c0","message":"fix: json key that play sbetter with lean4 derivers","date":"2022-02-10T22:30:27Z"}]},{"author":"gebner","number":680,"diff_summary":[{"file":"README.md","status":"M","additions":8,"deletions":2},{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2}],"state":"closed","open_date":"2022-02-08T14:11:40Z","update_date":"2022-02-08T14:49:39Z","discussion":[{"author":"gebner","date":"2022-02-08T14:11:44Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-08T14:49:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5110441302?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5110441484?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5110442228?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5110435617?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5110435042?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5110441021?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5110435471?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5110442502?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"639943af92f6fba475550a508a72408dcddfaac9","message":"chore(*): release 3.39.1c","date":"2022-02-08T14:11:05Z"}]},{"author":"gebner","number":679,"diff_summary":[{"file":"src/frontends/lean/parser.h","status":"M","additions":49,"deletions":7},{"file":"src/frontends/lean/scanner.cpp","status":"M","additions":49,"deletions":7},{"file":"src/frontends/lean/scanner.h","status":"M","additions":49,"deletions":7},{"file":"src/library/ast_exporter.cpp","status":"M","additions":49,"deletions":7}],"state":"closed","open_date":"2022-02-07T14:44:05Z","update_date":"2022-02-08T13:01:19Z","discussion":[{"author":"gebner","date":"2022-02-08T12:18:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-08T13:01:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5108920613?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5108920717?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5108920866?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5108920803?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5108920385?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5108920329?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5108920106?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5108920961?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"3eb8fa5be5fa2a9d8e170b925fa34ff917f0af86","message":"feat: record comments in ast","date":"2022-02-07T14:29:30Z"},{"author":"gebner","committer":"gebner","hash":"42ed89b6ed6f8e6b5bac739d40c86cf21b91a837","message":"pacify style linter","date":"2022-02-07T14:45:44Z"}]},{"author":"gebner","number":678,"diff_summary":[{"file":"README.md","status":"M","additions":15,"deletions":2},{"file":"doc/changes.md","status":"M","additions":15,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":15,"deletions":2}],"state":"closed","open_date":"2022-02-03T11:03:49Z","update_date":"2022-02-03T11:44:34Z","discussion":[{"author":"gebner","date":"2022-02-03T11:04:30Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-03T11:44:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5050541089?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5050536180?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5050541618?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5050536463?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5050541426?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5050541342?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5050541232?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5050541749?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"823f3fac5c61b5817b6073bbb1f3613956cf08f5","message":"chore(*): release 3.39.0","date":"2022-02-03T11:03:28Z"}]},{"author":"dselsam","number":677,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"M","additions":45,"deletions":40},{"file":"src/frontends/lean/parser.h","status":"M","additions":45,"deletions":40}],"state":"closed","open_date":"2022-02-02T03:22:00Z","update_date":"2022-02-02T12:19:04Z","discussion":[{"author":"gebner","date":"2022-02-02T11:29:45Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-02T11:31:10Z","comment":"Build failed:\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5035746279?check_suite_focus=true)"},{"author":"gebner","date":"2022-02-02T11:35:15Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-02T12:19:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5035809119?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5035809226?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5035809565?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5035809523?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5035809451?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5035809417?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5035809333?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5035809655?check_suite_focus=true)"}],"review_discussion":[{"author":"digama0","file":"src/frontends/lean/parser.cpp","date":"2022-02-02T03:50:41Z","comment":"suspicious copy"},{"author":"digama0","file":"src/frontends/lean/parser.cpp","date":"2022-02-02T04:26:19Z","comment":"this calls `save_pos` twice"},{"author":"dselsam","file":"src/frontends/lean/parser.cpp","date":"2022-02-02T05:15:09Z","comment":"good catch -- stale line, removed"},{"author":"dselsam","file":"src/frontends/lean/parser.cpp","date":"2022-02-02T05:15:29Z","comment":"good catch -- removed the save_pos at that line"}],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"b42919c1ac3496040e61b824f5229f08f9a466ba","message":"fix: export ast field info for <local>.<field>","date":"2022-02-02T03:19:42Z"},{"author":"dselsam","committer":"dselsam","hash":"e4565d92267b5ff216bc86be8780e2b1eb834722","message":"chore: rm stale line","date":"2022-02-02T05:13:44Z"},{"author":"dselsam","committer":"dselsam","hash":"a7739af572d9fa27f326f6ed27a024a4d5c2c9a6","message":"fix: do not save_pos twice","date":"2022-02-02T05:13:55Z"}]},{"author":"digama0","number":676,"diff_summary":[{"file":"library/init/meta/interactive_base.lean","status":"M","additions":5,"deletions":0}],"state":"closed","open_date":"2022-01-30T00:23:15Z","update_date":"2022-01-31T17:04:40Z","discussion":[{"author":"gebner","date":"2022-01-31T16:27:38Z","comment":"bors r="},{"author":"gebner","date":"2022-01-31T16:27:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-31T17:04:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5008997720?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5008997543?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5008998304?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5008998224?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5008998114?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5008998041?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5008997872?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5008998456?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"40cd36ab12f1c855814147d3bce765dfdb9caac3","message":"fix(init/meta/interactive_base): add missing parser_desc combinators","date":"2022-01-30T00:21:38Z"}]},{"author":"urkud","number":675,"diff_summary":[{"file":"library/init/data/set.lean","status":"M","additions":18,"deletions":68},{"file":"tests/lean/run/cc_ac4.lean","status":"M","additions":18,"deletions":68},{"file":"tests/lean/run/empty_set_inside_quotations.lean","status":"M","additions":18,"deletions":68},{"file":"tests/lean/run/set1.lean","status":"M","additions":18,"deletions":68}],"state":"closed","open_date":"2022-01-28T16:30:31Z","update_date":"2022-05-18T12:44:32Z","discussion":[{"author":"gebner","date":"2022-01-28T16:48:01Z","comment":"Feel free to move the rest to mathlib as well.  Except for `set_of` because that's referenced by Lean."},{"author":"urkud","date":"2022-01-28T20:12:31Z","comment":"I've got a cold, so for the next few days I only do things that are fun (or necessary). This isn't, so it's going to wait till next Monday or Wednesday."},{"author":"gebner","date":"2022-05-18T12:12:04Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-05-18T12:44:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6488912777?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6488912968?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6488913719?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6488913612?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6488913448?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6488913324?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6488913101?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6488913951?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"urkud","committer":"urkud","hash":"356730a75f040b94e541bb38c4925b522336f749","message":"chore(library/init/data/set): drop `set.sUnion`\n\nMoving to `mathlib`","date":"2022-05-11T05:12:53Z"},{"author":"urkud","committer":"urkud","hash":"404c6e55dcb7b4ec9fba706ebb73b4fc78cb6fba","message":"Drop the rest of the file","date":"2022-05-11T05:12:53Z"},{"author":"urkud","committer":"urkud","hash":"c77f5ef9b67460e959d7e709aea20265ef846b5b","message":"Update","date":"2022-05-11T05:12:53Z"},{"author":"urkud","committer":"urkud","hash":"794e435e32d9ba675f871d2dd9e7fcec96fa0b45","message":"Restore univ","date":"2022-05-11T05:49:20Z"}]},{"author":"robertylewis","number":674,"diff_summary":[{"file":"library/init/meta/expr.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2022-01-28T15:10:16Z","update_date":"2022-01-28T16:02:45Z","discussion":[{"author":"gebner","date":"2022-01-28T15:25:34Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-28T16:02:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4982601212?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4982601452?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4982601824?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4982601766?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4982601657?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4982601597?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4982601344?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4982601940?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"robertylewis","committer":"web-flow","hash":"e656ae3e09aba3863ee4b22f6277b526b0a43048","message":"chore(init/meta/expr): pexpr is inhabited too","date":"2022-01-28T15:10:00Z"}]},{"author":"YaelDillies","number":671,"diff_summary":[{"file":"extras/latex/lstlean.tex","status":"M","additions":2,"deletions":0}],"state":"closed","open_date":"2022-01-23T22:49:43Z","update_date":"2022-01-24T10:37:03Z","discussion":[{"author":"gebner","date":"2022-01-24T09:55:06Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-24T10:37:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4919810782?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4919810708?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4919810608?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4919810547?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4919810448?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4919810400?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4919810299?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4919810850?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"YaelDillies","committer":"YaelDillies","hash":"99ed8438b3bc8e5a73ff9c8ab211dc7425e2fc4d","message":"initial commit","date":"2022-01-23T22:46:33Z"}]},{"author":"dselsam","number":670,"diff_summary":[{"file":"library/init/meta/converter/conv.lean","status":"M","additions":42,"deletions":20},{"file":"library/init/meta/converter/interactive.lean","status":"M","additions":42,"deletions":20},{"file":"library/init/meta/rewrite_tactic.lean","status":"M","additions":42,"deletions":20},{"file":"library/init/meta/simp_tactic.lean","status":"M","additions":42,"deletions":20},{"file":"library/init/meta/smt/rsimp.lean","status":"M","additions":42,"deletions":20},{"file":"library/init/meta/tactic.lean","status":"M","additions":42,"deletions":20},{"file":"library/init/meta/well_founded_tactics.lean","status":"M","additions":42,"deletions":20},{"file":"library/init/util.lean","status":"M","additions":42,"deletions":20}],"state":"closed","open_date":"2022-01-21T16:15:06Z","update_date":"2022-01-31T18:05:05Z","discussion":[{"author":"gebner","date":"2022-01-31T16:31:14Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-31T16:38:09Z","comment":"Canceled."},{"author":"dselsam","date":"2022-01-31T16:43:48Z","comment":"@gebner Thank you for the feedback. I adopted your `tag : unit` suggestion. I didn't understand your suggestion about `@[reducible] def id_tag (tag : string) (x : Prop) : Prop := x` though -- did you mean that proofs should have nested `id`s like `@id (@id_tag \"my-tac\" thm) pf`?"},{"author":"gebner","date":"2022-01-31T17:09:13Z","comment":"> I didn't understand your suggestion about @[reducible] def id_tag (tag : string) (x : Prop) : Prop := x though -- did you mean that proofs should have nested ids like @id (@id_tag \"my-tac\" thm) pf?\r\n\r\nApparently that was too subtle.  My suggestion was to use `Prop` instead of `Sort u` because the tag should not appear in data."},{"author":"dselsam","date":"2022-01-31T17:16:09Z","comment":"Oh you just meant `@[reducible] def id_tag (tag : string) {α : Prop} (x : α) : α := x`? The way you wrote it, it only took the `Prop` without the proof. I thought it might be nice to allow tactics to tag data -- e.g. a program synthesis tactic might tag a gnarly program it constructed -- but this is irrelevant in current mathlib so I would be very happy to restrict to `Prop`. I'll push the change."},{"author":"gebner","date":"2022-01-31T17:26:37Z","comment":"> The way you wrote it, it only took the Prop without the proof.\r\n\r\nOoops, sorry for the confusion.\r\n\r\nbors r+"},{"author":"gebner","date":"2022-01-31T17:26:45Z","comment":"bors cancel"},{"author":"bors[bot]","date":"2022-01-31T17:26:46Z","comment":"Canceled."},{"author":"gebner","date":"2022-01-31T17:27:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-31T18:05:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5009833999?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5009834450?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5009834660?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5009834567?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5009834335?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5009834259?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5009834128?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5009834802?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"library/init/util.lean","date":"2022-01-21T19:14:41Z","comment":"```suggestion\r\n@[reducible] def id_tag (tag : string) (x : Prop) : Prop := x\r\n```\r\n\r\nAFAICT it's not used for anything else and we'd like to avoid unnecessary functions in data.\r\n\r\nUsing strings for data certainly has some performance impact (particularly when every tactic inserts a string into the proof term).  I'd be a bit more comfortable if it was `(tag : unit)` and we had `def ring := ()`, etc.  Or even `theorem ring_tag {p : Prop} (h : p) : p := h`.\r\n\r\nThe macro is also an option, but that requires adapting the various export formats."},{"author":"eric-wieser","file":"library/init/meta/tactic.lean","date":"2022-07-04T10:28:35Z","comment":"What was this docstring meant to say? It looks like it's incomplete."}],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"3c2a066bde89a3e47db88862eef0a46837aaa1f7","message":"feat: id_tag for \"tagging\" tactic proofs","date":"2022-01-21T15:55:41Z"},{"author":"dselsam","committer":"dselsam","hash":"92fb89cc27a7314ddb6ec59c92b6252ed6863e9c","message":"id_tagged: use unit/consts instead of strings","date":"2022-01-31T16:23:11Z"},{"author":"dselsam","committer":"dselsam","hash":"45793461c6106524b27833e9a86e81f509ca87e8","message":"rename: id_tagged -> id_tag","date":"2022-01-31T16:38:01Z"},{"author":"dselsam","committer":"dselsam","hash":"79f9039b79f2cefef567dc2920000feb342ed878","message":"fix: id_tag only tag proofs not data","date":"2022-01-31T17:21:58Z"}]},{"author":"kmill","number":669,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"A","additions":46,"deletions":2},{"file":"src/frontends/lean/pp.h","status":"A","additions":46,"deletions":2},{"file":"src/library/pp_options.cpp","status":"A","additions":46,"deletions":2},{"file":"src/library/pp_options.h","status":"A","additions":46,"deletions":2},{"file":"tests/lean/pp_parens.lean","status":"A","additions":46,"deletions":2},{"file":"tests/lean/pp_parens.lean.expected.out","status":"A","additions":46,"deletions":2}],"state":"closed","open_date":"2022-01-15T19:11:46Z","update_date":"2022-01-18T13:00:21Z","discussion":[{"author":"fpvandoorn","date":"2022-01-16T13:15:44Z","comment":"Does it put parentheses around notation with binders? Around the `foldr`-notation combinator (like for `[1,2,3]`)?\r\nDo we want to add a test?"},{"author":"kmill","date":"2022-01-17T19:34:21Z","comment":"@fpvandoorn I added some tests to illustrate the behavior. It puts parentheses around every instance of non-special-cased notation (and also around negative numerals, just for clarity).\r\n\r\nThe only notations it does not parenthesize right now are ones built into the pretty printer, like subtypes, set separation, set of, explicit collections, tuples, and special constants like unit. It also does not parenthesize other constructions, like lambdas, function applications, pi expressions, let expressions, etc.\r\n\r\nI think the main intent of this feature is to help understand precedence of user-defined notation."},{"author":"fpvandoorn","date":"2022-01-18T11:57:20Z","comment":"LGTM"},{"author":"gebner","date":"2022-01-18T12:21:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-18T13:00:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4853077959?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4853077753?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4853078066?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4853078030?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4853077889?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4853077838?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4853077652?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4853078132?check_suite_focus=true)"}],"review_discussion":[{"author":"digama0","file":"tests/lean/pp_parens.lean.expected.out","date":"2022-01-18T20:12:01Z","comment":"Shouldn't there be parentheses around `f 3 4` and `f 1 2` in this example? It's not always obvious whether a notation has precedence higher than application or not."},{"author":"kmill","file":"tests/lean/pp_parens.lean.expected.out","date":"2022-01-18T22:00:55Z","comment":"@digama0 Here's an example for how high-precedence notation interacts with the feature:\r\n```lean\r\nlocal infix ` ++ `:5000 := list.append\r\n\r\ndef tail {α : Type*} : list α → list α := list.tail\r\n\r\n#check (tail [1,2,3])++[3,4,5]\r\n/- (tail [1, 2, 3]) ++ [3, 4, 5] : list ℕ -/\r\n#check tail [1,2,3]++[3,4,5]\r\n/- tail [1, 2, 3] ++ [3, 4, 5] : list ℕ -/\r\n\r\nset_option pp.parens true\r\n\r\n#check (tail [1,2,3])++[3,4,5]\r\n/- ((tail ([1, 2, 3])) ++ ([3, 4, 5])) : list ℕ -/\r\n#check tail [1,2,3]++[3,4,5]\r\n/- tail (([1, 2, 3]) ++ ([3, 4, 5])) : list ℕ -/\r\n```\r\nIt seems like everything's unambiguous, even if you don't know any of the precedences. (Or, at least, if you assume function application has highest precedence.)\r\n\r\nI had looked a little into having function applications *always* be wrapped in an additional layer of parentheses, but at least in the few easy-ish ways I'd thought of implementing it, you'd get things like `(((f) 3) 4)` or `((f x y) + (x))`."}],"tags":[],"commits":[{"author":"kmill","committer":"kmill","hash":"b6602383677165db147bed6a98a38f9022c9a436","message":"feat(src/frontends/lean/pp): add option pp.parens to force parentheses for notation","date":"2022-01-15T03:49:33Z"},{"author":"kmill","committer":"kmill","hash":"3e620824fd428442bb9316a38cfa497900144ddb","message":"tests","date":"2022-01-17T19:26:51Z"}]},{"author":"gebner","number":668,"diff_summary":[{"file":"README.md","status":"M","additions":14,"deletions":2},{"file":"doc/changes.md","status":"M","additions":14,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":14,"deletions":2}],"state":"closed","open_date":"2022-01-11T10:56:48Z","update_date":"2022-01-11T12:07:53Z","discussion":[{"author":"gebner","date":"2022-01-11T11:32:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-11T12:07:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4774603151?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4774608325?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4774603635?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4774608411?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4774608083?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4774603270?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4774608245?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4774603729?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"doc/changes.md","date":"2022-01-11T11:20:49Z","comment":"```suggestion\r\n3.38.0c (11 January 2022)\r\n```\r\n\r\nOops."}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"1892ecec4dfde63f51304f327f9efd0b6b2acb4e","message":"chore(*): release 3.38.0c","date":"2022-01-11T10:56:19Z"},{"author":"gebner","committer":"web-flow","hash":"42dfb605045b3641106bf6d95fb3a233e7b8f863","message":"Update doc/changes.md","date":"2022-01-11T11:20:57Z"}]},{"author":"gebner","number":667,"diff_summary":[{"file":"library/init/meta/default.lean","status":"A","additions":129,"deletions":17},{"file":"library/init/meta/instance_cache.lean","status":"A","additions":129,"deletions":17},{"file":"library/init/meta/tactic.lean","status":"A","additions":129,"deletions":17},{"file":"src/library/type_context.cpp","status":"A","additions":129,"deletions":17},{"file":"src/library/type_context.h","status":"A","additions":129,"deletions":17},{"file":"tests/lean/rename.lean.expected.out","status":"A","additions":129,"deletions":17},{"file":"tests/lean/revert_frozen_dep.lean.expected.out","status":"A","additions":129,"deletions":17}],"state":"closed","open_date":"2022-01-11T10:51:52Z","update_date":"2022-01-11T11:31:45Z","discussion":[{"author":"gebner","date":"2022-01-11T10:52:10Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-11T11:31:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4774171783?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4774171667?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4774172037?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4774171972?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4774172194?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4774172154?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4774171878?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4774172286?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c5aeb4d9481c94121b313db2dd7cd31dc513b5fa","message":"feat(library/init/meta): import unfreezing tactic from mathlib","date":"2022-01-11T10:48:54Z"},{"author":"gebner","committer":"gebner","hash":"7b69dc31aeb7a40266b372349e230a335a9fe968","message":"Fix tests.","date":"2022-01-11T10:50:36Z"}]},{"author":"gebner","number":666,"diff_summary":[{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":28,"deletions":20},{"file":"src/library/tactic/tactic_state.h","status":"A","additions":28,"deletions":20},{"file":"src/library/vm/interaction_state.h","status":"A","additions":28,"deletions":20},{"file":"src/library/vm/interaction_state_imp.h","status":"A","additions":28,"deletions":20},{"file":"src/library/vm/vm_parser.cpp","status":"A","additions":28,"deletions":20},{"file":"tests/lean/run/using_new_ref_interactive.lean","status":"A","additions":28,"deletions":20}],"state":"closed","open_date":"2022-01-11T10:32:37Z","update_date":"2022-01-11T11:31:47Z","discussion":[{"author":"gebner","date":"2022-01-11T10:49:44Z","comment":"bors merge"},{"author":"gebner","date":"2022-01-11T10:49:59Z","comment":"bors r-"},{"author":"bors[bot]","date":"2022-01-11T10:50:00Z","comment":"Canceled."},{"author":"gebner","date":"2022-01-11T10:51:12Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-11T11:31:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4774171783?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4774171667?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4774172037?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4774171972?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4774172194?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4774172154?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4774171878?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4774172286?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"fbf49c33d2bc7d0d9517a921fc6d97dd8b64a21b","message":"fix(library/tactic/tactic_state): allow cloning tactic states with references","date":"2022-01-11T10:34:20Z"},{"author":"gebner","committer":"gebner","hash":"6dafa0b3d1866365ab0cfe9a00926ddd4f0f0304","message":"Add test.","date":"2022-01-11T10:51:02Z"}]},{"author":"gebner","number":665,"diff_summary":[{"file":"library/init/data/nat/lemmas.lean","status":"A","additions":203,"deletions":101},{"file":"library/init/logic.lean","status":"A","additions":203,"deletions":101},{"file":"library/init/meta/congr_lemma.lean","status":"A","additions":203,"deletions":101},{"file":"library/init/meta/fun_info.lean","status":"A","additions":203,"deletions":101},{"file":"library/init/meta/interactive.lean","status":"A","additions":203,"deletions":101},{"file":"library/init/meta/simp_tactic.lean","status":"A","additions":203,"deletions":101},{"file":"src/library/congr_lemma.cpp","status":"A","additions":203,"deletions":101},{"file":"src/library/congr_lemma.h","status":"A","additions":203,"deletions":101},{"file":"src/library/fun_info.cpp","status":"A","additions":203,"deletions":101},{"file":"src/library/fun_info.h","status":"A","additions":203,"deletions":101},{"file":"src/library/tactic/fun_info_tactics.cpp","status":"A","additions":203,"deletions":101},{"file":"src/library/tactic/simp_lemmas.cpp","status":"A","additions":203,"deletions":101},{"file":"src/library/tactic/simp_lemmas.h","status":"A","additions":203,"deletions":101},{"file":"src/library/tactic/simplify.cpp","status":"A","additions":203,"deletions":101},{"file":"tests/lean/run/subsingleton_simp.lean","status":"A","additions":203,"deletions":101},{"file":"tests/lean/simp_subsingleton.lean","status":"A","additions":203,"deletions":101},{"file":"tests/lean/simp_subsingleton.lean.expected.out","status":"A","additions":203,"deletions":101}],"state":"closed","open_date":"2022-01-09T16:24:26Z","update_date":"2022-01-11T10:53:56Z","discussion":[{"author":"gebner","date":"2022-01-09T16:33:05Z","comment":"Hmmm, this still synthesizes subsingleton instances in simp. ?!?!?"},{"author":"gebner","date":"2022-01-11T10:07:54Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-11T10:53:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4773647669?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4773647878?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4773648399?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4773648336?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4773648041?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4773647989?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4773648112?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4773648495?check_suite_focus=true)"}],"review_discussion":[{"author":"Vierkantor","file":"library/init/meta/simp_tactic.lean","date":"2022-01-10T22:00:11Z","comment":"While we don't really have a consistent style for `do` blocks, this file seems to use\r\n```suggestion\r\nmeta def join_user_simp_lemmas (no_dflt : bool) (attrs : list name) : tactic simp_lemmas :=\r\ndo s ← simp_lemmas.mk_default,\r\n   let s := if no_dflt then s.erase_simp_lemmas else s,\r\n   join_user_simp_lemmas_core s attrs\r\n```\r\nor\r\n```suggestion\r\nmeta def join_user_simp_lemmas (no_dflt : bool) (attrs : list name) : tactic simp_lemmas :=\r\ndo\r\n  s ← simp_lemmas.mk_default,\r\n  let s := if no_dflt then s.erase_simp_lemmas else s,\r\n  join_user_simp_lemmas_core s attrs\r\n```\r\neither of which look better to me since the `do` is more obvious."},{"author":"Vierkantor","file":"src/library/congr_lemma.cpp","date":"2022-01-10T22:12:45Z","comment":"As far as I can tell, there is no code specific to `decidable` in the simplifier except for this code that detects whether a parameter is of the form `decidable _`, correct?\r\n\r\nSince it's quite likely we want to treat `fintype` exactly the same, I feel the intention is clearer if the `congr_arg_kind` was called `Subsingleton` or something to indicate what we want to do with it, rather than what it looks like."},{"author":"gebner","file":"src/library/congr_lemma.cpp","date":"2022-01-11T09:53:02Z","comment":"Okay, renamed to `SubsingletonInst`."}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"ff19fb5ffa6ee7ccc41643106b33679c4b0aafe5","message":"perf(library/congr_lemma): do not check for subsingleton in simp congrs","date":"2022-01-09T16:11:32Z"},{"author":"gebner","committer":"gebner","hash":"ba95e99cec9a0fedf8f6f01d4de15a9a562f9692","message":"fix test","date":"2022-01-09T16:16:48Z"},{"author":"gebner","committer":"gebner","hash":"6d3f05b829e65b9e09bacaf8bdae3137d7dca798","message":"Remove last remnant of subsingleton in simp.","date":"2022-01-09T16:34:26Z"},{"author":"gebner","committer":"gebner","hash":"c93e954e60e51aedd300da7d678207c79dab4753","message":"One less subsingleton.","date":"2022-01-09T16:43:14Z"},{"author":"gebner","committer":"gebner","hash":"676ce7697e208313cb79ec1fdac9d844c1863b18","message":"Add test.","date":"2022-01-09T16:43:34Z"},{"author":"gebner","committer":"gebner","hash":"13f630c4ae819340f304e95ed44e662d5233552e","message":"Add some manual congr lemmas.","date":"2022-01-09T17:12:11Z"},{"author":"gebner","committer":"gebner","hash":"b9551ca0c513eecb684a8b987252f266fec8ff75","message":"Support congr lemmas in simp [..] and custom simp attrs.","date":"2022-01-09T17:46:41Z"},{"author":"gebner","committer":"gebner","hash":"c58db35c91645c07d76b33a41c893ef2eb0607f5","message":"add simp_lemmas.erase_simp_lemmas","date":"2022-01-09T17:55:14Z"},{"author":"gebner","committer":"gebner","hash":"5e225786e6bcfc13a5a54f99bdafb63d06a5ec53","message":"Improve manual congr lemmas.","date":"2022-01-09T19:07:06Z"},{"author":"gebner","committer":"gebner","hash":"5b452e8d6a938807995265585b70892847c3f930","message":"Auto-generate correct congr lemmas for decidable","date":"2022-01-10T14:21:13Z"},{"author":"gebner","committer":"gebner","hash":"0675485da61f118a43357e63d6c5a12c43cd9904","message":"Use three-space indentation.","date":"2022-01-11T09:48:51Z"},{"author":"gebner","committer":"gebner","hash":"ee64d6a9edbc57751a3b17ea6643a8a2bfc2f723","message":"Rename DecInst to SubsingletonInst.","date":"2022-01-11T09:52:22Z"},{"author":"gebner","committer":"gebner","hash":"70babc6675ff4974d0054a35598c0aa4962ea945","message":"Undo unnecessary changes.","date":"2022-01-11T09:55:55Z"}]},{"author":"gebner","number":664,"diff_summary":[{"file":"README.md","status":"M","additions":16,"deletions":2},{"file":"doc/changes.md","status":"M","additions":16,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":16,"deletions":2}],"state":"closed","open_date":"2022-01-07T18:23:22Z","update_date":"2022-01-07T19:22:36Z","discussion":[{"author":"gebner","date":"2022-01-07T18:35:48Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T19:21:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4742342547?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4742342698?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4742343031?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4742342982?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4742342879?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4742342841?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4742342772?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4742343133?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"964cd98804d4e5058e36b18845634de22b8e9ac1","message":"chore(*): release 3.37.0c","date":"2022-01-07T18:23:11Z"}]},{"author":"gebner","number":663,"diff_summary":[{"file":"src/frontends/lean/info_manager.cpp","status":"M","additions":3,"deletions":1}],"state":"closed","open_date":"2022-01-07T17:49:52Z","update_date":"2022-01-07T18:29:50Z","discussion":[{"author":"gebner","date":"2022-01-07T17:52:04Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T18:29:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4741922402?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4741922477?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4741922810?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4741922762?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4741922650?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4741922571?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4741922275?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4741922885?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"afb174269be00eabdbccdbb36ac64264d3160f45","message":"fix: use vm environment in trace_widget","date":"2022-01-07T17:49:02Z"}]},{"author":"gebner","number":662,"diff_summary":[{"file":"src/library/aux_definition.cpp","status":"A","additions":19,"deletions":1},{"file":"tests/lean/run/655c.lean","status":"A","additions":19,"deletions":1}],"state":"closed","open_date":"2022-01-07T17:04:02Z","update_date":"2022-01-07T17:50:08Z","discussion":[{"author":"gebner","date":"2022-01-07T17:05:57Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T17:50:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4741476519?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4741476396?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4741476923?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4741476872?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4741476629?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4741476597?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4741476776?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4741476991?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"5199c47bb10d6cdb634608d6e7eec80cc869353b","message":"fix: sort level parameters after collection","date":"2022-01-07T17:00:20Z"}]},{"author":"gebner","number":661,"diff_summary":[{"file":"src/library/tactic/simplify.cpp","status":"A","additions":17,"deletions":2},{"file":"tests/lean/run/simpcrash_unnecessary_casts.lean","status":"A","additions":17,"deletions":2}],"state":"closed","open_date":"2022-01-07T16:17:30Z","update_date":"2022-01-07T17:07:10Z","discussion":[{"author":"gebner","date":"2022-01-07T16:21:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T17:07:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4741015264?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4741015609?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4741015776?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4741015711?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4741015427?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4741015361?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4741015533?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4741015869?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"5e784680ac9fc09234886586fbbf7892755c0ad4","message":"fix: more robust check in cast removal","date":"2022-01-07T16:16:57Z"}]},{"author":"gebner","number":660,"diff_summary":[{"file":"library/init/data/array/basic.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/data/list/basic.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/data/prod.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/data/string/basic.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/data/sum/basic.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/logic.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/meta/declaration.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/run/1260.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/run/add_decl.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/run/apply4.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/run/mixed_tmp_non_tmp_universe_bug.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/run/private_names.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/run/simp_tc_err.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/run/tc_cache2.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/widget/widget1.input","status":"M","additions":41,"deletions":41},{"file":"tests/lean/widget/widget1.input.expected.out","status":"M","additions":41,"deletions":41},{"file":"tests/lean/widget/widget1.lean","status":"M","additions":41,"deletions":41}],"state":"closed","open_date":"2022-01-07T14:35:24Z","update_date":"2022-01-07T15:58:19Z","discussion":[{"author":"gebner","date":"2022-01-07T15:22:14Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T15:58:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4740389412?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4740389496?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4740389800?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4740389750?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4740389681?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4740389635?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4740389566?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4740389875?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"d2dedd37b4e4af4196847f22c9659f1d6ac697bd","message":"chore: make type argument of default implicit","date":"2022-01-07T14:28:08Z"},{"author":"gebner","committer":"gebner","hash":"9aecc59cef9a44d0517346520681d57ee67ab4a9","message":"fix widget test","date":"2022-01-07T14:35:08Z"}]},{"author":"Vierkantor","number":659,"diff_summary":[{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":178,"deletions":83},{"file":"src/frontends/lean/elaborator.h","status":"A","additions":178,"deletions":83},{"file":"src/library/tactic/simp_util.h","status":"A","additions":178,"deletions":83},{"file":"src/library/type_context.cpp","status":"A","additions":178,"deletions":83},{"file":"src/library/type_context.h","status":"A","additions":178,"deletions":83},{"file":"tests/lean/run/simp_out_param.lean","status":"A","additions":178,"deletions":83},{"file":"tests/lean/simp_out_params_ready.lean","status":"A","additions":178,"deletions":83},{"file":"tests/lean/simp_out_params_ready.lean.expected.out","status":"A","additions":178,"deletions":83}],"state":"closed","open_date":"2022-01-04T15:13:35Z","update_date":"2022-01-05T13:40:20Z","discussion":[{"author":"gebner","date":"2022-01-04T18:38:51Z","comment":"This certainly needs a ready-to-synthesize check, otherwise everything is treated as an out_param†:\r\n```lean\r\nclass A (α β : Type) -- no out_param!\r\ninstance : A ℕ ℤ := ⟨⟩\r\ndef p (_ : Type) : Prop := false\r\n@[simp] lemma l {α β} [A α β] : p α ↔ p β := iff.rfl\r\nexample : p ℕ := by simp --> p ℤ\r\n```\r\n† albeit with reducible transparency instead of semireducible, of course\r\n\r\nCan you also mention where this turned up in mathlib?  This will make it easier to sell as a Lean 4 change."},{"author":"ericrbg","date":"2022-01-05T02:29:02Z","comment":"as far as I know, this patch was because lemmas like `map_zero` for `fun_like`+children don't fire as `simp` lemmas sometimes."},{"author":"Vierkantor","date":"2022-01-05T12:41:30Z","comment":"> > Can you also mention where this turned up in mathlib? This will make it easier to sell as a Lean 4 change.\r\n>\r\n> as far as I know, this patch was because lemmas like `map_zero` for `fun_like`+children don't fire as `simp` lemmas sometimes.\r\n\r\nIndeed this was one of the cases, although this was mostly worked around as a side effect of adding the `out_param` to `has_coe_to_fun`: this made the goal contain enough of the instances that filling in the metavariables typically succeeds. This worked, as long as classes remained bundled.\r\n\r\nFor the `linear_map_class` I was working on, bundling is not possible (it would produce a dangerous instance) and the issue returned. I'm currently recompiling/fixing a branch of mathlib that should demonstrate a `simp` lemma newly picked up by this change."},{"author":"gebner","date":"2022-01-05T12:58:11Z","comment":"LGTM. Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-01-05T13:40:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4714818108?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4714818015?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4714818351?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4714818323?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4714818275?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4714818241?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4714818173?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4714818388?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"src/library/tactic/simp_util.h","date":"2022-01-05T11:19:08Z","comment":"I think we can do an early return here now.  If it fails once, then it's not going to succeed in a future iteration (because of the ready-to-synthesize check).  The same goes for the auto-param/discharging code below, if it fails we shouldn't try to fill in the other parameters.  (I'm a bit concerned about performance here. Ideally we'd only try to synthesize each argument once, and fail immediately without futilely solving the rest if it doesn't succeed.)"},{"author":"Vierkantor","file":"src/library/tactic/simp_util.h","date":"2022-01-05T12:07:37Z","comment":"I wanted to retry the instances to avoid having cases like `{α : Type*} [some_class_with_out_param α] [some_class_with_in_param α]` work and `{α : Type*} [some_class_with_in_param α] [some_class_with_out_param α]` fail. As long as it's guarded by the metavariable check, I agree that this should work."}],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"566908ca604606c8730ce30cca98fbdd3ceb1691","message":"fix(library/tactic): `simp` should instantiate `out_param`s","date":"2022-01-04T15:03:02Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"6b8ed8ebba798d60cb4afe5fcea940303941a346","message":"Don't allow metavariables in the `auto_param` or recursive `simp` call","date":"2022-01-04T15:03:02Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"5c3285a0359a1dbcebf51694427092b082ed835b","message":"Since #657 has been merged, delete its workaround","date":"2022-01-04T15:03:02Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"0d81e07ecc955bcffe6a4a8b5817fc1893f9f9e6","message":"`simp` should test `ready_to_synthesize` before calling `mk_instance`\n\nThis ensures non-`out_param`s are not accidentally filled through unification\nwith the temporary metavariables. `out_param`s are still allowed to contain\nmetavariables that will be unified (see also #657).\n\nI moved the `ready_to_synthesize` check from the elaborator to the type context\nin order to access it from the simplifier.\n\nCo-Authored-By: Gabriel Ebner <gebner@gebner.org>","date":"2022-01-05T10:39:20Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"c047bc84521059c12e7d586f9245340fac4380c7","message":"Reduce dependencies of the test","date":"2022-01-05T12:35:46Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"141e35d45f9086538a11ec0c60d4bfbe5a47d8bd","message":"Early-exit `instantiate_emetas` when instance or proof search fails","date":"2022-01-05T12:39:51Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"0da6954bd3a265a3085632d92f4271cfe8cb3032","message":"Update line numbers in expected output","date":"2022-01-05T12:54:23Z"}]},{"author":"gebner","number":658,"diff_summary":[{"file":"README.md","status":"M","additions":16,"deletions":3},{"file":"doc/changes.md","status":"M","additions":16,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":16,"deletions":3}],"state":"closed","open_date":"2022-01-04T11:05:12Z","update_date":"2022-01-04T12:02:55Z","discussion":[{"author":"gebner","date":"2022-01-04T11:25:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-04T12:02:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4701369381?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4701363691?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4701369491?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4701369448?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4701363421?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4701369554?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4701363536?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4701369735?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"a9e95583c41554bb77a5f30f5d33fc73fe468bc8","message":"chore(*): release 3.36.0","date":"2022-01-04T11:05:00Z"}]},{"author":"Vierkantor","number":657,"diff_summary":[{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":64,"deletions":6},{"file":"src/library/class.cpp","status":"A","additions":64,"deletions":6},{"file":"src/library/class.h","status":"A","additions":64,"deletions":6},{"file":"src/library/type_context.cpp","status":"A","additions":64,"deletions":6},{"file":"tests/lean/run/tc_out_param_deps.lean","status":"A","additions":64,"deletions":6}],"state":"closed","open_date":"2022-01-03T15:43:55Z","update_date":"2022-01-04T10:33:49Z","discussion":[{"author":"gebner","date":"2022-01-04T09:53:14Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-04T10:33:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4700465012?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4700464889?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4700465307?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4700465201?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4700465149?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4700465118?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4700465071?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4700465526?check_suite_focus=true)"}],"review_discussion":[{"author":"gebner","file":"src/library/type_context.cpp","date":"2022-01-03T16:09:04Z","comment":"```suggestion\r\n                if (result[j] && has_free_var(d, i - j - 1)) {\r\n```\r\nWill also work under binders.\r\n\r\nFor bonus points add a `has_free_vars(d)` condition on the whole else-branch."},{"author":"gebner","file":"src/library/type_context.cpp","date":"2022-01-03T16:11:28Z","comment":"`lean_assert` is only run in debug builds (i.e., not on mathlib).  I'd just remove this check."},{"author":"gebner","file":"src/library/type_context.cpp","date":"2022-01-03T16:16:51Z","comment":"```suggestion\r\nvoid class_out_param_deps(expr const & cls_type, buffer<bool> & is_out_param) {\r\n```\r\nWhere `cls_type` is the type of the class constant.  Both call sites already have that type.  Then this function wouldn't need to be in type_context either."},{"author":"gebner","file":"tests/lean/tc_out_param_deps.lean","date":"2022-01-03T16:20:07Z","comment":"If you don't care about the output of the test, please move it in `tests/lean/run`."},{"author":"gebner","file":"src/library/type_context.cpp","date":"2022-01-03T18:31:53Z","comment":"Sorry, I see another issue now.\r\n\r\n```suggestion\r\n        if (i < is_out_param.size() && is_out_param[i]) {\r\n```\r\n\r\n`class_out_param_deps` computes the dependencies literally without reducing the type, so the array might contain fewer elements than the number of arguments here.  (I don't think this is actually used anywhere though.)"}],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"857433a764c752ee30f3044e43dfbea9dd85aa45","message":"fix(frontends/lean/elaborator): don't block on metavariables that depend on an `out_param`\n\nWe noticed in mathlib#11128 some cases where parameters weren't being inferred, even though they were `out_param`s to an instance: it turned out the instances themselves also weren't being inferred by the elaborator. This PR tweaks the logic in `elaborator::ready_to_synthesize` to match the `out_param` handling in `type_context_old::preprocess_class`.\n\nI created a new function that determines the list of parameters that are either an `out_param` themselves, or depend on an `out_param`. The code is a bit different since `preprocess_class` updates the expression during the check. I left the previous check of `preprocess_class` in an `assert` so we can be sure the results are the same.\n\nZulip thread: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Instance.20parameters.20depending.20on.20.60out_params.60","date":"2022-01-03T15:32:22Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"4aced8da9e8b79da16eb1de910b8330085527593","message":"`occurs(mk_var(_), _)` → `has_free_var(_, _)`","date":"2022-01-03T16:34:38Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"99fae50bdf0db5533156c0fe3e75601ea0a97f2a","message":"This `assert` is nice for testing but not needed","date":"2022-01-03T16:35:14Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"03c718509dadecaf380044f49f6f21b554f11ae9","message":"Test without output can be a runtest","date":"2022-01-03T16:36:40Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"412a71f0fab6bd16753be09383bce57d8dd375d7","message":"Move from `type_context.cpp` to `class.cpp`","date":"2022-01-03T17:06:07Z"},{"author":"Vierkantor","committer":"web-flow","hash":"bd399c108033acba16ce5d573b5b2114cfe50bf1","message":"Ensure we don't go past the end of `is_out_param`\n\nCo-authored-by: Gabriel Ebner <gebner@gebner.org>","date":"2022-01-03T20:49:09Z"}]},{"author":"digama0","number":656,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"M","additions":6,"deletions":12}],"state":"closed","open_date":"2021-12-21T04:53:18Z","update_date":"2021-12-21T10:46:10Z","discussion":[{"author":"gebner","date":"2021-12-21T10:09:51Z","comment":"OMG this is not the expansion that I expected.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-12-21T10:46:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4593388351?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4593388429?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4593388734?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4593388672?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4593388586?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4593388513?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4593388262?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4593388802?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"7e4f4571deaeee76565feec736aec3cbd2f0ec36","message":"chore(frontents/lean/parser.cpp): change binder collection order","date":"2021-12-21T04:48:48Z"}]},{"author":"digama0","number":654,"diff_summary":[{"file":"src/library/constructions/drec.cpp","status":"A","additions":4,"deletions":2},{"file":"src/library/util.cpp","status":"A","additions":4,"deletions":2},{"file":"tests/lean/run/inductive_unfold.lean","status":"A","additions":4,"deletions":2}],"state":"closed","open_date":"2021-11-24T10:33:08Z","update_date":"2021-11-24T11:34:12Z","discussion":[{"author":"gebner","date":"2021-11-24T10:49:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-11-24T11:34:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4310879661?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4310880211?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4310880370?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4310880312?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4310879766?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4310879737?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4310880118?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4310880464?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"c0dd0a9657e728957aef03e492dd8579ceb0fe47","message":"fix(library/util): unfold rec args as semireducible\n\nThis was causing an assertion violation. It is not clear what the best\nfix is, since the code seems to be of two minds about what can be\nunfolded, but since the ginductive has a whole error message explaining that\nsemireducible definitions are supposed to be unfolded, I went with that.","date":"2021-11-24T09:25:22Z"},{"author":"digama0","committer":"digama0","hash":"150c1e14c5317f531e7d4f88da30f57285cd6b9b","message":"fix(library/constructions/drec): use always_assert\n\nSee https://github.com/leanprover-community/lean/pull/653#issuecomment-977713732","date":"2021-11-24T10:31:58Z"}]},{"author":"digama0","number":653,"diff_summary":[{"file":"src/library/util.cpp","status":"A","additions":3,"deletions":1},{"file":"tests/lean/run/inductive_unfold.lean","status":"A","additions":3,"deletions":1}],"state":"closed","open_date":"2021-11-24T09:25:39Z","update_date":"2021-11-24T10:39:02Z","discussion":[{"author":"gebner","date":"2021-11-24T09:54:03Z","comment":"> This was causing an assertion violation. It is not clear what the best fix is [...]\r\n\r\nIn general, I would prefer replacing the assertion violation by an exception.  It's better to fail than to run into undefined behavior.   From what I can tell, the assertion fails somewhere else though.\r\n\r\nbors r+"},{"author":"digama0","date":"2021-11-24T10:24:42Z","comment":"That was my original plan as well, but the exception would have to have a very weird message, not much better than an assertion violation since it's not the user's fault. Tracking down the actual issue lead to the observation that this bit of code is unfolding with one reducibility setting but the code that permitted this code to run in the first place was using a different setting. (In fact it's different code altogether, `safe_whnf` instead of `whnf`, so there might still be differences lurking.) In any case, that code in `drec.cpp` is not where we should be throwing the error, that's after we have already committed to constructing the inductive and are halfway through building it. But I won't complain if we want to replace those asserts with exceptions just so that users can see what's going on, even though it is still an internal error.\r\n\r\nRe: undefined behavior, that can be addressed by using `lean_always_assert` instead of `lean_assert` if there is any doubt about the reliability of the condition."},{"author":"bors[bot]","date":"2021-11-24T10:39:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4310273979?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4310273749?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4310274372?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4310274315?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4310273899?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4310273852?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4310274097?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4310274202?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"c0dd0a9657e728957aef03e492dd8579ceb0fe47","message":"fix(library/util): unfold rec args as semireducible\n\nThis was causing an assertion violation. It is not clear what the best\nfix is, since the code seems to be of two minds about what can be\nunfolded, but since the ginductive has a whole error message explaining that\nsemireducible definitions are supposed to be unfolded, I went with that.","date":"2021-11-24T09:25:22Z"}]},{"author":"digama0","number":652,"diff_summary":[{"file":"src/frontends/lean/calc.cpp","status":"M","additions":10,"deletions":2},{"file":"tests/lean/run/calc_bug.lean","status":"M","additions":10,"deletions":2}],"state":"closed","open_date":"2021-11-17T02:11:54Z","update_date":"2021-11-17T10:38:47Z","discussion":[{"author":"gebner","date":"2021-11-17T09:58:58Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-11-17T10:38:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4236427223?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4236427400?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4236427509?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4236427464?check_suite_focus=true)\n  * Build macos Debug\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4236427307?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4236427141?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4236427577?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"6afec75fc37ff86528c59245a3e6703a9c30dcb2","message":"fix(lean/calc): don't re-resolve calc constants\n\nfixes #651","date":"2021-11-17T02:10:36Z"},{"author":"digama0","committer":"digama0","hash":"fd21ebff87d3e3e66a13edc66dc550b130b48f2d","message":"another test","date":"2021-11-17T02:25:49Z"}]},{"author":"digama0","number":650,"diff_summary":[{"file":"library/init/meta/interactive_base.lean","status":"M","additions":9,"deletions":5},{"file":"tests/lean/format_macro.lean","status":"M","additions":9,"deletions":5}],"state":"closed","open_date":"2021-11-12T05:08:16Z","update_date":"2021-11-12T11:50:51Z","discussion":[{"author":"kmill","date":"2021-11-12T07:38:27Z","comment":"It seems like the only modules in mathlib this will obviously affect are in `src/tactic`: `core.lean`, `monotonicity/interactive.lean`, `pretty_cases.lean`, `squeeze.lean`, and `transfer.lean`.\r\n\r\nMathlib seems to have its own version of `format!`, too, in `src/tactic/core.lean` (see `parse_pformat`), which is used in the `trace!` macro, and `src/tactic/simps.lean` has a case of `{{`.  (I'm not sure I didn't miss anything.)"},{"author":"digama0","date":"2021-11-12T07:58:33Z","comment":"I expect very few changes in mathlib. `format!` and friends are used rarely, and `{{` in format even more rarely. I was planning to defer this until after it lands and we are working on the mathlib bump PR, but this should be an exhaustive enumeration: [1](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L1475) [2](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L1694) [3](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/pretty_cases.lean#L56) [4](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/squeeze.lean#L53) [5](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/transfer.lean#L74) [6](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/interactive.lean#L65), plus the implementation of `pformat!` has to be updated. "},{"author":"gebner","date":"2021-11-12T10:08:24Z","comment":"I agree with the balancing philosophy, and wholeheartedly approve of the whitespace formatting.\r\n\r\nbors r+"},{"author":"gebner","date":"2021-11-12T11:10:04Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-11-12T11:50:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4188969527?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4188969083?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4188969455?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4188969406?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4188969218?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4188969167?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4188969347?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4188969609?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"552f3e205b5a99983a9cee5402934a23efc0666f","message":"fix(init/meta/interactive_base): Use `}}` in format\n\nThis way, escaped braces are balanced.\nThat is, `format!\"a{{b}}c\"` produces `\"a{b}c\"`, instead of\n`format!\"a{{b}c\"`. Unbalanced braces are bad for editors and formatters,\nso we should not encourage any syntax that requires unbalanced braces.","date":"2021-11-12T05:05:42Z"},{"author":"digama0","committer":"digama0","hash":"74d32a40e37cd0dd9e71aed4f4db77195f869870","message":"fix test","date":"2021-11-12T05:09:33Z"},{"author":"digama0","committer":"digama0","hash":"6aa1b7febbc8967b1d45b12f675706cc49fade57","message":"fix test","date":"2021-11-12T05:14:36Z"}]},{"author":"gebner","number":649,"diff_summary":[{"file":"README.md","status":"M","additions":13,"deletions":2},{"file":"doc/changes.md","status":"M","additions":13,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":13,"deletions":2}],"state":"closed","open_date":"2021-11-08T13:41:45Z","update_date":"2021-11-08T15:15:06Z","discussion":[{"author":"gebner","date":"2021-11-08T14:24:11Z","comment":"bors r+"},{"author":"gebner","date":"2021-11-08T14:32:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-11-08T15:15:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4140207230?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4140207543?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4140194376?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4140207849?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4140207443?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4140207367?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4140193962?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4140208045?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"fe1d2532f31e84500baab304ba3bd48ca8f73634","message":"chore(*): release 3.35.1","date":"2021-11-08T13:40:52Z"}]},{"author":"gebner","number":648,"diff_summary":[{"file":"src/library/module.cpp","status":"M","additions":10,"deletions":17},{"file":"src/library/module.h","status":"M","additions":10,"deletions":17},{"file":"src/library/module_mgr.cpp","status":"M","additions":10,"deletions":17},{"file":"src/library/tlean_exporter.cpp","status":"M","additions":10,"deletions":17},{"file":"src/library/tlean_exporter.h","status":"M","additions":10,"deletions":17}],"state":"closed","open_date":"2021-11-08T12:36:47Z","update_date":"2021-11-08T14:22:34Z","discussion":[{"author":"gebner","date":"2021-11-08T13:38:17Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-11-08T14:22:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4139540354?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4139540150?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4139540770?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4139540667?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4139540562?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4139540492?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4139540243?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4139540879?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"a70ea2601a4ec1f3f58ba3265b02c3addcc4258a","message":"fix(library/tlean_exporter): use less memory","date":"2021-11-08T12:36:12Z"}]},{"author":"kbuzzard","number":646,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-11-06T23:17:00Z","update_date":"2021-11-07T13:22:48Z","discussion":[{"author":"fpvandoorn","date":"2021-11-07T12:43:36Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-11-07T13:22:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4130798982?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4130799103?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4130799138?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4130799118?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4130799044?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4130799018?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4130799076?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4130799153?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"kbuzzard","committer":"kbuzzard","hash":"fe436528305916e55f652de00b064338bab0d5bb","message":"fix(library/init/meta/tactic.lean): turn comment into docstring","date":"2021-11-06T23:11:06Z"}]},{"author":"eric-wieser","number":645,"diff_summary":[{"file":"library/init/meta/module_info.lean","status":"M","additions":21,"deletions":2},{"file":"src/library/vm/vm_list.h","status":"M","additions":21,"deletions":2},{"file":"src/library/vm/vm_module_info.cpp","status":"M","additions":21,"deletions":2},{"file":"tests/lean/module_info.lean","status":"M","additions":21,"deletions":2}],"state":"open","open_date":"2021-11-02T09:43:53Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"eric-wieser","date":"2021-11-04T11:20:58Z","comment":"What's the easiest way to convert an `std::vector<T>` into a `vm_obj` holding a `list`? I was hoping `to_obj` had an overload for that."},{"author":"gebner","date":"2021-11-04T13:23:31Z","comment":"I think `vm_list.h` is everything we have.  Copy&pasted from `to_obj(buffer<expr> const &)`:\r\n```c++\r\n    vm_obj obj = mk_vm_nil();\r\n    for (unsigned i = ls.size(); i > 0; i--)\r\n        obj = mk_vm_cons(to_obj(ls[i - 1]), obj);\r\n    return obj;\r\n```"}],"review_discussion":[{"author":"eric-wieser","file":"src/library/vm/vm_list.h","date":"2021-11-04T15:03:06Z","comment":"```suggestion\r\nvm_obj to_obj(std::vector<T> const & ls) {\r\n```"},{"author":"eric-wieser","file":"src/library/vm/vm_module_info.cpp","date":"2021-11-04T16:37:21Z","comment":"```suggestion\r\n```"},{"author":"eric-wieser","file":"tests/lean/module_info.lean","date":"2021-11-05T10:26:48Z","comment":"```suggestion\r\nrun_cmd guard (module_info.get_all ≠ [] : bool)\r\n```"}],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"0aa2d9b35af6674250966110dc6695bdb32ca13e","message":"Add module_info.get_all","date":"2021-11-02T09:43:48Z"},{"author":"eric-wieser","committer":"web-flow","hash":"a145a05d6d81fac2644455bc2abc0e3bc0d0c4fa","message":"Update module_info.lean","date":"2021-11-02T09:45:47Z"},{"author":"eric-wieser","committer":"web-flow","hash":"230457af580125b501d00dccb7b0c8b0a2639341","message":"Update module_info.lean","date":"2021-11-02T09:47:11Z"},{"author":"eric-wieser","committer":"web-flow","hash":"76765db8b436628b8d9a5720f52f90e1ff21c056","message":"Update vm_module_info.cpp","date":"2021-11-02T09:48:00Z"},{"author":"eric-wieser","committer":"web-flow","hash":"c5d73e2d9a2d18a6a1093ef7b1a5029321e74d1a","message":"Add a vector to object conversion","date":"2021-11-04T14:26:30Z"},{"author":"eric-wieser","committer":"web-flow","hash":"a1272f5116ae8592998c4be10cc3263e8ef73ec7","message":"auto","date":"2021-11-04T14:28:44Z"},{"author":"eric-wieser","committer":"web-flow","hash":"2c2882fe54c4db8f796dd9f5d1beafdda575fb5d","message":"Update src/library/vm/vm_list.h","date":"2021-11-04T15:03:12Z"},{"author":"eric-wieser","committer":"web-flow","hash":"d34003eb89b65de85f3bfc5437f0533109726948","message":"Update vm_module_info.cpp","date":"2021-11-04T15:49:31Z"},{"author":"eric-wieser","committer":"web-flow","hash":"c04eaa9600d486198a12a361a429337b50a5fca6","message":"Update vm_list.h","date":"2021-11-04T16:37:10Z"},{"author":"eric-wieser","committer":"web-flow","hash":"06a862da5613023b00449b3326b4e6446b0f272a","message":"Update src/library/vm/vm_module_info.cpp","date":"2021-11-04T16:37:24Z"},{"author":"eric-wieser","committer":"web-flow","hash":"29aa29b7108d15a576f3628fc5e70709c6b7e780","message":"Update tests/lean/module_info.lean","date":"2021-11-05T10:26:58Z"}]},{"author":"yurivict","number":643,"diff_summary":[{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":4},{"file":"src/util/path.cpp","status":"M","additions":8,"deletions":4}],"state":"closed","open_date":"2021-10-31T16:26:46Z","update_date":"2021-11-01T17:32:05Z","discussion":[{"author":"gebner","date":"2021-11-01T09:42:29Z","comment":"Cool!  Do the tests pass on FreeBSD now?\r\n\r\nPlease change the PR title to `fix(CMakeLists.txt): support freebsd`.  Otherwise LGTM."},{"author":"yurivict","date":"2021-11-01T16:28:34Z","comment":"All tests pass on FreeBSD."},{"author":"gebner","date":"2021-11-01T16:52:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-11-01T17:32:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4070462172?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4070462344?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4070462723?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4070462657?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4070462502?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4070462445?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4070462078?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4070462796?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"yurivict","committer":"yurivict","hash":"aba9d05dd1c725ec0a681aaec4a391554325a51b","message":"FreeBSD compatibility patches.","date":"2021-10-31T16:26:05Z"}]},{"author":"gebner","number":642,"diff_summary":[{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":8,"deletions":4},{"file":"tests/lean/641.lean","status":"A","additions":8,"deletions":4},{"file":"tests/lean/641.lean.expected.out","status":"A","additions":8,"deletions":4}],"state":"closed","open_date":"2021-10-29T16:21:48Z","update_date":"2021-10-29T17:11:18Z","discussion":[{"author":"gebner","date":"2021-10-29T16:35:33Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-29T17:11:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4049024913?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4049025025?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4049025231?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4049025187?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4049025122?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4049025083?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4049024976?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4049025283?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"ebda726e4726ec21291147e4ead8e9d60ee97e26","message":"fix: check that arguments to set_goals are mvars\n\nFixes #641","date":"2021-10-29T16:34:49Z"}]},{"author":"bryangingechen","number":640,"diff_summary":[{"file":"README.md","status":"M","additions":17,"deletions":2},{"file":"doc/changes.md","status":"M","additions":17,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":17,"deletions":2}],"state":"closed","open_date":"2021-10-28T23:03:12Z","update_date":"2021-10-28T23:42:23Z","discussion":[{"author":"bryangingechen","date":"2021-10-28T23:03:18Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-28T23:42:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4040808996?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4040808842?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4040809110?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4040809076?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4040808945?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4040808917?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4040809038?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4040809156?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"2a02a7d49a3e2d371dfc7cc361b813d75e8c14c1","message":"chore(*): release 3.35.0c","date":"2021-10-28T23:02:54Z"}]},{"author":"timlacroix","number":639,"diff_summary":[{"file":"src/frontends/lean/info_manager.cpp","status":"M","additions":199,"deletions":21},{"file":"src/frontends/lean/info_manager.h","status":"M","additions":199,"deletions":21},{"file":"src/frontends/lean/parser.cpp","status":"M","additions":199,"deletions":21},{"file":"src/frontends/lean/parser.h","status":"M","additions":199,"deletions":21},{"file":"src/shell/server.cpp","status":"M","additions":199,"deletions":21},{"file":"src/shell/server.h","status":"M","additions":199,"deletions":21},{"file":"src/util/log_tree.cpp","status":"M","additions":199,"deletions":21},{"file":"src/util/log_tree.h","status":"M","additions":199,"deletions":21}],"state":"closed","open_date":"2021-10-27T12:31:49Z","update_date":"2021-10-27T12:32:03Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"timlacroix","committer":"timlacroix","hash":"1e5a30f0d0ec17aeae61ee2fe2f0cbf8fa2911c4","message":"feat(util/log_tree): add clear_listeners\n\nAdd a clear_listeners method, used to clear all open threads in the server code.","date":"2021-03-04T17:44:09Z"},{"author":"timlacroix","committer":"timlacroix","hash":"3b1cd4b652b55267d6489042c46d897b3dc7acf8","message":"feat(frontends/lean/parser): add reset and from_snapshot methods\n\nAdd a reset method to reset the scanner of a parser. The from_snapshot method allows the loading of a snapshot outside of the friend class module_parser. Both methods are useful to parse user tactics in a \"tactic mode\" server.","date":"2021-03-04T17:47:32Z"},{"author":"timlacroix","committer":"timlacroix","hash":"23df93e22c9c90e1d425cf877bae7d448b69a1a8","message":"feat(shell/server): add {clear|setup}_handlers\n\nsetup and clear handler public methods allow to join all outstanding threads in server from the outside.\nAllows proper checkpointing of the program execution state, for quick reloading (e.g. after building parser snapshots for the entire mathlib library)","date":"2021-03-04T17:51:57Z"},{"author":"timlacroix","committer":"timlacroix","hash":"dff588d31a6850396bbbde4cca4aeaa67d275c7a","message":"feat(shell/server): add quiet / never_use_olean arguments\n\nThe quiet argument prevent parse messages from being printed on stdout. This allows to subclass server:: to create a tactic mode server with a clean stdout.\nThe never_use_olean argument enforces the full parsing of all .lean files. This is useful to build snapshots for every lean files. These snapshots can then be used to easily parse arbitrary tactics \"as-if\" we were inside a declaration of interest.","date":"2021-03-04T17:54:11Z"},{"author":"timlacroix","committer":"web-flow","hash":"570574a2ac09b1be462ebf5a9390a97c708f2a16","message":"Merge branch 'leanprover-community:master' into master","date":"2021-10-12T07:18:16Z"},{"author":"timlacroix","committer":"timlacroix","hash":"0498eb47d11cb22cd048c45c5afc704a3acf44de","message":"add try_tactic_command","date":"2021-10-18T11:44:36Z"},{"author":"timlacroix","committer":"timlacroix","hash":"9cb8d30a1256d19c1b402b3dbd582696807318d8","message":"return a bunch of other infos","date":"2021-10-26T06:53:34Z"},{"author":"timlacroix","committer":"timlacroix","hash":"a4d73c27a36b82ad3c8149027f6f8ff8fbcb0704","message":"new format","date":"2021-10-26T11:54:47Z"}]},{"author":"eric-wieser","number":638,"diff_summary":[{"file":"library/init/meta/environment.lean","status":"A","additions":27,"deletions":0},{"file":"src/library/vm/vm_environment.cpp","status":"A","additions":27,"deletions":0},{"file":"tests/lean/noncomputable_reason.lean","status":"A","additions":27,"deletions":0},{"file":"tests/lean/noncomputable_reason.lean.expected.out","status":"A","additions":27,"deletions":0}],"state":"closed","open_date":"2021-10-25T11:04:05Z","update_date":"2021-10-25T18:34:15Z","discussion":[{"author":"gebner","date":"2021-10-25T17:53:53Z","comment":"LGTM\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-10-25T18:34:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4000506469?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4000506418?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4000506568?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4000506532?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4000506278?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4000506214?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4000506359?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4000506634?check_suite_focus=true)"}],"review_discussion":[{"author":"bryangingechen","file":"tests/lean/noncomputable_reason.lean.expected.out","date":"2021-10-25T16:54:31Z","comment":"This is a little surprising to me (that `foo` itself reports `none`, meaning \"computable\" according to the docstring, and yet it can be a reason for the noncomputability of `bar`). Perhaps this is a well-known quirk of `noncomputable`, but maybe the docstring should mention this?\r\n\r\nOtherwise LGTM, though I've never added / modified VM builtins myself."},{"author":"eric-wieser","file":"library/init/meta/environment.lean","date":"2021-10-25T17:00:52Z","comment":"```suggestion\r\nnoncomputability from, or `none` if it is computable.\r\n\r\nNote that this also returns `none` on `axiom`s and `constant`s. These can be detected by using\r\n`environment.get_decl` and `declaration.is_axiom` and `declaration.is_constant`. -/\r\n```"},{"author":"eric-wieser","file":"tests/lean/noncomputable_reason.lean.expected.out","date":"2021-10-25T17:01:57Z","comment":"Yeah, I found this surprising too, but figured it was just better to expose whatever the internal `get_noncomputable_reason` does. It's enough for doc-gen anyway, we already have other means to detect `axiom` and `constant`, and we never use them."},{"author":"eric-wieser","file":"tests/lean/noncomputable_reason.lean.expected.out","date":"2021-10-25T17:06:33Z","comment":"I adjusted the docstring above."}],"tags":[],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"cadc19a89c50eb80c17a3e48ecf46031b0a6ae2f","message":"feat(library/noncomputable): add `environment.decl_noncomputable_reason`\n\nThis exposes whether and why a definition is noncomputable.","date":"2021-10-25T12:50:17Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"7ea1fbbde00505b40bec264a7018c97f68c5222b","message":"test","date":"2021-10-25T12:56:38Z"},{"author":"eric-wieser","committer":"web-flow","hash":"d852f289d30ac0ff9358e2fe1f1b697c92776e43","message":"Create noncomputable_reason.lean.expected.out","date":"2021-10-25T14:22:27Z"},{"author":"eric-wieser","committer":"web-flow","hash":"4f1faf83127c2e1537906ae6f95652a86ddf2430","message":"Update noncomputable_reason.lean.expected.out","date":"2021-10-25T14:35:54Z"},{"author":"eric-wieser","committer":"web-flow","hash":"73263c445f7fa4a98350f90b1fe1a33ada3f1d54","message":"Update library/init/meta/environment.lean","date":"2021-10-25T17:00:58Z"}]},{"author":"semorrison","number":637,"diff_summary":[{"file":"library/data/rbmap/default.lean","status":"D","additions":2,"deletions":2118},{"file":"library/data/rbtree/basic.lean","status":"D","additions":2,"deletions":2118},{"file":"library/data/rbtree/default.lean","status":"D","additions":2,"deletions":2118},{"file":"library/data/rbtree/find.lean","status":"D","additions":2,"deletions":2118},{"file":"library/data/rbtree/insert.lean","status":"D","additions":2,"deletions":2118},{"file":"library/data/rbtree/main.lean","status":"D","additions":2,"deletions":2118},{"file":"library/data/rbtree/min_max.lean","status":"D","additions":2,"deletions":2118},{"file":"library/init/data/default.lean","status":"D","additions":2,"deletions":2118},{"file":"library/init/data/rbmap/basic.lean","status":"D","additions":2,"deletions":2118},{"file":"library/init/data/rbmap/default.lean","status":"D","additions":2,"deletions":2118},{"file":"library/init/data/rbtree/basic.lean","status":"D","additions":2,"deletions":2118},{"file":"library/init/data/rbtree/default.lean","status":"D","additions":2,"deletions":2118},{"file":"tests/lean/run/rbtree1.lean","status":"D","additions":2,"deletions":2118},{"file":"tests/lean/widget/widget4.input.expected.out","status":"D","additions":2,"deletions":2118}],"state":"closed","open_date":"2021-10-23T04:27:32Z","update_date":"2021-10-25T08:57:48Z","discussion":[{"author":"gebner","date":"2021-10-25T07:30:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-25T08:57:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3994371955?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3994372215?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3994372709?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3994372659?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3994372447?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3994372396?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3994372538?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3994372789?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"semorrison","committer":"semorrison","hash":"cb324fd35f19d897d8439582f0e35e0eb0a4e38d","message":"chore(library): remove rbtree/rbmap, can be moved to mathlib","date":"2021-10-23T04:26:54Z"},{"author":"semorrison","committer":"semorrison","hash":"960abf74a1a04886e4778df09086e45134f3e220","message":"update test; changes seem spurious?","date":"2021-10-23T08:36:01Z"}]},{"author":"urkud","number":636,"diff_summary":[{"file":"library/data/stream.lean","status":"D","additions":0,"deletions":592}],"state":"closed","open_date":"2021-10-22T21:12:48Z","update_date":"2021-10-25T08:16:47Z","discussion":[{"author":"gebner","date":"2021-10-25T07:30:23Z","comment":"LGTM.  Stream isn't in Lean 4 either (though there are two other types called stream now, so we might want to find a new name for this one).\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-10-25T08:16:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3993947806?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3993947903?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3993948295?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3993948204?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3993948051?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3993948004?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3993948117?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3993948371?check_suite_focus=true)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"urkud","committer":"urkud","hash":"0e3bc4b720a82c34e9ec5e760d7373dd51b7fbf2","message":"Delete","date":"2021-10-22T21:02:42Z"}]},{"author":"fpvandoorn","number":635,"diff_summary":[{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":368,"deletions":370}],"state":"closed","open_date":"2021-10-21T13:56:33Z","update_date":"2021-10-21T15:01:07Z","discussion":[{"author":"gebner","date":"2021-10-21T14:12:51Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-21T15:01:06Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3964985387?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3964985973?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3964986412?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3964986344?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3964985775?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3964985656?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3964986160?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3964986597?check_suite_focus=true)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"e48e7baf7e01b12ce27aa40d92cb15722e92f326","message":"reorder sections in a more logical way\nremove duplicate sections\nnot much effort was put into ordering the lemmas logically within a section\nno lemmas have been changed/added/removed","date":"2021-10-21T12:13:46Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"2d3dc2390977813959a7a98d6cedb538ca114f2a","message":"some more","date":"2021-10-21T12:18:48Z"}]},{"author":"digama0","number":634,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"M","additions":0,"deletions":1}],"state":"closed","open_date":"2021-10-21T09:26:28Z","update_date":"2021-10-21T10:11:32Z","discussion":[{"author":"gebner","date":"2021-10-21T09:28:20Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-21T10:11:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3962071168)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3962071320)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3962071747)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3962071695)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3962071485)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3962071425)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3962071569)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3962071815)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"71254698f92ea4c149eba59381ebc63bc23fbc70","message":"fix(frontends/lean/parser): bugfix AST export\n\nThe node was being double finalized and resetting its id to the original\none before parsing the universe levels, resulting in the universes\ngetting discarded.\n\nFixes leanprover/mathport#36","date":"2021-10-21T09:26:01Z"}]},{"author":"semorrison","number":633,"diff_summary":[{"file":"README.md","status":"M","additions":0,"deletions":1}],"state":"closed","open_date":"2021-10-21T06:17:46Z","update_date":"2021-10-21T08:19:19Z","discussion":[{"author":"gebner","date":"2021-10-21T07:36:04Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-21T08:19:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3960997795)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3960997631)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3960998057)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3960998001)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3960997907)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3960997860)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3960997726)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3960998134)"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"b985d519ac4c79569d1a36a7e2e8d417e80610c0","message":"doc(README): remove reference to nightly releases","date":"2021-10-21T06:17:21Z"}]},{"author":"semorrison","number":632,"diff_summary":[{"file":"library/init/coe.lean","status":"M","additions":8,"deletions":3}],"state":"closed","open_date":"2021-10-20T23:23:40Z","update_date":"2021-10-21T10:11:34Z","discussion":[{"author":"gebner","date":"2021-10-21T09:28:30Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-21T10:11:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3962071168)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3962071320)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3962071747)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3962071695)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3962071485)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3962071425)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3962071569)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3962071815)"},{"author":"semorrison","date":"2021-10-21T10:17:39Z","comment":"I compiled mathlib locally with this change to core, and everything works fine without any changes required."}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"69f470419f5171079087bfc859561a32f86186c2","message":"refactor(library/init/coe): adjust universe levels to match Lean4","date":"2021-10-20T23:22:36Z"}]},{"author":"gebner","number":631,"diff_summary":[{"file":"README.md","status":"M","additions":20,"deletions":2},{"file":"doc/changes.md","status":"M","additions":20,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":20,"deletions":2}],"state":"closed","open_date":"2021-10-20T08:20:09Z","update_date":"2021-10-20T09:01:53Z","discussion":[{"author":"gebner","date":"2021-10-20T08:23:36Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-20T09:01:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3949084454)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3949083970)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3949084270)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3949077754)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3949077568)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3949084062)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3949077301)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3949084530)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"72cff8a73e15e381cb44f598deb6f65f3c95cfa9","message":"chore(*): release 3.34.0","date":"2021-10-20T08:19:55Z"},{"author":"gebner","committer":"gebner","hash":"e3b7715ca75ec376c003b40bb12e45656fd5c378","message":"Fix typo.","date":"2021-10-20T08:20:43Z"}]},{"author":"gebner","number":630,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"A","additions":50,"deletions":1},{"file":"bors.toml","status":"A","additions":50,"deletions":1},{"file":"script/ubuntu-aarch64-toolchain.cmake","status":"A","additions":50,"deletions":1},{"file":"src/CMakeLists.txt","status":"A","additions":50,"deletions":1}],"state":"closed","open_date":"2021-10-19T10:15:01Z","update_date":"2021-10-20T08:04:21Z","discussion":[{"author":"gebner","date":"2021-10-19T15:57:34Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-19T21:58:26Z","comment":"Build failed:\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3941583934)"},{"author":"gebner","date":"2021-10-20T07:15:58Z","comment":"Failure is unrelated\r\nbors r+"},{"author":"bors[bot]","date":"2021-10-20T08:04:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3948484258)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3948484149)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3948484508)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3948484451)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3948484050)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3948484004)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3948484357)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3948484599)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"daa4de5d7b1319fe0c56bb79d27c1f410ff01407","message":"chore: aarch64 support","date":"2021-10-19T14:35:40Z"},{"author":"gebner","committer":"gebner","hash":"134c94e4f0019fc2dfd7419b94a9fb57db3a1e69","message":"Build aarch64 on github actions","date":"2021-10-19T15:04:16Z"},{"author":"gebner","committer":"gebner","hash":"e6b1644b20fd13375f83f04b84ec6354d1e34c8c","message":"bors: require aarch64 build","date":"2021-10-19T15:04:16Z"}]},{"author":"YaelDillies","number":629,"diff_summary":[{"file":"library/init/data/char/classes.lean","status":"D","additions":3,"deletions":1257},{"file":"library/init/data/char/default.lean","status":"D","additions":3,"deletions":1257},{"file":"library/init/data/int/basic.lean","status":"D","additions":3,"deletions":1257},{"file":"library/init/data/int/bitwise.lean","status":"D","additions":3,"deletions":1257},{"file":"library/init/data/int/comp_lemmas.lean","status":"D","additions":3,"deletions":1257},{"file":"library/init/data/int/default.lean","status":"D","additions":3,"deletions":1257},{"file":"library/init/data/int/order.lean","status":"D","additions":3,"deletions":1257},{"file":"library/init/data/ordering/default.lean","status":"D","additions":3,"deletions":1257}],"state":"open","open_date":"2021-10-15T11:52:49Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"YaelDillies","date":"2021-10-15T11:53:40Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-15T11:53:41Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make YaelDillies a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/YaelDillies)\n"},{"author":"gebner","date":"2021-10-15T11:59:25Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-15T12:08:09Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3905678620)"},{"author":"bryangingechen","date":"2021-10-15T13:33:18Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-15T13:43:29Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3906547507)"}],"review_discussion":[],"tags":[],"commits":[{"author":"YaelDillies","committer":"YaelDillies","hash":"a9804247b0c3361c2b1b601daa5f589b5bcfe6f3","message":"initial commit","date":"2021-10-15T11:43:32Z"},{"author":"YaelDillies","committer":"YaelDillies","hash":"e7f118dc9163948324f0243d6b8980914fdcd88b","message":"restore int.basic","date":"2021-10-15T13:10:33Z"}]},{"author":"semorrison","number":628,"diff_summary":[{"file":"library/init/algebra/functions.lean","status":"M","additions":45,"deletions":73},{"file":"library/init/algebra/order.lean","status":"M","additions":45,"deletions":73},{"file":"library/init/data/int/order.lean","status":"M","additions":45,"deletions":73},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":45,"deletions":73},{"file":"tests/lean/run/order_defaults.lean","status":"M","additions":45,"deletions":73}],"state":"closed","open_date":"2021-10-15T08:59:59Z","update_date":"2021-10-17T04:54:38Z","discussion":[{"author":"semorrison","date":"2021-10-17T04:54:38Z","comment":"@digama0 expressed some reservations about making this change on zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/move.20init.2Ealgebra.2Eorder.20from.20core.20to.20mathlib.3F\r\n\r\nI'll close this for now unless someone has strong opinions to the contrary."}],"review_discussion":[{"author":"gebner","file":"library/init/algebra/order.lean","date":"2021-10-15T11:46:32Z","comment":"I think we should still keep `max` in `linear_order` (or maybe add a `has_sup` class) so that you can override it with a more efficient (or defeq) version."}],"tags":[{"tag":"rfc","description":""}],"commits":[{"author":"semorrison","committer":"semorrison","hash":"afbe96016370c1801dcf07d6cd902764bb9fa271","message":"refactor(init/algebra/order): remove decidable instances from linear_order","date":"2021-10-15T08:59:14Z"},{"author":"semorrison","committer":"semorrison","hash":"812d5cfa6e4f469295bd6140e9f0b244636919a6","message":"fix test","date":"2021-10-15T09:24:43Z"}]},{"author":"dselsam","number":627,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":39,"deletions":22},{"file":"src/library/ast_exporter.cpp","status":"M","additions":39,"deletions":22},{"file":"src/library/module_mgr.cpp","status":"M","additions":39,"deletions":22},{"file":"src/library/module_mgr.h","status":"M","additions":39,"deletions":22},{"file":"src/shell/lean.cpp","status":"M","additions":39,"deletions":22}],"state":"closed","open_date":"2021-10-06T04:22:15Z","update_date":"2021-10-06T14:21:25Z","discussion":[{"author":"semorrison","date":"2021-10-06T06:36:17Z","comment":"This will be very helpful for making reproducible builds of the mathport artifacts, so I would love to see this merged!"},{"author":"gebner","date":"2021-10-06T07:00:53Z","comment":"Mmmh, this means we need to compile mathlib to create tleans.  IIRC we disabled the parallel export because the file locking didn't cope too well with parallelism: https://github.com/leanprover-community/lean/pull/524#issuecomment-770929660\r\n\r\nI couldn't find the script used to create the mathport releases, but I suspect you can get a larger speedup by using the olean cache instead of compiling mathlib."},{"author":"gebner","date":"2021-10-06T10:01:22Z","comment":"> but I suspect you can get a larger speedup by using the olean cache instead of compiling mathlib.\r\n\r\nOf course this can't work because we also want the AST output which we can't generate from the oleans.\r\n\r\nThis PR probably breaks CI, let's see:\r\nbors r+"},{"author":"gebner","date":"2021-10-06T10:30:56Z","comment":"bors r-"},{"author":"bors[bot]","date":"2021-10-06T10:30:57Z","comment":"Canceled."},{"author":"gebner","date":"2021-10-06T10:35:06Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-06T10:44:15Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3813851860)"},{"author":"gebner","date":"2021-10-06T11:22:26Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-06T11:35:30Z","comment":"## try\n\nBuild failed:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3814275131)"},{"author":"gebner","date":"2021-10-06T12:32:00Z","comment":"bors try"},{"author":"gebner","date":"2021-10-06T12:48:03Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-06T12:48:04Z","comment":"## try\n\nAlready running a review"},{"author":"bors[bot]","date":"2021-10-06T12:48:20Z","comment":"## try\n\nBuild failed:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3814941879)"},{"author":"gebner","date":"2021-10-06T12:48:36Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-06T13:29:27Z","comment":"## try\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3815109435)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3815109081)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3815108934)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3815109228)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3815109300)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3815108826)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3815108717)"},{"author":"gebner","date":"2021-10-06T13:33:08Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-06T14:21:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3815606502)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3815606688)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3815606615)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3815607181)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3815607100)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3815606972)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3815607339)"},{"author":"dselsam","date":"2021-10-06T16:32:13Z","comment":"@gebner Thanks for your help!"}],"review_discussion":[],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"52912a717c0d555a86af202f274da0942cfc252a","message":"feat: export tleans in parallel","date":"2021-10-06T04:20:33Z"},{"author":"gebner","committer":"gebner","hash":"a87f1da3b650e171c0ffff6607170aa94d7b1f5e","message":"fix ci for tleans","date":"2021-10-06T10:34:38Z"},{"author":"gebner","committer":"gebner","hash":"3d8404147c6f50f12b357bb60663e920d63573d3","message":"fix ci","date":"2021-10-06T11:22:18Z"},{"author":"gebner","committer":"gebner","hash":"a051f181fc04d4092e8b8fea8ebd6f3360ea12e9","message":"more fix ci","date":"2021-10-06T12:17:52Z"},{"author":"gebner","committer":"gebner","hash":"6b581964240cf52f1cb4112e18044425a9002418","message":"recreate oleans after deleting them","date":"2021-10-06T12:47:56Z"}]},{"author":"fpvandoorn","number":626,"diff_summary":[{"file":"library/init/coe.lean","status":"M","additions":2,"deletions":2}],"state":"closed","open_date":"2021-10-04T08:10:31Z","update_date":"2021-10-04T11:13:16Z","discussion":[{"author":"gebner","date":"2021-10-04T10:12:46Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-04T11:13:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3789452774)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3789452692)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3789452637)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3789452481)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3789452420)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3789452558)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3789452887)"}],"review_discussion":[],"tags":[],"commits":[{"hash":"fd33db501b6ea6d92f177ac58e9fc306888e7604","message":"remove type class loop","date":"2021-10-04T08:08:42Z"}]},{"author":"eric-wieser","number":622,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"M","additions":26,"deletions":2},{"file":"tests/lean/by_contradiction.lean","status":"M","additions":26,"deletions":2}],"state":"closed","open_date":"2021-09-21T16:04:58Z","update_date":"2021-09-22T20:13:38Z","discussion":[{"author":"bryangingechen","date":"2021-09-21T16:08:40Z","comment":"Do you mind adding a test for this?"},{"author":"fpvandoorn","date":"2021-09-22T00:04:52Z","comment":"I don't like always doing `whnf`.\r\nIf my goal is `smooth f`, I don't want as new hypothesis `¬ times_cont_mdiff I I' ⊤ f`, but `¬ smooth f`.\r\n\r\nTwo ways in which this can be improved:\r\n* Only use the reduced form if the goal is `ne` (``tgt_wh \\l if tgt.is_app_of `ne then whnf tgt reducible else return tgt``)\r\n* Only use the reduced form if the reduced form is a negation (this might unfold other things that are defined to be negations)\r\n"},{"author":"digama0","date":"2021-09-22T03:08:58Z","comment":"Rather than using `whnf`, I think you should unify the goal against `not ?m` and use whatever you get for `?m`. This will ensure that you only unfold what you need to."},{"author":"eric-wieser","date":"2021-09-22T08:24:05Z","comment":"Isn't that essentially what I'm doing? I'm not whnf-ing the goal, I'm copying it and whnf-ing that copy just to see if a `not` would unify."},{"author":"fpvandoorn","date":"2021-09-22T17:49:28Z","comment":"Oh wait, I had a misunderstanding about the logic of the function. This looks good to me.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2021-09-22T18:50:02Z","comment":"Build failed:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3678494847)"},{"author":"bryangingechen","date":"2021-09-22T19:31:48Z","comment":"I've seen that exact failure a few times already on some other PRs here so I think it's spurious. I'll make an issue later.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-22T20:13:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3679427393)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3679427246)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3679427191)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3679427523)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3679427475)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3679427320)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3679427598)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"f32f8e6fd84838e413e6db4f7c8138bdff750802","message":"fix(library/init/meta/tactic): improve by_contradiction","date":"2021-09-21T16:04:53Z"},{"author":"eric-wieser","committer":"web-flow","hash":"283d15e29a683c8cc9dcd5f2eac742c3eb108b3a","message":"reducible","date":"2021-09-21T16:13:40Z"},{"author":"eric-wieser","committer":"web-flow","hash":"387a776fd1a04336b124a8e58d0e7e32ed642998","message":"Update by_contradiction.lean","date":"2021-09-21T16:30:37Z"}]},{"author":"BoltonBailey","number":621,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":2,"deletions":2}],"state":"open","open_date":"2021-09-18T23:12:18Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"BoltonBailey","date":"2021-09-18T23:32:12Z","comment":"Actually, after more experimentation, I'm not convinced I understand `repeat` yet."}],"review_discussion":[{"author":"digama0","file":"library/init/meta/interactive.lean","date":"2021-09-18T23:40:24Z","comment":"```suggestion\r\nthe tactic is applied recursively to all the generated subgoals until it eventually fails or\r\nthere are no more subgoals.\r\n```"}],"tags":[],"commits":[{"author":"BoltonBailey","committer":"web-flow","hash":"2b1ff5467d87f608fbefba30895cde7c35927e5d","message":"Improve repeat documentation","date":"2021-09-18T23:06:26Z"},{"author":"BoltonBailey","committer":"web-flow","hash":"7416058ec3537c4689c3bf4c3d14c7fecfbc978b","message":"Update library/init/meta/interactive.lean\n\nCo-authored-by: Mario Carneiro <di.gama@gmail.com>","date":"2021-09-19T01:18:02Z"}]},{"author":"urkud","number":620,"diff_summary":[{"file":"library/init/data/prod.lean","status":"M","additions":3,"deletions":13},{"file":"tests/lean/run/local_shadowing_projection.lean","status":"M","additions":3,"deletions":13},{"file":"tests/lean/run/rb_map1.lean","status":"M","additions":3,"deletions":13}],"state":"closed","open_date":"2021-09-17T01:47:15Z","update_date":"2021-09-17T19:51:59Z","discussion":[{"author":"urkud","date":"2021-09-17T01:58:58Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-09-17T02:01:52Z","comment":"## try\n\nBuild failed:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3627845366)"},{"author":"urkud","date":"2021-09-17T16:55:44Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-09-17T17:55:59Z","comment":"## try\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3634705564)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3634705415)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3634705527)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3634705693)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3634705627)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3634705347)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3634705449)"},{"author":"bors[bot]","date":"2021-09-17T19:51:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3635650866)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3635651159)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3635651135)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3635651062)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3635651018)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3635650932)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3635651225)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"urkud","committer":"urkud","hash":"61b798ff73a947e695731cec7bd941fbbdb87f0e","message":"chore(library/init/data/prod): drop `prod.has_lt`\n\nThe old definition does not agree with a natural `prod.has_le` in case\nof preorders. We'll provide an instance in `mathlib`.","date":"2021-09-17T01:43:45Z"},{"author":"urkud","committer":"urkud","hash":"ac29148742d0ed10200241b33723d7ffcdad5435","message":"Fix tests","date":"2021-09-17T02:57:27Z"}]},{"author":"digama0","number":619,"diff_summary":[{"file":"library/init/meta/converter/interactive.lean","status":"A","additions":61,"deletions":31},{"file":"library/init/meta/interactive.lean","status":"A","additions":61,"deletions":31},{"file":"library/init/meta/smt/interactive.lean","status":"A","additions":61,"deletions":31},{"file":"library/init/meta/tactic.lean","status":"A","additions":61,"deletions":31},{"file":"src/frontends/lean/builtin_cmds.cpp","status":"A","additions":61,"deletions":31},{"file":"src/library/scoped_ext.cpp","status":"A","additions":61,"deletions":31},{"file":"src/library/scoped_ext.h","status":"A","additions":61,"deletions":31},{"file":"tests/lean/interactive/rb_map_ts.lean","status":"A","additions":61,"deletions":31},{"file":"tests/lean/run/resolve_open.lean","status":"A","additions":61,"deletions":31}],"state":"closed","open_date":"2021-09-13T23:36:24Z","update_date":"2021-10-19T15:12:41Z","discussion":[{"author":"gebner","date":"2021-09-29T15:21:43Z","comment":"Does this get us closer to :four_leaf_clover:?  If so:\r\nbors d+"},{"author":"bors[bot]","date":"2021-09-29T15:21:44Z","comment":":v: digama0 can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"digama0","date":"2021-09-30T02:45:35Z","comment":"@gebner This is not explicitly related to lean 4 backporting, but testing the lean 4 behavior reveals that it does match this resolution scheme (not the original/current lean 3 way), with the exception that `open _root_.Foo` does not work; as far as I know there is no way in the lean 4 syntax to select a shadowed namespace name. That is, this brings lean 3 closer to parity to lean 4 and lean 4 is forward-compatible with this scheme."},{"author":"gebner","date":"2021-10-19T14:31:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-19T15:12:40Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3940520791)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3940521405)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3940521315)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3940520590)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3940520504)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3940521026)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3940521559)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"fb1865e8b354f7c9ed90c90437a6e510e9076d6c","message":"chore(library/scoped_ext): resolve open like decl","date":"2021-09-13T23:01:42Z"},{"author":"digama0","committer":"digama0","hash":"fb32d67b4fe17799d99381c0f7f969942db5633f","message":"fix library","date":"2021-09-13T23:35:27Z"},{"author":"digama0","committer":"digama0","hash":"930559e12f88bf417aab1af00cc8be0b5b34de03","message":"add test","date":"2021-09-13T23:35:38Z"},{"author":"digama0","committer":"digama0","hash":"c67cba3b2204100bcb4e6a4e268fd581501de67e","message":"fix test","date":"2021-09-14T00:14:23Z"}]},{"author":"digama0","number":618,"diff_summary":[{"file":"src/frontends/lean/decl_cmds.cpp","status":"A","additions":44,"deletions":14},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":44,"deletions":14},{"file":"src/frontends/lean/definition_cmds.h","status":"A","additions":44,"deletions":14},{"file":"src/library/module.cpp","status":"A","additions":44,"deletions":14},{"file":"src/library/scoped_ext.cpp","status":"A","additions":44,"deletions":14},{"file":"src/library/scoped_ext.h","status":"A","additions":44,"deletions":14},{"file":"src/util/name.cpp","status":"A","additions":44,"deletions":14},{"file":"src/util/name.h","status":"A","additions":44,"deletions":14},{"file":"tests/lean/run/add_decl_namespace.lean","status":"A","additions":44,"deletions":14}],"state":"closed","open_date":"2021-09-13T20:16:01Z","update_date":"2021-10-19T15:54:37Z","discussion":[{"author":"digama0","date":"2021-09-13T22:34:00Z","comment":"Hm, the broken test in the first commit reveals an issue with an unclear resolution. What happens is that it tries to `open lift` inside the `test` namespace, with the intention of opening the `test.lift` namespace and referring to `test.lift.up`, but instead it opens the `lift` namespace, resulting in an error.\r\n\r\nThe reason this commit caused the failure is that `lift` was not previously a namespace declared in the standard library, but it is a definition `def lift := ...`, and the changes make it so that the generated `lift.equations._eqn_1` lemma causes `lift` and `lift.equations` to be registered as namespaces.\r\n\r\nPersonally, I don't much like the fact that namespace declarations exist as a concept, considering the user's indirect control over them. But I see why `open` needs to be able to do name resolution, so I won't rock the boat too much here. There are two solutions I see to this:\r\n\r\n1. Live with the fact that there are now lots of namespaces, roughly one for every surface definition, because of equation lemmas. Name resolution for `namespace test   open lift` should probably be tweaked so that it finds `test.lift` instead of `lift` anyway (like name resolution for definitions).\r\n2. Don't generate namespaces for internal names like `lift.equations._eqn_1`.\r\n\r\nI went with option 2 since that makes for less impact. Basically we filter out internal suffixes like `equations._eqn_1` and then only add the parents of `lift` (of which there are none in this case) as new namespaces. There are still some gaps, like `_private.1234.foo._main` will cause `_private` and `_private.1234` to be registered as namespaces, but this doesn't seem like a big deal. Also `list.cons` and other inductive constructors are namespaces now because of autogenerated lemmas like `list.cons.inj_arrow`. I suppose someone could conceivably open these namespaces so I don't think it's worth fixing."},{"author":"gebner","date":"2021-10-19T14:32:05Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-19T15:54:35Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3941052345)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3941053313)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3941053237)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3941052665)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3941052590)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3941052895)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3941053098)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"441a45d27badd42aae9fe36906ab0acbb5dc7a01","message":"fix(library/module): add_decl adds parent namespaces","date":"2021-09-13T20:11:12Z"},{"author":"digama0","committer":"digama0","hash":"2fbbc1e6a3589eda0da55db59e4a94fa7ecaa404","message":"fix","date":"2021-09-13T22:19:43Z"}]},{"author":"bryangingechen","number":617,"diff_summary":[{"file":"README.md","status":"M","additions":23,"deletions":3},{"file":"doc/changes.md","status":"M","additions":23,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":23,"deletions":3}],"state":"closed","open_date":"2021-09-13T16:51:49Z","update_date":"2021-09-13T19:48:58Z","discussion":[{"author":"bryangingechen","date":"2021-09-13T16:51:56Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-09-13T17:20:53Z","comment":"Build failed:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3589741425)"},{"author":"bryangingechen","date":"2021-09-13T18:48:23Z","comment":"Strange. Let's try again.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-13T19:48:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3590812276)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3590812452)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3590812397)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3590812563)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3590812516)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3590812164)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3590812647)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"ca2592374da5c0eae679863ea6f7226611785aad","message":"chore(*): release 3.33.0c","date":"2021-09-13T16:51:16Z"}]},{"author":"YaelDillies","number":616,"diff_summary":[{"file":"library/init/data/int/order.lean","status":"M","additions":2,"deletions":2}],"state":"closed","open_date":"2021-09-13T07:28:46Z","update_date":"2021-09-13T14:50:07Z","discussion":[{"author":"bors[bot]","date":"2021-09-13T14:50:06Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3587758051)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3587758448)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3587758193)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3587758761)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3587758678)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3587758580)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3587758893)"}],"review_discussion":[],"tags":[],"commits":[{"author":"YaelDillies","committer":"YaelDillies","hash":"9fd5b0266317e178c3b5aec62c4efa59e462a127","message":"rename int.sub_one_lt_of_le and int.lt_of_sub_one_le","date":"2021-09-13T07:23:24Z"}]},{"author":"urkud","number":615,"diff_summary":[{"file":"library/init/algebra/order.lean","status":"M","additions":2,"deletions":4},{"file":"library/init/meta/relation_tactics.lean","status":"M","additions":2,"deletions":4}],"state":"closed","open_date":"2021-09-12T14:28:12Z","update_date":"2021-09-12T15:28:44Z","discussion":[{"author":"bryangingechen","date":"2021-09-12T14:41:47Z","comment":"Ah, I was a little confused where this came from until I saw that this was added in #609. BTW #124 tracks \"primed\" tactics from mathlib. I don't know if we'll ever get to it now, but I think the plan had been to replace e.g. `reflexivity` in core with `reflexivity'`.\r\n\r\nLGTM.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T15:28:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3579910778)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3579910856)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3579910841)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3579910822)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3579910811)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3579910870)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3579910895)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"urkud","committer":"urkud","hash":"dcc44269840b19af2a5dab1312f43b7b65f4b5a7","message":"Fix conflict with mathlib","date":"2021-09-12T02:44:19Z"}]},{"author":"digama0","number":614,"diff_summary":[{"file":".gitignore","status":"A","additions":354,"deletions":63},{"file":"library/init/meta/converter/interactive.lean","status":"A","additions":354,"deletions":63},{"file":"library/init/meta/smt/interactive.lean","status":"A","additions":354,"deletions":63},{"file":"library/init/meta/tactic.lean","status":"A","additions":354,"deletions":63},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":354,"deletions":63},{"file":"src/frontends/lean/elaborator.h","status":"A","additions":354,"deletions":63},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":354,"deletions":63},{"file":"src/frontends/lean/parser.h","status":"A","additions":354,"deletions":63},{"file":"src/frontends/lean/tactic_notation.cpp","status":"A","additions":354,"deletions":63},{"file":"src/library/abstract_parser.h","status":"A","additions":354,"deletions":63},{"file":"src/library/ast_exporter.cpp","status":"A","additions":354,"deletions":63},{"file":"src/library/ast_exporter.h","status":"A","additions":354,"deletions":63},{"file":"src/library/module_mgr.cpp","status":"A","additions":354,"deletions":63},{"file":"src/library/module_mgr.h","status":"A","additions":354,"deletions":63},{"file":"src/library/tactic/CMakeLists.txt","status":"A","additions":354,"deletions":63},{"file":"src/library/tactic/ac_tactics.h","status":"A","additions":354,"deletions":63},{"file":"src/library/tactic/tactic_log.cpp","status":"A","additions":354,"deletions":63},{"file":"src/library/tactic/tactic_log.h","status":"A","additions":354,"deletions":63},{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":354,"deletions":63},{"file":"src/library/vm/vm_parser.cpp","status":"A","additions":354,"deletions":63},{"file":"tests/lean/interactive/my_tac_class.lean","status":"A","additions":354,"deletions":63},{"file":"tests/lean/interactive/parser_itactic.lean.expected.out","status":"A","additions":354,"deletions":63},{"file":"tests/lean/interactive/rb_map_ts.lean","status":"A","additions":354,"deletions":63},{"file":"tests/lean/run/my_tac_class.lean","status":"A","additions":354,"deletions":63}],"state":"closed","open_date":"2021-09-08T21:33:38Z","update_date":"2021-09-12T19:18:49Z","discussion":[{"author":"bryangingechen","date":"2021-09-12T16:36:40Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-09-12T16:48:00Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580300373)"},{"author":"digama0","date":"2021-09-12T17:17:45Z","comment":"bors try"},{"author":"bryangingechen","date":"2021-09-12T18:08:02Z","comment":"Is it worth adding some documentation for `--ast` in this repo (maybe even just a pointer to mathport)?"},{"author":"bors[bot]","date":"2021-09-12T18:12:44Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580436321)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580436262)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580436244)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580436288)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580436373)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580436344)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580436222)"},{"author":"digama0","date":"2021-09-12T18:14:22Z","comment":"I will write some documentation as a `.md` file (in a separate PR)."},{"author":"bryangingechen","date":"2021-09-12T18:18:11Z","comment":"OK, let's merge this now then.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T19:18:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580659577)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580659628)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580659620)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580659547)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580659539)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580659596)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580659643)"}],"review_discussion":[{"author":"dselsam","file":"src/library/ast_exporter.cpp","date":"2021-09-09T16:06:44Z","comment":"These two lines need to be *after* the tactic log exporting."},{"author":"dselsam","file":"src/library/tactic/tactic_log.cpp","date":"2021-09-09T16:07:14Z","comment":"Did you mean to negate this?"}],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"293e4f82fb2860ba23bc9a993fc1415cc4a82c42","message":"feat(tactic_log.cpp): log tactic invocations in AST","date":"2021-08-26T07:35:06Z"},{"author":"digama0","committer":"digama0","hash":"c08ef8af3889ee28871e5041447594251dfef14c","message":"fix for Daniel's review","date":"2021-09-09T16:35:53Z"},{"author":"digama0","committer":"digama0","hash":"8747df80d71b7eb50891e53bf925850737a9c406","message":"fix tests","date":"2021-09-12T17:17:04Z"}]},{"author":"ericrbg","number":612,"diff_summary":[{"file":"src/frontends/lean/brackets.cpp","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/builtin_exprs.cpp","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/calc.cpp","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/decl_attributes.cpp","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/definition_cmds.cpp","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/match_expr.cpp","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/parser.cpp","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/parser.h","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/scanner.cpp","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/scanner.h","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/tactic_notation.cpp","status":"M","additions":114,"deletions":92},{"file":"src/frontends/lean/user_notation.cpp","status":"M","additions":114,"deletions":92},{"file":"src/library/tactic/user_attribute.cpp","status":"M","additions":114,"deletions":92},{"file":"src/library/vm/vm_parser.cpp","status":"M","additions":114,"deletions":92}],"state":"closed","open_date":"2021-09-01T22:40:26Z","update_date":"2021-09-09T11:19:05Z","discussion":[{"author":"digama0","date":"2021-09-09T10:28:50Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-09-09T11:19:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3555034490)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3555034721)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3555034672)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3555034393)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3555034346)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3555034585)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3555034783)"}],"review_discussion":[{"author":"digama0","file":"src/frontends/lean/scanner.cpp","date":"2021-09-02T07:13:24Z","comment":"Shouldn't this be using `m_upos`, like `m_pos` is below it? Have you tested this with unicode in the mix?"},{"author":"ericrbg","file":"src/frontends/lean/scanner.cpp","date":"2021-09-02T09:23:10Z","comment":"ah, this is what was causing me the dodgy values! I was using `m_upos` before and then accidentally changed it - thanks for spotting this :) I now think the second method is definitely better"},{"author":"ericrbg","file":"src/frontends/lean/parser.cpp","date":"2021-09-02T18:57:33Z","comment":"I'm currently porting some mathlib code to work with current master + this, and I may revert this change - this breaks working with half-completed tactic states in quite a harsh way."}],"tags":[],"commits":[{"author":"ericrbg","committer":"ericrbg","hash":"a5fa7b0db983d8b78e93d6c013aab05927e4b397","message":"feat(ast,scanner): add end-pos support","date":"2021-09-01T22:18:49Z"},{"author":"ericrbg","committer":"ericrbg","hash":"a273d4272f1f01ef5585164b0309efbe33854332","message":"experimental: add general support for \"end\"","date":"2021-09-01T22:20:51Z"},{"author":"ericrbg","committer":"ericrbg","hash":"ec04fcfb69ca2f6bb5d83b5973c9d3e387a211ef","message":"use the correct m_upos","date":"2021-09-02T09:24:03Z"},{"author":"ericrbg","committer":"ericrbg","hash":"3a55293dbad14b789997cfd17e735aa0ca2ac957","message":"bug was feature","date":"2021-09-02T19:19:54Z"}]},{"author":"fpvandoorn","number":611,"diff_summary":[{"file":"library/init/funext.lean","status":"M","additions":24,"deletions":14},{"file":"tests/lean/quot_bug.lean","status":"M","additions":24,"deletions":14},{"file":"tests/lean/quot_bug.lean.expected.out","status":"M","additions":24,"deletions":14}],"state":"closed","open_date":"2021-08-31T19:52:51Z","update_date":"2021-09-12T18:24:24Z","discussion":[{"author":"bryangingechen","date":"2021-09-12T16:43:51Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T18:24:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580481599)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580481558)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580481544)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580481508)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580481487)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580481467)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580481578)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"c2406a2a9dd232e45aa03ce4d8df2dc3ef23d518","message":"make private instance local","date":"2021-08-31T02:38:19Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"ba801c97735c85a60783d354a824305cb6d2bccd","message":"add docstrings, fix test","date":"2021-08-31T07:44:27Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"1c37350b4709672326332a703c20260e9f7dbf3b","message":"namespaces","date":"2021-08-31T08:21:47Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"bb68162699a91c07fbbe9c70baec33e755b95095","message":"fix","date":"2021-08-31T09:09:43Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"6357d9488c2b6563aba675ede38e32c6d37726a9","message":"fix test output","date":"2021-08-31T19:50:00Z"}]},{"author":"trevorfancher","number":610,"diff_summary":[{"file":"doc/make/index.md","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-08-31T19:51:22Z","update_date":"2021-09-12T18:24:26Z","discussion":[{"author":"bryangingechen","date":"2021-09-12T16:38:47Z","comment":"Thanks! This was probably just an oversight when we forked.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T18:24:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580481599)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580481558)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580481544)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580481508)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580481487)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580481467)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580481578)"}],"review_discussion":[],"tags":[],"commits":[{"author":"trevorfancher","committer":"web-flow","hash":"d714b08c36f6ec2ba72a4e410da9a622c70505b5","message":"Pull from leanprover-community for release build\n\nI am on an M1 mac. Installing via the [recommended method](https://leanprover-community.github.io/install/macos.html) fails due to elan install failing. Pulling from the leanprover git also failed to work with the tutorials (I think, I'm still new). But pulling from leanprover-community seems to work once I set up PATH correctly.","date":"2021-08-31T19:46:53Z"}]},{"author":"urkud","number":609,"diff_summary":[{"file":"library/init/algebra/functions.lean","status":"M","additions":21,"deletions":3},{"file":"library/init/algebra/order.lean","status":"M","additions":21,"deletions":3},{"file":"library/init/meta/relation_tactics.lean","status":"M","additions":21,"deletions":3}],"state":"closed","open_date":"2021-08-25T03:15:49Z","update_date":"2021-08-25T14:04:26Z","discussion":[{"author":"urkud","date":"2021-08-25T04:36:24Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-08-25T05:29:54Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3418241477)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3418241422)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3418241537)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3418241577)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3418241502)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3418241439)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3418241459)"},{"author":"gebner","date":"2021-08-25T09:37:56Z","comment":"LGTM.  Would it make sense to instead replace min/max by inf/sup completely (i.e. have linear_order extend has_inf and has_sup)?"},{"author":"urkud","date":"2021-08-25T11:57:36Z","comment":"I guess that some people will not be happy about using lattice notation for min and max."},{"author":"gebner","date":"2021-08-25T13:15:20Z","comment":"We could do `infix ⊔ := max`, then you could use both.  But we can also wait until Lean 4, which doesn't have the `def max`, so we will be able to all of this refactoring in mathlib."},{"author":"gebner","date":"2021-08-25T13:15:24Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-25T14:04:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3422297699)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3422297965)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3422297878)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3422298514)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3422298417)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3422298167)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3422298636)"}],"review_discussion":[],"tags":[{"tag":"enhancement","description":"New feature or request"},{"tag":"awaiting-review","description":null}],"commits":[{"author":"urkud","committer":"urkud","hash":"effa0d3c37f8d7b1647053cf8dfdf806abdcd0c0","message":"Snapshot","date":"2021-08-25T02:59:52Z"}]},{"author":"digama0","number":608,"diff_summary":[{"file":".gitignore","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/brackets.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/builtin_cmds.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/builtin_exprs.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/calc.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/calc.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/cmd_table.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/decl_attributes.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/decl_attributes.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/decl_cmds.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/decl_cmds.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/decl_util.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/decl_util.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/definition_cmds.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/inductive_cmds.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/inductive_cmds.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/json.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/json.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/match_expr.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/module_parser.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/module_parser.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/notation_cmd.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/notation_cmd.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/parse_table.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/parse_table.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/parser.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/parser_config.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/parser_config.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/prenum.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/print_cmd.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/print_cmd.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/structure_cmd.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/structure_cmd.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/structure_instance.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/tactic_notation.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/type_util.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/type_util.h","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/user_command.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/user_notation.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/util.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/frontends/lean/util.h","status":"A","additions":2422,"deletions":916},{"file":"src/kernel/expr.h","status":"A","additions":2422,"deletions":916},{"file":"src/library/CMakeLists.txt","status":"A","additions":2422,"deletions":916},{"file":"src/library/abstract_parser.h","status":"A","additions":2422,"deletions":916},{"file":"src/library/annotation.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/ast_exporter.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/ast_exporter.h","status":"A","additions":2422,"deletions":916},{"file":"src/library/attribute_manager.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/attribute_manager.h","status":"A","additions":2422,"deletions":916},{"file":"src/library/choice.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/compiler/nat_value.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/compiler/rec_fn_macro.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/constructions/projection.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/delayed_abstraction.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/equations_compiler/equations.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/module_mgr.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/module_mgr.h","status":"A","additions":2422,"deletions":916},{"file":"src/library/quote.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/scoped_ext.h","status":"A","additions":2422,"deletions":916},{"file":"src/library/sorry.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/string.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/tactic/ac_tactics.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/tactic/backward/backward_lemmas.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/tactic/smt/util.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/tactic/user_attribute.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/tlean_exporter.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/typed_expr.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/typed_expr.h","status":"A","additions":2422,"deletions":916},{"file":"src/library/vm/vm_override.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/vm/vm_parser.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/library/vm/vm_parser.h","status":"A","additions":2422,"deletions":916},{"file":"src/shell/lean.cpp","status":"A","additions":2422,"deletions":916},{"file":"src/util/lean_json.h","status":"A","additions":2422,"deletions":916}],"state":"closed","open_date":"2021-08-23T18:59:59Z","update_date":"2021-08-25T10:21:50Z","discussion":[{"author":"bryangingechen","date":"2021-08-25T05:31:32Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-08-25T06:26:11Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3418541749)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3418541818)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3418541692)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3418541884)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3418541782)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3418541840)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3418541622)"},{"author":"gebner","date":"2021-08-25T09:30:28Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-25T10:21:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3420380660)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3420380841)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3420380790)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3420381052)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3420381009)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3420380917)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3420381113)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"452ee6f2d2b372519f2658c3e795084436c3a2ed","message":"AST tracking and export","date":"2021-08-16T18:33:41Z"},{"author":"digama0","committer":"digama0","hash":"5df7df88b9afa273578a72881dc81a6d440cbcf3","message":"fix(vm_parser.cpp): restore nested context","date":"2021-08-16T18:33:41Z"},{"author":"digama0","committer":"digama0","hash":"0f8f772d4587d5d6cf796de4a7c4cf4d912b1526","message":"feat(vm_parser): with_input size AST","date":"2021-08-16T18:33:41Z"},{"author":"digama0","committer":"digama0","hash":"fc5f1191859fe1074c5fb00aabace91b16fa2cf2","message":"fix(user_command): get AST for command parser","date":"2021-08-16T19:10:19Z"},{"author":"digama0","committer":"digama0","hash":"43f569a4ee91b2399efd13cad2d56a9fc5e51371","message":"fix(json.cpp): un-reverse json_of_name","date":"2021-08-23T19:32:06Z"},{"author":"digama0","committer":"digama0","hash":"8716276a8b169b2f70971c4f6b4c78f0587bc146","message":"fix warning","date":"2021-08-23T19:32:17Z"}]},{"author":"semorrison","number":607,"diff_summary":[{"file":"library/init/data/nat/basic.lean","status":"M","additions":73,"deletions":120},{"file":"library/init/data/nat/bitwise.lean","status":"M","additions":73,"deletions":120},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":73,"deletions":120},{"file":"src/library/comp_val.cpp","status":"M","additions":73,"deletions":120},{"file":"tests/lean/protected_test.lean","status":"M","additions":73,"deletions":120},{"file":"tests/lean/protected_test.lean.expected.out","status":"M","additions":73,"deletions":120},{"file":"tests/lean/run/1728.lean","status":"M","additions":73,"deletions":120},{"file":"tests/lean/run/empty_match.lean","status":"M","additions":73,"deletions":120},{"file":"tests/lean/run/exhaustive_vm_impl_test.lean","status":"M","additions":73,"deletions":120}],"state":"closed","open_date":"2021-08-21T00:45:10Z","update_date":"2021-08-25T11:02:41Z","discussion":[{"author":"gebner","date":"2021-08-25T09:30:51Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-25T11:02:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3420829131)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3420829057)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3420829017)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3420828886)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3420828861)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3420828770)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3420828953)"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"24e18d91422c934d8a926a04c2a2e29fc7ed226b","message":"Revert 'chore(library/init/data/nat): backport Nat.le from Lean4 (#603)'","date":"2021-08-21T00:43:10Z"}]},{"author":"semorrison","number":606,"diff_summary":[{"file":"src/frontends/lean/widget.cpp","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-08-20T08:16:01Z","update_date":"2021-08-20T09:20:09Z","discussion":[{"author":"gebner","date":"2021-08-20T08:19:37Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-20T09:20:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3380014563)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3380014658)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3380014626)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3380014857)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3380014818)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3380014734)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3380014926)"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"202f57ea05edc3aca7a14e84d551eb1bfe8b5aab","message":"fix(frontend/lean/widgets): not compiling on macos 10.14","date":"2021-08-20T08:13:07Z"}]},{"author":"fpvandoorn","number":605,"diff_summary":[{"file":"README.md","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-08-18T21:14:27Z","update_date":"2021-09-12T17:32:53Z","discussion":[{"author":"bryangingechen","date":"2021-08-18T21:18:15Z","comment":"This is due to this change in `elan`, right? https://github.com/leanprover/elan/blob/master/CHANGELOG.md#101---2021-04-28"},{"author":"fpvandoorn","date":"2021-08-18T21:22:15Z","comment":"Yes"},{"author":"bryangingechen","date":"2021-09-12T16:37:11Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T17:32:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580302477)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580302445)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580302429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580302511)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580302497)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580302388)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580302534)"}],"review_discussion":[{"author":"gebner","file":"README.md","date":"2021-08-19T08:55:36Z","comment":"```suggestion\r\nelan override set leanprover-community/lean:3.xx.x\r\n```\r\n\r\nBoth the v- and v-less versions work, but elan thinks they're different toolchains and will download them twice.  Since we use the v-less version in mathlib, we should also use the v-less one here."},{"author":"fpvandoorn","file":"README.md","date":"2021-08-31T08:06:49Z","comment":"Oh, I didn't know that. Changed."}],"tags":[],"commits":[{"author":"fpvandoorn","committer":"web-flow","hash":"c143f5200e666a299c47a235a639c873ef611ed6","message":"fix(README): typo\n\nThe name changed since `3.28.0` to use `/`","date":"2021-08-18T21:14:25Z"},{"author":"fpvandoorn","committer":"web-flow","hash":"99f02d6ec3f573c979d4a344187e2b75c9175a60","message":"Update README.md","date":"2021-08-18T21:20:26Z"},{"author":"fpvandoorn","committer":"web-flow","hash":"45d2d9ffec7b637e0ee6fa2ac46b95ff2e551935","message":"Update README.md\n\nCo-authored-by: Gabriel Ebner <gebner@gebner.org>","date":"2021-08-31T08:06:39Z"}]},{"author":"fpvandoorn","number":604,"diff_summary":[{"file":"library/init/function.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-08-18T21:09:09Z","update_date":"2021-08-18T22:26:45Z","discussion":[{"author":"gebner","date":"2021-08-18T21:25:47Z","comment":"bors r+"},{"author":"gebner","date":"2021-08-18T21:25:57Z","comment":"bors r-"},{"author":"bors[bot]","date":"2021-08-18T21:25:58Z","comment":"Canceled."},{"author":"gebner","date":"2021-08-18T21:26:19Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-18T22:26:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3365767995)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3365768231)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3365768192)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3365768104)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3365768078)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3365768153)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3365768273)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"0b999fa3ecbd59dbdb52739694f9dcaeceefced3","message":"make injective semireducible","date":"2021-08-18T20:57:56Z"}]},{"author":"semorrison","number":603,"diff_summary":[{"file":"library/init/data/nat/basic.lean","status":"M","additions":120,"deletions":73},{"file":"library/init/data/nat/bitwise.lean","status":"M","additions":120,"deletions":73},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":120,"deletions":73},{"file":"src/library/comp_val.cpp","status":"M","additions":120,"deletions":73},{"file":"tests/lean/protected_test.lean","status":"M","additions":120,"deletions":73},{"file":"tests/lean/protected_test.lean.expected.out","status":"M","additions":120,"deletions":73},{"file":"tests/lean/run/1728.lean","status":"M","additions":120,"deletions":73},{"file":"tests/lean/run/empty_match.lean","status":"M","additions":120,"deletions":73},{"file":"tests/lean/run/exhaustive_vm_impl_test.lean","status":"M","additions":120,"deletions":73}],"state":"closed","open_date":"2021-08-18T10:53:42Z","update_date":"2021-08-20T10:01:39Z","discussion":[{"author":"gebner","date":"2021-08-19T15:29:07Z","comment":"The reason for the timeouts seems to be related to strings:\r\n```lean\r\nset_option profiler true\r\nexample (h : 'h' = 'w') : false := by cases h -- before and now 0.4s\r\nexample (h : \"h\" = \"w\") : false := by cases h -- before 0.5s, now 7s\r\nexample (h : ['h'] = ['w']) : false := by cases h -- before 0.4s, now 2.7s\r\n```\r\n\r\nFrom what I can tell, this is because Lean tries to unify `104 < 0xd800` and `119 < 0xd800`.  This used to be fast (and not unifiable), but now it requires computing the inequality (and it's also unifiable now!)."},{"author":"fpvandoorn","date":"2021-08-19T19:28:30Z","comment":"would it make sense to make `nat.ble` irreducible?"},{"author":"gebner","date":"2021-08-19T19:42:51Z","comment":"I'd rather make `nat.le` irreducible.  Making `nat.ble` irreducible means you can't use it in `dec_trivial` anymore."},{"author":"gebner","date":"2021-08-20T08:32:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-20T10:01:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3380494005)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3380493671)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3380493630)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3380493846)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3380493807)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3380493490)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3380493921)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"semorrison","committer":"semorrison","hash":"d6c16ec04cb85f2b712795283f5aa5e6a6b130d8","message":"backporting Nat.le","date":"2021-08-18T09:52:26Z"},{"author":"semorrison","committer":"semorrison","hash":"1e2a29f8f5824681064e5935d6065a443f313784","message":"cleanup","date":"2021-08-18T09:52:54Z"},{"author":"semorrison","committer":"semorrison","hash":"13bfaf800176a579fc78cd50457b1a82f1864fb8","message":"more","date":"2021-08-18T10:26:53Z"},{"author":"semorrison","committer":"semorrison","hash":"407ec6bb2acd9eb041f20e7c7ea3368925aaaba5","message":"more","date":"2021-08-18T10:28:42Z"},{"author":"semorrison","committer":"semorrison","hash":"a9ee3dfc8a643acd9dbdbd5aae27bd5bda25a344","message":"revert change to widget.cpp","date":"2021-08-18T10:31:19Z"},{"author":"semorrison","committer":"semorrison","hash":"89fad192066afc2fc5bc699821bd3145e39e2f50","message":"fix some tests","date":"2021-08-19T01:54:06Z"},{"author":"semorrison","committer":"semorrison","hash":"2f8ce7d3b4413eb66a6f850c25dff04fc0a0c094","message":"fix test","date":"2021-08-19T02:45:24Z"},{"author":"semorrison","committer":"semorrison","hash":"920dd6264184033ee58dc8b144ba928646669548","message":"add nat.le.induction_on","date":"2021-08-19T04:36:03Z"},{"author":"semorrison","committer":"semorrison","hash":"52d71b718496c2d24581509d327610e15edca1e5","message":"rename lemma","date":"2021-08-19T04:54:45Z"},{"author":"gebner","committer":"gebner","hash":"30128a3cf26e8ad111810cd40436fce012974802","message":"fix typo","date":"2021-08-19T13:53:02Z"},{"author":"semorrison","committer":"semorrison","hash":"958b821ed89139b1352c5479b1d56b5b09d1661b","message":"add protected","date":"2021-08-20T00:51:03Z"},{"author":"semorrison","committer":"semorrison","hash":"a068246df25b74e64de282a3a05bb3fd8d2a878d","message":"Merge branch 'nat.le' of github.com:leanprover-community/lean into nat.le","date":"2021-08-20T01:02:34Z"},{"author":"semorrison","committer":"semorrison","hash":"4c5500aba3d3b307aec3181d7f46279e96322b92","message":"make nat.le irreducible","date":"2021-08-20T01:02:59Z"},{"author":"semorrison","committer":"semorrison","hash":"49d22a0299a2c51e06e1e38268c4f885eac52c04","message":"fix","date":"2021-08-20T01:54:27Z"},{"author":"semorrison","committer":"semorrison","hash":"a3a4896dfec0b3319a0f42ce705c13ff42014ca4","message":"fix test","date":"2021-08-20T02:19:57Z"},{"author":"semorrison","committer":"semorrison","hash":"5c22be2123912036265b6c2fca1a84d5b40ac0e1","message":"fix tests","date":"2021-08-20T03:03:37Z"},{"author":"semorrison","committer":"semorrison","hash":"73d5d20dcee8ad93b346f12bbb0e806e6f78abdb","message":"oops","date":"2021-08-20T03:11:38Z"}]},{"author":"dselsam","number":602,"diff_summary":[{"file":"src/library/sorry.cpp","status":"M","additions":6,"deletions":0}],"state":"closed","open_date":"2021-08-12T13:50:59Z","update_date":"2021-08-12T15:28:50Z","discussion":[{"author":"gebner","date":"2021-08-12T14:41:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-12T15:28:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3312834707)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3312834927)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3312834859)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3312835148)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3312835083)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3312834567)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3312835289)"}],"review_discussion":[],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"6b364a633affd021865ffb9de6049925855f18b6","message":"feat: allow sorry macro to textualize\n\nReason: so we can run mathport on projects that have sorries,\nsuch as lean-liquid.","date":"2021-08-12T13:49:47Z"}]},{"author":"gebner","number":601,"diff_summary":[{"file":"README.md","status":"M","additions":8,"deletions":2},{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2}],"state":"closed","open_date":"2021-08-12T10:54:22Z","update_date":"2021-08-12T11:55:00Z","discussion":[{"author":"gebner","date":"2021-08-12T10:56:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-12T11:55:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3310782116)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3310782322)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3310782293)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3310782252)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3310782230)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3310782176)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3310782383)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"9a24c748930f40a40c15c9d0b0b0ab8ab2b2674a","message":"chore(*): release 3.32.1c","date":"2021-08-12T10:53:48Z"}]},{"author":"gebner","number":600,"diff_summary":[{"file":"README.md","status":"M","additions":17,"deletions":2},{"file":"doc/changes.md","status":"M","additions":17,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":17,"deletions":2}],"state":"closed","open_date":"2021-08-10T10:53:48Z","update_date":"2021-08-10T12:02:46Z","discussion":[{"author":"gebner","date":"2021-08-10T11:20:16Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-10T12:02:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3290276669)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3290276462)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3290276431)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3290276625)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3290276583)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3290276362)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3290276510)"},{"author":"digama0","date":"2021-08-10T18:05:32Z","comment":"Oh dang, I was hoping to get #598 in this. The mathlib upgrade branch I pushed yesterday includes fixes for #598 (although they work without it too) - very few proofs broke. I've renamed it to [`lean-3-32-1`](https://github.com/leanprover-community/mathlib/tree/lean-3-32-1)."},{"author":"gebner","date":"2021-08-10T18:13:39Z","comment":"Ok, didnt realize it was that easy.  Lets make a new release then."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"4b13c6b06813871451ddd84a285e9945dd67ce9b","message":"chore(*): release 3.32.0c","date":"2021-08-10T10:53:03Z"}]},{"author":"digama0","number":599,"diff_summary":[{"file":"library/data/stream.lean","status":"M","additions":59,"deletions":135},{"file":"library/init/core.lean","status":"M","additions":59,"deletions":135},{"file":"library/init/data/bool/basic.lean","status":"M","additions":59,"deletions":135},{"file":"library/init/data/quot.lean","status":"M","additions":59,"deletions":135},{"file":"library/init/data/sum/basic.lean","status":"M","additions":59,"deletions":135},{"file":"library/init/function.lean","status":"M","additions":59,"deletions":135},{"file":"library/init/funext.lean","status":"M","additions":59,"deletions":135},{"file":"library/init/logic.lean","status":"M","additions":59,"deletions":135},{"file":"src/frontends/lean/notation_cmd.cpp","status":"M","additions":59,"deletions":135},{"file":"src/frontends/lean/token_table.cpp","status":"M","additions":59,"deletions":135},{"file":"src/kernel/expr.h","status":"M","additions":59,"deletions":135},{"file":"tests/lean/712.lean.expected.out","status":"M","additions":59,"deletions":135},{"file":"tests/lean/hole_issue2.lean","status":"M","additions":59,"deletions":135},{"file":"tests/lean/run/585c.lean","status":"M","additions":59,"deletions":135},{"file":"tests/lean/run/calc_auto_trans_eq.lean","status":"M","additions":59,"deletions":135},{"file":"tests/lean/run/simp_univ_poly.lean","status":"M","additions":59,"deletions":135},{"file":"tests/lean/run/soundness.lean","status":"M","additions":59,"deletions":135}],"state":"closed","open_date":"2021-08-06T20:28:53Z","update_date":"2021-08-09T12:01:56Z","discussion":[{"author":"gebner","date":"2021-08-09T11:14:28Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-09T12:01:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3279684244)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3279684331)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3279684303)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3279684063)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3279684032)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3279684166)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3279684371)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"435495862050a1e3ca42e51f5fc47b461190b97c","message":"refactor(init/core): backport remove reserve notation","date":"2021-08-06T20:17:31Z"},{"author":"digama0","committer":"digama0","hash":"e870e2d421e2f20f587214efa9c2bdf5ad89e6f6","message":"fix tests","date":"2021-08-06T20:37:55Z"}]},{"author":"digama0","number":598,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":15,"deletions":16},{"file":"library/init/data/int/basic.lean","status":"M","additions":15,"deletions":16},{"file":"library/init/data/int/order.lean","status":"M","additions":15,"deletions":16},{"file":"library/init/data/nat/bitwise.lean","status":"M","additions":15,"deletions":16},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":15,"deletions":16},{"file":"tests/lean/inject.lean.expected.out","status":"M","additions":15,"deletions":16},{"file":"tests/lean/run/unification_hints.lean","status":"M","additions":15,"deletions":16},{"file":"tests/lean/unification_hints1.lean.expected.out","status":"M","additions":15,"deletions":16},{"file":"tests/lean/unification_hints2.lean.expected.out","status":"M","additions":15,"deletions":16}],"state":"closed","open_date":"2021-08-06T18:16:51Z","update_date":"2021-08-10T18:55:29Z","discussion":[{"author":"gebner","date":"2021-08-09T11:12:44Z","comment":"Given that this already causes lots of errors in core, I'd really like to see the effect on mathlib first.  It's trivial enough to port this unification hint manually if we need it."},{"author":"digama0","date":"2021-08-09T11:16:03Z","comment":"It's true that it causes several errors, but they are all easy to fix, they involve rewriting with `add_succ` when needed. The analogous theorems for `mul_succ` were already using the rewrite. But I agree that we should fix mathlib since if the breakage is too great we may want to back this out."},{"author":"gebner","date":"2021-08-10T18:10:16Z","comment":"bors r+\r\n"},{"author":"bors[bot]","date":"2021-08-10T18:55:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3293595093)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3293594885)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3293594843)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3293594658)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3293594609)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3293595008)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3293594764)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"1a414e58f55f8bf447fd6fffb36b3a1eac0581c8","message":"refactor(init/core): backport remove unification hints","date":"2021-08-06T18:13:55Z"},{"author":"digama0","committer":"digama0","hash":"6e7e87905814dd7795dc4383d8adae89bdc2d7a2","message":"fix library","date":"2021-08-06T18:57:47Z"},{"author":"digama0","committer":"digama0","hash":"e041382c92ce506579c7010ea50a8d5683d4a10d","message":"fix tests","date":"2021-08-06T21:00:45Z"}]},{"author":"digama0","number":597,"diff_summary":[{"file":"library/init/meta/expr.lean","status":"M","additions":8,"deletions":4},{"file":"library/init/meta/rb_map.lean","status":"M","additions":8,"deletions":4},{"file":"library/init/meta/tactic.lean","status":"M","additions":8,"deletions":4}],"state":"closed","open_date":"2021-08-05T23:37:59Z","update_date":"2021-08-06T08:48:51Z","discussion":[{"author":"gebner","date":"2021-08-06T07:58:48Z","comment":"I'm positively surprised that you're also trying to port meta code.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-08-06T08:48:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3260175099)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3260175213)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3260175183)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3260175138)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3260175121)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3260175040)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3260175247)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"bf25bef13f88403bacf8e1f614af91bec421554a","message":"fix(library): backport remove export A (hiding B)","date":"2021-08-05T23:35:05Z"},{"author":"digama0","committer":"digama0","hash":"11f45b51308526d04a8096c8f797521158e1bd13","message":"not so lucky","date":"2021-08-06T00:37:41Z"},{"author":"digama0","committer":"digama0","hash":"4248cc73b629eca21a3e93b8538eeec05783c8b1","message":"fix","date":"2021-08-06T01:01:47Z"}]},{"author":"dselsam","number":596,"diff_summary":[{"file":"src/library/tlean_exporter.cpp","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-08-04T02:25:54Z","update_date":"2021-08-04T09:11:41Z","discussion":[{"author":"gebner","date":"2021-08-04T07:54:28Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-04T09:11:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3239116542)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3239116443)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3239116377)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3239116309)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3239116239)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3239115953)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3239116118)"}],"review_discussion":[],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"e7bd331b8aca2fc17ec545835d0e22bd3d2a016b","message":"feat: export self_opt flag in tlean files","date":"2021-08-04T02:14:28Z"}]},{"author":"dselsam","number":595,"diff_summary":[{"file":"src/kernel/expr.h","status":"M","additions":37,"deletions":3},{"file":"src/library/constructions/projection.cpp","status":"M","additions":37,"deletions":3},{"file":"src/library/tlean_exporter.cpp","status":"M","additions":37,"deletions":3},{"file":"src/library/tlean_exporter.h","status":"M","additions":37,"deletions":3},{"file":"src/library/unfold_macros.h","status":"M","additions":37,"deletions":3}],"state":"closed","open_date":"2021-08-04T02:25:44Z","update_date":"2021-08-04T09:58:17Z","discussion":[{"author":"gebner","date":"2021-08-04T07:54:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-04T09:58:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3239797074)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3239797462)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3239797438)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3239797372)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3239797341)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3239797170)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3239797520)"}],"review_discussion":[],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"e9df83ee32196d1861dd10ebd4d52e9a45ed68ec","message":"feat: let macros textualize in tleans rather than unfold","date":"2021-08-04T02:24:17Z"}]},{"author":"dselsam","number":594,"diff_summary":[{"file":"src/kernel/inductive/inductive.cpp","status":"M","additions":21,"deletions":20},{"file":"src/library/constructions/projection.cpp","status":"M","additions":21,"deletions":20},{"file":"tests/lean/class_instance_param.lean.expected.out","status":"M","additions":21,"deletions":20},{"file":"tests/lean/eta_tac.lean.expected.out","status":"M","additions":21,"deletions":20},{"file":"tests/lean/extends_priority.lean.expected.out","status":"M","additions":21,"deletions":20},{"file":"tests/lean/interactive/complete.lean.expected.out","status":"M","additions":21,"deletions":20},{"file":"tests/lean/interactive/complete_trailing_period.lean.expected.out","status":"M","additions":21,"deletions":20},{"file":"tests/lean/interactive/info.lean.expected.out","status":"M","additions":21,"deletions":20},{"file":"tests/lean/out_param_proj.lean.expected.out","status":"M","additions":21,"deletions":20},{"file":"tests/lean/pp_zero_bug.lean.expected.out","status":"M","additions":21,"deletions":20},{"file":"tests/lean/struct_class.lean.expected.out","status":"M","additions":21,"deletions":20},{"file":"tests/lean/vm_override.lean.expected.out","status":"M","additions":21,"deletions":20}],"state":"closed","open_date":"2021-08-04T02:25:36Z","update_date":"2021-08-04T09:58:19Z","discussion":[{"author":"gebner","date":"2021-08-04T07:55:08Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-04T09:58:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3239797074)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3239797462)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3239797438)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3239797372)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3239797341)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3239797170)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3239797520)"}],"review_discussion":[],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"3a2547fe949e2a877934734f7d8aa6edb97fc2ad","message":"backport: use names 'self' and 'motive'","date":"2021-08-04T02:22:03Z"}]},{"author":"ericrbg","number":593,"diff_summary":[{"file":"doc/make/index.md","status":"M","additions":13,"deletions":8},{"file":"doc/make/msys2.md","status":"M","additions":13,"deletions":8}],"state":"closed","open_date":"2021-07-28T15:48:25Z","update_date":"2021-07-31T14:18:31Z","discussion":[{"author":"gebner","date":"2021-07-31T13:25:26Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-07-31T14:18:30Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3209178567)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3209178659)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3209178635)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3209178595)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3209178589)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3209178616)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3209178677)"}],"review_discussion":[],"tags":[],"commits":[{"author":"ericrbg","committer":"ericrbg","hash":"5b5333c6d9ee0b014b359f91d224067f2d5591ed","message":"fixup Windows build instructions","date":"2021-07-28T15:36:03Z"},{"author":"ericrbg","committer":"ericrbg","hash":"c50d6cc114f11addde90fdadc5ad0d0a74e09dab","message":"some more general documentation","date":"2021-07-28T15:44:35Z"},{"author":"ericrbg","committer":"ericrbg","hash":"5005a7e1dc895ee12e21ab10ee07cfe4125207d6","message":"brainfart","date":"2021-07-28T15:49:16Z"}]},{"author":"dselsam","number":592,"diff_summary":[{"file":"src/kernel/expr.h","status":"M","additions":59,"deletions":24},{"file":"src/kernel/inductive/inductive.cpp","status":"M","additions":59,"deletions":24},{"file":"src/library/constructions/projection.cpp","status":"M","additions":59,"deletions":24},{"file":"src/library/tlean_exporter.cpp","status":"M","additions":59,"deletions":24},{"file":"src/library/tlean_exporter.h","status":"M","additions":59,"deletions":24},{"file":"src/library/unfold_macros.h","status":"M","additions":59,"deletions":24},{"file":"tests/lean/class_instance_param.lean.expected.out","status":"M","additions":59,"deletions":24},{"file":"tests/lean/eta_tac.lean.expected.out","status":"M","additions":59,"deletions":24},{"file":"tests/lean/extends_priority.lean.expected.out","status":"M","additions":59,"deletions":24},{"file":"tests/lean/interactive/complete.lean.expected.out","status":"M","additions":59,"deletions":24},{"file":"tests/lean/interactive/complete_trailing_period.lean.expected.out","status":"M","additions":59,"deletions":24},{"file":"tests/lean/interactive/info.lean.expected.out","status":"M","additions":59,"deletions":24},{"file":"tests/lean/out_param_proj.lean.expected.out","status":"M","additions":59,"deletions":24},{"file":"tests/lean/pp_zero_bug.lean.expected.out","status":"M","additions":59,"deletions":24},{"file":"tests/lean/struct_class.lean.expected.out","status":"M","additions":59,"deletions":24},{"file":"tests/lean/vm_override.lean.expected.out","status":"M","additions":59,"deletions":24}],"state":"closed","open_date":"2021-07-23T00:13:55Z","update_date":"2021-08-04T02:26:10Z","discussion":[{"author":"gebner","date":"2021-07-31T13:24:32Z","comment":"LGTM.  Could you please split this PR into one per feature (we squash PRs and the PR title becomes the commit message)?"},{"author":"dselsam","date":"2021-08-04T02:26:10Z","comment":"Split into multiple PRs."}],"review_discussion":[],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"c0fbd9e57367a50a1f74021fdaf4628d6f64a0f0","message":"backport: self and motive","date":"2021-07-16T00:38:00Z"},{"author":"dselsam","committer":"dselsam","hash":"a1953c7461a0c6dfc37940f881d09a8f5e3be648","message":"backport: tlean export self_opt","date":"2021-07-16T00:38:04Z"},{"author":"dselsam","committer":"dselsam","hash":"a662edcdf6e288338c9f89f3d83bc11f87a1608f","message":"tlean: do not unfold projection macros","date":"2021-07-23T02:06:23Z"},{"author":"dselsam","committer":"dselsam","hash":"3b2f6b244e0e9736baaf22a0da4afa64381d8bd4","message":"chore: fix tests","date":"2021-07-23T02:06:39Z"},{"author":"dselsam","committer":"dselsam","hash":"78fd67f8188ac82dae84a601e8e100b9321e1425","message":"fix: explicit macro can_textualize method","date":"2021-07-31T13:16:03Z"},{"author":"dselsam","committer":"dselsam","hash":"a8a8d62bed0841fbe089acf0ed11f5b7ad9aabeb","message":"chore: better error message","date":"2021-07-31T13:16:10Z"}]},{"author":"ericrbg","number":591,"diff_summary":[{"file":"src/frontends/lean/decl_util.cpp","status":"M","additions":8,"deletions":1}],"state":"closed","open_date":"2021-07-18T22:04:43Z","update_date":"2021-07-28T15:02:43Z","discussion":[],"review_discussion":[{"author":"eric-wieser","file":"src/frontends/lean/decl_util.cpp","date":"2021-07-18T22:11:06Z","comment":"I think we can get `Type` working too:\r\n```suggestion\r\n        level u = sort_level(arg_head);\r\n        if (u == mk_level_zero()) {\r\n            arg_name = \"Prop\";\r\n        } else if (dec_level(u)) {\r\n            arg_name = \"Type\";\r\n        } else {\r\n            arg_name = \"sort\";\r\n        }\r\n```\r\nCan you add a test lean file that does something like:\r\n```lean\r\nclass my_class (α : Sort*)\r\n\r\ninstance : my_class Prop := ⟨⟩\r\nexample := Prop.my_class\r\n\r\ninstance : my_class (Type*) := ⟨⟩\r\nexample := Type.my_class\r\n\r\ninstance : my_class (Sort*) := ⟨⟩\r\nexample := sort.my_class\r\n```"},{"author":"eric-wieser","file":"src/frontends/lean/decl_util.cpp","date":"2021-07-18T22:13:50Z","comment":"Or actually, just add to the existing tests here: https://github.com/leanprover-community/lean/blob/405273c925b7a088f09f78d640f5798a30f1f163/tests/lean/run/instance_naming.lean"},{"author":"ericrbg","file":"src/frontends/lean/decl_util.cpp","date":"2021-07-18T22:21:11Z","comment":"I'm not sure this will work; if you look at the only instance I could find of a `Type*/Type u` instance in `mathlib` ([here](https://github.com/leanprover-community/mathlib/blob/c2d042c6c21576685486c09827f6a7a66bd59a83/src/category_theory/preadditive/projective.lean#L99)) and try mess with it a little, you'll see the instance ends up being called `category_theory.enough_projectives`, instead of `sort.enough_projectives`."},{"author":"ericrbg","file":"src/frontends/lean/decl_util.cpp","date":"2021-07-18T22:21:28Z","comment":"(Also, your code uses a single `=` in L137)"},{"author":"ericrbg","file":"src/frontends/lean/decl_util.cpp","date":"2021-07-18T22:23:35Z","comment":"I'll look into this a little bit tomorrow but don't currently understand the codebase enough to untangle why this doesn't work"},{"author":"eric-wieser","file":"src/frontends/lean/decl_util.cpp","date":"2021-07-18T22:25:36Z","comment":"> (Also, your code uses a single = in L137)\r\n\r\nThat's deliberate :) (edit: but `u1` was unecessary)"},{"author":"ericrbg","file":"src/frontends/lean/decl_util.cpp","date":"2021-07-18T22:28:13Z","comment":"Ohhh, I see! Should be `arg_head` anyways though"},{"author":"eric-wieser","file":"src/frontends/lean/decl_util.cpp","date":"2021-07-18T22:31:32Z","comment":"Edited"}],"tags":[],"commits":[{"author":"ericrbg","committer":"ericrbg","hash":"55b23d58f1b998ef2797c93162bae96f6fdf55ea","message":"chore(frontends/lean/decl_util): Prop instances pretty-printing","date":"2021-07-18T22:02:52Z"},{"author":"ericrbg","committer":"web-flow","hash":"6deb6a1893fbc0c08070c3068683423492c83c25","message":"use Eric's suggestion\n\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>","date":"2021-07-19T10:56:07Z"}]},{"author":"Nicknamen","number":590,"diff_summary":[{"file":"library/init/coe.lean","status":"M","additions":46,"deletions":42}],"state":"closed","open_date":"2021-07-08T17:37:09Z","update_date":"2021-07-31T15:04:05Z","discussion":[{"author":"gebner","date":"2021-07-31T13:27:25Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-07-31T15:04:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3209356771)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3209356818)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3209356808)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3209356859)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3209356852)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3209356838)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3209356871)"}],"review_discussion":[{"author":"eric-wieser","file":"library/init/coe.lean","date":"2021-07-08T17:51:37Z","comment":"```suggestion\r\ninstance lift_pi_range {α : Sort u} {A : α → Sort ua} {B : α → Sort ub} [Π i, has_lift_t (A i) (B i)] : has_lift (Π i, A i) (Π i, B i) :=\r\n⟨λ f i, ↑(f i)⟩\r\n```\r\nTo match the othera"},{"author":"bryangingechen","file":"library/init/coe.lean","date":"2021-07-08T18:04:41Z","comment":"I think the `prelude` and `import` lines need to be moved above this module docstring."},{"author":"eric-wieser","file":"library/init/coe.lean","date":"2021-07-10T15:35:39Z","comment":"At risk of creeping the scope here:\r\n```suggestion\r\nOnly instances of `has_coe` type class are considered in the process.\r\n```\r\nAnd similarly for the other names in this comment."},{"author":"bryangingechen","file":"library/init/coe.lean","date":"2021-07-10T15:46:59Z","comment":"[Mathlib style](https://leanprover-community.github.io/contribute/doc.html#sectioning-comments) is to uses 3rd level headings for these:\r\n```suggestion\r\n/-! ### User level coercion operators -/\r\n```"},{"author":"bryangingechen","file":"library/init/coe.lean","date":"2021-07-10T15:47:14Z","comment":"`notation` declarations don't show up in the online docs, so it might be good to add a Notation section to the module doc too.\r\n```suggestion\r\n/-! ### Notation -/\r\n```"},{"author":"bryangingechen","file":"library/init/coe.lean","date":"2021-07-10T15:49:59Z","comment":"```suggestion\r\n/-! ### Transitive closure for `has_lift`, `has_coe`, `has_coe_to_fun` -/\r\n```"},{"author":"bryangingechen","file":"library/init/coe.lean","date":"2021-07-10T15:50:08Z","comment":"```suggestion\r\n/-! ### Basic coercions -/\r\n```"},{"author":"bryangingechen","file":"library/init/coe.lean","date":"2021-07-10T15:50:14Z","comment":"```suggestion\r\n/-! ### Basic lifts -/\r\n```"}],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"Nicknamen","committer":"Nicknamen","hash":"90038710a38b0bf9824d5b9e0f91a5eece0a1b9f","message":"Added the instance","date":"2021-07-08T17:35:21Z"},{"author":"Nicknamen","committer":"Nicknamen","hash":"e5dd39a2056b96c08ee50da80dab53fbe0769b50","message":"Universes","date":"2021-07-08T17:50:19Z"},{"author":"Nicknamen","committer":"web-flow","hash":"901c241d50561f86a0e5e50a1f180321d67d63dd","message":"Eri\n\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>","date":"2021-07-08T17:54:19Z"},{"author":"Nicknamen","committer":"Nicknamen","hash":"b457ed0630b9b7273a6472a2bee88a25541fcf37","message":"Fix","date":"2021-07-09T10:47:46Z"},{"author":"Nicknamen","committer":"web-flow","hash":"946a442f33f5147f6ea9d7f7d8ba7039444ad8c2","message":"Style\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2021-07-12T10:03:15Z"},{"author":"Nicknamen","committer":"web-flow","hash":"12c9123740335d6986afbe850ad3f5c785fdd78b","message":"Adding backticks","date":"2021-07-13T10:28:42Z"}]},{"author":"fpvandoorn","number":589,"diff_summary":[{"file":"library/data/rbtree/basic.lean","status":"M","additions":111,"deletions":107},{"file":"library/init/data/fin/basic.lean","status":"M","additions":111,"deletions":107},{"file":"library/init/data/int/basic.lean","status":"M","additions":111,"deletions":107},{"file":"library/init/data/list/basic.lean","status":"M","additions":111,"deletions":107},{"file":"library/init/data/nat/basic.lean","status":"M","additions":111,"deletions":107},{"file":"library/init/data/nat/bitwise.lean","status":"M","additions":111,"deletions":107},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":111,"deletions":107},{"file":"tests/lean/run/div_wf.lean","status":"M","additions":111,"deletions":107},{"file":"tests/lean/run/gcd.lean","status":"M","additions":111,"deletions":107},{"file":"tests/lean/run/kha_inst_bug.lean","status":"M","additions":111,"deletions":107},{"file":"tests/lean/run/sufficies.lean","status":"M","additions":111,"deletions":107}],"state":"closed","open_date":"2021-06-30T18:38:32Z","update_date":"2021-06-30T20:18:11Z","discussion":[{"author":"gebner","date":"2021-06-30T19:39:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-30T20:18:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2955906931)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2955906818)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2955906788)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2955906614)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2955906579)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2955906704)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2955906425)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"808c75304286ff301f3d1ca2abcc7e6e6a19fb65","message":"fix(init/data/nat): protect more lemmas","date":"2021-06-30T12:13:04Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"0668e33c74d5fe88b8916b8ab6c687d101aaf469","message":"fixes","date":"2021-06-30T14:04:21Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"9a715b389dc32cf471eb13a9144d023451d722bf","message":"fix tests","date":"2021-06-30T14:53:00Z"}]},{"author":"gebner","number":588,"diff_summary":[{"file":"README.md","status":"M","additions":19,"deletions":2},{"file":"doc/changes.md","status":"M","additions":19,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":19,"deletions":2}],"state":"closed","open_date":"2021-06-29T12:57:05Z","update_date":"2021-06-29T14:42:31Z","discussion":[{"author":"gebner","date":"2021-06-29T13:52:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-29T14:42:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2942849434)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2942854036)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2942853990)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2942849749)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2942853688)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2942849799)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2942854118)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"d66d3f32a1d8ae11850567db0ba915421cb443d6","message":"chore(*): release 3.31.0","date":"2021-06-29T12:55:54Z"}]},{"author":"gebner","number":587,"diff_summary":[{"file":"src/library/tactic/simp_lemmas.cpp","status":"A","additions":33,"deletions":1},{"file":"tests/lean/run/585c.lean","status":"A","additions":33,"deletions":1}],"state":"closed","open_date":"2021-06-29T09:53:41Z","update_date":"2021-06-29T10:58:54Z","discussion":[{"author":"gebner","date":"2021-06-29T10:05:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-29T10:58:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2940944355)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2940944566)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2940944528)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2940944655)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2940944616)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2940944449)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2940944726)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"047969789594273ec58c9d45d8cef712cd4b6808","message":"fix(library/tactic/simp_lemmas): fix simp ← with custom relation","date":"2021-06-29T09:53:06Z"}]},{"author":"bentoner","number":586,"diff_summary":[{"file":"leanpkg/leanpkg/manifest.lean","status":"M","additions":9,"deletions":1},{"file":"leanpkg/leanpkg/toml.lean","status":"M","additions":9,"deletions":1}],"state":"closed","open_date":"2021-06-27T12:43:21Z","update_date":"2021-06-28T09:00:35Z","discussion":[{"author":"bentoner","date":"2021-06-28T07:30:44Z","comment":"Hi Gabriel, this isn't ready to be merged.\r\n\r\nPer the chat in Zulip with Patrick, which I'll repeat here, we need to decide how to proceed. I see at least 3 options:\r\n1. Proceed as per this pull request. This results in minimal changes to `leanpkg`, but it is not so nice because now `leanpkg` has to know about the `olean_url` field even though it doesn't do anything with it.\r\n2. Extend `leanpkg` to preserve but ignore fields in `leanpkg.toml` that it doesn't understand. This seems nicer but we lose the benefits of having a schema.\r\n3. Not make any changes to `leanpkg`. We can tell users to avoid it and use `leanproject` instead.\r\n\r\nI'm fine with any of the above (or whatever else you/Patrick prefer).\r\n\r\nSecondly, I realize my implementation of option 1 is incomplete, as described on zulip, which is the other reason why this isn't ready to be merged. I'll fix this later tonight so there's something concrete to decide on."},{"author":"gebner","date":"2021-06-28T07:51:08Z","comment":"I think you should be aware that Lean 3 (and leanpkg and leanproject) is pretty much on life support mode now.  I hope that a year from now we'll have mostly moved over to Lean 4, and I'd be surprised if anybody uses Lean 3 two years from now.  Keep that in mind when putting a lot of effort into Lean 3 tooling.\r\n\r\nI'm happy with all of the options you've listed.  I think the cleanest approach would be to just reimplement the remaining two(?) commands in leanproject and forget about leanpkg.\r\n\r\n> This seems nicer but we lose the benefits of having a schema.\r\n\r\nThe benefits of being able to store extra information in the leanpkg.toml file outweigh the untidyness of lacking a schema in my opinion."},{"author":"bentoner","date":"2021-06-28T09:00:35Z","comment":"Hi Gabriel.\r\n\r\n> I think the cleanest approach would be to just reimplement the remaining two(?) commands in leanproject and forget about leanpkg.\r\n\r\nOkay, let's do that then -- I'll close this. Thanks!"}],"review_discussion":[],"tags":[],"commits":[{"author":"bentoner","committer":"bentoner","hash":"5555c3cee48099e51dbb815f2bcf79aaf6cff097","message":"feat(leanpkg): Teach leanpkg to preserve but otherwise ignore new 'olean_url' field","date":"2021-06-27T12:32:29Z"}]},{"author":"gebner","number":583,"diff_summary":[{"file":"src/library/trace.cpp","status":"M","additions":1,"deletions":37},{"file":"src/library/trace.h","status":"M","additions":1,"deletions":37}],"state":"closed","open_date":"2021-06-11T12:44:33Z","update_date":"2021-06-11T13:28:03Z","discussion":[{"author":"gebner","date":"2021-06-11T12:45:17Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-11T13:28:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2802991005)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2802990932)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2802990901)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2802991112)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2802991083)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2802991177)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2802991284)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"2e71d8e36f2c5d2955eb0b9f9519aa294602745c","message":"fix(library/trace): make thread-safe","date":"2021-06-11T12:44:05Z"}]},{"author":"fpvandoorn","number":582,"diff_summary":[{"file":"library/init/logic.lean","status":"M","additions":2,"deletions":2}],"state":"closed","open_date":"2021-06-01T17:40:58Z","update_date":"2021-06-01T19:37:20Z","discussion":[{"author":"gebner","date":"2021-06-01T18:09:53Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-01T19:37:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2721362625)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2721362791)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2721362767)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2721362537)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2721362519)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2721362693)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2721362863)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"f3ffab03662f920c1fefb1223bd82e5b44b4a9b3","message":"fix(init/logic): make exists.intro a def again","date":"2021-06-01T17:39:24Z"}]},{"author":"semorrison","number":581,"diff_summary":[{"file":"library/data/lazy_list.lean","status":"D","additions":0,"deletions":78}],"state":"closed","open_date":"2021-06-01T01:00:22Z","update_date":"2021-06-29T13:37:09Z","discussion":[{"author":"gebner","date":"2021-06-29T12:51:15Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-29T13:37:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2942278631)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2942278823)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2942278792)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2942278948)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2942278910)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2942278702)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2942278994)"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"e715edf769493545bbbdf653aed640eabbec8427","message":"chore(library/data): delete lazy_list; it can be in mathlib instead","date":"2021-06-01T00:59:48Z"}]},{"author":"gebner","number":580,"diff_summary":[{"file":"src/library/tactic/cases_tactic.cpp","status":"A","additions":20,"deletions":2},{"file":"tests/lean/run/578c.lean","status":"A","additions":20,"deletions":2}],"state":"closed","open_date":"2021-05-27T14:24:19Z","update_date":"2021-05-27T15:34:34Z","discussion":[{"author":"gebner","date":"2021-05-27T14:42:19Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-05-27T15:34:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2686029831)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2686029731)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2686029702)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2686029340)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2686029305)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2686029505)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2686029591)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f81a01fec55e902d00f1eeebba52f72ae7465c42","message":"fix(library/tactic/cases_tactic): fix segfault with equalities of subtypes","date":"2021-05-27T14:24:14Z"}]},{"author":"gebner","number":579,"diff_summary":[{"file":"src/library/tactic/smt/congruence_closure.cpp","status":"A","additions":19,"deletions":1},{"file":"tests/lean/run/575c.lean","status":"A","additions":19,"deletions":1}],"state":"closed","open_date":"2021-05-27T13:47:45Z","update_date":"2021-05-27T16:41:34Z","discussion":[{"author":"gebner","date":"2021-05-27T15:38:10Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-05-27T16:41:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2686541028)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2686541571)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2686541525)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2686541316)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2686541260)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2686541427)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2686541137)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"528b0bb1aa83969d87cee9e8fd463002edf05747","message":"fix(library/tactic/smt/congruence_closure): partly disable broken support for symmetric relations","date":"2021-05-27T13:46:29Z"},{"author":"gebner","committer":"gebner","hash":"feeaa7fb106fd01536949b92c8b1a75db66201a3","message":"Add test.","date":"2021-05-27T13:47:07Z"},{"author":"gebner","committer":"gebner","hash":"50741050de2500ba9ad89f512da37661d5cb4b3d","message":"Fix tests.","date":"2021-05-27T14:29:24Z"}]},{"author":"eric-wieser","number":577,"diff_summary":[{"file":"src/library/tactic/apply_tactic.cpp","status":"A","additions":15,"deletions":1},{"file":"tests/lean/rewrite.lean","status":"A","additions":15,"deletions":1},{"file":"tests/lean/rewrite.lean.expected.out","status":"A","additions":15,"deletions":1}],"state":"closed","open_date":"2021-05-25T09:59:44Z","update_date":"2021-05-25T12:21:43Z","discussion":[{"author":"gebner","date":"2021-05-25T10:53:46Z","comment":"Seems like a clear improvement.\r\n\r\nbors d+"},{"author":"bors[bot]","date":"2021-05-25T10:53:47Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2021-05-25T10:58:35Z","comment":"Is f72a977 better or worse than the commit before it? I get the feeling they cause the pretty-printer to behave in different ways, but don't know which way is the better way"},{"author":"gebner","date":"2021-05-25T11:07:39Z","comment":"I don't have a preference.  Both look good to me."},{"author":"eric-wieser","date":"2021-05-25T11:08:15Z","comment":"I'll go for the shorter one then. Thanks for the quick review!"},{"author":"eric-wieser","date":"2021-05-25T11:32:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-05-25T12:21:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2664751936)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2664751842)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2664751811)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2664752069)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2664752026)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2664751711)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2664752145)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"b4dcfe14717fde7a7842682b150182c88875a952","message":"feat(library/tactic/apply_tactic): produce a better error for missing typeclasses","date":"2021-05-25T09:59:06Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"2f2ff3f17490b65a2fa5d77b2e9b11d15aeee63d","message":"fix","date":"2021-05-25T10:42:48Z"},{"author":"eric-wieser","committer":"eric-wieser","hash":"f72a977a789d5da16fd8ef97b758eea130aff1d0","message":"Use the existing API","date":"2021-05-25T10:44:46Z"}]},{"author":"digama0","number":574,"diff_summary":[{"file":"src/checker/text_import.cpp","status":"M","additions":6,"deletions":6},{"file":"src/kernel/type_checker.cpp","status":"M","additions":6,"deletions":6}],"state":"closed","open_date":"2021-05-09T22:58:42Z","update_date":"2021-05-10T07:24:16Z","discussion":[{"author":"gebner","date":"2021-05-10T06:30:22Z","comment":"Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-05-10T07:24:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2542856064)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2542856318)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2542856298)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2542856166)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2542856133)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2542856229)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2542856374)"}],"review_discussion":[{"author":"dwrensha","file":"src/checker/text_import.cpp","date":"2021-05-10T01:43:04Z","comment":"On MacOS, this line (`in >> std::ws;`) is causing `in.fail()` to flip to `true`."},{"author":"digama0","file":"src/checker/text_import.cpp","date":"2021-05-10T01:46:48Z","comment":"is `in.eof()` true before the call to `std::ws`?"},{"author":"dwrensha","file":"src/checker/text_import.cpp","date":"2021-05-10T01:47:23Z","comment":"yes"}],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"12a6b889d179ec600d54e307178c8e79ba45e85a","message":"fix(checker/text_import): make leanchecker agree with external tc\n\nThe change to `text_import.cpp` checks the line for parse errors after\nparsing, so we don't accidentally let malformed lines pass.\n\nThe change to the kernel removes the check for anonymous names in\nlambda/let/pi. Since these are used only for pretty printing it should\nnot affect soundness. An alternative approach would be to automatically\ngenerate a fresh name when the given name is anonymous.","date":"2021-05-09T22:58:07Z"},{"author":"digama0","committer":"digama0","hash":"9b2e5bc0534b69d0dca71dc419b55e4d66b6414d","message":"fix","date":"2021-05-10T05:03:07Z"}]},{"author":"hmonroe","number":573,"diff_summary":[{"file":"library/init/function.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-05-06T16:10:41Z","update_date":"2021-05-06T17:32:41Z","discussion":[{"author":"bryangingechen","date":"2021-05-06T16:12:08Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-05-06T17:32:40Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2519985789)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2519985922)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2519985879)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2519985668)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2519985628)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2519985497)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2519986037)"}],"review_discussion":[],"tags":[],"commits":[{"author":"hmonroe","committer":"web-flow","hash":"ef67b4cba7424b609af10b03a6a159b5de8f5af3","message":"style(library/init/function): fix spelling error (is calles surjective)\n\nFix spelling error \"is calles surjective\" -> \"is called surjective\"","date":"2021-05-06T16:10:18Z"}]},{"author":"gebner","number":572,"diff_summary":[{"file":"src/frontends/lean/module_parser.cpp","status":"M","additions":18,"deletions":12},{"file":"src/frontends/lean/parser.cpp","status":"M","additions":18,"deletions":12},{"file":"src/frontends/lean/parser.h","status":"M","additions":18,"deletions":12}],"state":"closed","open_date":"2021-05-06T12:42:00Z","update_date":"2021-05-06T14:03:15Z","discussion":[{"author":"gebner","date":"2021-05-06T12:43:54Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-05-06T14:03:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2518248289)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2518248511)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2518248487)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2518248414)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2518248372)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2518248198)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2518248604)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"0f0612bf81c6c749554565f0fdba884b507d7631","message":"refactor(frontends/lean/module_parser): extract from_snapshot function","date":"2021-05-06T12:37:10Z"}]},{"author":"gebner","number":571,"diff_summary":[{"file":"README.md","status":"M","additions":16,"deletions":2},{"file":"doc/changes.md","status":"M","additions":16,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":16,"deletions":2}],"state":"closed","open_date":"2021-04-30T13:43:18Z","update_date":"2021-04-30T14:42:28Z","discussion":[{"author":"gebner","date":"2021-04-30T13:51:52Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-04-30T14:42:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2476188664)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2476188921)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2476188888)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2476189049)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2476189023)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2476184722)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2476188773)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"d52872eda04cb6e1f1ed9df90bc7e9e243786e73","message":"chore(*): release 3.30.0c","date":"2021-04-30T13:12:39Z"}]},{"author":"gebner","number":570,"diff_summary":[{"file":"library/init/data/fin/ops.lean","status":"A","additions":58,"deletions":20},{"file":"library/init/data/nat/div.lean","status":"A","additions":58,"deletions":20},{"file":"library/init/data/nat/lemmas.lean","status":"A","additions":58,"deletions":20},{"file":"tests/lean/run/kernel_fin_rfl.lean","status":"A","additions":58,"deletions":20}],"state":"closed","open_date":"2021-04-30T12:31:19Z","update_date":"2021-04-30T13:37:27Z","discussion":[{"author":"gebner","date":"2021-04-30T12:44:35Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-30T13:37:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2475690414)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2475690283)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2475690264)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2475690521)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2475690494)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2475690162)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2475690569)"}],"review_discussion":[{"author":"digama0","file":"library/init/data/nat/lemmas.lean","date":"2021-04-30T13:18:15Z","comment":"no private please; this is a legitimately useful lemma"},{"author":"gebner","file":"library/init/data/nat/lemmas.lean","date":"2021-04-30T14:39:54Z","comment":"I'm happy to make it protected instead, but I vehemently disagree with the claim that it's useful.  You're not supposed to use `nat.mod_core`, ever."},{"author":"fpvandoorn","file":"library/init/data/nat/lemmas.lean","date":"2021-04-30T16:05:14Z","comment":"I'd also favor the switch to `protected`, even if the lemma should not be used by a user. \r\n`private` doesn't interact well with things like jump-to-definition and some metaprograms"}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"21fb6df7fc748063d215c3fca37cb2dbfcce4804","message":"refactor(library/init/data/nat/div): avoid wf recursion","date":"2021-04-30T12:22:36Z"},{"author":"gebner","committer":"gebner","hash":"97e1e79c5b3c8f5beaadea9022012c2579c41121","message":"add test","date":"2021-04-30T12:28:14Z"}]},{"author":"gebner","number":569,"diff_summary":[{"file":"src/library/tactic/induction_tactic.cpp","status":"A","additions":12,"deletions":2},{"file":"tests/lean/run/custom_induction_whnf.lean","status":"A","additions":12,"deletions":2}],"state":"closed","open_date":"2021-04-30T10:08:46Z","update_date":"2021-04-30T12:24:20Z","discussion":[{"author":"gebner","date":"2021-04-30T11:05:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-04-30T12:24:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2475082961)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2475082636)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2475082610)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2475083164)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2475083109)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2475082797)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2475083293)"}],"review_discussion":[{"author":"eric-wieser","file":"src/library/tactic/induction_tactic.cpp","date":"2021-04-30T10:34:07Z","comment":"This line was the cause of the non-determinism, right?"},{"author":"gebner","file":"src/library/tactic/induction_tactic.cpp","date":"2021-04-30T10:53:47Z","comment":"Yes, this is undefined behavior."}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"aa0c7fe179a9c80c56539fc3ca5bb9aa078292e7","message":"fix(library/tactic/induction_tactic): whnf less","date":"2021-04-30T10:07:44Z"}]},{"author":"eric-wieser","number":568,"diff_summary":[{"file":"library/init/algebra/classes.lean","status":"M","additions":12,"deletions":0}],"state":"closed","open_date":"2021-04-26T12:17:40Z","update_date":"2021-04-28T10:50:47Z","discussion":[{"author":"gebner","date":"2021-04-28T09:39:23Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-28T10:50:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2456455181)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2456455467)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2456455443)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2456455372)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2456455347)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2456455541)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2456455596)"}],"review_discussion":[{"author":"eric-wieser","file":"library/init/algebra/classes.lean","date":"2021-04-26T12:18:37Z","comment":"```suggestion\r\nbeing little to index on. The Wiki page linked above describes an algebraic normalizer, but it is not\r\n```"}],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"},{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"2ac02531f73b159ee436c0f7d4826f514aaf3f5a","message":"doc(init/algebra/classes): add a brief docstring","date":"2021-04-26T12:17:30Z"},{"author":"eric-wieser","committer":"web-flow","hash":"0634a5b2b59b03e32b1b73c26adff9e08c7a20a1","message":"Apply suggestions from code review","date":"2021-04-26T12:18:41Z"}]},{"author":"bentoner","number":567,"diff_summary":[{"file":"script/compare_leanchecker_timings.py","status":"A","additions":55,"deletions":3},{"file":"src/checker/checker.cpp","status":"A","additions":55,"deletions":3},{"file":"src/checker/text_import.cpp","status":"A","additions":55,"deletions":3}],"state":"closed","open_date":"2021-04-24T18:49:19Z","update_date":"2021-04-28T09:59:20Z","discussion":[{"author":"gebner","date":"2021-04-28T09:14:32Z","comment":"Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-04-28T09:59:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2456113418)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2456113573)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2456113538)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2456113746)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2456113697)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2456113207)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2456113852)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bentoner","committer":"bentoner","hash":"cf0f958ab0a0947ecea37791242aa1b7150623dc","message":"feat(checker): add timing info to verbose output","date":"2021-04-24T18:09:45Z"},{"author":"bentoner","committer":"bentoner","hash":"b66391340ba49447155ca66c495ebe3a8b4c24cf","message":"feat(checker): add script to compare leanchecker timing output","date":"2021-04-24T21:00:52Z"},{"author":"bentoner","committer":"bentoner","hash":"69160a95d0038895778b04297084c98c1c4b4471","message":"simplify script a bit + fix edge case","date":"2021-04-24T21:35:37Z"}]},{"author":"kbuzzard","number":566,"diff_summary":[{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":12,"deletions":0}],"state":"closed","open_date":"2021-04-20T16:55:30Z","update_date":"2021-04-20T18:53:46Z","discussion":[{"author":"gebner","date":"2021-04-20T17:47:50Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-04-20T18:53:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2393281763)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2393281510)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2393281475)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2393281619)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2393281586)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2393281684)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2393281851)"}],"review_discussion":[],"tags":[],"commits":[{"author":"kbuzzard","committer":"kbuzzard","hash":"ed1788fd674bb8991acffc8fca585ec746711928","message":"doc(library/init/data/nat/lemmas.lean): add docstring for nat.find","date":"2021-04-20T16:53:20Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"ad261500aae74c98f07401bb296585e50ccbe62b","message":"fix absurdly long line (thanks emacs)","date":"2021-04-20T16:57:00Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"a1aae9015d63aecf3deb2e66bf360068ebae435f","message":"clarification","date":"2021-04-20T16:58:40Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"45baca73d0a7d076d29907d8420ecf7ee5e2938d","message":"fix typo","date":"2021-04-20T17:04:50Z"}]},{"author":"gebner","number":565,"diff_summary":[{"file":"README.md","status":"M","additions":19,"deletions":3},{"file":"doc/changes.md","status":"M","additions":19,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":19,"deletions":3}],"state":"closed","open_date":"2021-04-19T09:07:09Z","update_date":"2021-04-19T10:17:01Z","discussion":[{"author":"gebner","date":"2021-04-19T09:30:36Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-19T10:17:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2379433071)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2379432970)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2379432940)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2379433259)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2379433209)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2379431686)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2379433419)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"3976c304e8761852625889cb879dfca328407d1c","message":"chore(*): release 3.29.0c","date":"2021-04-19T09:06:43Z"}]},{"author":"gebner","number":564,"diff_summary":[{"file":"src/checker/checker.cpp","status":"M","additions":25,"deletions":11},{"file":"src/checker/text_import.cpp","status":"M","additions":25,"deletions":11},{"file":"src/checker/text_import.h","status":"M","additions":25,"deletions":11}],"state":"closed","open_date":"2021-04-16T08:39:00Z","update_date":"2021-04-16T10:20:45Z","discussion":[{"author":"gebner","date":"2021-04-16T09:34:38Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-04-16T10:20:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2361000825)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2361000907)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2361000890)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2361001046)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2361001018)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2361000959)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2361001125)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"22bf93b1018235e18845ab8dd45f028f05b118bc","message":"feat(checker): add -v flag to print declaration names","date":"2021-04-16T08:38:16Z"}]},{"author":"dselsam","number":562,"diff_summary":[{"file":"library/init/data/fin/ops.lean","status":"M","additions":18,"deletions":40},{"file":"src/library/type_context.cpp","status":"M","additions":18,"deletions":40},{"file":"src/library/type_context.h","status":"M","additions":18,"deletions":40},{"file":"tests/lean/run/1782.lean","status":"M","additions":18,"deletions":40},{"file":"tests/lean/run/fib_wrec.lean","status":"M","additions":18,"deletions":40},{"file":"tests/lean/run/unfold_lemmas.lean","status":"M","additions":18,"deletions":40}],"state":"closed","open_date":"2021-04-09T19:13:34Z","update_date":"2021-04-16T09:20:40Z","discussion":[{"author":"dselsam","date":"2021-04-09T19:15:01Z","comment":"I also fixed the definition of fibonacci numbers in one of the tests for @kbuzzard "},{"author":"gebner","date":"2021-04-16T08:26:06Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-16T09:20:40Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2360509930)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2360509819)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2360509790)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2360510052)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2360510030)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2360510107)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2360510163)"}],"review_discussion":[],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"1d8bae6903ef0962a60c337166cb039e71bfd5f4","message":"backport(type_context.cpp): wf should not compute","date":"2021-04-09T22:37:00Z"}]},{"author":"dselsam","number":561,"diff_summary":[{"file":"src/frontends/lean/structure_cmd.cpp","status":"M","additions":7,"deletions":7},{"file":"tests/lean/extends_priority.lean.expected.out","status":"M","additions":7,"deletions":7}],"state":"closed","open_date":"2021-04-09T16:22:54Z","update_date":"2021-04-09T18:29:14Z","discussion":[{"author":"gebner","date":"2021-04-09T17:33:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-09T18:29:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2308050832)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2308050563)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2308050546)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2308050775)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2308050743)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2308050682)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2308050627)"}],"review_discussion":[],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"a619cccf7b3cc792b130dbd26cb2d84b667db01f","message":"backport(structure_cmd.cpp): use name 'self'","date":"2021-04-09T16:21:17Z"}]},{"author":"digama0","number":560,"diff_summary":[{"file":"library/init/algebra/order.lean","status":"M","additions":49,"deletions":68},{"file":"library/init/data/int/basic.lean","status":"M","additions":49,"deletions":68},{"file":"library/init/data/int/order.lean","status":"M","additions":49,"deletions":68},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":49,"deletions":68}],"state":"closed","open_date":"2021-03-28T06:31:55Z","update_date":"2021-03-29T12:02:39Z","discussion":[{"author":"gebner","date":"2021-03-29T11:14:39Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-29T12:02:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2217913665)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2217913612)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2217913586)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2217913494)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2217913465)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2217913773)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2217913870)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"89eba3e1f58bfa87f07a54536834ed964344fbfd","message":"refactor(init/algebra/order): clean up choice use\n\nThe `decidable` namespace previously contained theorems about partial and\nlinear orders for theorems that were not true without AC. With the\nchange to make `linear_order` mean `decidable_linear_order`, most of\nthese lemmas are now superfluous and can live in the root namespace,\nbecause the lemmas themselves don't use AC anymore.\n\nWith this, every single lemma and definition in core is now AC-minimal:\nonly theorems that obviously require AC or LEM use AC. (Fun fact:\n`#print axioms tactic.by_cases` lists AC, because apparently constants\ninside quotations are not excluded in the implementation of\n`#print axioms`.)","date":"2021-03-28T06:31:33Z"},{"author":"digama0","committer":"digama0","hash":"2079f4230a9627b2fe6f7a8385bc04738429a364","message":"fix","date":"2021-03-28T07:30:08Z"},{"author":"digama0","committer":"digama0","hash":"ce85c34aa745132f012f81cc1b88c8951354647f","message":"some proof shortening from mathlib","date":"2021-03-28T08:06:47Z"}]},{"author":"digama0","number":558,"diff_summary":[{"file":"src/frontends/lean/print_cmd.cpp","status":"M","additions":19,"deletions":4}],"state":"closed","open_date":"2021-03-28T01:26:09Z","update_date":"2021-03-29T13:09:46Z","discussion":[{"author":"gebner","date":"2021-03-29T11:15:23Z","comment":"This is wonderful, thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-03-29T13:09:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2218217319)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2218217548)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2218217465)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2218217799)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2218217763)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2218217664)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2218217889)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"214fb4a8bf88186295db1b7ffc89a22e7eda95ed","message":"feat(print_cmd.cpp): print universe declarations\n\nThis prints the prefix `{u}` in\n```lean\ndef {u} id : Π {α : Sort u}, α → α :=\nλ {α : Sort u} (a : α), a\n```\nwhen `pp.universes` is turned on. This is much easier than hunting down\nall references to universes in the type and value of the theorem to\nfigure out how many universe arguments there are (and what order they\nare in).","date":"2021-03-28T01:25:44Z"}]},{"author":"urkud","number":557,"diff_summary":[{"file":"library/init/coe.lean","status":"A","additions":117,"deletions":107},{"file":"library/init/meta/expr.lean","status":"A","additions":117,"deletions":107},{"file":"library/init/meta/widget/basic.lean","status":"A","additions":117,"deletions":107},{"file":"library/init/meta/widget/tactic_component.lean","status":"A","additions":117,"deletions":107},{"file":"src/frontends/lean/decl_util.cpp","status":"A","additions":117,"deletions":107},{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":117,"deletions":107},{"file":"src/frontends/lean/pp.cpp","status":"A","additions":117,"deletions":107},{"file":"src/library/constants.cpp","status":"A","additions":117,"deletions":107},{"file":"src/library/constants.h","status":"A","additions":117,"deletions":107},{"file":"src/library/constants.txt","status":"A","additions":117,"deletions":107},{"file":"tests/lean/123-1.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/123-1.lean.expected.out","status":"A","additions":117,"deletions":107},{"file":"tests/lean/123-2.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/123-2.lean.expected.out","status":"A","additions":117,"deletions":107},{"file":"tests/lean/coe4.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/coe4.lean.expected.out","status":"A","additions":117,"deletions":107},{"file":"tests/lean/coe5.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/coe5.lean.expected.out","status":"A","additions":117,"deletions":107},{"file":"tests/lean/coe6.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/check_constants.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/coe_fn_mvar.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/coe_to_fn.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/coe_to_sort.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/coe_univ_bug.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/dep_coe_to_fn.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/dep_coe_to_fn2.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/dep_coe_to_fn3.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/instance_naming.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/let_coe_sort.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/pred_to_subtype_coercion.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/sebastien_coe_simp.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/simp_coe.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/u_eq_max_u_v.lean","status":"A","additions":117,"deletions":107},{"file":"tests/lean/run/yury_coe_sort_bug.lean","status":"A","additions":117,"deletions":107}],"state":"closed","open_date":"2021-03-18T15:54:27Z","update_date":"2021-10-19T22:37:09Z","discussion":[{"author":"gebner","date":"2021-03-18T16:05:05Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-18T16:20:33Z","comment":"## try\n\nBuild failed:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2141330100)"},{"author":"eric-wieser","date":"2021-03-19T13:19:23Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-19T13:26:43Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2148763579)"},{"author":"urkud","date":"2021-03-21T23:02:50Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-21T23:58:29Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2161802495)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2161802584)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2161802621)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2161802537)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2161802505)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2161802598)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2161802563)"},{"author":"urkud","date":"2021-03-25T20:36:47Z","comment":"The following example fails with the new `has_coe_to_sort`:\r\n```lean\r\nuniverse u\r\n\r\ninstance {α : Type u} : has_coe_to_sort (set α) (Type u) := ⟨λ s, {x // x ∈ s}⟩\r\n\r\nexample : ↥({0} : set ℕ) := ⟨0, rfl⟩\r\n```\r\nError: \"5:29: invalid constructor ⟨...⟩, 'has_coe_to_sort.coe' is not an inductive type\"\r\n\r\nI have no idea why this happens."},{"author":"bryangingechen","date":"2021-03-26T12:57:54Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-26T13:44:01Z","comment":"## try\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2201939466)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2201939677)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2201939495)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2201939792)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2201939645)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2201939577)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2201939402)"},{"author":"eric-wieser","date":"2021-07-06T08:12:25Z","comment":"What's the status of this PR?"},{"author":"gebner","date":"2021-10-19T16:55:40Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-19T22:37:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3944976544)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3944976504)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3944976474)\n  * Build macos Debug\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3944976412)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3944976611)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3944976659)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"urkud","committer":"urkud","hash":"3ebd4dde215d2845d5ddd94db7923199e7b1d89c","message":"`library/init/coe` compiles with the new `has_coe_to_sort`/`has_coe_to_fun`","date":"2021-03-18T15:52:21Z"},{"author":"gebner","committer":"gebner","hash":"0ed322e686de01d035caa1579132d9fe72a674ad","message":"Fix number of coercion arguments.","date":"2021-03-18T16:11:54Z"},{"author":"urkud","committer":"urkud","hash":"428317f3e13d97371514f98ecd872ad547a07720","message":"Fix library/ and some tests","date":"2021-03-18T17:56:52Z"},{"author":"gebner","committer":"gebner","hash":"b504d928aec77b9ef8715e5b788b55214171ad6f","message":"Change instance naming heuristic.","date":"2021-03-18T18:11:38Z"},{"author":"gebner","committer":"gebner","hash":"f6946556cd9ad3d1bf1434f4047cfeed6891de9e","message":"Fix coe pp.","date":"2021-03-18T18:17:35Z"},{"author":"gebner","committer":"gebner","hash":"44c0d37e636ce946660456bb6b541966c1f3aae7","message":"Change instance heuristic some more.","date":"2021-03-18T18:25:03Z"},{"author":"gebner","committer":"gebner","hash":"6b51a52bb01ffb0cd45b934dfa87a363eb3e341e","message":"Fix some tests.","date":"2021-03-18T18:25:58Z"},{"author":"gebner","committer":"gebner","hash":"c711136f8c02febfb8384b81f6129d9997cc4d10","message":"Revert \"Change instance heuristic some more.\"\n\nThis reverts commit 44c0d37e636ce946660456bb6b541966c1f3aae7.","date":"2021-03-18T18:30:52Z"},{"author":"gebner","committer":"gebner","hash":"744be0086ae8f9b9b9f5c27d927c711df5ed46fc","message":"Fix some tests.","date":"2021-03-18T18:34:34Z"},{"author":"gebner","committer":"gebner","hash":"b8b24262d9a2db483f441f33cc75616ccd9e0473","message":"Fix one more test.","date":"2021-03-18T18:35:09Z"},{"author":"gebner","committer":"gebner","hash":"65429846a070ed71590dd79b8df49e4937f89dea","message":"Tweak instance naming.","date":"2021-03-19T13:59:58Z"},{"author":"gebner","committer":"gebner","hash":"d2f2df87c1f48deddd3467adc743194f5207d0e5","message":"Fix tests.","date":"2021-03-19T14:04:57Z"},{"author":"gebner","committer":"gebner","hash":"da53b38807eb1217e0b7b2f559834b8adc7d045b","message":"Remove unnecessary instance names.","date":"2021-03-19T14:10:08Z"},{"author":"gebner","committer":"gebner","hash":"deb09469aebac1d79beb05d75df54586b24fa6f8","message":"Add todo.","date":"2021-03-19T18:05:08Z"},{"author":"gebner","committer":"gebner","hash":"f116eaf542a1c009fec4d581f27efbef1a64023e","message":"Synthesize tc insts before anon cstrs.","date":"2021-03-26T08:58:15Z"},{"author":"urkud","committer":"urkud","hash":"e4342ccb71a49e7657a5820e129e09b03727b920","message":"Merge branch 'master' into coe-fn-backport","date":"2021-09-11T23:19:21Z"},{"author":"urkud","committer":"urkud","hash":"dcc44269840b19af2a5dab1312f43b7b65f4b5a7","message":"Fix conflict with mathlib","date":"2021-09-12T02:44:19Z"},{"author":"urkud","committer":"urkud","hash":"d09b2a8856abd615d83b89b58d80cf7e745227f6","message":"Merge branch 'LO-fix' into coe-fn-backport","date":"2021-09-12T02:50:45Z"},{"author":"urkud","committer":"urkud","hash":"51a0a5525c7f7356f077d1e1ac3bbbafc35eaf49","message":"Merge branch 'master' into coe-fn-backport","date":"2021-09-17T01:13:22Z"}]},{"author":"gebner","number":556,"diff_summary":[{"file":"library/data/buffer.lean","status":"M","additions":18,"deletions":4},{"file":"library/init/data/fin/basic.lean","status":"M","additions":18,"deletions":4},{"file":"library/init/meta/interactive.lean","status":"M","additions":18,"deletions":4},{"file":"library/init/meta/tactic.lean","status":"M","additions":18,"deletions":4},{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":18,"deletions":4},{"file":"src/library/type_context.cpp","status":"M","additions":18,"deletions":4},{"file":"tests/lean/run/mk_byte.lean","status":"M","additions":18,"deletions":4}],"state":"open","open_date":"2021-03-17T17:46:44Z","update_date":"2022-06-09T08:34:10Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"37a8b750b60fcda9cd11b0a2a183d7f0d3ecec5c","message":"fix(library/type_context): do not enfore semireducible transparency in implicit arguments","date":"2021-03-17T17:44:19Z"},{"author":"gebner","committer":"gebner","hash":"4838004536589e8687fa7569af181017ff191d9f","message":"Rename.","date":"2021-03-17T18:26:05Z"}]},{"author":"gebner","number":555,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"A","additions":32,"deletions":5},{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":32,"deletions":5},{"file":"tests/lean/run/let_coe_sort.lean","status":"A","additions":32,"deletions":5}],"state":"closed","open_date":"2021-03-16T11:22:12Z","update_date":"2021-03-16T17:28:21Z","discussion":[{"author":"gebner","date":"2021-03-16T16:46:35Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-16T17:28:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2123582538)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2123582314)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2123582292)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2123582445)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2123582420)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2123582108)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2123582680)"}],"review_discussion":[{"author":"eric-wieser","file":"tests/lean/run/let_coe_sort.lean","date":"2021-03-16T11:33:17Z","comment":"github seems to suggest\r\n```suggestion\r\ntrivial\r\n\r\n```"},{"author":"gebner","file":"tests/lean/run/let_coe_sort.lean","date":"2021-03-16T11:34:47Z","comment":"If it makes Lord Octocat happy...."},{"author":"eric-wieser","file":"src/frontends/lean/elaborator.cpp","date":"2021-03-16T11:44:05Z","comment":"Every other call to `ensure_type` in this file seems to call `get_ref_for_child` in order to obtain the second argument to this call:\r\nhttps://github.com/leanprover-community/lean/blob/508db1acd2249ac7bc0654867ab73a6d5c0a6408/src/frontends/lean/elaborator.cpp#L3387-L3389\r\n\r\nhttps://github.com/leanprover-community/lean/blob/508db1acd2249ac7bc0654867ab73a6d5c0a6408/src/frontends/lean/elaborator.cpp#L835-L836\r\n\r\nIs there a reason that doesn't make sense here?"},{"author":"eric-wieser","file":"tests/lean/run/let_coe_sort.lean","date":"2021-03-16T11:46:36Z","comment":"Is it worth adding a test for `suffices` too?"},{"author":"gebner","file":"src/frontends/lean/elaborator.cpp","date":"2021-03-16T11:48:02Z","comment":"I guess it's a reasonable precaution."},{"author":"gebner","file":"tests/lean/run/let_coe_sort.lean","date":"2021-03-16T11:48:17Z","comment":"Feel free to add one."},{"author":"eric-wieser","file":"tests/lean/run/let_coe_sort.lean","date":"2021-03-16T11:54:16Z","comment":"```suggestion\r\n  suffices z : foo.bar,\r\n  trivial,\r\n  exact (),\r\n```"}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"ea1ddbad26cde720b2d849efa8b9ebc637173678","message":"fix(library/init/meta/interactive): fix let with coe_sort","date":"2021-03-16T11:21:33Z"},{"author":"gebner","committer":"gebner","hash":"2b665a7d0dc97a8f7634a8f32c14e029c6024348","message":"Also fix let in term mode.","date":"2021-03-16T11:30:42Z"},{"author":"gebner","committer":"web-flow","hash":"f7b2c91de6ab173bb8f12dbaaa5becd102ca37a0","message":"Update tests/lean/run/let_coe_sort.lean\n\nCo-authored-by: Eric Wieser <wieser.eric@gmail.com>","date":"2021-03-16T11:34:22Z"},{"author":"gebner","committer":"gebner","hash":"508db1acd2249ac7bc0654867ab73a6d5c0a6408","message":"Fix assume as well.","date":"2021-03-16T11:37:13Z"},{"author":"gebner","committer":"gebner","hash":"c7180a22aaa2b2de14ab18cd8893d79187f3d1d2","message":"Use get_ref_for_child","date":"2021-03-16T11:46:36Z"},{"author":"eric-wieser","committer":"web-flow","hash":"51aa4315e5e94fa82a4892e9ff4eda7bc6692149","message":"Update tests/lean/run/let_coe_sort.lean","date":"2021-03-16T11:54:34Z"}]},{"author":"bryangingechen","number":554,"diff_summary":[{"file":"README.md","status":"M","additions":20,"deletions":2},{"file":"doc/changes.md","status":"M","additions":20,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":20,"deletions":2}],"state":"closed","open_date":"2021-03-15T14:27:26Z","update_date":"2021-03-15T15:27:35Z","discussion":[{"author":"bryangingechen","date":"2021-03-15T14:27:34Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-15T15:27:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2113415262)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2113415115)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2113415079)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2113415434)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2113415407)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2113415534)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2113415657)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"a9865f602effd81a0db9eed699b13040e8481c8b","message":"chore(*): release 3.28.0c","date":"2021-03-15T14:26:39Z"}]},{"author":"timlacroix","number":552,"diff_summary":[{"file":"src/library/mt_task_queue.cpp","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-03-11T08:35:53Z","update_date":"2021-03-11T09:58:58Z","discussion":[{"author":"gebner","date":"2021-03-11T09:11:58Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-11T09:58:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2084854090)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2084854354)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2084854334)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2084854207)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2084854192)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2084853896)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2084854427)"}],"review_discussion":[],"tags":[],"commits":[{"author":"timlacroix","committer":"timlacroix","hash":"cc0b2d287a47d9ae4fa3600139fd73daeb0be9db","message":"fix(mt_task_queue): Allow running rdep\n\nRemoves an Unreachable code reached assertion when a reverse dependency is removed in handle_finished. Encountered this issue when trying to build parser snapshots for the entire mathlib on 80 cores","date":"2021-03-11T08:34:06Z"}]},{"author":"pechersky","number":551,"diff_summary":[{"file":"library/data/stream.lean","status":"D","additions":109,"deletions":83},{"file":"library/init/data/int/basic.lean","status":"D","additions":109,"deletions":83},{"file":"library/init/data/int/order.lean","status":"D","additions":109,"deletions":83},{"file":"library/init/data/nat/basic.lean","status":"D","additions":109,"deletions":83},{"file":"library/init/data/nat/bitwise.lean","status":"D","additions":109,"deletions":83},{"file":"library/init/data/nat/lemmas.lean","status":"D","additions":109,"deletions":83},{"file":"tests/lean/1956.lean","status":"D","additions":109,"deletions":83},{"file":"tests/lean/1956.lean.expected.out","status":"D","additions":109,"deletions":83},{"file":"tests/lean/run/exhaustive_vm_impl_test.lean","status":"D","additions":109,"deletions":83}],"state":"closed","open_date":"2021-03-10T15:53:23Z","update_date":"2021-07-07T20:50:58Z","discussion":[{"author":"bryangingechen","date":"2021-03-10T16:08:02Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-10T16:54:23Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2078537288)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2078537154)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2078537427)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2078537185)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2078537030)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2078536862)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2078537326)"},{"author":"bryangingechen","date":"2021-03-15T13:35:12Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-15T14:01:54Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2112983524)"},{"author":"sgouezel","date":"2021-03-17T20:15:35Z","comment":"Do you understand what breaks in the build? If it could build, I would try to fix mathlib to see how painful this is."},{"author":"pechersky","date":"2021-03-17T21:16:00Z","comment":"> Do you understand what breaks in the build? If it could build, I would try to fix mathlib to see how painful this is.\r\n\r\nThe test that fails has the content:\r\n```\r\nexample : 1000 * 1000 = 123456 :=\r\nrfl\r\n```\r\nand the expected output as:\r\n```\r\n1956.lean:1:0: error: deep recursion was detected at 'replace' (potential solution: increase stack space in your system)\r\n```\r\nBecause of the difference in multiplication, now `rfl` is chugging chugging chugging and hitting the timeout, instead of hitting the `deep recursion` error message. So in some ways, it's not a failed test in that there is no \"correct\" behavior, but it is not great because it means that with the new definition, this deep loop isn't caught."},{"author":"pechersky","date":"2021-03-17T21:16:15Z","comment":"For testing mathlib, it shouldn't cause problems."},{"author":"digama0","date":"2021-03-17T21:21:29Z","comment":"That sounds like an improvement, like something that was not tail recursive is now tail recursive and being optimized better."},{"author":"pechersky","date":"2021-03-17T21:46:02Z","comment":"I've pushed some proof improvements and deleted the test. It builds on my machine (haven't ran the tests)."},{"author":"bryangingechen","date":"2021-03-17T21:47:28Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-17T22:06:29Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2134886326)"},{"author":"pechersky","date":"2021-03-17T22:24:58Z","comment":"The line that's currently breaking is\r\n```\r\ndef ints : list ℤ :=\r\n(do i ← list.range 40, [-i, i]) ++\r\n(do s ← [-1,1], j ← list.range 20, [s*(2^31:nat) + j-10])\r\n\r\nrun_cmd verify $ ∀ x ∈ ints, ∀ y ∈ ints, is_ok $ int.mul x y\r\n```\r\n\r\nWhen `x ∈ small_ints, y ∈ ints`, it's fine, but `x ∈ ints, y ∈ small_ints` it is not."},{"author":"gebner","date":"2021-03-18T10:20:15Z","comment":"> When x ∈ small_ints, y ∈ ints, it's fine, but x ∈ ints, y ∈ small_ints it is not.\r\n\r\nThat's ok to swap.  This test checks that definitional reduction and VM computation agree.  Depending on which argument is recursive in mul, you can only use definitional reduction with small left/right arguments."},{"author":"gebner","date":"2021-03-18T13:43:39Z","comment":"Another difference leading to the `small_ints` issue that I didn't notice earlier is that the definition of `int.mul` has changed. Previously it was defined in terms of `nat.mul`, so it would also for large numbers.  Now it is defined in terms of `int.smul`, which uses `nat.rec` and that one is exponential in the size of the argument.\r\n\r\nbors try"},{"author":"pechersky","date":"2021-03-18T14:43:48Z","comment":"How do I tag this release so that Sebastien can point his toml to it? Any tagging I do is only for my repo."},{"author":"bors[bot]","date":"2021-03-18T14:48:08Z","comment":"## try\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2140142808)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2140142528)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2140142565)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2140142939)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2140142649)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2140142680)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2140142877)"},{"author":"gebner","date":"2021-03-18T15:26:08Z","comment":"> Any tagging I do is only for my repo.\r\n\r\nIt would work fine if you didn't put a slash into the tag name. (And start it with a letter.)\r\n\r\nHere is an example tag that works: https://github.com/urkud/lean/releases/tag/dropDLO2\r\n```\r\nlean +urkud/lean:dropDLO2\r\n```"},{"author":"pechersky","date":"2021-03-18T15:41:04Z","comment":"OK, I've pushed the `pr511` tag to my repo: https://github.com/pechersky/lean/releases/tag/pr511. Is there a way to get it to update to point to the built gz files?"},{"author":"gebner","date":"2021-03-18T15:48:50Z","comment":"Hmm, maybe you need to enable github actions on your repo?"},{"author":"pechersky","date":"2021-03-18T18:10:48Z","comment":"I tried making the toml change on the mathlib branch, but got this failure in the CI:\r\nhttps://github.com/leanprover-community/mathlib/runs/2141539845?check_suite_focus=true\r\n```\r\nRun leanpkg configure\r\n\r\nWARNING: Lean version mismatch: installed version is leanprover-community/lean:3.27.0, but package requires pechersky/lean:pr511\r\n\r\nconfiguring mathlib 0.1\r\n```"},{"author":"gebner","date":"2021-03-18T18:23:26Z","comment":"@pechersky That's just a warning.  The error is below."}],"review_discussion":[{"author":"eric-wieser","file":"library/init/data/nat/basic.lean","date":"2021-03-10T16:15:29Z","comment":"The term-mode expression for this is much uglier:\r\n```lean\r\ndef mul._main : ℕ → ℕ → ℕ :=\r\nλ (ᾰ ᾰ_1 : ℕ),\r\n  ᾰ.brec_on\r\n    (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ) (ᾰ_1 : ℕ),\r\n       (λ (ᾰ ᾰ_1 : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ),\r\n          ᾰ.cases_on (λ (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) 0), id_rhs ℕ 0)\r\n            (λ (ᾰ_1_1 : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ_1_1.succ),\r\n               id_rhs ℕ (_F.fst.fst ᾰ_1 + ᾰ_1))\r\n            _F)\r\n         ᾰ\r\n         ᾰ_1\r\n         _F)\r\n    ᾰ_1\r\n```\r\nvs before:\r\n```lean\r\ndef mul'._main : ℕ → ℕ → ℕ :=\r\nλ (ᾰ ᾰ_1 : ℕ), ᾰ_1.cases_on (id_rhs ℕ 0) (λ (ᾰ_1 : ℕ), id_rhs ℕ (mul ᾰ ᾰ_1 + ᾰ))\r\n```\r\n"},{"author":"pechersky","file":"library/init/data/nat/basic.lean","date":"2021-03-10T16:23:04Z","comment":"It can probably be rewritten to factor out the `b`"},{"author":"semorrison","file":"library/init/data/nat/basic.lean","date":"2021-03-10T23:07:30Z","comment":"Does\r\n```\r\n| 0     := λ b, 0\r\n| (a+1) := λ b, (mul a b) + b\r\n```\r\nhelp?"},{"author":"pechersky","file":"library/init/data/nat/basic.lean","date":"2021-03-10T23:32:19Z","comment":"Eric, I think your recursive definition looks nicer because you accidentally referenced `mul` and not `mul'`. Here is my experiment:\r\n```lean\r\nimport init.data.nat.basic\r\n\r\ndef mul_left : ℕ → ℕ → ℕ\r\n| 0       m := 0\r\n| (n + 1) m := mul_left n m + m\r\n\r\ndef mul_left' : ℕ → ℕ → ℕ\r\n| 0       := λ _, 0\r\n| (n + 1) := λ m, mul_left' n m + m\r\n\r\ndef mul_leftr : ℕ → ℕ → ℕ :=\r\nλ n, nat.rec_on n (λ _, 0) (λ _ f m, f m + m)\r\n\r\ndef mul_right : ℕ → ℕ → ℕ\r\n| n 0       := 0\r\n| n (m + 1) := mul_right n m + n\r\n\r\ndef mul_right' (n : ℕ) : ℕ → ℕ\r\n| 0       := 0\r\n| (m + 1) := mul_right' m + n\r\n\r\ndef mul_rightr : ℕ → ℕ → ℕ :=\r\nλ n m, nat.rec_on m 0 (λ _ k, k + n)\r\n\r\n/-\r\ndef mul_left._main : ℕ → ℕ → ℕ :=\r\nλ (ᾰ ᾰ_1 : ℕ),\r\n  ᾰ.brec_on\r\n    (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ) (ᾰ_1 : ℕ),\r\n       (λ (ᾰ ᾰ_1 : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ),\r\n          ᾰ.cases_on (λ (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) 0), id_rhs ℕ 0)\r\n            (λ (ᾰ_1_1 : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ_1_1.succ),\r\n               id_rhs ℕ (_F.fst.fst ᾰ_1 + ᾰ_1))\r\n            _F)\r\n         ᾰ\r\n         ᾰ_1\r\n         _F)\r\n    ᾰ_1\r\n-/\r\n\r\n#print mul_left._main\r\n/-\r\ndef mul_left'._main : ℕ → ℕ → ℕ :=\r\nλ (ᾰ : ℕ),\r\n  ᾰ.brec_on\r\n    (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ),\r\n       (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ),\r\n          ᾰ.cases_on (λ (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) 0), id_rhs (ℕ → ℕ) (λ (_x : ℕ), 0))\r\n            (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ.succ),\r\n               id_rhs (ℕ → ℕ) (λ (m : ℕ), _F.fst.fst m + m))\r\n            _F)\r\n         ᾰ\r\n         _F)\r\n-/\r\n\r\n#print mul_left'._main\r\n/-\r\ndef mul_leftr : ℕ → ℕ → ℕ :=\r\nλ (n : ℕ), n.rec_on (λ (_x : ℕ), 0) (λ (_x : ℕ) (f : ℕ → ℕ) (m : ℕ), f m + m)\r\n-/\r\n\r\n#print mul_leftr\r\n/-\r\ndef mul_right._main : ℕ → ℕ → ℕ :=\r\nλ (ᾰ ᾰ_1 : ℕ),\r\n  ᾰ_1.brec_on\r\n    (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ) (ᾰ_1 : ℕ),\r\n       (λ (ᾰ ᾰ_1 : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ_1),\r\n          ᾰ_1.cases_on (λ (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) 0), id_rhs ℕ 0)\r\n            (λ (ᾰ_1 : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ → ℕ) ᾰ_1.succ),\r\n               id_rhs ℕ (_F.fst.fst ᾰ + ᾰ))\r\n            _F)\r\n         ᾰ_1\r\n         ᾰ\r\n         _F)\r\n    ᾰ\r\n-/\r\n\r\n#print mul_right._main\r\n/-\r\ndef mul_right'._main : ℕ → ℕ → ℕ :=\r\nλ (n ᾰ : ℕ),\r\n  ᾰ.brec_on\r\n    (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ) ᾰ),\r\n       (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ) ᾰ),\r\n          ᾰ.cases_on (λ (_F : nat.below (λ (ᾰ : ℕ), ℕ) 0), id_rhs ℕ 0)\r\n            (λ (ᾰ : ℕ) (_F : nat.below (λ (ᾰ : ℕ), ℕ) ᾰ.succ), id_rhs ℕ (_F.fst.fst + n))\r\n            _F)\r\n         ᾰ\r\n         _F)\r\n-/\r\n\r\n#print mul_right'._main\r\n/-\r\ndef mul_rightr : ℕ → ℕ → ℕ :=\r\nλ (n m : ℕ), m.rec_on 0 (λ (_x k : ℕ), k + n)\r\n-/\r\n\r\n#print mul_rightr\r\n```"},{"author":"eric-wieser","file":"library/init/data/int/basic.lean","date":"2021-03-18T16:00:51Z","comment":"Any reason for not calling `nat.smul` directly?"}],"tags":[],"commits":[{"author":"pechersky","committer":"pechersky","hash":"7a61e89eab51baccfb326137fc55522f30b8fbae","message":"feat(data/nat/basic): define mul as recursive on left","date":"2021-03-08T15:59:48Z"},{"author":"pechersky","committer":"pechersky","hash":"02716a6988d44439f3bb9fd562af3b55f2428b3e","message":"core define nsmul and zsmul","date":"2021-03-11T19:50:25Z"},{"author":"pechersky","committer":"pechersky","hash":"7e78e5ed9219ddc8ab1e88daa504b8a7a9b68696","message":"avoid eq compiler in smul defns","date":"2021-03-12T20:21:37Z"},{"author":"pechersky","committer":"pechersky","hash":"10370837a2bfd5d053e45124466fd6f299b44973","message":"avoid rfl proof","date":"2021-03-12T22:07:27Z"},{"author":"pechersky","committer":"pechersky","hash":"7fef22a8524366fc55ce17434ed8bcbd2f1493fc","message":"avoid proofs that use defeq","date":"2021-03-12T22:08:41Z"},{"author":"pechersky","committer":"pechersky","hash":"995b3a488d10dae6ad0c81a0b4c3188e7a3873ae","message":"blow away slow tests (is this OK?)","date":"2021-03-16T00:43:07Z"},{"author":"pechersky","committer":"pechersky","hash":"6856a57b2697f7540a301db2bb792a8f83a74d2e","message":"small_ints on left side of mul\n\nWith the redefinition of int multiplication to be the mul-on-left\nof the underlying nats, carrying the negative,\nthat means the `x` in `int.mul x y`\nis now recursive. That means that proving definitional reduction and\nVM agreement is harder. So we only check for small ints instead.","date":"2021-03-16T05:52:48Z"},{"author":"pechersky","committer":"pechersky","hash":"692cdd07feebefc2d9212e4a6864139d1c0118eb","message":"Trigger Build","date":"2021-03-16T08:19:47Z"}]},{"author":"gebner","number":550,"diff_summary":[{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":74,"deletions":13},{"file":"src/frontends/lean/inductive_cmds.cpp","status":"A","additions":74,"deletions":13},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":74,"deletions":13},{"file":"src/frontends/lean/structure_cmd.cpp","status":"A","additions":74,"deletions":13},{"file":"src/frontends/lean/util.cpp","status":"A","additions":74,"deletions":13},{"file":"src/frontends/lean/util.h","status":"A","additions":74,"deletions":13},{"file":"tests/lean/run/root_name_in_ns.lean","status":"A","additions":74,"deletions":13}],"state":"closed","open_date":"2021-03-08T15:49:39Z","update_date":"2021-03-11T18:36:49Z","discussion":[{"author":"fpvandoorn","date":"2021-03-08T16:11:30Z","comment":"The test looks great! It also works for other ways to define declarations, like mutual inductives, mutual defs, nested inductives?"},{"author":"gebner","date":"2021-03-08T18:20:46Z","comment":"> The test looks great! It also works for other ways to define declarations, like mutual inductives, mutual defs, nested inductives?\r\n\r\nMutual defs already worked.  I've also fixed mutual inductives now."},{"author":"gebner","date":"2021-03-11T17:51:56Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-11T18:36:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2088575750)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2088575844)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2088575811)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2088575982)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2088575956)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2088575908)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2088576039)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"3e61f0d19cd72607344e64b4d79f7bf436088121","message":"feat: def _root_.foo := 42","date":"2021-03-08T15:48:36Z"},{"author":"gebner","committer":"gebner","hash":"1617c7c65f71cb15dcf358d086c9c2b8ca5dbdf8","message":"Add test.","date":"2021-03-08T15:49:29Z"},{"author":"gebner","committer":"gebner","hash":"bf1118a6974aecf26e9800ac63a9db490e6d9c00","message":"Support mutual inductives.","date":"2021-03-08T18:20:04Z"}]},{"author":"gebner","number":549,"diff_summary":[{"file":"library/init/meta/expr.lean","status":"M","additions":4,"deletions":1}],"state":"closed","open_date":"2021-03-08T12:15:58Z","update_date":"2021-03-08T13:24:43Z","discussion":[{"author":"gebner","date":"2021-03-08T12:43:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-08T13:24:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2056489014)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2056489126)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2056489106)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2056489268)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2056489247)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2056489180)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2056489345)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"b6006291749810cba5ada059218e1c88ae4e46f9","message":"fix: line wrapping in to_raw_fmt","date":"2021-03-08T12:14:54Z"}]},{"author":"gebner","number":548,"diff_summary":[{"file":"src/checker/text_import.cpp","status":"M","additions":29,"deletions":7}],"state":"closed","open_date":"2021-03-08T10:35:28Z","update_date":"2021-03-08T11:46:03Z","discussion":[{"author":"gebner","date":"2021-03-08T10:59:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-08T11:46:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2055843518)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2055843295)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2055843262)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2055843415)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2055843397)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2055843465)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2055843353)"}],"review_discussion":[{"author":"eric-wieser","file":"src/checker/text_import.cpp","date":"2021-03-08T10:40:18Z","comment":"Does it make sense to just do the wrapping in the `import_from_text` function rather than in the various places in this class?"},{"author":"gebner","file":"src/checker/text_import.cpp","date":"2021-03-08T10:40:47Z","comment":"That's what I tried first, but then you don't get the name of the declaration."},{"author":"eric-wieser","file":"src/checker/text_import.cpp","date":"2021-03-08T10:50:04Z","comment":"Makes sense, thanks."}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"e20f9e2f07b54ec34483314411a104e3c5c4e0a7","message":"feat: leanchecker: print error messages","date":"2021-03-08T10:34:36Z"},{"author":"gebner","committer":"gebner","hash":"d145efc7a54f0fabfaf08887576c1e002cf9e71a","message":"Pacify linter.","date":"2021-03-08T10:48:28Z"}]},{"author":"fpvandoorn","number":547,"diff_summary":[{"file":"README.md","status":"M","additions":5,"deletions":5}],"state":"closed","open_date":"2021-03-05T05:06:20Z","update_date":"2021-03-05T09:15:14Z","discussion":[{"author":"gebner","date":"2021-03-05T08:17:41Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-05T09:15:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2038125572)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2038125698)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2038125659)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2038125963)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2038125906)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2038125804)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2038126044)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"113cdcc431a31b36f55a1871ca7b4785aab9864a","message":"update installation instructions","date":"2021-03-05T05:04:26Z"}]},{"author":"fpvandoorn","number":545,"diff_summary":[{"file":"library/data/buffer.lean","status":"D","additions":399,"deletions":339},{"file":"library/data/rbmap/default.lean","status":"D","additions":399,"deletions":339},{"file":"library/data/rbtree/find.lean","status":"D","additions":399,"deletions":339},{"file":"library/data/rbtree/insert.lean","status":"D","additions":399,"deletions":339},{"file":"library/data/rbtree/main.lean","status":"D","additions":399,"deletions":339},{"file":"library/data/rbtree/min_max.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/algebra/classes.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/algebra/order.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/cc_lemmas.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/classical.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/control/except.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/control/lawful.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/control/lift.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/control/monad_fail.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/control/reader.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/control/state.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/core.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/bool/lemmas.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/int/basic.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/int/comp_lemmas.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/int/order.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/list/instances.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/list/lemmas.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/nat/basic.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/nat/bitwise.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/nat/lemmas.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/quot.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/setoid.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/sigma/lex.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/string/ops.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/data/subtype/basic.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/function.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/logic.lean","status":"D","additions":399,"deletions":339},{"file":"library/init/wf.lean","status":"D","additions":399,"deletions":339},{"file":"tests/lean/run/eq17.lean","status":"D","additions":399,"deletions":339},{"file":"tests/lean/run/eq9.lean","status":"D","additions":399,"deletions":339},{"file":"tests/lean/run/mvar_beta_isdefeq.lean","status":"D","additions":399,"deletions":339},{"file":"tests/lean/run/simp_coe.lean","status":"D","additions":399,"deletions":339}],"state":"closed","open_date":"2021-03-04T23:31:43Z","update_date":"2021-03-08T16:47:25Z","discussion":[{"author":"fpvandoorn","date":"2021-03-04T23:42:02Z","comment":"The three remaining test failures all depend on the fact that some proofs declarations are `def`, not `lemma`. \r\n\r\nIn two tests this is the case because they receive the `@[pattern]` attribute\r\nIn one test an equational lemma of such a declaration is retrieved with metaprogramming.\r\n\r\nI'm not sure what the best solution is. The tests don't seem very useful to me, so we could remove them? Or I could revert the three relevant lemmas back to `def`s."},{"author":"gebner","date":"2021-03-05T08:15:50Z","comment":"> I'm not sure what the best solution is. The tests don't seem very useful to me, so we could remove them? Or I could revert the three relevant lemmas back to defs.\r\n\r\nPlease remove the tests in this case.  AFAICT they should reduce for well-founded recursion?  I don't think this ever reliably worked at all.\r\n\r\n(There is theoretically also a `set_option type_context.unfold_lemmas true` option, but I wouldn't bother.)"},{"author":"gebner","date":"2021-03-08T15:59:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-08T16:47:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2057936568)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2057936249)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2057936214)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2057936390)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2057936357)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2057936478)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2057936066)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"4ebc1f6d759e38db7882e17240ce3335d8d3350a","message":"lintfixes","date":"2021-03-04T21:33:47Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"69360297e550706ba6f383e1a2a8925adf61c224","message":"fix 1","date":"2021-03-04T21:33:48Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"4562012707dab6e32af57a97f741563c839efdd0","message":"fix","date":"2021-03-04T21:33:48Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"6c3b1d491d1bfeee5711863f06fc987c76153abb","message":"fixes","date":"2021-03-04T23:16:06Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"ba0fd9a6fb9148911897787162e1490e963cc7ce","message":"undo change that was made in #544","date":"2021-03-04T23:30:51Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"32ef468a86a3892aef0a834ef5573b2d9d49e1ba","message":"fix one test","date":"2021-03-04T23:39:13Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"af37faea037d8a0353cdb36e735d46800944e016","message":"revert some lemmas back to definitions","date":"2021-03-05T04:22:52Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"7d79416ec387fb2f3ead366b052858804feed4a6","message":"more lemmas must be defs","date":"2021-03-05T05:14:20Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"877984ad77ca5ff3a1b3d34304dde0d68198318e","message":"Revert and remove failed tests","date":"2021-03-05T19:05:48Z"}]},{"author":"fpvandoorn","number":544,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"M","additions":2,"deletions":1}],"state":"closed","open_date":"2021-03-04T21:28:02Z","update_date":"2021-03-08T17:38:10Z","discussion":[{"author":"gebner","date":"2021-03-04T21:55:52Z","comment":"bors d=EdAyers"},{"author":"bors[bot]","date":"2021-03-04T21:55:53Z","comment":":v: EdAyers can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"gebner","date":"2021-03-08T15:59:49Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-08T17:38:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2058333983)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2058334565)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2058334534)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2058334753)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2058334735)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2058334376)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2058335228)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"a07f638338adb0c59de85b0b3c738555567b75b2","message":"use has_coe_t","date":"2021-03-04T21:26:55Z"}]},{"author":"gebner","number":541,"diff_summary":[{"file":"library/init/data/fin/ops.lean","status":"M","additions":3,"deletions":4}],"state":"closed","open_date":"2021-02-26T15:01:28Z","update_date":"2021-02-26T16:08:42Z","discussion":[{"author":"gebner","date":"2021-02-26T15:22:32Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-26T16:08:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1988556821)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1988556999)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1988556980)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1988557077)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1988557056)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1988556926)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1988557148)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"223fd601bfe05a372b51a6798bd199a0100519bb","message":"fix(library/init/data/fin/ops): backport lean4 definition of fin.sub","date":"2021-02-26T15:01:16Z"}]},{"author":"eric-wieser","number":540,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-02-26T10:29:00Z","update_date":"2021-02-26T12:52:18Z","discussion":[{"author":"gebner","date":"2021-02-26T11:14:54Z","comment":"bors r+"},{"author":"eric-wieser","date":"2021-02-26T11:27:13Z","comment":"Alarmingly the mac build is segfaulting on test 480..."},{"author":"gebner","date":"2021-02-26T12:06:00Z","comment":"bors r-\r\nbors cancel"},{"author":"bors[bot]","date":"2021-02-26T12:06:01Z","comment":"Canceled."},{"author":"gebner","date":"2021-02-26T12:07:33Z","comment":"Oh wait, it worked when bors ran the CI.  So this is indeed alarming since it happens nondeterministically.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-02-26T12:52:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1987326948)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1987326743)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1987326716)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1987326825)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1987326809)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1987326869)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1987326999)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"78653591623b0413c8dd07a74e76e4cb11073c3c","message":"chore(init/meta/interactive): allow propagate_tags to be used interactively","date":"2021-02-26T10:28:51Z"}]},{"author":"gebner","number":539,"diff_summary":[{"file":"README.md","status":"M","additions":21,"deletions":2},{"file":"doc/changes.md","status":"M","additions":21,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":21,"deletions":2}],"state":"closed","open_date":"2021-02-25T10:47:39Z","update_date":"2021-02-25T12:25:00Z","discussion":[{"author":"gebner","date":"2021-02-25T11:37:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T12:24:59Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978644332)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978644245)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978644216)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978634820)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978644144)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978634768)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978644289)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"241b948527f762ca0235de80a9fc89a86b849889","message":"chore(*): release 3.27.0","date":"2021-02-25T10:47:13Z"}]},{"author":"gebner","number":538,"diff_summary":[{"file":"src/library/abstract_context_cache.cpp","status":"A","additions":11,"deletions":1},{"file":"tests/lean/irreducible_instance.lean","status":"A","additions":11,"deletions":1},{"file":"tests/lean/irreducible_instance.lean.expected.out","status":"A","additions":11,"deletions":1}],"state":"closed","open_date":"2021-02-25T10:02:01Z","update_date":"2021-02-25T11:04:48Z","discussion":[{"author":"gebner","date":"2021-02-25T10:07:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f20384747baf6d1a937b7d2ed7d32ed009af45ca","message":"fix(library/abstract_context_cache): allow irreducible instances","date":"2021-02-25T10:00:46Z"}]},{"author":"gebner","number":537,"diff_summary":[{"file":"src/library/tactic/simplify.cpp","status":"M","additions":12,"deletions":20},{"file":"src/library/tactic/simplify.h","status":"M","additions":12,"deletions":20}],"state":"closed","open_date":"2021-02-25T09:31:12Z","update_date":"2021-02-25T11:04:50Z","discussion":[{"author":"gebner","date":"2021-02-25T09:44:33Z","comment":"Hmm, mathlib still builds.  I'm surprised.\r\n\r\nbors r+"},{"author":"gebner","date":"2021-02-25T10:05:06Z","comment":"bors r-"},{"author":"bors[bot]","date":"2021-02-25T10:05:07Z","comment":"Canceled."},{"author":"gebner","date":"2021-02-25T10:07:24Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"086f3a781fe50261f94f55b416add4c436d3b41f","message":"perf(library/tactic/simplify): do not clear simp cache unnecessarily","date":"2021-02-25T09:26:35Z"}]},{"author":"gebner","number":535,"diff_summary":[{"file":"src/util/log_tree.cpp","status":"A","additions":8,"deletions":2},{"file":"src/util/log_tree.h","status":"A","additions":8,"deletions":2},{"file":"tests/lean/run/async_map.lean","status":"A","additions":8,"deletions":2}],"state":"closed","open_date":"2021-02-19T18:07:43Z","update_date":"2021-02-19T20:24:11Z","discussion":[{"author":"gebner","date":"2021-02-19T19:37:11Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-19T20:24:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1937984926)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1937984878)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1937984854)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1937984809)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1937984786)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1937984726)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1937984981)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"11e10d1bb184633a0dd32a9aaa2b46ddab275019","message":"perf: fix accidentally quadratic name creation","date":"2021-02-19T18:06:30Z"}]},{"author":"eric-wieser","number":534,"diff_summary":[{"file":"src/library/vm/vm_json.cpp","status":"M","additions":5,"deletions":1},{"file":"tests/lean/json.lean","status":"M","additions":5,"deletions":1},{"file":"tests/lean/json.lean.expected.out","status":"M","additions":5,"deletions":1}],"state":"closed","open_date":"2021-02-19T14:09:05Z","update_date":"2021-02-19T17:54:26Z","discussion":[{"author":"gebner","date":"2021-02-19T17:17:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-19T17:54:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1937134029)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1937133983)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1937133946)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1937133887)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1937133866)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1937133801)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1937134086)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"ad5eb01e1ffe38628b4eeb41ac80525aef0023ae","message":"bug(library/vm/vm_json): do not treat empty objects as null","date":"2021-02-19T14:08:59Z"},{"author":"eric-wieser","committer":"web-flow","hash":"f3676ecc4e818e377447bde32006b2b691cc33f3","message":"Add tests","date":"2021-02-19T14:36:07Z"},{"author":"eric-wieser","committer":"web-flow","hash":"f1f26bdb0e00671959a228bf2de28c04e1e693b6","message":"Update json.lean.expected.out","date":"2021-02-19T14:49:15Z"}]},{"author":"eric-wieser","number":533,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":14,"deletions":4},{"file":"library/init/data/list/lemmas.lean","status":"M","additions":14,"deletions":4},{"file":"library/init/meta/has_reflect.lean","status":"M","additions":14,"deletions":4},{"file":"library/init/meta/interactive.lean","status":"M","additions":14,"deletions":4}],"state":"open","open_date":"2021-02-18T12:32:29Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"gebner","date":"2021-02-18T13:24:57Z","comment":"IIRC it was intentional that the type parameter of list and option is in Type instead of Sort, as this simplifies type inference.  Have you tried compiling mathlib with this change?"},{"author":"eric-wieser","date":"2021-02-18T13:26:13Z","comment":"I have not at any point tried to build lean itself locally, and was relying on CI to do that. Presumably once this build passes, I can create a mathlib branch that points to this branch, and have CI test that too?"},{"author":"gebner","date":"2021-02-18T13:53:45Z","comment":"You need to make a tag for the CI to upload a release.  Please make the tag on your own fork."},{"author":"eric-wieser","date":"2021-02-18T17:27:13Z","comment":"Build is full of failures with trivial goals that `simp` isn't closing:\r\n```lean\r\n/home/runner/work/lean/lean/library/init/data/list/lemmas.lean:25:3: error: tactic failed, there are unsolved goals\r\nstate:\r\ncase list.cons\r\nα : Type u,\r\nt_hd : α,\r\nt_tl : list α,\r\nt_ih : t_tl ++ nil = t_tl\r\n⊢ t_hd = t_hd ∧ t_tl = t_tl\r\n```\r\nI guess I'll have to try this locally..."}],"review_discussion":[{"author":"eric-wieser","file":"library/init/meta/derive.lean","date":"2021-02-18T16:50:35Z","comment":"```suggestion\r\ninstance_derive_handler ``has_reflect mk_has_reflect_instance ff (λ n params tgt,\r\n```"},{"author":"eric-wieser","file":"library/init/meta/interactive.lean","date":"2021-02-18T17:08:08Z","comment":"```suggestion\r\n   let to_erase : list name :=\r\n```"}],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"c34c53ebb90824ceeb8e1aeeeaad41744d95e0a8","message":"feat(library/init/core): allow lists of proofs\n\nWith upstream changes to mathlib, this would allow `fintype some_prop`, which would in turn allow proofs to be used to index finite things like matrices or summations.","date":"2021-02-18T12:32:15Z"},{"author":"eric-wieser","committer":"web-flow","hash":"fbf0f5f0e2fe55874220c23756fdd2fc2f025597","message":"Update has_reflect.lean","date":"2021-02-18T13:19:43Z"},{"author":"eric-wieser","committer":"web-flow","hash":"3d4a3bd0b35fccf16239ff99eb3ae12f7688e1be","message":"Update has_reflect.lean","date":"2021-02-18T14:11:57Z"},{"author":"eric-wieser","committer":"web-flow","hash":"058b3207ef4535220a1852a013b6e89cf0120a2c","message":"Update derive.lean","date":"2021-02-18T16:28:44Z"},{"author":"eric-wieser","committer":"web-flow","hash":"ef9f19903a4a9af0fc86ed68757ac24c6327d464","message":"Update has_reflect.lean","date":"2021-02-18T16:50:20Z"},{"author":"eric-wieser","committer":"web-flow","hash":"0c8fc6493cd1f918e6b81cf5a20146870760f8b4","message":"Update library/init/meta/derive.lean","date":"2021-02-18T16:50:42Z"},{"author":"eric-wieser","committer":"web-flow","hash":"47841a5fc0a74a7e8b17ba1a9ed04ecedacc019b","message":"Update interactive.lean","date":"2021-02-18T17:07:24Z"},{"author":"eric-wieser","committer":"web-flow","hash":"dc73832b9549eaa9cb8be431d2ed0a8d84ea8806","message":"Update library/init/meta/interactive.lean","date":"2021-02-18T17:08:12Z"},{"author":"eric-wieser","committer":"web-flow","hash":"32029282d498f887afcb9f60c9d608c1c6f18c84","message":"Update lemmas.lean","date":"2021-02-18T17:29:27Z"}]},{"author":"eric-wieser","number":532,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-02-17T08:21:04Z","update_date":"2021-02-25T11:04:52Z","discussion":[{"author":"gebner","date":"2021-02-25T09:32:43Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"4dbe18de5bc9a833d82bade661547bc268a409a3","message":"chore(init/core): make has_mul.mul a pattern\n\nThis is already done by mathlib here:\r\n\r\nhttps://github.com/leanprover-community/mathlib/blob/da24addb74fe40009254cadce1e41593e876c82a/src/algebra/free.lean#L50","date":"2021-02-17T08:20:53Z"}]},{"author":"dselsam","number":531,"diff_summary":[{"file":"library/init/cc_lemmas.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/data/repr.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/data/to_string.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/logic.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/meta/format.lean","status":"M","additions":41,"deletions":41},{"file":"library/init/meta/tactic.lean","status":"M","additions":41,"deletions":41},{"file":"src/library/app_builder.cpp","status":"M","additions":41,"deletions":41},{"file":"src/library/equations_compiler/util.cpp","status":"M","additions":41,"deletions":41},{"file":"src/library/tactic/simp_lemmas.cpp","status":"M","additions":41,"deletions":41},{"file":"src/library/tactic/smt/congruence_closure.cpp","status":"M","additions":41,"deletions":41},{"file":"src/library/util.cpp","status":"M","additions":41,"deletions":41},{"file":"src/library/util.h","status":"M","additions":41,"deletions":41},{"file":"tests/lean/eformat.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/eformat.lean.expected.out","status":"M","additions":41,"deletions":41},{"file":"tests/lean/run/app_builder_tac1.lean","status":"M","additions":41,"deletions":41},{"file":"tests/lean/run/occurs_check_bug1.lean","status":"M","additions":41,"deletions":41}],"state":"closed","open_date":"2021-02-12T03:38:04Z","update_date":"2021-02-25T10:25:33Z","discussion":[{"author":"bryangingechen","date":"2021-02-12T04:03:19Z","comment":"In lieu of running `bors try` here, here's a link to the results of CI on the first commit, which shows 6 broken tests: https://github.com/dselsam/lean3/runs/1884575459#step:9:2914"},{"author":"dselsam","date":"2021-02-12T17:20:55Z","comment":"Sorry, rusty on the protocol. Fixed."},{"author":"gebner","date":"2021-02-25T09:31:50Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T10:25:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1977779178)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1977779046)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1977779011)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1977779261)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1977779240)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1977779325)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1977779404)"}],"review_discussion":[{"author":"bryangingechen","file":"tests/lean/eformat.lean","date":"2021-02-12T18:43:25Z","comment":"Is there a `ite`/`dite`-related reason why these were changed to `def`s?"},{"author":"dselsam","file":"tests/lean/eformat.lean","date":"2021-02-12T18:45:41Z","comment":"It is an unrelated fix. The test compares against an expected output, but the order of the traces was nondeterministic."},{"author":"gebner","file":"tests/lean/eformat.lean","date":"2021-02-12T18:48:52Z","comment":"The *order* should always be deterministic (the tests run with `-j0`).  Are you maybe referring to some automatically generated names?"},{"author":"dselsam","file":"tests/lean/eformat.lean","date":"2021-02-12T18:51:12Z","comment":"I was typing a clarification :) I was debugging the test manually (it broke for `ite`-related reasons), and the nondeterminism was annoying. I realized after writing my previous comment that probably many tests rely on each test being run with a single thread, in which case I should probably revert this change."},{"author":"dselsam","file":"tests/lean/eformat.lean","date":"2021-02-12T18:53:12Z","comment":"Pushed a revert."}],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"9f6e24b2724b20cd7aa4e07e3c57a2ec9c60eb44","message":"chore: sync 'ite' and 'dite' with lean4","date":"2021-02-12T03:35:39Z"},{"author":"dselsam","committer":"dselsam","hash":"c4a42c3ba11a9d05c0e422a4a0fa31ed2d809417","message":"chore: fix tests","date":"2021-02-12T17:20:22Z"},{"author":"dselsam","committer":"dselsam","hash":"69921bdd2f373aabcf8b22eb7472f8ef47819e17","message":"chore: revert test to use 'example' instead of 'def'","date":"2021-02-12T18:52:09Z"}]},{"author":"shingtaklam1324","number":530,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":2,"deletions":1}],"state":"closed","open_date":"2021-02-11T04:11:17Z","update_date":"2021-02-25T11:04:55Z","discussion":[{"author":"shingtaklam1324","date":"2021-02-11T09:41:57Z","comment":"There is also a set of tests at https://github.com/leanprover-community/mathlib/pull/6150/files#diff-bf742064f8ef6e229c0fa7b5df4c4b97b090242eae93579926f970c5856ccaa8 but I'm not sure how the tests work in this repo."},{"author":"bryangingechen","date":"2021-02-11T15:53:13Z","comment":"There's some explanation [here](https://github.com/leanprover-community/lean/blob/master/doc/fixing_tests.md), but it should also be fine to let CI tell us what's broken:\r\n\r\nbors try"},{"author":"bors[bot]","date":"2021-02-11T16:04:07Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1880654657)"},{"author":"bryangingechen","date":"2021-02-11T16:32:52Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-11T17:24:03Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1880929482)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1880929850)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1880929642)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1880929513)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1880929670)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1880929766)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1880929924)"},{"author":"gebner","date":"2021-02-25T09:35:09Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"review_discussion":[{"author":"bryangingechen","file":"library/init/meta/interactive.lean","date":"2021-02-11T16:05:02Z","comment":"Ah, you probably don't want to change the name here!\r\n```suggestion\r\nmeta def specialize (p : parse texpr) : tactic unit :=\r\n```"},{"author":"shingtaklam1324","file":"library/init/meta/interactive.lean","date":"2021-02-11T16:32:16Z","comment":"ah yes, I've copied this from the PR. The prime shouldn't be there."}],"tags":[],"commits":[{"author":"shingtaklam1324","committer":"web-flow","hash":"ce86c7d506fa717f1188c723bf658c9579ee52e9","message":"Change the behaviour of `specialize` to put goals from underscores first","date":"2021-02-11T04:09:51Z"},{"author":"shingtaklam1324","committer":"web-flow","hash":"49839fd7d6a287883c0ee68fe3e7fca6fccd4ef6","message":"Update library/init/meta/interactive.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2021-02-11T16:31:51Z"}]},{"author":"fpvandoorn","number":528,"diff_summary":[{"file":"extras/latex/lstlean.tex","status":"M","additions":16,"deletions":2}],"state":"closed","open_date":"2021-02-03T00:23:42Z","update_date":"2021-02-11T17:18:27Z","discussion":[{"author":"gebner","date":"2021-02-11T16:34:03Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-11T17:18:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1880940416)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1880940326)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1880940304)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1880940505)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1880940479)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1880940638)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1880940562)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"d5c4952ba84ae567aea83ec1bfd46aa7a952e87c","message":"feat(lstlean.tex): add some symbols","date":"2021-02-03T00:22:17Z"}]},{"author":"pechersky","number":527,"diff_summary":[{"file":"library/init/data/fin/basic.lean","status":"D","additions":37,"deletions":136},{"file":"library/init/data/fin/default.lean","status":"D","additions":37,"deletions":136},{"file":"library/init/data/fin/ops.lean","status":"D","additions":37,"deletions":136},{"file":"library/init/data/unsigned/basic.lean","status":"D","additions":37,"deletions":136},{"file":"library/init/data/unsigned/ops.lean","status":"D","additions":37,"deletions":136},{"file":"tests/lean/397c.lean.expected.out","status":"D","additions":37,"deletions":136},{"file":"tests/lean/398c.lean.expected.out","status":"D","additions":37,"deletions":136},{"file":"tests/lean/run/array1.lean","status":"D","additions":37,"deletions":136},{"file":"tests/lean/tc_caching.lean.expected.out","status":"D","additions":37,"deletions":136}],"state":"closed","open_date":"2021-02-02T18:12:41Z","update_date":"2021-03-08T16:04:57Z","discussion":[{"author":"bryangingechen","date":"2021-02-02T18:15:34Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-02T18:58:43Z","comment":"## try\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1816814980)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1816815167)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1816815005)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1816815130)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1816815192)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1816815223)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1816815085)"},{"author":"pechersky","date":"2021-02-02T19:50:30Z","comment":"It's used in `init/meta/name`:\r\n```\r\n/-- Reflect a C++ name object. The VM replaces it with the C++ implementation. -/\r\ninductive name\r\n| anonymous  : name\r\n| mk_string  : string → name → name\r\n| mk_numeral : unsigned → name → name\r\n```\r\n\r\nSome parts of the code supply a numeral directly for `mk_numeral`. I initally ripped all the `unsigned/ops` out, but that broke the `tests/lean/run/quote1.lean` at `#check ``f`. So I had to bring back the most basic support for numerals for unsigned.\r\n\r\nHowever, I ripped out numeral support for `fin`, and had to change `tests/lean/run/array1.lean` to explicit construction of a `2` using constructor syntax."},{"author":"bryangingechen","date":"2021-02-02T19:53:33Z","comment":"Right, I saw that but I wasn't sure how the `add` operation was used there. Maybe something in the C++?"},{"author":"gebner","date":"2021-03-08T16:02:04Z","comment":"Given the future of Lean 4, I don't think this is the right direction.  Lean 4 has `Fin` in core, and it has the same operations that we will soon have in Lean 3 (see #541)."}],"review_discussion":[],"tags":[],"commits":[{"author":"pechersky","committer":"pechersky","hash":"8e5b6c71e661004b28a030af5866892a7b238528","message":"refactor(*): remove {fin.unsigned} ops","date":"2021-02-02T16:52:30Z"},{"author":"pechersky","committer":"pechersky","hash":"427fbe3c4f4049c8d6ea73ba51369e201e64f8b4","message":"Merge branch 'master' into pechersky/remove-fin-ops","date":"2021-02-02T16:56:23Z"},{"author":"pechersky","committer":"pechersky","hash":"f135a6dfcb9ae2ca8fa183b754fcfa715e0a1b3f","message":"refactor add into unsigned","date":"2021-02-02T18:07:39Z"},{"author":"pechersky","committer":"pechersky","hash":"89c405c46d7eb617a25e294b3b4d6eb73496f142","message":"edit test outs to remove fin instances","date":"2021-02-02T18:07:59Z"},{"author":"pechersky","committer":"pechersky","hash":"566fa77ec6c3bb3a7796d5f14a319b383d89e9e3","message":"explicitly construct 2","date":"2021-02-02T18:08:16Z"},{"author":"pechersky","committer":"pechersky","hash":"1eb5bc0679fb59fca3c1920e3e4b3ebc16f36fab","message":"remove old fin file","date":"2021-02-02T18:13:24Z"}]},{"author":"eric-wieser","number":526,"diff_summary":[{"file":"library/init/logic.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-02-01T12:50:26Z","update_date":"2021-02-01T14:27:58Z","discussion":[{"author":"gebner","date":"2021-02-01T13:44:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-01T14:27:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1806986740)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1806986896)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1806986873)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1806986821)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1806986790)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1806986648)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1806986942)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"22b2c198aba066a81547244914014d85473e7c29","message":"fix(library/init/logic): generalize exists_unique_of_exists_of_unique to sort","date":"2021-02-01T12:50:13Z"}]},{"author":"pechersky","number":525,"diff_summary":[{"file":"library/init/data/fin/ops.lean","status":"D","additions":0,"deletions":124},{"file":"library/init/data/unsigned/ops.lean","status":"D","additions":0,"deletions":124}],"state":"closed","open_date":"2021-02-01T01:42:17Z","update_date":"2021-02-01T02:42:39Z","discussion":[{"author":"bryangingechen","date":"2021-02-01T02:28:57Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-01T02:35:29Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1803536702)"},{"author":"bryangingechen","date":"2021-02-01T02:41:09Z","comment":"Looks like the build errors start [here](https://github.com/leanprover-community/lean/runs/1803536702#step:5:992). You could potentially try removing more stuff, but it looks to me like later on the widget code may require some of this, so I'm not sure if this will ultimately be successful."},{"author":"pechersky","date":"2021-02-01T02:42:39Z","comment":"Ah, I see, doc-gen doesn't gather the \"Imported by\" in https://leanprover-community.github.io/mathlib_docs/init/data/fin/ops.html to properly point to `library/init/data/fin/default`. OK, more work necessary before this can be done."}],"review_discussion":[],"tags":[],"commits":[{"author":"pechersky","committer":"pechersky","hash":"05166e58309ceb64127d10c29d0ab9e704981c87","message":"refactor(data/{fin,unsigned}/ops): remove to be ported to mathlib","date":"2021-01-25T23:06:15Z"}]},{"author":"dselsam","number":524,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"A","additions":737,"deletions":15},{"file":".gitignore","status":"A","additions":737,"deletions":15},{"file":"script/mk_all.sh","status":"A","additions":737,"deletions":15},{"file":"script/rm_all.sh","status":"A","additions":737,"deletions":15},{"file":"src/frontends/lean/parser_config.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/CMakeLists.txt","status":"A","additions":737,"deletions":15},{"file":"src/library/attribute_manager.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/attribute_manager.h","status":"A","additions":737,"deletions":15},{"file":"src/library/aux_recursors.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/class.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/export_decl.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/inverse.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/module.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/module.h","status":"A","additions":737,"deletions":15},{"file":"src/library/noncomputable.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/private.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/projection.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/protected.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/reducible.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/relation_manager.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/scoped_ext.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/scoped_ext.h","status":"A","additions":737,"deletions":15},{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/tactic/user_attribute.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/tlean_exporter.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/tlean_exporter.h","status":"A","additions":737,"deletions":15},{"file":"src/library/unification_hint.cpp","status":"A","additions":737,"deletions":15},{"file":"src/library/user_recursors.cpp","status":"A","additions":737,"deletions":15},{"file":"src/shell/lean.cpp","status":"A","additions":737,"deletions":15},{"file":"src/util/file_lock.cpp","status":"A","additions":737,"deletions":15},{"file":"src/util/lean_path.cpp","status":"A","additions":737,"deletions":15},{"file":"src/util/lean_path.h","status":"A","additions":737,"deletions":15}],"state":"closed","open_date":"2021-01-29T19:24:22Z","update_date":"2021-02-02T10:31:58Z","discussion":[{"author":"digama0","date":"2021-01-29T19:29:17Z","comment":"Does the `.tlean` format have more information than the `.olean` files? Why not process `.olean` directly?"},{"author":"dselsam","date":"2021-01-29T21:30:11Z","comment":"A few considerations.\r\n\r\n- The `tlean_exporter` unfolds all macros, but currently mathlib cannot be built at trust level 0. Thus as is, the `.olean` files will necessarily not unfold all macros and so will contain different information than the `.tlean` files.\r\n- Generally speaking, the `.tlean` files have less information. Writing a separate exporter allows us to add features incrementally. If we tried to deserialize the `.olean` files directly, we would need to implement deserializers for every corresponding serializer before deserialization would work at all.\r\n- The `.tlean` format is simpler and easier to parse (at the cost of being less space-efficient).\r\n- It may come in handy to be able store additional information that is not needed for the `.olean`s.\r\n- Realistically, I would prefer to simply never have this branch merged than to rewrite it to parse the `.olean`s."},{"author":"digama0","date":"2021-01-29T21:52:39Z","comment":"Regarding macros, it seems like we will want access to the fact that a macro existed at a certain place, since a lot of annotations take that form. If the export happens at trust level 0 and everything is being unfolded, then the resulting objects will be harder to work with programmatically on the lean 4 side for any use besides handing them straight off to the kernel.\r\n\r\nI think the name `--port` is not representative. Perhaps a better name is `--make --tlean` or `--make --text`, since this doesn't really have anything to do with porting, it's just an ascii version of the olean files. Other approaches for controlling whether olean or tlean or both are generated would also work."},{"author":"dselsam","date":"2021-01-30T01:49:28Z","comment":"> The export shouldn't happen when writing the olean files though. Can you move this to `shell/lean.cpp` please? That is, do something like we do now for `--export`:\r\n> \r\n> ```c++\r\n> if (port_mode) {\r\n>     for (auto & mod : mods) {\r\n>         auto res = get(mod.m_mod_info->m_result);\r\n> \r\n>         auto tlean_fn = tlean_of_lean(mod.m_id);\r\n>         exclusive_file_lock output_lock(tlean_fn);\r\n>         std::ofstream out(tlean_fn);\r\n>         write_module_tlean(*res.m_loaded_module, out);\r\n>         out.close();\r\n>         if (!out) throw exception(\"failed to write tlean file\");\r\n>     }\r\n> }\r\n> ```\r\n\r\nI updated the PR to do this at the end but in parallel. Could you please sanity check my use of library tasks?\r\n"},{"author":"dselsam","date":"2021-01-30T01:52:47Z","comment":"> I think the name `--port` is not representative. Perhaps a better name is `--make --tlean` or `--make --text`, since this doesn't really have anything to do with porting, it's just an ascii version of the olean files. Other approaches for controlling whether olean or tlean or both are generated would also work.\r\n\r\nAgreed. I will change to `--tlean`."},{"author":"dselsam","date":"2021-01-30T02:01:55Z","comment":"> Regarding macros, it seems like we will want access to the fact that a macro existed at a certain place, since a lot of annotations take that form. If the export happens at trust level 0 and everything is being unfolded, then the resulting objects will be harder to work with programmatically on the lean 4 side for any use besides handing them straight off to the kernel.\r\n\r\nI agree we may want more annotations, though we can get pretty far with kernel-friendly terms such as `id_delta`. For example, `simp` could tag the proofs it returns with `tagSimp`."},{"author":"dselsam","date":"2021-02-01T14:19:05Z","comment":"> The task code is ok AFAICT.\r\n\r\nThe task code isn't always generating all the `.tlean` files for some reason. If you don't know what the issue is, perhaps we should just stick with the sequential version for now. It does not get run very often."},{"author":"gebner","date":"2021-02-01T14:33:34Z","comment":"bors cancel"},{"author":"gebner","date":"2021-02-01T14:33:40Z","comment":"bors r-"},{"author":"bors[bot]","date":"2021-02-01T14:33:41Z","comment":"Canceled."},{"author":"gebner","date":"2021-02-01T14:41:25Z","comment":"Ok, I'm really confused what I've been reviewing.  You have both a `lean` and a `lean3` repository, and they have *slightly* different code.  I have been testing the code from `lean`, but I should've looked at `lean3`, right?\r\n\r\nCould you also please check the \"allow edits from maintainers\" checkbox in the PR?"},{"author":"dselsam","date":"2021-02-01T14:56:02Z","comment":"This PR is from `dselsam/lean3:master`. GitHub would not let me PR from `dselsam/lean`. \r\n\r\n> Could you also please check the \"allow edits from maintainers\" checkbox in the PR?\r\n\r\nIt was already checked. \r\n\r\nHere is the task code I was referring to that doesn't seem to always finish waiting: \r\nhttps://github.com/dselsam/lean3/blob/master/src/shell/lean.cpp#L756-L773"},{"author":"gebner","date":"2021-02-01T15:14:13Z","comment":"Apparently, the locking code doesn't like parallelism too much:\r\n```\r\nerror: failed to lock file 1 '/home/gebner/mathlib/src/algebraic_geometry/structure_sheaf.tlean': Too many open files\r\n```\r\n\r\nRemoving the `exclusive_file_lock` doesn't fix all the errors either, so I've just reverted it back to the sequential version."},{"author":"gebner","date":"2021-02-01T15:15:24Z","comment":"bors try"},{"author":"dselsam","date":"2021-02-01T15:17:11Z","comment":"@gebner Great find, thanks! "},{"author":"bors[bot]","date":"2021-02-01T15:25:33Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1807623584)"},{"author":"gebner","date":"2021-02-01T16:21:18Z","comment":"I've added the tlean export to the CI.  Apparently it fails in debug mode: https://github.com/dselsam/lean3/runs/1807719169\r\n```\r\nexporting /home/runner/work/lean3/lean3/library/init/core.tlean\r\nLEAN ASSERTION VIOLATION\r\nFile: /home/runner/work/lean3/lean3/src/frontends/lean/parse_table.cpp\r\nLine: 129\r\nTask: : \r\nc->m_kind == action_kind::Expr || c->m_kind == action_kind::Exprs || c->m_kind == action_kind::ScopedExpr || c->m_kind == action_kind::Binder || c->m_kind == action_kind::Binders\r\n(C)ontinue, (A)bort/exit, (S)top/trap\r\n```"},{"author":"dselsam","date":"2021-02-01T16:27:09Z","comment":"Thanks, I will fix."},{"author":"gebner","date":"2021-02-01T19:09:46Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-01T19:20:19Z","comment":"## try\n\nBuild failed:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1809255233)"},{"author":"bryangingechen","date":"2021-02-02T01:48:17Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-02T02:24:22Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1811376793)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1811376735)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1811376826)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1811376757)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1811376806)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1811376771)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1811376685)"},{"author":"gebner","date":"2021-02-02T09:48:35Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-02T10:31:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1813539327)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1813539232)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1813539190)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1813539050)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1813539018)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1813539120)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1813539281)"}],"review_discussion":[{"author":"gebner","file":"src/library/export_decl.cpp","date":"2021-01-29T21:40:20Z","comment":"This change doesn't seem necessary?"},{"author":"dselsam","file":"src/library/export_decl.cpp","date":"2021-01-29T21:59:21Z","comment":"It is a bug fix. Before, https://github.com/leanprover-community/lean/blob/7b63acc2637ffd3c7ca2b75a893facdc20259336/src/library/export_decl.cpp#L90-L92 called `add_export_decl` which added the modifications to the environment again during `perform`. So essentially, every export decl ended up in every `.olean` file. I factored out the part of the code that is shared with `add_export_decl`, and now `add_export_decl` calls `activate_export_decl`: https://github.com/leanprover-community/lean/blob/7b63acc2637ffd3c7ca2b75a893facdc20259336/src/library/export_decl.cpp#L142-L145"},{"author":"gebner","file":"src/library/export_decl.cpp","date":"2021-02-01T13:45:31Z","comment":":+1: "}],"tags":[],"commits":[{"author":"dselsam","committer":"dselsam","hash":"a199e5cb34a8f8fd7499156a29a70f9357bbaf94","message":"feat(src/library/tlean_exporter): export textual .tlean files","date":"2021-01-30T03:32:56Z"},{"author":"dselsam","committer":"dselsam","hash":"427a0d1286b7e0a03d72081ba407c89d49faaa81","message":"fix(src/shell/lean.cpp): wait for all tlean tasks","date":"2021-01-30T19:07:50Z"},{"author":"dselsam","committer":"dselsam","hash":"49915bfa3a923d12246bbfd2844dd26d5e218d5d","message":"fix(src/library/module.cpp): flush .tlean output","date":"2021-01-30T20:08:34Z"},{"author":"gebner","committer":"gebner","hash":"94c18754b68e529af0a7272bc83489ef88c92678","message":"Progress output for tlean export","date":"2021-02-01T15:05:53Z"},{"author":"gebner","committer":"gebner","hash":"2b3d0ec6a3bd4d72bbfab32bdaa0490b5394d6bc","message":"Better error message for failed file lock","date":"2021-02-01T15:05:57Z"},{"author":"gebner","committer":"gebner","hash":"82511487d90fdda3d49979321aec63ad93444a00","message":"Switch back to sequential exporting.","date":"2021-02-01T15:12:19Z"},{"author":"gebner","committer":"gebner","hash":"aefe3b98a51f68ca861bf621be3f56f9b2584fad","message":"Add CI to test tlean generation.","date":"2021-02-01T15:15:06Z"},{"author":"gebner","committer":"gebner","hash":"da3792cc25f1be0a57e7559bee16a873e7b7ebac","message":"Do not flush on every line.","date":"2021-02-01T15:24:02Z"},{"author":"gebner","committer":"gebner","hash":"4f3dbdbe88fce1c18a0a4ffd38a7a2f7f1a99264","message":"Style.","date":"2021-02-01T15:27:50Z"},{"author":"dselsam","committer":"dselsam","hash":"82f36b6d25c694672f323ad09edc61321b814675","message":"fix(src/frontends/lean/parser_config.cpp): singletons may not support actions","date":"2021-02-01T17:06:47Z"},{"author":"dselsam","committer":"dselsam","hash":"5b34d1e7002316dccf6e8f79f9097618f47bd0b7","message":"fix(src/frontends/lean/parser_config.cpp): prefix/postfix may not support actions","date":"2021-02-02T01:14:29Z"}]},{"author":"Julian-Kuelshammer","number":523,"diff_summary":[{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":4,"deletions":0}],"state":"closed","open_date":"2021-01-28T21:04:02Z","update_date":"2021-01-28T21:12:50Z","discussion":[{"author":"gebner","date":"2021-01-28T21:12:50Z","comment":"Additional lemmas should always go to mathlib.  Only stuff that needs to be in core (e.g. because it used to define tactics or overriden in the VM) should be in core."},{"author":"bryangingechen","date":"2021-01-28T21:36:51Z","comment":"Specifically, this lemma should go in `data.nat.basic` somewhere in this section: https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/basic.lean#L734"}],"review_discussion":[],"tags":[],"commits":[{"author":"Julian-Kuelshammer","committer":"web-flow","hash":"9a6e9ff09ea2743aae3deae8afa64afa515d76f0","message":"feat(library/init/data/nat/lemmas): add div_add_mod\n\nmathlib issue #1534 asks to add this lemma. It was added to mathlib for int, pnat and euclidean-domains. For nat it would make most sense to add it here if I understand things correctly.","date":"2021-01-28T21:03:23Z"}]},{"author":"bryangingechen","number":522,"diff_summary":[{"file":"README.md","status":"M","additions":9,"deletions":3},{"file":"doc/changes.md","status":"M","additions":9,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":9,"deletions":3}],"state":"closed","open_date":"2021-01-26T20:54:36Z","update_date":"2021-01-26T21:37:52Z","discussion":[{"author":"bryangingechen","date":"2021-01-26T20:55:19Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-26T21:37:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1772320391)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1772320474)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1772320458)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1772320644)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1772320615)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1772320558)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1772320685)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"a314baf8997df53dc852e810b44065db3ba67693","message":" chore(*): release 3.26.0c","date":"2021-01-26T20:54:05Z"}]},{"author":"EdAyers","number":520,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"M","additions":142,"deletions":2},{"file":"tests/lean/pp_tagged.lean","status":"M","additions":142,"deletions":2},{"file":"tests/lean/pp_tagged.lean.expected.out","status":"M","additions":142,"deletions":2}],"state":"closed","open_date":"2021-01-24T19:06:30Z","update_date":"2021-01-25T09:20:03Z","discussion":[{"author":"gebner","date":"2021-01-25T08:43:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-25T09:20:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1760647378)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1760647287)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1760647268)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1760647332)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1760647310)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1760647224)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1760647422)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"hash":"8e06f6c6f81b51a3f87c737d8462db33a81207a9","message":"fix(pp): bug in addresses of ∃ (x > 0), x = x\n\nIt was getting the arguments shifted by one\nbecause of a bug in pp_binders.","date":"2021-01-24T19:04:33Z"}]},{"author":"gebner","number":519,"diff_summary":[{"file":"README.md","status":"M","additions":13,"deletions":2},{"file":"doc/changes.md","status":"M","additions":13,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":13,"deletions":2}],"state":"closed","open_date":"2021-01-20T18:26:31Z","update_date":"2021-01-21T09:36:23Z","discussion":[{"author":"gebner","date":"2021-01-21T08:56:32Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-21T09:36:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1740595613)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1740595802)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1740597011)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1740597138)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1740597129)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1740595840)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1740597169)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"79f97c7148546fd6152987bc62e8878a9c8b3706","message":"chore(*): release 3.25.0","date":"2021-01-20T18:25:55Z"}]},{"author":"ChrisHughes24","number":518,"diff_summary":[{"file":"library/init/meta/simp_tactic.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2021-01-16T21:02:47Z","update_date":"2021-01-17T17:09:04Z","discussion":[{"author":"gebner","date":"2021-01-17T16:34:50Z","comment":"I'm not sure this was originally a typo, `r` is \"infix\" here.  But it's indeed misleading.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-01-17T17:09:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1717350866)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1717350753)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1717350746)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1717350804)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1717350786)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1717350851)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1717350829)"}],"review_discussion":[],"tags":[],"commits":[{"author":"ChrisHughes24","committer":"web-flow","hash":"098a5add2474f844c7356a49a5c3c28725ce3ecf","message":"fix(library/init/meta/simp_tactic): correct minor type","date":"2021-01-16T21:02:39Z"}]},{"author":"jesse-michael-han","number":517,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"A","additions":84,"deletions":0},{"file":"library/init/util.lean","status":"A","additions":84,"deletions":0},{"file":"src/library/vm/vm.cpp","status":"A","additions":84,"deletions":0},{"file":"src/library/vm/vm_aux.cpp","status":"A","additions":84,"deletions":0},{"file":"tests/lean/try_for_time.lean","status":"A","additions":84,"deletions":0},{"file":"tests/lean/try_for_time.lean.expected.out","status":"A","additions":84,"deletions":0}],"state":"closed","open_date":"2021-01-15T15:47:23Z","update_date":"2021-01-15T20:45:16Z","discussion":[{"author":"gebner","date":"2021-01-15T20:09:40Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-15T20:45:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1710927145)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1710926996)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1710926975)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1710927060)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1710927034)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1710927100)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1710927187)"}],"review_discussion":[{"author":"bryangingechen","file":"library/init/meta/tactic.lean","date":"2021-01-15T16:38:32Z","comment":"```suggestion\r\n/-- Execute `tac` for `max` milliseconds. Useful due to variance\r\n```"},{"author":"bryangingechen","file":"library/init/util.lean","date":"2021-01-15T16:38:45Z","comment":"```suggestion\r\n  the thunk is interrupted if it takes more than `max` milliseconds to compute it.\r\n```"},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2021-01-15T16:57:41Z","comment":"```suggestion\r\n    } catch (lean::interrupted &) {\r\n```"},{"author":"gebner","file":"src/library/vm/vm_aux.cpp","date":"2021-01-15T16:59:07Z","comment":"You also need to provide a (dummy / always throwing an exception / always executing the thunk) implementation for the javascript version.\r\n```suggestion\r\nvm_obj vm_try_for_time (vm_obj const &, vm_obj const & n, vm_obj const & thunk) {\r\n#if defined(LEAN_MULTI_THREAD)\r\n```"}],"tags":[],"commits":[{"hash":"60dddb233d8b654af9d84a53b578d5a3b9b0b2df","message":"feat(): `try_for_time` interruption function\n\nwhitespace\n\nwhitespace\n\nstyle","date":"2021-01-15T15:41:05Z"},{"author":"jesse-michael-han","committer":"web-flow","hash":"6f6626816599fea67a2537ad90fa63e419a9ad38","message":"Update library/init/meta/tactic.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2021-01-15T17:30:27Z"},{"author":"jesse-michael-han","committer":"web-flow","hash":"e29a9097375fe112654c4b178b164ad6058c0ba6","message":"Update library/init/util.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2021-01-15T17:30:36Z"},{"author":"jesse-michael-han","committer":"web-flow","hash":"eaa51db44bf2d220971a144c34e50657ea2bfd7a","message":"Update src/library/vm/vm.cpp\n\nCo-authored-by: Gabriel Ebner <gebner@gebner.org>","date":"2021-01-15T17:30:42Z"},{"author":"jesse-michael-han","committer":"web-flow","hash":"6d479a40101006e573d1c1786abb037f38991d2b","message":"Update src/library/vm/vm_aux.cpp\n\nCo-authored-by: Gabriel Ebner <gebner@gebner.org>","date":"2021-01-15T17:31:06Z"},{"hash":"58e909f6da4e981daf944bd88ffb057fe35ba273","message":"chore(library/vm/vm_aux): dummy implementation for `vm_try_for_time`","date":"2021-01-15T18:00:16Z"}]},{"author":"gebner","number":514,"diff_summary":[{"file":"README.md","status":"M","additions":21,"deletions":2},{"file":"doc/changes.md","status":"M","additions":21,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":21,"deletions":2}],"state":"closed","open_date":"2021-01-04T12:14:39Z","update_date":"2021-01-04T13:01:54Z","discussion":[{"author":"gebner","date":"2021-01-04T12:20:59Z","comment":"Mathlib builds w/o changes."},{"author":"gebner","date":"2021-01-04T12:21:29Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-04T13:01:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1643690229)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1643690173)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1643690153)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1643690115)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1643690099)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1643680071)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1643690198)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f0460e125ac3638919663a956a261e3d0d6a2a55","message":"chore(*): release 3.24.0","date":"2021-01-04T12:13:45Z"}]},{"author":"EdAyers","number":513,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"A","additions":15,"deletions":3},{"file":"tests/lean/html_cmd.lean","status":"A","additions":15,"deletions":3},{"file":"tests/lean/html_cmd.lean.expected.out","status":"A","additions":15,"deletions":3}],"state":"closed","open_date":"2021-01-02T17:27:30Z","update_date":"2021-01-03T11:47:24Z","discussion":[{"author":"EdAyers","date":"2021-01-03T10:27:29Z","comment":"I wanted to double check that it doesn't break mathlib but I've done that now"},{"author":"gebner","date":"2021-01-03T11:00:54Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-03T11:47:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1639321797)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1639321784)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1639321748)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1639321820)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1639321716)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1639321705)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1639321767)"}],"review_discussion":[{"author":"gebner","file":"library/init/meta/widget/basic.lean","date":"2021-01-02T18:22:44Z","comment":"```suggestion\r\n{ F := λ c, π → html α,\r\n  coe := λ c p, html.of_component p c }\r\n```"}],"tags":[],"commits":[{"hash":"fc91cfe775ed554035e4ea97376970c7beece05b","message":"Fix #512","date":"2021-01-02T17:25:08Z"},{"author":"EdAyers","committer":"web-flow","hash":"6551edf566f37ef3d544c2a98ca46b7eab637e64","message":"Update library/init/meta/widget/basic.lean\n\nCo-authored-by: Gabriel Ebner <gebner@gebner.org>","date":"2021-01-03T10:27:42Z"}]},{"author":"EdAyers","number":510,"diff_summary":[{"file":"library/init/meta/environment.lean","status":"A","additions":115,"deletions":34},{"file":"library/init/meta/expr.lean","status":"A","additions":115,"deletions":34},{"file":"library/init/meta/lean/parser.lean","status":"A","additions":115,"deletions":34},{"file":"src/frontends/lean/builtin_cmds.cpp","status":"A","additions":115,"deletions":34},{"file":"src/frontends/lean/builtin_cmds.h","status":"A","additions":115,"deletions":34},{"file":"src/library/vm/vm_environment.cpp","status":"A","additions":115,"deletions":34},{"file":"src/library/vm/vm_expr.cpp","status":"A","additions":115,"deletions":34},{"file":"src/library/vm/vm_parser.cpp","status":"A","additions":115,"deletions":34},{"file":"tests/lean/json.lean","status":"A","additions":115,"deletions":34},{"file":"tests/lean/parser_run.lean","status":"A","additions":115,"deletions":34},{"file":"tests/lean/parser_run.lean.expected.out","status":"A","additions":115,"deletions":34}],"state":"closed","open_date":"2020-12-27T15:47:47Z","update_date":"2021-01-08T18:23:35Z","discussion":[{"author":"EdAyers","date":"2020-12-27T15:49:01Z","comment":"Currently the test breaks because for some reason when the parser is initialised it doesn't pick up the passed string."},{"author":"EdAyers","date":"2021-01-08T13:12:43Z","comment":"A test is failing:\r\n```lean\r\nrun_cmd do {ps ← lean.parser.mk_parser_state, tactic.trace ps.cur_pos}\r\n```\r\n\r\nthis code is nondeterministic. I've observed it producing `⟨1,0⟩` or `⟨32641, 1932892776⟩` or `⟨0,2⟩` :-/\r\nI guess somewhere a dead pointer is being dereferenced."},{"author":"EdAyers","date":"2021-01-08T13:19:08Z","comment":"Ok I think that the scanner does not initialise position information until scanning has started, so if you immediately read `scanner.m_line` you just get stack rubble. So I am going to remove this test."},{"author":"gebner","date":"2021-01-08T17:43:23Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-08T18:23:35Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1670195937)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1670195743)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1670195721)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1670195826)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1670195798)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1670195877)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1670195663)"}],"review_discussion":[{"author":"gebner","file":"library/init/meta/lean/parser.lean","date":"2021-01-08T15:56:53Z","comment":"```suggestion\r\n```\r\n\r\nThis is completely unsafe and undefined behavior, please remove.  The `parser` object only lives for the duration of `parser.run`, afterwards it's illegal to access it."},{"author":"gebner","file":"library/init/meta/lean/parser.lean","date":"2021-01-08T15:58:56Z","comment":"```suggestion\r\n```\r\nThis function also seems like a bad idea.  The `parser_state` is just a useful fiction to make the monad work, you can't really use it for backtracking or anything else outside of the monad."},{"author":"jesse-michael-han","file":"library/init/meta/lean/parser.lean","date":"2021-01-08T17:09:49Z","comment":"Thanks for the feedback Gabriel! Removed as requested."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"59b21940988d2a44db8638cd13271f3dfd0fea48","message":"feat(vm_parser): add parser.run\n\nFirst draft","date":"2020-12-27T15:25:05Z"},{"author":"EdAyers","committer":"EdAyers","hash":"54f4a58835784ae9ac0af36f9c9ddabbdb299752","message":"add test\n\ncurrently fails because scanner doesn't seem to be picking up the string.","date":"2020-12-27T15:45:41Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0178b36f1767911ec1b9b9574466aa8ff22577e2","message":"Move parser_run test to proper dir","date":"2020-12-27T21:25:27Z"},{"hash":"53b984b0fa34a8e0d7b13c8898ab238d492470e0","message":"run', mk_parser_state","date":"2020-12-27T21:33:34Z"},{"hash":"db1cdf5f48e31285ce8a6434f7de99364f3cb1a7","message":"fix(library/vm/vm_json): ensure json.parse/json.unparse are inverses\n\n`to_obj` was previously reversing `json.array`s\n\nadded guards to test file\n\nchore(): make tests pass","date":"2020-12-27T21:34:38Z"},{"hash":"56111858df60b6f9d5e177092f3fb6d4bddaafe1","message":"noisier failure message","date":"2020-12-27T21:34:38Z"},{"hash":"b4a1f234e49ba5f8d8ad9fbcf0b15e8bea5d0f10","message":"use format macro","date":"2020-12-27T21:34:38Z"},{"hash":"556400c47fcac928d7df4b72a64261d6d846f429","message":"extra test","date":"2020-12-27T21:54:55Z"},{"hash":"3dc5ee19adfca735d80ba251a2d5c07c09925358","message":"bump version","date":"2020-12-28T18:47:56Z"},{"hash":"aa47b5f4907abc351a3e542235db35aafd6c0415","message":"make get_state private","date":"2020-12-28T19:06:07Z"},{"hash":"a89e08de0220b179bbf1d4f25e9c8fa40c3bd64a","message":"feat(): expose environment.execute_open","date":"2020-12-29T03:01:25Z"},{"hash":"ad0c481ae502595e73263aca56c5d0731f2363a0","message":"chore(): style","date":"2020-12-29T19:00:54Z"},{"hash":"bdc3ceae422ba18df88b041995bae231ad8d467d","message":"feat(): expose `expr.is_string_macro`\n\ntypo","date":"2021-01-03T20:26:02Z"},{"author":"EdAyers","committer":"EdAyers","hash":"11d43a60427d3812a65c3db7f920f1ba38db4e01","message":"Merge tag 'lean-tpe' into parser_state","date":"2021-01-07T21:53:02Z"},{"author":"EdAyers","committer":"EdAyers","hash":"47dfa0c8efecfba3e9174f7f240c3f1b2d066ff4","message":"Merge branch 'master' into parser_state","date":"2021-01-07T21:54:35Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4be5d5cfea3c52d75ec8473eb9ae87c8d4ec9bca","message":"Remove string arg from parser.run","date":"2021-01-07T22:37:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0827a5350dc35c837cb4691e5ba833fa3f7533f8","message":"Remove linebreak","date":"2021-01-07T22:39:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"fda12a82b8b636186ce82d94db5adc9498aa210a","message":"Fix test","date":"2021-01-08T12:00:47Z"},{"author":"EdAyers","committer":"EdAyers","hash":"582a09c917c4e19a878a2790c8351fdfb6a22123","message":"Make lean.parser.get_state protected","date":"2021-01-08T12:09:05Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ba9db0c3342fb46fcbca6cbd0f74f003670cd1a2","message":"Merge remote-tracking branch 'jesse/lean-tpe' into parser_state","date":"2021-01-08T12:49:26Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ac875feb34dfd7114b35cdd2dc8977686df7f480","message":"Remove test for cur_pos.\n\nThe test was pulling an uninitialised variable on the scanner.\nRather than fix scanner I will just accept that the behaviour is\nundefined and so this was not a valid test.","date":"2021-01-08T13:20:43Z"},{"hash":"4823d58cec42555118e02b8f4db349d74151653c","message":"fix(parser): rm mk_parser_state, get_state","date":"2021-01-08T16:40:01Z"}]},{"author":"jesse-michael-han","number":509,"diff_summary":[{"file":"src/library/vm/vm_json.cpp","status":"M","additions":49,"deletions":9},{"file":"tests/lean/json.lean","status":"M","additions":49,"deletions":9},{"file":"tests/lean/json.lean.expected.out","status":"M","additions":49,"deletions":9}],"state":"closed","open_date":"2020-12-26T21:06:34Z","update_date":"2020-12-28T04:16:04Z","discussion":[{"author":"EdAyers","date":"2020-12-27T21:21:46Z","comment":"lgtm!"},{"author":"EdAyers","date":"2020-12-27T21:22:09Z","comment":"I wonder if I can \r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-12-27T21:22:10Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make EdAyers a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/EdAyers)\n"},{"author":"EdAyers","date":"2020-12-27T21:23:04Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-12-27T21:23:05Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make EdAyers a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/EdAyers)\n"},{"author":"digama0","date":"2020-12-28T03:35:44Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-12-28T04:16:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1615729116)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1615729167)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1615729153)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1615729176)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1615729195)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1615729182)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1615729138)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"hash":"2c3552baa06f53d8ae0a95c967cfe23e4b58721b","message":"fix(library/vm/vm_json): ensure json.parse/json.unparse are inverses\n\n`to_obj` was previously reversing `json.array`s\n\nadded guards to test file\n\nchore(): make tests pass","date":"2020-12-26T21:02:12Z"},{"hash":"6945eebe0a1b3f4ddbd73cf7326d1a51a6c2dece","message":"noisier failure message","date":"2020-12-27T04:24:44Z"},{"hash":"4136c3690378677055a27ab13dbad569008df9dd","message":"use format macro","date":"2020-12-27T04:26:53Z"}]},{"author":"eric-wieser","number":508,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":84,"deletions":50},{"file":"tests/lean/case.lean","status":"M","additions":84,"deletions":50},{"file":"tests/lean/case.lean.expected.out","status":"M","additions":84,"deletions":50}],"state":"closed","open_date":"2020-12-18T10:59:49Z","update_date":"2021-02-25T11:04:57Z","discussion":[{"author":"eric-wieser","date":"2021-01-27T12:52:48Z","comment":"Looks like I did a really bad job of copying my working version over into lean core. Should all be fixed now."},{"author":"sorawee","date":"2021-01-27T20:56:50Z","comment":"I don't know if this is unreasonable or not, but it would be nice if this function can be split into `case_core` and `case`, where `case_core` returns `tactic (list expr × list expr)` which is a pair of `unsolved_goals` and `remaining_goals`. The implementation of `focus_case` (as discussed in https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Multiple.20case) would then simply be:\r\n\r\n```\r\ndo (unsolved_goals, remaining_goals) ← case_core args tac,\r\n   tactic.set_goals (unsolved_goals ++ remaining_goals)\r\n```"},{"author":"gebner","date":"2021-02-25T09:36:15Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:56Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"eric-wieser","committer":"eric-wieser","hash":"042d7e592f6e9356c3324beca1908419a423966e","message":"feat(meta/interactive): Allow `case` to match multiple cases","date":"2020-12-18T10:56:51Z"},{"author":"eric-wieser","committer":"web-flow","hash":"88a9c27e64d5cb4507b571c5f9913761269d3fd3","message":"Update library/init/meta/interactive.lean","date":"2021-01-27T09:47:43Z"},{"author":"eric-wieser","committer":"web-flow","hash":"f9ea69ffbae2a6d37908924737b3e4628c23ca47","message":"Update library/init/meta/interactive.lean","date":"2021-01-27T09:48:33Z"},{"author":"eric-wieser","committer":"web-flow","hash":"358e898cb4707be0497ac7017c4d950a2039c6e5","message":"Update library/init/meta/interactive.lean","date":"2021-01-27T10:01:49Z"},{"author":"eric-wieser","committer":"web-flow","hash":"ee941290a5a1d34c1942c8fb0511d456e4961589","message":"Update library/init/meta/interactive.lean","date":"2021-01-27T10:16:54Z"},{"author":"eric-wieser","committer":"web-flow","hash":"b348fc1310d1f3f3b08586d33952d9b9fd65d0a2","message":"Update library/init/meta/interactive.lean","date":"2021-01-27T10:34:05Z"},{"author":"eric-wieser","committer":"web-flow","hash":"d787566967a6d61dd1aa443428e7b77b4c271a14","message":"Update case.lean.expected.out","date":"2021-01-27T10:47:25Z"},{"author":"eric-wieser","committer":"web-flow","hash":"5b73e4a81bb1da41c57d1be0873d2a54a8290342","message":"Apply suggestions from code review","date":"2021-01-27T11:16:56Z"},{"author":"eric-wieser","committer":"web-flow","hash":"d51f6be0ab36d662170965ea989210b998456995","message":"Apply suggestions from code review","date":"2021-01-27T11:18:18Z"},{"author":"eric-wieser","committer":"web-flow","hash":"b75b1917a35e57149ffeee52add50cc77e7299fe","message":"Update library/init/meta/interactive.lean","date":"2021-01-27T12:21:37Z"}]},{"author":"urkud","number":507,"diff_summary":[{"file":"library/init/data/punit.lean","status":"M","additions":3,"deletions":3}],"state":"closed","open_date":"2020-12-17T03:08:44Z","update_date":"2021-01-02T15:58:18Z","discussion":[{"author":"urkud","date":"2020-12-17T03:09:24Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-12-17T03:55:06Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1567946867)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1567946816)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1567946767)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1567946859)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1567946806)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1567946834)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1567946891)"},{"author":"gebner","date":"2021-01-02T15:18:06Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-02T15:58:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded!\n\n*And happy new year! 🎉*\n\n\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1636861563)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1636861572)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1636861516)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1636861592)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1636861527)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1636861539)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1636861546)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"urkud","committer":"urkud","hash":"39b299dee448c3827ad6b27b92cdee96465cfc01","message":"Snapshot","date":"2020-12-17T03:07:09Z"}]},{"author":"eric-wieser","number":506,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-12-16T13:50:32Z","update_date":"2020-12-16T15:02:23Z","discussion":[{"author":"gebner","date":"2020-12-16T14:24:32Z","comment":":tada: \r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-12-16T15:02:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1564271917)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1564272039)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1564271694)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1564271821)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1564271979)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1564271661)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1564271795)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"cfff94559352e788237615ba984d2f488f9c10ec","message":"fix(init/core): Make infer_instance work on sorts","date":"2020-12-16T13:50:13Z"}]},{"author":"gebner","number":505,"diff_summary":[{"file":"src/library/context_cache.cpp","status":"A","additions":37,"deletions":4},{"file":"src/library/context_cache.h","status":"A","additions":37,"deletions":4},{"file":"src/library/type_context.cpp","status":"A","additions":37,"deletions":4},{"file":"tests/lean/run/tc_cache2.lean","status":"A","additions":37,"deletions":4}],"state":"closed","open_date":"2020-11-20T17:12:01Z","update_date":"2020-11-23T10:13:39Z","discussion":[{"author":"gebner","date":"2020-11-23T09:32:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-11-23T10:13:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1441247398)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1441247227)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1441247473)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1441247033)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1441246866)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1441245319)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1441247128)"}],"review_discussion":[{"author":"jcommelin","file":"src/library/type_context.cpp","date":"2020-11-20T17:53:35Z","comment":"What about the example that easily break, mentioned above this line?"},{"author":"gebner","file":"src/library/type_context.cpp","date":"2020-11-20T17:57:42Z","comment":"That's when you reuse the cache.  We don't do this here.  We start with an empty cache (as opposed to no caching at all)."}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"ebd02210db6f0a37ea43830d678f5b8fdd4471d9","message":"perf(library/type_context): enable type class cache in nested resolution problems","date":"2020-11-20T17:06:01Z"}]},{"author":"Vierkantor","number":503,"diff_summary":[{"file":"library/init/wf.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-11-18T09:54:51Z","update_date":"2020-11-18T10:47:47Z","discussion":[{"author":"gebner","date":"2020-11-18T10:09:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-11-18T10:47:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1417441130)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1417440900)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1417440968)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1417441041)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1417441058)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1417440999)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1417441161)"}],"review_discussion":[],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"cc6ce8f7eab86bdeae288a1512cb03ca4a3819c4","message":"fix(library/init/wf): `well_founded.recursion` should be a `def`\n\nThis declaration returns a `Sort` but is defined as a `lemma`, which causes\n\"cannot generate vm code\" errors when you try to use it. And also mathlib's\nlinter doesn't like it.","date":"2020-11-18T09:48:21Z"}]},{"author":"gebner","number":502,"diff_summary":[{"file":"src/library/type_context.cpp","status":"A","additions":7,"deletions":0},{"file":"tests/lean/run/is_class_timeout.lean","status":"A","additions":7,"deletions":0}],"state":"closed","open_date":"2020-11-17T13:14:27Z","update_date":"2020-11-17T14:13:05Z","discussion":[{"author":"gebner","date":"2020-11-17T13:34:29Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-11-17T14:13:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1412414133)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1412413966)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1412413906)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1412413854)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1412414210)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1412414013)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1412414054)"},{"author":"kbuzzard","date":"2020-11-17T23:42:17Z","comment":"This was related to https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/hanging.20linter/near/216994727"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f46cecdb61c3558ab48d97c91136a26934d381b5","message":"fix(library/type_context): check that classes are types","date":"2020-11-17T13:13:10Z"}]},{"author":"EdAyers","number":501,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"M","additions":45,"deletions":18},{"file":"src/frontends/lean/widget.cpp","status":"M","additions":45,"deletions":18},{"file":"tests/lean/widget/widget_effects.input","status":"M","additions":45,"deletions":18},{"file":"tests/lean/widget/widget_effects.input.expected.out","status":"M","additions":45,"deletions":18},{"file":"tests/lean/widget/widget_effects.lean","status":"M","additions":45,"deletions":18}],"state":"closed","open_date":"2020-11-15T22:26:24Z","update_date":"2021-01-02T16:49:20Z","discussion":[{"author":"EdAyers","date":"2021-01-01T18:46:12Z","comment":"Hi what needs to be done for this to get merged?"},{"author":"gebner","date":"2021-01-02T15:30:52Z","comment":"> Hi what needs to be done for this to get merged?\r\n\r\nSorry, this flew completely under my radar.  LGTM."},{"author":"gebner","date":"2021-01-02T15:32:49Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-02T16:49:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded!\n\n*And happy new year! 🎉*\n\n\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1636946531)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1636946565)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1636946547)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1636946574)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1636946602)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1636946492)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1636946628)"},{"author":"bryangingechen","date":"2021-01-02T16:58:49Z","comment":"@EdAyers do you mind creating a followup PR which updates the widget-server doc and also clarifies the doc string that @eric-wieser pointed out?"}],"review_discussion":[{"author":"eric-wieser","file":"library/init/meta/widget/basic.lean","date":"2021-01-01T19:50:22Z","comment":"What does \"the position of the widget\" mean?"},{"author":"eric-wieser","file":"library/init/meta/widget/basic.lean","date":"2021-01-01T19:55:07Z","comment":"Does it make sense to include `relative_col` too?"},{"author":"gebner","file":"library/init/meta/widget/basic.lean","date":"2021-01-02T15:32:27Z","comment":"AFAIU it inserts a whole line, with matching indentation.  So column wouldn't make much sense."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"15ebe4ebaac91d3d5d1313c63f8a3a5142d8c104","message":"feat(widget): position argument with insert_text\n\nhttps://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/paste.20the.20goal.20at.20the.20cursor","date":"2020-11-15T22:20:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"f4af21e3ba8fa45b6cd5a8251d7aba2347d38bd2","message":"User can set column position for insert_text","date":"2020-11-16T10:46:17Z"},{"author":"EdAyers","committer":"EdAyers","hash":"e39b011dbfb93bd201d9a6a84a14e564087f93b5","message":"Fix test","date":"2020-11-16T10:57:06Z"},{"author":"EdAyers","committer":"EdAyers","hash":"e028488c1c1f0b750d7fa78303875fd2f0fa8b4d","message":"Fix style","date":"2020-11-16T11:05:00Z"},{"author":"EdAyers","committer":"EdAyers","hash":"f7b29aa5d0b94fe9a39c34a42f9cf48a928f4a48","message":"Add `effect.insert_text` alias for bw compat","date":"2020-11-21T20:44:05Z"}]},{"author":"ChrisHughes24","number":499,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-11-12T20:03:59Z","update_date":"2020-11-13T02:31:03Z","discussion":[{"author":"bors[bot]","date":"2020-11-13T02:31:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1393771729)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1393771681)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1393771717)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1393771703)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1393771683)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1393771749)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1393771697)"}],"review_discussion":[],"tags":[],"commits":[{"author":"ChrisHughes24","committer":"web-flow","hash":"6d21894089c300377a3795fca001eb559deff3e7","message":"chore(library/init/core): make is_lawful_singleton a Prop","date":"2020-11-12T20:03:54Z"}]},{"author":"gebner","number":498,"diff_summary":[{"file":"tests/lean/list_local_vars.lean","status":"M","additions":1,"deletions":2},{"file":"tests/lean/list_local_vars.lean.expected.out","status":"M","additions":1,"deletions":2}],"state":"closed","open_date":"2020-11-11T13:05:17Z","update_date":"2020-11-12T09:45:50Z","discussion":[{"author":"gebner","date":"2020-11-12T08:48:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-11-12T09:45:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1389444203)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1389444064)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1389444180)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1389444116)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1389444151)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1389444046)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1389444097)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"0ed2e1c1b2e90ef83c98b6dea02b00e1a2c1d648","message":"fix(tests/lean/list_local_vars): fix different output on aarch64","date":"2020-11-11T13:04:19Z"},{"author":"gebner","committer":"gebner","hash":"f13ee0a0a7c7639e8247aac40a4ba4dcee4fa2cc","message":"fix expected.out","date":"2020-11-11T13:56:39Z"}]},{"author":"jcommelin","number":497,"diff_summary":[{"file":"library/init/meta/converter/interactive.lean","status":"M","additions":137,"deletions":73},{"file":"library/init/meta/interactive.lean","status":"M","additions":137,"deletions":73},{"file":"library/init/meta/rb_map.lean","status":"M","additions":137,"deletions":73},{"file":"library/init/meta/simp_tactic.lean","status":"M","additions":137,"deletions":73},{"file":"library/init/meta/smt/interactive.lean","status":"M","additions":137,"deletions":73},{"file":"src/library/tactic/simp_lemmas.cpp","status":"M","additions":137,"deletions":73},{"file":"src/library/tactic/simp_result.cpp","status":"M","additions":137,"deletions":73},{"file":"src/library/tactic/simp_result.h","status":"M","additions":137,"deletions":73},{"file":"src/library/tactic/simplify.cpp","status":"M","additions":137,"deletions":73},{"file":"tests/lean/run/pathsimp.lean","status":"M","additions":137,"deletions":73},{"file":"tests/lean/run/simplifier_custom_relations.lean","status":"M","additions":137,"deletions":73}],"state":"closed","open_date":"2020-11-09T21:57:57Z","update_date":"2021-01-08T16:20:56Z","discussion":[{"author":"gebner","date":"2020-11-11T13:58:13Z","comment":"@bryangingechen `dsimp` is completely different from `simp`.  But if we like the API here, then it should be even easier to add to `dsimp`."},{"author":"gebner","date":"2021-01-08T15:44:52Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-08T16:20:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1669581961)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1669581863)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1669581835)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1669581716)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1669581685)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1669581918)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1669581791)"}],"review_discussion":[{"author":"bryangingechen","file":"tests/lean/run/dunfold3.lean","date":"2020-11-10T22:14:12Z","comment":"Any particular reason for this change?"},{"author":"bryangingechen","file":"src/library/tactic/simp_result.cpp","date":"2020-11-10T22:15:17Z","comment":"```suggestion\r\n        return r2;\r\n```"},{"author":"jcommelin","file":"tests/lean/run/dunfold3.lean","date":"2020-12-04T07:22:30Z","comment":"nope, oops"}],"tags":[{"tag":"rfc","description":""},{"tag":"awaiting-review","description":null}],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"4a358cf99b5bf9dc93837976b53e270cf4b28337","message":"wip","date":"2020-11-09T09:20:56Z"},{"author":"jcommelin","committer":"jcommelin","hash":"ba782c379ca1be3b9d37545e3676b29090eba4c8","message":"move to name_set","date":"2020-11-09T09:53:11Z"},{"author":"jcommelin","committer":"jcommelin","hash":"9bf2a902a9124f348d52c54e0c304fa9dafe5983","message":"wip","date":"2020-11-09T14:01:46Z"},{"author":"jcommelin","committer":"jcommelin","hash":"4fe5fbea163d088ce691b356c8a5d6ce871d3c9a","message":"A first attempt that looks promising (thanks Gabriel!)","date":"2020-11-09T14:49:10Z"},{"author":"jcommelin","committer":"jcommelin","hash":"e35349c2b71b275488dba0450f9f9cb913ae5ba4","message":"an attempt at modifying the interactive tactic, fail","date":"2020-11-09T15:46:55Z"},{"author":"jcommelin","committer":"jcommelin","hash":"1b09770807df6bf67d6f2e8d2142fd4af16e3750","message":"fix smt simp","date":"2020-11-09T16:00:55Z"},{"author":"jcommelin","committer":"jcommelin","hash":"bc6f71fac136f8fd51fadb3c738a2cc2f306e655","message":"Some crazy bugs fixed (thanks Mario!); also \"Try this\"","date":"2020-11-09T21:54:44Z"},{"author":"jcommelin","committer":"web-flow","hash":"a17a389bf1f10a32c7a3f2e501bd9be25e472d46","message":"Update src/library/tactic/simp_result.cpp\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-12-04T07:21:59Z"},{"author":"jcommelin","committer":"jcommelin","hash":"42494a00e6b4c5098f8fd21bfc15203c6884c9ad","message":"uncomment comment","date":"2020-12-04T07:22:10Z"}]},{"author":"digama0","number":496,"diff_summary":[{"file":"library/init/meta/well_founded_tactics.lean","status":"A","additions":55,"deletions":14},{"file":"tests/lean/1917.lean.expected.out","status":"A","additions":55,"deletions":14},{"file":"tests/lean/add_defn_eqns.lean.expected.out","status":"A","additions":55,"deletions":14},{"file":"tests/lean/eqn_hole.lean.expected.out","status":"A","additions":55,"deletions":14},{"file":"tests/lean/nested_match.lean.expected.out","status":"A","additions":55,"deletions":14},{"file":"tests/lean/run/mutual_sizeof.lean","status":"A","additions":55,"deletions":14},{"file":"tests/lean/run/psum_wf_rec.lean","status":"A","additions":55,"deletions":14}],"state":"closed","open_date":"2020-11-04T18:49:33Z","update_date":"2020-11-05T09:36:30Z","discussion":[{"author":"gebner","date":"2020-11-05T09:02:07Z","comment":"I thought the general plan was to get rid of the default termination measure altogether: #288 \r\n\r\nBut in the absence of progress on the other PR, this seems like a good improvement.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-11-05T09:36:29Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1357323170)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1357323132)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1357323099)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1357323027)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1357322995)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1357323213)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1357323256)"},{"author":"digama0","date":"2020-11-05T20:13:53Z","comment":"@gebner This actually changes the `rel_tac`, not the `dec_tac` (except for marginally improving the error messages). They are independent; even if we kill `default_dec_tac` we still want to use this alternate well founded relation for mutual defs (at least, until we come up with a better well founded relation that actually does structurally-less-than over all inductive types)."}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"3027f41404f1192dbb93c47798874ee8e48405ca","message":"fix(init/meta/well_founded_tactics): alternate mutual sizeof\n\nThis fixes an issue in which mutual recursions cannot call other\nfunctions if they have an index too large, because the default sizeof\ninstance for psum penalizes lots of `psum.inr` constructors.","date":"2020-11-04T18:48:48Z"},{"author":"digama0","committer":"digama0","hash":"996460655ce4a34e1af29e62e68c1092394af414","message":"fix test","date":"2020-11-04T19:33:49Z"},{"author":"digama0","committer":"digama0","hash":"94da1ba35cc4daab213d8d6009f6fa909a1f371a","message":"fix test","date":"2020-11-04T20:47:36Z"},{"author":"digama0","committer":"digama0","hash":"7e790a0ce6eceedd490c2c7f6293940d61cad804","message":"fix test","date":"2020-11-04T21:28:28Z"},{"author":"digama0","committer":"digama0","hash":"0e871060995c98532e331b2a7c2e0e8eae323479","message":"fix tests","date":"2020-11-04T21:39:06Z"},{"author":"digama0","committer":"digama0","hash":"227d4289b5deb2338dfd4f75a0ba6ceb6d2ad1ab","message":"fix tests","date":"2020-11-04T22:57:42Z"}]},{"author":"eric-wieser","number":495,"diff_summary":[{"file":"src/shell/lean.cpp","status":"M","additions":6,"deletions":7}],"state":"open","open_date":"2020-10-29T12:20:46Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"gebner","date":"2020-10-29T13:46:32Z","comment":"Does this actually help us with mathlib CI?  Does this produce too much output for the CI log?  Should it rather print progress messages as JSON, so that we can postprocess them (more easily)?"},{"author":"eric-wieser","date":"2020-10-29T13:52:42Z","comment":"> Does this actually help us with mathlib CI?\r\n\r\nWhat's the easiest way to find out? Can I make a mathlib PR pointing lean to this branch?\r\n\r\nEdit: ~~Done in https://github.com/leanprover-community/mathlib/pull/4817 I think~~ Nope, I need a tag\r\n\r\n> Does this produce too much output for the CI log? Should it rather print progress messages as JSON, so that we can postprocess them (more easily)?\r\n\r\nThat's probably a good idea, especially if this approach overloads the CI log. It was more work though since I'd need to modify the python script in mathlib too, and I figured this might be good enough."}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"c93121b1ce40f03d53973100b19e54c5620f28a4","message":"feat(*): Log progress messages to stderr even when using `json` output on stdout","date":"2020-10-29T12:20:37Z"}]},{"author":"gebner","number":494,"diff_summary":[{"file":"README.md","status":"M","additions":16,"deletions":2},{"file":"doc/changes.md","status":"M","additions":16,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":16,"deletions":2}],"state":"closed","open_date":"2020-10-29T10:45:08Z","update_date":"2020-10-29T11:58:26Z","discussion":[{"author":"gebner","date":"2020-10-29T11:19:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-10-29T11:58:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1326195403)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1326196312)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1326195350)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1326196399)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1326196380)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1326196241)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1326196474)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"51a078b885f5a7e0f9b22d78d55bc5cd9c4d8823","message":"chore(*): release 3.23.0c","date":"2020-10-29T10:45:02Z"}]},{"author":"gebner","number":493,"diff_summary":[{"file":"src/frontends/lean/decl_util.cpp","status":"M","additions":91,"deletions":24},{"file":"tests/lean/run/instance_naming.lean","status":"M","additions":91,"deletions":24}],"state":"closed","open_date":"2020-10-28T10:27:28Z","update_date":"2020-10-28T12:48:53Z","discussion":[{"author":"gebner","date":"2020-10-28T11:43:15Z","comment":"bors r+"},{"author":"gebner","date":"2020-10-28T12:05:38Z","comment":"bors r-"},{"author":"bors[bot]","date":"2020-10-28T12:05:39Z","comment":"Canceled."},{"author":"gebner","date":"2020-10-28T12:06:31Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-28T12:48:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1320501001)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1320500922)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1320500906)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1320500971)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1320500951)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1320500813)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1320500866)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"817d23efa7b2254e8b7086f3fab27c39902632e4","message":"feat(frontends/lean/decl_util): improve instance naming heuristic","date":"2020-10-28T10:25:24Z"},{"author":"gebner","committer":"gebner","hash":"cd4973b96eecb4d6ba52e14cd67f6c4ad251b467","message":"Support parameters.","date":"2020-10-28T12:06:13Z"}]},{"author":"digama0","number":491,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":14,"deletions":31},{"file":"library/init/meta/tactic.lean","status":"M","additions":14,"deletions":31},{"file":"tests/lean/by_contradiction.lean","status":"M","additions":14,"deletions":31},{"file":"tests/lean/by_contradiction.lean.expected.out","status":"M","additions":14,"deletions":31}],"state":"closed","open_date":"2020-10-27T18:35:33Z","update_date":"2020-10-27T20:36:01Z","discussion":[{"author":"gebner","date":"2020-10-27T18:52:11Z","comment":"The `by_contradiction` test still fails."},{"author":"digama0","date":"2020-10-27T19:18:55Z","comment":"I know how to fix the test but not how to fix the expected out file."},{"author":"gebner","date":"2020-10-27T19:37:13Z","comment":"`./test_single.sh .../lean/bin/lean by_contradiction.lean` prints a diff."},{"author":"gebner","date":"2020-10-27T19:58:29Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T20:36:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1316990689)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1316990730)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1316990717)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1316990759)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1316990751)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1316990655)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1316990784)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"1d0b64b358c470fb600782cca7844cda8185d1ef","message":"feat(init/meta/tactic): by_contradiction tweaks\n\nThis adds support for classical `by_contradiction`, as well as always using\n`intro` instead of `intro1` (which picks up the binder variable of `not`,\nwhich is never meaningful), instead using `h` as default name.","date":"2020-10-27T18:34:58Z"},{"author":"digama0","committer":"digama0","hash":"ba00970af7820ebcc6d9f34074ff010253dfa5c0","message":"fix test","date":"2020-10-27T19:18:09Z"},{"author":"digama0","committer":"digama0","hash":"19050bdb0e578fe5fbdace461189de15a9a10600","message":"fix test result","date":"2020-10-27T19:29:12Z"}]},{"author":"gebner","number":490,"diff_summary":[{"file":"src/frontends/lean/builtin_exprs.cpp","status":"A","additions":127,"deletions":115},{"file":"tests/lean/1334b.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/1513.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/1766.lean","status":"A","additions":127,"deletions":115},{"file":"tests/lean/1794.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/add_defn_eqns.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/anc1.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/auto_quote_error2.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/by_contradiction.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/check.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/combinators1.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/derive.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/do_match_fail.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/elab_error_recovery.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/eta_tac.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/inaccessible2.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/induction_generalize_premise_args.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/interactive/do_info.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/interactive/focus.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/interactive/my_tac_class.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/interactive/rb_map_ts.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/interactive/term_goal_info.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/nested_errors.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/pp_goal_issue.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/run/1577.lean","status":"A","additions":127,"deletions":115},{"file":"tests/lean/run/437c.lean","status":"A","additions":127,"deletions":115},{"file":"tests/lean/run/aexp.lean","status":"A","additions":127,"deletions":115},{"file":"tests/lean/run/smt_destruct.lean","status":"A","additions":127,"deletions":115},{"file":"tests/lean/smart_unfolding.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/smt_begin_end1.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/tactic_state_pp.lean.expected.out","status":"A","additions":127,"deletions":115},{"file":"tests/lean/vm_override.lean.expected.out","status":"A","additions":127,"deletions":115}],"state":"closed","open_date":"2020-10-27T12:06:40Z","update_date":"2020-10-28T12:48:55Z","discussion":[{"author":"gebner","date":"2020-10-27T12:33:38Z","comment":"As suggested by @jcommelin, I have replaced `_x` by the shorter `GREEK SMALL LETTER ALPHA WITH VRACHY` (`ᾰ`)."},{"author":"gebner","date":"2020-10-28T11:44:07Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-28T12:48:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1320501001)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1320500922)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1320500906)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1320500971)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1320500951)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1320500813)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1320500866)"}],"review_discussion":[],"tags":[],"commits":[{"author":"rwbarton","committer":"rwbarton","hash":"eec4618a8bf576ca89eb13cafaea9a8908b63f75","message":"fix(frontends/lean/builtin_exprs): \"fix\" \"`a` bug\"\n\nIn tactic mode, `p -> a` would be interpreted as `Π (a : p), a`,\ncapturing the variable `a`.\nChange the binder name used by `->` to `_x` to avoid this.\n\nFixes #437.\n(more or less)","date":"2020-08-14T18:10:54Z"},{"author":"rwbarton","committer":"rwbarton","hash":"6226db0bb3aff59ee24b15eb80ff1a5197380afe","message":"actually fix test 1766","date":"2020-08-14T18:28:36Z"},{"author":"rwbarton","committer":"rwbarton","hash":"cb8b021d143132c757bea6f4d4c2aec4ab389084","message":"rename test 437 -> 437c","date":"2020-08-15T19:46:02Z"},{"author":"rwbarton","committer":"rwbarton","hash":"41331e39088dc3bf23f5ecd07946005dd54f41b3","message":"feat(frontends/lean/structure_cmd): add extends_priority option (#440)\n\nThis option controls the priority of instances produced by `extends`,\r\nand is set to 100 by default.\r\n\r\nSee https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/default_extends_priority/near/206814398 for discussion.","date":"2020-08-15T19:46:04Z"},{"author":"rwbarton","committer":"rwbarton","hash":"c816b19c45b83bdf94bbb1f3026cc72fa1aac628","message":"fix more tests\n\nI think I somehow did not rebuild the core library before,\nand these failures are due to occurrences of `->` in core.","date":"2020-08-15T19:46:04Z"},{"author":"gebner","committer":"gebner","hash":"793f1918c4339f7e2fb783208b4543392da95290","message":"Merge branch 'master' into a","date":"2020-10-27T12:15:04Z"},{"author":"gebner","committer":"gebner","hash":"8c2aa2c7f54e9b6ffc568b7726420907422e1711","message":"Rename _x by ᾰ","date":"2020-10-27T12:32:34Z"},{"author":"gebner","committer":"gebner","hash":"15d3a3064aa2577bc9c9c8eda7f3336fbdb3da44","message":"Temporarily run tests separately.","date":"2020-10-27T12:42:37Z"},{"author":"gebner","committer":"gebner","hash":"16697d89feedb9de32e611bbd0862ae2f044e077","message":"Revert \"Temporarily run tests separately.\"\n\nThis reverts commit 15d3a3064aa2577bc9c9c8eda7f3336fbdb3da44.","date":"2020-10-27T13:32:32Z"},{"author":"gebner","committer":"gebner","hash":"612cfb8858c50eec43c1c48cf3f966b85c137eba","message":"Temporarily run tests separately.\n\nMaybe this works on mac.","date":"2020-10-27T13:33:05Z"},{"author":"gebner","committer":"gebner","hash":"b36d42248b44806e7a32768101cc0e3b5ee30db7","message":"Fix interactive tests.","date":"2020-10-27T13:35:26Z"},{"author":"gebner","committer":"gebner","hash":"c0d6e633b2757f5357f9fd01dd101c16b19af672","message":"Revert \"Temporarily run tests separately.\"\n\nThis reverts commit 612cfb8858c50eec43c1c48cf3f966b85c137eba.","date":"2020-10-27T15:38:54Z"},{"author":"gebner","committer":"gebner","hash":"a21f4d7d8ca85b8f3779b19fed4096f51c762484","message":"Merge remote-tracking branch 'origin/master' into a","date":"2020-10-28T10:30:05Z"}]},{"author":"gebner","number":488,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"A","additions":25,"deletions":16},{"file":"src/library/module.cpp","status":"A","additions":25,"deletions":16},{"file":"src/library/module.h","status":"A","additions":25,"deletions":16},{"file":"src/util/thread.h","status":"A","additions":25,"deletions":16},{"file":"tests/lean/user_cmd_go_to_def.lean","status":"A","additions":25,"deletions":16},{"file":"tests/lean/user_cmd_go_to_def.lean.expected.out","status":"A","additions":25,"deletions":16}],"state":"closed","open_date":"2020-10-27T09:39:52Z","update_date":"2020-10-27T11:59:30Z","discussion":[{"author":"gebner","date":"2020-10-27T11:36:24Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T11:59:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1314396750)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1314396796)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1314396773)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1314396651)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1314396624)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1314396714)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c0b952dbf9ec79c285a261283b730009e0a8e22e","message":"fix(frontends/lean/parser): add decl_pos in all commands","date":"2020-10-27T09:37:45Z"},{"author":"gebner","committer":"gebner","hash":"4e82c3ebb099a4626f027c5c0ee8f2642a60b620","message":"Maybe fix clang error on macos?","date":"2020-10-27T09:43:39Z"},{"author":"gebner","committer":"gebner","hash":"8b548a2e8fde43fe9a3f5344c4bafe064001b984","message":"Use modern thread_local keyword.","date":"2020-10-27T09:51:54Z"}]},{"author":"bryangingechen","number":487,"diff_summary":[{"file":"README.md","status":"M","additions":15,"deletions":2},{"file":"doc/changes.md","status":"M","additions":15,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":15,"deletions":2}],"state":"closed","open_date":"2020-10-26T23:43:50Z","update_date":"2020-10-27T00:26:21Z","discussion":[{"author":"bryangingechen","date":"2020-10-27T00:05:00Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T00:26:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1311959324)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1311959442)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1311959429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1311959380)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1311959365)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1311959399)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"b82f42d1328ec0ee8aa378111b817aa80883a458","message":"chore(*): release 3.22.0c","date":"2020-10-26T23:42:38Z"}]},{"author":"eric-wieser","number":485,"diff_summary":[{"file":"library/init/meta/converter/interactive.lean","status":"M","additions":37,"deletions":6},{"file":"tests/lean/conv_for_find.lean","status":"M","additions":37,"deletions":6},{"file":"tests/lean/conv_for_find.lean.expected.out","status":"M","additions":37,"deletions":6}],"state":"closed","open_date":"2020-10-24T15:10:26Z","update_date":"2020-10-26T10:45:52Z","discussion":[{"author":"gebner","date":"2020-10-26T09:53:54Z","comment":"Could you please add a test case?"},{"author":"eric-wieser","date":"2020-10-26T10:20:40Z","comment":"Test added. Can you squash the commits when you merge through the github UI? I've been editing through the web UI because I haven't attempted to get a local build system set up."},{"author":"gebner","date":"2020-10-26T10:22:01Z","comment":"I'll leave the squashing to:\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-26T10:45:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1308207418)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1308207351)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1308207325)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1308207493)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1308207461)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1308207250)"}],"review_discussion":[{"author":"eric-wieser","file":"tests/lean/conv_for_find.lean","date":"2020-10-24T15:13:32Z","comment":"Once CI fails I'll update the error comparison file with the errors these tests produce."},{"author":"eric-wieser","file":"tests/lean/conv_for_find.lean.expected.out","date":"2020-10-26T10:19:49Z","comment":"```suggestion\r\n⊢ ℕ\r\np i\r\np i\r\np j\r\n```"}],"tags":[{"tag":"bug","description":"Something isn't working"},{"tag":"awaiting-author","description":""}],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"ec3a282a1cf3149a53f1d4eb68d64c1ad0d6dbdb","message":"fix(*): Revert tactic state propagation through conv\n\nThis turned out to break some quite simple cases","date":"2020-10-24T15:09:41Z"},{"author":"eric-wieser","committer":"web-flow","hash":"9b3d93478271d1c9485ef532ea324a375b1c24e7","message":"fix(*): Update test to indicate this does not work","date":"2020-10-24T15:11:52Z"},{"author":"eric-wieser","committer":"web-flow","hash":"c687214f7118bd82f063f9930cd46241fc51c305","message":"Update interactive.lean","date":"2020-10-24T16:00:27Z"},{"author":"eric-wieser","committer":"web-flow","hash":"a37b6f45014074e0bbfb30ee18f80399fef2a78b","message":"Update conv_for_find.lean.expected.out","date":"2020-10-24T16:24:28Z"},{"author":"eric-wieser","committer":"web-flow","hash":"481cffa819885a9dd63cc834a4d5c76a55e493fb","message":"Update conv_for_find.lean","date":"2020-10-26T10:04:06Z"},{"author":"eric-wieser","committer":"web-flow","hash":"c19141dfd2c644dbf9d1d992f4f814c5fbbc9676","message":"Update tests/lean/conv_for_find.lean.expected.out","date":"2020-10-26T10:19:53Z"}]},{"author":"urkud","number":484,"diff_summary":[{"file":"library/data/buffer.lean","status":"M","additions":158,"deletions":141},{"file":"library/init/algebra/functions.lean","status":"M","additions":158,"deletions":141},{"file":"library/init/algebra/order.lean","status":"M","additions":158,"deletions":141},{"file":"library/init/data/fin/ops.lean","status":"M","additions":158,"deletions":141},{"file":"library/init/data/int/order.lean","status":"M","additions":158,"deletions":141},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":158,"deletions":141},{"file":"tests/lean/extra/lt_rec.lean","status":"M","additions":158,"deletions":141},{"file":"tests/lean/run/order_defaults.lean","status":"M","additions":158,"deletions":141},{"file":"tests/lean/run/term_app2.lean","status":"M","additions":158,"deletions":141}],"state":"closed","open_date":"2020-10-20T03:42:49Z","update_date":"2020-10-24T15:25:20Z","discussion":[{"author":"gebner","date":"2020-10-20T14:41:22Z","comment":"> Is it possible to make a fake release so that github CI will be able to build mathlib with this Lean?\r\n\r\nIf you push to a tag (please just make sure it doesn't clash with a potential version number), then the CI will make a release out of it."},{"author":"urkud","date":"2020-10-20T17:00:54Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-10-20T17:11:43Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1282336048)"},{"author":"urkud","date":"2020-10-20T19:47:45Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-10-20T19:58:24Z","comment":"## try\n\nBuild failed:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1283054629)"},{"author":"bors[bot]","date":"2020-10-24T15:25:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1302414995)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1302415039)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1302415029)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1302415104)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1302415087)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1302415061)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"urkud","committer":"urkud","hash":"31f531818283a791a867a4747e6a4b72333df967","message":"refactor(init/algebra/order): add `decidable_*` assumptions to `linear_order`\n\nOther changes:n\n* sort lemmas in `init/algebra/order` by typeclass assumption;\n* remove `lt.trans` and `gt.trans`: they were not useful for dot\n  syntax anyway.","date":"2020-10-20T03:38:30Z"},{"author":"urkud","committer":"urkud","hash":"87777000849e4ac2b1c681c0da890b984ef2ff42","message":"Fix compile","date":"2020-10-20T16:57:27Z"},{"author":"urkud","committer":"urkud","hash":"38f3b87bea97bf10877d7b2607ba5dc01d606a3d","message":"Fix test","date":"2020-10-20T19:47:25Z"}]},{"author":"lacker","number":483,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"M","additions":8,"deletions":8},{"file":"tests/lean/andthen_focus_error_message.lean.expected.out","status":"M","additions":8,"deletions":8}],"state":"closed","open_date":"2020-10-14T21:09:09Z","update_date":"2020-10-15T17:37:52Z","discussion":[{"author":"bryangingechen","date":"2020-10-14T21:29:50Z","comment":"Let's see if this breaks any tests.\r\nbors try"},{"author":"bors[bot]","date":"2020-10-14T21:40:14Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1255905808)"},{"author":"lacker","date":"2020-10-15T16:49:14Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-10-15T16:49:15Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make lacker a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/lacker)\n"},{"author":"lacker","date":"2020-10-15T16:52:21Z","comment":"Bah. Well, this test is failing because the test is just checking the precise error string returned. I fixed the test expected output. Let me know if that is considered OK or if there is more danger here"},{"author":"bryangingechen","date":"2020-10-15T17:12:27Z","comment":"That's the exact fix I would've done, so I think you're good. Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-15T17:37:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1260394360)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1260394440)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1260394414)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1260394497)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1260394480)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1260394546)"}],"review_discussion":[],"tags":[],"commits":[{"author":"lacker","committer":"web-flow","hash":"c2345f0b3a9e7546394fba7b544d279e3ee62ce5","message":"Fix error messages in focus and focus'\n\nNot a big deal, the error messages are just backwards here - when `focus` fails the error says that `focus'` failed, and vice versa.","date":"2020-10-14T21:06:58Z"},{"author":"lacker","committer":"web-flow","hash":"36adc0d5ab304d65d3d862b1aad59a67d2b6e484","message":"Update andthen_focus_error_message.lean.expected.out\n\nfocus not focus'","date":"2020-10-15T16:48:43Z"}]},{"author":"eric-wieser","number":482,"diff_summary":[{"file":"library/init/meta/converter/interactive.lean","status":"A","additions":155,"deletions":26},{"file":"library/init/meta/simp_tactic.lean","status":"A","additions":155,"deletions":26},{"file":"library/init/meta/tactic.lean","status":"A","additions":155,"deletions":26},{"file":"tests/lean/conv_for_find.lean","status":"A","additions":155,"deletions":26},{"file":"tests/lean/conv_for_find.lean.expected.out","status":"A","additions":155,"deletions":26}],"state":"closed","open_date":"2020-10-12T15:09:27Z","update_date":"2020-10-13T00:06:11Z","discussion":[{"author":"gebner","date":"2020-10-12T17:02:34Z","comment":"Could you please add the other test case from https://github.com/leanprover-community/lean/pull/476#discussion_r503264366 and copy the PR description from #476 (bors uses it in the commit message).\r\n\r\nOtherwise LGTM.\r\n\r\nbors d+"},{"author":"bors[bot]","date":"2020-10-12T17:02:35Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2020-10-12T17:04:30Z","comment":"Where should the passing test-cases go?"},{"author":"gebner","date":"2020-10-12T18:05:10Z","comment":"Oh, I didn't look where you put the test case.  Typically these test cases (where the error message is important) go into `tests/lean`.  You can then also put the passing test case in the same file.\r\n\r\nSome explanation here: https://github.com/leanprover-community/lean/blob/master/doc/fixing_tests.md"},{"author":"eric-wieser","date":"2020-10-12T23:41:59Z","comment":"bors r+"},{"author":"eric-wieser","date":"2020-10-12T23:42:57Z","comment":"Thanks for the review, and for pointing me towards the better fix!"},{"author":"bors[bot]","date":"2020-10-13T00:06:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1244874960)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1244874993)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1244874987)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1244874938)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1244874928)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1244874979)"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"fef512ce0fbddb2728bfe55319b5986a8c8e0ec0","message":"fix(init/meta/converter/interactive): Do not ignore errors in `for`","date":"2020-10-08T16:51:46Z"},{"author":"eric-wieser","committer":"web-flow","hash":"c1117199ff3ec1e856cb9fe5efd15ea7f4045511","message":"chore(*): Add a test for `for` with typos in `conv` mode","date":"2020-10-08T17:13:49Z"},{"author":"eric-wieser","committer":"web-flow","hash":"a098e5d341194e63ff2f211b41ab5ed634d9efdb","message":"fix(*): Missing namespace","date":"2020-10-08T17:27:15Z"},{"author":"eric-wieser","committer":"web-flow","hash":"dac2cf6561bf62ae56271f9d12e9733fa2acd281","message":"fix(*): Add comments, fix state, fix imports","date":"2020-10-09T08:31:15Z"},{"author":"eric-wieser","committer":"web-flow","hash":"994957912371e1f280ffe0ef8aedfeb3c54e5591","message":"fix(*): typo","date":"2020-10-09T08:31:34Z"},{"author":"eric-wieser","committer":"web-flow","hash":"9e720b95c344c2f7f1e0876e691ccc1192a13a73","message":"Update interactive.lean","date":"2020-10-09T08:41:51Z"},{"author":"eric-wieser","committer":"web-flow","hash":"67065b2cbfb789ed07e404eb27bfbd96f3bc54c6","message":"feat(init/meta/tactic): capture and unwrap","date":"2020-10-09T15:01:07Z"},{"author":"eric-wieser","committer":"web-flow","hash":"1c6527092088675632bd09fa159a2cfdb05f1691","message":"fix(meta/converter/interactive): Cleanup and fix `find` too","date":"2020-10-09T15:06:36Z"},{"author":"eric-wieser","committer":"web-flow","hash":"aa5edea50a00e8b0e880e9d7bc78a4b7de0f0a1a","message":"Update tactic.lean","date":"2020-10-09T15:08:52Z"},{"author":"eric-wieser","committer":"web-flow","hash":"3afbf712d2f3b4d18e460f2ecc6d041fb0b9abca","message":"Update tactic.lean","date":"2020-10-09T15:22:11Z"},{"author":"eric-wieser","committer":"web-flow","hash":"42debdbcb3d4e7c76053c41b282bbd5f396680d9","message":"fix(*): Undo `t <$> read` which doesn't work","date":"2020-10-09T15:32:32Z"},{"author":"eric-wieser","committer":"web-flow","hash":"72587c39b6ce622554b096f8079a34cd7a1abe1e","message":"fix(*): Fix namespacing","date":"2020-10-09T15:44:18Z"},{"author":"eric-wieser","committer":"web-flow","hash":"c562e350dcda21b1037221290a87cda155101521","message":"doc(*): Describe the limitations of ext_simplify_core","date":"2020-10-09T16:15:15Z"},{"author":"eric-wieser","committer":"web-flow","hash":"fc9da45bc7b6c6e26ea96832a3d848ec8e351918","message":"refactor(*): Replace a match with an `unwrap`","date":"2020-10-10T10:22:04Z"},{"author":"eric-wieser","committer":"web-flow","hash":"e7f4330d5da6fa8109222288c73257f9f843e49d","message":"Update tactic.lean","date":"2020-10-12T14:57:48Z"},{"author":"eric-wieser","committer":"web-flow","hash":"e16bae150b6dea27460f70002cb6db4a0d8828fa","message":"Update tactic.lean","date":"2020-10-12T14:58:24Z"},{"author":"eric-wieser","committer":"web-flow","hash":"b8f2963b8b7f33e8844032c33c1df1b77b7abadb","message":"Update simp_tactic.lean","date":"2020-10-12T15:00:18Z"},{"author":"eric-wieser","committer":"web-flow","hash":"f11aaecbd589a5a70ac7d901ecf6a51acc3a10dc","message":"Update interactive.lean","date":"2020-10-12T15:03:26Z"},{"author":"eric-wieser","committer":"web-flow","hash":"3e0b4d90305f677b4ce54e8c9095746e12458fab","message":"Update tests","date":"2020-10-12T19:53:52Z"},{"author":"eric-wieser","committer":"web-flow","hash":"0315acb196a2af9f6a78f829d266d0fb8a0d1301","message":"Create conv_for_find.lean.expected.out","date":"2020-10-12T19:57:24Z"},{"author":"eric-wieser","committer":"web-flow","hash":"934d83d3900ca3b09716cd91089ca82db057d880","message":"Update conv_for_find.lean.expected.out","date":"2020-10-12T20:26:01Z"}]},{"author":"bryangingechen","number":481,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-10-12T04:09:30Z","update_date":"2020-10-12T04:50:08Z","discussion":[{"author":"bryangingechen","date":"2020-10-12T04:28:04Z","comment":"[No warnings!](https://github.com/leanprover-community/lean/pull/481/checks?check_run_id=1240189052)\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-12T04:50:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1240265338)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1240265352)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1240265345)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1240265332)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1240265319)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1240265373)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"9211cf8775966c698614f45610677728af64fb8b","message":"chore(on-push.yml): fix github actions warnings","date":"2020-10-12T03:58:57Z"}]},{"author":"Julian","number":480,"diff_summary":[{"file":"src/shell/CMakeLists.txt","status":"D","additions":5,"deletions":285},{"file":"src/shell/lean.cpp","status":"D","additions":5,"deletions":285},{"file":"src/shell/leandoc.cpp","status":"D","additions":5,"deletions":285},{"file":"src/shell/leandoc.h","status":"D","additions":5,"deletions":285}],"state":"closed","open_date":"2020-10-11T22:10:00Z","update_date":"2020-10-13T13:30:48Z","discussion":[{"author":"gebner","date":"2020-10-13T07:50:05Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-13T07:50:47Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1246333739)"},{"author":"Julian","date":"2020-10-13T13:00:17Z","comment":"(And now removed from the Makefile). Does that CI thing listen to scrubs or will it ignore me\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-13T13:00:23Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make Julian a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/Julian)\n"},{"author":"digama0","date":"2020-10-13T13:05:22Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-13T13:30:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1247764871)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1247765106)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1247765080)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1247765039)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1247765014)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1247764957)"}],"review_discussion":[{"author":"gebner","file":"src/shell/lean.cpp","date":"2020-10-12T09:08:12Z","comment":"Could you also remove the `doc` variable and the `leandoc.cpp` file, please?"},{"author":"Julian","file":"src/shell/lean.cpp","date":"2020-10-12T12:34:49Z","comment":"Whoops, knew I'd miss something... Fixed."}],"tags":[],"commits":[{"author":"Julian","committer":"Julian","hash":"c2d421ce960713b5dcfc24b6e2b602c2c99096d3","message":"chore(shell/lean): remove lean --doc.\n\nIt's broken. Use doc-gen.\n\nCloses: #465","date":"2020-10-13T12:59:39Z"}]},{"author":"bryangingechen","number":479,"diff_summary":[{"file":"README.md","status":"M","additions":16,"deletions":2},{"file":"doc/changes.md","status":"M","additions":16,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":16,"deletions":2}],"state":"closed","open_date":"2020-10-11T20:36:30Z","update_date":"2020-10-12T00:48:15Z","discussion":[{"author":"bryangingechen","date":"2020-10-12T00:23:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-12T00:48:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1239669762)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1239669710)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1239669691)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1239669661)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1239669647)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1239669740)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"194c5aca9090eba33bd35b3abbffb11988ea7a62","message":"chore(*): release 3.21.0c","date":"2020-10-11T20:36:10Z"}]},{"author":"eric-wieser","number":476,"diff_summary":[{"file":"library/init/meta/converter/interactive.lean","status":"A","additions":102,"deletions":26},{"file":"library/init/meta/simp_tactic.lean","status":"A","additions":102,"deletions":26},{"file":"library/init/meta/tactic.lean","status":"A","additions":102,"deletions":26},{"file":"tests/lean/fail/conv_for.lean","status":"A","additions":102,"deletions":26}],"state":"closed","open_date":"2020-10-08T16:53:18Z","update_date":"2020-10-12T15:09:48Z","discussion":[{"author":"gebner","date":"2020-10-12T12:41:58Z","comment":"> CI run: eric-wieser/lean/actions/runs/297777454 (This repo isn't set up to run CI on PRs, so that's the best I can do.)\r\n\r\nI've invited you as a collaborator on this repo."}],"review_discussion":[{"author":"eric-wieser","file":"library/init/meta/converter/interactive.lean","date":"2020-10-08T16:54:00Z","comment":"This seems dumb, I just don't know enough about what I'm doing to know if there's a better way"},{"author":"eric-wieser","file":"library/init/meta/converter/interactive.lean","date":"2020-10-08T20:29:35Z","comment":"I can't quite work out why the `success` and `exception` below don't resolve to `tactic_result.success` and `tactic_result.exception`."},{"author":"eric-wieser","file":"library/init/meta/converter/interactive.lean","date":"2020-10-08T20:31:27Z","comment":"I can't help feeling there's a better way to do this - the success path is trivial to write with a `return`, I just can't work out how to get the failure details using `<|>` or similar."},{"author":"eric-wieser","file":"library/init/meta/converter/interactive.lean","date":"2020-10-08T22:51:28Z","comment":"This is wrong and should be\r\n```suggestion\r\n  | (exception f p s') := (exception f p s')\r\n```\r\nso that the state in the error message is where the error occurred. Perhaps the state doesn't change anyway though and it doesn't matter."},{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-10-12T12:34:41Z","comment":"```suggestion\r\nλ _, t\r\n```\r\n\r\nThen the following both work:\r\n```lean\r\n-- works in 3.21\r\nexample {a b : ℕ} : ∃ x, x * a = a * x :=  begin\r\n  existsi _,\r\n  conv {\r\n    rw nat.mul_comm b a,\r\n  },\r\nend\r\n\r\n-- fails in 3.21\r\nexample {a b : ℕ} : ∃ x, x * a = a * x :=  begin\r\n  existsi _,\r\n  conv {\r\n    for (_ * _) [1] {\r\n      rw nat.mul_comm b a,\r\n    },\r\n  },\r\nend\r\n```"},{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-10-12T12:35:37Z","comment":"```suggestion\r\nor the exception.\r\nThe tactic state is modified in either case.\r\n```"},{"author":"eric-wieser","file":"library/init/meta/tactic.lean","date":"2020-10-12T12:43:12Z","comment":"That sounds wrong to me - the success tactic_state shouldn't be propagated, otherwise it rolls back any work done between capture and unwrap. Thanks for the examples, I'll have a go with them."},{"author":"eric-wieser","file":"library/init/meta/tactic.lean","date":"2020-10-12T13:32:32Z","comment":"Ugh, your suggestion does seem to be the only way to fix those examples, but I have a really hard time believing it's correct behavior - that looks like a much more insidious bug in `ext_simplify_core` that is discarding tactic_state even in successful cases. "},{"author":"eric-wieser","file":"library/init/meta/tactic.lean","date":"2020-10-12T13:41:25Z","comment":"To be clear - what your suggestion does is completely restore the state to how it was before, which results in all the `tactic_state` changes made between callbacks within `ext_simplify_core` being reverted, even when the callbacks are successful."},{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-10-12T14:01:20Z","comment":"Yes, that is precisely the point.  Nobody except us is modifying the tactic state, in particular nothing is happening between callbacks (fingers crossed).  And `ext_simplify_core` would just discard the tactic state at the end.  So we need to thread it through manually."},{"author":"eric-wieser","file":"library/init/meta/tactic.lean","date":"2020-10-12T14:14:41Z","comment":"> in particular nothing is happening between callbacks (fingers crossed).\r\n\r\nI got the feeling from reading the code that the type of thing performed by `simp only` would go on behind the scenes between callbacks. Perhaps we've explicitly disabled every one of these simplifications.\r\n\r\n> And ext_simplify_core would just discard the tactic state at the end. \r\n\r\nIs it supposed to do that? My understanding reaidng the code is that it is trying to preserve it, but seems to only be preserving part of it. It must be preserving it in some way, otherwise the `conv` wouldn't do anything at all, would it?"},{"author":"eric-wieser","file":"library/init/meta/tactic.lean","date":"2020-10-12T14:52:02Z","comment":"Ah, right - I understand now: \r\n\r\nhttps://github.com/leanprover-community/lean/blob/42713125a2270a07d7034abfb45af786fb5d8746/src/library/tactic/simplify.cpp#L1284\r\n\r\nThe state is completely (and deliberately) reset at the end of the loop"},{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-10-12T17:01:08Z","comment":"I don't think too much thought went into the design of `ext_simplify_core`.  To be fair, nobody had much experience with meta code back then."}],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"fef512ce0fbddb2728bfe55319b5986a8c8e0ec0","message":"fix(init/meta/converter/interactive): Do not ignore errors in `for`","date":"2020-10-08T16:51:46Z"},{"author":"eric-wieser","committer":"web-flow","hash":"c1117199ff3ec1e856cb9fe5efd15ea7f4045511","message":"chore(*): Add a test for `for` with typos in `conv` mode","date":"2020-10-08T17:13:49Z"},{"author":"eric-wieser","committer":"web-flow","hash":"a098e5d341194e63ff2f211b41ab5ed634d9efdb","message":"fix(*): Missing namespace","date":"2020-10-08T17:27:15Z"},{"author":"eric-wieser","committer":"web-flow","hash":"dac2cf6561bf62ae56271f9d12e9733fa2acd281","message":"fix(*): Add comments, fix state, fix imports","date":"2020-10-09T08:31:15Z"},{"author":"eric-wieser","committer":"web-flow","hash":"994957912371e1f280ffe0ef8aedfeb3c54e5591","message":"fix(*): typo","date":"2020-10-09T08:31:34Z"},{"author":"eric-wieser","committer":"web-flow","hash":"9e720b95c344c2f7f1e0876e691ccc1192a13a73","message":"Update interactive.lean","date":"2020-10-09T08:41:51Z"},{"author":"eric-wieser","committer":"web-flow","hash":"67065b2cbfb789ed07e404eb27bfbd96f3bc54c6","message":"feat(init/meta/tactic): capture and unwrap","date":"2020-10-09T15:01:07Z"},{"author":"eric-wieser","committer":"web-flow","hash":"1c6527092088675632bd09fa159a2cfdb05f1691","message":"fix(meta/converter/interactive): Cleanup and fix `find` too","date":"2020-10-09T15:06:36Z"},{"author":"eric-wieser","committer":"web-flow","hash":"aa5edea50a00e8b0e880e9d7bc78a4b7de0f0a1a","message":"Update tactic.lean","date":"2020-10-09T15:08:52Z"},{"author":"eric-wieser","committer":"web-flow","hash":"3afbf712d2f3b4d18e460f2ecc6d041fb0b9abca","message":"Update tactic.lean","date":"2020-10-09T15:22:11Z"},{"author":"eric-wieser","committer":"web-flow","hash":"42debdbcb3d4e7c76053c41b282bbd5f396680d9","message":"fix(*): Undo `t <$> read` which doesn't work","date":"2020-10-09T15:32:32Z"},{"author":"eric-wieser","committer":"web-flow","hash":"72587c39b6ce622554b096f8079a34cd7a1abe1e","message":"fix(*): Fix namespacing","date":"2020-10-09T15:44:18Z"},{"author":"eric-wieser","committer":"web-flow","hash":"c562e350dcda21b1037221290a87cda155101521","message":"doc(*): Describe the limitations of ext_simplify_core","date":"2020-10-09T16:15:15Z"},{"author":"eric-wieser","committer":"web-flow","hash":"fc9da45bc7b6c6e26ea96832a3d848ec8e351918","message":"refactor(*): Replace a match with an `unwrap`","date":"2020-10-10T10:22:04Z"},{"author":"eric-wieser","committer":"web-flow","hash":"e7f4330d5da6fa8109222288c73257f9f843e49d","message":"Update tactic.lean","date":"2020-10-12T14:57:48Z"},{"author":"eric-wieser","committer":"web-flow","hash":"e16bae150b6dea27460f70002cb6db4a0d8828fa","message":"Update tactic.lean","date":"2020-10-12T14:58:24Z"},{"author":"eric-wieser","committer":"web-flow","hash":"b8f2963b8b7f33e8844032c33c1df1b77b7abadb","message":"Update simp_tactic.lean","date":"2020-10-12T15:00:18Z"},{"author":"eric-wieser","committer":"web-flow","hash":"f11aaecbd589a5a70ac7d901ecf6a51acc3a10dc","message":"Update interactive.lean","date":"2020-10-12T15:03:26Z"}]},{"author":"eric-wieser","number":475,"diff_summary":[{"file":"library/init/meta/converter/interactive.lean","status":"M","additions":17,"deletions":10}],"state":"open","open_date":"2020-10-08T15:48:18Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"bryangingechen","date":"2020-10-08T15:49:48Z","comment":"Could you add some tests showing the desired new behavior?"},{"author":"eric-wieser","date":"2020-10-08T15:51:08Z","comment":"Where would you like the test to go? https://github.com/leanprover-community/lean/tree/master/tests/lean/interactive/conv.lean?"},{"author":"eric-wieser","date":"2020-10-08T15:52:11Z","comment":"At any rate, this doesn't work yet, and I need help to make it work."},{"author":"bryangingechen","date":"2020-10-08T16:01:42Z","comment":"There are a few types of tests:\r\n- Lean files in [`tests/lean`](https://github.com/leanprover-community/lean/tree/master/tests/lean) should generate the corresponding `.lean.expected.out` file.\r\n- Lean files in [`tests/lean/run`](https://github.com/leanprover-community/lean/tree/master/tests/lean/run) should run without creating any output\r\n- Lean files in [`tests/lean/fail`](https://github.com/leanprover-community/lean/tree/master/tests/lean/fail) should fail\r\n\r\nSee also [`doc/fixing_tests.md`](https://github.com/leanprover-community/lean/blob/master/doc/fixing_tests.md)."}],"review_discussion":[{"author":"eric-wieser","file":"library/init/meta/converter/interactive.lean","date":"2020-10-08T15:48:42Z","comment":"I don't know how to let a tactic block be passed in here"}],"tags":[{"tag":"WIP","description":"Work in progress"}],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"eb036cc8aa569bb0b7c7e536f0b50ff2523c4a4c","message":"fix(init/meta/converter/interactive): Do not allow rw to create ⊢ goals in conv mode","date":"2020-10-08T15:47:33Z"}]},{"author":"EdAyers","number":473,"diff_summary":[{"file":"doc/widget_server.md","status":"M","additions":1,"deletions":0}],"state":"closed","open_date":"2020-10-02T12:32:24Z","update_date":"2020-10-02T13:13:43Z","discussion":[{"author":"gebner","date":"2020-10-02T12:46:48Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-02T13:13:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1198799805)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1198799709)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1198799698)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1198799776)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1198799767)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1198799732)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"web-flow","hash":"f19d3920079c2bb3e0c8c6804d01e37a661c164e","message":"doc(widget_server): fix a missing code block","date":"2020-10-02T12:32:02Z"}]},{"author":"jcommelin","number":472,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-10-01T14:26:50Z","update_date":"2020-10-01T14:57:51Z","discussion":[{"author":"robertylewis","date":"2020-10-01T14:30:57Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-10-01T14:57:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1193948858)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1193949084)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1193949044)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1193948963)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1193948937)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1193949137)"},{"author":"robertylewis","date":"2020-10-01T14:57:57Z","comment":"Oh, hah, I didn't even notice this was in lean and not mathlib! Just saw the notification and bors'ed by reflex."}],"review_discussion":[],"tags":[],"commits":[{"author":"jcommelin","committer":"web-flow","hash":"9cfddf34f246628abc11ca769d37aaaf7dd9a756","message":"chore(library/init/meta/tactic): fix typo in docstring","date":"2020-10-01T14:26:40Z"}]},{"author":"jcommelin","number":471,"diff_summary":[{"file":"library/data/vector.lean","status":"M","additions":6,"deletions":8}],"state":"closed","open_date":"2020-09-26T14:49:40Z","update_date":"2020-09-28T06:56:48Z","discussion":[{"author":"rwbarton","date":"2020-09-26T15:06:59Z","comment":"I guess this looks fine but what about just turning it into `local notation`?"},{"author":"jcommelin","date":"2020-09-26T15:09:28Z","comment":"For some reason it didn't work in that file. I don't understand notation well enough to figure out why it broke."},{"author":"rwbarton","date":"2020-09-26T15:14:22Z","comment":"Oh, maybe it was because of\r\n```lean\r\n@[simp] theorem to_list_cons (a : α) (v : vector α n) : to_list (a :: v) = a :: to_list v := ...\r\n```\r\nI think local notation might just always be preferred to global notation, with no fallback on type errors.\r\n\r\nAnyways, LGTM as is."},{"author":"gebner","date":"2020-09-28T06:22:03Z","comment":":tada: Next step: `multiset.cons`\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-09-28T06:56:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1174964724)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1174964601)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1174964565)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1174964825)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1174964810)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1174964768)"}],"review_discussion":[],"tags":[{"tag":"awaiting-review","description":null}],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"e4efcb23db3c35f403083c15eebffc09ccc24b42","message":"chore(library/data/vector): remove global notation for vector.cons","date":"2020-09-26T14:48:39Z"}]},{"author":"LdBeth","number":469,"diff_summary":[{"file":"bin/leanpkg","status":"M","additions":13,"deletions":14}],"state":"closed","open_date":"2020-09-20T07:25:38Z","update_date":"2023-02-14T19:11:46Z","discussion":[{"author":"gebner","date":"2020-09-21T08:55:39Z","comment":"According to @alexpeattie, `realpath` isn't installed by default either.  Can you shed some light on this, I don't have a mac?\r\n\r\n> realpath isn't installed on macOS by default either sadly sob . There are some alternatives here if we want to preserve the symlink reading behaviour"},{"author":"LdBeth","date":"2020-09-22T02:59:32Z","comment":"Neither `greadlink` nor `realpath` is present by default on mac, but if mac users have already installed `greadlink` from package manager of their choice, i.e. Homebrew, it means they also have `realpath` installed, which means those Mac users who already installed coreutils don't have to worry about this change.\r\n\r\nThis change is mean to relief those Mac users who prefer a compatible `realpath` other than the one from coreutils, such as https://github.com/harto/realpath-osx (it is a barely minimal implementation compared to coreutils), also FreeBSD users, they have `realpath` present in their systems by default, but not a `readlink` accepts `-f`."},{"author":"alexpeattie","date":"2020-09-22T08:51:14Z","comment":"I don't know if there's an advantage to switching from `greadlink` to `realpath`, but I think we should keep the `if` statement with a message about installing `coreutils` for users who don't have it 🙂 "},{"author":"LdBeth","date":"2020-09-22T10:10:19Z","comment":"So I made another commit change it to prompt user to install coreutils, and still fallback to `readlink -f` for some distributions with older versions of coreutils such as CentOS."},{"author":"LdBeth","date":"2020-09-23T11:19:07Z","comment":"Yes. Thank you for pointing that out."},{"author":"alexpeattie","date":"2020-09-28T13:10:13Z","comment":"~Revisiting this again @LdBeth - I'm not sure that changing the `if` to checking `command -v realpath` is right, because `realpath` is present by default on macOS, just not the GNU `realpath` which supports the `-v` flag. I think you'd either want to check `uname` as before, or do something like `if realpath -f / >/dev/null 2>&1`?~ Oops ignore this, I was getting `realpath` and `readlink` mixed up!\r\n\r\nAlso, just to double check, what's the main advantage to switching to `realpath` over `greadlink`? Thanks 🙂 !"},{"author":"LdBeth","date":"2020-09-29T15:13:05Z","comment":"@alexpeattie although macOS has neither `realpath` nor GNU `readlink`, acquiring the `realpath` command is fairly simple and flexible, user can choose either an executable calls C `realpath`, a python script calls `os.path.realpath`, even pure bash script implementation, or just use `realpath` from coreutils, which also introduces a bunch of tools may not needed by the user, which I personally find undesirable.\r\n\r\nWe might choose write shell function to replace call to external tools, but I feel it is unnecessary.   `realpath` is a tool been reinvented too many times."}],"review_discussion":[{"author":"gebner","file":"bin/leanpkg","date":"2020-09-21T08:46:16Z","comment":"```suggestion\r\nleandir=$(dirname \"$(realpath \"$0\")\")/..\r\nleandir=$(realpath \"$leandir\")\r\n```\r\n\r\nThere's no reason for a variable anymore."}],"tags":[],"commits":[{"author":"LdBeth","committer":"web-flow","hash":"bcfcfc535859adcbf00b26c6c2613dd67ed4befb","message":"fix(bin/leanpkg): replace `readlink -f`\n\n`realpath` behaves more uniformly than `readlink -f` across platforms, which eliminates the mundane test for checking availability of `greadlink` on OS X. Noting that `realpath` is not exchangeable everywhere with `readlink -f` but in this simple case it is suffice. Since `realpath` has been available from GNU coreutils since v8.15, most users shouldn't be affected by this change.","date":"2020-09-20T07:24:49Z"},{"author":"LdBeth","committer":"web-flow","hash":"f2bc8f2ac070eca7692357744ea8e09c4c1dc190","message":"fix(bin/leanpkg): prompt install coreutils on OS X\n\nIf cannot find `realpath`, prompt to install coreutils on OS X, otherwise fallback to `readlink -f` (if an old version of coreutils is installed).","date":"2020-09-22T09:41:39Z"},{"author":"LdBeth","committer":"web-flow","hash":"71814c1856f3329f80a55b5cd73af0991de4aac1","message":"fix(bin/leanpkg): revise prompt\n\nChange `greadlink` to `realpath`.","date":"2020-09-23T11:18:24Z"}]},{"author":"semorrison","number":466,"diff_summary":[{"file":"library/init/data/bool/basic.lean","status":"M","additions":17,"deletions":6}],"state":"closed","open_date":"2020-09-13T22:53:31Z","update_date":"2020-09-14T03:04:13Z","discussion":[{"author":"bryangingechen","date":"2020-09-13T23:30:25Z","comment":"LGTM. I figured we may as well add some docs while we're at it.\r\nbors d+"},{"author":"bors[bot]","date":"2020-09-13T23:30:26Z","comment":":v: semorrison can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"semorrison","date":"2020-09-14T02:31:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-09-14T03:04:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1109995678)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1109995715)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1109995706)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1109995657)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1109995646)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1109995694)"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"web-flow","hash":"44c0c010907361dd4b75e85c6ea92f1076ef05d5","message":"Update basic.lean","date":"2020-09-13T22:52:43Z"},{"author":"bryangingechen","committer":"web-flow","hash":"bd21a63da8231b5fb3f65d33c3f97a2a54fa8d58","message":"add docstrings","date":"2020-09-13T23:29:30Z"}]},{"author":"bryangingechen","number":464,"diff_summary":[{"file":"README.md","status":"M","additions":17,"deletions":2},{"file":"doc/changes.md","status":"M","additions":17,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":17,"deletions":2}],"state":"closed","open_date":"2020-09-09T23:05:33Z","update_date":"2020-09-09T23:34:34Z","discussion":[{"author":"bryangingechen","date":"2020-09-09T23:05:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-09-09T23:34:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1093749609)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1093749406)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1093749370)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1093749533)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1093749499)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1093749577)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"1d47a00a5718a36d4d198730d719f9548c306cca","message":"chore(*): release 3.20.0c","date":"2020-09-09T23:05:16Z"}]},{"author":"kbuzzard","number":463,"diff_summary":[{"file":"library/init/algebra/classes.lean","status":"M","additions":28,"deletions":3},{"file":"library/init/algebra/order.lean","status":"M","additions":28,"deletions":3},{"file":"library/init/core.lean","status":"M","additions":28,"deletions":3},{"file":"library/init/logic.lean","status":"M","additions":28,"deletions":3}],"state":"closed","open_date":"2020-09-09T14:35:19Z","update_date":"2020-09-09T21:19:54Z","discussion":[{"author":"bryangingechen","date":"2020-09-09T20:55:03Z","comment":"Thanks again!\r\nbors r+"},{"author":"bors[bot]","date":"2020-09-09T21:19:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1093307298)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1093307223)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1093307204)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1093307107)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1093307083)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1093307252)"}],"review_discussion":[{"author":"bryangingechen","file":"library/init/algebra/classes.lean","date":"2020-09-09T14:39:54Z","comment":"```suggestion\r\n/-- `is_total X r` means that the binary relation `r` on `X` is total, that is, that for any\r\n`x y : X` we have `r x y` or `r y x`.-/\r\n```"},{"author":"bryangingechen","file":"library/init/algebra/classes.lean","date":"2020-09-09T14:40:17Z","comment":"```suggestion\r\n/-- `is_preorder X r` means that the binary relation `r` on `X` is a pre-order, that is, reflexive\r\nand transitive. -/\r\n```"},{"author":"bryangingechen","file":"library/init/algebra/classes.lean","date":"2020-09-09T14:40:36Z","comment":"```suggestion\r\n/-- `is_asymm X r` means that the binary relation `r` on `X` is asymmetric, that is,\r\n`r a b → ¬ r b a`. -/\r\n```"},{"author":"bryangingechen","file":"library/init/algebra/classes.lean","date":"2020-09-09T14:40:51Z","comment":"```suggestion\r\n/-- `is_irrefl X r` means the binary relation `r` on `X` is irreflexive (that is, `r x x` never\r\nholds). -/\r\n```"},{"author":"bryangingechen","file":"library/init/core.lean","date":"2020-09-09T14:41:16Z","comment":"```suggestion\r\n/-- `not P`, with notation `¬ P`, is the `Prop` which is true if and only if `P` is false. It is\r\ninternally represented as `P → false`. -/\r\n```"},{"author":"robertylewis","file":"library/init/core.lean","date":"2020-09-09T14:41:26Z","comment":"```suggestion\r\n/-- `not P`, with notation `¬ P`, is the `Prop` which is true if and only if `P` is false. It is internally represented as `P → false`. -/\r\n```\r\nto be consistent with below (or change that one)"},{"author":"bryangingechen","file":"library/init/core.lean","date":"2020-09-09T14:41:34Z","comment":"```suggestion\r\n/-- `and P Q`, with notation `P ∧ Q`, is the `Prop` which is true precisely when `P` and `Q` are\r\nboth true. -/\r\n```"},{"author":"bryangingechen","file":"library/init/core.lean","date":"2020-09-09T14:41:50Z","comment":"```suggestion\r\n/-- `or P Q`, with notation `P ∨ Q`, is the proposition which is true if and only if `P` or `Q` is\r\ntrue. -/\r\n```"},{"author":"bryangingechen","file":"library/init/logic.lean","date":"2020-09-09T14:42:06Z","comment":"```suggestion\r\n/-- `iff P Q`, with notation `P ↔ Q`, is the proposition asserting that `P` and `Q` are equivalent,\r\nthat is, have the same truth value. -/\r\n```"},{"author":"bryangingechen","file":"library/init/core.lean","date":"2020-09-09T14:46:49Z","comment":"I've incorporated this into my suggestion below."},{"author":"bryangingechen","file":"library/init/core.lean","date":"2020-09-09T16:56:36Z","comment":"```suggestion\r\n/-- `not P`, with notation `¬ P`, is the `Prop` which is true if and only if `P` is false. It is\r\ninternally represented as `P → false`. -/\r\n```"}],"tags":[],"commits":[{"author":"kbuzzard","committer":"kbuzzard","hash":"cf38a40c8cf24528a71db9fa2146258f618aebf6","message":"and and or","date":"2020-09-08T19:56:46Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"37f9d5bdf7ef4a19e01cc877cf831a5e83356a46","message":"not","date":"2020-09-08T20:00:44Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"455ec7bb49c1530bca82e821907cb5b928e65838","message":"typo","date":"2020-09-08T20:08:26Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"3a9c460f219215a8f43b6df82546d08ca125f69e","message":"iff","date":"2020-09-08T20:09:48Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"82d7b0199a080dac2de8ae1fb521658e5934f6ef","message":"some rarely-used classes","date":"2020-09-08T20:43:16Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"0a29a77dc29b67bbaa4add1d1387c743f14b9f4b","message":"transitivity of implication","date":"2020-09-08T20:47:57Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"c3a8cdb1319273c210a10910db4350bef4da0e1b","message":"le_trans and le_refl","date":"2020-09-08T20:52:05Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"9c5891d0e5f0535463db25b0145fd950a2dfb358","message":"mt clarification","date":"2020-09-08T20:55:46Z"},{"author":"kbuzzard","committer":"web-flow","hash":"a36de61f0fd3e4dd96792bca3d6f1fbef794a22b","message":"Update library/init/core.lean\n\nCo-authored-by: Rob Lewis <Rob.y.lewis@gmail.com>","date":"2020-09-09T16:25:33Z"},{"author":"kbuzzard","committer":"web-flow","hash":"8e02be847ce44be0c32b42afbfff872c3ac13e38","message":"Update library/init/algebra/classes.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-09-09T16:26:15Z"},{"author":"kbuzzard","committer":"web-flow","hash":"c15a4b8712c07542c3f6f4610724580511a267b1","message":"Update library/init/algebra/classes.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-09-09T16:26:39Z"},{"author":"kbuzzard","committer":"web-flow","hash":"f6a25f64155bdd8531dd15eb5fe4ec8f050c5180","message":"Update library/init/core.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-09-09T16:26:53Z"},{"author":"kbuzzard","committer":"web-flow","hash":"b82e77b184f176e73d71d8566ed99537e8b86482","message":"Update library/init/logic.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-09-09T16:27:17Z"},{"author":"kbuzzard","committer":"web-flow","hash":"298fbde6032988a827fc452bf62e7bf8d7e38a00","message":"Update library/init/core.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-09-09T16:27:32Z"},{"author":"kbuzzard","committer":"web-flow","hash":"41b79c9acccd36230ff8e9b0cda9f6b1fdf07183","message":"Update library/init/algebra/classes.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-09-09T16:28:11Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"03da6b25b509589ab9c257cba3078004c4be5468","message":"add newline","date":"2020-09-09T16:56:53Z"},{"author":"kbuzzard","committer":"kbuzzard","hash":"20f48a391bd248eb4b6f143db876f843e763b167","message":"add newline","date":"2020-09-09T16:58:06Z"}]},{"author":"cipher1024","number":462,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"M","additions":22,"deletions":2},{"file":"tests/lean/run/resolve_name_bug.lean","status":"M","additions":22,"deletions":2}],"state":"closed","open_date":"2020-09-06T02:12:26Z","update_date":"2020-09-09T13:48:46Z","discussion":[{"author":"gebner","date":"2020-09-09T13:26:13Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-09-09T13:48:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1091340018)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1091340159)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1091340131)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1091340238)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1091340197)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1091340088)"}],"review_discussion":[{"author":"bryangingechen","file":"library/init/meta/tactic.lean","date":"2020-09-06T02:28:40Z","comment":"```suggestion\r\n```"},{"author":"digama0","file":"library/init/meta/tactic.lean","date":"2020-09-06T05:12:43Z","comment":"Does this actually fail anymore? I think it will just return garbage."},{"author":"cipher1024","file":"library/init/meta/tactic.lean","date":"2020-09-06T06:03:51Z","comment":"That's true, it will return `anonymous`. We could make it crash too, to be conservative. "},{"author":"digama0","file":"tests/lean/run/resolve_name_bug.lean","date":"2020-09-07T01:02:16Z","comment":"How about ``guard (result = `my_ext)``? Or perhaps a more complicated example where it's not the identity function."},{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-09-07T08:29:50Z","comment":"At least the `alias` tactic in mathlib depends on `resolve_constant` failing (if the declaration cannot be found)."},{"author":"cipher1024","file":"library/init/meta/tactic.lean","date":"2020-09-08T17:56:13Z","comment":"I made the change. Is there a way to launch a build of mathlib with this version of Lean?"},{"author":"bryangingechen","file":"library/init/meta/tactic.lean","date":"2020-09-08T18:31:53Z","comment":"The way I've always done it is to change the `leanpkg.toml` of mathlib to point to a local elan toolchain (try `elan toolchain link --help`)."}],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"d1c4ad45c739db6533fb5afbaaeedef4edb6f32a","message":"fix(tactic/resolve_constant): `parameters` are no longer a problem","date":"2020-09-06T02:11:15Z"},{"author":"cipher1024","committer":"web-flow","hash":"71bc679b8c76f89ecdd24fcd7d3ef372e056bd1a","message":"Update library/init/meta/tactic.lean\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-09-06T02:32:51Z"},{"author":"cipher1024","committer":"web-flow","hash":"afd84ee6e865bd300e42d488dac1c4ddae731a8e","message":"Update tactic.lean","date":"2020-09-06T23:30:59Z"},{"author":"cipher1024","committer":"cipher1024","hash":"dd9726e9334cb0038741d9c8e05df3dbec30b3a4","message":"more interesting test","date":"2020-09-07T01:12:00Z"}]},{"author":"ammkrn","number":461,"diff_summary":[{"file":"library/init/control/state.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-09-04T02:28:45Z","update_date":"2020-09-04T10:39:03Z","discussion":[{"author":"gebner","date":"2020-09-04T10:15:03Z","comment":"Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-09-04T10:39:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1071386623)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1071386521)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1071386497)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1071386590)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1071386574)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1071386430)"}],"review_discussion":[],"tags":[],"commits":[{"author":"ammkrn","committer":"ammkrn","hash":"42ffec49f24331710e93b8f141450173467dacf1","message":"fix(init/control/state): flip typeclass args for monad_state_trans\n\nAs of 3.7.0c, typeclass resolution solves instance arguments from right-to-left (via #139). #139 also explicitly flips the typeclass arguments of definitions like monad_reader_trans, but does not flip the typeclass arguments of monad_state_trans, causing the following example:\n\n```\ndef ex1 : option_t (state_t string id) string :=\n  do\n    s <- get,\n    option_t.mk $ return s\n```\n\nto return the error: `maximum class-instance resolution depth has been reached`. Flipping the typeclass arguments for monad_state_trans fixes this particular issue.\n\nCloses #460","date":"2020-09-04T02:27:24Z"}]},{"author":"EdAyers","number":459,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"M","additions":8,"deletions":2}],"state":"open","open_date":"2020-09-02T21:54:26Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"EdAyers","date":"2020-09-02T21:57:17Z","comment":"I'm leaving this as a draft for now because there are some other things that approx does"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"86342914c8ab7c8660d89f2cec815a40b2434b3c","message":"doc(tactic): add explanation of approx for unify","date":"2020-09-02T21:53:06Z"}]},{"author":"rwbarton","number":458,"diff_summary":[{"file":"library/init/algebra/classes.lean","status":"A","additions":167,"deletions":24},{"file":"library/init/meta/local_context.lean","status":"A","additions":167,"deletions":24},{"file":"src/frontends/lean/decl_util.cpp","status":"A","additions":167,"deletions":24},{"file":"tests/lean/run/instance_naming.lean","status":"A","additions":167,"deletions":24},{"file":"tests/lean/run/mvar_backtrack.lean","status":"A","additions":167,"deletions":24}],"state":"closed","open_date":"2020-08-29T20:49:18Z","update_date":"2020-10-27T11:30:58Z","discussion":[{"author":"rwbarton","date":"2020-08-30T00:34:09Z","comment":"Related Zulip discussion:\r\nhttps://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Bad.20instance.20name.20lint/near/206730654"},{"author":"rwbarton","date":"2020-08-30T16:01:31Z","comment":"One more edge case occurred to me, something like\r\n```lean\r\nclass lie (α : Type) : Type :=\r\n(bracket : α → α → α)\r\n\r\nnamespace lie\r\n\r\ndef gl : Type := unit\r\ninstance : lie gl := sorry    -- error, because it tries to use the name `lie.gl` which was just used above\r\n\r\nend lie\r\n```\r\nWe could refrain from stripping the current namespace from the class name if it's the whole class name. Not sure whether it is something to worry about."},{"author":"digama0","date":"2020-08-30T22:45:56Z","comment":"Shouldn't the name be `lie.gl.lie`?"},{"author":"rwbarton","date":"2020-09-08T13:14:50Z","comment":"Yes, probably. I've added logic to handle this case."},{"author":"rwbarton","date":"2020-09-08T13:33:54Z","comment":"Trying to build mathlib suggests that it would be worth adding logic to handle the case of a variable as the last argument, using the old `namespace.class_name` form for compatibility. It's also sensible since usually there won't be multiple instances of that shape for a given `(namespace, class_name)` pair."},{"author":"gebner","date":"2020-09-08T13:38:59Z","comment":"We should probably communicate the heuristic and rationales to the Lean 4 team."},{"author":"rwbarton","date":"2020-09-08T15:37:43Z","comment":"I managed to port all of mathlib to this latest version of the naming heuristic, but it wasn't pretty: I had to touch about 100 instances.\r\n\r\nI've added to the comment some other instance forms that I encountered in the process. Of these, the first three (dot notation, type ascriptions, `@` notation) are the most common. It's probably worth supporting these three--the logic is getting more complicated so some refactoring will be needed."},{"author":"rwbarton","date":"2020-09-08T15:53:05Z","comment":"([Here](https://github.com/leanprover-community/mathlib/commit/1592c0d38041f514149cec69f85ee4f376f5b474) is the mathlib patch if anyone is interested)"},{"author":"gebner","date":"2020-09-08T16:14:05Z","comment":"The mathlib patch doesn't *remove* any names.  I assume this is because you wanted to change as little as possible.  Will we see any gains, errm, *losses* from this change?"},{"author":"rwbarton","date":"2020-09-08T19:15:22Z","comment":"> The mathlib patch doesn't _remove_ any names. I assume this is because you wanted to change as little as possible.\r\n\r\nMainly, I wanted to make sure this change would be viable at all--100 affected instances isn't great but it seems acceptable, and it showed what additional changes would be helpful.\r\n\r\n> Will we see any gains, errm, _losses_ from this change?\r\n\r\nI hadn't planned this far ahead but I suppose that, as a one-off, I could modify Lean to report \"unnecessarily\" named instances, and we can delete whatever instance names don't seem helpful."},{"author":"rwbarton","date":"2020-09-08T19:20:32Z","comment":"(I guess I should say that what motivated me to try to fix this was the accumulated annoyance at all the times I wrote the second instance of something inside a `namespace`, and Lean told me the name was already used. I wasn't thinking as much about trying to streamline already-existing code, but that would also be a nice benefit.)"},{"author":"gebner","date":"2020-10-27T10:39:21Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T11:30:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1314257523)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1314257652)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1314257630)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1314257416)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1314257390)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1314257577)"}],"review_discussion":[{"author":"digama0","file":"src/frontends/lean/decl_util.cpp","date":"2020-08-30T01:27:51Z","comment":"indentation"},{"author":"rwbarton","file":"src/frontends/lean/decl_util.cpp","date":"2020-08-30T15:56:34Z","comment":"Argh, thanks. I fixed my emacs to not use tabs."},{"author":"gebner","file":"src/frontends/lean/decl_util.cpp","date":"2020-09-09T13:34:32Z","comment":"Since this is duplicated in two places, I'd factor out the code into a new function:\r\n```c++\r\noptional<name> heuristic_inst_name(expr const & e) {\r\n  // ...\r\n}\r\n\r\n  if (auto c_name = heuristic_inst_name(it)) {\r\n    scope.set_name(c_name->replace_prefix(ns, name()));\r\n  }\r\n```\r\n\r\nRelated to this, I don't think the code should replace the namespace of the argument because this makes it behave differently whether we're in a namespace or not (which is what this PR is supposed to avoid).\r\n```lean\r\nnamespace a\r\n\r\ndef b := unit\r\nclass c (α : Type).\r\n\r\n-- atm gets name a.c.b\r\ninstance : c b := ⟨⟩\r\n\r\nend a\r\n\r\n-- atm gets name a.c.a.b\r\ninstance : a.c a.b := ⟨⟩\r\n```"}],"tags":[],"commits":[{"author":"rwbarton","committer":"rwbarton","hash":"58b8afa4cd9edfd666129daf0e5c57eb815a3e82","message":"fix(frontends/lean/decl_util): change instance naming heuristic\n\nPreviously, inside a namespace, in a common situation like\n```lean\nnamespace ns\n\ninstance : ring foo := ...\ninstance : ring bar := ...\n\nend\n```\nboth instances would be assigned the name `ns.ring`;\nand you might not notice immediately if they were in different files.\n\nThe new heuristic tries to use both of the parts `ring` and `foo`,\neven when inside a namespace, while removing some redundant\nnamespace components.\n\nTwo instances in the core libraries needed to have names added,\nbecause the method to find the name appearing in the class argument\ncan't see through typed values (`_ : T`) or the use of parameters.\n(These instances wouldn't have been automatically assigned names\nif located outside a namespace.) I gave them their old names;\nhowever, it's possible names of other instances have changed.","date":"2020-08-29T20:47:36Z"},{"author":"rwbarton","committer":"rwbarton","hash":"282037cd567c4f37ec6218e99462d9567a471d2c","message":"* fix tabs\n* fix broken test\n* add another example","date":"2020-08-30T15:55:09Z"},{"author":"rwbarton","committer":"rwbarton","hash":"fe749242c806e0ce82a4adce4b4f43f0793f4065","message":"add a special case: class name equals namespace name","date":"2020-09-08T13:11:55Z"},{"author":"rwbarton","committer":"rwbarton","hash":"4de06d488d505e28db41880299b67392c2187107","message":"add logic to handle variables; describe potential improvements","date":"2020-09-08T15:33:33Z"},{"author":"gebner","committer":"gebner","hash":"eb2c3ea005a372dfe9a796cb129643c8eebd5aac","message":"Merge branch 'master' into instance-name","date":"2020-10-27T10:19:41Z"},{"author":"gebner","committer":"gebner","hash":"2a0419ac8ec2910eea48d1ef8a5508532a269342","message":"Extract heuristic_inst_name function.","date":"2020-10-27T10:29:02Z"}]},{"author":"rwbarton","number":457,"diff_summary":[{"file":"library/data/bitvec.lean","status":"D","additions":6,"deletions":332},{"file":"library/init/data/nat/basic.lean","status":"D","additions":6,"deletions":332},{"file":"library/init/data/nat/bitwise.lean","status":"D","additions":6,"deletions":332},{"file":"library/init/data/nat/lemmas.lean","status":"D","additions":6,"deletions":332},{"file":"tests/lean/run/1951.lean","status":"D","additions":6,"deletions":332},{"file":"tests/lean/run/exhaustive_vm_impl_test.lean","status":"D","additions":6,"deletions":332}],"state":"closed","open_date":"2020-08-28T17:13:50Z","update_date":"2020-08-29T18:09:08Z","discussion":[{"author":"rwbarton","date":"2020-08-28T17:45:32Z","comment":"I have a sorry-free (and actually not too painful) version of mathlib that builds against this patch applied to 3.18.4 (current mathlib doesn't build with current Lean yet)."},{"author":"jcommelin","date":"2020-08-28T17:49:21Z","comment":"Does this mean that we don't want GMP VM implementations for nat.pow?"},{"author":"rwbarton","date":"2020-08-28T18:02:30Z","comment":"Well apparently no one wanted to implement that while it was convenient, so making it more difficult doesn't seem like a big problem."},{"author":"bryangingechen","date":"2020-08-28T18:03:06Z","comment":"> I have a sorry-free (and actually not too painful) version of mathlib that builds against this patch applied to 3.18.4 (current mathlib doesn't build with current Lean yet).\r\n\r\nMaybe we could fold that into leanprover-community/mathlib#3955 (and make it \"update to version 3.20.0c\")?"},{"author":"rwbarton","date":"2020-08-28T20:00:23Z","comment":"My mathlib changes corresponding to the present PR are not ready to be PRed yet, and I'd personally prefer not to hold up leanprover-community/mathlib#3955 more than necessary since I would like to make some unrelated changes to `data.fin`."},{"author":"gebner","date":"2020-08-29T16:20:05Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-29T16:42:24Z","comment":"Build failed:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1045536694)"},{"author":"bryangingechen","date":"2020-08-29T17:43:22Z","comment":"What a strange error: https://github.com/leanprover-community/lean/runs/1045536694#step:9:210\r\n\r\nLet's see if it was just a fluke:\r\nbors r+"},{"author":"gebner","date":"2020-08-29T17:52:27Z","comment":"> [S, E, C, R, E, T, _, D, A, T, A]\r\n\r\n:rofl: "},{"author":"bors[bot]","date":"2020-08-29T18:09:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1045689095)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1045689105)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1045689102)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1045689083)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1045689079)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1045689037)"}],"review_discussion":[],"tags":[],"commits":[{"author":"rwbarton","committer":"rwbarton","hash":"c0fcaefd17f84a0f68dccab41bed7c130bfefe45","message":"chore(data/nat): remove nat.pow\n\nmathlib will use `monoid.pow` to supply `has_pow nat nat`.\nThe removed lemmas will be migrated to mathlib\n(and their proofs adjusted as needed)\nalong with the module `data.bitvec`.","date":"2020-08-28T17:15:25Z"}]},{"author":"rwbarton","number":456,"diff_summary":[{"file":"src/library/tactic/simplify.cpp","status":"A","additions":18,"deletions":0},{"file":"tests/lean/simp_trace.lean","status":"A","additions":18,"deletions":0},{"file":"tests/lean/simp_trace.lean.expected.out","status":"A","additions":18,"deletions":0}],"state":"closed","open_date":"2020-08-27T19:54:57Z","update_date":"2020-08-28T09:21:20Z","discussion":[{"author":"rwbarton","date":"2020-08-27T20:07:24Z","comment":"Whoops, I forgot trace messages go to stderr, and therefore not into the expected output file."},{"author":"gebner","date":"2020-08-28T08:40:24Z","comment":"BTW, I've now given you (and all mathlib maintainers) write access to this repo.  Feel free to create branches here and enjoy the github actions!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-28T09:21:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1040648427)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1040648503)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1040648485)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1040648369)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1040648316)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1040648451)"}],"review_discussion":[],"tags":[],"commits":[{"author":"rwbarton","committer":"rwbarton","hash":"42b885bf358a511cb26b08d1ad791f9df40303be","message":"feat(library/tactic/simplify): load options on simplifier entry\n\nThis allows the creation of a `simp?` tactic that locally enables\nthe `simplify.trace.rewrite` option.","date":"2020-08-27T19:52:44Z"},{"author":"rwbarton","committer":"rwbarton","hash":"582fa51c95ba203f20cd3148898ab95c9aa3db2e","message":"fix test output","date":"2020-08-27T20:06:36Z"}]},{"author":"bryangingechen","number":455,"diff_summary":[{"file":"README.md","status":"M","additions":23,"deletions":3},{"file":"doc/changes.md","status":"M","additions":23,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":23,"deletions":3}],"state":"closed","open_date":"2020-08-26T21:01:13Z","update_date":"2020-08-26T22:37:16Z","discussion":[{"author":"bryangingechen","date":"2020-08-26T22:09:11Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-26T22:37:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1033769269)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1033769292)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1033769282)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1033769241)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1033769233)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1033769308)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"05b7daf8127c10e0f2449360b8099d5e29c7bd00","message":"chore(*): release 3.19.0c","date":"2020-08-26T21:00:37Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"2a4bd0a473b777517cd05457d2cdb50787deff03","message":"missed a change","date":"2020-08-26T21:09:14Z"}]},{"author":"EdAyers","number":453,"diff_summary":[{"file":"doc/widget_server.md","status":"A","additions":221,"deletions":7},{"file":"library/init/default.lean","status":"A","additions":221,"deletions":7},{"file":"library/init/meta/default.lean","status":"A","additions":221,"deletions":7},{"file":"library/init/meta/json.lean","status":"A","additions":221,"deletions":7},{"file":"library/init/meta/widget/basic.lean","status":"A","additions":221,"deletions":7},{"file":"src/frontends/lean/widget.cpp","status":"A","additions":221,"deletions":7},{"file":"src/library/vm/CMakeLists.txt","status":"A","additions":221,"deletions":7},{"file":"src/library/vm/init_module.cpp","status":"A","additions":221,"deletions":7},{"file":"src/library/vm/vm_json.cpp","status":"A","additions":221,"deletions":7},{"file":"src/library/vm/vm_json.h","status":"A","additions":221,"deletions":7},{"file":"tests/lean/json.lean","status":"A","additions":221,"deletions":7},{"file":"tests/lean/json.lean.expected.out","status":"A","additions":221,"deletions":7},{"file":"tests/lean/widget/dangerousHtml.input","status":"A","additions":221,"deletions":7},{"file":"tests/lean/widget/dangerousHtml.input.expected.out","status":"A","additions":221,"deletions":7},{"file":"tests/lean/widget/dangerousHtml.lean","status":"A","additions":221,"deletions":7},{"file":"tests/lean/widget/widget4.input.expected.out","status":"A","additions":221,"deletions":7}],"state":"closed","open_date":"2020-08-23T16:11:47Z","update_date":"2020-08-28T11:36:31Z","discussion":[{"author":"gebner","date":"2020-08-23T16:51:17Z","comment":"This is sweet!  Could you also add a parse_json and to_string function please?"},{"author":"gebner","date":"2020-08-28T08:43:25Z","comment":"LGTM except for the build error."},{"author":"gebner","date":"2020-08-28T11:08:00Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-28T11:36:30Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1041160238)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1041160279)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1041160259)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1041160334)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1041160311)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1041160197)"}],"review_discussion":[{"author":"gebner","file":"library/init/meta/json.lean","date":"2020-08-24T08:09:58Z","comment":"Could you please change this to use the `json.hpp` library?  The library is probably faster and more correct when escaping strings (my main worry)."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"43b0b8ddb6981acec9c6f011b8002484938e433a","message":"feat(widget): add json support\n\nAdd a new inductive datatype in to core; `json` for encoding json objects.\nNow `html.attr.val`'s value argument is a `json` object.\nBackwards compatibility should be maintained, because there is a coe between strings and json.","date":"2020-08-23T16:10:35Z"},{"author":"EdAyers","committer":"EdAyers","hash":"02ace365456aa6fab03e8c1516878e7ba8fca2f5","message":"remove accidentally committed code","date":"2020-08-23T16:20:17Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ff9ae8c1394579b67ed40e703ffd12e9b232d0ef","message":"Add a test and fix a bug\n\nAttributes were being implicitly cast to std::string.","date":"2020-08-23T16:49:53Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c9faea6186ecdc0d52687e4569e4f9f0d262712c","message":"add json.to_format","date":"2020-08-23T21:12:35Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4eb07acc62a446a9e47762921da812940dd21b4a","message":"Add a simple parser","date":"2020-08-23T21:33:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"74676162b0d1c93b7dbe7c0ac82880bb97a08b1a","message":"Add test","date":"2020-08-23T21:33:27Z"},{"author":"EdAyers","committer":"EdAyers","hash":"779592d64c8aa65efaa0f185b95198681f19f958","message":"fix test","date":"2020-08-23T22:15:27Z"},{"author":"EdAyers","committer":"EdAyers","hash":"56e7bd17bcca2649d29452b466e56edd40be907b","message":"Make unparsing a json use json.hpp","date":"2020-08-27T23:07:32Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d4f7c7f3c2efdcd80741fd3853be3c9c942bcc08","message":"Fix","date":"2020-08-28T09:08:20Z"},{"author":"EdAyers","committer":"EdAyers","hash":"2ec6ea0f3d1d299ed4558b2eb1fd3ae2369b30e9","message":"Update test","date":"2020-08-28T09:43:03Z"}]},{"author":"jcommelin","number":452,"diff_summary":[{"file":"library/init/data/fin/basic.lean","status":"M","additions":39,"deletions":28},{"file":"library/init/data/repr.lean","status":"M","additions":39,"deletions":28},{"file":"library/init/data/subtype/basic.lean","status":"M","additions":39,"deletions":28},{"file":"library/init/data/to_string.lean","status":"M","additions":39,"deletions":28},{"file":"library/init/data/unsigned/basic.lean","status":"M","additions":39,"deletions":28},{"file":"library/init/meta/comp_value_tactics.lean","status":"M","additions":39,"deletions":28},{"file":"tests/lean/pp_char_bug.lean.expected.out","status":"M","additions":39,"deletions":28},{"file":"tests/lean/run/1318.lean","status":"M","additions":39,"deletions":28},{"file":"tests/lean/run/1728.lean","status":"M","additions":39,"deletions":28},{"file":"tests/lean/run/comp_val2.lean","status":"M","additions":39,"deletions":28},{"file":"tests/lean/run/heap_mem.lean","status":"M","additions":39,"deletions":28}],"state":"closed","open_date":"2020-08-22T07:14:25Z","update_date":"2020-08-24T16:07:33Z","discussion":[{"author":"gebner","date":"2020-08-24T08:07:28Z","comment":"The tests fails."},{"author":"jcommelin","date":"2020-08-24T09:18:13Z","comment":"I've tried to fix the tests (-;"},{"author":"jcommelin","date":"2020-08-24T12:06:12Z","comment":"@gebner Locally the build + tests are totally fine. But CI is complaining. I don't know what's going on."},{"author":"gebner","date":"2020-08-24T12:26:19Z","comment":"CI is green BTW."},{"author":"jcommelin","date":"2020-08-24T12:35:00Z","comment":"Ooh, silly me. Looking at the wrong GH notification :facepalm: "},{"author":"gebner","date":"2020-08-24T15:41:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-08-24T16:07:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1022382134)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1022382013)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1022381971)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1022382086)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1022382053)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1022382200)"}],"review_discussion":[],"tags":[],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"41e0b87bdc002c12fbf8bd8320fdc7942511430a","message":"chore(data/fin): make fin a subtype","date":"2020-08-22T07:13:48Z"},{"author":"jcommelin","committer":"jcommelin","hash":"e3e8699111ab2bba527322ce0796ce2e2b8eec6a","message":"wip","date":"2020-08-24T09:05:14Z"},{"author":"jcommelin","committer":"jcommelin","hash":"83c8d10748c33c8cf7501350df2ed2a9bcfffc0d","message":"fix comp_val","date":"2020-08-24T09:14:18Z"}]},{"author":"digama0","number":449,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":20,"deletions":4},{"file":"library/init/meta/type_context.lean","status":"M","additions":20,"deletions":4}],"state":"closed","open_date":"2020-08-16T17:44:17Z","update_date":"2020-08-17T07:48:27Z","discussion":[{"author":"gebner","date":"2020-08-17T07:24:57Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-17T07:48:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/992518670)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/992518756)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/992518735)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/992518709)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/992518699)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/992518622)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"91dd6098106ce25f370aedb46673b94178675b15","message":"feat(init/meta/interactive): check let bindings in guard_hyp","date":"2020-08-16T17:42:27Z"}]},{"author":"robertylewis","number":448,"diff_summary":[{"file":"extras/latex/lstlean.tex","status":"M","additions":3,"deletions":0}],"state":"closed","open_date":"2020-08-16T16:40:20Z","update_date":"2020-08-16T17:09:12Z","discussion":[{"author":"fpvandoorn","date":"2020-08-16T16:46:21Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-08-16T17:09:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990812421)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990812417)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990812415)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990812426)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990812424)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990812401)"}],"review_discussion":[],"tags":[],"commits":[{"author":"robertylewis","committer":"web-flow","hash":"458c6fc834736b541c061e491168f56d28df536e","message":"fix(lstlean.tex): add \\fl and \\fr","date":"2020-08-16T16:40:12Z"}]},{"author":"digama0","number":446,"diff_summary":[{"file":"library/init/algebra/order.lean","status":"M","additions":114,"deletions":70},{"file":"library/init/data/int/basic.lean","status":"M","additions":114,"deletions":70},{"file":"library/init/data/int/order.lean","status":"M","additions":114,"deletions":70},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":114,"deletions":70}],"state":"closed","open_date":"2020-08-15T18:01:35Z","update_date":"2020-08-16T09:36:05Z","discussion":[{"author":"gebner","date":"2020-08-16T08:57:20Z","comment":"I'm not a fan of avoiding choice, but as long as it doesn't change the theorem statements and makes you happy,\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-16T09:36:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990085975)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990085985)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990085982)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990085961)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990085956)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990085947)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"f845d7478d8d46330399aceb418ffc6627f30477","message":"refactor(data/nat/lemmas): eliminate choice in nat.find","date":"2020-08-15T18:00:45Z"},{"author":"digama0","committer":"digama0","hash":"9940e4be2bd38631bb54fee85e668ebad51b1a36","message":"find_min' too","date":"2020-08-15T18:19:12Z"},{"author":"digama0","committer":"digama0","hash":"194366a7b475cf28d106b693d8686faf05e2b96a","message":"refactor(init/data/nat,int): less choice","date":"2020-08-16T00:28:48Z"}]},{"author":"digama0","number":445,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":42,"deletions":42},{"file":"tests/lean/rename.lean","status":"M","additions":42,"deletions":42},{"file":"tests/lean/run/1797.lean","status":"M","additions":42,"deletions":42},{"file":"tests/lean/run/1804a.lean","status":"M","additions":42,"deletions":42},{"file":"tests/lean/run/1804b.lean","status":"M","additions":42,"deletions":42},{"file":"tests/lean/run/1805.lean","status":"M","additions":42,"deletions":42},{"file":"tests/lean/run/1813.lean","status":"M","additions":42,"deletions":42},{"file":"tests/lean/run/400.lean","status":"M","additions":42,"deletions":42},{"file":"tests/lean/run/injection_ginductive.lean","status":"M","additions":42,"deletions":42},{"file":"tests/lean/run/simp_arrow.lean","status":"M","additions":42,"deletions":42}],"state":"closed","open_date":"2020-08-15T17:10:31Z","update_date":"2020-08-16T17:30:51Z","discussion":[{"author":"gebner","date":"2020-08-16T08:51:04Z","comment":"The PR description lacks a \"motivation\" section."},{"author":"digama0","date":"2020-08-16T14:42:18Z","comment":"@gebner fixed"},{"author":"digama0","date":"2020-08-16T14:44:40Z","comment":"Regarding checking the value of a let binding, this would be a reasonable next step after this PR: make `guard_hyp h : t` check that `h` is a hypothesis (not a let binding) in the local context of type `t`, and `guard_hyp h : t := val` checks that `h` is a let binding with type `t` and value `val`."},{"author":"gebner","date":"2020-08-16T17:06:14Z","comment":"Ah ok, then the change makes sense.\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-16T17:30:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990849618)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990849562)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990849557)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990849594)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990849584)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990849609)"},{"author":"bors[bot]","date":"2020-08-16T17:30:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990849618)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990849562)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990849557)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990849594)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990849584)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990849609)"},{"author":"digama0","date":"2020-08-16T17:45:56Z","comment":"Bors merged this PR twice?"},{"author":"bors[bot]","date":"2020-08-16T17:45:57Z","comment":"Already running a review"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"afa1055c2c610857ae0bbe34eae66df0864ad9e4","message":"chore(init/meta/interactive): use `guard hyp h : t`\n\ninstead of `guard_hyp h := t`. This affects many files but it is a simple\nfind and replace.","date":"2020-08-15T17:10:10Z"}]},{"author":"digama0","number":444,"diff_summary":[{"file":"library/init/meta/widget/html_cmd.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-08-15T17:04:59Z","update_date":"2020-08-16T09:14:23Z","discussion":[{"author":"gebner","date":"2020-08-16T08:51:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-16T09:14:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990046559)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990046526)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990046521)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990046544)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990046540)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990046552)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"0cca0224e75a553407069f0bf60e346b0db1a5f8","message":"fix(init/meta/widget): fix parse precedence for #html","date":"2020-08-15T17:04:01Z"}]},{"author":"EdAyers","number":443,"diff_summary":[{"file":"doc/widget_server.md","status":"A","additions":418,"deletions":0}],"state":"closed","open_date":"2020-08-15T16:43:23Z","update_date":"2020-08-20T11:28:05Z","discussion":[{"author":"EdAyers","date":"2020-08-20T08:36:16Z","comment":"Ok I think I'm basically happy with it as well for now. Doubtless there will be additions and corrections later."},{"author":"gebner","date":"2020-08-20T11:06:11Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-08-20T11:28:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1007328115)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1007328088)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1007328060)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1007328204)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1007328179)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1007328237)"}],"review_discussion":[{"author":"gebner","file":"doc/widget_server.md","date":"2020-08-17T09:09:58Z","comment":"```suggestion\r\nLean attaches __widgets__ to various points in the lean document. These points are added using the `tactic.save_widget` or `tactic.trace_widget` lean constants in the same manner as `tactic.save_info`.\r\n```"},{"author":"gebner","file":"doc/widget_server.md","date":"2020-08-17T09:11:35Z","comment":"```suggestion\r\n```ts\r\n→ {command: \"info\", file_name: \"my_file.lean\", line: 25, column: 2, seq_num: 1}\r\n← {response: \"ok\", seq_num: 1, record: {..., widget: {line: 25, column: 0, id: 51}}}\r\n→ {command: \"get_widget\", seq_num: 2, file_name: \"my_file.lean\", line: 25, column: 0, id: 51}\r\n← {response: \"ok\", seq_num: 2, widget: {line: 25, column: 0, id: 51, html: {...}}}\r\n```\r\n```"},{"author":"gebner","file":"doc/widget_server.md","date":"2020-08-17T09:13:00Z","comment":"```suggestion\r\n  \"t\": \"button\",\r\n```"},{"author":"gebner","file":"doc/widget_server.md","date":"2020-08-17T09:18:13Z","comment":"```suggestion\r\nAll messages are formatted as JSON objects.\r\nRequests and responses are sent via standard input and standard output.  Each request or response is sent on a separate line.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:16:59Z","comment":"```suggestion\r\n`command` is one of a fixed set of command strings shown below, `seq_num` is an optional parameter which Lean will use to tag a subsequent response to this request. In this way, multiple requests can be in-flight at the same time.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:17:09Z","comment":"```suggestion\r\nThis will cause the Lean server to produce the following `InfoResponse`.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:17:42Z","comment":"```suggestion\r\nIn the case that the Lean file is still compiling (as indicated by the orange gutter bars in VS Code), then instead this will merely return a `{response: \"ok\"}` response.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:17:56Z","comment":"```suggestion\r\nLean attaches __widgets__ to various points in the Lean document. These points are added using the `tactic.save_widget` or `tactic.trace_widget` Lean constants in the same manner as `tactic.save_info`.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:18:15Z","comment":"```suggestion\r\nFor more information about the API for creating widgets in Lean, please consult the [docs in the Lean sourcecode](https://github.com/leanprover-community/lean/blob/master/library/init/meta/widget/basic.lean).\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:18:31Z","comment":"```suggestion\r\nIn VS Code, the user can click on the part of the document marked `#html` and interact with this widget in the info view. In the above example, there is some ephemeral UI state in the form of a counter value. This state is managed in Lean and is destroyed when the server quits or if the document is modified above the widget.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:20:14Z","comment":"```suggestion\r\n\r\nNote: the keys of attributes and styles follow the React convention; for example `\"textAlign\"` and `\"onClick\"` instead of `\"text-align\"` and `\"on-click\"`. Additionally, `\"className\"` is used instead of `\"class\"`. So if you are not implementing with React, you will need to convert all of these keynames back to their HTML-native forms.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:20:56Z","comment":"```suggestion\r\nWidgets provide special support for 'tooltips' which are pieces of HTML that appear in 'popovers'. If the `tt` property is set on a `WidgetElement` then the `WidgetHTML` value of `tt` should be rendered in a popover-like element (always, not only when the user hovers their cursor over the element). In the VS Code implementation, this is implemented with the [`popper.js`](https://popper.js.org/) library, where the given WidgetElement is wrapped in an additional `<div/>` also containing the tooltip content. See the [VS Code implementation](https://github.com/leanprover/vscode-lean/blob/master/infoview/widget.tsx) for more details.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:21:21Z","comment":"```suggestion\r\nThe recommended UI framework for use with rendering widgets is [React](https://reactjs.org/), however this is not required.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:21:54Z","comment":"```suggestion\r\nA `WidgetHTML` with value `null` should return an empty HTML object (in React you can do this by returning `null` or `false`).\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:22:44Z","comment":"```suggestion\r\nThe widgets provided in core Lean assume that a CSS stylesheet called `tachyons.css` is loaded. This can be downloaded from <https://tachyons.io>. Note that this follows the 'functional CSS' paradigm, so the idea is that the Lean widget-writer should never need to write their own styles, and instead attaches these tachyons classes to their elements.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:22:57Z","comment":"```suggestion\r\nIn the VS Code implementation, `onChange` is only allowed on `input` elements whose `type` attribute is set to `select` or `onChange`.\r\n```"},{"author":"bryangingechen","file":"doc/widget_server.md","date":"2020-08-19T01:23:34Z","comment":"```suggestion\r\nWhen a `WidgetEventResponse` is returned, it may contain 'effects', which are changes to the editor state that the UI is requesting.\r\n```"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"eb8fad1c5324d01ab9392172b97625cd7e91405c","message":"doc(widget): server API docs","date":"2020-08-15T16:42:02Z"},{"author":"EdAyers","committer":"web-flow","hash":"99f33bf8158dbf21e25c918cb7bdb045ff046377","message":"Apply suggestions from code review\n\nCo-authored-by: Gabriel Ebner <gebner@gebner.org>","date":"2020-08-18T17:31:05Z"},{"author":"EdAyers","committer":"web-flow","hash":"6be7ffdbc3a3430be11848a4e2e4cf467c46ffb3","message":"Apply suggestions from code review\n\nCo-authored-by: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-08-20T08:30:07Z"}]},{"author":"rwbarton","number":442,"diff_summary":[{"file":"src/frontends/lean/builtin_exprs.cpp","status":"A","additions":211,"deletions":122},{"file":"src/frontends/lean/structure_cmd.cpp","status":"A","additions":211,"deletions":122},{"file":"tests/lean/1334b.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/1513.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/1766.lean","status":"A","additions":211,"deletions":122},{"file":"tests/lean/1794.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/397c.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/398c.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/add_defn_eqns.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/anc1.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/auto_quote_error2.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/by_contradiction.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/check.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/combinators1.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/derive.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/do_match_fail.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/elab_error_recovery.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/eta_tac.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/extends_priority.lean","status":"A","additions":211,"deletions":122},{"file":"tests/lean/extends_priority.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/inaccessible2.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/induction_generalize_premise_args.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/interactive/do_info.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/interactive/focus.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/interactive/my_tac_class.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/interactive/rb_map_ts.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/interactive/term_goal_info.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/nested_errors.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/out_param_proj.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/pp_goal_issue.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/run/1577.lean","status":"A","additions":211,"deletions":122},{"file":"tests/lean/run/437c.lean","status":"A","additions":211,"deletions":122},{"file":"tests/lean/run/aexp.lean","status":"A","additions":211,"deletions":122},{"file":"tests/lean/run/smt_destruct.lean","status":"A","additions":211,"deletions":122},{"file":"tests/lean/smart_unfolding.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/smt_begin_end1.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/tactic_state_pp.lean.expected.out","status":"A","additions":211,"deletions":122},{"file":"tests/lean/vm_override.lean.expected.out","status":"A","additions":211,"deletions":122}],"state":"closed","open_date":"2020-08-14T18:15:00Z","update_date":"2020-10-27T12:07:06Z","discussion":[{"author":"bryangingechen","date":"2020-08-14T18:52:55Z","comment":"bors try"},{"author":"gebner","date":"2020-08-14T19:01:55Z","comment":"There is a lot of stuff that depends on the name `a`. :disappointed:  I wonder how much of mathlib will break."},{"author":"bors[bot]","date":"2020-08-14T19:02:22Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/986214640)"},{"author":"digama0","date":"2020-08-14T19:13:38Z","comment":"@gebner It's not `a` bug it's `_x` feature. Depending on auto names is bad practice."},{"author":"rwbarton","date":"2020-08-15T19:51:18Z","comment":"Fixed some additional tests. Now trying to build mathlib to see how bad the damage is."},{"author":"rwbarton","date":"2020-08-15T20:17:04Z","comment":"Hmm, now lean is segfaulting on `set_theory.pgame`, so maybe don't merge this just yet, though I don't know the cause yet."},{"author":"rwbarton","date":"2020-08-15T21:25:01Z","comment":"The change in default binder name to `_x` is triggering #447, because `pgame` is defined as\r\n```lean\r\ninductive pgame : Type (u+1)\r\n| mk : ∀ α β : Type u, (α → pgame) → (β → pgame) → pgame\r\n```\r\n\r\nI'm not sure how to proceed. I suppose it would be nice to use the name `_x` only in tactic mode and `a` elsewhere, as this would also cause less breakage from use of autogenerated names. But it doesn't seem to be that straightforward based on how `→` is parsed currently. Also possible would be to try to come up with a name not starting with `_` but which won't conflict with anything someone is likely to type; suggestions?"},{"author":"gebner","date":"2020-09-09T13:35:29Z","comment":"Just throwing ideas out there: we could also use name.anonymous instead of _x to avoid hitting #447."},{"author":"gebner","date":"2020-10-27T12:07:03Z","comment":"Replaced by #490."}],"review_discussion":[{"author":"bryangingechen","file":"tests/lean/run/437.lean","date":"2020-08-14T19:02:20Z","comment":"I think we've been trying to name test files that reference `leanprover-community` issue numbers with a `c`, so this should be called `437c.lean`."},{"author":"rwbarton","file":"tests/lean/run/437.lean","date":"2020-08-15T19:35:46Z","comment":"Ah thanks, I wondered whether there was a convention for that, but I saw some other test files like `####b.lean`, so I didn't work out that `c` meant community."},{"author":"gebner","file":"src/frontends/lean/builtin_exprs.cpp","date":"2020-10-26T10:49:08Z","comment":"I wonder if we shouldn't change the `mk_arrow` function instead."}],"tags":[],"commits":[{"author":"rwbarton","committer":"rwbarton","hash":"eec4618a8bf576ca89eb13cafaea9a8908b63f75","message":"fix(frontends/lean/builtin_exprs): \"fix\" \"`a` bug\"\n\nIn tactic mode, `p -> a` would be interpreted as `Π (a : p), a`,\ncapturing the variable `a`.\nChange the binder name used by `->` to `_x` to avoid this.\n\nFixes #437.\n(more or less)","date":"2020-08-14T18:10:54Z"},{"author":"rwbarton","committer":"rwbarton","hash":"6226db0bb3aff59ee24b15eb80ff1a5197380afe","message":"actually fix test 1766","date":"2020-08-14T18:28:36Z"},{"author":"rwbarton","committer":"rwbarton","hash":"cb8b021d143132c757bea6f4d4c2aec4ab389084","message":"rename test 437 -> 437c","date":"2020-08-15T19:46:02Z"},{"author":"rwbarton","committer":"rwbarton","hash":"41331e39088dc3bf23f5ecd07946005dd54f41b3","message":"feat(frontends/lean/structure_cmd): add extends_priority option (#440)\n\nThis option controls the priority of instances produced by `extends`,\r\nand is set to 100 by default.\r\n\r\nSee https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/default_extends_priority/near/206814398 for discussion.","date":"2020-08-15T19:46:04Z"},{"author":"rwbarton","committer":"rwbarton","hash":"c816b19c45b83bdf94bbb1f3026cc72fa1aac628","message":"fix more tests\n\nI think I somehow did not rebuild the core library before,\nand these failures are due to occurrences of `->` in core.","date":"2020-08-15T19:46:04Z"}]},{"author":"rwbarton","number":440,"diff_summary":[{"file":"src/frontends/lean/structure_cmd.cpp","status":"A","additions":84,"deletions":6},{"file":"tests/lean/397c.lean.expected.out","status":"A","additions":84,"deletions":6},{"file":"tests/lean/398c.lean.expected.out","status":"A","additions":84,"deletions":6},{"file":"tests/lean/extends_priority.lean","status":"A","additions":84,"deletions":6},{"file":"tests/lean/extends_priority.lean.expected.out","status":"A","additions":84,"deletions":6},{"file":"tests/lean/out_param_proj.lean.expected.out","status":"A","additions":84,"deletions":6}],"state":"closed","open_date":"2020-08-13T17:41:32Z","update_date":"2020-08-14T09:56:16Z","discussion":[{"author":"gebner","date":"2020-08-14T09:33:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-14T09:56:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/984273317)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/984273354)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/984273347)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/984273418)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/984273399)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/984273379)"}],"review_discussion":[],"tags":[],"commits":[{"author":"rwbarton","committer":"rwbarton","hash":"df4f61eb8791c65feb8d22e532a17b887c407f79","message":"feat(frontends/lean/structure_cmd): add extends_priority option\n\nThis option controls the priority of instances produced by `extends`,\nand is set to 100 by default.","date":"2020-08-13T17:36:23Z"}]},{"author":"DanielFabian","number":439,"diff_summary":[{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":16,"deletions":4}],"state":"closed","open_date":"2020-08-13T14:49:16Z","update_date":"2020-08-13T15:24:02Z","discussion":[{"author":"gebner","date":"2020-08-13T15:24:02Z","comment":"Wow, this works much better than I'd expected.  Maybe we should even use it for the documentation.\r\n\r\nHowever, this PR should go into mathlib first (mathlib contains a copy of the file).  (I'll then copy the mathlib fork over here once in a while.)"}],"review_discussion":[],"tags":[],"commits":[{"author":"DanielFabian","committer":"DanielFabian","hash":"b0e31f7544ba8b72552735bf6abd0ae2b1fcc6fe","message":"Add css classes for indentation as required by group and nest.","date":"2020-08-13T14:39:18Z"}]},{"author":"shingtaklam1324","number":434,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":1,"deletions":0}],"state":"closed","open_date":"2020-08-09T10:40:38Z","update_date":"2020-08-10T08:01:52Z","discussion":[{"author":"bryangingechen","date":"2020-08-09T15:10:13Z","comment":"It might be https://github.com/trentm/python-markdown2/issues/355. I think adding extra newlines for now is fine."},{"author":"gebner","date":"2020-08-10T07:39:09Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-10T08:01:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/965694933)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/965694919)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/965694898)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/965694877)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/965694862)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/965694947)"}],"review_discussion":[],"tags":[],"commits":[{"author":"shingtaklam1324","committer":"web-flow","hash":"0b50b78f64c870002f3301ec73616e938ec20eb9","message":"fix(init/meta/interactive): fix broken docstring\n\nRight now the docstring rendering is broken for `introv`. I suspect it's due to the consecutive code blocks, so I added a blank line between them. I don't know if this works","date":"2020-08-09T10:39:38Z"}]},{"author":"fpvandoorn","number":432,"diff_summary":[{"file":"library/init/meta/environment.lean","status":"M","additions":27,"deletions":16},{"file":"library/init/meta/expr.lean","status":"M","additions":27,"deletions":16}],"state":"closed","open_date":"2020-08-06T18:56:02Z","update_date":"2020-08-07T11:34:13Z","discussion":[{"author":"gebner","date":"2020-08-07T11:10:46Z","comment":"For the future: you get twice the credit if you open two PRs!  :smile: \r\n\r\n> Can I use library notes in core?\r\n\r\nI wouldn't write `see note [foo]` where `foo` is defined in mathlib, although maybe `see note [foo] in mathlib` could be acceptable.  If you want to define library notes in core, then you'll need to port it to core but I'm not sure if it's worth the effort.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-07T11:34:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/957984855)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/957984836)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/957984826)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/957984803)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/957984788)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/957984870)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"35a010a17d1647c672b724eca7465ed28c71b626","message":"fix(expr): add functionality for let expressions\nadd doc strings to some declarations\nfix bug in in_current_file","date":"2020-08-06T18:44:32Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"55e16b67b956819af213054df375d0069fb37d4f","message":"improve docstring","date":"2020-08-06T19:23:44Z"}]},{"author":"JLimperg","number":430,"diff_summary":[{"file":"library/init/meta/injection_tactic.lean","status":"M","additions":34,"deletions":9}],"state":"closed","open_date":"2020-08-05T01:45:25Z","update_date":"2020-08-06T14:46:45Z","discussion":[{"author":"gebner","date":"2020-08-06T14:24:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-06T14:46:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/954194471)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/954194296)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/954194278)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/954194387)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/954194357)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/954194431)"}],"review_discussion":[],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"effc23cfb1283b15b99bdc93b27ecc3bee1a4e34","message":"fix(library/init/meta/injection_tactic): fix injection_with naming\n\n`injection_with` used to ignore two of its arguments, which modify the\nname generation strategy.\n\nAlso doc improvements.","date":"2020-08-05T01:42:23Z"}]},{"author":"urkud","number":428,"diff_summary":[{"file":"library/init/algebra/order.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-08-01T02:09:20Z","update_date":"2020-08-03T07:57:13Z","discussion":[{"author":"bryangingechen","date":"2020-08-01T11:11:15Z","comment":"Should we add a docstring mentioning that [it's there because it avoids classical choice](https://github.com/leanprover-community/mathlib/pull/3643#issuecomment-667437859)?"},{"author":"digama0","date":"2020-08-01T12:22:13Z","comment":"If it's replacing the original proof, there probably isn't much need to note this explicitly, unless someone feels like changing the proof again. (It could go in the commit message though.)"},{"author":"gebner","date":"2020-08-03T07:35:48Z","comment":"Let's appease the intuitionism police.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-03T07:57:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/939523147)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/939523032)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/939523024)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/939523091)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/939523072)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/939523125)"}],"review_discussion":[],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"commits":[{"author":"urkud","committer":"urkud","hash":"2dfef1aa91a477142e1a659b78b356888de1621d","message":"chore(algebra/order): avoid `classical.choice` in `lt_of_le_of_ne`\n\nCopy proof from `lt_of_le_of_ne'` in `mathlib`.","date":"2020-08-01T02:03:11Z"}]},{"author":"gebner","number":427,"diff_summary":[{"file":"README.md","status":"M","additions":12,"deletions":2},{"file":"doc/changes.md","status":"M","additions":12,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":12,"deletions":2}],"state":"closed","open_date":"2020-07-30T11:49:23Z","update_date":"2020-07-30T12:33:13Z","discussion":[{"author":"gebner","date":"2020-07-30T12:11:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-30T12:33:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/927500399)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/927500974)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/927500963)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/927500450)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/927500438)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/927501159)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"d82c720e6c41eba6ee9f17593f6745e5863d89e5","message":"chore(*): release 3.18.4","date":"2020-07-30T11:48:32Z"}]},{"author":"gebner","number":426,"diff_summary":[{"file":"src/frontends/lean/brackets.cpp","status":"M","additions":30,"deletions":9},{"file":"src/frontends/lean/parser.cpp","status":"M","additions":30,"deletions":9},{"file":"src/frontends/lean/parser.h","status":"M","additions":30,"deletions":9},{"file":"tests/lean/brackets_parens.lean","status":"M","additions":30,"deletions":9},{"file":"tests/lean/brackets_parens.lean.expected.out","status":"M","additions":30,"deletions":9}],"state":"closed","open_date":"2020-07-30T08:01:36Z","update_date":"2020-07-30T09:08:16Z","discussion":[{"author":"gebner","date":"2020-07-30T08:45:52Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-30T09:08:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/926811931)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/926811815)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/926811802)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/926811894)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/926811877)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/926811840)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"e760b0101430923d838b2d031d838dc0415fca68","message":"fix(frontends/lean/brackets): more set replacement fixes","date":"2020-07-30T08:00:45Z"},{"author":"gebner","committer":"gebner","hash":"0ed1e32919c22efad0e9fda92aa89e6e7b7efa19","message":"Fix testg.","date":"2020-07-30T08:45:33Z"}]},{"author":"urkud","number":425,"diff_summary":[{"file":"library/init/algebra/functions.lean","status":"M","additions":8,"deletions":7}],"state":"closed","open_date":"2020-07-29T22:32:35Z","update_date":"2020-07-30T08:34:57Z","discussion":[{"author":"gebner","date":"2020-07-30T08:03:08Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-30T08:34:56Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/926661029)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/926661066)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/926661004)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/926661083)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/926661079)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/926660974)"}],"review_discussion":[],"tags":[],"commits":[{"author":"urkud","committer":"urkud","hash":"e2dffcb59dfa96180bc00301be659e5c00728eda","message":"fix(init/algebra/functions): ensure `@max (order_dual α) = @min α`","date":"2020-07-29T21:59:47Z"}]},{"author":"digama0","number":424,"diff_summary":[{"file":"library/init/meta/interactive_base.lean","status":"M","additions":1,"deletions":0}],"state":"closed","open_date":"2020-07-29T17:24:41Z","update_date":"2020-07-29T17:55:32Z","discussion":[{"author":"gebner","date":"2020-07-29T17:27:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-29T17:55:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/924307275)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/924307308)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/924307293)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/924307220)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/924307202)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/924307251)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"3f5157c497969cfa2087223d992f9cc042437d90","message":"fix(init/meta/interactive_base): description for small_nat","date":"2020-07-29T17:21:33Z"},{"author":"digama0","committer":"digama0","hash":"4be66d780fe45bca5e3afc7ef3c4bdbac869ea9f","message":"oops","date":"2020-07-29T17:25:13Z"}]},{"author":"gebner","number":421,"diff_summary":[{"file":"README.md","status":"M","additions":11,"deletions":2},{"file":"doc/changes.md","status":"M","additions":11,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":11,"deletions":2}],"state":"closed","open_date":"2020-07-29T10:44:10Z","update_date":"2020-07-29T11:04:59Z","discussion":[{"author":"gebner","date":"2020-07-29T10:44:33Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-29T11:04:58Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/922842334)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/922841537)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/922842381)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/922841457)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/922842290)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/922841487)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"5300808930fe2caa14d8a940023d3f2aa2bd45a9","message":"chore(*): release version 3.18.3","date":"2020-07-29T10:43:33Z"}]},{"author":"gebner","number":420,"diff_summary":[{"file":"src/frontends/lean/brackets.cpp","status":"A","additions":13,"deletions":5},{"file":"tests/lean/brackets_parens.lean","status":"A","additions":13,"deletions":5},{"file":"tests/lean/brackets_parens.lean.expected.out","status":"A","additions":13,"deletions":5}],"state":"closed","open_date":"2020-07-29T08:25:47Z","update_date":"2020-07-29T09:02:32Z","discussion":[{"author":"gebner","date":"2020-07-29T08:41:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-29T09:02:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/922434813)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/922434749)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/922434732)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/922434795)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/922434784)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/922434844)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"28379b4467ff6af759fbffd9baeb65782420d4b2","message":"fix(frontends/lean/brackets): support `{(1 : α)}` and `{(∘), (∘)}`\n\nFixes #419 and #418.\n\nCo-authored-by: Anne Baanen <vierkantor@vierkantor.com>","date":"2020-07-29T08:24:50Z"}]},{"author":"gebner","number":417,"diff_summary":[{"file":"src/frontends/lean/info_manager.cpp","status":"M","additions":13,"deletions":2},{"file":"src/frontends/lean/info_manager.h","status":"M","additions":13,"deletions":2},{"file":"src/frontends/lean/interactive.cpp","status":"M","additions":13,"deletions":2}],"state":"closed","open_date":"2020-07-28T16:16:41Z","update_date":"2020-07-29T10:38:17Z","discussion":[{"author":"gebner","date":"2020-07-29T10:16:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-29T10:38:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/922757235)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/922757351)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/922757332)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/922757296)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/922757273)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/922757196)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c85e01011ad6908be29c645f0b6047aef31689e2","message":"feat(frontends/lean/info_manager): show VM overrides in info request","date":"2020-07-28T16:16:24Z"}]},{"author":"gebner","number":416,"diff_summary":[{"file":"README.md","status":"M","additions":8,"deletions":2},{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2}],"state":"closed","open_date":"2020-07-28T15:45:32Z","update_date":"2020-07-28T16:25:18Z","discussion":[{"author":"gebner","date":"2020-07-28T15:46:00Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-28T16:25:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/919626370)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/919626239)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/919626393)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/919626306)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/919626268)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/919623658)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"ec08d212db5806d482892b122181a17e2caf45fb","message":"chore(*): release version 3.18.2","date":"2020-07-28T15:44:58Z"}]},{"author":"gebner","number":415,"diff_summary":[{"file":"src/frontends/lean/brackets.cpp","status":"A","additions":10,"deletions":2},{"file":"tests/lean/run/singleton_pair.lean","status":"A","additions":10,"deletions":2}],"state":"closed","open_date":"2020-07-28T15:35:43Z","update_date":"2020-07-28T16:25:21Z","discussion":[{"author":"gebner","date":"2020-07-28T15:45:58Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-28T16:25:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/919626370)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/919626239)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/919626393)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/919626306)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/919626268)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/919623658)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"01bc5dc0cd0cd72035e79447576ce9459af96882","message":"fix(frontends/lean/brackets): fix `{(0,1)}`","date":"2020-07-28T15:35:07Z"}]},{"author":"eric-wieser","number":414,"diff_summary":[{"file":"library/init/meta/well_founded_tactics.lean","status":"M","additions":12,"deletions":0}],"state":"open","open_date":"2020-07-28T14:21:34Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"gebner","date":"2020-07-28T15:24:13Z","comment":"The current plan is actually to remove this file altogether, @bryangingechen has started here: #288"}],"review_discussion":[],"tags":[],"commits":[{"author":"eric-wieser","committer":"web-flow","hash":"093805f7f2bf7f7b5bfd17be30f050a3082cd8c9","message":"feat(?): Better support for prod in well_founded","date":"2020-07-28T14:19:36Z"}]},{"author":"gebner","number":413,"diff_summary":[{"file":"README.md","status":"M","additions":8,"deletions":2},{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2}],"state":"closed","open_date":"2020-07-28T13:33:15Z","update_date":"2020-07-28T14:09:19Z","discussion":[{"author":"gebner","date":"2020-07-28T13:33:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-28T14:09:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/919122372)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/919123676)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/919122456)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/919122402)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/919123725)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/919122435)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"578a072dcda2b511c50f420971badb565a6c7a53","message":"chore(*): release version 3.18.1","date":"2020-07-28T13:32:27Z"}]},{"author":"gebner","number":412,"diff_summary":[{"file":"src/library/type_context.cpp","status":"A","additions":5,"deletions":2},{"file":"tests/lean/run/411c.lean","status":"A","additions":5,"deletions":2}],"state":"closed","open_date":"2020-07-28T12:56:28Z","update_date":"2020-07-28T13:44:17Z","discussion":[{"author":"gebner","date":"2020-07-28T13:21:36Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-28T13:44:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/919036203)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/919036271)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/919036196)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/919036247)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/919036299)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/919036280)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"1ceecc7b592eb0c080b1f21ae30a5c3b0dcc2b19","message":"fix(library/type_context): update local instances","date":"2020-07-28T12:54:11Z"}]},{"author":"gebner","number":410,"diff_summary":[{"file":"README.md","status":"M","additions":22,"deletions":3},{"file":"doc/changes.md","status":"M","additions":22,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":22,"deletions":3}],"state":"closed","open_date":"2020-07-28T11:40:38Z","update_date":"2020-07-28T12:05:52Z","discussion":[{"author":"gebner","date":"2020-07-28T11:40:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-28T12:05:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/918683843)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/918687107)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/918687231)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/918687148)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/918687268)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/918687248)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"063ecd60f919769412100c2dff65860b2bbc23ba","message":"chore(*): release version 3.18.0","date":"2020-07-28T11:40:12Z"}]},{"author":"gebner","number":409,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":22,"deletions":9},{"file":"library/init/meta/tactic.lean","status":"M","additions":22,"deletions":9}],"state":"closed","open_date":"2020-07-24T09:58:47Z","update_date":"2020-07-24T10:22:21Z","discussion":[{"author":"gebner","date":"2020-07-24T10:00:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-24T10:22:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/906175571)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/906175740)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/906175648)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/906175713)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/906175586)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/906175674)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"0501062fc113cadd92c6b07cc5cdeb9355663362","message":"fix(library/init/meta/tactic): handle corner cases in `by_cases`\n\nThis backports fixes from mathlib.","date":"2020-07-24T09:56:57Z"}]},{"author":"digama0","number":408,"diff_summary":[{"file":"library/init/wf.lean","status":"M","additions":2,"deletions":4}],"state":"closed","open_date":"2020-07-24T04:19:00Z","update_date":"2020-07-24T09:20:38Z","discussion":[{"author":"gebner","date":"2020-07-24T08:59:28Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-24T09:20:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/905996213)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/905996183)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/905996155)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/905996243)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/905996193)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/905996228)"}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"a58c5b9b438b41628e1541566cb8e219dfd9b931","message":"refactor(init/wf): use a structure for well_founded","date":"2020-07-24T04:17:54Z"}]},{"author":"JLimperg","number":407,"diff_summary":[{"file":"library/init/meta/expr.lean","status":"A","additions":145,"deletions":65},{"file":"library/init/meta/injection_tactic.lean","status":"A","additions":145,"deletions":65},{"file":"library/init/meta/tactic.lean","status":"A","additions":145,"deletions":65},{"file":"tests/lean/run/400.lean","status":"A","additions":145,"deletions":65}],"state":"closed","open_date":"2020-07-23T18:47:12Z","update_date":"2020-07-24T09:43:50Z","discussion":[{"author":"gebner","date":"2020-07-24T09:06:56Z","comment":"I haven't read this in detail, but the tests are passing and you know what you're doing.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-07-24T09:43:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/906065826)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/906065862)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/906065854)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/906065801)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/906065780)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/906065837)"}],"review_discussion":[],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"3af11caa0aa769131bdb10da8812fe83efffb4fb","message":"fix(library/init/meta/injection_tactic): fix injection introducing too many hyps\n\nThe injection tactic used to introduce all pi binders in the target. It\nnow introduces only its own new hypotheses.\n\nI've taken this opportunity to prettify and generalise the code. In\nparticular, the procedure used by `injection_with` to introduce its\nhypotheses is now available as a separate tactic `intron_with`.\n\nThis commit should be backwards compatible (except for name clashes with\nnew definitions).\n\nfixes #400","date":"2020-07-23T18:37:40Z"}]},{"author":"robertylewis","number":406,"diff_summary":[{"file":"library/init/meta/simp_tactic.lean","status":"M","additions":0,"deletions":4}],"state":"closed","open_date":"2020-07-23T16:48:59Z","update_date":"2020-07-23T17:51:57Z","discussion":[{"author":"gebner","date":"2020-07-23T17:26:23Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-23T17:51:56Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/903678134)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/903678163)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/903678004)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/903678102)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/903678150)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/903678031)"}],"review_discussion":[],"tags":[],"commits":[{"author":"robertylewis","committer":"web-flow","hash":"b1e24962130b7ecccc1a59183d794bc92d954de6","message":"chore(library/init/meta/simp_tactic): remove tactic.norm_num\n\nThis meta constant has no VM implementation anymore, it's been replaced by a mathlib Lean implementation.","date":"2020-07-23T16:48:53Z"}]},{"author":"EdAyers","number":405,"diff_summary":[{"file":"src/frontends/lean/info_manager.cpp","status":"A","additions":12,"deletions":2},{"file":"tests/lean/widget/widget5.input","status":"A","additions":12,"deletions":2},{"file":"tests/lean/widget/widget5.input.expected.out","status":"A","additions":12,"deletions":2},{"file":"tests/lean/widget/widget5.lean","status":"A","additions":12,"deletions":2}],"state":"closed","open_date":"2020-07-23T14:15:00Z","update_date":"2020-07-23T14:49:13Z","discussion":[{"author":"EdAyers","date":"2020-07-23T14:16:25Z","comment":"Thanks to @robertylewis for spotting and @gebner for telling me how to fix."},{"author":"gebner","date":"2020-07-23T14:27:43Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-23T14:49:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/903018875)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/903018806)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/903018832)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/903018927)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/903018895)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/903018758)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"0334927a2b94af9eba5f6144183fdc363ca414e1","message":"fix(widget): fix vm env issue\n\nIssue was that inline lambdas were added to environment but vm state\npassed to widget renderer was older so would get lean_unreachable errors\nwhen trying to get the decl of the lambda. Fixed by changing\n`tactic::to_state(s).env()` to `get_vm_state().env()` in\n`tactic_save_info_thunk` and `tactic_trace_widget_at`","date":"2020-07-23T14:12:41Z"}]},{"author":"gebner","number":404,"diff_summary":[{"file":"src/frontends/lean/decl_cmds.cpp","status":"A","additions":70,"deletions":39},{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":70,"deletions":39},{"file":"src/frontends/lean/elaborator.h","status":"A","additions":70,"deletions":39},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":70,"deletions":39},{"file":"src/frontends/lean/parser.h","status":"A","additions":70,"deletions":39},{"file":"src/frontends/lean/structure_cmd.cpp","status":"A","additions":70,"deletions":39},{"file":"tests/lean/398c.lean","status":"A","additions":70,"deletions":39},{"file":"tests/lean/398c.lean.expected.out","status":"A","additions":70,"deletions":39},{"file":"tests/lean/elab8.lean","status":"A","additions":70,"deletions":39},{"file":"tests/lean/elab8.lean.expected.out","status":"A","additions":70,"deletions":39},{"file":"tests/lean/elab9.lean","status":"A","additions":70,"deletions":39},{"file":"tests/lean/run/1590.lean","status":"A","additions":70,"deletions":39}],"state":"closed","open_date":"2020-07-22T16:13:20Z","update_date":"2020-07-23T09:48:55Z","discussion":[{"author":"robertylewis","date":"2020-07-22T16:32:19Z","comment":"If this does fix #398 I'd be curious to know why! There's no big search in that example to cache: it successfully applies the first instance it checks, and terminates. Not obviously a caching issue to me, but convenient if it is.\r\n\r\nOf course in real life this issue didn't appear in a `#check`, but if this fixes #398 then maybe #403 fixes the real example."},{"author":"gebner","date":"2020-07-23T09:29:06Z","comment":"It reduces the runtime of the `#check` example from 6s to 2.3s on my machine (but I don't have an explanation either).\r\n\r\nAll the issues in the Zulip thread were about `#check`.  If you have a real-life issue, please file it in another issue.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-07-23T09:48:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/902031326)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/902031421)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/902031476)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/902031385)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/902031433)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/902031344)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"7d90e11b50562e1076b8a1e0bb3c6ca1eea8efa7","message":"perf(frontends/lean): freeze local instances in `#check`","date":"2020-07-22T16:12:36Z"}]},{"author":"gebner","number":403,"diff_summary":[{"file":"src/frontends/lean/decl_util.cpp","status":"A","additions":24,"deletions":0},{"file":"src/frontends/lean/elaborator.h","status":"A","additions":24,"deletions":0},{"file":"src/library/type_context.cpp","status":"A","additions":24,"deletions":0},{"file":"src/library/type_context.h","status":"A","additions":24,"deletions":0},{"file":"tests/lean/397c.lean","status":"A","additions":24,"deletions":0},{"file":"tests/lean/397c.lean.expected.out","status":"A","additions":24,"deletions":0}],"state":"closed","open_date":"2020-07-22T15:16:51Z","update_date":"2020-07-22T16:33:48Z","discussion":[{"author":"gebner","date":"2020-07-22T16:13:53Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-22T16:33:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/899314647)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/899314727)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/899314793)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/899314529)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/899314625)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/899314774)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"924f33169ce6f848b279ff9c8b92bfceffb8d0aa","message":"perf(frontends/lean): freeze local instances for definition parameters","date":"2020-07-22T15:15:15Z"}]},{"author":"Vierkantor","number":402,"diff_summary":[{"file":"src/frontends/lean/brackets.cpp","status":"A","additions":71,"deletions":1},{"file":"src/frontends/lean/builtin_exprs.cpp","status":"A","additions":71,"deletions":1},{"file":"src/frontends/lean/builtin_exprs.h","status":"A","additions":71,"deletions":1},{"file":"tests/lean/set_replacement.lean","status":"A","additions":71,"deletions":1},{"file":"tests/lean/set_replacement.lean.expected.out","status":"A","additions":71,"deletions":1}],"state":"closed","open_date":"2020-07-22T12:22:17Z","update_date":"2020-07-23T10:09:20Z","discussion":[{"author":"gebner","date":"2020-07-22T12:56:46Z","comment":"I like it, and the implementation looks good.  Is `set_of ...` the term that we want?"},{"author":"fpvandoorn","date":"2020-07-22T15:36:53Z","comment":"> `{(f x) | x ∈ s}` is equivalent to `set.image f s`\r\n\r\nToo bad they are not definitionally equal. But I guess we can have simp lemmas rewriting them."},{"author":"Vierkantor","date":"2020-07-23T09:26:03Z","comment":"> > `{(f x) | x ∈ s}` is equivalent to `set.image f s`\r\n> \r\n> Too bad they are not definitionally equal. But I guess we can have simp lemmas rewriting them.\r\n\r\nThe issue is that the notation expands to `∃ (h : x ∈ s), ...` instead of `x ∈ s \\and ...`, right? `simp` should already fix that with the `exists_prop` lemma."},{"author":"gebner","date":"2020-07-23T09:41:54Z","comment":"Another option would be to move `set.image` to the core library.  I can't tell at first glance if this would make things easier or harder.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-07-23T10:09:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/902089825)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/902089849)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/902089931)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/902089911)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/902089886)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/902089940)"},{"author":"fpvandoorn","date":"2020-07-23T15:30:44Z","comment":"> Another option would be to move `set.image` to the core library. I can't tell at first glance if this would make things easier or harder.\r\n\r\n`set.image` is already in core: https://github.com/leanprover-community/lean/blob/05d7184/library/init/data/set.lean#L83\r\n\r\n> > > `{(f x) | x ∈ s}` is equivalent to `set.image f s`\r\n> > \r\n> > \r\n> > Too bad they are not definitionally equal. But I guess we can have simp lemmas rewriting them.\r\n> \r\n> The issue is that the notation expands to `∃ (h : x ∈ s), ...` instead of `x ∈ s \\and ...`, right? `simp` should already fix that with the `exists_prop` lemma.\r\n\r\nCorrect, then you get something definitionally equal, but presumably you want to actually rewrite it to `set.image` instead of (the definiens of `set.image`)"}],"review_discussion":[],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"da416cf88515c96b87f956181883ebfbe9041d8f","message":"Hacked together, slightly broken, somewhat ugly, set replacement notation","date":"2020-07-22T09:32:52Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"0e98bbeef50e22a13141ae25bd12a8435b6088e3","message":"Support arbitrary binders in `set_replacement` notation","date":"2020-07-22T10:55:07Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"0fffeebd2041dc8bd4251aa739ad2813a9f0fac1","message":"Use `parse_lparen` instead of `parse_expr` to parse the expression in set_replacement","date":"2020-07-22T12:10:16Z"}]},{"author":"TwoFX","number":399,"diff_summary":[{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":39,"deletions":0},{"file":"tests/lean/run/395a.lean","status":"A","additions":39,"deletions":0},{"file":"tests/lean/run/395b.lean","status":"A","additions":39,"deletions":0}],"state":"closed","open_date":"2020-07-20T17:08:06Z","update_date":"2020-07-23T10:09:23Z","discussion":[{"author":"gebner","date":"2020-07-21T08:44:19Z","comment":"The actual cause for this bug is a few lines below:\r\n```c++\r\n    while (is_annotation(fn))\r\n        fn = get_annotation_arg(fn);\r\n```\r\nApparently `as_is` is an annotation.\r\n\r\nI don't think we need to spend much effort now to make `@@%%e` work.\r\n\r\nPlease put the tests in the `tests/lean/run` directory.  The `run` tests check that the test executes without error, then tests in `tests/lean` compare the output.  Then you don't need the `*.expected` files either.\r\n\r\nOtherwise LGTM.  Thanks for fixing this!"},{"author":"TwoFX","date":"2020-07-23T09:34:02Z","comment":"@gebner I have moved the tests as requested. Is there anything else you'd like me to change?"},{"author":"gebner","date":"2020-07-23T09:39:06Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2020-07-23T10:09:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/902089825)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/902089849)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/902089931)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/902089911)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/902089886)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/902089940)"}],"review_discussion":[],"tags":[],"commits":[{"author":"TwoFX","committer":"TwoFX","hash":"a55dcc4c6c830f93d76d05da4eba3cddf1eeceab","message":"Add failing test for 395","date":"2020-07-19T18:13:35Z"},{"author":"TwoFX","committer":"TwoFX","hash":"e9e1484e5ad4811b58a003655fcaeb3221671209","message":"fix(frontends/lean/elaborator): honor as_is attribute for functions","date":"2020-07-20T16:26:06Z"},{"author":"TwoFX","committer":"TwoFX","hash":"17fa025c0b11b197a6dab8eaf583ccd67f952c71","message":"Add another test","date":"2020-07-20T16:34:58Z"},{"author":"TwoFX","committer":"TwoFX","hash":"a11d8da3842fee40451bac9da3064fdbcdbeaca4","message":"Add expected output files","date":"2020-07-20T16:37:27Z"},{"author":"TwoFX","committer":"TwoFX","hash":"dcff6ea48ca8a2ec7f886258b89d8f5c1644c677","message":"Move tests into run directory","date":"2020-07-21T08:58:53Z"}]},{"author":"cipher1024","number":393,"diff_summary":[{"file":"library/init/meta/environment.lean","status":"A","additions":212,"deletions":9},{"file":"library/init/meta/expr.lean","status":"A","additions":212,"deletions":9},{"file":"library/init/meta/tactic.lean","status":"A","additions":212,"deletions":9},{"file":"src/frontends/lean/CMakeLists.txt","status":"A","additions":212,"deletions":9},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":212,"deletions":9},{"file":"src/frontends/lean/eqn_api.cpp","status":"A","additions":212,"deletions":9},{"file":"src/frontends/lean/eqn_api.h","status":"A","additions":212,"deletions":9},{"file":"src/frontends/lean/init_module.cpp","status":"A","additions":212,"deletions":9},{"file":"src/library/vm/vm_expr.cpp","status":"A","additions":212,"deletions":9},{"file":"tests/lean/eqn_api.lean","status":"A","additions":212,"deletions":9},{"file":"tests/lean/eqn_api.lean.expected.out","status":"A","additions":212,"deletions":9},{"file":"tests/lean/eqn_api2.lean","status":"A","additions":212,"deletions":9},{"file":"tests/lean/eqn_api2.lean.expected.out","status":"A","additions":212,"deletions":9}],"state":"open","open_date":"2020-07-16T21:08:39Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"cipher1024","date":"2020-07-16T21:10:00Z","comment":"Written together with @danielfabian"},{"author":"cipher1024","date":"2020-07-16T21:12:27Z","comment":"```lean\r\ne <- get_defn_spec n\r\n```\r\n\r\ngives us a pre-term parsed from the equations typed in by the user. Those are distinct from the equations proved by the equation compiler as their can be fewer equations when multiple cases can be described by the same equation"},{"author":"gebner","date":"2020-07-23T09:55:01Z","comment":"There are two issues here:\r\n 1. The expression that is stored is not the equations, but the pre-expression of the definition (even if this is not an equation).  Nothing is stored for auxiliary definitions for matches.  Storing pre-expressions in general might be useful, but then please rename the API to reflect this (i.e., rename everything to `defn_spec` and update the doc string).\r\n 2. If you want the *equations* before the equation compiler duplicates them, then you can store the elaborated equations here (or maybe in the equation compiler): https://github.com/leanprover-community/lean/blob/572b494f16fbb04e5316eb81e76c0698fd556a5d/src/frontends/lean/elaborator.cpp#L2683 (the `new_e` variable contains the elaborated equations)"},{"author":"DanielFabian","date":"2020-07-23T22:03:51Z","comment":"@gebner What we are after here are the equations you see in the pattern match. So if your pattern match contains 5 lines in the source code, we need a sorted list of 5 equations. And sorted, because at this point, the left hand sides are not yet disjoint. Rather, the equations need to be applied in order and the first match wins.\r\n\r\nThe whole point of this is so that we get a target for something we would like to automatically prove. E.g.:\r\n\r\n```lean\r\ndef foo : nat -> nat :=\r\n| 0 := 1\r\n| n := 2\r\n```\r\nin this case, we want an easy way to get two goals, in order: `foo 0 = 1`, `forall n, foo n = 2`. \r\n\r\nYou'll notice, that the second theorem is false. But it becomes true, if you modify it slightly:\r\n`forall n, n != 0 -> foo n = 2`.\r\n\r\nThe idea is that you get this ever-growing list of premises as you go through the pattern match cases where at every point, the universally quantified theorem is true, but only because you also know that any of the previous patterns were already handled and therefore are now known to be impossible.\r\n\r\nIf this is our goal, are the elaborated equations the ones we need?"},{"author":"gebner","date":"2020-07-24T09:05:07Z","comment":"> If this is our goal, are the elaborated equations the ones we need?\r\n\r\nYes, I'd strongly suggest that."}],"review_discussion":[],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"9bbef4cf94c283c4d6b8d487c154019afe8c799c","message":"feat(meta/environment): the equations that lead to a given definition\nare now accessible in Lean code","date":"2020-07-16T21:05:39Z"},{"author":"cipher1024","committer":"cipher1024","hash":"eda0f81de4e3aef6a9ecb8b3386c8d23d2763c05","message":"fix test and make replace / fold polymorphic","date":"2020-07-16T23:25:12Z"},{"author":"cipher1024","committer":"cipher1024","hash":"f4d38bbf77eddbf7a5b5a1aa3be599880d1c59ec","message":"fix test","date":"2020-07-16T23:57:19Z"}]},{"author":"EdAyers","number":391,"diff_summary":[{"file":"library/init/meta/type_context.lean","status":"M","additions":38,"deletions":0},{"file":"src/library/tactic/kabstract.h","status":"M","additions":38,"deletions":0},{"file":"src/library/tactic/vm_type_context.cpp","status":"M","additions":38,"deletions":0}],"state":"closed","open_date":"2020-07-16T13:28:24Z","update_date":"2020-10-27T11:04:48Z","discussion":[{"author":"gebner","date":"2020-10-27T10:38:32Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T11:04:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1314140492)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1314140651)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1314140638)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1314140589)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1314140571)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1314140529)"}],"review_discussion":[{"author":"gebner","file":"src/library/tactic/vm_type_context.cpp","date":"2020-07-20T14:00:05Z","comment":"Could you please expose the `occurrences` as well here for completeness?"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"2f051d3572cb3fcce80f9fb6df13593dedd1e043","message":"feat(type_context/kabstract): add kabstract to type_context","date":"2020-07-16T13:25:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9781e35ab863b6e1af24e0be013f5d846bf9d5a4","message":"Merge branch 'master' into tc-kabstract","date":"2020-07-16T13:27:43Z"}]},{"author":"JLimperg","number":390,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"A","additions":43,"deletions":4},{"file":"tests/lean/388.lean","status":"A","additions":43,"deletions":4},{"file":"tests/lean/388.lean.expected.out","status":"A","additions":43,"deletions":4}],"state":"closed","open_date":"2020-07-13T03:14:23Z","update_date":"2020-07-13T12:24:30Z","discussion":[{"author":"gebner","date":"2020-07-13T08:44:35Z","comment":"These are not \"invalid\" expressions.  As the documentation for the `cases` tactic (in the C++ code) clearly states:\r\n```\r\n    1- Store in ilist the new \"hypotheses\" introduced for each new goal.\r\n       We have a new \"hypothesis\" for each constructor field.\r\n       We say \"hypothesis\" because it may be an arbitrary term.\r\n       This may happen because of dependent pattern matching.\r\n```\r\n\r\nCould you please update the doc string to clarify the result of the Lean tactic, and then explain that you can't match on the arbitrary terms using `case`?\r\n\r\nPlease also follow the convention for the PR title.  (That is, `fix(library/init/meta/tactic): ....`)"},{"author":"JLimperg","date":"2020-07-13T11:47:52Z","comment":"I should start reading the C++ docs. Adjusted the docs accordingly."},{"author":"gebner","date":"2020-07-13T12:00:04Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-13T12:24:29Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/865033263)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/865033152)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/865033292)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/865033195)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/865033182)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/865033234)"}],"review_discussion":[],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"dbff5860213c7cb97f9408c37cb960338f92c33b","message":"Work around invalid exprs returned by cases_core (#388, #345)\n\nfixes #388\nfixes #345","date":"2020-07-13T03:11:56Z"},{"author":"JLimperg","committer":"JLimperg","hash":"1a4110d678505d9502a7bf59aec74d87f618db8e","message":"update docs","date":"2020-07-13T11:44:13Z"}]},{"author":"gebner","number":387,"diff_summary":[{"file":"README.md","status":"M","additions":11,"deletions":2},{"file":"doc/changes.md","status":"M","additions":11,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":11,"deletions":2}],"state":"closed","open_date":"2020-07-08T15:09:50Z","update_date":"2020-07-08T16:53:23Z","discussion":[{"author":"gebner","date":"2020-07-08T16:29:28Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-08T16:53:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/850648286)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/850648214)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/850644137)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/850648246)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/850644018)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/850648262)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"066ef6a4eff2670595046fb5455ab4e9ccbe8b99","message":"chore(*): release 3.17.1","date":"2020-07-08T14:50:34Z"},{"author":"gebner","committer":"gebner","hash":"2d2f3605865dd8995934eed50a03bd33cddd366c","message":"New fix.","date":"2020-07-08T15:09:06Z"}]},{"author":"gebner","number":386,"diff_summary":[{"file":"src/frontends/lean/interactive.cpp","status":"A","additions":10,"deletions":1},{"file":"tests/lean/interactive/info_import.input","status":"A","additions":10,"deletions":1},{"file":"tests/lean/interactive/info_import.input.expected.out","status":"A","additions":10,"deletions":1},{"file":"tests/lean/interactive/lib/open_locale.lean","status":"A","additions":10,"deletions":1}],"state":"closed","open_date":"2020-07-08T15:06:40Z","update_date":"2020-07-08T15:43:48Z","discussion":[{"author":"gebner","date":"2020-07-08T15:07:16Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-08T15:43:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/850310516)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/850310465)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/850310424)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/850310450)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/850310497)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/850310409)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"bca89ef0e9c30c20ef563843ae0b0e35464eec10","message":"fix(frontends/lean/interactive): ignore actual file-not-found exception","date":"2020-07-08T15:03:39Z"},{"author":"gebner","committer":"gebner","hash":"ffde321ace9cee9f8f91f60b252c5236eda97b79","message":"Add test.","date":"2020-07-08T15:05:54Z"}]},{"author":"gebner","number":383,"diff_summary":[{"file":"src/library/type_context.cpp","status":"A","additions":106,"deletions":6},{"file":"tests/lean/tc_caching.lean","status":"A","additions":106,"deletions":6},{"file":"tests/lean/tc_caching.lean.expected.out","status":"A","additions":106,"deletions":6}],"state":"closed","open_date":"2020-07-07T14:32:38Z","update_date":"2020-07-07T19:41:40Z","discussion":[{"author":"robertylewis","date":"2020-07-07T14:36:14Z","comment":"Any prediction what build time bot will have to stay about this? :)"},{"author":"gebner","date":"2020-07-07T16:12:49Z","comment":"The motivation was @jcommelin's complaint about @semorrison's PR (leanprover-community/mathlib#3275) on Zulip: https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.233275.20tensor.20polynomial/near/203067417\r\n\r\nWith this PR, the compilation time of `polynomial_algebra.lean` goes down from 37s to 25s.  The elaboration time of `to_fun_alg_hom` goes down from 4.62s to 2.3s.\r\n\r\nI compiled mathlib with this change and did not run into any errors."},{"author":"gebner","date":"2020-07-07T19:19:33Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-07T19:41:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/847008448)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/847008594)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/847008380)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/847008396)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/847008427)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/847008513)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c3a06f9d207189226b75a400196715f4bd074585","message":"fix(library/type_context): reuse type-class cache","date":"2020-07-07T11:44:05Z"},{"author":"gebner","committer":"gebner","hash":"51fc41bb0e4d68eb51970ef0720740472884522c","message":"Make core library build.","date":"2020-07-07T14:29:52Z"}]},{"author":"gebner","number":381,"diff_summary":[{"file":"library/data/bitvec.lean","status":"A","additions":313,"deletions":283},{"file":"library/data/buffer.lean","status":"A","additions":313,"deletions":283},{"file":"library/data/buffer/parser.lean","status":"A","additions":313,"deletions":283},{"file":"library/data/vector.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/array/slice.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/fin/ops.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/int/basic.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/list/lemmas.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/nat/basic.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/nat/bitwise.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/nat/div.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/nat/gcd.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/nat/lemmas.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/repr.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/string/basic.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/data/string/ops.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/meta/constructor_tactic.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/meta/expr.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/meta/has_reflect.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/meta/injection_tactic.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/meta/interactive.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/meta/mk_inhabited_instance.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/meta/rec_util.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/meta/tactic.lean","status":"A","additions":313,"deletions":283},{"file":"library/init/meta/widget/html_cmd.lean","status":"A","additions":313,"deletions":283},{"file":"library/system/random.lean","status":"A","additions":313,"deletions":283},{"file":"library/tools/debugger/cli.lean","status":"A","additions":313,"deletions":283},{"file":"library/tools/debugger/util.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/apply_tac.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/div_eqn.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/div_eqn.lean.expected.out","status":"A","additions":313,"deletions":283},{"file":"tests/lean/elab_meta2.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/meta_wf_error.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/app_builder_tac1.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/back1.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/conv_tac1.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/cse_perf_issue.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/div2.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/div_wf.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/elab_meta1.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/eqn_compiler_perf_issue2.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/gcd.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/kha_inst_bug.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/meta_aux_defs.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/mk_byte.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/nat_sub_ematch.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/priority_test2.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/rand_tst.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/simp_subgoals.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/run/wfrec1.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/user_notation.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/zero_lt_zero_point_one.lean","status":"A","additions":313,"deletions":283},{"file":"tests/lean/zero_lt_zero_point_one.lean.expected.out","status":"A","additions":313,"deletions":283}],"state":"closed","open_date":"2020-07-06T19:35:08Z","update_date":"2020-10-27T10:34:02Z","discussion":[{"author":"fpvandoorn","date":"2020-07-06T19:56:20Z","comment":"***If*** this is the right way to go:\r\n* What does `0 < 0.1` mean after this change? Error, cannot find `has_div` instance on `nat`? Or is it actually an inequality in `rat` (once `rat` is defined)?\r\n* I prefer [monus](https://en.wikipedia.org/wiki/Monus) `∸` over `-.`\r\n* Before this merges, we need to at least add some doc strings to the new classes."},{"author":"gebner","date":"2020-07-06T20:11:53Z","comment":"> What does `0 < 0.1` mean after this change?\r\n\r\nIt is an elaboration error (`failed to synthesize type class instance for has_div ℕ`).  It is not easy to change the algorithm to default the number type.  (Although I guess we could hack it to pick different types depending on which type classes we need to synthesize...)"},{"author":"cipher1024","date":"2020-07-06T23:23:06Z","comment":"Should we use `÷` instead of `/.`?"},{"author":"PatrickMassot","date":"2020-07-07T09:06:07Z","comment":"I'm not sure at all this is a desirable change. I would much prefer to see more efforts on the automation side than weird notations. I understand it's a huge effort, but fixing `omega` so that it can prove more lemmas about nat subtraction, and fixing the parser so that `0.1` is not silently turned into a nat would be much more useful. I don't see any situation where I would want `0.1` to be anything by a rational number, ready to be coerced to any other field if needed."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"8e5e24aa08080dd73fe648da718af519acd1e0e6","message":"Move nat/int division to /.","date":"2020-07-06T19:14:53Z"},{"author":"gebner","committer":"gebner","hash":"f48f9a172cd9bd82abc70b35137f051c1b61b193","message":"Move nat subtraction to -.","date":"2020-07-06T19:30:51Z"},{"author":"gebner","committer":"gebner","hash":"6a1a56267612c761437e7bbedef228564c08b725","message":"Add motivating test.","date":"2020-07-06T19:33:08Z"},{"author":"gebner","committer":"gebner","hash":"dd83ea72c6cec6431589e5ee593aaaa14f590922","message":"Use monus.","date":"2020-07-06T20:01:36Z"},{"author":"gebner","committer":"gebner","hash":"8e27aba42053e490751e72892362ad9c3f2efc53","message":"Add docstrings.","date":"2020-07-06T20:07:17Z"}]},{"author":"gebner","number":380,"diff_summary":[{"file":"README.md","status":"M","additions":26,"deletions":3},{"file":"doc/changes.md","status":"M","additions":26,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":26,"deletions":3}],"state":"closed","open_date":"2020-07-06T12:14:37Z","update_date":"2020-07-06T13:09:21Z","discussion":[{"author":"gebner","date":"2020-07-06T12:47:30Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-06T13:09:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/841473211)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/841473235)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/841473271)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/841474926)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/841474877)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/841475036)"}],"review_discussion":[{"author":"gebner","file":"doc/changes.md","date":"2020-07-06T12:14:47Z","comment":"```suggestion\r\n- The response of the `widget_event` request may now contain effects.\r\n```"}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"8ba6785b3e0e9f8884e12c23c264ff3ab3c0b658","message":"chore(*): release 3.17.0","date":"2020-07-06T12:13:35Z"},{"author":"gebner","committer":"web-flow","hash":"5e0b408dd1bba57b03005a85fe04e33d13620dd9","message":"Update doc/changes.md","date":"2020-07-06T12:15:02Z"}]},{"author":"semorrison","number":378,"diff_summary":[{"file":"library/init/logic.lean","status":"M","additions":1,"deletions":0}],"state":"closed","open_date":"2020-07-03T01:54:53Z","update_date":"2020-07-03T05:17:14Z","discussion":[{"author":"cipher1024","date":"2020-07-03T02:14:30Z","comment":"Have you tried building mathlib with it?"},{"author":"bryangingechen","date":"2020-07-03T03:25:59Z","comment":"> Have you tried building mathlib with it?\r\n\r\nThe first sentence of the PR is \"mathlib still compiles\", right?"},{"author":"cipher1024","date":"2020-07-03T04:01:35Z","comment":"Right, I should read more carefully. This looks good to me. I haven't reviewed a PR for a while. What is the new way of putting one on the build queue?"},{"author":"bryangingechen","date":"2020-07-03T04:06:18Z","comment":"You can type `bors r+` or equivalently `bors merge` on its own line in a comment or PR review comment. The PR then gets added to the queue which you can view [here](https://app.bors.tech/repositories/24760) (more docs on that page too)."},{"author":"cipher1024","date":"2020-07-03T04:20:21Z","comment":"Nice! Thanks! So by you explaining it to me, you actually accepted the PR, right? "},{"author":"bryangingechen","date":"2020-07-03T04:33:00Z","comment":"No, I didn't put the command on its own line. Didn't want to keep all the fun for myself. 😉 "},{"author":"cipher1024","date":"2020-07-03T04:54:59Z","comment":"Here we go then!"},{"author":"cipher1024","date":"2020-07-03T04:55:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-03T05:17:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/833190340)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/833190270)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/833190312)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/833190288)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/833190325)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/833190305)"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"569a4437b904cf45699372ddc1da171a6f15d744","message":"feat(library/init/logic): mark dif_ctx_congr as @[congr]","date":"2020-07-03T01:37:49Z"}]},{"author":"gebner","number":377,"diff_summary":[{"file":"src/frontends/lean/module_parser.cpp","status":"M","additions":9,"deletions":0},{"file":"src/frontends/lean/parser.h","status":"M","additions":9,"deletions":0}],"state":"closed","open_date":"2020-07-02T14:49:40Z","update_date":"2020-07-03T07:50:00Z","discussion":[{"author":"gebner","date":"2020-07-03T07:26:12Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-03T07:49:59Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/833500306)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/833500299)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/833500345)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/833500276)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/833500272)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/833500329)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f0c6921a8782c79b025af5067c06895be657f5c1","message":"fix(frontends/lean/module_parser): abort if no input consumed","date":"2020-07-02T14:48:49Z"}]},{"author":"gebner","number":376,"diff_summary":[{"file":"src/library/type_context.cpp","status":"A","additions":6,"deletions":3},{"file":"tests/lean/run/362c.lean","status":"A","additions":6,"deletions":3},{"file":"tests/lean/widget/widget4.input.expected.out","status":"A","additions":6,"deletions":3}],"state":"closed","open_date":"2020-07-02T13:53:08Z","update_date":"2020-07-03T09:54:44Z","discussion":[{"author":"gebner","date":"2020-07-02T13:53:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-02T14:11:52Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/830862513)"},{"author":"gebner","date":"2020-07-03T09:31:54Z","comment":"Finally.  I think we should sanitize the output of the widget tests, replacing `\"key\":\"...\"` by `\"key\":\"\"`.  We already do this for the interactive tests to sanitize the file name.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-07-03T09:54:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/833866359)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/833866375)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/833866484)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/833866508)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/833866444)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/833866468)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"2ec45ad688ab91d14ca802132c9beb53a1f42f12","message":"fix(library/type_context): do not unify `(1 : ℕ)` with `(1 : ℤ)`","date":"2020-07-02T13:52:03Z"},{"author":"gebner","committer":"gebner","hash":"4ecdea51f0c2b12815df936ba13d461594ce0b64","message":"Fix test?","date":"2020-07-03T08:46:53Z"},{"author":"gebner","committer":"gebner","hash":"55ba9fa8c1696a56fb24c3ed8e43fb21189c2f3f","message":"Fix test....","date":"2020-07-03T09:12:40Z"}]},{"author":"EdAyers","number":375,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"M","additions":9,"deletions":1},{"file":"src/frontends/lean/widget.cpp","status":"M","additions":9,"deletions":1}],"state":"closed","open_date":"2020-07-02T13:52:40Z","update_date":"2020-07-02T14:35:21Z","discussion":[{"author":"gebner","date":"2020-07-02T13:59:40Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-02T14:35:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/830938425)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/830938550)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/830938321)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/830938583)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/830938462)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/830938662)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"da7e55edc7db65f811cd53446a641bc8fdef3b1b","message":"feat(widget): add 'copy text' effect.","date":"2020-07-02T13:51:08Z"}]},{"author":"gebner","number":373,"diff_summary":[{"file":"src/library/tactic/apply_tactic.cpp","status":"A","additions":12,"deletions":0},{"file":"tests/lean/run/372c.lean","status":"A","additions":12,"deletions":0}],"state":"closed","open_date":"2020-07-01T08:03:56Z","update_date":"2020-07-01T08:35:29Z","discussion":[{"author":"gebner","date":"2020-07-01T08:11:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-01T08:35:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/825685276)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/825685530)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/825685407)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/825685573)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/825685459)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/825685237)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"453217f5c02a30469e2cc6be21aaaa894afd6031","message":"fix(library/tactic/apply_tactic): prevent segfault","date":"2020-07-01T08:03:31Z"},{"author":"gebner","committer":"gebner","hash":"72ade3666011e019d54e94fe17f77e10f1a11436","message":"Make test pass.","date":"2020-07-01T08:05:49Z"}]},{"author":"EdAyers","number":371,"diff_summary":[{"file":"library/init/meta/widget/interactive_expr.lean","status":"A","additions":149,"deletions":23},{"file":"src/frontends/lean/pp.cpp","status":"A","additions":149,"deletions":23},{"file":"src/frontends/lean/pp.h","status":"A","additions":149,"deletions":23},{"file":"src/library/expr_address.cpp","status":"A","additions":149,"deletions":23},{"file":"src/library/vm/vm_eformat.h","status":"A","additions":149,"deletions":23},{"file":"tests/lean/eformat.lean.expected.out","status":"A","additions":149,"deletions":23},{"file":"tests/lean/pp_tagged.lean","status":"A","additions":149,"deletions":23},{"file":"tests/lean/pp_tagged.lean.expected.out","status":"A","additions":149,"deletions":23},{"file":"tests/lean/widget/widget4.input.expected.out","status":"A","additions":149,"deletions":23}],"state":"closed","open_date":"2020-06-30T19:10:38Z","update_date":"2020-07-01T09:00:01Z","discussion":[{"author":"gebner","date":"2020-07-01T08:27:16Z","comment":"Thank you, this looks great!\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-07-01T09:00:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/825760742)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/825760751)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/825760717)\n  * Build macos Release\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/825760683)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/825760660)"}],"review_discussion":[{"author":"gebner","file":"tests/lean/pp_tagged.lean","date":"2020-06-30T19:22:40Z","comment":"```suggestion\r\n#eval (sf.of_eformat <$> tactic.pp_tagged `({w, x, y, z} : set nat)) >>= tactic.trace -- fa, afa, aafa, aaaa\r\n```"},{"author":"EdAyers","file":"tests/lean/widget/widget4.input.expected.out","date":"2020-06-30T23:52:55Z","comment":"uh oh, looks like expr hashes can be nondeterministic :/"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"ee975c8f05dd692383ec1005e4912c8a9b6c433c","message":"fix(pp_tagged): stop sf.of_eformat from being private","date":"2020-06-30T19:01:10Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d565d79cef6206b94abd902f3c057453f9aae706","message":"fix(pp_tagged): fix address issue\n\nSome pp_tagged were using a different convention for which way round the\naddresses go, meaning the addresses came out wonky. The convention\nfrom now until the end of time is that the _head_ of the address\nis the _most local_. However when pp_tagged is called in lean,\n_this direction is reversed_, so now the head coordinate is the most global in lean.\n\nThere is an additional issue where (int.of_nat = coe) will interpret\npping coe as without the implicit arguments. I'm not sure whether that\nwould count as a fix so I left it as it is for now.","date":"2020-06-30T19:03:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0da50b4d655a418a0c2dbea0c04043e05ba2dcad","message":"fix(widget): turn off showing the addresses of terms\n\nI was using this for debugging.","date":"2020-06-30T19:08:30Z"},{"author":"gebner","committer":"gebner","hash":"0144319479e6c0109af8712ce3156f66c7d5a500","message":"Add new test case.","date":"2020-06-30T19:24:31Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ff7fb459f5905f3ef87afbbdb25e0142ee450024","message":"fix(tagged_pp): put implicit tag at top\n\nThe idea is that pp_child enters 'below_implicit' mode when\nit finds an implicit argument, and places the boundary _before_ the implicit arguments\nwhich means that it should be possible to get a little more information","date":"2020-06-30T22:31:04Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a1299209480072e1d54ecd16f9d209e7f9ea8cf7","message":"test(pp_tagged): draft test change\n\nHave a guess at what the correct behaviour of the test is.\nWill fix after CI has run.","date":"2020-06-30T22:33:33Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ddfb672005ab6f86bf83910a5f96b7bfa170d08a","message":"fix style check","date":"2020-06-30T22:48:15Z"},{"author":"EdAyers","committer":"EdAyers","hash":"bf1e3d31b66461bed87fd32bef6a39585507346c","message":"include below_implicit for pp_child_notation","date":"2020-06-30T23:04:30Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5425284eef05420e7f6db843151b01aa2794aef0","message":"fix tests","date":"2020-06-30T23:37:36Z"}]},{"author":"EdAyers","number":370,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"A","additions":232,"deletions":39},{"file":"library/init/meta/widget/html_cmd.lean","status":"A","additions":232,"deletions":39},{"file":"library/init/meta/widget/interactive_expr.lean","status":"A","additions":232,"deletions":39},{"file":"src/frontends/lean/info_manager.cpp","status":"A","additions":232,"deletions":39},{"file":"src/frontends/lean/widget.cpp","status":"A","additions":232,"deletions":39},{"file":"src/frontends/lean/widget.h","status":"A","additions":232,"deletions":39},{"file":"tests/lean/widget/widget1.lean","status":"A","additions":232,"deletions":39},{"file":"tests/lean/widget/widget3.lean","status":"A","additions":232,"deletions":39},{"file":"tests/lean/widget/widget_effects.input","status":"A","additions":232,"deletions":39},{"file":"tests/lean/widget/widget_effects.input.expected.out","status":"A","additions":232,"deletions":39},{"file":"tests/lean/widget/widget_effects.lean","status":"A","additions":232,"deletions":39}],"state":"closed","open_date":"2020-06-30T12:59:09Z","update_date":"2020-07-02T12:48:49Z","discussion":[{"author":"gebner","date":"2020-07-02T12:27:08Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-02T12:48:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/830568744)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/830568860)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/830568789)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/830568758)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/830568797)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/830568835)"}],"review_discussion":[{"author":"gebner","file":"src/frontends/lean/widget.cpp","date":"2020-06-30T14:20:17Z","comment":"Please turn this into a `scope_global_widget` class.\r\n\r\nIdeally, I'd like to avoid additional global variables.  Is it instead possible to turn this into an extra argument to `handle_event`?"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"6c650c2407f84c0c5f3dc321d023b57bd181da43","message":"feat(widget): component.with_effects","date":"2020-06-30T12:53:55Z"},{"author":"EdAyers","committer":"EdAyers","hash":"caf17e20fc62b14e080ba160fe5349e2cd1fa003","message":"fix(widget): tests","date":"2020-06-30T13:48:01Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0e4593e500dcac9677db12411c24baad0cedf533","message":"feat(widget): remove global widget_context\n\nInstead it's passed as an argument.\nI think there is some possible refactoring so that everything lives\ninside widget_context. I am imagining something similar to pp_fn used in\npp.cpp. But for now this will do.","date":"2020-07-02T11:40:25Z"}]},{"author":"EdAyers","number":369,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"M","additions":4,"deletions":0}],"state":"closed","open_date":"2020-06-30T11:11:49Z","update_date":"2020-06-30T11:52:31Z","discussion":[{"author":"gebner","date":"2020-06-30T11:28:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-30T11:52:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/822174184)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/822174266)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/822174280)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/822174202)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/822174290)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/822174235)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"63072525ac10ef21094ab99373d4cf4c3dd7fea3","message":"fix(widget): add component.with_props_eq\n\nMainly for backwards compatibility","date":"2020-06-30T11:10:05Z"}]},{"author":"fpvandoorn","number":368,"diff_summary":[{"file":"README.md","status":"M","additions":10,"deletions":1}],"state":"closed","open_date":"2020-06-29T16:51:26Z","update_date":"2020-06-30T08:43:10Z","discussion":[{"author":"gebner","date":"2020-06-30T07:59:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-30T08:43:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/821579985)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/821579977)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/821579958)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/821580005)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/821579907)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/821579922)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"87c0cb4543860c63c9e585a8ad928c78b08ebc9a","message":"feat(README): add override instructions to readme","date":"2020-06-29T16:47:35Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"1697e19927771c381075cd8ad804fc6348c6e412","message":"add warning","date":"2020-06-29T16:50:46Z"}]},{"author":"fpvandoorn","number":367,"diff_summary":[{"file":"library/init/data/set.lean","status":"M","additions":0,"deletions":3}],"state":"closed","open_date":"2020-06-29T16:31:04Z","update_date":"2020-06-29T17:05:04Z","discussion":[{"author":"gebner","date":"2020-06-29T16:41:16Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T17:05:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/819230610)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/819230553)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/819230570)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/819230530)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/819230626)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/819230647)"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"d033133535394e064631f73c522f398f06018519","message":"feat(data/set): remove has_neg instance","date":"2020-06-29T16:30:02Z"}]},{"author":"jcommelin","number":366,"diff_summary":[{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":18,"deletions":18}],"state":"closed","open_date":"2020-06-29T12:51:00Z","update_date":"2020-06-29T17:05:09Z","discussion":[{"author":"gebner","date":"2020-06-29T12:55:26Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T13:03:47Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/818342204)"},{"author":"gebner","date":"2020-06-29T14:16:07Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T14:34:47Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/818660818)"},{"author":"bryangingechen","date":"2020-06-29T15:41:14Z","comment":"There's an extra argument to `nat.mul_lt_mul'` here:\r\n\r\nhttps://github.com/leanprover-community/lean/pull/366/files#diff-d3d17d9ef912378c84ec927e3808bda9R1305\r\n\r\n[See the build failure](https://github.com/leanprover-community/lean/pull/366/checks?check_run_id=818639579#step:5:992)."},{"author":"jcommelin","date":"2020-06-29T16:37:12Z","comment":"Weird, I thought I had caught that one."},{"author":"gebner","date":"2020-06-29T16:41:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T17:05:06Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/819230610)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/819230553)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/819230570)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/819230530)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/819230626)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/819230647)"}],"review_discussion":[],"tags":[],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"39325dfdd743705581a5ca8993439a5e3c3ac07e","message":"Fix vacuous assumptions in nat lemmas","date":"2020-06-29T10:18:25Z"},{"author":"jcommelin","committer":"jcommelin","hash":"4eab8b05682e6b9740b78b4a84f95908da37fc6c","message":"Fix oops","date":"2020-06-29T14:11:20Z"},{"author":"jcommelin","committer":"jcommelin","hash":"2944e3342c0f472ebac324cbd225626306e3bfef","message":"Fix oops","date":"2020-06-29T16:36:55Z"}]},{"author":"EdAyers","number":365,"diff_summary":[{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":2,"deletions":2}],"state":"closed","open_date":"2020-06-28T18:16:33Z","update_date":"2020-06-29T10:09:14Z","discussion":[{"author":"gebner","date":"2020-06-29T08:24:09Z","comment":"Why is this a draft?"},{"author":"EdAyers","date":"2020-06-29T08:50:32Z","comment":"The spacing isn't quite right still..."},{"author":"gebner","date":"2020-06-29T09:46:56Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T10:09:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/817918441)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/817918388)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/817918456)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/817918398)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/817918477)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/817918506)"},{"author":"bryangingechen","date":"2020-07-05T21:12:14Z","comment":"@EdAyers I found a similar issue with the types, did this PR also solve this?\r\n<img width=\"1490\" alt=\"squished_types\" src=\"https://user-images.githubusercontent.com/5209952/86542308-a4809d00-bee2-11ea-9568-d797f2d1441c.png\">\r\n"},{"author":"EdAyers","date":"2020-07-05T21:16:27Z","comment":"it should only fix the spacing issues on the LHS of `:` in the context. Please can you confirm that the spacing on `yis_a_max_ofA` is correct if you just print it as a string?"},{"author":"bryangingechen","date":"2020-07-05T21:21:43Z","comment":"Oh, I see. `is_a_max_of` is declared as notation without spaces around it:\r\n```lean\r\ninfix `is_a_max_of`:55 := is_max\r\n```\r\nAdding spaces fixes this. I'll make a PR on the tutorials project then. Sorry for the noise!"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"web-flow","hash":"906af03880f8cae30088a4abe04b7a389eb91f46","message":"fix(widget): add margin to local const names in tactic state\n\nFixes the 'crushed' issue","date":"2020-06-28T18:16:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"74b27ef34a4ef9611c408d955d3196a290ceeb83","message":"style(widget): spacing on locals","date":"2020-06-29T09:02:24Z"}]},{"author":"EdAyers","number":363,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"M","additions":462,"deletions":200},{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":462,"deletions":200},{"file":"library/init/meta/widget/tactic_component.lean","status":"M","additions":462,"deletions":200},{"file":"src/frontends/lean/widget.cpp","status":"M","additions":462,"deletions":200},{"file":"src/frontends/lean/widget.h","status":"M","additions":462,"deletions":200},{"file":"src/library/vm/vm_option.h","status":"M","additions":462,"deletions":200},{"file":"tests/lean/widget/widget1.input","status":"M","additions":462,"deletions":200},{"file":"tests/lean/widget/widget1.input.expected.out","status":"M","additions":462,"deletions":200},{"file":"tests/lean/widget/widget1.lean","status":"M","additions":462,"deletions":200},{"file":"tests/lean/widget/widget2.input","status":"M","additions":462,"deletions":200},{"file":"tests/lean/widget/widget2.input.expected.out","status":"M","additions":462,"deletions":200},{"file":"tests/lean/widget/widget2.lean","status":"M","additions":462,"deletions":200},{"file":"tests/lean/widget/widget3.input","status":"M","additions":462,"deletions":200},{"file":"tests/lean/widget/widget3.input.expected.out","status":"M","additions":462,"deletions":200},{"file":"tests/lean/widget/widget3.lean","status":"M","additions":462,"deletions":200}],"state":"closed","open_date":"2020-06-27T12:32:11Z","update_date":"2020-06-30T08:21:52Z","discussion":[{"author":"gebner","date":"2020-06-30T07:58:16Z","comment":"LGTM.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-06-30T08:21:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/821497379)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/821497369)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/821497261)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/821497335)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/821497277)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/821497305)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"d011a3fab845e9a17dc27d5547c93a09bcbe1b0b","message":"refactor(widget): refactor to use hooks\n\nsupercedes #322","date":"2020-06-27T12:28:31Z"},{"author":"EdAyers","committer":"EdAyers","hash":"89a9c4abbbb3d05599c13022982dcade01305cb6","message":"fix(widget): component ids are strictly positive\n\nChange got lost in refactor","date":"2020-06-27T12:39:50Z"}]},{"author":"EdAyers","number":361,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"A","additions":201,"deletions":22},{"file":"library/init/meta/widget/html_cmd.lean","status":"A","additions":201,"deletions":22},{"file":"library/init/meta/widget/interactive_expr.lean","status":"A","additions":201,"deletions":22},{"file":"src/frontends/lean/info_manager.cpp","status":"A","additions":201,"deletions":22},{"file":"src/frontends/lean/widget.cpp","status":"A","additions":201,"deletions":22},{"file":"src/frontends/lean/widget.h","status":"A","additions":201,"deletions":22},{"file":"tests/lean/widget/widget1.lean","status":"A","additions":201,"deletions":22},{"file":"tests/lean/widget/widget3.lean","status":"A","additions":201,"deletions":22},{"file":"tests/lean/widget/widget_effects.input","status":"A","additions":201,"deletions":22},{"file":"tests/lean/widget/widget_effects.input.expected.out","status":"A","additions":201,"deletions":22},{"file":"tests/lean/widget/widget_effects.lean","status":"A","additions":201,"deletions":22}],"state":"closed","open_date":"2020-06-26T12:24:46Z","update_date":"2020-06-27T12:44:40Z","discussion":[],"review_discussion":[{"author":"gebner","file":"library/init/meta/widget/basic.lean","date":"2020-06-26T12:40:57Z","comment":"Is empty string = current file?  We cannot get the file name of the current file in meta code."},{"author":"gebner","file":"library/init/meta/widget/basic.lean","date":"2020-06-26T12:49:01Z","comment":"What do you think the `custom` effect will be used for?  You need to modify the vscode extension anyhow for a new effect type."},{"author":"EdAyers","file":"library/init/meta/widget/basic.lean","date":"2020-06-26T13:07:49Z","comment":"Yeah it just means that you can test out new effects without having to have a custom build of lean was the idea."},{"author":"EdAyers","file":"src/frontends/lean/widget.cpp","date":"2020-06-26T13:21:12Z","comment":"I get a vm_check failed here because `cfield(e,1)` is not a vm_composite for the `widget_effects` test. :/"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"2da11ff46efbc88ce7e77f4b95aa6ad077b6ccd1","message":"feat(widget): add index enums for component, html, attr","date":"2020-06-26T11:22:53Z"},{"author":"EdAyers","committer":"EdAyers","hash":"abd50985dbd0622d11de7d4751cd17394d03dc45","message":"Merge branch 'master' into widget-actions","date":"2020-06-26T11:24:43Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5de4cf7027d1437728360b6648cd68fcd1d11ff7","message":"feat(widget): implement widget effects\n\nsave_widget now has the type `pos -> component tactic_state\nwidget.effects`.\nThis means that now the widget-writer can cause widget.effects\nto issue a stream of commands to vscode to run side effects. Things like\nhighlighting a particular region of code or revealing a location in the\neditor.\n\nThe next task is to add 'go to definition' for the default tactic\nwidget.","date":"2020-06-26T12:18:45Z"},{"author":"EdAyers","committer":"EdAyers","hash":"17bad852f548cb8c10e22fd774f460b9dd5ce18b","message":"test(widget); fix tests","date":"2020-06-26T12:35:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"98685dec64b5e91e70f3718353519e287c40e35c","message":"feat(widget): connect info_manager","date":"2020-06-26T13:02:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"2047b436f394e73ae711fae4a88b9b9c3ef884a8","message":"test(widget): add a test for widget effects\n\nIt still fails due to to_pos_info() not working?","date":"2020-06-26T13:06:01Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9a3680aa7b331bc71a786a5cfcc0e8ce928bf549","message":"feat(widget): make file_name optional on widget.effect\n\nDefaults to the current file, handled by vscode.","date":"2020-06-26T13:19:31Z"},{"author":"EdAyers","committer":"EdAyers","hash":"baf7202eef7d39fe002958a87e123b32d44c98d4","message":"test(widget): fix test","date":"2020-06-26T13:22:14Z"},{"author":"EdAyers","committer":"EdAyers","hash":"60e36fc711211b762dce98341bb3e3b3005c09f4","message":"style(widget): fix linting","date":"2020-06-26T13:33:16Z"},{"author":"EdAyers","committer":"EdAyers","hash":"03ae7b6009b700b6a6a0ba21cb9fde9890e712a4","message":"feat(widget): fix effects code\n\nThe problem was that `list<vm_obj> to_list(vm_obj const & x)` was not\ndoing what I thought it was doing.","date":"2020-06-27T11:31:27Z"}]},{"author":"gebner","number":358,"diff_summary":[{"file":"README.md","status":"M","additions":17,"deletions":2},{"file":"doc/changes.md","status":"M","additions":17,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":17,"deletions":2}],"state":"closed","open_date":"2020-06-25T11:49:20Z","update_date":"2020-06-25T12:32:14Z","discussion":[{"author":"gebner","date":"2020-06-25T12:11:01Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-25T12:32:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/807214249)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/807214213)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/807214137)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/807214388)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/807214426)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/807214480)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c76e61aaeb979cbc2bf0a16f62bc33890c05e90c","message":"chore(*): release 3.16.5","date":"2020-06-25T11:48:36Z"}]},{"author":"gebner","number":357,"diff_summary":[{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":11,"deletions":5}],"state":"closed","open_date":"2020-06-25T10:21:03Z","update_date":"2020-06-25T12:06:35Z","discussion":[{"author":"gebner","date":"2020-06-25T10:58:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-25T11:11:46Z","comment":"Build failed:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/807001683)"},{"author":"gebner","date":"2020-06-25T11:44:22Z","comment":"Uggh, an intermittent error when uploading the github actions artifact.\r\n\r\nbors merge\r\nagain"},{"author":"bors[bot]","date":"2020-06-25T12:06:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/807131357)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/807131404)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/807131330)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/807131365)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/807131338)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/807131388)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"8f6b03a2fd053174287bfd1812763322074f4d1a","message":"feat(interactive_expr): show case tags\n\nAlso tune styling so that it matches the current tactic state more\nclosely.","date":"2020-06-25T10:18:56Z"}]},{"author":"gebner","number":356,"diff_summary":[{"file":"src/frontends/lean/tactic_notation.cpp","status":"A","additions":49,"deletions":0},{"file":"tests/lean/sorry_hash.lean","status":"A","additions":49,"deletions":0},{"file":"tests/lean/sorry_hash.lean.expected.out","status":"A","additions":49,"deletions":0}],"state":"closed","open_date":"2020-06-24T08:11:52Z","update_date":"2020-06-24T08:39:22Z","discussion":[{"author":"gebner","date":"2020-06-24T08:17:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T08:39:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/802564395)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/802564248)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/802564416)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/802564274)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/802564311)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/802564350)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"83083f660f36410c1311a9b0e61ae33ec526b15e","message":"fix(frontends/lean/tactic_notation): support `sorry #`","date":"2020-06-24T08:09:52Z"}]},{"author":"gebner","number":355,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"A","additions":127,"deletions":33},{"file":"library/init/meta/widget/basic.lean","status":"A","additions":127,"deletions":33},{"file":"src/frontends/lean/info_manager.cpp","status":"A","additions":127,"deletions":33},{"file":"src/frontends/lean/info_manager.h","status":"A","additions":127,"deletions":33},{"file":"src/frontends/lean/interactive.cpp","status":"A","additions":127,"deletions":33},{"file":"src/frontends/lean/json.cpp","status":"A","additions":127,"deletions":33},{"file":"src/frontends/lean/widget.cpp","status":"A","additions":127,"deletions":33},{"file":"src/library/messages.h","status":"A","additions":127,"deletions":33},{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":127,"deletions":33},{"file":"src/library/trace.cpp","status":"A","additions":127,"deletions":33},{"file":"src/library/trace.h","status":"A","additions":127,"deletions":33},{"file":"src/tests/shell/shell_test.expected.out","status":"A","additions":127,"deletions":33},{"file":"tests/lean/widget/widget1.input","status":"A","additions":127,"deletions":33},{"file":"tests/lean/widget/widget1.input.expected.out","status":"A","additions":127,"deletions":33},{"file":"tests/lean/widget/widget2.input","status":"A","additions":127,"deletions":33},{"file":"tests/lean/widget/widget2.input.expected.out","status":"A","additions":127,"deletions":33},{"file":"tests/lean/widget/widget3.input","status":"A","additions":127,"deletions":33},{"file":"tests/lean/widget/widget3.input.expected.out","status":"A","additions":127,"deletions":33},{"file":"tests/lean/widget/widget4.input","status":"A","additions":127,"deletions":33},{"file":"tests/lean/widget/widget4.input.expected.out","status":"A","additions":127,"deletions":33},{"file":"tests/lean/widget/widget4.lean","status":"A","additions":127,"deletions":33}],"state":"closed","open_date":"2020-06-23T16:00:52Z","update_date":"2020-06-24T17:00:34Z","discussion":[{"author":"gebner","date":"2020-06-24T10:33:15Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T10:41:04Z","comment":"Canceled."},{"author":"gebner","date":"2020-06-24T10:41:37Z","comment":"bors cancel"},{"author":"gebner","date":"2020-06-24T11:51:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T13:14:50Z","comment":"Build failed:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/803215977)"},{"author":"gebner","date":"2020-06-24T16:38:34Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T17:00:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/804230579)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/804230543)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/804230502)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/804230602)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/804230520)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/804230562)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"a551bdd43c9bc5515ff6e6e0a2356b62be36cd36","message":"feat(*): trace_widget","date":"2020-06-23T15:58:10Z"},{"author":"gebner","committer":"gebner","hash":"a48b121f913fa8922f9081d6c0c61eaaed2acdf3","message":"style","date":"2020-06-24T10:31:33Z"},{"author":"gebner","committer":"gebner","hash":"db16527d65b900582088e2f461e715b381a2b5ec","message":"Fix build on mac?","date":"2020-06-24T10:40:53Z"},{"author":"gebner","committer":"gebner","hash":"3d1f4c4a059f78836f478f909a3e92ce14789fe6","message":"Fix on mac??? 🙏","date":"2020-06-24T10:55:24Z"},{"author":"gebner","committer":"gebner","hash":"fa6de652cb1c724c5c6c6f3313f25627fa83edba","message":"Oops, do not report trace_widget as goal widget","date":"2020-06-24T13:18:04Z"},{"author":"gebner","committer":"gebner","hash":"70581c912d8c4f89046c2d05f0ede4c4801ef63b","message":"Make sure that widget ids are always positive.","date":"2020-06-24T13:22:49Z"},{"author":"gebner","committer":"gebner","hash":"c0c0ecbcc6e02f95fd8f48a72f6c70e4b15d909b","message":"Fix test","date":"2020-06-24T15:10:39Z"},{"author":"gebner","committer":"gebner","hash":"86a4ea5b6973c40bc1190a7911a276a6654d57b0","message":"Fix test","date":"2020-06-24T15:55:16Z"}]},{"author":"gebner","number":354,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":3,"deletions":3}],"state":"closed","open_date":"2020-06-23T13:16:45Z","update_date":"2020-06-23T14:00:28Z","discussion":[{"author":"gebner","date":"2020-06-23T13:16:53Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-23T14:00:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/799462363)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/799462240)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/799462338)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/799462280)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/799462214)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/799462298)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"179cc0f01fc25d69d21dd35240e9b6893dae45b4","message":"Maybe fix msys2 ci.","date":"2020-06-23T13:14:04Z"},{"author":"gebner","committer":"gebner","hash":"31676523b57428e9f2a182e2b7d2a1e39736c8a3","message":"Maybe this fixes the msys2 build????","date":"2020-06-23T13:14:04Z"}]},{"author":"gebner","number":353,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":42,"deletions":54},{"file":"bors.toml","status":"M","additions":42,"deletions":54},{"file":"src/checker/checker.cpp","status":"M","additions":42,"deletions":54},{"file":"src/util/numerics/mpz.cpp","status":"M","additions":42,"deletions":54},{"file":"tests/lean/parser_error_recovery.lean","status":"M","additions":42,"deletions":54},{"file":"tests/lean/parser_error_recovery.lean.expected.out","status":"M","additions":42,"deletions":54},{"file":"tests/lean/run/lst64.lean","status":"M","additions":42,"deletions":54}],"state":"closed","open_date":"2020-06-23T13:16:34Z","update_date":"2020-10-27T16:30:58Z","discussion":[{"author":"gebner","date":"2020-10-27T15:39:10Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T16:30:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1315676570)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1315676523)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1315676494)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1315676329)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1315676305)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1315676406)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1315676155)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"2a398325eb7d377c8d05e7837d992079dc3236a3","message":"chore(ci): add sanitized build","date":"2020-06-23T13:15:07Z"},{"author":"gebner","committer":"gebner","hash":"3d66c9b341b4283d15b2cba5e135ecc2e095ede1","message":"Maybe the sanitized building build builds now.","date":"2020-06-23T13:15:07Z"},{"author":"gebner","committer":"gebner","hash":"197b98e9dd3f8a6a6303abc831c88c9942534acb","message":"Fix some sanitizer errors.","date":"2020-06-23T13:15:07Z"},{"author":"gebner","committer":"gebner","hash":"fa02fb533932883565b734e4a6203f976f58a5ab","message":"Pacify style checker.","date":"2020-06-23T13:15:07Z"},{"author":"gebner","committer":"gebner","hash":"f51898cc373215280c18e74a9a7a6071d6a835c5","message":"Merge branch 'master' into sanitize","date":"2020-10-27T10:17:47Z"},{"author":"gebner","committer":"gebner","hash":"0e563fbcd11c601d092598bea10fb85326b76913","message":"Fix parser_error_recovery test.","date":"2020-10-27T13:15:21Z"},{"author":"gebner","committer":"gebner","hash":"739907aeeb7981b6ba121ccadbe3668178e26fe1","message":"Fix undefined behavior in leanchecker","date":"2020-10-27T13:15:31Z"},{"author":"gebner","committer":"gebner","hash":"2684397ffc29bbbb4de19fa9629931863bc868b1","message":"Merge branch 'master' into sanitize","date":"2020-10-27T13:16:21Z"},{"author":"gebner","committer":"gebner","hash":"15970e40e8de7d5087d91aded2ec14c38d0ae9a5","message":"Reduce size of lst64","date":"2020-10-27T13:56:41Z"}]},{"author":"gebner","number":352,"diff_summary":[{"file":"src/frontends/lean/scanner.cpp","status":"A","additions":79,"deletions":1},{"file":"src/frontends/lean/scanner.h","status":"A","additions":79,"deletions":1},{"file":"src/frontends/lean/token_table.cpp","status":"A","additions":79,"deletions":1},{"file":"tests/lean/string_block.lean","status":"A","additions":79,"deletions":1},{"file":"tests/lean/string_block.lean.expected.out","status":"A","additions":79,"deletions":1}],"state":"closed","open_date":"2020-06-23T12:57:58Z","update_date":"2020-06-24T10:53:27Z","discussion":[{"author":"gebner","date":"2020-06-23T13:03:41Z","comment":"vscode highlighting: https://github.com/leanprover/vscode-lean/pull/183"},{"author":"gebner","date":"2020-06-24T10:30:25Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T10:53:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/802985917)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/802985940)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/802985833)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/802985813)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/802985908)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/802985871)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"085a6f830664fb9a5952d70fcf4881aa98c1b60f","message":"feat(frontends/lean/scanner): add comment-like string blocks","date":"2020-06-23T12:56:29Z"}]},{"author":"gebner","number":350,"diff_summary":[{"file":"src/library/vm/vm.cpp","status":"M","additions":3,"deletions":1}],"state":"closed","open_date":"2020-06-23T09:57:57Z","update_date":"2020-06-23T14:26:13Z","discussion":[{"author":"gebner","date":"2020-06-23T13:19:45Z","comment":"There is still a failing VM check in #349 and I have no idea where that comes from.  But that's not bugworthy since there's still a sorry in there.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-23T14:04:27Z","comment":"Canceled."},{"author":"gebner","date":"2020-06-23T14:04:52Z","comment":"oops\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-23T14:26:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/799635303)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/799635364)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/799635294)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/799635233)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/799635327)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/799635210)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"5a2a38d18a31b1d21cc0eb7e9bfb221ef3483618","message":"fix(library/vm/vm): handle exceptions in ts_clone","date":"2020-06-23T14:04:16Z"}]},{"author":"gebner","number":348,"diff_summary":[{"file":"README.md","status":"M","additions":12,"deletions":2},{"file":"doc/changes.md","status":"M","additions":12,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":12,"deletions":2}],"state":"closed","open_date":"2020-06-22T14:58:53Z","update_date":"2020-06-22T15:20:53Z","discussion":[{"author":"gebner","date":"2020-06-22T14:58:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-22T15:20:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/795810069)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/795810196)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/795806960)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/795806849)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/795806919)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/795806862)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"557c7050ce1442da40c7c5963d058b01b846fc33","message":"chore(*): release 3.16.4","date":"2020-06-22T14:57:51Z"}]},{"author":"gebner","number":347,"diff_summary":[{"file":"src/frontends/lean/builtin_cmds.cpp","status":"M","additions":29,"deletions":20},{"file":"src/frontends/lean/elaborator.cpp","status":"M","additions":29,"deletions":20},{"file":"src/frontends/lean/elaborator.h","status":"M","additions":29,"deletions":20},{"file":"src/library/eval_helper.cpp","status":"M","additions":29,"deletions":20},{"file":"src/library/tactic/app_builder_tactics.cpp","status":"M","additions":29,"deletions":20},{"file":"src/library/tactic/elaborate.cpp","status":"M","additions":29,"deletions":20}],"state":"closed","open_date":"2020-06-21T14:59:15Z","update_date":"2020-06-22T11:34:51Z","discussion":[{"author":"gebner","date":"2020-06-22T11:12:47Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-22T11:34:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/795027137)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/795027101)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/795027056)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/795027084)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/795027115)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/795027035)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"563fbcef463e5c96c30bfe4885dd40bb5d4b1061","message":"perf(library/tactic/app_builder_tactics): use tactic_state_context_cache","date":"2020-06-21T14:58:09Z"},{"author":"gebner","committer":"gebner","hash":"0073a89f129db2db1cf3f0ea90f360f3fab68dcc","message":"perf(*): freeze local instances in `#eval` and `run_cmd`","date":"2020-06-21T15:41:31Z"},{"author":"gebner","committer":"gebner","hash":"2f2dbb0ceb1778ae0d7790af256e87a48987a0f2","message":"perf(library/tactic/elaborate): use tactic_state_context_cache","date":"2020-06-21T16:24:05Z"}]},{"author":"EdAyers","number":346,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"M","additions":117,"deletions":29},{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":117,"deletions":29}],"state":"closed","open_date":"2020-06-19T15:43:24Z","update_date":"2020-06-22T13:43:47Z","discussion":[{"author":"gebner","date":"2020-06-22T12:51:02Z","comment":"Looks \"good\" to me.  I don't use the filtering options so I don't know what people expect there.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-22T13:20:29Z","comment":"Build failed:\n  * Build macos Debug"},{"author":"gebner","date":"2020-06-22T13:22:27Z","comment":"sudo\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-22T13:43:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/795449870)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/795449841)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/795449737)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/795449806)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/795449784)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/795449879)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"c487a10116056c6dbff0ab92616803d1a7cdad85","message":"feat(interactive_expr): group locals with same type\n\nIf there are consecutive locals in the context with the same type then the tactic_view_goal now groups them together in to one line.","date":"2020-06-19T14:01:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"3c6e9ff3d7610decae7629fd45b6cffed77d810d","message":"Add a filter combo box","date":"2020-06-19T14:43:41Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b2360a538cb5c4c852b8d841798b364784b37f03","message":"Merge branch 'master' into interactive_expr","date":"2020-06-19T14:44:07Z"},{"author":"EdAyers","committer":"EdAyers","hash":"02de16370566e7033986e596bd9d49f1d14e9127","message":"Fix issues","date":"2020-06-19T14:58:38Z"},{"author":"EdAyers","committer":"EdAyers","hash":"84697224c24217cfa873671e8b1ddc52396fe9dd","message":"Refactor component for rendering type of locals.","date":"2020-06-19T15:37:00Z"},{"author":"EdAyers","committer":"EdAyers","hash":"81777d3b08a9170dcc24ff8b15ddb7d7ec261b1f","message":"fix(widget): add keys to select options","date":"2020-06-19T16:19:50Z"}]},{"author":"gebner","number":344,"diff_summary":[{"file":"README.md","status":"M","additions":21,"deletions":2},{"file":"doc/changes.md","status":"M","additions":21,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":21,"deletions":2}],"state":"closed","open_date":"2020-06-18T10:32:07Z","update_date":"2020-06-18T11:12:55Z","discussion":[{"author":"gebner","date":"2020-06-18T10:44:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-18T11:12:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/783981786)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/783987416)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/783981811)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/783981832)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/783987347)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/783987463)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"aecb1a016db353897a094a5c4c573692eb8336b9","message":"chore(*): release 3.16.3","date":"2020-06-18T10:31:11Z"}]},{"author":"gebner","number":343,"diff_summary":[{"file":"src/frontends/lean/interactive.cpp","status":"A","additions":13,"deletions":1},{"file":"tests/lean/interactive/hole5.lean","status":"A","additions":13,"deletions":1},{"file":"tests/lean/interactive/hole5.lean.expected.out","status":"A","additions":13,"deletions":1}],"state":"closed","open_date":"2020-06-18T09:53:41Z","update_date":"2020-06-18T10:16:47Z","discussion":[{"author":"gebner","date":"2020-06-18T09:53:47Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-18T10:16:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/783803108)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/783803161)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/783803137)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/783803172)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/783803152)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/783803189)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"3f6ba2d9d38ca5a19fccc4c3f21fa1565c461f75","message":"fix(frontends/lean/interactive): fix holes with space in name","date":"2020-06-18T09:52:49Z"}]},{"author":"gebner","number":342,"diff_summary":[{"file":"src/frontends/lean/module_parser.cpp","status":"A","additions":15,"deletions":12},{"file":"src/frontends/lean/scanner.cpp","status":"A","additions":15,"deletions":12},{"file":"src/frontends/lean/scanner.h","status":"A","additions":15,"deletions":12},{"file":"tests/lean/interactive/85c.input","status":"A","additions":15,"deletions":12},{"file":"tests/lean/interactive/85c.input.expected.out","status":"A","additions":15,"deletions":12}],"state":"closed","open_date":"2020-06-17T16:38:01Z","update_date":"2020-06-17T17:01:24Z","discussion":[{"author":"gebner","date":"2020-06-17T16:38:58Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-17T17:01:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/781280096)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/781280064)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/781280024)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/781280075)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/781280013)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/781280115)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"4efd936e6b003a2b2c138be6a3c752056c26d7c8","message":"fix(frontends/lean/scanner): skip_to_pos: handle eof","date":"2020-06-17T16:36:52Z"}]},{"author":"gebner","number":340,"diff_summary":[{"file":"src/CMakeLists.txt","status":"D","additions":0,"deletions":4146},{"file":"src/api/CMakeLists.txt","status":"D","additions":0,"deletions":4146},{"file":"src/api/decl.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/decl.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/env.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/exception.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/exception.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/expr.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/expr.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/inductive.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/inductive.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/ios.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/ios.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_bool.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_decl.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_env.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_exception.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_expr.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_inductive.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_ios.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_macros.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_module.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_name.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_options.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_parser.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_string.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_type_checker.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/lean_univ.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/module.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/name.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/name.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/options.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/options.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/parser.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/string.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/string.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/type_checker.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/type_checker.h","status":"D","additions":0,"deletions":4146},{"file":"src/api/univ.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/api/univ.h","status":"D","additions":0,"deletions":4146},{"file":"src/tests/shared/CMakeLists.txt","status":"D","additions":0,"deletions":4146},{"file":"src/tests/shared/env.c","status":"D","additions":0,"deletions":4146},{"file":"src/tests/shared/expr.c","status":"D","additions":0,"deletions":4146},{"file":"src/tests/shared/name.c","status":"D","additions":0,"deletions":4146},{"file":"src/tests/shared/options.c","status":"D","additions":0,"deletions":4146},{"file":"src/tests/shared/shared.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/tests/shared/thread.cpp","status":"D","additions":0,"deletions":4146},{"file":"src/tests/shared/univ.c","status":"D","additions":0,"deletions":4146}],"state":"closed","open_date":"2020-06-16T10:37:13Z","update_date":"2020-06-18T10:50:42Z","discussion":[{"author":"gebner","date":"2020-06-18T10:27:12Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-18T10:50:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/783914620)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/783914603)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/783914580)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/783914505)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/783914566)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/783914531)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"0a0242656397868f713640a147820288fa6da9b8","message":"chore(src/api): remove broken and unused c api\n\nIt clutters the ctrl-p dialog in vscode.","date":"2020-06-11T13:35:44Z"},{"author":"gebner","committer":"gebner","hash":"8e95479f4be2105f1e2c68f674ab1b7dfe7724da","message":"Merge remote-tracking branch 'origin/master' into remove_c_api","date":"2020-06-16T10:37:47Z"}]},{"author":"gebner","number":339,"diff_summary":[{"file":"src/init/init.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/library/register_module.h","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/import_test.lua","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/interval/CMakeLists.txt","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/interval/check.h","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/interval/double_interval.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/interval/float_interval.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/interval/interval.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/interval/mpfp_interval.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/numerics/CMakeLists.txt","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/numerics/double.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/numerics/float.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/numerics/gcd.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/numerics/mpbq.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/numerics/numeric_traits.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/numerics/primes.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/numerics/xnumeral.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/tests/util/numerics/zpz.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/CMakeLists.txt","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/double.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/double.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/float.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/float.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/gcd.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/init_module.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/init_module.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/mpbq.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/mpbq.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/mpq.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/mpq.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/mpz.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/mpz.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/numeric_traits.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/numeric_traits.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/power.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/primes.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/primes.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/register_module.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/remainder.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/xnumeral.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/zpz.cpp","status":"D","additions":1,"deletions":6039},{"file":"src/util/numerics/zpz.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/polynomial/polynomial.h","status":"D","additions":1,"deletions":6039},{"file":"src/util/sexpr/register_module.h","status":"D","additions":1,"deletions":6039}],"state":"closed","open_date":"2020-06-16T10:35:13Z","update_date":"2020-06-16T11:23:04Z","discussion":[{"author":"gebner","date":"2020-06-16T11:00:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-16T11:23:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/776195571)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/776195683)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/776195578)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/776195644)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/776195621)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/776195665)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"e4fb669a414436c3185a5e884e15dbec3ce7eeab","message":"chore(*): remove unused code\n\nThe initialization of the prime number generator (I did not even know we\nhad one) took 1.6% of the runtime on a small example...","date":"2020-06-16T10:33:29Z"}]},{"author":"gebner","number":338,"diff_summary":[{"file":"src/frontends/lean/structure_cmd.cpp","status":"A","additions":27,"deletions":2},{"file":"tests/lean/334c.lean","status":"A","additions":27,"deletions":2},{"file":"tests/lean/334c.lean.expected.out","status":"A","additions":27,"deletions":2}],"state":"closed","open_date":"2020-06-16T09:18:43Z","update_date":"2020-06-16T09:42:53Z","discussion":[{"author":"gebner","date":"2020-06-16T09:19:10Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-16T09:42:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/775904179)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/775904225)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/775904197)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/775904208)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/775904166)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/775904241)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"392dc855f59727ea50ad184220eec1f36a6e2f78","message":"fix(frontends/lean/structure_cmd): remove as-is annotations\n\nFixes #334.","date":"2020-06-16T09:16:56Z"}]},{"author":"gebner","number":337,"diff_summary":[{"file":"src/shell/lean.cpp","status":"M","additions":11,"deletions":9}],"state":"closed","open_date":"2020-06-16T08:32:56Z","update_date":"2020-06-16T09:07:27Z","discussion":[{"author":"gebner","date":"2020-06-16T08:42:17Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-16T09:07:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/775781732)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/775781682)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/775781651)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/775781740)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/775781691)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/775781711)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"e289451cc70e005cca917bd6a9be6f81534bbf65","message":"feat(shell/lean): support `lean --profile --run`","date":"2020-06-16T08:31:59Z"}]},{"author":"jipsen","number":336,"diff_summary":[{"file":"extras/latex/lstlean.tex","status":"M","additions":4,"deletions":6}],"state":"closed","open_date":"2020-06-15T23:58:37Z","update_date":"2020-06-17T17:27:52Z","discussion":[{"author":"jipsen","date":"2020-06-16T01:00:54Z","comment":"Actually, line 216 should also be deleted since it's an incorrect duplicate of line 139 \\blacktriangleright U+25B8. Currently when this symbol is used in a .tex file with the \\usepackage{listing} style, it is displayed as a white triangle in the PDF file."},{"author":"gebner","date":"2020-06-16T07:31:07Z","comment":"Ok, can you then also delete line 216?"},{"author":"jipsen","date":"2020-06-17T16:39:15Z","comment":"Ok, I deleted it. I'm assuming I don't have to make a new pull request, but let me know if something else still needs to be done (sorry, git is not my native language)."},{"author":"gebner","date":"2020-06-17T16:44:51Z","comment":"No, you're doing great.  You can still add commits as long as the PR is not merged.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-17T17:27:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/781352924)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/781352837)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/781352961)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/781352948)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/781352881)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/781352871)"}],"review_discussion":[],"tags":[],"commits":[{"author":"jipsen","committer":"web-flow","hash":"70080dc676110fc9d140136ae2415a0b68720b7a","message":"deleted eq and changed \\nsubset to \\not\\subset, same for \\nsupset","date":"2020-06-15T23:34:03Z"},{"author":"jipsen","committer":"web-flow","hash":"c719610727e79fa31f75639f3603d840e4166dcc","message":"deleted incorrect line 216 (it's a duplicate of correct line 139)","date":"2020-06-17T16:35:50Z"}]},{"author":"gebner","number":335,"diff_summary":[{"file":"src/library/type_context.cpp","status":"M","additions":0,"deletions":2}],"state":"closed","open_date":"2020-06-15T20:42:08Z","update_date":"2020-06-15T21:05:38Z","discussion":[{"author":"gebner","date":"2020-06-15T20:42:17Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-15T21:05:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/774194513)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/774194466)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/774194485)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/774194502)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/774194527)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/774194537)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"ad925590322098a12d11174918053c156e7b7e00","message":"chore(library/type_context): remove debugging code","date":"2020-06-15T20:41:22Z"}]},{"author":"gebner","number":332,"diff_summary":[{"file":"src/library/type_context.cpp","status":"M","additions":66,"deletions":21}],"state":"closed","open_date":"2020-06-15T14:51:27Z","update_date":"2020-06-15T16:10:38Z","discussion":[{"author":"gebner","date":"2020-06-15T15:23:22Z","comment":"As expected, all errors were theoretical.  mathlib builds fine.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-15T16:10:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/773285393)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/773285312)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/773285382)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/773285299)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/773285265)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/773285348)"},{"author":"fpvandoorn","date":"2020-06-15T16:32:06Z","comment":"This is really nice! I feel that the exponential search time on type-class inference was one of the big bottlenecks for development in mathlib.\r\n\r\nI wouldn't be surprised if this sped up a lot of other things as well, like `simp` (and maybe even `library_search`?)."},{"author":"gebner","date":"2020-06-15T17:18:37Z","comment":"It will definitely speed up `simp` (in some cases).  My initial motivation came from this test case from the `simp_nf` linter:\r\n```lean\r\nimport all\r\n-- before: 16s\r\n-- after: 0.3s\r\nexample {α : Type*} {β : Type*} (f : α → β) (a : α) :\r\n  (f : pfun α β) a = roption.some (f a) :=\r\nby simp\r\n```"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"b11d4dd3a415c290f3392cc0b356c7530a9d6ea1","message":"perf(library/type_context): cache type-class searches w/o mvars","date":"2020-06-15T14:47:30Z"}]},{"author":"JLimperg","number":331,"diff_summary":[{"file":"library/data/buffer/parser.lean","status":"M","additions":30,"deletions":6}],"state":"closed","open_date":"2020-06-15T13:03:10Z","update_date":"2020-06-15T15:45:21Z","discussion":[{"author":"gebner","date":"2020-06-15T15:20:57Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-15T15:45:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/773198098)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/773198089)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/773198132)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/773198280)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/773198149)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/773198208)"}],"review_discussion":[{"author":"gebner","file":"library/data/buffer/parser.lean","date":"2020-06-15T14:55:59Z","comment":"```suggestion\r\n  c ← sat (λ c, '0' ≤ c ∧ c ≤ '9'),\r\n```\r\n\r\nThen the error message will appear at the right position and backtracking will work as expected."},{"author":"gebner","file":"library/data/buffer/parser.lean","date":"2020-06-15T14:58:09Z","comment":"```suggestion\r\ndef nat : parser nat := decorate_error \"<number>\" $ do\r\n```\r\nBetter error-message and backtracking.  (The `<|>` only backtracks if the position doesn't advance.)"},{"author":"JLimperg","file":"library/data/buffer/parser.lean","date":"2020-06-15T15:16:18Z","comment":"Fixed, thanks!"},{"author":"JLimperg","file":"library/data/buffer/parser.lean","date":"2020-06-15T15:18:23Z","comment":"Added the `decorate_error`. I'm afraid I don't understand the `<|>` comment -- was there supposed to be another suggested change?"},{"author":"gebner","file":"library/data/buffer/parser.lean","date":"2020-06-15T15:20:53Z","comment":"No this was just (an apparently failed attempt at) an explanation."},{"author":"JLimperg","file":"library/data/buffer/parser.lean","date":"2020-06-15T15:37:23Z","comment":"Ah okay, thanks!"}],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"b0923d7ffa9c78d4266eb59007867c7ce4331d1a","message":"feat(library/data/buffer/parser): add parser.{any_char,digit,nat}","date":"2020-06-15T13:00:33Z"},{"author":"JLimperg","committer":"JLimperg","hash":"02debd17b6d7dce10cd3fef82e425ac0af96e46f","message":"Better error messages; better semantics for digit","date":"2020-06-15T15:15:04Z"}]},{"author":"JLimperg","number":330,"diff_summary":[{"file":"library/init/data/sum/basic.lean","status":"M","additions":24,"deletions":4}],"state":"closed","open_date":"2020-06-15T11:56:59Z","update_date":"2020-06-15T15:07:53Z","discussion":[{"author":"gebner","date":"2020-06-15T14:45:01Z","comment":"Is there a reason this can't go into mathlib instead?"},{"author":"JLimperg","date":"2020-06-15T14:59:30Z","comment":"None in particular. The generic reason why I PR'd them here is that I feel like basic functions should be in core so that it remains/becomes possible to use Lean without a 150k LOC dependency."},{"author":"gebner","date":"2020-06-15T15:07:53Z","comment":"Unless they are needed for something else in core, please PR them to mathlib instead."},{"author":"JLimperg","date":"2020-06-15T15:20:43Z","comment":"All right, will do."}],"review_discussion":[],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"898ff7c723e6642ecbf91848369918e02eab46b1","message":"feat(library/init/data/sum/basic): add projections out of sum","date":"2020-06-15T11:51:40Z"}]},{"author":"gebner","number":329,"diff_summary":[{"file":"src/frontends/lean/user_command.cpp","status":"M","additions":4,"deletions":4},{"file":"src/library/vm/vm_parser.cpp","status":"M","additions":4,"deletions":4},{"file":"src/library/vm/vm_parser.h","status":"M","additions":4,"deletions":4}],"state":"closed","open_date":"2020-06-15T11:25:00Z","update_date":"2020-06-15T12:16:06Z","discussion":[{"author":"gebner","date":"2020-06-15T11:52:57Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-15T12:16:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/772473788)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/772473765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/772473667)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/772473575)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/772473621)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/772473774)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"d310d03c69eeca4979d1fd127ac013c343a23b0c","message":"feat(frontends/lean/user_command): profile user commands","date":"2020-06-15T11:24:26Z"}]},{"author":"gebner","number":328,"diff_summary":[{"file":"src/library/tactic/user_attribute.cpp","status":"M","additions":8,"deletions":0}],"state":"closed","open_date":"2020-06-14T14:17:40Z","update_date":"2020-06-14T14:52:11Z","discussion":[{"author":"gebner","date":"2020-06-14T14:29:02Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-14T14:52:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/770067728)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/770067717)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/770067743)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/770067732)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/770067748)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/770067690)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"ed5b483a41c05dcbb2f0ed5ebba8c09883f1551c","message":"feat(library/tactic/user_attribute): add profiling for user attributes","date":"2020-06-14T14:09:43Z"}]},{"author":"urkud","number":327,"diff_summary":[{"file":"library/init/algebra/classes.lean","status":"M","additions":2,"deletions":1}],"state":"closed","open_date":"2020-06-13T17:28:35Z","update_date":"2020-06-13T18:11:26Z","discussion":[{"author":"gebner","date":"2020-06-13T17:47:49Z","comment":"I'm half surprised that somebody actually uses this file.  This was part of the never realized algebraic normalizer.  It's not really used in core either, so you could move it to mathlib fairly easily, if you want.\r\n\r\nbors merge"},{"author":"urkud","date":"2020-06-13T18:01:50Z","comment":"I don't use it. I was reading `order/basic` and noticed that we have [is_strict_total_order'](https://leanprover-community.github.io/mathlib_docs/order/basic.html#is_strict_total_order') in `mathlib`."},{"author":"bryangingechen","date":"2020-06-13T18:05:20Z","comment":"I think @digama0 suggested moving all of this order stuff out of core. #288 was sort of a preliminary step, but I ran out of steam."},{"author":"bors[bot]","date":"2020-06-13T18:11:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/768543777)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/768543784)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/768543766)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/768543800)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/768543796)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/768543789)"}],"review_discussion":[],"tags":[],"commits":[{"author":"urkud","committer":"urkud","hash":"fa445d104adff1f9be6fb094395aaf41af316be0","message":"fix(library/init/algebra/classes): put `is_strict_total_order` in `Prop`","date":"2020-06-13T17:26:32Z"}]},{"author":"gebner","number":325,"diff_summary":[{"file":"README.md","status":"M","additions":19,"deletions":2},{"file":"doc/changes.md","status":"M","additions":19,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":19,"deletions":2}],"state":"closed","open_date":"2020-06-12T15:13:20Z","update_date":"2020-06-12T15:49:03Z","discussion":[{"author":"gebner","date":"2020-06-12T15:14:09Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-12T15:49:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/765908559)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/765906083)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/765908429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/765906147)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/765906202)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/765906173)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f86e4890da715e5196882036e0410611409a9ae1","message":"chore(*): release 3.16.2","date":"2020-06-12T15:12:40Z"}]},{"author":"EdAyers","number":324,"diff_summary":[{"file":"library/init/meta/widget/components.lean","status":"D","additions":69,"deletions":101},{"file":"library/init/meta/widget/default.lean","status":"D","additions":69,"deletions":101},{"file":"src/frontends/lean/widget.cpp","status":"D","additions":69,"deletions":101},{"file":"src/frontends/lean/widget.h","status":"D","additions":69,"deletions":101},{"file":"tests/lean/widget/widget1.input","status":"D","additions":69,"deletions":101},{"file":"tests/lean/widget/widget1.input.expected.out","status":"D","additions":69,"deletions":101},{"file":"tests/lean/widget/widget1.lean","status":"D","additions":69,"deletions":101},{"file":"tests/lean/widget/widget2.input","status":"D","additions":69,"deletions":101},{"file":"tests/lean/widget/widget2.input.expected.out","status":"D","additions":69,"deletions":101},{"file":"tests/lean/widget/widget2.lean","status":"D","additions":69,"deletions":101},{"file":"tests/lean/widget/widget3.input","status":"D","additions":69,"deletions":101},{"file":"tests/lean/widget/widget3.input.expected.out","status":"D","additions":69,"deletions":101},{"file":"tests/lean/widget/widget3.lean","status":"D","additions":69,"deletions":101}],"state":"closed","open_date":"2020-06-12T14:43:04Z","update_date":"2020-06-12T15:18:11Z","discussion":[{"author":"gebner","date":"2020-06-12T14:55:20Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-12T15:18:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/765825182)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/765825155)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/765825192)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/765825131)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/765825102)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/765825054)"}],"review_discussion":[{"author":"gebner","file":"src/frontends/lean/widget.cpp","date":"2020-06-12T14:47:47Z","comment":"The global `g_fresh_handler_id` variable should also be removed."},{"author":"EdAyers","file":"src/frontends/lean/widget.cpp","date":"2020-06-12T14:49:16Z","comment":"oops"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"c926eaef720b5b6b233dc4c8399fdba8de9dc7f4","message":"fix(widget): reuse event handler ids to avoid invalid handler errors.","date":"2020-06-12T14:08:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"bfc806223d31d5fbfbeb8709b7197ceb7d11b140","message":"test(widget): update tests","date":"2020-06-12T14:16:25Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a2c878d9d437a51f567466314f392e5cd6955a59","message":"rm(widget): remove vestigial file","date":"2020-06-12T14:17:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"40e41a348c0bd593b4c7bf845a38077630c05e32","message":"fix(widget): components with the same hash should preserve id.","date":"2020-06-12T14:28:02Z"},{"author":"EdAyers","committer":"EdAyers","hash":"343eb9ddabb47771da361852717ce18c2551c5ec","message":"test(widget): fix tests","date":"2020-06-12T14:39:34Z"},{"author":"EdAyers","committer":"EdAyers","hash":"1bbe1437dfdc9fbc3d9ca2ef3332424900ad541f","message":"fix(widget): remove g_fresh_handler_id","date":"2020-06-12T14:48:55Z"}]},{"author":"gebner","number":323,"diff_summary":[{"file":"src/frontends/lean/dependencies.cpp","status":"M","additions":1,"deletions":2}],"state":"closed","open_date":"2020-06-12T10:16:58Z","update_date":"2020-06-12T10:41:48Z","discussion":[{"author":"gebner","date":"2020-06-12T10:17:29Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-12T10:41:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/765049653)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/765049530)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/765049611)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/765049586)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/765049624)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/765049644)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"3067775726475a11f787bf45b0ff185ac482b913","message":"fix(frontends/lean/dependencies): fix lean --deps","date":"2020-06-12T10:16:12Z"}]},{"author":"EdAyers","number":322,"diff_summary":[{"file":"library/init/meta/widget/basic.lean","status":"A","additions":696,"deletions":277},{"file":"library/init/meta/widget/components.lean","status":"A","additions":696,"deletions":277},{"file":"library/init/meta/widget/default.lean","status":"A","additions":696,"deletions":277},{"file":"library/init/meta/widget/interactive_expr.lean","status":"A","additions":696,"deletions":277},{"file":"library/init/meta/widget/tactic_component.lean","status":"A","additions":696,"deletions":277},{"file":"src/frontends/lean/info_manager.cpp","status":"A","additions":696,"deletions":277},{"file":"src/frontends/lean/info_manager.h","status":"A","additions":696,"deletions":277},{"file":"src/frontends/lean/interactive.cpp","status":"A","additions":696,"deletions":277},{"file":"src/frontends/lean/widget.cpp","status":"A","additions":696,"deletions":277},{"file":"src/frontends/lean/widget.h","status":"A","additions":696,"deletions":277},{"file":"src/library/vm/vm_option.h","status":"A","additions":696,"deletions":277},{"file":"tests/lean/Testing/Temporary/LastTest.log","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget1.input","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget1.input.expected.out","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget1.lean","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget2.input","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget2.input.expected.out","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget2.lean","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget3.input","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget3.input.expected.out","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget3.lean","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget_mouse.input","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget_mouse.input.expected.out","status":"A","additions":696,"deletions":277},{"file":"tests/lean/widget/widget_mouse.lean","status":"A","additions":696,"deletions":277}],"state":"closed","open_date":"2020-06-12T01:22:46Z","update_date":"2020-06-27T12:30:33Z","discussion":[{"author":"bryangingechen","date":"2020-06-12T02:05:01Z","comment":"> This is different to the mouse events in that\r\n\r\nDid the end of this sentence get dropped?"},{"author":"gebner","date":"2020-06-12T09:46:25Z","comment":"Also please change the PR title to fit the commit message guidelines."},{"author":"EdAyers","date":"2020-06-12T14:04:09Z","comment":"ok I've now realised there is a simpler fix to the disco selection problem, so I'm going to open that as a separate PR and then this PR can be exclusively for the refactor."},{"author":"gebner","date":"2020-06-23T16:01:21Z","comment":"@EdAyers What was the status of this PR?  Do we still want it?"},{"author":"EdAyers","date":"2020-06-23T16:06:55Z","comment":"Hi I think that this PR has got out of sync with other developments. Can we pause this PR for a while until I have more time to work on it? Now that the sticky selection issue has been solved through other means there is not much reason to refactor and potentially introduce more bugs."},{"author":"gebner","date":"2020-06-23T16:09:12Z","comment":"Sure, no hurry."}],"review_discussion":[{"author":"gebner","file":"src/frontends/lean/widget.cpp","date":"2020-06-12T09:09:39Z","comment":"Oh wow, so previously the handler id changed every time a component rerendered?  This explains the \"invalid handler\" errors."},{"author":"gebner","file":"src/frontends/lean/widget.cpp","date":"2020-06-12T09:13:52Z","comment":":+1: "},{"author":"gebner","file":"tests/lean/Testing/Temporary/CTestCostData.txt","date":"2020-06-12T09:14:34Z","comment":"Build artifact, please remove."},{"author":"gebner","file":"library/init/meta/widget/basic.lean","date":"2020-06-12T09:25:54Z","comment":"My knowledge of React is extremely limited.  These hooks here look more like higher-order components than React hooks.  Am I getting this roughly right?\r\n\r\nIt looks like most of these hooks could be implemented using a combination of `component.pure` and `component.with_state`.  I assume these are optimizations?"},{"author":"gebner","file":"src/library/vm/vm_task.cpp","date":"2020-06-12T09:28:46Z","comment":"This is from another PR, right?"},{"author":"gebner","file":"library/init/meta/widget/basic.lean","date":"2020-06-12T09:35:10Z","comment":"I do not like that there are two ways to observe the mouse-over state now, where one of them is so fragile that it shouldn't be used (or is this fixed now?).  If the `on_mouse_enter` and `on_mouse_leave` events are still not robust, then maybe we should remove them."},{"author":"gebner","file":"src/frontends/lean/widget.cpp","date":"2020-06-12T09:57:22Z","comment":"```suggestion\r\n        if (auto mh = dynamic_cast<with_mouse_capture_hook *>(h.get())) {\r\n```"},{"author":"EdAyers","file":"src/frontends/lean/widget.cpp","date":"2020-06-12T13:38:26Z","comment":"yeah that's right. Needed to change"},{"author":"EdAyers","file":"tests/lean/Testing/Temporary/CTestCostData.txt","date":"2020-06-12T13:38:49Z","comment":"oops"},{"author":"EdAyers","file":"src/library/vm/vm_task.cpp","date":"2020-06-12T13:41:23Z","comment":"oops yes"},{"author":"EdAyers","file":"library/init/meta/widget/basic.lean","date":"2020-06-12T13:42:02Z","comment":"Yeah so `with_state` and `with_mouse` would be the same spirit react hooks. But filter_map_action and map_props are better thought of as wrappers for the component. I think these could be implemented not as explicit constructors but at the end of the day I found this was simpler"},{"author":"EdAyers","file":"library/init/meta/widget/basic.lean","date":"2020-06-12T13:43:56Z","comment":"no they both have roles, since with_mouse can't emit actions. I think there are use cases for both."},{"author":"EdAyers","file":"library/init/meta/widget/basic.lean","date":"2020-06-12T13:49:14Z","comment":"The main point of this change is because it enables adding `with_task` and other gadgets later without having to break the API and to separate concerns a little in the implementation."},{"author":"EdAyers","file":"library/init/meta/widget/basic.lean","date":"2020-06-12T13:50:19Z","comment":"I'll have a go at refactoring interactive_expr to not use with_mouse. interactive_expr has to use on_mouse_enter and on_mouse_leave because hovering over a substring causes a change outside that dom element."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"a031b0c4607becdc977a15eba66cf74b6e66e0dc","message":"feat(delayed): add a sketch\n\nthis is a sketch of what is needed to get a new kind\nof component that accepts a task\nand will rerender once the task is built.\nIt doesn't compile but it gives sketches for the various methods that need to be implemented.","date":"2020-06-03T16:10:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7b8baf4ed9764cf3f8ea5ba29c6e198bd2b14168","message":"draft 2","date":"2020-06-03T18:41:42Z"},{"author":"EdAyers","committer":"EdAyers","hash":"008f688f766f83eb0d09608446e6e571ed80a704","message":"refactor(widget): hooks instead of components","date":"2020-06-07T16:20:25Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5762e992efc3091b93df32ff0db84ef6e2cc24d5","message":"draft","date":"2020-06-08T14:34:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ebc9a3ca178d6b434fd14026b6ba8e2f907204b9","message":"Merge branch 'master' into widget-task","date":"2020-06-09T12:26:19Z"},{"author":"EdAyers","committer":"EdAyers","hash":"87712b23fa218fb2501286ac900c3d8a6a83008f","message":"Remove widget_info.x","date":"2020-06-09T13:11:33Z"},{"author":"EdAyers","committer":"EdAyers","hash":"2c15694f68a4f9533f286ce308fe25a49d84ba08","message":"Draft","date":"2020-06-10T12:54:13Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6ba0e2a6c0952c9be5c306133041c813240d0ee9","message":"Merge branch 'master' into widget-task","date":"2020-06-11T00:13:14Z"},{"author":"EdAyers","committer":"EdAyers","hash":"07217d1e0bc86d0501cbf1c5f77b1344f59e3be0","message":"Merge branch 'master' into widget-mouse","date":"2020-06-11T01:26:37Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a1840632a53d5d60ea18f44b46d732b2be2d1ca3","message":"Draft","date":"2020-06-11T02:07:50Z"},{"author":"EdAyers","committer":"EdAyers","hash":"efdbcdaee214317fe7569fe96d4fca704ff7938b","message":"Reorganise\n\n- use 'hooks' for building components\n- refactor widget.cpp\n- add a `with_mouse` hook\n\nStill to do:\n- test!\n- change docs to talk about hooks.","date":"2020-06-11T05:00:33Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ad7fb510ff0fe87e5eedc732b8811b26e00ee3bf","message":"Fix new mouse model.","date":"2020-06-11T23:32:44Z"},{"author":"EdAyers","committer":"EdAyers","hash":"f538ba3cb3a23271d9f3cf5d5098fe186e4e4721","message":"fix(widget): Set handler_ids to not be set by a global counter.\n\nIf two widget events are fired together (as often happens for hovers).\nThen the event handler indices for the re-rendered component would update\nand make the second widget_update fail when it should have been processed.\nA workaround is to just set the index for each component.\nAlthough this could potentially introduce a bug later see comment for\n`render_event` in widget.cpp.","date":"2020-06-12T00:13:40Z"},{"author":"EdAyers","committer":"EdAyers","hash":"3cd47817c44e561bc06e839fb2f6c999cc8ed11d","message":"doc(widget): update documentation","date":"2020-06-12T00:49:59Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5677f606b9c9c90cd369f599fa5ffa535c18ccd8","message":"test(widget): fix tests","date":"2020-06-12T01:10:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"241a866ac6837716ec97573a7cd090a57c7ad735","message":"Merge branch 'master' into widget-mouse","date":"2020-06-12T01:12:29Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d15cda63b16322275625160a8278d91d04834e2a","message":"chore(widget): remove artifacts and other mistakes","date":"2020-06-12T13:46:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"dc7c0ec5a8680779dec3e1088e1fbdd8693fbb67","message":"refactor(interactive_expr): to not depend on with_mouse","date":"2020-06-12T14:00:38Z"}]},{"author":"semorrison","number":321,"diff_summary":[{"file":"library/init/data/int/basic.lean","status":"M","additions":4,"deletions":13},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":4,"deletions":13}],"state":"closed","open_date":"2020-06-12T00:35:49Z","update_date":"2020-06-17T07:47:38Z","discussion":[{"author":"semorrison","date":"2020-06-12T00:54:53Z","comment":"Another thing I'm tempted to do is rename all injectivity lemmas currently named `*_inj` to `*.inj`, to match the automatically generated ones.\r\n\r\nPros:\r\n* Be able to identify injectivity lemmas easily (e.g. have `library_search` ignore them!)\r\n\r\nCons:\r\n* Not be able to distinguish just from the name between automatically generated injectivity lemmas and hand-written ones."},{"author":"gebner","date":"2020-06-17T07:23:41Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-17T07:47:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/779451659)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/779451649)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/779451635)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/779451692)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/779451672)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/779451600)"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"36519d5e1c964b4fa5ca323866dae1d6898ab35f","message":"chore(data/int/basic): remove redundant lemmas","date":"2020-06-12T00:35:19Z"},{"author":"semorrison","committer":"semorrison","hash":"489dbce88238f45e2dfde1b80d5a7d3833acb23c","message":"fix","date":"2020-06-12T00:46:20Z"},{"author":"semorrison","committer":"semorrison","hash":"4ff40250828a871c36fe20c7bfa7da0d40179f36","message":"another","date":"2020-06-12T00:47:58Z"}]},{"author":"gebner","number":320,"diff_summary":[{"file":"src/api/name.cpp","status":"A","additions":77,"deletions":70},{"file":"src/checker/simple_pp.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/completion.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/info_manager.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/interactive.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/json.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/notation_cmd.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/parse_table.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/parser_config.cpp","status":"A","additions":77,"deletions":70},{"file":"src/frontends/lean/pp.cpp","status":"A","additions":77,"deletions":70},{"file":"src/library/inductive_compiler/nested.cpp","status":"A","additions":77,"deletions":70},{"file":"src/util/lean_path.cpp","status":"A","additions":77,"deletions":70},{"file":"src/util/name.cpp","status":"A","additions":77,"deletions":70},{"file":"src/util/name.h","status":"A","additions":77,"deletions":70},{"file":"src/util/sexpr/format.cpp","status":"A","additions":77,"deletions":70},{"file":"tests/lean/print_escape_name.lean","status":"A","additions":77,"deletions":70},{"file":"tests/lean/print_escape_name.lean.expected.out","status":"A","additions":77,"deletions":70}],"state":"closed","open_date":"2020-06-11T13:17:01Z","update_date":"2020-06-11T14:05:34Z","discussion":[{"author":"gebner","date":"2020-06-11T13:39:28Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-11T14:05:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/761901213)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/761901110)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/761901222)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/761901160)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/761901148)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/761901189)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"628512a9bed30ceac600073441ff0b8f9bf0a8aa","message":"fix(util/name): escape names by default\n\nFixes #114","date":"2020-06-11T13:17:31Z"},{"author":"gebner","committer":"gebner","hash":"33f66eac5fc71073ad941f80ded86d2faa163de8","message":"Fix name escaping in leanchecker.","date":"2020-06-11T13:26:22Z"},{"author":"gebner","committer":"gebner","hash":"2db5737561f46be1d500dce3807aa0f2140bf6d2","message":"Fix build.","date":"2020-06-11T13:27:38Z"}]},{"author":"gebner","number":319,"diff_summary":[{"file":"src/frontends/lean/decl_cmds.cpp","status":"A","additions":2,"deletions":2},{"file":"tests/lean/run/variables_typestar.lean","status":"A","additions":2,"deletions":2}],"state":"closed","open_date":"2020-06-11T12:36:46Z","update_date":"2020-06-11T12:59:38Z","discussion":[{"author":"gebner","date":"2020-06-11T12:36:56Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-11T12:59:36Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/761705450)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/761705415)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/761705426)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/761705463)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/761705486)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/761705495)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"4093fc1fbba15fc514cbd869e3e8300389a4b7df","message":"fix(frontends/lean/decl_cmds): `variables (A B : Type*)`\n\nFixes #29","date":"2020-06-11T12:34:27Z"}]},{"author":"gebner","number":318,"diff_summary":[{"file":"src/frontends/lean/builtin_cmds.cpp","status":"A","additions":4,"deletions":1},{"file":"tests/lean/exit_comment.lean","status":"A","additions":4,"deletions":1},{"file":"tests/lean/exit_comment.lean.expected.out","status":"A","additions":4,"deletions":1}],"state":"closed","open_date":"2020-06-11T09:41:04Z","update_date":"2020-06-11T10:11:32Z","discussion":[{"author":"gebner","date":"2020-06-11T09:41:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-11T10:11:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/761214943)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/761214934)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/761215042)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/761215028)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/761215004)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/761214984)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"e6e0bf7727755bc700062471df0e8cbc129ae519","message":"fix(frontends/lean/builtin_cmds): stop scanning after #exit\n\nFixes #309.","date":"2020-06-11T09:40:14Z"}]},{"author":"gebner","number":317,"diff_summary":[{"file":"src/library/scoped_ext.cpp","status":"A","additions":14,"deletions":2},{"file":"tests/lean/sec_ns.lean","status":"A","additions":14,"deletions":2},{"file":"tests/lean/sec_ns.lean.expected.out","status":"A","additions":14,"deletions":2}],"state":"closed","open_date":"2020-06-11T09:19:44Z","update_date":"2020-06-11T09:49:06Z","discussion":[{"author":"gebner","date":"2020-06-11T09:25:19Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-11T09:49:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/761145387)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/761145460)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/761145350)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/761145477)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/761145407)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/761145432)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"dad2cd59ff57fe95adbc612a83d62cfb32a06c8f","message":"feat(library/scoped_ext): allow namespaces inside sections\n\nSome corner-cases are probably still horribly broken.\n\nFixes #315.","date":"2020-06-11T09:17:47Z"}]},{"author":"gebner","number":314,"diff_summary":[{"file":"src/frontends/lean/info_manager.cpp","status":"M","additions":116,"deletions":42},{"file":"src/frontends/lean/info_manager.h","status":"M","additions":116,"deletions":42},{"file":"src/frontends/lean/interactive.cpp","status":"M","additions":116,"deletions":42},{"file":"src/frontends/lean/interactive.h","status":"M","additions":116,"deletions":42},{"file":"src/frontends/lean/widget.h","status":"M","additions":116,"deletions":42},{"file":"src/shell/server.cpp","status":"M","additions":116,"deletions":42},{"file":"src/shell/server.h","status":"M","additions":116,"deletions":42},{"file":"src/tests/shell/shell_test.expected.out","status":"M","additions":116,"deletions":42},{"file":"tests/lean/widget/widget1.input","status":"M","additions":116,"deletions":42},{"file":"tests/lean/widget/widget1.input.expected.out","status":"M","additions":116,"deletions":42},{"file":"tests/lean/widget/widget2.input","status":"M","additions":116,"deletions":42},{"file":"tests/lean/widget/widget2.input.expected.out","status":"M","additions":116,"deletions":42},{"file":"tests/lean/widget/widget3.input","status":"M","additions":116,"deletions":42},{"file":"tests/lean/widget/widget3.input.expected.out","status":"M","additions":116,"deletions":42}],"state":"closed","open_date":"2020-06-10T16:43:34Z","update_date":"2020-06-10T17:39:56Z","discussion":[{"author":"gebner","date":"2020-06-10T16:45:40Z","comment":"See discussion at https://github.com/leanprover/lean-client-js/pull/12\r\nCompanion PR: https://github.com/EdAyers/vscode-lean/pull/2\r\n\r\n@EdAyers Does this look reasonable to you?  Does the id of the root component instance change?"},{"author":"EdAyers","date":"2020-06-10T17:00:24Z","comment":"Yes I was just looking at that. The only case where a component id can change is when it is reconciled with an older component. However the root component is never reconciled so the id should be the same for the lifetime of the widget"},{"author":"gebner","date":"2020-06-10T17:10:55Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-10T17:39:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/758771174)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/758771121)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/758771224)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/758771109)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/758771164)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/758771199)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"0205d20c84a8b43f0d7494022893b0eef82102c2","message":"refactor(*): add get_widget server request","date":"2020-06-10T16:30:43Z"},{"author":"gebner","committer":"gebner","hash":"68d866a9e17197c8e3a2840ce7eb7a0d9595398e","message":"Fix tests.","date":"2020-06-10T16:54:45Z"},{"author":"gebner","committer":"gebner","hash":"3fad60dbd4a3c0a564b315a5ae6f4aec245a5a85","message":"Fix test?","date":"2020-06-10T17:08:49Z"}]},{"author":"gebner","number":313,"diff_summary":[{"file":"README.md","status":"M","additions":9,"deletions":2},{"file":"doc/changes.md","status":"M","additions":9,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":9,"deletions":2}],"state":"closed","open_date":"2020-06-10T14:59:45Z","update_date":"2020-06-10T15:48:04Z","discussion":[{"author":"gebner","date":"2020-06-10T15:24:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-10T15:48:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/758395729)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/758401510)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/758401589)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/758395764)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/758395658)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/758395674)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"33a2edf64e36b0aac0a4aa6052b95685b882b4c0","message":"chore(*): release version 3.16.1","date":"2020-06-10T14:59:25Z"}]},{"author":"gebner","number":312,"diff_summary":[{"file":"src/frontends/lean/info_manager.cpp","status":"M","additions":6,"deletions":2}],"state":"closed","open_date":"2020-06-10T14:50:52Z","update_date":"2020-06-10T15:22:09Z","discussion":[{"author":"gebner","date":"2020-06-10T14:57:54Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-10T15:22:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/758290581)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/758290636)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/758290565)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/758290624)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/758290675)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/758290700)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"171023b17ab29924fec25f538e86bd85402c4f8f","message":"fix(frontends/lean/info_manager): fix widget updates in `by ...`","date":"2020-06-10T14:50:09Z"},{"author":"gebner","committer":"gebner","hash":"c48c061810d420ce7e7d56171b8cc29b16f8061e","message":"More correct hack.","date":"2020-06-10T14:56:52Z"}]},{"author":"EdAyers","number":311,"diff_summary":[{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-06-10T13:33:46Z","update_date":"2020-06-10T14:22:20Z","discussion":[{"author":"gebner","date":"2020-06-10T13:58:45Z","comment":"LGTM, I hope this fixes the react warnings I see in the chrome console.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-10T14:22:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/758069336)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/758069269)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/758069305)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/758069315)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/758069358)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/758069371)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"341bbaf290888a87dc853630c1c590663b707596","message":"fix(tactic_view_component): add 'key' attribute\nto li items in goal list.\n\nNot strictly needed but prevents a warning in the webview.","date":"2020-06-10T13:28:28Z"},{"author":"EdAyers","committer":"EdAyers","hash":"1dbcd9857eb185d7154bcfa4225d0389a20fe17b","message":"Merge branch 'master' into fix-widget-keys","date":"2020-06-10T13:31:53Z"}]},{"author":"gebner","number":310,"diff_summary":[{"file":"README.md","status":"M","additions":26,"deletions":2},{"file":"doc/changes.md","status":"M","additions":26,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":26,"deletions":2}],"state":"closed","open_date":"2020-06-10T08:46:35Z","update_date":"2020-06-10T10:04:51Z","discussion":[{"author":"gebner","date":"2020-06-10T09:36:49Z","comment":"bors merge"},{"author":"bryangingechen","date":"2020-06-10T10:04:51Z","comment":"Looks like bors crashed for some reason:\r\n```elixir\r\n{{:badmatch, {:error, :post_comment}},\r\n [\r\n   {BorsNG.GitHub, :post_comment!, 3,\r\n    [file: 'lib/github/github.ex', line: 280]},\r\n   {Enum, :\"-each/2-lists^foreach/1-0-\", 2,\r\n    [file: 'lib/enum.ex', line: 769]},\r\n   {Enum, :each, 2, [file: 'lib/enum.ex', line: 769]},\r\n   {BorsNG.Worker.Batcher, :\"-complete_batch/3-fun-0-\", 4,\r\n    [file: 'lib/worker/batcher.ex', line: 717]},\r\n   {Enum, :\"-each/2-lists^foreach/1-0-\", 2,\r\n    [file: 'lib/enum.ex', line: 769]},\r\n   {Enum, :each, 2, [file: 'lib/enum.ex', line: 769]},\r\n   {BorsNG.Worker.Batcher, :complete_batch, 3,\r\n    [file: 'lib/worker/batcher.ex', line: 716]},\r\n   {BorsNG.Worker.Batcher, :maybe_complete_batch, 1,\r\n    [file: 'lib/worker/batcher.ex', line: 650]}\r\n ]}\r\n```"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f2e2e6d91d918e4dc3e0ee3b0163a9a1b8e42ada","message":"chore(*): release 3.16.0","date":"2020-06-10T08:46:09Z"}]},{"author":"gebner","number":308,"diff_summary":[{"file":"src/shell/server.cpp","status":"M","additions":1,"deletions":14},{"file":"src/shell/server.h","status":"M","additions":1,"deletions":14}],"state":"closed","open_date":"2020-06-09T12:13:10Z","update_date":"2020-06-09T16:57:50Z","discussion":[{"author":"gebner","date":"2020-06-09T16:36:30Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-09T16:57:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/754694828)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/754694922)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/754694900)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/754694793)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/754694780)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/754694862)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"e6dfa0df5dc26b92c5d4dc151ded20dd52bd0757","message":"fix(shell/server): do not cancel info queries, etc.","date":"2020-06-09T12:07:53Z"}]},{"author":"gebner","number":307,"diff_summary":[{"file":"src/frontends/lean/elaborator.cpp","status":"M","additions":17,"deletions":1},{"file":"src/frontends/lean/elaborator.h","status":"M","additions":17,"deletions":1}],"state":"closed","open_date":"2020-06-09T11:12:25Z","update_date":"2020-06-09T12:04:14Z","discussion":[{"author":"jcommelin","date":"2020-06-09T11:22:43Z","comment":"Does this mean that \"everything is a hole\" now?"},{"author":"gebner","date":"2020-06-09T11:41:16Z","comment":"Well, every underscore has all hole actions available.  It's a bit confusing, because `infer type`, etc., are completely useless.  But let's clean this up afterwards.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-09T12:04:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/753674416)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/753674443)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/753674436)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/753674461)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/753674456)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/753674478)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"6b2bc443fa0958ad5ade788e6084cfcc74f29400","message":"feat(frontends/lean/elaborator): add holes for underscores","date":"2020-06-09T11:11:58Z"}]},{"author":"gebner","number":306,"diff_summary":[{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":47,"deletions":40},{"file":"src/tests/shell/shell_test.expected.out","status":"M","additions":47,"deletions":40}],"state":"closed","open_date":"2020-06-09T10:45:41Z","update_date":"2020-06-09T12:28:55Z","discussion":[{"author":"EdAyers","date":"2020-06-09T10:50:33Z","comment":"lgtm, looks like a good way of refactoring the code"},{"author":"gebner","date":"2020-06-09T11:41:30Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-09T12:28:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/753741211)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/753741354)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/753741324)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/753741670)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/753741616)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/753741497)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"4a044a7f9f3e4ef655b8f553dde024d932e00b09","message":"refactor(library/init/meta/widget/interactive_expr): use separate widget for term goals","date":"2020-06-09T10:40:56Z"},{"author":"gebner","committer":"gebner","hash":"5da8ac2e29487fc4dbe500562386d758304cca1e","message":"Fix test.","date":"2020-06-09T11:14:23Z"}]},{"author":"gebner","number":305,"diff_summary":[{"file":"src/library/constants.cpp","status":"M","additions":0,"deletions":105},{"file":"src/library/constants.h","status":"M","additions":0,"deletions":105},{"file":"src/library/constants.txt","status":"M","additions":0,"deletions":105},{"file":"tests/lean/run/check_constants.lean","status":"M","additions":0,"deletions":105}],"state":"closed","open_date":"2020-06-09T10:06:01Z","update_date":"2020-06-09T11:11:59Z","discussion":[{"author":"gebner","date":"2020-06-09T10:48:36Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-09T11:11:58Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/753521629)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/753521655)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/753521645)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/753521679)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/753521669)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/753521640)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"3f7f6e79aedb4c0f5567ced06b1f494a2b115160","message":"chore(library/constants): remove unused constants","date":"2020-06-09T09:56:49Z"}]},{"author":"gebner","number":304,"diff_summary":[{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":56,"deletions":26},{"file":"src/frontends/lean/info_manager.cpp","status":"M","additions":56,"deletions":26},{"file":"src/frontends/lean/info_manager.h","status":"M","additions":56,"deletions":26},{"file":"src/frontends/lean/interactive.cpp","status":"M","additions":56,"deletions":26},{"file":"src/frontends/lean/widget.h","status":"M","additions":56,"deletions":26},{"file":"src/library/constants.cpp","status":"M","additions":56,"deletions":26},{"file":"src/library/constants.h","status":"M","additions":56,"deletions":26},{"file":"src/library/constants.txt","status":"M","additions":56,"deletions":26},{"file":"src/tests/shell/shell_test.expected.out","status":"M","additions":56,"deletions":26},{"file":"tests/lean/run/check_constants.lean","status":"M","additions":56,"deletions":26},{"file":"tests/lean/widget/widget1.input","status":"M","additions":56,"deletions":26},{"file":"tests/lean/widget/widget1.input.expected.out","status":"M","additions":56,"deletions":26},{"file":"tests/lean/widget/widget2.input.expected.out","status":"M","additions":56,"deletions":26},{"file":"tests/lean/widget/widget3.input.expected.out","status":"M","additions":56,"deletions":26},{"file":"tests/lean/widget/widget3.lean","status":"M","additions":56,"deletions":26}],"state":"closed","open_date":"2020-06-08T17:01:18Z","update_date":"2020-06-09T10:04:28Z","discussion":[{"author":"gebner","date":"2020-06-09T09:40:55Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-09T10:04:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/753319064)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/753319131)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/753319111)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/753319019)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/753319012)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/753318970)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"b7ad93bc1ecd83039042d3eb706fdf7e99af6aee","message":"refactor(shell/server): widget events contain position","date":"2020-06-08T15:17:51Z"},{"author":"gebner","committer":"gebner","hash":"86704d1467a3e6e30fb742867e73eaa797d0767d","message":"Fix semicolon-goals.","date":"2020-06-08T16:06:19Z"},{"author":"gebner","committer":"gebner","hash":"d127a4847d49b85685c059f1b4ebac7c9e313acd","message":"Fix tests.","date":"2020-06-08T16:30:23Z"},{"author":"gebner","committer":"gebner","hash":"17fb87eed403df6fccb8cbfa2183fa330aba3b34","message":"feat(frontends/lean/info_manager): show term-proof goals as widgets","date":"2020-06-08T16:58:30Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6396fc1df493637ec9db31ebbf6ab8febf005686","message":"test(widget): fix widget tests\n\nGoing to eventually need a more robust way of making sure the component_ids\nare robust to source changes.","date":"2020-06-08T21:34:29Z"},{"author":"gebner","committer":"gebner","hash":"95448e8f6f16aeccf4793721c0e0a69d5656312e","message":"Merge remote-tracking branch 'origin/master' into tactic_goal_widget","date":"2020-06-09T08:33:30Z"},{"author":"gebner","committer":"gebner","hash":"7c4f80a4c318b12edacc15d71c152a467242850b","message":"Fix test.","date":"2020-06-09T08:39:25Z"},{"author":"gebner","committer":"gebner","hash":"c9be00cc028d1b40fbe60c93a0dd55c39cd41f39","message":"Fix interactive tests.","date":"2020-06-09T09:29:35Z"}]},{"author":"gebner","number":303,"diff_summary":[{"file":"library/init/meta/widget/interactive_expr.lean","status":"M","additions":20,"deletions":18}],"state":"closed","open_date":"2020-06-08T16:20:38Z","update_date":"2020-06-08T16:48:24Z","discussion":[{"author":"gebner","date":"2020-06-08T16:24:07Z","comment":"bors merge"},{"author":"EdAyers","date":"2020-06-08T16:25:43Z","comment":"Looks good to me! I hope you found it roughly straightforward to understand and modify the code."},{"author":"bors[bot]","date":"2020-06-08T16:48:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/750714446)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/750714428)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/750714411)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/750714347)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/750714336)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/750714380)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"4d3a4d817c333fd3549e09184cc4af6759417a34","message":"chore(library/init/meta/widget/interactive_expr): make widget look more like current tactic state","date":"2020-06-08T16:14:27Z"}]},{"author":"gebner","number":301,"diff_summary":[{"file":"src/frontends/lean/info_manager.cpp","status":"M","additions":51,"deletions":80},{"file":"src/frontends/lean/info_manager.h","status":"M","additions":51,"deletions":80},{"file":"src/frontends/lean/interactive.cpp","status":"M","additions":51,"deletions":80},{"file":"src/frontends/lean/interactive.h","status":"M","additions":51,"deletions":80},{"file":"src/shell/server.cpp","status":"M","additions":51,"deletions":80},{"file":"src/shell/server.h","status":"M","additions":51,"deletions":80},{"file":"tests/lean/widget/widget1.input","status":"M","additions":51,"deletions":80},{"file":"tests/lean/widget/widget1.input.expected.out","status":"M","additions":51,"deletions":80},{"file":"tests/lean/widget/widget2.input","status":"M","additions":51,"deletions":80},{"file":"tests/lean/widget/widget2.input.expected.out","status":"M","additions":51,"deletions":80},{"file":"tests/lean/widget/widget3.input","status":"M","additions":51,"deletions":80},{"file":"tests/lean/widget/widget3.input.expected.out","status":"M","additions":51,"deletions":80}],"state":"closed","open_date":"2020-06-08T15:21:33Z","update_date":"2020-06-08T18:31:45Z","discussion":[{"author":"gebner","date":"2020-06-08T15:23:27Z","comment":"@EdAyers These are the changes required in the vscode extension: https://github.com/EdAyers/vscode-lean/pull/1"},{"author":"gebner","date":"2020-06-08T18:05:57Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-08T18:31:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/751027548)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/751027753)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/751027682)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/751027930)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/751027916)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/751027846)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"b7ad93bc1ecd83039042d3eb706fdf7e99af6aee","message":"refactor(shell/server): widget events contain position","date":"2020-06-08T15:17:51Z"},{"author":"gebner","committer":"gebner","hash":"86704d1467a3e6e30fb742867e73eaa797d0767d","message":"Fix semicolon-goals.","date":"2020-06-08T16:06:19Z"},{"author":"gebner","committer":"gebner","hash":"d127a4847d49b85685c059f1b4ebac7c9e313acd","message":"Fix tests.","date":"2020-06-08T16:30:23Z"}]},{"author":"gebner","number":300,"diff_summary":[{"file":"src/library/type_context.cpp","status":"A","additions":11,"deletions":5},{"file":"tests/lean/run/fact_pi.lean","status":"A","additions":11,"deletions":5}],"state":"closed","open_date":"2020-06-07T10:31:24Z","update_date":"2020-06-07T11:59:22Z","discussion":[{"author":"gebner","date":"2020-06-07T11:37:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-07T11:59:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/747006606)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/747006632)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/747006626)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/747006668)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/747006660)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/747006642)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"284dd599b07a9905b2d7d5bc9f08313d2b0c7275","message":"fix(library/type_context): use instance instead of semireducible","date":"2020-06-07T10:30:23Z"}]},{"author":"gebner","number":299,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":9,"deletions":6}],"state":"closed","open_date":"2020-06-06T16:47:54Z","update_date":"2020-06-06T17:17:37Z","discussion":[{"author":"gebner","date":"2020-06-06T16:56:04Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-06T17:17:36Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/745522630)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/745522674)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/745522665)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/745522657)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/745522651)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/745522617)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"9fc4c05acc9135aabe9e4fe04c4a67348a15f122","message":"chore(ci): update msys2 action","date":"2020-06-06T16:44:40Z"},{"author":"gebner","committer":"gebner","hash":"f9cde28361371e7d8d43fe4db213482a58509eca","message":"Use msys2 instead of msys2do","date":"2020-06-06T16:49:16Z"},{"author":"gebner","committer":"gebner","hash":"8e2558976c4dcdf02cfe633bab9fe156e323a3ba","message":"Run mkdir after setup-msys2","date":"2020-06-06T16:51:46Z"}]},{"author":"EdAyers","number":298,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-06-05T14:13:13Z","update_date":"2020-06-05T15:07:58Z","discussion":[{"author":"gebner","date":"2020-06-05T14:39:47Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-05T15:07:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/742625307)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/742625345)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/742625327)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/742625378)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/742625368)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/742625268)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"d06f2c2f5c79a85111eaefdaf79b3d259a106780","message":"refactor(tactic): tactic.tactic.run_simple -> tactic.run_simple","date":"2020-06-05T14:11:12Z"}]},{"author":"gebner","number":297,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"A","additions":34,"deletions":3},{"file":"src/library/pp_options.cpp","status":"A","additions":34,"deletions":3},{"file":"src/library/pp_options.h","status":"A","additions":34,"deletions":3},{"file":"tests/lean/defeq_simp1.lean.expected.out","status":"A","additions":34,"deletions":3},{"file":"tests/lean/pp_nodot.lean","status":"A","additions":34,"deletions":3},{"file":"tests/lean/pp_nodot.lean.expected.out","status":"A","additions":34,"deletions":3},{"file":"tests/lean/qexpr1.lean.expected.out","status":"A","additions":34,"deletions":3}],"state":"closed","open_date":"2020-06-03T15:02:22Z","update_date":"2020-06-03T18:09:41Z","discussion":[{"author":"gebner","date":"2020-06-03T17:41:01Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-03T18:09:40Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/735651631)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/735651668)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/735651653)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/735651705)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/735651693)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/735651726)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"3737860e008ecda33b451addacbad1f1ea711901","message":"feat(frontends/lean/pp): add @[pp_nodot]","date":"2020-06-03T15:00:30Z"},{"author":"gebner","committer":"gebner","hash":"8801c949813295f75163b7f229e225173a178e2d","message":"Add test.","date":"2020-06-03T15:01:28Z"},{"author":"gebner","committer":"gebner","hash":"6886f8be2625ab94aef2ea8459bea80104290e4f","message":"Fix tests.","date":"2020-06-03T15:17:19Z"}]},{"author":"semorrison","number":296,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":59,"deletions":10},{"file":"library/init/logic.lean","status":"M","additions":59,"deletions":10}],"state":"closed","open_date":"2020-06-03T06:31:31Z","update_date":"2020-10-11T20:16:17Z","discussion":[{"author":"semorrison","date":"2020-06-03T06:40:33Z","comment":"Note that this doc-string, which is in core, advises using a tactic provided in mathlib.\r\n\r\nI think this is a good idea, regardless :-)"},{"author":"bryangingechen","date":"2020-06-03T06:52:30Z","comment":"> Note that this doc-string, which is in core, advises using a tactic provided in mathlib.\r\n> \r\n> I think this is a good idea, regardless :-)\r\n\r\nI recommend mentioning mathlib and saying something about `import tactic` then. Also should we mention `rcases` as well?"},{"author":"jcommelin","date":"2020-06-03T07:18:59Z","comment":"Shall we also add `forall`, and `iff`?"},{"author":"gebner","date":"2020-06-11T13:47:05Z","comment":"Is this still wip?"},{"author":"gebner","date":"2020-06-11T13:47:10Z","comment":"bors d+"},{"author":"bors[bot]","date":"2020-06-11T13:47:11Z","comment":":v: semorrison can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"bryangingechen","date":"2020-06-11T13:59:14Z","comment":"I'm still uncomfortable with docstrings making reference to tactics that require imports from mathlib without mentioning mathlib or giving example import statements."},{"author":"jcommelin","date":"2020-06-11T14:17:51Z","comment":"Should we add these docstrings from mathlib instead?"},{"author":"bryangingechen","date":"2020-06-11T14:24:58Z","comment":"We could do that, then we would only need to say \"remember to `import tactic`\"."},{"author":"jcommelin","date":"2020-07-14T06:25:35Z","comment":"We should have done something about this before the workshop :facepalm: But it's never too late.\r\nStarted a discussion on Zulip: https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23296.20mention.20tactics.20in.20docstrings"},{"author":"bryangingechen","date":"2020-10-11T19:54:30Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-11T20:16:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1239111298)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1239111319)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1239111316)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1239111334)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1239111329)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1239111310)"}],"review_discussion":[{"author":"jcommelin","file":"library/init/core.lean","date":"2020-06-03T07:54:51Z","comment":"If we mention zulip, we should probably add a link."},{"author":"jcommelin","file":"library/init/core.lean","date":"2020-06-03T07:56:37Z","comment":"```suggestion\r\nso if `w : P` then `h w : false`.\r\n\r\nRelated tactic: `contrapose`.\r\n```"},{"author":"sgouezel","file":"library/init/core.lean","date":"2020-06-03T08:05:48Z","comment":"```suggestion\r\nIts purpose is to write down equalities between terms whose types are not definitionally equal.\r\n```"},{"author":"TwoFX","file":"library/init/logic.lean","date":"2020-06-03T08:33:49Z","comment":"This could perhaps be made even more clear by not using the variable `x` into two different ways:\r\n```suggestion\r\nTo prove a goal of the form `⊢ ∃ x, p x`, you can provide a witness `y` with the tactic `use y`.\r\nYou'll then be left with the goal `⊢ p y`.\r\n```"},{"author":"semorrison","file":"library/init/core.lean","date":"2020-06-03T08:39:32Z","comment":"(phew, I thought at first I introduced this, but it's been there all along!)"},{"author":"semorrison","file":"library/init/logic.lean","date":"2020-06-03T08:40:30Z","comment":"I'm confused. Isn't your `y` exactly the `x` in the goal?"},{"author":"TwoFX","file":"library/init/logic.lean","date":"2020-06-03T08:44:15Z","comment":"The idea is to differentiate between the variable bound by the existential quantifier and the witness."},{"author":"jcommelin","file":"library/init/logic.lean","date":"2020-06-03T08:45:48Z","comment":"I've had professional mathematicians be confused about this during demo talks."},{"author":"semorrison","file":"library/init/core.lean","date":"2020-06-10T22:53:13Z","comment":"```suggestion\r\nyour first instinct should be to ask (either yourself, or on [zulip](https://leanprover.zulipchat.com/))\r\n```"},{"author":"bryangingechen","file":"library/init/core.lean","date":"2020-10-11T19:30:27Z","comment":"```suggestion\r\nRelated mathlib tactic: `contrapose`.\r\n```"},{"author":"bryangingechen","file":"library/init/logic.lean","date":"2020-10-11T19:35:41Z","comment":"```suggestion\r\nTo prove a goal of the form `⊢ ∃ x, p x`, you can provide a witness `y` with the tactic `existsi y`.\r\nIf you are working in a project that depends on mathlib, then we recommend the `use` tactic\r\ninstead.\r\n```"},{"author":"bryangingechen","file":"library/init/logic.lean","date":"2020-10-11T19:37:23Z","comment":"```suggestion\r\nuse the tactic `cases h with x hx`. See also the mathlib tactics `obtain` and `rcases`.\r\n```"},{"author":"bryangingechen","file":"library/init/core.lean","date":"2020-10-11T19:39:16Z","comment":"```suggestion\r\nto obtain two new hypotheses `hP : P` and `hQ : Q`. See also the `obtain` or `rcases` tactics in\r\nmathlib.\r\n```"}],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"1b50351bce4ff48de7f62fea4383a17a0ec27c2e","message":"chore(logic): doc-string for Exists","date":"2020-06-03T06:29:59Z"},{"author":"semorrison","committer":"semorrison","hash":"4e0d68687718779632f1527e569f201ca48e2623","message":"doc-strings for and, or, not","date":"2020-06-03T06:59:01Z"},{"author":"semorrison","committer":"semorrison","hash":"c1d58311700e1b14b8b35057adeb3e359debbb40","message":"potential doc-string for heq","date":"2020-06-03T07:24:23Z"},{"author":"semorrison","committer":"web-flow","hash":"be92db1b341c26ceafb808729c038f67c3d799be","message":"Update library/init/core.lean\n\nCo-authored-by: Johan Commelin <johan@commelin.net>","date":"2020-06-03T08:38:54Z"},{"author":"semorrison","committer":"web-flow","hash":"0313ccdd733251620825f94adcedc80deaf9c8f5","message":"Update library/init/core.lean\n\nCo-authored-by: sgouezel <sebastien.gouezel@univ-rennes1.fr>","date":"2020-06-03T08:39:37Z"},{"author":"semorrison","committer":"web-flow","hash":"3e00cd542312027cbbd0f9bb34fd5aa1138fc4d4","message":"Update library/init/logic.lean\n\nCo-authored-by: Markus Himmel <markus@himmel-villmar.de>","date":"2020-06-10T22:52:29Z"},{"author":"semorrison","committer":"web-flow","hash":"15449b19585db16949b2930ed5fe115925e43be4","message":"Update library/init/core.lean","date":"2020-06-10T22:53:17Z"},{"author":"bryangingechen","committer":"web-flow","hash":"f4ecc547e7b5c7a0f36ac12f43245cbf9f71b132","message":"Apply suggestions from code review","date":"2020-10-11T19:49:34Z"},{"author":"bryangingechen","committer":"web-flow","hash":"de00378b7f6e7088035b07b593a4da28197c20a2","message":"Merge branch 'master' into logic-docs","date":"2020-10-11T19:53:48Z"}]},{"author":"EdAyers","number":295,"diff_summary":[{"file":"library/init/meta/smt/congruence_closure.lean","status":"M","additions":28,"deletions":1}],"state":"closed","open_date":"2020-05-31T19:29:30Z","update_date":"2020-06-02T08:09:44Z","discussion":[{"author":"gebner","date":"2020-06-02T07:41:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T08:09:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730030884)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730030855)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730030839)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730030801)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730030794)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730030870)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"d7abbdc63f6961e00d7f7ab382032dd8b879712d","message":"doc(cc): add docstrings for cc_state primitives","date":"2020-05-31T19:25:53Z"}]},{"author":"EdAyers","number":294,"diff_summary":[{"file":"library/init/meta/expr.lean","status":"M","additions":71,"deletions":8},{"file":"library/init/meta/local_context.lean","status":"M","additions":71,"deletions":8},{"file":"src/library/tactic/vm_local_context.cpp","status":"M","additions":71,"deletions":8},{"file":"src/library/vm/vm_expr.cpp","status":"M","additions":71,"deletions":8},{"file":"tests/lean/type_context.lean","status":"M","additions":71,"deletions":8},{"file":"tests/lean/type_context.lean.expected.out","status":"M","additions":71,"deletions":8}],"state":"closed","open_date":"2020-05-31T10:41:25Z","update_date":"2020-06-02T10:08:25Z","discussion":[{"author":"gebner","date":"2020-06-02T07:44:11Z","comment":"Looks ready to merge to me, why is this still a draft?"},{"author":"EdAyers","date":"2020-06-02T09:24:17Z","comment":"I had some more stuff to add. But I guess this can be merged as is"},{"author":"gebner","date":"2020-06-02T09:35:10Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T10:08:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730360907)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730360859)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730360845)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730360962)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730360931)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730360888)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"2c63d426fbbfa63fe1e48523f76a0acd47afd1bc","message":"feat(expr): add expr.get_delayed_abstraction_locals\n\nUsed to get the locals that are present on a delayed abstraction macro.","date":"2020-05-29T16:36:15Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0b4b21ac7d14551c0e5ba20486440941bcc9f22e","message":"feat(local_context): add local_context.empty\n\nSo that one can define empty local contexts.","date":"2020-05-29T17:10:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c89a46b9f2e1d17740cd9dbc0b3b9e8faee6b8fe","message":"feat(local_context): add decidable_eq local_context","date":"2020-05-29T17:43:57Z"},{"author":"EdAyers","committer":"EdAyers","hash":"e1c9ae22e0f74faf93e9146af902127943a3883d","message":"feat(local_context): add helper instances","date":"2020-05-29T17:51:49Z"},{"author":"EdAyers","committer":"EdAyers","hash":"26dfefef722fc1a7bc01159884001cc8611bf1f6","message":"style(local_context):\n\nAdd spaces between decls.\nAdd local_decl.to_expr\nAdd has_mem expr local_context","date":"2020-05-29T18:20:50Z"},{"author":"EdAyers","committer":"EdAyers","hash":"e082902f93894a66e4d0f5fb8d612832456a0c17","message":"style(local_context): remove names from instances","date":"2020-05-30T00:32:29Z"}]},{"author":"giordano","number":293,"diff_summary":[{"file":"src/CMakeLists.txt","status":"M","additions":0,"deletions":6}],"state":"closed","open_date":"2020-05-31T00:58:30Z","update_date":"2020-06-02T08:41:10Z","discussion":[{"author":"gebner","date":"2020-06-02T07:42:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T08:41:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730110191)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730110152)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730110142)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730110213)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730110209)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730110239)"}],"review_discussion":[],"tags":[],"commits":[{"author":"giordano","committer":"giordano","hash":"79bc6329c315f6219676a40bf917905e310a93e1","message":"Remove useless setting of `_GLIBCXX_USE_CXX11_ABI` with MinGW\n\nAs explained in [this\ncomment](https://github.com/leanprover/lean/issues/930#issuecomment-263053475),\nforcing the value `_GLIBCXX_USE_CXX11_ABI` doesn't make any sense for what it\nwas originally introduced, it's useless: with this patch I can compile with\nMinGW for both C++ string ABIs without problems.","date":"2020-05-31T00:44:25Z"}]},{"author":"giordano","number":292,"diff_summary":[{"file":"src/CMakeLists.txt","status":"M","additions":2,"deletions":2}],"state":"closed","open_date":"2020-05-31T00:58:27Z","update_date":"2020-06-02T09:08:49Z","discussion":[{"author":"gebner","date":"2020-06-02T07:43:36Z","comment":"bors merge"},{"author":"gebner","date":"2020-06-02T07:47:10Z","comment":"bors r-"},{"author":"bors[bot]","date":"2020-06-02T07:47:12Z","comment":"Canceled."},{"author":"gebner","date":"2020-06-02T07:47:15Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-06-02T08:20:20Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730043512)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730043534)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730043501)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730043547)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730043523)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730043484)"},{"author":"gebner","date":"2020-06-02T08:24:09Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T09:08:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730200609)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730200590)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730200579)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730200545)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730200536)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730200560)"}],"review_discussion":[],"tags":[],"commits":[{"author":"giordano","committer":"giordano","hash":"28795e6c1f723666b71093db5b092d7cd876751c","message":"Use `BUILD_TESTING` to enable or disable building tests\n\n`BUILD_TESTING` is a variable automatically defined by\n[`CTest`](https://cmake.org/cmake/help/v3.17/module/CTest.html) whose value can\nbe used to enable or disable the tests from the command line.","date":"2020-05-31T00:48:48Z"}]},{"author":"giordano","number":291,"diff_summary":[{"file":"src/library/vm/vm_io.cpp","status":"M","additions":17,"deletions":17}],"state":"closed","open_date":"2020-05-31T00:58:17Z","update_date":"2020-06-03T09:46:40Z","discussion":[{"author":"bryangingechen","date":"2020-05-31T01:04:33Z","comment":"@jlpaca has been building Lean on FreeBSD, but dealing with some issues in [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mystery.20mathlib.20errors.20in.20.60data.2Flist.60)."},{"author":"gebner","date":"2020-06-03T08:59:51Z","comment":"@jlpaca Does this PR work for you?\r\n\r\n@giordano Do the tests succeed on FreeBSD?"},{"author":"giordano","date":"2020-06-03T09:19:49Z","comment":"> @giordano Do the tests succeed on FreeBSD?\r\n\r\nI don't have a FreeBSD system :slightly_smiling_face:   I only cross-compiled with [BinaryBuilder](https://binarybuilder.org/).\r\n\r\nAnyway I think the guards in the code currently use the wrong logic, as I explained above.  It's Windows that is different from most of the rest of the operating systems out there, not the other way around.  In all programs I know, you first check \"if Windows\" and then deal with the rest."},{"author":"gebner","date":"2020-06-03T09:23:42Z","comment":"Ok yes, the change seems reasonable enough.\r\nbors merge\r\n\r\nDid the tests succeed on BinaryBuilder?"},{"author":"giordano","date":"2020-06-03T09:26:21Z","comment":"> Did the tests succeed on BinaryBuilder?\r\n\r\nIt's a cross-compilation environment, we can't run programs for foreign platform (not yet at least) :disappointed: "},{"author":"bors[bot]","date":"2020-06-03T09:46:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/734073398)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/734073345)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/734073340)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/734073308)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/734073294)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/734073384)"}],"review_discussion":[],"tags":[],"commits":[{"author":"giordano","committer":"giordano","hash":"ce3f36d6f1f9f24880f3b4eef13b2cae76826ef4","message":"Fix guards  to make it possible to build for BSD systems\n\nThese guards currently assumes that if a system isn't GNU/Linux, macOS or\nEmscripten than it's necessarily Windows, which is of course false as it misses\na lot of other platforms.  This patch allows building for FreeBSD (and likely\nfor other BSD systems) by adopting the opposite logic: it distinguish between\nWindows and non-Windows platforms, without having to list all of them\nexplicitly.","date":"2020-05-31T00:57:48Z"}]},{"author":"giordano","number":290,"diff_summary":[{"file":"src/library/process.cpp","status":"M","additions":3,"deletions":3},{"file":"src/library/vm/vm_io.cpp","status":"M","additions":3,"deletions":3}],"state":"closed","open_date":"2020-05-31T00:57:34Z","update_date":"2020-06-02T08:41:14Z","discussion":[{"author":"gebner","date":"2020-06-02T07:44:43Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T08:41:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730110191)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730110152)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730110142)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730110213)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730110209)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730110239)"}],"review_discussion":[],"tags":[],"commits":[{"author":"giordano","committer":"giordano","hash":"08aa7b1381d64c7ffbe9e4416dad6ddfef27a17f","message":"Fix case of header files for buildin on case-sensitive filesystems\n\nUsually Windows uses case-insensitive file systems, instead GNU/Linux systems\nusually employs case-sensitive file systems, and MinGW consistenly adopts\nlowercase filenames for the headers.","date":"2020-05-31T00:40:47Z"}]},{"author":"bryangingechen","number":288,"diff_summary":[{"file":"leanpkg/leanpkg/toml.lean","status":"D","additions":260,"deletions":356},{"file":"library/init/data/nat/gcd.lean","status":"D","additions":260,"deletions":356},{"file":"library/init/data/nat/lemmas.lean","status":"D","additions":260,"deletions":356},{"file":"library/init/data/string/ops.lean","status":"D","additions":260,"deletions":356},{"file":"library/init/meta/well_founded_tactics.lean","status":"D","additions":260,"deletions":356},{"file":"library/system/random.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/1669.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/1917.lean.expected.out","status":"D","additions":260,"deletions":356},{"file":"tests/lean/add_defn_eqns.lean.expected.out","status":"D","additions":260,"deletions":356},{"file":"tests/lean/cases_ginductive.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/div_eqn.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/eqn_hole.lean.expected.out","status":"D","additions":260,"deletions":356},{"file":"tests/lean/nested_match.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/nested_match.lean.expected.out","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/1663.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/ack.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/conv_tac1.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/div2.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/even_odd.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/even_odd2.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/meta_aux_defs.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/mutual_parameter.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/mutual_sizeof.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/psum_wf_rec.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/term_app.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/term_app2.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/run/tree_map.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/well_founded_tactics.lean","status":"D","additions":260,"deletions":356},{"file":"tests/lean/well_founded_tactics.lean.expected.out","status":"D","additions":260,"deletions":356}],"state":"open","open_date":"2020-05-30T18:07:53Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"gebner","date":"2020-05-30T18:31:40Z","comment":"It's too late now, but it's ok to make `leanpkg` meta.  There's nothing we gain from it being non-meta."},{"author":"digama0","date":"2021-01-10T03:40:57Z","comment":"I think we need a means to set the well founded tactic (locally or globally), perhaps using a user attribute. Currently, I think `well_founded_tactics.default` is magic, being used directly as the default well founded generator if nothing is specified. Since both `dec_tac` and `rel_tac` are tactics, we could use a `def_replacer` setup so that the default is editable, but this would require the default tactic here to evaluate some user attribute (which we can set to run `assumption` in core).\r\n\r\nAlternatively, we can have the magic constant be a `tactic well_founded_tactics`, that is, we have a tactic that returns a `well_founded_tactics` that is the default if none is specified (the components of which are themselves tactics which might do various things). This can be similarly set up as a `def_replacer` defaulting to `well_founded_tactics.default`.\r\n\r\nIf we don't do something like this, it seems that tests like `mutual_sizeof.lean` will be significantly degraded since we will have to specify `using_well_founded` all the time, even if we move the test to mathlib where we can use much more sophisticated automatic dec tacs like `linarith`."},{"author":"bryangingechen","date":"2021-01-10T03:55:57Z","comment":"Removing the need to add `using_well_founded` everywhere would be great. `def_replacer` is in mathlib though, so what should we do here? Is there a set up somewhere I can refer to / copy? (Feel free to push to this branch if you want.)"},{"author":"digama0","date":"2021-01-12T04:07:59Z","comment":"`def_replacer` is in mathlib but the techniques that make it work are not. The basic idea is to use a user attribute whose cache is a tactic, the `orelse` of all registered tactics (or with other fold operation depending on the application), and when you need to call the tactic on input x, you look up the current value of the attribute, `eval_expr` it as a tactic of the appropriate type and call it with x."}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"0ef8be64bdf401b98d6794f93a0a83d3042703d2","message":"snapshot","date":"2020-05-24T14:06:01Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"11b587c1c6d16a2e395e6d7b9b4182141763d14f","message":"leanpkg","date":"2020-05-24T14:06:22Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"b070ebd68b0723b11cffe2bae162d87e3aa6858e","message":"well-founded proofs for leanpkg","date":"2020-05-24T15:03:56Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"0afcbcd1920682a2a773bd4727212b8c59d44f00","message":"comment tweaks","date":"2020-05-26T04:54:30Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"8512b5c9569bee4cb97582cfbb171eaa6d7e6f04","message":"remove set_option from leanpkg","date":"2020-05-26T05:02:03Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"9d8cd17cf41772bfdef85203426d58489fd0ea01","message":"snapshot","date":"2020-08-26T20:42:27Z"},{"author":"gebner","committer":"gebner","hash":"89892a098bf6bbeeba6c4a0b909731aad609fc38","message":"Merge branch 'master' into remove_dec_tac","date":"2020-10-27T10:36:11Z"},{"author":"bryangingechen","committer":"web-flow","hash":"602542b6278a4a764f2d3e24c51ef4eb679b6464","message":"Merge branch 'master' into remove_dec_tac","date":"2021-01-07T20:26:33Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"578ecabd17dd66cf103e3de2f743544d9fa70a58","message":"Merge remote-tracking branch 'community/remove_dec_tac' into remove_dec_tac","date":"2021-01-08T23:14:05Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"dcd8a1022ee68baac59f73d7b22f0c58224ba63d","message":"fix / remove tests","date":"2021-01-10T03:22:41Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"1a4208237d8bc0c79832136299dd1dcd9f5d576d","message":"remove last 4 broken tests","date":"2021-01-12T01:18:49Z"}]},{"author":"rwbarton","number":287,"diff_summary":[{"file":"library/init/core.lean","status":"A","additions":12,"deletions":1},{"file":"tests/lean/run/neg_precedence.lean","status":"A","additions":12,"deletions":1}],"state":"closed","open_date":"2020-05-29T12:03:11Z","update_date":"2020-06-02T08:41:16Z","discussion":[{"author":"gebner","date":"2020-06-02T07:45:53Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T08:41:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730110191)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730110152)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730110142)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730110213)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730110209)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730110239)"}],"review_discussion":[],"tags":[],"commits":[{"author":"rwbarton","committer":"rwbarton","hash":"cf48f9ca944b18ed8a1470603797417827280341","message":"fix(init/core): lower precedence of unary `-`\n\nThis commit moves the precedence of unary `-` below that of `^`\nso that `-a^n` parses as `-(a^n)` and not (as formerly) `(-a)^n`.\n\nIt would be reasonable to move `-` below `*` as well (so that\n`-a*b` parses as `-(a*b)`) but this is surprisingly disruptive\nto mathlib, because `∩` and `⊓` have the same precedence as `*`\nand `-` is also used for set complement. So, at least for now,\nwe leave the relative precedence of `-` and `*` unchanged.","date":"2020-05-29T11:56:41Z"}]},{"author":"gebner","number":286,"diff_summary":[{"file":"README.md","status":"M","additions":29,"deletions":13},{"file":"doc/changes.md","status":"M","additions":29,"deletions":13},{"file":"src/CMakeLists.txt","status":"M","additions":29,"deletions":13}],"state":"closed","open_date":"2020-05-28T16:56:31Z","update_date":"2020-05-28T18:14:39Z","discussion":[{"author":"gebner","date":"2020-05-28T17:47:44Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-28T18:14:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/717761323)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/717763767)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/717763754)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/717763702)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/717763689)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/717761271)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"d22bf3ead68feea60f2529020dba1dd677e80478","message":"chore(*): release 3.15.0","date":"2020-05-28T16:54:20Z"}]},{"author":"EdAyers","number":284,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"A","additions":54,"deletions":7},{"file":"tests/lean/add_defn_eqns.lean.expected.out","status":"A","additions":54,"deletions":7},{"file":"tests/lean/eformat.lean.expected.out","status":"A","additions":54,"deletions":7},{"file":"tests/lean/pp_space_check.lean","status":"A","additions":54,"deletions":7},{"file":"tests/lean/pp_space_check.lean.expected.out","status":"A","additions":54,"deletions":7},{"file":"tests/lean/t10.lean","status":"A","additions":54,"deletions":7},{"file":"tests/lean/test_single.sh","status":"A","additions":54,"deletions":7}],"state":"closed","open_date":"2020-05-27T18:37:25Z","update_date":"2020-05-27T20:15:38Z","discussion":[{"author":"gebner","date":"2020-05-27T19:47:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-27T20:15:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/714408119)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/714408049)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/714408031)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/714408089)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/714408076)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/714408102)"}],"review_discussion":[{"author":"gebner","file":"src/frontends/lean/pp.cpp","date":"2020-05-27T19:16:35Z","comment":"It's not surprising that this has no effect.  The `mk_pair` function takes two `const &` references, and hence won't modify them.  What happens instead is that a temporary `pair` object is created with *copies* of `b` and `last`, and the `first` and `second` fields of this temporary object are assigned."},{"author":"gebner","file":"tests/lean/test_single.sh","date":"2020-05-27T19:18:14Z","comment":"```suggestion\r\n    if $DIFF -u --strip-trailing-cr -I \"executing external script\" \"$f.expected.out\" \"$f.produced.out\"; then\r\n```"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"f3fa9c16d957497beb505414a70bc4e5bd1296db","message":"fix(pp): fix issues with spacing\n\nSomething really wierd was happening in `mk_pair(b,last)`\nso that `b` was always returned as false.","date":"2020-05-27T18:36:03Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5320d01b9ee7d6251ac446b404aaf2787331b5a6","message":"fix(pp): turn back on --ignore-all-space\n\nThe windows build is failing otherwise.","date":"2020-05-27T19:16:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7668ab5dd6be958c2fd9875e12995e71a10b9bb3","message":"fix(pp): change --ignore-all-space to --skip-trailing-cr","date":"2020-05-27T19:20:11Z"}]},{"author":"EdAyers","number":283,"diff_summary":[{"file":"src/library/tactic/vm_monitor.cpp","status":"M","additions":23,"deletions":25},{"file":"src/library/vm/vm.cpp","status":"M","additions":23,"deletions":25},{"file":"src/library/vm/vm.h","status":"M","additions":23,"deletions":25}],"state":"closed","open_date":"2020-05-27T16:54:52Z","update_date":"2020-05-27T17:41:36Z","discussion":[{"author":"gebner","date":"2020-05-27T17:16:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-27T17:41:35Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/713971069)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/713971039)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/713971028)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/713971115)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/713971106)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/713971148)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"9f99152c785ef622f3e41b5852be135b7ce61a9c","message":"fix(vm_override): indexes are not preserved across instances\n\nWhen VM_override was serialising a declaration, it was storing the\nvm decl index of the override.\nHowever there is no guarantee that the same decl will be given the\nsame index in different sessions, since indexes are not stored in the\nolean.\nTherefore when vm_code_modification is run it must serialise the\nname of the override decl instead of the index.","date":"2020-05-27T16:53:23Z"}]},{"author":"gebner","number":282,"diff_summary":[{"file":".gitignore","status":"A","additions":142,"deletions":148},{"file":"library/init/data/list/instances.lean","status":"A","additions":142,"deletions":148},{"file":"library/init/data/set.lean","status":"A","additions":142,"deletions":148},{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":142,"deletions":148},{"file":"src/frontends/lean/elaborator.h","status":"A","additions":142,"deletions":148},{"file":"tests/lean/123-1.lean.expected.out","status":"A","additions":142,"deletions":148},{"file":"tests/lean/123-2.lean.expected.out","status":"A","additions":142,"deletions":148},{"file":"tests/lean/1859.lean.expected.out","status":"A","additions":142,"deletions":148},{"file":"tests/lean/197c.lean","status":"A","additions":142,"deletions":148},{"file":"tests/lean/197c.lean.expected.out","status":"A","additions":142,"deletions":148},{"file":"tests/lean/bad_error4.lean.expected.out","status":"A","additions":142,"deletions":148},{"file":"tests/lean/cyclic_default_fields.lean.expected.out","status":"A","additions":142,"deletions":148},{"file":"tests/lean/field_type_mismatch.lean.expected.out","status":"A","additions":142,"deletions":148},{"file":"tests/lean/inaccessible.lean.expected.out","status":"A","additions":142,"deletions":148},{"file":"tests/lean/inaccessible2.lean.expected.out","status":"A","additions":142,"deletions":148}],"state":"closed","open_date":"2020-05-27T15:12:36Z","update_date":"2020-05-28T15:34:48Z","discussion":[{"author":"gebner","date":"2020-05-27T18:01:28Z","comment":"I tried building mathlib and found something.  This change has a somewhat unintended side-effect.\r\n\r\nFor example, the `le_refl` goal now looks like this:\r\n```lean\r\n∀ a : α, @has_le.le (has_le.mk α (partial_order.le α)) a a\r\n```\r\n\r\nUnfortunately you can't `rw le_refl` here because the unifier fails to unify the two (at reducible transparency).  This is because projections of constructors are reduced somewhat eagerly and then you have a useless `partial_order.le`."},{"author":"kckennylau","date":"2020-05-28T07:11:58Z","comment":"Does this fix #214?"},{"author":"gebner","date":"2020-05-28T08:19:39Z","comment":"@kckennylau This would indeed fix #214 (modulo the `has_mul.mk` issue I mentioned in the other comment)."},{"author":"gebner","date":"2020-05-28T13:58:02Z","comment":"So, I've ported mathlib and the diff isn't too large: https://github.com/leanprover-community/mathlib/compare/si\r\n\r\nThe workaround for the `has_mul.mk` issue above is as follows.  Consider for example `euclidean_domain.integral_domain`.  This would break:\r\n```lean\r\n@[priority 70] -- see Note [lower instance priority]\r\ninstance (α : Type*) [e : euclidean_domain α] : integral_domain α :=\r\nby haveI := classical.dec_eq α; exact\r\n{ eq_zero_or_eq_zero_of_mul_eq_zero :=\r\n    λ a b (h : a * b = 0), or_iff_not_and_not.2 $ λ h0 : a ≠ 0 ∧ b ≠ 0,\r\n      h0.1 $ by rw [← mul_div_cancel a h0.2, h, zero_div],\r\n  ..e }\r\n```\r\n\r\nThe reason is that the `..e` inserts a reference to `euclidean_domain.add`, which should never be referenced.  The workaround is very easy: just specify `mul := (*)` (etc.) manually:\r\n```lean\r\n@[priority 70] -- see Note [lower instance priority]\r\ninstance (α : Type*) [e : euclidean_domain α] : integral_domain α :=\r\nby haveI := classical.dec_eq α; exact\r\n{ eq_zero_or_eq_zero_of_mul_eq_zero := by exact\r\n    λ a b h, (or_iff_not_and_not.2 $ λ h0,\r\n      h0.1 $ by rw [← mul_div_cancel a h0.2, h, zero_div]),\r\n  zero := 0, add := (+), mul := (*), ..e }\r\n```"},{"author":"gebner","date":"2020-05-28T15:07:05Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-28T15:34:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/717252488)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/717252469)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/717252461)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/717252518)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/717252508)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/717252533)"}],"review_discussion":[{"author":"gebner","file":"library/init/data/list/instances.lean","date":"2020-05-27T15:13:18Z","comment":"The default value is less reduced now."},{"author":"gebner","file":"library/init/data/set.lean","date":"2020-05-27T15:13:49Z","comment":"Same issue as in `list.monad`, and I was in a casual golfing mood."},{"author":"gebner","file":"tests/lean/t10.lean.expected.out","date":"2020-05-27T15:14:32Z","comment":"@EdAyers Did you change something here?  I'm surprised the tests don't fail on master."},{"author":"EdAyers","file":"tests/lean/t10.lean.expected.out","date":"2020-05-27T15:19:06Z","comment":"I haven't changed this test. How curious."},{"author":"EdAyers","file":"tests/lean/t10.lean.expected.out","date":"2020-05-27T15:20:56Z","comment":"Don't we expect to have the spaces?"},{"author":"gebner","file":"tests/lean/t10.lean.expected.out","date":"2020-05-27T15:22:16Z","comment":"Yes, I would definitely expect spaces to be here."},{"author":"gebner","file":"tests/lean/t10.lean.expected.out","date":"2020-05-27T15:22:36Z","comment":"And I'm aware you didn't change the test.  But you did change the pretty-printer."}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"6c84efddd7768fa8bdb56650227af789d0610911","message":"fix(frontends/lean/elaborator): elaborate structure instances left-to-right","date":"2020-05-27T15:10:13Z"},{"author":"gebner","committer":"gebner","hash":"f9b7307c3743063ae95c4acd77ed2189c5d3b3c9","message":"Add test.","date":"2020-05-27T15:11:57Z"},{"author":"gebner","committer":"gebner","hash":"3825e4186985fd6eadc97b5422c06fe0f597e80d","message":"Style. :-P","date":"2020-05-27T15:48:34Z"},{"author":"gebner","committer":"gebner","hash":"20a5f948bdcbe55128041bc3e1b7bdb43d3f27a8","message":"One more test.","date":"2020-05-28T11:46:37Z"},{"author":"gebner","committer":"gebner","hash":"b9185515f1c16423603a2d6d25f3d12098af78fe","message":"Remove field mvars on backtracking.","date":"2020-05-28T11:47:14Z"},{"author":"gebner","committer":"gebner","hash":"3c9e31713dc9726741da96c6a634f9df49e6e0d7","message":"Revert \"One more test.\"\n\nThis reverts commit 20a5f948bdcbe55128041bc3e1b7bdb43d3f27a8.","date":"2020-05-28T13:06:09Z"},{"author":"gebner","committer":"gebner","hash":"2291974f6b22ad4276b0d9838dbefa4797d52bb4","message":"Merge remote-tracking branch 'origin/master' into structinst","date":"2020-05-28T15:02:03Z"},{"author":"gebner","committer":"gebner","hash":"32a66521b4c4d61674f43b02658e49233a25f7cc","message":"Fix tests.","date":"2020-05-28T15:05:42Z"}]},{"author":"jalex-stark","number":281,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"A","additions":41,"deletions":10},{"file":"library/init/meta/tactic.lean","status":"A","additions":41,"deletions":10},{"file":"tests/lean/apply_tac.lean","status":"A","additions":41,"deletions":10},{"file":"tests/lean/assumption.lean","status":"A","additions":41,"deletions":10},{"file":"tests/lean/assumption.lean.expected.out","status":"A","additions":41,"deletions":10},{"file":"tests/lean/run/rw1.lean","status":"A","additions":41,"deletions":10}],"state":"open","open_date":"2020-05-27T02:32:47Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"gebner","date":"2020-05-27T07:22:16Z","comment":"I feel obligated to mention that you could also implement `assumption?` in mathlib using [the trick described here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/set_option.20trace.2Esimplify.2Erewrite.20true/near/195957392)."},{"author":"gebner","date":"2020-06-04T10:17:12Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-06-04T10:25:02Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/738034296)"},{"author":"gebner","date":"2020-06-04T14:18:10Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-06-04T14:28:33Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/738798341)"},{"author":"gebner","date":"2020-06-04T14:40:09Z","comment":"I think for the `?` notation to work, you need to add this before `assumption`: (copied from `rcases`)\r\n```lean\r\nprecedence `?`:max\r\n```\r\n\r\nYou should also add an `assumption'` tactic (of type `tactic unit`) that you can use as auto_param.  That is, replace `. assumption` by `. assumption'` in two tests."},{"author":"jalex-stark","date":"2020-06-04T14:43:42Z","comment":"> I think for the `?` notation to work, you need to add this before `assumption`: (copied from `rcases`)\r\n> \r\n> ```lean\r\n> precedence `?`:max\r\n> ```\r\n> \r\n> You should also add an `assumption'` tactic (of type `tactic unit`) that you can use as auto_param. That is, replace `. assumption` by `. assumption'` in two tests.\r\n\r\nThere's currently an `assumption'` tactic that's essentially `all_goals {assumption}`. which one deserves the name?\r\n(I don't know what an auto_param is, and I don't know which two tests you want replaced.)"},{"author":"gebner","date":"2020-06-04T14:49:28Z","comment":"If you write `. assumption` after the type of an argument, then Lean will try to automatically fill in the argument by calling the tactic `assumption`.  This is also works for structure fields.\r\n\r\nThere are two tests that use `. assumption` (just search for it).  The auto_param is definitely the least important, the current `assumption'` should stay as it is."},{"author":"jalex-stark","date":"2020-06-04T14:53:45Z","comment":"> If you write `. assumption` after the type of an argument, then Lean will try to automatically fill in the argument by calling the tactic `assumption`. This is also works for structure fields.\r\n> \r\n> There are two tests that use `. assumption` (just search for it). The auto_param is definitely the least important, the current `assumption'` should stay as it is.\r\n\r\nso these tests need `. assumption` replaced by `. tactic.assumption`? or we should make `assumption''` an alias for `tactic.assumption`?  (I don't really know what's going on and my instinct is to blindly try to implement what you tell me.)"},{"author":"jalex-stark","date":"2020-06-04T15:27:13Z","comment":"in the latest commit, I have\r\n`./test_single.sh ../../bin/lean assumption.lean` gives output `-- checked`\r\n\r\nbut the `. assumption` tests are I think still broken, working on it."},{"author":"gebner","date":"2020-06-04T15:32:32Z","comment":"I think you should add an `assumption''` and use that in the tests.\r\n\r\nbors try"},{"author":"bors[bot]","date":"2020-06-04T15:40:47Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/739071434)"},{"author":"gebner","date":"2020-06-04T15:49:59Z","comment":"Oh wow, the precedence change broke a lot of stuff.  You should post a message on Zulip about this.  I'm not sure what the correct solution here is."},{"author":"jalex-stark","date":"2020-06-04T16:12:35Z","comment":"> I feel obligated to mention that you could also implement `assumption?` in mathlib using [the trick described here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/set_option.20trace.2Esimplify.2Erewrite.20true/near/195957392).\r\n\r\nMaybe this approach would get around the current problem. Note that `rcases` is in mathlib and the precedence stuff doesn't break there."}],"review_discussion":[{"author":"jalex-stark","file":"tests/lean/assumption.lean.expected.out","date":"2020-05-27T02:33:44Z","comment":"this file is actually garbage, I don't know how to get the output of the test"},{"author":"urkud","file":"library/init/meta/tactic.lean","date":"2020-05-27T05:00:03Z","comment":"```suggestion\r\n         H_type ← tactic.infer_type H,\r\n         let H_format := if is_implicit H_type then ↑\"@\" ++ pp_H else pp_H,\r\n         trace ( (\"Try this: exact \" : format) ++ H_format) },\r\n```"},{"author":"gebner","file":"tests/lean/assumption.lean.expected.out","date":"2020-05-27T07:21:13Z","comment":"```\r\ncd tests/lean\r\n./test_single.sh ../../bin/lean assumption.lean\r\n```"},{"author":"gebner","file":"tests/lean/assumption.lean.expected.out","date":"2020-06-04T08:37:04Z","comment":"The output is still wrong.  Please fix it until the command above prints `-- checked`."},{"author":"jalex-stark","file":"tests/lean/assumption.lean.expected.out","date":"2020-06-04T08:57:00Z","comment":"hmm actually I still don't know how to build `bin/lean` in the first place\r\nprobably it's these instructions\r\nhttps://github.com/leanprover-community/lean/blob/master/doc/make/index.md#generic-build-instructions"},{"author":"gebner","file":"tests/lean/assumption.lean.expected.out","date":"2020-06-04T08:59:53Z","comment":"Yes, where are you stuck?"},{"author":"jalex-stark","file":"tests/lean/assumption.lean.expected.out","date":"2020-06-04T09:01:42Z","comment":"now I'm just waiting on the build. before I was stuck on understanding the error messages that came out of `./test_single.sh ../../bin/lean assumption.lean`"},{"author":"jalex-stark","file":"tests/lean/assumption.lean.expected.out","date":"2020-06-04T09:23:38Z","comment":"Now I have a real lean binary. I'm getting \"error: unexpected token\" at the question mark. Most of my debugging strategies rely on VSCode; is there a way to tell it to use the local lean binary?"},{"author":"jalex-stark","file":"tests/lean/assumption.lean.expected.out","date":"2020-06-04T09:38:16Z","comment":"Hmm. Seems like the current commit gives lots of errors like this. I thought the approach using the optional parse argument would prevent these. I think I should give up.\r\n```\r\n/Users/jstark/lean-projects/lean/library/init/meta/interactive.lean:1057:30: error: type mismatch at application\r\n  try assumption\r\nterm\r\n  assumption\r\nhas type\r\n  parse (tk \"?\")? → tactic unit\r\nbut is expected to have type\r\n  itactic\r\n"},{"author":"gebner","file":"tests/lean/assumption.lean.expected.out","date":"2020-06-04T10:28:36Z","comment":"I think you should just replace these references to `assumption` by `tactic.assumption`.  The `?` parser only works when the tactic is parsed in an `begin ... end` block (or `by ...`)."},{"author":"jalex-stark","file":"tests/lean/assumption.lean.expected.out","date":"2020-06-04T14:14:20Z","comment":"Okay, I think I have implemented that suggestion in the latest commit. I'm still getting the following, which seems to be the opposite problem (i want it to use the version with the parser and it uses the version without) I tried adding `import tactic.interactive` but i could not resolve that import.\r\n```\r\n/Users/jstark/lean-projects/lean/tests/lean/assumption.lean:3:12: error: unexpected token\r\n/Users/jstark/lean-projects/lean/tests/lean/assumption.lean:4:0: error: invalid 'end', there is no open namespace/section"}],"tags":[],"commits":[{"author":"jalex-stark","committer":"jalex-stark","hash":"f8e565adb8ab395eac97caf40eecc66a9c4ee81e","message":"feat(library/init/meta)\\nadd assumption? tactic","date":"2020-05-27T01:51:39Z"},{"author":"jalex-stark","committer":"jalex-stark","hash":"1877db4f408e7f13fb82736b6a74af0c4f20fefd","message":"chore(tests/lean)\\n add tests for","date":"2020-05-27T02:24:51Z"},{"author":"jalex-stark","committer":"jalex-stark","hash":"78059335bf697652ba2d840df011cee891777843","message":"chore(tests/lean)\\n add tests for","date":"2020-05-27T02:25:14Z"},{"author":"jalex-stark","committer":"web-flow","hash":"6e4f0f3590448e45e934919058b67ea553904366","message":"Update library/init/meta/tactic.lean\n\nCo-authored-by: Yury G. Kudryashov <urkud@urkud.name>","date":"2020-06-03T22:56:55Z"},{"author":"jalex-stark","committer":"jalex-stark","hash":"0b9219fd863d810cd17d60cb5a7cb8218b60cbde","message":"added expected output for test","date":"2020-06-03T23:00:35Z"},{"author":"jalex-stark","committer":"jalex-stark","hash":"cb838753146ccc7309e1be2c7e1db22c0326da6c","message":"replace noninteractive calls to assumption with calls to tactic.assumption","date":"2020-06-04T14:05:27Z"},{"author":"jalex-stark","committer":"jalex-stark","hash":"6d0ec36d441b37b5ae8320fe19c6f8f78b6336de","message":"adds test output for `assumption?` and fixes tests relying on assumption autoparam","date":"2020-06-04T15:15:05Z"}]},{"author":"EdAyers","number":280,"diff_summary":[{"file":"src/library/vm/vm.cpp","status":"A","additions":58,"deletions":34},{"file":"tests/lean/vmo1.lean","status":"A","additions":58,"deletions":34},{"file":"tests/lean/vmo1.lean.expected.out","status":"A","additions":58,"deletions":34},{"file":"tests/lean/vmo2.lean","status":"A","additions":58,"deletions":34},{"file":"tests/lean/vmo2.lean.expected.out","status":"A","additions":58,"deletions":34}],"state":"closed","open_date":"2020-05-26T22:07:55Z","update_date":"2020-05-27T07:47:02Z","discussion":[{"author":"gebner","date":"2020-05-27T07:18:44Z","comment":"Ooops, I completely missed this when I reviewed the override PR.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-05-27T07:47:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/712113564)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/712113599)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/712113590)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/712113644)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/712113624)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/712113545)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"0ebec736e8390161fc84996e4409826d27f49d65","message":"fix(279): fixes a vm environment cache not updating\n\nfixes #279","date":"2020-05-26T22:05:05Z"}]},{"author":"gebner","number":278,"diff_summary":[{"file":"src/library/vm/vm_io.cpp","status":"A","additions":50,"deletions":15},{"file":"tests/lean/run/process_get_char.lean","status":"A","additions":50,"deletions":15}],"state":"closed","open_date":"2020-05-26T16:19:10Z","update_date":"2020-05-26T18:06:40Z","discussion":[{"author":"gebner","date":"2020-05-26T17:41:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T18:06:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/710295015)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/710294990)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/710294984)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/710295009)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/710295003)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/710294958)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"bb79855e917d09476c3f8df72510c6524093ede0","message":"fix(library/vm/vm_io): do not use fseek","date":"2020-05-26T16:18:20Z"},{"author":"gebner","committer":"gebner","hash":"04208d7e06d06c18219cff4d7302ce64c0dfd38d","message":"Add test.","date":"2020-05-26T16:22:22Z"},{"author":"gebner","committer":"gebner","hash":"3688f91a5ac24030e048024fe4d956c6d7b63aef","message":"Handle eof.","date":"2020-05-26T16:41:27Z"},{"author":"gebner","committer":"gebner","hash":"92999bebeb4aaffd718afb140517374945950bfd","message":"Fix test on windows.  Unicode support on windows is a lost cause.g","date":"2020-05-26T16:50:56Z"}]},{"author":"gebner","number":277,"diff_summary":[{"file":"src/frontends/lean/info_manager.cpp","status":"M","additions":37,"deletions":23},{"file":"src/frontends/lean/info_manager.h","status":"M","additions":37,"deletions":23},{"file":"tests/lean/interactive/field_info.lean.expected.out","status":"M","additions":37,"deletions":23},{"file":"tests/lean/interactive/term_goal_info.lean","status":"M","additions":37,"deletions":23},{"file":"tests/lean/interactive/term_goal_info.lean.expected.out","status":"M","additions":37,"deletions":23}],"state":"closed","open_date":"2020-05-26T15:47:26Z","update_date":"2020-05-26T17:11:38Z","discussion":[{"author":"gebner","date":"2020-05-26T15:53:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T17:11:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/710088841)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/710088890)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/710088870)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/710088759)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/710088726)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/710088924)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"4cf39efdd6a7c3ebb5899a946104d082fd879fc5","message":"fix(frontends/lean/info_manager): instantiate metavariables in term goals","date":"2020-05-26T15:38:33Z"},{"author":"gebner","committer":"gebner","hash":"d70e1ac358b86ef5ec48813d408437da9001f992","message":"Fix test.","date":"2020-05-26T15:50:14Z"}]},{"author":"EdAyers","number":276,"diff_summary":[{"file":"library/init/meta/default.lean","status":"A","additions":828,"deletions":368},{"file":"library/init/meta/tagged_format.lean","status":"A","additions":828,"deletions":368},{"file":"src/frontends/lean/pp.cpp","status":"A","additions":828,"deletions":368},{"file":"src/frontends/lean/pp.h","status":"A","additions":828,"deletions":368},{"file":"src/library/vm/CMakeLists.txt","status":"A","additions":828,"deletions":368},{"file":"src/library/vm/init_module.cpp","status":"A","additions":828,"deletions":368},{"file":"src/library/vm/vm_eformat.cpp","status":"A","additions":828,"deletions":368},{"file":"src/library/vm/vm_eformat.h","status":"A","additions":828,"deletions":368},{"file":"tests/lean/eformat.lean","status":"A","additions":828,"deletions":368},{"file":"tests/lean/eformat.lean.expected.out","status":"A","additions":828,"deletions":368}],"state":"closed","open_date":"2020-05-26T13:22:28Z","update_date":"2020-05-26T16:32:10Z","discussion":[{"author":"EdAyers","date":"2020-05-26T13:40:38Z","comment":"Seems like the test runner isn't picking up tests/lean/eformat.lean which should be failing."},{"author":"gebner","date":"2020-05-26T13:43:37Z","comment":"> Seems like the test runner isn't picking up tests/lean/eformat.lean which should be failing.\r\n\r\nThe `eformat` test is executed and seems to be working."},{"author":"EdAyers","date":"2020-05-26T13:45:39Z","comment":"> Are there changes in `pp.cpp` beyond replacing `format` by `T`?\r\n\r\nIn commit 4d1f I change where spaces are added in a binder block. I am now concerned that I tested the wrong thing since eformat test worked for build before that. So this might get revoked.\r\n\r\nOther than that it should produce the same format string as the old pp. Which I trust is occurring since all of the tests still pass."},{"author":"EdAyers","date":"2020-05-26T14:14:59Z","comment":"Ok so with my inconsistent tests, I think that the problem was that sometimes in server mode I wasn't getting a space between two names in the same binder block. \r\n4d1f286 resolved the issue for me but not sure why there is inconsistent behaviour between hover info and output to produced.out. "},{"author":"EdAyers","date":"2020-05-26T14:46:32Z","comment":"Also, if any lean 4 developers are reading this... please consider adding support for structured formats like this to lean 4! They enable a large number of snazzy tricks. "},{"author":"gebner","date":"2020-05-26T15:52:46Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T16:32:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/709959759)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/709959607)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/709959594)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/709959726)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/709959707)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/709959660)"}],"review_discussion":[{"author":"gebner","file":"library/init/meta/tagged_format.lean","date":"2020-05-26T13:33:48Z","comment":"```suggestion\r\nmeta inductive tagged_format (α : Type*)\r\n```\r\n\r\n:+1: for making the type parametric."},{"author":"gebner","file":"src/frontends/lean/pp.cpp","date":"2020-05-26T13:39:05Z","comment":"This seems like a change in behavior?"},{"author":"gebner","file":"src/library/vm/vm_eformat.h","date":"2020-05-26T13:39:51Z","comment":"Please remove comments."},{"author":"EdAyers","file":"src/frontends/lean/pp.cpp","date":"2020-05-26T13:52:56Z","comment":"ah ok"},{"author":"EdAyers","file":"src/frontends/lean/pp.cpp","date":"2020-05-26T13:56:54Z","comment":"Relevant issue is #153. I think this reverse is necessary but will check again."},{"author":"EdAyers","file":"src/frontends/lean/pp.cpp","date":"2020-05-26T14:12:12Z","comment":"The reverse is necessary, but can be refactored inside is_explicit_collection if desired. "},{"author":"gebner","file":"src/frontends/lean/pp.cpp","date":"2020-05-26T15:51:54Z","comment":"I don't really care where it is reversed, as long as it doesn't break #153."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"a71d50da7a2dac8749a7d3798fb234f3098ae06c","message":"feat(eformat): add support for structured formatting\n\n- Introduce a new datatype `tagged_format` for making\n  formats where certain nodes can be tagged with   information\n- Make the pretty printer templated so that it can support both `format`\n   and the new tagged_format\n- Add a tactic_state.pp_tagged : tactic_state → expr → eformat\n\nIn an ideal world. One would implement tags directly on to `format`\nhowever because format is implemented as a sexpr\nand because the widget module needs to be able to\nperform induction on the format object,\nI concluded that adding tags to `format` would\namount to an overhaul of `format` which seems too big a change.\n\nStill need to fix a formatting bug where it's not putting spaces between binders.","date":"2020-05-26T13:19:16Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4d1f286923e979c275ebc2d2ba48f42a2c2e94cc","message":"fix(eformat): pp add a space between names in a binder block","date":"2020-05-26T13:41:31Z"},{"author":"EdAyers","committer":"EdAyers","hash":"26866c16204abe7ee6ba21cebf77bec5748699e4","message":"feat(eformat): make tagged_format universe polymorphic","date":"2020-05-26T13:52:25Z"},{"author":"EdAyers","committer":"EdAyers","hash":"67aaaef04e505dd4d66c8a5e4950113df8c4321d","message":"fix(widget): remove some commented out decls","date":"2020-05-26T13:57:36Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d5b3ac53ed92249f256f7fc0aa1ab2a8c5dd951a","message":"feat(eformat): remove a fixme comment","date":"2020-05-26T14:16:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d6c22ed4653a99ba2e9f0b31376b7edbdeb311ee","message":"feat(eformat): add test for an explicit collection","date":"2020-05-26T14:23:03Z"},{"author":"EdAyers","committer":"EdAyers","hash":"fad92cfbcb2b9c602fab466cc300e933cb978da8","message":"fix(eformat): fix a potential address bug on coe\n\nThe problem is that `pp_hide_coercion` with more than 4 args rewrites the expression and then passes this to pp_child. But now you can't compute the address properly because it's not the true expression being pretty printed.\nThe ideal solution would be to rewrite `pp_child` to support adjusted function addresses.\nBut for now it just stops trying to calculate addresses on subterms which use function coes with more than 4 args.\nThis is quite a rare case anyway.","date":"2020-05-26T14:33:10Z"}]},{"author":"gebner","number":275,"diff_summary":[{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":84,"deletions":14},{"file":"src/frontends/lean/elaborator.h","status":"A","additions":84,"deletions":14},{"file":"src/frontends/lean/info_manager.cpp","status":"A","additions":84,"deletions":14},{"file":"src/frontends/lean/info_manager.h","status":"A","additions":84,"deletions":14},{"file":"src/tests/shell/shell_test.expected.out","status":"A","additions":84,"deletions":14},{"file":"tests/lean/interactive/field_info.lean.expected.out","status":"A","additions":84,"deletions":14},{"file":"tests/lean/interactive/info.lean.expected.out","status":"A","additions":84,"deletions":14},{"file":"tests/lean/interactive/info1.lean.expected.out","status":"A","additions":84,"deletions":14},{"file":"tests/lean/interactive/info_goal.lean.expected.out","status":"A","additions":84,"deletions":14},{"file":"tests/lean/interactive/info_id_pre_elab.lean.expected.out","status":"A","additions":84,"deletions":14},{"file":"tests/lean/interactive/term_goal_info.lean","status":"A","additions":84,"deletions":14},{"file":"tests/lean/interactive/term_goal_info.lean.expected.out","status":"A","additions":84,"deletions":14}],"state":"closed","open_date":"2020-05-26T11:27:48Z","update_date":"2020-05-26T12:40:55Z","discussion":[{"author":"gebner","date":"2020-05-26T11:58:15Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T12:00:33Z","comment":"Canceled."},{"author":"gebner","date":"2020-05-26T12:00:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T12:40:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/709187797)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/709187846)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/709187829)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/709187700)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/709187685)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/709187757)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"af802c54291bbba64a93995c14fbfe31dc9a9fdf","message":"feat(frontends/lean/elaborator): show goals for subterms","date":"2020-05-26T11:19:20Z"},{"author":"gebner","committer":"gebner","hash":"9b1197e72d18abff2ca398fafe016ddc5d01163e","message":"Fix test.","date":"2020-05-26T11:34:40Z"},{"author":"gebner","committer":"gebner","hash":"5687b235de9345cdedef1eb1c7286b803d4159a2","message":"Add test.","date":"2020-05-26T12:00:14Z"}]},{"author":"gebner","number":273,"diff_summary":[{"file":"library/init/meta/tactic.lean","status":"M","additions":42,"deletions":7},{"file":"src/library/tactic/simplify.cpp","status":"M","additions":42,"deletions":7},{"file":"src/library/tactic/tactic_state.cpp","status":"M","additions":42,"deletions":7},{"file":"src/library/tactic/tactic_state.h","status":"M","additions":42,"deletions":7},{"file":"src/library/type_context.h","status":"M","additions":42,"deletions":7}],"state":"closed","open_date":"2020-05-25T12:32:12Z","update_date":"2020-05-25T14:27:11Z","discussion":[{"author":"gebner","date":"2020-05-25T12:37:20Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-05-25T13:06:22Z","comment":"## try\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/706212772)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/706212783)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/706212763)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/706212793)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/706212717)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/706212736)"},{"author":"gebner","date":"2020-05-25T13:57:46Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-25T14:27:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/706433045)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/706433135)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/706433119)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/706433093)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/706433082)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/706433150)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"db401735c5a2880874d4b340047c59d747b2858d","message":"perf(library/tactic/simplify): freeze instances","date":"2020-05-25T12:17:48Z"}]},{"author":"Vtec234","number":272,"diff_summary":[{"file":"src/shell/server.cpp","status":"M","additions":17,"deletions":5}],"state":"closed","open_date":"2020-05-25T12:02:14Z","update_date":"2020-05-25T12:09:12Z","discussion":[],"review_discussion":[{"author":"Vtec234","file":"src/shell/server.cpp","date":"2020-05-25T12:03:19Z","comment":"This prevents segfaults if `m_open_files` isn't set yet."}],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"93248b8284c9dda65e3e2d4e1562403e7dfb1068","message":"Don't invalidate freshly opened files if they're the same as on disk","date":"2020-05-25T11:54:39Z"}]},{"author":"gebner","number":271,"diff_summary":[{"file":"src/frontends/lean/builtin_cmds.cpp","status":"A","additions":12,"deletions":9},{"file":"src/frontends/lean/decl_cmds.cpp","status":"A","additions":12,"deletions":9},{"file":"src/frontends/lean/decl_cmds.h","status":"A","additions":12,"deletions":9},{"file":"tests/lean/run/local_attr_doc.lean","status":"A","additions":12,"deletions":9}],"state":"closed","open_date":"2020-05-25T10:59:34Z","update_date":"2020-05-25T11:47:10Z","discussion":[{"author":"gebner","date":"2020-05-25T10:59:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-25T11:47:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/706005443)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/706005514)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/706005508)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/706005484)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/706005467)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/706005409)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"0867bbc8fc61806b2dbe1fc77bbf0339183ec755","message":"fix(frontends/lean/decl_cmds): support local attribute with docstring","date":"2020-05-25T10:58:47Z"}]},{"author":"gebner","number":269,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"A","additions":37,"deletions":35},{"file":"tests/lean/268c.lean","status":"A","additions":37,"deletions":35},{"file":"tests/lean/268c.lean.expected.out","status":"A","additions":37,"deletions":35},{"file":"tests/lean/eta_bug.lean.expected.out","status":"A","additions":37,"deletions":35},{"file":"tests/lean/fold.lean.expected.out","status":"A","additions":37,"deletions":35},{"file":"tests/lean/inject.lean.expected.out","status":"A","additions":37,"deletions":35}],"state":"closed","open_date":"2020-05-25T09:42:01Z","update_date":"2020-05-25T11:17:47Z","discussion":[{"author":"gebner","date":"2020-05-25T10:48:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-25T11:17:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/705929226)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/705929207)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/705929181)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/705929091)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/705929059)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/705929244)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"0c7b20201b69e21311cb77d9add19aa1c32bf2b3","message":"fix(frontends/lean/pp): fix dot-notation pretty-printing","date":"2020-05-25T09:41:12Z"},{"author":"gebner","committer":"gebner","hash":"427678a5c70f1589cd645a01f606aa594d422f58","message":"Add test case.","date":"2020-05-25T09:42:51Z"}]},{"author":"bryangingechen","number":267,"diff_summary":[{"file":"library/init/data/int/comp_lemmas.lean","status":"M","additions":2,"deletions":5},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":2,"deletions":5},{"file":"library/init/meta/expr.lean","status":"M","additions":2,"deletions":5}],"state":"closed","open_date":"2020-05-24T08:16:06Z","update_date":"2020-05-24T09:06:35Z","discussion":[{"author":"bryangingechen","date":"2020-05-24T08:18:36Z","comment":"Question: which linters are most worth tackling next? \r\n\r\n[Here's](https://gist.github.com/bryangingechen/6c2f397b14d756c3c7f72440cd9b4816) the linter output from putting `#lint_all` at the bottom of mathlib's `tactic.lint` (as of 3.14.0c)."},{"author":"gebner","date":"2020-05-24T08:38:16Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-24T09:06:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/703446098)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/703446068)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/703446064)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/703446090)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/703446083)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/703446059)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"7e9423d02f5501b3ad12448c712c2a8633a16b74","message":"chore(library): remove duplicated namespaces","date":"2020-05-24T08:13:11Z"}]},{"author":"gebner","number":266,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-05-23T08:09:51Z","update_date":"2020-05-23T08:38:05Z","discussion":[{"author":"gebner","date":"2020-05-23T08:10:17Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-23T08:38:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/701646458)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/701646469)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/701646463)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/701646449)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/701646443)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/701646429)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"76ddfcaca3fe7be58bbd6c05167cd56b05f3acbe","message":"fix(.github/workflows): fix msys2 build","date":"2020-05-23T07:44:47Z"}]},{"author":"gebner","number":265,"diff_summary":[{"file":"src/frontends/lean/token_table.cpp","status":"M","additions":2,"deletions":9},{"file":"tests/lean/run/exists_intro1.lean","status":"M","additions":2,"deletions":9},{"file":"tests/lean/run/match_anonymous_constructor.lean","status":"M","additions":2,"deletions":9},{"file":"tests/lean/run/parent_struct_inst.lean","status":"M","additions":2,"deletions":9},{"file":"tests/lean/run/struct_value.lean","status":"M","additions":2,"deletions":9}],"state":"closed","open_date":"2020-05-21T19:04:32Z","update_date":"2020-05-21T19:41:28Z","discussion":[{"author":"gebner","date":"2020-05-21T19:05:27Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-21T19:41:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/697375053)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/697375004)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/697374984)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/697374957)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/697374942)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/697375031)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"a1f8ed816b5d29371171ddad66b268edce7e7b37","message":"fix(frontends/lean/token_table): remove `(|` and `|)` aliases","date":"2020-05-21T19:03:44Z"}]},{"author":"EdAyers","number":264,"diff_summary":[{"file":"doc/make/index.md","status":"M","additions":3,"deletions":3}],"state":"closed","open_date":"2020-05-21T18:00:43Z","update_date":"2020-05-21T18:51:34Z","discussion":[{"author":"gebner","date":"2020-05-21T18:17:04Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-21T18:51:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/697264242)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/697264272)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/697264266)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/697264299)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/697264285)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/697264317)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"d61cad087f50f4bc281713367a817f5ff06f9885","message":"doc(make): add clarification on ctest to docs","date":"2020-05-21T17:59:52Z"}]},{"author":"EdAyers","number":263,"diff_summary":[{"file":"src/frontends/lean/inductive_cmds.cpp","status":"A","additions":12,"deletions":2},{"file":"src/kernel/inductive/inductive.cpp","status":"A","additions":12,"deletions":2},{"file":"tests/lean/meta_ind_univ.lean","status":"A","additions":12,"deletions":2},{"file":"tests/lean/meta_ind_univ.lean.expected.out","status":"A","additions":12,"deletions":2}],"state":"closed","open_date":"2020-05-21T17:54:55Z","update_date":"2020-05-21T18:25:11Z","discussion":[{"author":"gebner","date":"2020-05-21T17:58:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-21T18:25:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/697181304)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/697181320)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/697181314)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/697181289)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/697181281)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/697181268)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"123bf5d9beaffaba313fa5c731c6c950e68386dc","message":"fix(kernel): don't check levels on meta inductives\n\nThis change means that I can implement widget components entirely in lean\nand not rely on C++ code for the definitions.","date":"2020-05-21T17:54:10Z"}]},{"author":"EdAyers","number":262,"diff_summary":[{"file":"src/kernel/expr.h","status":"M","additions":113,"deletions":0},{"file":"src/library/tactic/backward/backward_lemmas.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/tactic/simp_lemmas.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/tactic/smt/congruence_tactics.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/tactic/smt/ematch.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/tactic/smt/hinst_lemmas.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/tactic/smt/smt_state.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/tactic/vm_local_context.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/tactic/vm_monitor.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/tactic/vm_type_context.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/interaction_state.h","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm.h","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_array.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_declaration.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_environment.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_exceptional.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_expr.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_float.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_format.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_io.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_level.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_list.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_name.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_options.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_parser.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_rb_map.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_string.cpp","status":"M","additions":113,"deletions":0},{"file":"src/library/vm/vm_task.cpp","status":"M","additions":113,"deletions":0},{"file":"src/util/name.h","status":"M","additions":113,"deletions":0}],"state":"closed","open_date":"2020-05-21T17:35:23Z","update_date":"2020-05-23T08:59:43Z","discussion":[{"author":"gebner","date":"2020-05-23T07:45:48Z","comment":"LGTM, just need to fix windows ci first."},{"author":"gebner","date":"2020-05-23T08:11:52Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-23T08:59:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/701678241)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/701678247)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/701678243)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/701678259)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/701678256)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/701678251)"}],"review_discussion":[{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-05-21T17:59:42Z","comment":"This function will fail hilariously (performance-wise) on objects that have dag-like sharing and/or deep nesting (like a list with 10k elements)."},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-05-21T17:59:51Z","comment":"Please remove comment.s"},{"author":"gebner","file":"src/library/vm/vm.h","date":"2020-05-21T18:00:22Z","comment":"Hash collisions are a fact of life, I don't think you need to explicitly mention them here."},{"author":"gebner","file":"src/library/vm/vm.h","date":"2020-05-21T18:02:13Z","comment":"There are 35 subclasses of `vm_external` in total.  Just copy&paste this line everywhere.  It's probably better to not have a default implementation so that you don't forget to implement it.  (Not that I expect much more new code in Lean 3.)"},{"author":"gebner","file":"src/library/vm/vm_array.cpp","date":"2020-05-21T18:04:31Z","comment":"I'm surprised there is no hashing functions for arrays or lists yet.  But we're missing many basic things.  Magic number seems randomly chosen, I'm happy!"},{"author":"gebner","file":"src/library/vm/vm_list.cpp","date":"2020-05-21T18:06:32Z","comment":"```suggestion\r\n    for (T const & x : l) {\r\n        r = lean::hash(r, lean::hash(x));\r\n    }\r\n```"},{"author":"gebner","file":"src/util/name.h","date":"2020-05-21T18:07:21Z","comment":"```suggestion\r\ninline unsigned hash(name const & n) { return n.hash(); }\r\n```\r\n\r\nThis is the kind of thing you want to inline.  (`inline` keyword has of course nothing to do with inlining.)"},{"author":"gebner","file":"src/util/sexpr/format.h","date":"2020-05-21T18:07:30Z","comment":"Unrelated change?"},{"author":"gebner","file":"src/kernel/expr.h","date":"2020-05-21T18:07:43Z","comment":"```suggestion\r\ninline unsigned hash(expr const & e) { return e.hash(); }\r\n```"},{"author":"EdAyers","file":"src/library/vm/vm.cpp","date":"2020-05-21T23:06:05Z","comment":"Yeah I'm not sure what to do about that. The use case I have for it is always a small element. Maybe instead of implementing a hashing for arbitrary vm objects I should just do a heuristic hash within the widget code that finishes after a depth of 3."},{"author":"EdAyers","file":"src/util/sexpr/format.h","date":"2020-05-21T23:09:44Z","comment":"oops yes"},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-05-22T12:04:40Z","comment":"No, it's fine.  I just wanted to make you aware of the issue.  We already have the problem elsewhere: #151 "},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-05-22T12:06:41Z","comment":"```suggestion\r\nunsigned hash(vm_obj const & o) {\r\n    check_system(\"hash(vm_obj)\");\r\n```\r\n\r\nThis will at least output an error message on stack overflow."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"6d08e8e2e4905a39a9ceadc690add9cc7f22af5d","message":"feat(vm): vm objects may be hashed\n\nThis is needed as an optimisation for widgets. To quickly check equality\nof a pair of vm objects.\nAt the moment each instance of vm_external\nneeds to implement its own `hash` with a fallback of zero.\nA warning is in the comment for hash.\nFor the purpose that I wrote hash for this is the most useful failure mode","date":"2020-05-21T17:29:48Z"},{"author":"EdAyers","committer":"EdAyers","hash":"938df67f7cdf2e958e575afcfe47ae3d682f7e2e","message":"fix(vmhash-pr): fix some PR issues.\n\nImplement dummy hash for all vm_externals.\nFix some style issues.\nRemove silly comments.","date":"2020-05-21T23:36:44Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7a35d3306c16704abba8ab7e51c54eaa57d0e4fc","message":"fix(vmhash-pr): remove rogue change to format","date":"2020-05-21T23:40:10Z"},{"author":"EdAyers","committer":"EdAyers","hash":"20278ce5e01fb5402cd4d81354975d7f1319e7bf","message":"fix(vmhash-pr): fix style error","date":"2020-05-22T00:13:46Z"},{"author":"EdAyers","committer":"web-flow","hash":"c7f9582cf05455136d0697b770a4c5702f54f7ce","message":"fix(vmhash): add check_system for flagging hash SOs\n\nCo-authored-by: Gabriel Ebner <gebner@gebner.org>","date":"2020-05-22T23:58:15Z"}]},{"author":"EdAyers","number":261,"diff_summary":[{"file":"library/init/meta/expr.lean","status":"M","additions":13,"deletions":1},{"file":"src/kernel/instantiate.h","status":"M","additions":13,"deletions":1},{"file":"src/library/vm/vm_expr.cpp","status":"M","additions":13,"deletions":1}],"state":"closed","open_date":"2020-05-21T17:12:48Z","update_date":"2020-05-21T18:51:35Z","discussion":[{"author":"gebner","date":"2020-05-21T18:09:13Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-21T18:51:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/697264242)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/697264272)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/697264266)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/697264299)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/697264285)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/697264317)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"bf9c2a815ac2336eec9f94a51a29bd778a11256b","message":"lib(expr): add expr.instantiate_vars_core","date":"2020-05-21T17:12:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5ad1d38d605ba0305144778b0edf9e40d5aeb5fa","message":"fix(): forgot to include changes to instantiate.h","date":"2020-05-21T17:15:53Z"}]},{"author":"EdAyers","number":260,"diff_summary":[{"file":"library/init/meta/default.lean","status":"A","additions":243,"deletions":1},{"file":"library/init/meta/expr_address.lean","status":"A","additions":243,"deletions":1},{"file":"src/library/CMakeLists.txt","status":"A","additions":243,"deletions":1},{"file":"src/library/expr_address.cpp","status":"A","additions":243,"deletions":1},{"file":"src/library/expr_address.h","status":"A","additions":243,"deletions":1}],"state":"closed","open_date":"2020-05-21T17:04:58Z","update_date":"2020-05-23T08:59:45Z","discussion":[{"author":"semorrison","date":"2020-05-22T01:44:48Z","comment":"Could we have a few more comments?"},{"author":"gebner","date":"2020-05-23T07:47:56Z","comment":"LGTM, still need to fix windows ci."},{"author":"gebner","date":"2020-05-23T08:11:02Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-23T08:59:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/701678241)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/701678247)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/701678243)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/701678259)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/701678256)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/701678251)"}],"review_discussion":[{"author":"gebner","file":"library/init/meta/expr_address.lean","date":"2020-05-21T18:23:50Z","comment":"Please don't declare global notation."},{"author":"gebner","file":"library/init/meta/expr_address.lean","date":"2020-05-21T18:25:04Z","comment":"Please also add instances for the other stringification classes: `has_to_string` and `has_to_format` (`has_to_tactic_format` is implied by `has_to_format`)."},{"author":"EdAyers","file":"library/init/meta/expr_address.lean","date":"2020-05-21T23:00:35Z","comment":"oops!"},{"author":"gebner","file":"library/init/meta/expr_address.lean","date":"2020-05-22T12:11:43Z","comment":"```suggestion\r\nmeta instance : decidable_eq address :=\r\n(infer_instance : decidable_eq (list expr.coord))\r\n```"},{"author":"gebner","file":"library/init/meta/expr_address.lean","date":"2020-05-22T12:12:13Z","comment":"```suggestion\r\n| a [] := some a -- [] ++ a = a\r\n| [] _ := none   -- (h::t) ++ _ ≠ []\r\n-- if t₂ ++ z = t₁ then (h₁ :: t₁) ++ z = (h₁ :: t₂)\r\n| (h₁ :: t₁) (h₂ :: t₂) := if h₁ = h₂ then as_below t₁ t₂ else none\r\n```"},{"author":"gebner","file":"library/init/meta/expr_address.lean","date":"2020-05-22T12:15:23Z","comment":"```suggestion\r\nmeta instance : decidable_eq coord :=\r\nunchecked_cast (infer_instance : decidable_eq ℕ)\r\n```\r\n\r\nI'm not sure if this actually works, but then you don't need the C++ function."},{"author":"gebner","file":"library/init/meta/expr_address.lean","date":"2020-05-22T12:15:50Z","comment":"```suggestion\r\nprotected def repr: coord → string\r\n```"},{"author":"gebner","file":"library/init/meta/expr_address.lean","date":"2020-05-22T12:16:34Z","comment":"```suggestion\r\nThe first coordinate in the list corresponds to the root of the expression. -/\r\n```\r\n?"},{"author":"gebner","file":"library/init/meta/expr_address.lean","date":"2020-05-22T12:17:10Z","comment":"```suggestion\r\ninstance : has_append address := ⟨list.append⟩\r\n```\r\n\r\nOr maybe Lean can't figure out the instance name by itself?  In that case, please ignore this suggestion."},{"author":"gebner","file":"library/init/meta/expr_address.lean","date":"2020-05-22T12:19:35Z","comment":"Copyright header!"},{"author":"gebner","file":"src/library/expr_address.cpp","date":"2020-05-22T12:20:05Z","comment":"```suggestion\r\n        return address(expr_coord::pi_var_type);\r\n```\r\nPlease use consistent indentation."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"161da53a07f617a93545d34d974aa45865701f9b","message":"lib(expr.address): add expr.coord and expr.address\n\nThese are for reasoning about subexpressions and are needed by widgets.","date":"2020-05-21T17:03:38Z"},{"author":"EdAyers","committer":"EdAyers","hash":"92aca983eaf2f8d0f0b4d58350cfdb18380bae48","message":"lib(expr.address): fix expr_address.lean\n\nRemove local notation and implement has_to_string and has_to_format.","date":"2020-05-21T23:02:10Z"},{"author":"EdAyers","committer":"EdAyers","hash":"bf2f87c184945618c60e3550de51cb3d62ec4965","message":"doc(address): minor commenting and style changes","date":"2020-05-22T10:11:07Z"},{"author":"EdAyers","committer":"EdAyers","hash":"8ab2ca21f93727e58b8532425bf1d24f21b93a4c","message":"fix(address): style fixes\n\nAlso remove C++ implementation of has_dec_eq.","date":"2020-05-22T23:55:45Z"}]},{"author":"EdAyers","number":259,"diff_summary":[{"file":"library/init/data/list/basic.lean","status":"M","additions":9,"deletions":0}],"state":"closed","open_date":"2020-05-21T16:53:15Z","update_date":"2020-05-23T08:59:48Z","discussion":[{"author":"gebner","date":"2020-05-21T18:10:55Z","comment":"The mathlib name is `map_with_index` and has a better docstring."},{"author":"gebner","date":"2020-05-22T12:07:25Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-22T12:26:44Z","comment":"Build failed:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/699541859)"},{"author":"gebner","date":"2020-05-23T08:11:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-23T08:59:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/701678241)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/701678247)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/701678243)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/701678259)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/701678256)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/701678251)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"abda3346db23d6db02061832ae23e6fc4a01790a","message":"feat(list): add mapi to core library\n\nI needed to use this in the widget implementation and it seems like\nsomething basic enough to belong in core anyway.","date":"2020-05-21T16:42:43Z"},{"author":"EdAyers","committer":"web-flow","hash":"201d4368d320242f02897c2a4aa863bb59bbd2ea","message":"fix(mapi-pr): use name and docstring from mathlib","date":"2020-05-21T23:44:32Z"}]},{"author":"EdAyers","number":258,"diff_summary":[{"file":"doc/changes.md","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/default.lean","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/format.lean","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/tactic.lean","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/widget/basic.lean","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/widget/components.lean","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/widget/default.lean","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/widget/html_cmd.lean","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/widget/interactive_expr.lean","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/widget/replace_save_info.lean","status":"A","additions":1663,"deletions":23},{"file":"library/init/meta/widget/tactic_component.lean","status":"A","additions":1663,"deletions":23},{"file":"src/frontends/lean/CMakeLists.txt","status":"A","additions":1663,"deletions":23},{"file":"src/frontends/lean/info_manager.cpp","status":"A","additions":1663,"deletions":23},{"file":"src/frontends/lean/info_manager.h","status":"A","additions":1663,"deletions":23},{"file":"src/frontends/lean/init_module.cpp","status":"A","additions":1663,"deletions":23},{"file":"src/frontends/lean/interactive.cpp","status":"A","additions":1663,"deletions":23},{"file":"src/frontends/lean/interactive.h","status":"A","additions":1663,"deletions":23},{"file":"src/frontends/lean/widget.cpp","status":"A","additions":1663,"deletions":23},{"file":"src/frontends/lean/widget.h","status":"A","additions":1663,"deletions":23},{"file":"src/library/module_mgr.h","status":"A","additions":1663,"deletions":23},{"file":"src/shell/CMakeLists.txt","status":"A","additions":1663,"deletions":23},{"file":"src/shell/lean.cpp","status":"A","additions":1663,"deletions":23},{"file":"src/shell/server.cpp","status":"A","additions":1663,"deletions":23},{"file":"src/shell/server.h","status":"A","additions":1663,"deletions":23},{"file":"src/util/sexpr/format.h","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/import_widget_violation.lean","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/import_widget_violation.lean.expected.out","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/inst.lean","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/inst.lean.expected.out","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/interactive/run_single.sh","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/mk_input.sh","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/run_single.sh","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/test_single.sh","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/widget1.input","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/widget1.input.expected.out","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/widget1.lean","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/widget2.input","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/widget2.input.expected.out","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/widget2.lean","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/widget3.input","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/widget3.input.expected.out","status":"A","additions":1663,"deletions":23},{"file":"tests/lean/widget/widget3.lean","status":"A","additions":1663,"deletions":23}],"state":"closed","open_date":"2020-05-21T15:44:20Z","update_date":"2020-05-28T16:56:01Z","discussion":[{"author":"EdAyers","date":"2020-05-21T15:44:46Z","comment":"Reopened from #257 "},{"author":"gebner","date":"2020-05-21T16:22:11Z","comment":"This is a really nice but also somewhat large PR.\r\n\r\nThe non-widget changes all seem fairly unobjectionable at first glance.  If you packaged them up as single small PRs, then we could merge most of them without much discussion.\r\n\r\nI need to read up on the widget architecture though.  This will take a while."},{"author":"gebner","date":"2020-05-21T16:26:59Z","comment":"> magic : Type performs the same role as format except that there is a special constructor tag_expr : expr.address → expr → magic → magic that contains information about which subexpression caused this string to be rendered.\r\n\r\nHow about merging `format` and `magic`?  That is, just add an extra constructor to format.  (Maybe something more generic than `expr.address` though.)"},{"author":"EdAyers","date":"2020-05-21T16:38:44Z","comment":"Yeah the problem with this is that format is implemented as a `sexpr` under the hood and there are lots of strange pieces to the implementation of format that I didn't understand so it seemed simpler to just make a separate datatype."},{"author":"gebner","date":"2020-05-22T12:25:51Z","comment":"> Yeah the problem with this is that format is implemented as a `sexpr` under the hood and there are lots of strange pieces to the implementation of format that I didn't understand so it seemed simpler to just make a separate datatype.\r\n\r\nOk, I understand.  Ideally we'd refactor `format` so that it uses VM objects (like Lean 4).  But that's a larger undertaking, which is probably not worth it.\r\n\r\nHow about renaming `magic` to `format2` then?  This makes it clear that it is essentially the same as the normal `format` structure, but just a different implementation."},{"author":"EdAyers","date":"2020-05-23T11:05:17Z","comment":"Yes that's the deal. I'll rename to format2. Or maybe structured_format?"},{"author":"gebner","date":"2020-05-23T12:36:23Z","comment":"Whatever name you like best.  I'm waiting for the PR."},{"author":"gebner","date":"2020-05-28T09:13:38Z","comment":"I don't think there is much missing in this PR, except for:\r\n\r\n - Moving `library/widget` into `init`\r\n - The mutex in `widget_info`\r\n\r\nThe rest could also be done in follow-up PRs.  At this point I believe it would be more useful to gather user feedback from the ~~guinea pigs~~ mathlib contributors.  (I'd also like to make a release.)  What are your thoughts?"},{"author":"EdAyers","date":"2020-05-28T12:47:19Z","comment":"Sounds good to me."},{"author":"EdAyers","date":"2020-05-28T13:40:23Z","comment":"Do you know of any lean syntax tricks to improve making html?\r\nIs there already a tree building API or convention in Lean?\r\nCurrently it looks like this:\r\n``` lean\r\nh \"ul\" [] [\r\n     h \"li\" [] [\"this is list item 1\"],\r\n     h \"li\" [] [\"this is list item 2\"],\r\n     h \"li\" [] [\r\n          h \"span\" [] [\"there is a button here\"],\r\n          h \"button\" [on_click (λ _, 3)] [\"click me!\"]\r\n     ]\r\n]\r\n```"},{"author":"gebner","date":"2020-05-28T15:04:42Z","comment":"The html syntax looks okay to me."},{"author":"gebner","date":"2020-05-28T16:27:58Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-28T16:28:00Z","comment":":-1: Rejected by label"},{"author":"gebner","date":"2020-05-28T16:28:34Z","comment":"sudo bors merge\r\n<!--\r\nbors merge\r\n-->"},{"author":"bors[bot]","date":"2020-05-28T16:56:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/717524007)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/717524034)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/717524021)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/717523983)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/717523976)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/717524044)"}],"review_discussion":[{"author":"gebner","file":"doc/make/index.md","date":"2020-05-21T16:29:30Z","comment":"Nobody noticed this before... :smiley: "},{"author":"gebner","file":"library/init/meta/expr.lean","date":"2020-05-21T16:29:55Z","comment":":+1: "},{"author":"gebner","file":"library/init/meta/widget/interactive_expr.lean","date":"2020-05-21T16:30:45Z","comment":"Please follow the header style.  (It's the same as in mathlib.)"},{"author":"gebner","file":"src/kernel/expr.h","date":"2020-05-21T16:34:27Z","comment":"```suggestion\r\nunsigned hash(expr const & e) { ... }\r\n```\r\n\r\nWe want this to be inlined."},{"author":"gebner","file":"src/shell/server.cpp","date":"2020-05-21T16:37:53Z","comment":"I don't think you need `parse_breaking_at_pos` here.  It's main use is auto-completion where we need to know where the current token begins.  But here we already know the position (`pos`?)."},{"author":"gebner","file":"src/shell/server.cpp","date":"2020-05-21T16:40:19Z","comment":"The current implementation preempts widget events if the second one is issued before the first one is finished.  Maybe more problematically, it is also cancelled on info requestst, which happen on hovering."},{"author":"EdAyers","file":"library/init/meta/widget/interactive_expr.lean","date":"2020-05-21T16:47:22Z","comment":"What is the correct header to give C++ files? Should it mention microsoft?"},{"author":"gebner","file":"library/init/meta/widget/interactive_expr.lean","date":"2020-05-21T17:57:17Z","comment":"Exactly like in mathlib:\r\n```c++\r\n/*\r\nCopyright (c) 2020 Ed Ayers. All rights reserved.\r\nReleased under Apache 2.0 license as described in the file LICENSE.\r\n\r\nAuthor: Ed Ayers\r\n*/\r\n```"},{"author":"bryangingechen","file":"doc/make/index.md","date":"2020-05-21T18:50:46Z","comment":"I think I've always used `ctest` for this (though I can never remember the command-line syntax and end up spending more time googling)."},{"author":"EdAyers","file":"src/shell/server.cpp","date":"2020-05-22T00:00:15Z","comment":"tbh I found it very difficult to understand the code that translates source positions to info thunks (everything under `report_info` in /src/frontends/lean/interactive.cpp)\r\n, so I tried to make sure that report_widget and widget_event both followed exactly the same log-tree lookup logic as report_info, and since report_info did, update_widget does too.\r\nIt seems that when you run parse_breaking_at_pos, you get a different position stored as `m_pos` on the exception args? You need to get the same log tree entry that the report_info step got and I couldn't see how to get that m_pos other than by running parse_breaking_at_pos"},{"author":"EdAyers","file":"src/shell/server.cpp","date":"2020-05-22T00:08:18Z","comment":"Yes this is bad but I'm not sure what to do to fix it. The only motivation behind this code as it stands now is that it mirrors server::info directly above it. There are two behaviours that I would consider good: \r\n1. once a widget_event occurs all later widget_events should be dropped until the render for the first event finishes. This would be simplest and safest to implement but it might lead to unresponsive UI if the user clicks or hovers many times. \r\n2. maintain a queue of widget_events and try to apply them all sequentially. If (say) a button disappears after the first event, the second event which clicks that button is dropped.\r\n\r\nWhat is the behaviour of cancel()? Does it block until the given task reaches a cancellation point?"},{"author":"gebner","file":"library/widget/basic.lean","date":"2020-05-27T08:31:20Z","comment":"```suggestion\r\n```"},{"author":"gebner","file":"library/widget/basic.lean","date":"2020-05-27T09:01:54Z","comment":"These bullet points seem to be missing a"},{"author":"gebner","file":"library/widget/basic.lean","date":"2020-05-27T09:02:35Z","comment":"```suggestion\r\n| mk {Props : Type}\r\n```"},{"author":"gebner","file":"library/widget/basic.lean","date":"2020-05-27T09:03:59Z","comment":"Is there a reason not to make this `decidable_eq Props`?"},{"author":"gebner","file":"library/widget/default.lean","date":"2020-05-27T09:06:47Z","comment":"I think we've decided to use absolute imports instead of relative ones."},{"author":"gebner","file":"library/widget/examples.lean","date":"2020-05-27T09:08:00Z","comment":"I don't think we should include examples in the core library."},{"author":"gebner","file":"library/widget/html_cmd.lean","date":"2020-05-27T09:09:23Z","comment":"Please put it in `init.meta.tactic`."},{"author":"gebner","file":"library/widget/interactive_expr.lean","date":"2020-05-27T09:09:57Z","comment":"One case per line, please."},{"author":"gebner","file":"library/widget/replace_save_info.lean","date":"2020-05-27T09:16:05Z","comment":"```suggestion\r\n```"},{"author":"gebner","file":"library/widget/replace_save_info.lean","date":"2020-05-27T09:17:32Z","comment":"Does this mean that we need to import `library.widget` to get the awesome info view?  Should this be in `init` instead so that is imported by default?"},{"author":"gebner","file":"library/widget/tactic_component.lean","date":"2020-05-27T09:18:29Z","comment":"Please move to `init.meta.tactic`.  I have the feeling we already have a handful of these functions."},{"author":"gebner","file":"library/widget/tactic_component.lean","date":"2020-05-27T09:19:47Z","comment":"> efficiency\r\n\r\nCan you elaborate?"},{"author":"gebner","file":"library/widget/widget_interactive.lean","date":"2020-05-27T09:25:54Z","comment":"This sounds potentially contentious.\r\n\r\nSince this file is not used anywhere (except in the examples), maybe we could leave it out for now?"},{"author":"gebner","file":"src/frontends/lean/info_manager.cpp","date":"2020-05-27T09:30:12Z","comment":"```suggestion\r\nvoid widget_info::update(io_state_stream const & ios, json const & message, json & record) {\r\n```\r\n\r\nYou're already const-casting in the other `update` method."},{"author":"gebner","file":"src/frontends/lean/widget.h","date":"2020-05-27T09:34:08Z","comment":"Definitely a fixme."},{"author":"gebner","file":"src/library/vm/vm_expr.cpp","date":"2020-05-27T09:34:49Z","comment":"I thought this is no longer used?"},{"author":"gebner","file":"src/shell/server.cpp","date":"2020-05-27T09:39:14Z","comment":"`cancel` does not block, it sets an atomic boolean flag.  Lots of functions check this flag and raise an `interrupt_exception` if it is set.\r\n\r\nBoth option 1 and 2 sound good to me."},{"author":"EdAyers","file":"src/frontends/lean/widget.h","date":"2020-05-27T13:27:13Z","comment":"I don't know what to do here..."},{"author":"EdAyers","file":"library/widget/widget_interactive.lean","date":"2020-05-27T13:28:11Z","comment":"yeah that's an old comment"},{"author":"EdAyers","file":"library/widget/widget_interactive.lean","date":"2020-05-27T13:29:55Z","comment":"actually I was just using this for some tests so I'm refactoring it away"},{"author":"EdAyers","file":"library/widget/basic.lean","date":"2020-05-27T13:31:38Z","comment":"Yes, sometimes you just want it to return false all the time if you want the component to always update on a props change."},{"author":"EdAyers","file":"library/widget/basic.lean","date":"2020-05-27T13:31:58Z","comment":"There are some variants of make component which use decidable_eq instead"},{"author":"EdAyers","file":"library/widget/replace_save_info.lean","date":"2020-05-27T15:10:53Z","comment":"Correct. I'll put it in init when I've ironed out some remaining issues."},{"author":"gebner","file":"src/frontends/lean/widget.h","date":"2020-05-27T15:27:51Z","comment":"I would add a global variable `std::atomic_uint g_fresh_component_instance_id` in `widget.cpp` and then call `g_fresh_component_instance_id.fetch_add(1)`.  https://en.cppreference.com/w/cpp/atomic/atomic/fetch_add"},{"author":"gebner","file":"library/widget/basic.lean","date":"2020-05-27T15:28:12Z","comment":"Ok, seems reasonable."},{"author":"EdAyers","file":"library/widget/tactic_component.lean","date":"2020-05-27T17:33:07Z","comment":"otherwise you have to check whether the entire tactic state has changed which you can't do without implementing `hash` for tactic_state objects."},{"author":"gebner","file":"library/widget/tactic_component.lean","date":"2020-05-27T18:25:17Z","comment":"Oh, that's a bummer.  But also a good reason."},{"author":"gebner","file":"src/frontends/lean/info_manager.h","date":"2020-05-28T08:46:00Z","comment":"```suggestion\r\n    vdom         m_vdom;\r\n    mutex        m_mutex;\r\n```\r\n\r\nI've just been reading through your todo list, and yes, this will be called from multiple threads.  I think the easiest solution for now is to put a `lock_guard<mutex> _(m_mutex)` in both the `report` and `update` functions."},{"author":"EdAyers","file":"src/frontends/lean/info_manager.h","date":"2020-05-28T13:07:40Z","comment":"Do you know what this error means? \r\n```\r\nerror: binding reference of type ‘std::lock_guard<std::mutex>::mutex_type&’ {aka ‘std::mutex&’} to ‘const std::mutex’ discards qualifiers\r\n  130 |     lock_guard<mutex> _(m_mutex);\r\n      |                         ^~~~~~~\r\n```\r\nIs it because the report function is a const?"},{"author":"EdAyers","file":"src/frontends/lean/info_manager.h","date":"2020-05-28T13:11:19Z","comment":"I'm just going to move const from all the `report`s and see if that solves it"},{"author":"gebner","file":"src/frontends/lean/info_manager.h","date":"2020-05-28T13:14:21Z","comment":"I'd prefer to only have a const_cast here."},{"author":"EdAyers","file":"src/frontends/lean/info_manager.cpp","date":"2020-05-28T13:18:38Z","comment":"does this look ok?"},{"author":"gebner","file":"src/frontends/lean/info_manager.cpp","date":"2020-05-28T13:23:39Z","comment":"LGTM."}],"tags":[{"tag":"enhancement","description":"New feature or request"}],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"b3cd44ea90c69cbc21ad817850b801b6621f99bc","message":"ci(github-actions): move CI to github actions\n\nStill need to do release workflow\n#156","date":"2020-04-08T21:01:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"263bedc66ee8b90f80fe738d7b260de25734a2a6","message":"feat(widget): first draft add a widget library","date":"2020-04-27T18:31:29Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4ecf48bd1a1652de2a0f8995787baa8f0d714ca0","message":"feat(widget): computes widget json","date":"2020-04-27T18:32:18Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0c123b5f9c7cbda7fd8d7c05a461993acb98e511","message":"feat(widget): add structural pretty printing","date":"2020-04-27T18:32:40Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c506ea5e7fdae68bcae7d00bb73b24ea04ac372b","message":"chore(vscode): add vscode stuff for dev","date":"2020-04-27T18:33:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0bff7b6aa7708a4e42e5b61ae6a8da90bf2810fa","message":"feat(widget): add local state system like react","date":"2020-04-27T18:33:22Z"},{"author":"EdAyers","committer":"EdAyers","hash":"47aec870be483199e8bcf0afd3274cd28882311f","message":"chore(dev): add github action","date":"2020-04-27T20:26:15Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7ce2ab55df2fee3dcd9aa1229232bac2e67554c3","message":"chore(widget): remove scratch.lean\n\nto get the github CI to work...","date":"2020-04-27T20:52:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"1bc028876d85f89a11327f35fd4f1ca1dd3153f0","message":"Merge branch 'master' into github-actions","date":"2020-04-27T23:57:36Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b78eea2c719075b13c5bc7158d173c6218f0b47c","message":"ci(emscripten): emscripten fix assumes git repo","date":"2020-04-28T08:38:19Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4a26d2a2fdf11b736899d6288d5b26d6277b9376","message":"ci(): update github action","date":"2020-04-28T08:43:45Z"},{"author":"EdAyers","committer":"EdAyers","hash":"733f38f20b9d634b234fd044f458e61e13e40066","message":"feat(widget): add textbox support\n\nAlso tidy the widget1 test and make the special 'widget_tactic' have its own\nfile.","date":"2020-04-29T16:21:43Z"},{"author":"EdAyers","committer":"EdAyers","hash":"235c066c100c5e848f0187194c48603fad088355","message":"fix(widget): Fix todo demo.\n\nThere seems to be a vm compiler bug for the coercions that I made for components.\nI am just turning off component coercions instead of fixing","date":"2020-05-04T14:05:46Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5ffe7d58e9245b91ce0f827d4c5ef7d6ffdae85f","message":"feat(library): add mapi, for mapping with an index\n\nI am ok if this gets removed but I was getting very frustrated with its nonexistence.","date":"2020-05-04T14:34:24Z"},{"author":"EdAyers","committer":"EdAyers","hash":"86d7ceafa190b26c8cc7ac0c43e5b60c632e6d1b","message":"feat(widget): prettify tactic state","date":"2020-05-04T19:02:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6a0856f41d02c36a52c202732f2943dc50da4281","message":"chore(): remove scratch.ts a notes file","date":"2020-05-04T22:28:07Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c01ae1f1b4f82c193ea2f63054256dedc9dfacd8","message":"feat(widget): add ability to insert text in to editor","date":"2020-05-06T15:01:01Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5fe4b0aa14bb12da587ef6215fa541a7d4287fec","message":"Update comments and docstrings\n\nI'm not sure what the copyright notice should be but I've set it to my name\ninstead of Microsoft for the files that I wrote\nSorry if this is wrong.","date":"2020-05-07T12:31:14Z"},{"author":"EdAyers","committer":"EdAyers","hash":"8fcb8021e4681fc8017fa4bdfa3491d40bafe396","message":"Add implicit arguments to interactive expression.","date":"2020-05-07T12:31:42Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b19e13edcf6ceb170331348cf7d0fd25fffa42e6","message":"Merge branch 'widget' of github.com:EdAyers/lean into widget","date":"2020-05-07T12:36:22Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5d256c7d5ae14e93d10b9478555db15bda1491d3","message":"feat(widget): widgets are now saved even for vanilla `tactic`s","date":"2020-05-07T14:53:46Z"},{"author":"EdAyers","committer":"EdAyers","hash":"57b863a4e9f2a0fce74efb4c1f13f1a471d7cb9b","message":"fix(widget): fix issue where pp address was computed wrong\n\ntechnical debt: still need to fix the unit tests","date":"2020-05-07T16:26:32Z"},{"author":"EdAyers","committer":"EdAyers","hash":"615998a8ca78d461defa64cb64c38a80788c2f06","message":"Merge branch 'master' into widget","date":"2020-05-09T18:24:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"804149040986e26e094cbdbd6a42c06d3597d817","message":"kernel(): turn off universe check for meta inductive defs","date":"2020-05-09T20:21:55Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c35b36d3ddf1938e349b93af80aa80a45e93be25","message":"refactor(widget): make component and html be non-C++","date":"2020-05-10T00:43:48Z"},{"author":"EdAyers","committer":"EdAyers","hash":"26c4bcf22c5a21e0272be9723f4f6b31283fefef","message":"kernel(instantiate): expose instantiate with `s` depth parameter to lean","date":"2020-05-11T12:52:50Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0c34bf081541224eaadb72edcae2b7e1455bb502","message":"feat(widget): tidy interactive_expr.lean","date":"2020-05-11T22:27:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ff82db5a41c84b9241b4a222cdf98df6faa44ad7","message":"feat(widget): tweak expresion view styles","date":"2020-05-13T17:13:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9f4376292792f609826898c7baea472c3726ea6f","message":"Add props_are_equal for more effiicient rendering.","date":"2020-05-13T19:12:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"1648cbc2931545cc67146821a5932df25bbf5517","message":"feat(widget): add prop equality checking","date":"2020-05-14T00:24:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9d5eafea8bed13670f8888f135afeb1390641e86","message":"feat(widget): fix component reconcile issue\n\nComponents were not reconciling properly because I was checking equality\nwith pointer arithmetic. Now it uses hashes of VM objects.\nThe problem is that I didn't implement a hash for each of the\nvm_externals so I think it is likely that it will still fail if a vm\nexternal is used.","date":"2020-05-14T01:27:35Z"},{"author":"EdAyers","committer":"EdAyers","hash":"2dbbeb487b8fe89223243703af84de62fa366646","message":"feat(widget): add hash functions\nfor the most useful vm_externals","date":"2020-05-14T04:12:28Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b1fbfd1d86f0401d0f74a9c7d4e3d5f1505f1552","message":"feat(widget): vm_externs with no hash implementation\nare assumed to be equal when\ndeciding whether to rerender component.","date":"2020-05-14T04:35:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a9812346f4a198fcc7427b90cbbed7abdf44a29d","message":"Merge branch 'master' into widget","date":"2020-05-14T15:05:43Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0a0177f540f6eaf7b9ca28fb8aef093242db2acc","message":"feat(widget): fix unit tests\n\nAdd a command line option to not report widgets so that\nthe interactive tests would work properly without rewrite.\nAdd new test folder for widgets.","date":"2020-05-15T15:35:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d840c02f01d9e417edf33780d0e8cef4a963efd5","message":"feat(widget): fix widget3 unit test\n\nI was checking it with 'run_single' but should have used 'test_single'","date":"2020-05-15T16:02:47Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7b4e4fd1586c8480deb4aaee68fe54167bb113f8","message":"Tweak definition of tactic_component so tactic_state\ndoesn't persist\n\nIt used to persist but I think this is confusing because it would mean\nthat each component would have its own separate hidden tactic state.","date":"2020-05-15T21:02:41Z"},{"author":"EdAyers","committer":"EdAyers","hash":"27446ac7e896647945ffbbc79e34a616806d2dde","message":"feat(widget): fix arg order of mapi","date":"2020-05-18T11:16:54Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5747564f0827b71a3e8e9b7b15cf835fd2b674cc","message":"feat(widget): tersify widget output json.","date":"2020-05-19T14:22:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b541dd6650e60cd2ffada234440f39f48a7044fc","message":"Merge branch 'master' into widget","date":"2020-05-20T11:49:22Z"},{"author":"EdAyers","committer":"EdAyers","hash":"f5079b4bfc33563758b3a298a785ae36bd6d30b7","message":"test(widget): fix unit tests","date":"2020-05-20T12:20:00Z"},{"author":"EdAyers","committer":"EdAyers","hash":"67b778677e4f7806eb1be0987b011c08a9931917","message":"feat(widget): add `#html` command for rendering\n html and components without the need for a tactic override.","date":"2020-05-20T21:05:15Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d913feb17ad44fdb61306906d5280a882361994d","message":"chore(widget): remove personal dev files","date":"2020-05-21T13:54:41Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4482d2ca11fa2968b31a486aee98cb434bc7e43f","message":"doc(widget): improve docs and comments,\nadd changes to changes.md","date":"2020-05-21T15:14:28Z"},{"author":"EdAyers","committer":"EdAyers","hash":"07bd0015aba8dc4ad58c6d0f49b94dbdd08b9f09","message":"fix(eformat): rename magic to eformat\n\nAlso introduce tagged_format as an abtraction of eformat.","date":"2020-05-23T11:55:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0885b778dc89299e4d2ff661c210dd95dd184c38","message":"chore(widget): fix copyright notices","date":"2020-05-23T12:06:03Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ded2f86426e8711015dbabe331c624599ae71460","message":"chore(widget): branch 'master' into widget-pr\n\nvery likely that some previously deleted code has snuck back in","date":"2020-05-23T12:26:40Z"},{"author":"EdAyers","committer":"EdAyers","hash":"f27174e390c106ab14e0ba98d2e224750a2fd5ec","message":"chore(widget): Merge branch 'master' into widget-pr","date":"2020-05-26T12:03:05Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a71d50da7a2dac8749a7d3798fb234f3098ae06c","message":"feat(eformat): add support for structured formatting\n\n- Introduce a new datatype `tagged_format` for making\n  formats where certain nodes can be tagged with   information\n- Make the pretty printer templated so that it can support both `format`\n   and the new tagged_format\n- Add a tactic_state.pp_tagged : tactic_state → expr → eformat\n\nIn an ideal world. One would implement tags directly on to `format`\nhowever because format is implemented as a sexpr\nand because the widget module needs to be able to\nperform induction on the format object,\nI concluded that adding tags to `format` would\namount to an overhaul of `format` which seems too big a change.\n\nStill need to fix a formatting bug where it's not putting spaces between binders.","date":"2020-05-26T13:19:16Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4d1f286923e979c275ebc2d2ba48f42a2c2e94cc","message":"fix(eformat): pp add a space between names in a binder block","date":"2020-05-26T13:41:31Z"},{"author":"EdAyers","committer":"EdAyers","hash":"26866c16204abe7ee6ba21cebf77bec5748699e4","message":"feat(eformat): make tagged_format universe polymorphic","date":"2020-05-26T13:52:25Z"},{"author":"EdAyers","committer":"EdAyers","hash":"67aaaef04e505dd4d66c8a5e4950113df8c4321d","message":"fix(widget): remove some commented out decls","date":"2020-05-26T13:57:36Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d5b3ac53ed92249f256f7fc0aa1ab2a8c5dd951a","message":"feat(eformat): remove a fixme comment","date":"2020-05-26T14:16:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d6c22ed4653a99ba2e9f0b31376b7edbdeb311ee","message":"feat(eformat): add test for an explicit collection","date":"2020-05-26T14:23:03Z"},{"author":"EdAyers","committer":"EdAyers","hash":"fad92cfbcb2b9c602fab466cc300e933cb978da8","message":"fix(eformat): fix a potential address bug on coe\n\nThe problem is that `pp_hide_coercion` with more than 4 args rewrites the expression and then passes this to pp_child. But now you can't compute the address properly because it's not the true expression being pretty printed.\nThe ideal solution would be to rewrite `pp_child` to support adjusted function addresses.\nBut for now it just stops trying to calculate addresses on subterms which use function coes with more than 4 args.\nThis is quite a rare case anyway.","date":"2020-05-26T14:33:10Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6f8ab0d82e16ba140df803fd8f64418c77332c4b","message":"chore(widget): merge branch 'eformat-pr' into widget-pr","date":"2020-05-26T14:41:55Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d537f31d32449b36164b5535afb6ac7b183d05d4","message":"feat(widget): refactor to vm_override save_info.","date":"2020-05-26T21:52:28Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0ebec736e8390161fc84996e4409826d27f49d65","message":"fix(279): fixes a vm environment cache not updating\n\nfixes #279","date":"2020-05-26T22:05:05Z"},{"author":"EdAyers","committer":"EdAyers","hash":"221e512db0a6415d609f8fa9ba01217d3820930f","message":"chore(): merge branch 'fix-279' into widget-pr","date":"2020-05-26T23:50:41Z"},{"author":"EdAyers","committer":"EdAyers","hash":"96a2b7737ff597f4919b42adf71d2465fee0ed57","message":"chore(widget): merge branch 'master' into widget-pr","date":"2020-05-26T23:56:17Z"},{"author":"EdAyers","committer":"EdAyers","hash":"703b3918b3409460d6afac24b46fb294d088ef70","message":"fix(widget): re add missing function from merge","date":"2020-05-27T00:19:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a1d51023eea5165d64252a04788a0aa16311363a","message":"chore(widget): merge branch 'master' of github.com:leanprover-community/lean into widget-pr","date":"2020-05-27T11:44:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a072a07a1980a90b7bdf4bf5712592984ae4e416","message":"refactor(widget)\n\nTidy some comments\nAdd a test for a vm override assertion violation: more work needed.\nUpdate tests, except widget1 which is violating locally.\nRemove accidentally reintroduced expr_coord_has_dec_eq.\nChange imports to be absolute not relative.","date":"2020-05-27T15:04:42Z"},{"author":"EdAyers","committer":"EdAyers","hash":"bea9d46e3a55e4add61ad0e7866525d67e9b0500","message":"refactor(widget): move eval_pexpr to init/meta/tactic","date":"2020-05-27T15:07:05Z"},{"author":"EdAyers","committer":"EdAyers","hash":"587f8c568685c3e4e909a7e44782a726e4abe192","message":"refactor(widget): move format.color.to_string to format.lean","date":"2020-05-27T15:08:47Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0579cb4abb2ea069ba2c7b65fac84dad5bfb187c","message":"refactor(widget): remove uneeded run_cmd","date":"2020-05-27T15:09:58Z"},{"author":"EdAyers","committer":"EdAyers","hash":"2194bba3a7063a08dace694a31111df9fbc4bd38","message":"refactor(): move tactic.run_simple","date":"2020-05-27T15:11:57Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7006d9277358b19ac239f9fa027a79b00d6fffa3","message":"refactor(): remove open tactic","date":"2020-05-27T16:15:45Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9f99152c785ef622f3e41b5852be135b7ce61a9c","message":"fix(vm_override): indexes are not preserved across instances\n\nWhen VM_override was serialising a declaration, it was storing the\nvm decl index of the override.\nHowever there is no guarantee that the same decl will be given the\nsame index in different sessions, since indexes are not stored in the\nolean.\nTherefore when vm_code_modification is run it must serialise the\nname of the override decl instead of the index.","date":"2020-05-27T16:53:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"036e35dfdbfb641ac31687742d207f1189afa262","message":"merge(widget): merge branch 'fix-vm-override' into widget-pr","date":"2020-05-27T16:57:20Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6d16a7cb79069c1c5e5c5d9be29ade2890920566","message":"feat(widget): use atomic unsigned instead of statics","date":"2020-05-27T17:20:01Z"},{"author":"EdAyers","committer":"EdAyers","hash":"da79ad2f3de3c8b9fcf3bed82e072a5078e7c42d","message":"fix(widget): fix tests","date":"2020-05-27T17:26:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6adaff385f7ccb2c525405663729cff1391813fb","message":"merge(widget): Merge branch 'master' into widget-pr","date":"2020-05-27T19:49:21Z"},{"author":"EdAyers","committer":"EdAyers","hash":"cba836cee68f91dce9b295ea9ee2903037c635bb","message":"refactor(widget); remove const from widget::update","date":"2020-05-27T19:54:07Z"},{"author":"EdAyers","committer":"EdAyers","hash":"978d57d46c5925c750d725ad247aa88c42c2ed69","message":"refactor(widget): move widget to init","date":"2020-05-28T13:01:48Z"},{"author":"EdAyers","committer":"EdAyers","hash":"da2538116fe359351bcb3d7fa211df13feffd907","message":"fix(widget): add lock guard to widget_info","date":"2020-05-28T13:17:40Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9dc94c32b4b3fd767a41605056f6b19e99bdc4cf","message":"doc(widget): add documentation tidy comments","date":"2020-05-28T15:30:00Z"},{"author":"EdAyers","committer":"EdAyers","hash":"8a0340aa69a5a82c30d2991ee9273fbce219e1c9","message":"feat(widget): add a quit button to the tooltip","date":"2020-05-28T15:30:21Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7539aa397f83eda63a31110d9e20eaef8a23ed98","message":"style(widget): add some colour to goal state","date":"2020-05-28T15:47:28Z"},{"author":"EdAyers","committer":"EdAyers","hash":"2a18031fa28eeea02db7dde537de2cfbb19ba809","message":"refactor(widget): remove redundant mk_tactic_widget","date":"2020-05-28T16:16:34Z"}]},{"author":"EdAyers","number":257,"diff_summary":[{"file":"doc/changes.md","status":"A","additions":2796,"deletions":447},{"file":"doc/make/index.md","status":"A","additions":2796,"deletions":447},{"file":"library/init/data/list/basic.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/default.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/expr.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/expr_address.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/interactive.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/relation_tactics.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/tactic.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/tactic_interactive.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/widget/basic.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/widget/interactive_expr.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/widget/magic_pp.lean","status":"A","additions":2796,"deletions":447},{"file":"library/init/meta/widget/tactic_component.lean","status":"A","additions":2796,"deletions":447},{"file":"library/widget/default.lean","status":"A","additions":2796,"deletions":447},{"file":"library/widget/examples.lean","status":"A","additions":2796,"deletions":447},{"file":"library/widget/html_cmd.lean","status":"A","additions":2796,"deletions":447},{"file":"library/widget/widget_interactive.lean","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/CMakeLists.txt","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/inductive_cmds.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/info_manager.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/info_manager.h","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/init_module.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/interactive.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/interactive.h","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/pp.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/pp.h","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/widget.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/frontends/lean/widget.h","status":"A","additions":2796,"deletions":447},{"file":"src/kernel/expr.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/kernel/expr.h","status":"A","additions":2796,"deletions":447},{"file":"src/kernel/inductive/inductive.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/kernel/instantiate.h","status":"A","additions":2796,"deletions":447},{"file":"src/library/CMakeLists.txt","status":"A","additions":2796,"deletions":447},{"file":"src/library/expr_address.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/expr_address.h","status":"A","additions":2796,"deletions":447},{"file":"src/library/module_mgr.h","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/CMakeLists.txt","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/init_module.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm.h","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_array.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_expr.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_float.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_format.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_level.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_list.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_name.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_pp.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_pp.h","status":"A","additions":2796,"deletions":447},{"file":"src/library/vm/vm_string.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/shell/CMakeLists.txt","status":"A","additions":2796,"deletions":447},{"file":"src/shell/lean.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/shell/server.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/shell/server.h","status":"A","additions":2796,"deletions":447},{"file":"src/util/name.cpp","status":"A","additions":2796,"deletions":447},{"file":"src/util/name.h","status":"A","additions":2796,"deletions":447},{"file":"src/util/sexpr/format.h","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/inst.lean","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/inst.lean.expected.out","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/interactive/run_single.sh","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/mk_input.sh","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/run_single.sh","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/test_single.sh","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/widget1.input","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/widget1.input.expected.out","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/widget1.lean","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/widget2.input","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/widget2.input.expected.out","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/widget2.lean","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/widget3.input","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/widget3.input.expected.out","status":"A","additions":2796,"deletions":447},{"file":"tests/lean/widget/widget3.lean","status":"A","additions":2796,"deletions":447}],"state":"closed","open_date":"2020-05-21T15:32:17Z","update_date":"2020-05-21T15:43:09Z","discussion":[{"author":"bryangingechen","date":"2020-05-21T15:37:49Z","comment":"Sorry, do you mind re-opening this from a branch in this repo, so that we can more easily see the results of CI?"},{"author":"EdAyers","date":"2020-05-21T15:42:03Z","comment":"np"},{"author":"EdAyers","date":"2020-05-21T15:43:09Z","comment":"Closing to use branch on this repo"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"b3cd44ea90c69cbc21ad817850b801b6621f99bc","message":"ci(github-actions): move CI to github actions\n\nStill need to do release workflow\n#156","date":"2020-04-08T21:01:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"263bedc66ee8b90f80fe738d7b260de25734a2a6","message":"feat(widget): first draft add a widget library","date":"2020-04-27T18:31:29Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4ecf48bd1a1652de2a0f8995787baa8f0d714ca0","message":"feat(widget): computes widget json","date":"2020-04-27T18:32:18Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0c123b5f9c7cbda7fd8d7c05a461993acb98e511","message":"feat(widget): add structural pretty printing","date":"2020-04-27T18:32:40Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c506ea5e7fdae68bcae7d00bb73b24ea04ac372b","message":"chore(vscode): add vscode stuff for dev","date":"2020-04-27T18:33:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0bff7b6aa7708a4e42e5b61ae6a8da90bf2810fa","message":"feat(widget): add local state system like react","date":"2020-04-27T18:33:22Z"},{"author":"EdAyers","committer":"EdAyers","hash":"47aec870be483199e8bcf0afd3274cd28882311f","message":"chore(dev): add github action","date":"2020-04-27T20:26:15Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7ce2ab55df2fee3dcd9aa1229232bac2e67554c3","message":"chore(widget): remove scratch.lean\n\nto get the github CI to work...","date":"2020-04-27T20:52:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"1bc028876d85f89a11327f35fd4f1ca1dd3153f0","message":"Merge branch 'master' into github-actions","date":"2020-04-27T23:57:36Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b78eea2c719075b13c5bc7158d173c6218f0b47c","message":"ci(emscripten): emscripten fix assumes git repo","date":"2020-04-28T08:38:19Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4a26d2a2fdf11b736899d6288d5b26d6277b9376","message":"ci(): update github action","date":"2020-04-28T08:43:45Z"},{"author":"EdAyers","committer":"EdAyers","hash":"733f38f20b9d634b234fd044f458e61e13e40066","message":"feat(widget): add textbox support\n\nAlso tidy the widget1 test and make the special 'widget_tactic' have its own\nfile.","date":"2020-04-29T16:21:43Z"},{"author":"EdAyers","committer":"EdAyers","hash":"235c066c100c5e848f0187194c48603fad088355","message":"fix(widget): Fix todo demo.\n\nThere seems to be a vm compiler bug for the coercions that I made for components.\nI am just turning off component coercions instead of fixing","date":"2020-05-04T14:05:46Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5ffe7d58e9245b91ce0f827d4c5ef7d6ffdae85f","message":"feat(library): add mapi, for mapping with an index\n\nI am ok if this gets removed but I was getting very frustrated with its nonexistence.","date":"2020-05-04T14:34:24Z"},{"author":"EdAyers","committer":"EdAyers","hash":"86d7ceafa190b26c8cc7ac0c43e5b60c632e6d1b","message":"feat(widget): prettify tactic state","date":"2020-05-04T19:02:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6a0856f41d02c36a52c202732f2943dc50da4281","message":"chore(): remove scratch.ts a notes file","date":"2020-05-04T22:28:07Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c01ae1f1b4f82c193ea2f63054256dedc9dfacd8","message":"feat(widget): add ability to insert text in to editor","date":"2020-05-06T15:01:01Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5fe4b0aa14bb12da587ef6215fa541a7d4287fec","message":"Update comments and docstrings\n\nI'm not sure what the copyright notice should be but I've set it to my name\ninstead of Microsoft for the files that I wrote\nSorry if this is wrong.","date":"2020-05-07T12:31:14Z"},{"author":"EdAyers","committer":"EdAyers","hash":"8fcb8021e4681fc8017fa4bdfa3491d40bafe396","message":"Add implicit arguments to interactive expression.","date":"2020-05-07T12:31:42Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b19e13edcf6ceb170331348cf7d0fd25fffa42e6","message":"Merge branch 'widget' of github.com:EdAyers/lean into widget","date":"2020-05-07T12:36:22Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5d256c7d5ae14e93d10b9478555db15bda1491d3","message":"feat(widget): widgets are now saved even for vanilla `tactic`s","date":"2020-05-07T14:53:46Z"},{"author":"EdAyers","committer":"EdAyers","hash":"57b863a4e9f2a0fce74efb4c1f13f1a471d7cb9b","message":"fix(widget): fix issue where pp address was computed wrong\n\ntechnical debt: still need to fix the unit tests","date":"2020-05-07T16:26:32Z"},{"author":"EdAyers","committer":"EdAyers","hash":"615998a8ca78d461defa64cb64c38a80788c2f06","message":"Merge branch 'master' into widget","date":"2020-05-09T18:24:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"804149040986e26e094cbdbd6a42c06d3597d817","message":"kernel(): turn off universe check for meta inductive defs","date":"2020-05-09T20:21:55Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c35b36d3ddf1938e349b93af80aa80a45e93be25","message":"refactor(widget): make component and html be non-C++","date":"2020-05-10T00:43:48Z"},{"author":"EdAyers","committer":"EdAyers","hash":"26c4bcf22c5a21e0272be9723f4f6b31283fefef","message":"kernel(instantiate): expose instantiate with `s` depth parameter to lean","date":"2020-05-11T12:52:50Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0c34bf081541224eaadb72edcae2b7e1455bb502","message":"feat(widget): tidy interactive_expr.lean","date":"2020-05-11T22:27:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ff82db5a41c84b9241b4a222cdf98df6faa44ad7","message":"feat(widget): tweak expresion view styles","date":"2020-05-13T17:13:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9f4376292792f609826898c7baea472c3726ea6f","message":"Add props_are_equal for more effiicient rendering.","date":"2020-05-13T19:12:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"1648cbc2931545cc67146821a5932df25bbf5517","message":"feat(widget): add prop equality checking","date":"2020-05-14T00:24:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9d5eafea8bed13670f8888f135afeb1390641e86","message":"feat(widget): fix component reconcile issue\n\nComponents were not reconciling properly because I was checking equality\nwith pointer arithmetic. Now it uses hashes of VM objects.\nThe problem is that I didn't implement a hash for each of the\nvm_externals so I think it is likely that it will still fail if a vm\nexternal is used.","date":"2020-05-14T01:27:35Z"},{"author":"EdAyers","committer":"EdAyers","hash":"2dbbeb487b8fe89223243703af84de62fa366646","message":"feat(widget): add hash functions\nfor the most useful vm_externals","date":"2020-05-14T04:12:28Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b1fbfd1d86f0401d0f74a9c7d4e3d5f1505f1552","message":"feat(widget): vm_externs with no hash implementation\nare assumed to be equal when\ndeciding whether to rerender component.","date":"2020-05-14T04:35:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a9812346f4a198fcc7427b90cbbed7abdf44a29d","message":"Merge branch 'master' into widget","date":"2020-05-14T15:05:43Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0a0177f540f6eaf7b9ca28fb8aef093242db2acc","message":"feat(widget): fix unit tests\n\nAdd a command line option to not report widgets so that\nthe interactive tests would work properly without rewrite.\nAdd new test folder for widgets.","date":"2020-05-15T15:35:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d840c02f01d9e417edf33780d0e8cef4a963efd5","message":"feat(widget): fix widget3 unit test\n\nI was checking it with 'run_single' but should have used 'test_single'","date":"2020-05-15T16:02:47Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7b4e4fd1586c8480deb4aaee68fe54167bb113f8","message":"Tweak definition of tactic_component so tactic_state\ndoesn't persist\n\nIt used to persist but I think this is confusing because it would mean\nthat each component would have its own separate hidden tactic state.","date":"2020-05-15T21:02:41Z"},{"author":"EdAyers","committer":"EdAyers","hash":"27446ac7e896647945ffbbc79e34a616806d2dde","message":"feat(widget): fix arg order of mapi","date":"2020-05-18T11:16:54Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5747564f0827b71a3e8e9b7b15cf835fd2b674cc","message":"feat(widget): tersify widget output json.","date":"2020-05-19T14:22:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b541dd6650e60cd2ffada234440f39f48a7044fc","message":"Merge branch 'master' into widget","date":"2020-05-20T11:49:22Z"},{"author":"EdAyers","committer":"EdAyers","hash":"f5079b4bfc33563758b3a298a785ae36bd6d30b7","message":"test(widget): fix unit tests","date":"2020-05-20T12:20:00Z"},{"author":"EdAyers","committer":"EdAyers","hash":"67b778677e4f7806eb1be0987b011c08a9931917","message":"feat(widget): add `#html` command for rendering\n html and components without the need for a tactic override.","date":"2020-05-20T21:05:15Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d913feb17ad44fdb61306906d5280a882361994d","message":"chore(widget): remove personal dev files","date":"2020-05-21T13:54:41Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4482d2ca11fa2968b31a486aee98cb434bc7e43f","message":"doc(widget): improve docs and comments,\nadd changes to changes.md","date":"2020-05-21T15:14:28Z"}]},{"author":"gebner","number":255,"diff_summary":[{"file":"README.md","status":"M","additions":11,"deletions":3},{"file":"doc/changes.md","status":"M","additions":11,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":11,"deletions":3}],"state":"closed","open_date":"2020-05-20T08:36:17Z","update_date":"2020-05-20T09:24:57Z","discussion":[{"author":"gebner","date":"2020-05-20T08:56:56Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-20T09:24:56Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/692141366)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/692141396)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/692141384)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/692141352)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/692141341)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/692141308)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"a2f2bd1fd652cb097348fef17c161c5d56ad1e7b","message":"chore(*): release 3.14.0","date":"2020-05-20T08:35:10Z"}]},{"author":"gebner","number":254,"diff_summary":[{"file":"library/init/meta/environment.lean","status":"A","additions":89,"deletions":41},{"file":"library/init/meta/simp_tactic.lean","status":"A","additions":89,"deletions":41},{"file":"src/library/tactic/eqn_lemmas.cpp","status":"A","additions":89,"deletions":41},{"file":"src/library/tactic/simp_lemmas.h","status":"A","additions":89,"deletions":41},{"file":"tests/lean/eqn_lemma.lean","status":"A","additions":89,"deletions":41},{"file":"tests/lean/eqn_lemma.lean.expected.out","status":"A","additions":89,"deletions":41}],"state":"closed","open_date":"2020-05-19T21:36:54Z","update_date":"2020-05-20T07:57:17Z","discussion":[{"author":"gebner","date":"2020-05-20T07:26:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-20T07:57:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/691893030)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/691892947)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/691892933)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/691893004)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/691892993)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/691892977)"}],"review_discussion":[{"author":"urkud","file":"library/init/meta/environment.lean","date":"2020-05-19T22:18:49Z","comment":"What's the difference between this and https://github.com/leanprover-community/lean/blob/master/library/init/meta/simp_tactic.lean#L121?"},{"author":"gebner","file":"library/init/meta/environment.lean","date":"2020-05-20T07:04:43Z","comment":"The difference is that I didn't look for the function there. :smile:\r\n\r\nThe new functions are better because they operate on the environment directly and don't require a tactic state.  So I've implemented `get_eqn_lemmas_for` using the new function."}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"67f83d06f3108304b4b72a6dc70672563895b624","message":"feat(library/vm/vm_environment): expose eqn_lemma functions","date":"2020-05-19T21:25:46Z"},{"author":"gebner","committer":"gebner","hash":"07597210eba176789e065924e30281e6e95e8f53","message":"Add test.","date":"2020-05-19T21:26:37Z"},{"author":"gebner","committer":"gebner","hash":"925b5c972da8f43d0ad9659ebdf0fb4d639872c1","message":"Improve import speed a bit. :-)","date":"2020-05-19T21:35:26Z"},{"author":"gebner","committer":"gebner","hash":"2978888aaff2ff7b8bb1a2d74418812335f6bf35","message":"Reimplement get_eqn_lemmas_for using environment.get_eqn_lemmas_for","date":"2020-05-20T07:03:24Z"}]},{"author":"gebner","number":253,"diff_summary":[{"file":"src/util/lean_path.cpp","status":"M","additions":16,"deletions":14},{"file":"tests/lean/interactive/complete_import.lean.expected.out","status":"M","additions":16,"deletions":14},{"file":"tests/lean/missing_import.lean.expected.out","status":"M","additions":16,"deletions":14}],"state":"closed","open_date":"2020-05-19T16:54:44Z","update_date":"2020-05-20T07:57:19Z","discussion":[{"author":"gebner","date":"2020-05-20T07:26:33Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-20T07:57:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/691893030)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/691892947)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/691892933)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/691893004)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/691892993)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/691892977)"}],"review_discussion":[{"author":"bryangingechen","file":"src/util/lean_path.cpp","date":"2020-05-19T23:23:34Z","comment":"```suggestion\r\n        << \"Use 'lean --path' to see where lean is looking, or https://leanproject-community.github.io/file-not-found.html for more\"),\r\n```\r\nWe could make it work without `.html` if we put effort into URL routing, but we haven't yet."},{"author":"digama0","file":"src/util/lean_path.cpp","date":"2020-05-19T23:26:51Z","comment":"```suggestion\r\n        << \"Use 'lean --path' to see where lean is looking, or https://leanprover-community.github.io/file-not-found.html for more\"),\r\n```\r\nSo who's going to write this page?"},{"author":"bryangingechen","file":"src/util/lean_path.cpp","date":"2020-05-19T23:30:51Z","comment":"Thanks, I missed that. \r\n\r\nI made a start on the file in [this PR](https://github.com/leanprover-community/leanprover-community.github.io/pull/23), but it definitely needs more material."},{"author":"gebner","file":"src/util/lean_path.cpp","date":"2020-05-20T07:17:43Z","comment":"@bryangingechen Thanks for taking care of the web site!"}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"bc2a2b851e6416d94d2740ed80351e8c5d2455fb","message":"chore(*): better error message on wrong import","date":"2020-05-19T16:38:47Z"},{"author":"gebner","committer":"web-flow","hash":"b4a14334c459f331583d09d7e118c80a8b43fa75","message":"Update src/util/lean_path.cpp\n\nCo-authored-by: Mario Carneiro <di.gama@gmail.com>","date":"2020-05-20T07:17:20Z"},{"author":"gebner","committer":"gebner","hash":"415c9f8398bdc788540cfc26ee963704ecc8ed3c","message":"Fix tests.","date":"2020-05-20T07:22:45Z"},{"author":"gebner","committer":"gebner","hash":"1155f08cbe46f6d1caa1b914e5a7e689e123c21e","message":"Merge remote-tracking branch 'origin/master' into lp","date":"2020-05-20T07:22:48Z"}]},{"author":"gebner","number":252,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":2,"deletions":6}],"state":"closed","open_date":"2020-05-19T16:27:05Z","update_date":"2020-05-19T16:58:38Z","discussion":[{"author":"gebner","date":"2020-05-19T16:27:28Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-19T16:58:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/689765031)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/689765089)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/689765073)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/689765010)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/689764991)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/689765056)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"b6046e608611198cf3f09d796bd74b71a67353ca","message":"fix(github/workflows): fix msys2 ci","date":"2020-05-19T16:05:51Z"}]},{"author":"gebner","number":251,"diff_summary":[{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":71,"deletions":51},{"file":"src/library/type_context.cpp","status":"A","additions":71,"deletions":51},{"file":"tests/lean/run/coe_fn_mvar.lean","status":"A","additions":71,"deletions":51}],"state":"closed","open_date":"2020-05-19T15:58:26Z","update_date":"2020-05-19T18:27:29Z","discussion":[{"author":"Kha","date":"2020-05-19T16:24:19Z","comment":"You might be interested in https://github.com/leanprover/lean4/commit/18a89abbe6d0f0528195462098a4663f5c952275 :)"},{"author":"gebner","date":"2020-05-19T16:53:08Z","comment":"Note that this a fairly safe change, since the elaborator only calls type class synthesis for goals that do not have metavariables (except for `out_params`).  So this should only really affect coercions to functions/types, or manual calls to `mk_instance`.\r\n\r\nmathlib builds without a single error.\r\n\r\nFor completeness, I'll also try to disable the corresponding check for standard coercions."},{"author":"gebner","date":"2020-05-19T17:24:16Z","comment":"mathlib still builds."},{"author":"gebner","date":"2020-05-19T17:58:14Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-19T18:27:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/690045584)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/690045624)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/690045603)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/690045557)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/690045545)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/690045648)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"7bd05bc5642fa4adb7b45525aeee1bb7530d1531","message":"feat(library/type_context): tc synth with mvar in type","date":"2020-05-19T15:57:00Z"},{"author":"gebner","committer":"gebner","hash":"7c4326d3c8c9d7b7300278d891d617376f1508b8","message":"Backport test case from Lean 4.","date":"2020-05-19T16:19:25Z"},{"author":"gebner","committer":"gebner","hash":"d7cad011afbe9d96c97e8de3d143b4e0a007b49b","message":"Also remove check for other coercions.","date":"2020-05-19T16:57:35Z"},{"author":"gebner","committer":"gebner","hash":"ad59b5bcea496f1066224d1fc707b09b0b96755c","message":"Merge remote-tracking branch 'origin/master' into coe_fn_mvar","date":"2020-05-19T16:59:17Z"}]},{"author":"gebner","number":250,"diff_summary":[{"file":"README.md","status":"M","additions":8,"deletions":2},{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2}],"state":"closed","open_date":"2020-05-18T10:42:10Z","update_date":"2020-05-18T11:10:28Z","discussion":[{"author":"gebner","date":"2020-05-18T10:42:27Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-18T11:10:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/684951749)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/684951784)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/684951775)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/684951727)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/684951716)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/684951763)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"2163d7d8063ac3df072823551ae8536badcb5c5c","message":"chore(*): release 3.13.2","date":"2020-05-18T10:34:39Z"}]},{"author":"gebner","number":249,"diff_summary":[{"file":"src/library/module.cpp","status":"A","additions":19,"deletions":6},{"file":"src/library/module.h","status":"A","additions":19,"deletions":6},{"file":"src/library/string.h","status":"A","additions":19,"deletions":6},{"file":"tests/lean/run/doc_string7a.lean","status":"A","additions":19,"deletions":6},{"file":"tests/lean/run/doc_string7b.lean","status":"A","additions":19,"deletions":6}],"state":"closed","open_date":"2020-05-18T09:30:36Z","update_date":"2020-05-18T10:11:46Z","discussion":[{"author":"gebner","date":"2020-05-18T09:45:46Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-18T10:11:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/684791346)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/684791418)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/684791406)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/684791449)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/684791438)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/684791378)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"2e16e11b6a402cb5311587616e8a0afec9b2038b","message":"fix(library/module): do not implicitly cast bool to int","date":"2020-05-18T09:28:46Z"}]},{"author":"bryangingechen","number":246,"diff_summary":[{"file":"README.md","status":"M","additions":11,"deletions":5},{"file":"doc/changes.md","status":"M","additions":11,"deletions":5},{"file":"src/CMakeLists.txt","status":"M","additions":11,"deletions":5}],"state":"closed","open_date":"2020-05-17T03:13:30Z","update_date":"2020-05-17T03:58:08Z","discussion":[{"author":"bryangingechen","date":"2020-05-17T03:13:53Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-05-17T03:58:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/682029455)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/682029441)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/682029436)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/682029470)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/682029459)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/682029480)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"ded31435b171b43edd765aeecceb383a0903b66f","message":"chore(*): release 3.13.1","date":"2020-05-17T03:12:16Z"}]},{"author":"bryangingechen","number":245,"diff_summary":[{"file":"library/init/data/int/comp_lemmas.lean","status":"M","additions":219,"deletions":221},{"file":"library/init/data/int/order.lean","status":"M","additions":219,"deletions":221},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":219,"deletions":221}],"state":"closed","open_date":"2020-05-16T22:26:42Z","update_date":"2020-05-17T03:32:21Z","discussion":[{"author":"bryangingechen","date":"2020-05-17T03:07:10Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-05-17T03:32:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/682002742)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/682002739)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/682002735)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/682002752)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/682002749)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/682002758)"}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"d22af51117362ea7cc07d99c7c12664becf8de10","message":"fix(library/init/data/int/order): remove double namespaces","date":"2020-05-16T22:25:51Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"80acc124dd2d264baf847eb8c29b9218959d3551","message":"protect nat_lemmas","date":"2020-05-17T00:50:26Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"652a93999e174f37cb3c31ce17138eccdbb610af","message":"protect int_lemmas,\n\nalso rename:\n- int.mul_sub_left_distrib\n  -> int.mul_sub,\n- int.mul_sub_right_distrib\n  -> int.sub_mul","date":"2020-05-17T01:46:55Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"d7b9781474e555892725c069a354627aced26d58","message":"fix build","date":"2020-05-17T01:59:49Z"}]},{"author":"jcommelin","number":243,"diff_summary":[{"file":"README.md","status":"M","additions":19,"deletions":2},{"file":"doc/changes.md","status":"M","additions":19,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":19,"deletions":2}],"state":"closed","open_date":"2020-05-16T18:41:55Z","update_date":"2020-05-16T19:44:25Z","discussion":[{"author":"bryangingechen","date":"2020-05-16T19:18:03Z","comment":"LGTM!\r\nbors r+"},{"author":"bors[bot]","date":"2020-05-16T19:44:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/681402099)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/681402096)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/681402092)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/681402079)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/681402074)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/681402108)"}],"review_discussion":[],"tags":[],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"3128ba828c0fd1e17f982ba15f8a28e29f5af21f","message":"chore(*): release 3.13.0","date":"2020-05-16T18:39:42Z"}]},{"author":"gebner","number":241,"diff_summary":[{"file":"src/library/documentation.cpp","status":"M","additions":23,"deletions":16},{"file":"src/library/documentation.h","status":"M","additions":23,"deletions":16},{"file":"src/library/module.cpp","status":"M","additions":23,"deletions":16},{"file":"src/library/module.h","status":"M","additions":23,"deletions":16},{"file":"src/library/string.h","status":"M","additions":23,"deletions":16},{"file":"src/library/tactic/tactic_state.cpp","status":"M","additions":23,"deletions":16}],"state":"closed","open_date":"2020-05-15T18:30:54Z","update_date":"2020-05-15T19:59:02Z","discussion":[{"author":"gebner","date":"2020-05-15T19:32:19Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T19:59:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/679297456)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/679297380)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/679297362)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/679297516)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/679297495)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/679297479)"},{"author":"bryangingechen","date":"2020-05-18T01:18:23Z","comment":"I think this commit broke `tactic.olean_doc_strings`: see [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/preparing.20for.20lean-3.2E13.2E0/near/197872929).\r\n\r\n**Edit**: fixed in #249. "}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"7c84cbc197ea940cfff33392372e19f100c412a4","message":"perf(library/module): use persistent data structures","date":"2020-05-15T18:30:06Z"}]},{"author":"gebner","number":240,"diff_summary":[{"file":"src/library/class.cpp","status":"A","additions":32,"deletions":6},{"file":"tests/lean/attributes.lean.expected.out","status":"A","additions":32,"deletions":6},{"file":"tests/lean/run/disable_instance.lean","status":"A","additions":32,"deletions":6}],"state":"closed","open_date":"2020-05-15T15:09:41Z","update_date":"2020-05-15T17:49:58Z","discussion":[{"author":"gebner","date":"2020-05-15T17:07:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T17:49:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/678931842)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/678931788)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678931769)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/678931830)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/678931821)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/678931855)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f111a98a0f0bd59e52dcfd8e7223ebe211bcc744","message":"feat(library/class): support `local attribute [-instance]`","date":"2020-05-15T15:08:16Z"},{"author":"gebner","committer":"gebner","hash":"fccc3a4de1850e4e74b126c966d7f893d6c7255f","message":"Fix test.","date":"2020-05-15T15:20:09Z"}]},{"author":"gebner","number":239,"diff_summary":[{"file":"src/frontends/lean/tactic_notation.cpp","status":"A","additions":29,"deletions":8},{"file":"tests/lean/interactive/goal_info_semicolon.lean","status":"A","additions":29,"deletions":8},{"file":"tests/lean/interactive/goal_info_semicolon.lean.expected.out","status":"A","additions":29,"deletions":8}],"state":"closed","open_date":"2020-05-15T14:49:35Z","update_date":"2020-05-15T17:50:00Z","discussion":[{"author":"bryangingechen","date":"2020-05-15T15:19:08Z","comment":"Awesome! Could you add some tests?"},{"author":"gebner","date":"2020-05-15T17:07:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T17:49:59Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/678931842)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/678931788)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678931769)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/678931830)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/678931821)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/678931855)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"8909624d59c89ea4ab161dea1a17f04be5f576ec","message":"feat(frontends/lean/tactic_notation): show goal after ;","date":"2020-05-15T14:47:43Z"},{"author":"gebner","committer":"gebner","hash":"7c4c87107fda81dee8b034b38ff36e77472ad833","message":"Add test.","date":"2020-05-15T15:26:13Z"}]},{"author":"gebner","number":238,"diff_summary":[{"file":"src/library/tactic/simp_lemmas.cpp","status":"A","additions":16,"deletions":0},{"file":"tests/lean/run/163c.lean","status":"A","additions":16,"deletions":0}],"state":"closed","open_date":"2020-05-15T12:47:25Z","update_date":"2020-05-15T13:47:19Z","discussion":[{"author":"gebner","date":"2020-05-15T13:13:05Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T13:47:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/678170076)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/678170147)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678170140)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/678170123)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/678170114)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/678170097)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"54b2d57062483676612957ed3f7d12cd61e2b6ae","message":"fix(library/tactic/simp_lemmas): ==: compare id\n\nThis is not perfect, but it's fast and solves the issue at hand.","date":"2020-05-15T12:45:58Z"}]},{"author":"gebner","number":237,"diff_summary":[{"file":"src/library/congr_lemma.cpp","status":"A","additions":17,"deletions":6},{"file":"tests/lean/run/236c.lean","status":"A","additions":17,"deletions":6}],"state":"closed","open_date":"2020-05-15T12:10:46Z","update_date":"2020-05-15T12:59:52Z","discussion":[{"author":"gebner","date":"2020-05-15T12:29:35Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T12:59:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/678044395)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/678044360)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678044351)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/678044320)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/678044304)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/678044385)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"77f172c3c38f4b9166379f3715d339aad3348f79","message":"fix(library/congr_lemma): mark deps of fixed as fixed","date":"2020-05-15T12:09:24Z"}]},{"author":"gebner","number":235,"diff_summary":[{"file":"README.md","status":"M","additions":18,"deletions":2},{"file":"doc/changes.md","status":"M","additions":18,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":18,"deletions":2}],"state":"closed","open_date":"2020-05-14T12:46:38Z","update_date":"2020-05-14T13:17:27Z","discussion":[{"author":"gebner","date":"2020-05-14T12:47:47Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-14T13:17:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/674478929)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/674479007)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/674478997)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/674479053)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/674479034)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/674478961)"}],"review_discussion":[{"author":"gebner","file":"doc/changes.md","date":"2020-05-14T12:46:52Z","comment":"```suggestion\r\n  - Tactic combinators with informative results (#212)\r\n```"}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"231df3b99853eb565a25b371e9da258f3c687c1a","message":"chore(*): release 3.12.0","date":"2020-05-14T12:41:04Z"},{"author":"gebner","committer":"web-flow","hash":"931e7dc9890a45583f5057b1134153b9301e3d3b","message":"Update doc/changes.md","date":"2020-05-14T12:46:57Z"}]},{"author":"gebner","number":234,"diff_summary":[{"file":"src/frontends/lean/cmd_table.h","status":"M","additions":130,"deletions":47},{"file":"src/kernel/inductive/inductive.cpp","status":"M","additions":130,"deletions":47},{"file":"src/library/projection.h","status":"M","additions":130,"deletions":47},{"file":"src/library/tactic/simp_lemmas.cpp","status":"M","additions":130,"deletions":47},{"file":"src/library/tactic/simp_lemmas.h","status":"M","additions":130,"deletions":47},{"file":"src/library/user_recursors.h","status":"M","additions":130,"deletions":47},{"file":"src/library/vm/vm.cpp","status":"M","additions":130,"deletions":47},{"file":"src/util/sexpr/option_declarations.h","status":"M","additions":130,"deletions":47},{"file":"tests/lean/attribute_bug1.lean.expected.out","status":"M","additions":130,"deletions":47}],"state":"closed","open_date":"2020-05-14T09:51:05Z","update_date":"2020-05-15T08:53:24Z","discussion":[{"author":"gebner","date":"2020-05-14T09:51:43Z","comment":"I'll compile mathlib with this change to evaluate the performance difference (of running `by simp` after `import all`)."},{"author":"gebner","date":"2020-05-14T10:12:41Z","comment":"There is one unexpected user-facing change: if you set `_refl_lemma` manually, you need to do this before you set the `simp` attribute now."},{"author":"gebner","date":"2020-05-14T11:05:35Z","comment":"The performance is *nice*:\r\n```\r\n   38ms    46.9%   simp_lemmas.mk_default\r\n```\r\n\r\nThis is after `import all`.  Unfortunately it segfaults on windows, mac, and emscripten."},{"author":"digama0","date":"2020-05-14T11:07:38Z","comment":"At least it works on all the important OS's..."},{"author":"gebner","date":"2020-05-14T16:02:30Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-05-14T16:12:13Z","comment":"## try\n\nBuild failed:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/675126755)"},{"author":"gebner","date":"2020-05-15T08:19:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T08:53:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/677391740)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/677391713)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/677391707)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/677391772)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/677391761)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/677391794)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"26ae0a7fec042d80820b14b54eaa8b199888d3ba","message":"perf(simp_lemmas): cache constructed simp_lemma objects","date":"2020-05-14T09:48:10Z"},{"author":"gebner","committer":"gebner","hash":"d28a1dea6c4585303d92e1418303af825912776b","message":"Keep lemma ordering.","date":"2020-05-14T10:13:09Z"},{"author":"gebner","committer":"gebner","hash":"356d3b9fce807e729b0e7312ac478b0a5b7e232e","message":"Style.","date":"2020-05-14T10:14:23Z"},{"author":"gebner","committer":"gebner","hash":"cec233bfa613c73577394d6d1c8aef69cb15c92d","message":"Fix tests.","date":"2020-05-14T10:15:20Z"},{"author":"gebner","committer":"gebner","hash":"6ecfdc11b46fbae3347ff9e080969d5f84f005f0","message":"Do not copy an attribute.","date":"2020-05-14T11:13:34Z"},{"author":"gebner","committer":"gebner","hash":"002844e4a13730d3ad5f1af6512ec4fadc5f4c1f","message":"Fix memory leak.","date":"2020-05-14T16:33:47Z"},{"author":"gebner","committer":"gebner","hash":"91bf4778ea779dc43f4578e170904fd00d0b91ae","message":"Fix uninitialized fields.","date":"2020-05-14T16:40:05Z"},{"author":"gebner","committer":"gebner","hash":"a7706928ad0d2a20ba73eb1c676aaa6530ad47d4","message":"Add a lean_unreachable","date":"2020-05-14T16:48:34Z"},{"author":"gebner","committer":"gebner","hash":"b17c0eafd3ec3032fce2beabee67e84e24b95be7","message":"Remove \"dummy\" simp lemma.","date":"2020-05-14T17:11:04Z"},{"author":"gebner","committer":"gebner","hash":"31378681dc92d0e1ca7e9cd3001eb1ce5a4b2da1","message":"Remove unused footgun.","date":"2020-05-14T17:33:03Z"}]},{"author":"kckennylau","number":233,"diff_summary":[{"file":"library/init/algebra/ring.lean","status":"M","additions":4,"deletions":4}],"state":"closed","open_date":"2020-05-13T21:39:39Z","update_date":"2020-05-16T19:13:00Z","discussion":[{"author":"bryangingechen","date":"2020-05-13T22:02:45Z","comment":"Did you see #229? That PR removes `init.algebra.ring` entirely. I think you may want to make this change in the corresponding mathlib PR when it appears."},{"author":"jcommelin","date":"2020-05-14T04:19:33Z","comment":"Yup, I would prefer to wait a couple of days."},{"author":"bryangingechen","date":"2020-05-16T19:13:00Z","comment":"I'm closing this for now. This change should be done with the rest of the algebra cleanup in mathlib that we can start on after leanprover-community/mathlib#2697 lands (maybe in a few hours?)."}],"review_discussion":[],"tags":[],"commits":[{"author":"kckennylau","committer":"web-flow","hash":"e9f04f7bf34e1e7051695672791d5d6934ae52d6","message":"Update ring.lean","date":"2020-05-13T21:39:27Z"}]},{"author":"JLimperg","number":231,"diff_summary":[{"file":"library/init/meta/format.lean","status":"M","additions":5,"deletions":1}],"state":"open","open_date":"2020-05-12T14:50:10Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"JLimperg","date":"2020-05-12T14:52:24Z","comment":"I'm not actually sure that this is a good idea, because of the meta issue. For meta types like `name` and `expr`, this instance is fine, but for non-meta types, people should really define both `has_to_format` and `has_to_string`."}],"review_discussion":[],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"a225bac3df8f5616d9ff7bd3cb63f5c78c32b510","message":"feat(library/init/meta/format): has_to_format α implies has_to_string α\n\nThis commit adds a low-priority meta instance which concludes\n`has_to_string α` from `has_to_format α`. The instance has to be meta\nsince `format` is meta. This means that for most types, it is still\npreferable to give a non-meta `has_to_string` instance manually.","date":"2020-05-12T14:43:45Z"}]},{"author":"JLimperg","number":230,"diff_summary":[{"file":"library/init/meta/case_tag.lean","status":"M","additions":75,"deletions":40},{"file":"library/init/meta/name.lean","status":"M","additions":75,"deletions":40},{"file":"tests/lean/vm_override.lean","status":"M","additions":75,"deletions":40},{"file":"tests/lean/vm_override.lean.expected.out","status":"M","additions":75,"deletions":40}],"state":"closed","open_date":"2020-05-12T14:16:06Z","update_date":"2020-05-13T09:40:59Z","discussion":[{"author":"gebner","date":"2020-05-13T09:12:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-05-13T09:40:58Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/670196975)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/670197032)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/670197010)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/670196909)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/670196882)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/670196947)"}],"review_discussion":[],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"47651710f01699d3fd977a97ad4aaab165c9d462","message":"feat(library/init/meta/*): add some printing instances\n\nInstances added:\n\n- has_repr name\n- has_repr case_tag\n- has_to_format case_tag\n  (implies has_to_tactic_format case_tag)","date":"2020-05-12T14:12:42Z"},{"author":"JLimperg","committer":"JLimperg","hash":"7fe1b46c246390a5c0db7925c1f7d13506100bba","message":"fix spurious test failure","date":"2020-05-12T14:40:34Z"}]},{"author":"jcommelin","number":229,"diff_summary":[{"file":"library/data/bitvec.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/data/rbtree/basic.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/data/stream.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/algebra/default.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/algebra/field.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/algebra/functions.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/algebra/group.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/algebra/norm_num.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/algebra/ordered_field.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/algebra/ordered_group.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/algebra/ordered_ring.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/algebra/ring.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/array/slice.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/int/basic.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/int/comp_lemmas.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/int/order.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/list/lemmas.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/nat/basic.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/nat/bitwise.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/nat/gcd.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/nat/lemmas.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/data/string/ops.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/init/meta/well_founded_tactics.lean","status":"D","additions":1289,"deletions":4556},{"file":"library/system/io.lean","status":"D","additions":1289,"deletions":4556},{"file":"src/library/CMakeLists.txt","status":"D","additions":1289,"deletions":4556},{"file":"src/library/app_builder.cpp","status":"D","additions":1289,"deletions":4556},{"file":"src/library/app_builder.h","status":"D","additions":1289,"deletions":4556},{"file":"src/library/arith_instance.cpp","status":"D","additions":1289,"deletions":4556},{"file":"src/library/arith_instance.h","status":"D","additions":1289,"deletions":4556},{"file":"src/library/constants.cpp","status":"D","additions":1289,"deletions":4556},{"file":"src/library/constants.h","status":"D","additions":1289,"deletions":4556},{"file":"src/library/constants.txt","status":"D","additions":1289,"deletions":4556},{"file":"src/library/equations_compiler/elim_match.cpp","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/123-2.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/123-2.lean.expected.out","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/1862.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/1862.lean.expected.out","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/1898.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/1898.lean.expected.out","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/1952.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/1952.lean.expected.out","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/bad_end_error_pos.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/field_type_mismatch.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/field_type_mismatch.lean.expected.out","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/get_unused_name.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/interactive/goal_info.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/nested_match.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/out_param_proj.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/quote_error_pos.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/quote_error_pos.lean.expected.out","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/rquote.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/rquote.lean.expected.out","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/1442.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/1675.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/1685.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/236c.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/ac_refl1.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/add_semi.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/aexp.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/auto_param_in_structures.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/auto_quote1.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/bin_tree.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/cc_ac1.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/cc_ac2.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/cc_ac3.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/cc_ac5.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/cc_ac_bug.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/check_constants.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/conv_tac1.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/cpdt.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/dsimp_options.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/dsimp_proj.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/ematch2.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/ematch_attr_to_defs.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/eq_cases_on.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/funext_tactic.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/handthen.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/hinst_lemma1.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/hinst_lemmas1.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/interactive1.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/intros_defeq_canonizer_bug.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/local_attribute.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/mario_type_context.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/mrw.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/name_resolution_with_params_bug.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/nat_sub_ematch.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/psum_wf_rec.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/rw1.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/sebastien_coe_simp.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/show_goal.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/simp_lemma_issue.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/simp_lemmas_with_mvars.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/simp_tc_err.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/simp_zeta.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/smt_assert_define.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/smt_ematch1.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/smt_ematch2.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/smt_ematch3.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/smt_ematch_alg_issue.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/smt_tests.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/term_app2.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/u_eq_max_u_v.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/run/using_smt2.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/simp_symm.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/task.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/type_context.lean","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/type_context.lean.expected.out","status":"D","additions":1289,"deletions":4556},{"file":"tests/lean/vm_override.lean","status":"D","additions":1289,"deletions":4556}],"state":"closed","open_date":"2020-05-11T17:42:08Z","update_date":"2020-05-15T18:28:13Z","discussion":[{"author":"gebner","date":"2020-05-11T17:49:20Z","comment":"Can you merge master?  The diff is full with changes from your `norm_num` PR."},{"author":"gebner","date":"2020-05-11T17:50:50Z","comment":"Also: PR title!"},{"author":"urkud","date":"2020-05-11T18:04:53Z","comment":"What's the point of commenting out the code instead of deleting it?"},{"author":"jcommelin","date":"2020-05-11T18:08:40Z","comment":"Because it's still somewhat WIPpy. I didn't know if it had to be resurrected or not."},{"author":"jcommelin","date":"2020-05-12T05:18:16Z","comment":"I've now also removed a whole bunch of commented code."},{"author":"jcommelin","date":"2020-05-12T06:32:49Z","comment":"There's a whole bunch of tests failing. What do we want to do with them? I've removed one that I think clearly could be removed, but I'm not sure what to do with most of them."},{"author":"gebner","date":"2020-05-12T09:19:15Z","comment":"> There's a whole bunch of tests failing. What do we want to do with them? I've removed one that I think clearly could be removed, but I'm not sure what to do with most of them.\r\n\r\nI've quickly looked over the failing tests:\r\n 1. Some tests fail because you've removed lemmas that the C++ code relies on (and that are listed in `constants.txt`).  Check the errors in the `check_constants.lean` and put the lemmas back.\r\n 2. `(by cc : a + b = b + a)` requires instances for `is_associative (+)` and `is_commutative (+)`.  Add them back (locally?).  Same goes for `ac_refl`.\r\n 3. Often `add_comm` can be replaced by `nat.add_comm`.\r\n 4. Try to keep the spirit of the test.\r\n 4. Many tests are named after the issue number, check the old Lean bug tracker to figure out what the test is supposed to be testing.  That is, for `1898.lean` go to https://github.com/leanprover/lean/issues/1898"},{"author":"gebner","date":"2020-05-15T17:07:24Z","comment":"LGTM.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-05-15T17:19:19Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678900032)"},{"author":"bryangingechen","date":"2020-05-15T17:42:57Z","comment":"A test from #237 needs to be updated: https://github.com/leanprover-community/lean/runs/678900032#step:8:1241"},{"author":"gebner","date":"2020-05-15T17:47:30Z","comment":"bors d+"},{"author":"bors[bot]","date":"2020-05-15T17:47:31Z","comment":":v: jcommelin can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"jcommelin","date":"2020-05-15T17:48:22Z","comment":"bors merge\r\n\r\npleeeease....."},{"author":"bors[bot]","date":"2020-05-15T18:28:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/679015007)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/679014981)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/679014973)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/679015043)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/679015037)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/679014934)"}],"review_discussion":[{"author":"gebner","file":"library/init/algebra/functions.lean","date":"2020-05-15T08:08:01Z","comment":"```suggestion\r\n```"},{"author":"gebner","file":"library/init/algebra/functions.lean","date":"2020-05-15T08:08:26Z","comment":"```suggestion\r\n```"},{"author":"gebner","file":"library/init/algebra/functions.lean","date":"2020-05-15T08:08:53Z","comment":"Please remove."},{"author":"gebner","file":"library/init/data/int/basic.lean","date":"2020-05-15T08:09:08Z","comment":"```suggestion\r\nimport init.data.nat.lemmas\r\n```"},{"author":"gebner","file":"library/init/data/int/basic.lean","date":"2020-05-15T08:09:31Z","comment":"Please remove."},{"author":"gebner","file":"library/init/data/int/basic.lean","date":"2020-05-15T08:09:50Z","comment":"Please remove."},{"author":"gebner","file":"library/init/data/int/order.lean","date":"2020-05-15T08:11:11Z","comment":"Please remove."},{"author":"gebner","file":"library/init/data/int/order.lean","date":"2020-05-15T08:12:00Z","comment":"Please remove."},{"author":"gebner","file":"library/init/data/int/order.lean","date":"2020-05-15T08:12:09Z","comment":"Please remove."},{"author":"gebner","file":"library/init/data/nat/bitwise.lean","date":"2020-05-15T08:12:26Z","comment":"```suggestion\r\n```"},{"author":"gebner","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T08:15:14Z","comment":"I'm not sure if you should remove the gcd.  `nat.gcd` and `int.gcd` have an efficient VM implementations using GMP.\r\n\r\nOne option is to keep the gcd implementation as meta constants, and then use `vm_override` in mathlib to hook up to fast implementation:\r\n```lean\r\nmeta constant nat.gcd_gmp : ℕ → ℕ → ℕ\r\n\r\n-- in mathlib:\r\n@[vm_override nat.gcd_gmp]\r\ndef nat.gcd : ℕ → ℕ → ℕ := ...\r\n```"},{"author":"gebner","file":"library/init/data/nat/lemmas.lean","date":"2020-05-15T08:15:27Z","comment":"Please remove."},{"author":"jcommelin","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T08:58:55Z","comment":"@digama0 I thought you said it could go. I'll let you two decide, and then fix accordingly."},{"author":"jcommelin","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T12:59:34Z","comment":"Ok, I'm putting the defs back"},{"author":"digama0","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T15:20:59Z","comment":"Oh, I didn't know that these were vm overridden. If so, then they should stay. But AFAIR they don't require much automation, although the def has to be stated a bit differently for the decreasing proof to work."},{"author":"jcommelin","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T16:14:15Z","comment":"@digama0 I don't follow. Is there something that should be changed? The CI seems happy."},{"author":"digama0","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T16:28:02Z","comment":"I'm not sure what the latest version of this is, but you've probably fixed it. You asked about it earlier and I said to shift the `| (succ x) y := ...` cases to `| (succ x) := \\lam y, ...` so that lean gets the recursion domain right."},{"author":"jcommelin","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T16:38:33Z","comment":"@digama0 Aah, that was on a different branch. I decided not to pursue that here.\r\nAnyways, that settles this discussion, I think."},{"author":"digama0","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T16:40:32Z","comment":"What happened to removing `default_dec_tac`? Isn't that needed for the decoupling project?"},{"author":"jcommelin","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T17:26:07Z","comment":"No, it turns out that it isn't needed."},{"author":"jcommelin","file":"library/init/data/nat/gcd.lean","date":"2020-05-15T17:26:26Z","comment":"It might still be a good idea. But it can be a different PR."}],"tags":[{"tag":"enhancement","description":"New feature or request"},{"tag":"rfc","description":""}],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"e55c7e16cf285c6cc77fe9c3d2c25569dea4155c","message":"Remove norm_num","date":"2020-05-11T07:35:15Z"},{"author":"jcommelin","committer":"jcommelin","hash":"a349f31b65d8bc75813b214c774acad7e4937c00","message":"Remove a bunch of tests","date":"2020-05-11T08:02:18Z"},{"author":"jcommelin","committer":"jcommelin","hash":"b1c6ca152781b78626ae5c6ac0acdef535bd03d3","message":"And remove another test","date":"2020-05-11T08:03:47Z"},{"author":"jcommelin","committer":"jcommelin","hash":"93ac6c4dca5d886e4be4ddebdb7e4b4c4098a761","message":"Merge remote-tracking branch 'origin/master' into remove-norm-num","date":"2020-05-11T10:49:57Z"},{"author":"jcommelin","committer":"jcommelin","hash":"864a42536f889b2a99aea3ea3f0f06a9b2320a4e","message":"Regenerate constants","date":"2020-05-11T11:05:54Z"},{"author":"jcommelin","committer":"jcommelin","hash":"7774d4096cf98400c19451fe831f22dc3f7b5676","message":"Make import lines start with 'import'","date":"2020-05-11T11:20:17Z"},{"author":"jcommelin","committer":"jcommelin","hash":"83a50a5b0197b06aa6add21c075596b450ecf562","message":"Decouple algebraic hierarchy from core lib","date":"2020-05-11T17:41:06Z"},{"author":"jcommelin","committer":"jcommelin","hash":"5c41ca39b63dd61326755a5ae083fbb80889fc8b","message":"Merge branch 'master' into strip-algebra","date":"2020-05-11T17:50:47Z"},{"author":"jcommelin","committer":"jcommelin","hash":"55ddbbcb8914b4b4b200540339e2844703e1dd98","message":"Remove unshackled files","date":"2020-05-11T21:10:01Z"},{"author":"jcommelin","committer":"jcommelin","hash":"ee2c42fcd891cc935dcca620198605f973350b4b","message":"Remove commented code","date":"2020-05-12T05:08:19Z"},{"author":"jcommelin","committer":"jcommelin","hash":"b7f8b57ddfe3c4077a0f36381af2d50702c552e3","message":"Remove a test","date":"2020-05-12T05:17:45Z"},{"author":"jcommelin","committer":"jcommelin","hash":"8a9d32d5ee92c1bfc6dc0f7760c311bf3582299a","message":"Revert \"Remove commented code\"\n\nThis reverts commit ee2c42fcd891cc935dcca620198605f973350b4b.","date":"2020-05-13T06:33:44Z"},{"author":"jcommelin","committer":"jcommelin","hash":"97a0088f0b4b6f413d03b6a9b18878ea6dc94d2f","message":"Revert \"Remove unshackled files\"\n\nThis reverts commit 55ddbbcb8914b4b4b200540339e2844703e1dd98.","date":"2020-05-13T06:36:05Z"},{"author":"jcommelin","committer":"jcommelin","hash":"23f9ca8e4f018c651e0b590f1e5b569e90253ea1","message":"wip","date":"2020-05-13T11:35:49Z"},{"author":"jcommelin","committer":"jcommelin","hash":"b249cbaae2c982cff8c8713fe974234de9c88945","message":"Merge branch 'master' into strip-algebra","date":"2020-05-13T12:17:08Z"},{"author":"jcommelin","committer":"jcommelin","hash":"0449851fd3003025617f9bb55607b134e530ad21","message":"Hooray, we're compiling again","date":"2020-05-13T12:53:33Z"},{"author":"jcommelin","committer":"jcommelin","hash":"83cf72d98d6ae02abd181c405bce0e7667cb4088","message":"Remove unshackled files","date":"2020-05-13T12:54:17Z"},{"author":"jcommelin","committer":"jcommelin","hash":"1a190f3dd299bccfc563a336c3c7fa0a80d49de4","message":"Fix constants","date":"2020-05-13T13:16:54Z"},{"author":"gebner","committer":"gebner","hash":"245b721f98fd11f565dfe8f985cc86381f896e4d","message":"Remove unused code.","date":"2020-05-13T13:54:27Z"},{"author":"jcommelin","committer":"jcommelin","hash":"9b0c7cdb7d9273a2641239415804e5200b9864a2","message":"Revert \"Remove a test\"\n\nThis reverts commit b7f8b57ddfe3c4077a0f36381af2d50702c552e3.","date":"2020-05-13T16:51:57Z"},{"author":"jcommelin","committer":"jcommelin","hash":"96a135e06a9976f0dd80ee7c13f18bec88525e02","message":"Fix the first test","date":"2020-05-13T17:08:19Z"},{"author":"jcommelin","committer":"jcommelin","hash":"21112da5a095791782e5fa39b8abfd0572cd4de5","message":"Update test 1862","date":"2020-05-13T18:07:01Z"},{"author":"jcommelin","committer":"jcommelin","hash":"d0146cacb5da03003eeea9b7471a5243c9d72137","message":"Update test 1898","date":"2020-05-13T18:07:16Z"},{"author":"jcommelin","committer":"jcommelin","hash":"ec8a62e602325d344c1ad01c3c1f5809f0d11664","message":"Update test 1952","date":"2020-05-13T18:32:05Z"},{"author":"jcommelin","committer":"jcommelin","hash":"961a2ae8e6fd799d4f3b68c80ff31c8189294346","message":"Update test bad_end_error_pos","date":"2020-05-13T18:32:05Z"},{"author":"jcommelin","committer":"jcommelin","hash":"208ab574cc3b94e95b7f774d84e489571851eca5","message":"Update test field_type_mismatch","date":"2020-05-13T18:32:05Z"},{"author":"jcommelin","committer":"jcommelin","hash":"9d152e986e0fed7a89b34b357c9929a85db46f52","message":"Update test get_unused_name","date":"2020-05-13T18:32:05Z"},{"author":"jcommelin","committer":"jcommelin","hash":"ae63119435328c9cbee2234a19109d6f7b6a3d4f","message":"Update test nested_match","date":"2020-05-13T18:32:05Z"},{"author":"jcommelin","committer":"jcommelin","hash":"243e7a110f5fca64182b2dd2cd0fe5b2798a1fd1","message":"Update test out_param_proj","date":"2020-05-13T18:35:21Z"},{"author":"jcommelin","committer":"jcommelin","hash":"fc414d8d59211164a32953b8e5599d9dc81830d9","message":"Update test quote_error_pos","date":"2020-05-13T19:02:32Z"},{"author":"jcommelin","committer":"jcommelin","hash":"33bb06e84961f8e01b70626e8f4c5d4fc2823cf0","message":"Update test rquote","date":"2020-05-13T19:09:53Z"},{"author":"jcommelin","committer":"jcommelin","hash":"4984748b04eb976ad5b6463249ce5439794db711","message":"Update test simp_symm","date":"2020-05-13T19:11:53Z"},{"author":"jcommelin","committer":"jcommelin","hash":"b6744bc8b1eb4c8fa389cbaa65cdb2dd06b3ecfd","message":"Update test task","date":"2020-05-13T19:15:07Z"},{"author":"jcommelin","committer":"jcommelin","hash":"f5d6090dfc53996e47584b7efa98070585a2f92d","message":"Fix expected output of nested_match","date":"2020-05-13T19:16:02Z"},{"author":"jcommelin","committer":"jcommelin","hash":"fe4b8c4ba99ca8a1c2c5799c6670341beced8bc0","message":"Update test type_context","date":"2020-05-13T19:23:44Z"},{"author":"jcommelin","committer":"jcommelin","hash":"00e7e25679a9e6223f3ef5ea3b130c0a2bd6240d","message":"Update test vm_override","date":"2020-05-13T19:25:46Z"},{"author":"jcommelin","committer":"jcommelin","hash":"1dd6bddb33f3322d39a5ed912c0aa5fd3e044da6","message":"Update run test 1675","date":"2020-05-13T19:32:18Z"},{"author":"jcommelin","committer":"jcommelin","hash":"c7a784e1f31e0aa9d2f327b3bbb29a209d5b2252","message":"Update run test 1442","date":"2020-05-13T19:34:37Z"},{"author":"jcommelin","committer":"jcommelin","hash":"84185860c08d624677b2c2da201b1c83e41e0693","message":"Update run test 1685","date":"2020-05-13T19:35:07Z"},{"author":"jcommelin","committer":"jcommelin","hash":"c1aa6c51141ca9bd2d2477622e74b825159e5058","message":"Update run test ac_refl1","date":"2020-05-13T19:36:44Z"},{"author":"jcommelin","committer":"jcommelin","hash":"0eca641b13854971ce3f22612a0a5207962a4fb5","message":"Update run test add_semi","date":"2020-05-13T19:38:51Z"},{"author":"jcommelin","committer":"jcommelin","hash":"0416b9e10c7ffaf15f54036da33bdc99f676d5aa","message":"Update run test auto_param_in_structures","date":"2020-05-13T19:40:51Z"},{"author":"jcommelin","committer":"jcommelin","hash":"83808cce4fb9980dd8d800c4393f982d281c46cd","message":"Update run test auto_quote1","date":"2020-05-13T19:42:12Z"},{"author":"jcommelin","committer":"jcommelin","hash":"8a868807472f52b192fd21c569e75560ec33c096","message":"Update run test bin_tree","date":"2020-05-13T19:42:44Z"},{"author":"jcommelin","committer":"jcommelin","hash":"97794a1c96c7ce6cc5441b2bc23c4a8a9050ca82","message":"Update run test conv_tact1","date":"2020-05-13T19:56:39Z"},{"author":"jcommelin","committer":"jcommelin","hash":"f7f097a7a7641d1ce5e6e6a8d8a757d35fc68af1","message":"Fix a bunch of cc run tests","date":"2020-05-13T19:57:15Z"},{"author":"jcommelin","committer":"jcommelin","hash":"e5c5df515582a020cac18896787d7234aee382a9","message":"Fix run test mario_type_context","date":"2020-05-13T20:09:02Z"},{"author":"jcommelin","committer":"jcommelin","hash":"7b2f7e6bf2be5c4f1dc4bd8c191f8c0e41c7ae96","message":"Fix run test local_attribute","date":"2020-05-13T20:09:45Z"},{"author":"jcommelin","committer":"jcommelin","hash":"f3a0e36e68bdf97f04a1504903cb445c3042c387","message":"Fix run test interactive1","date":"2020-05-13T20:10:29Z"},{"author":"jcommelin","committer":"jcommelin","hash":"00a339e2b532b2247ba4a71cf959f87cbe556bdd","message":"Fix run test mrw","date":"2020-05-13T20:10:58Z"},{"author":"jcommelin","committer":"jcommelin","hash":"13edd117a9d6cc7dd00399baba433463de4df8fb","message":"Fix run test funext_tactic","date":"2020-05-13T20:12:10Z"},{"author":"jcommelin","committer":"jcommelin","hash":"d6bee260e4e0f6ff557b9b1f478661df091ee60b","message":"Fix run test hand_then","date":"2020-05-13T20:12:43Z"},{"author":"jcommelin","committer":"jcommelin","hash":"74c0217df4bf38ec3790b172b760b4d93eea91c4","message":"Fix run test show_goal","date":"2020-05-13T20:18:33Z"},{"author":"jcommelin","committer":"jcommelin","hash":"956f32243d72f0e9b9bb4042b9099923696ce761","message":"Fix run test sebastian_coe_simp","date":"2020-05-13T20:22:02Z"},{"author":"jcommelin","committer":"jcommelin","hash":"23564c113246fcead1883c4c584de39d8cda2be4","message":"Fix run tests hinst_lemma(s)1","date":"2020-05-13T20:26:01Z"},{"author":"jcommelin","committer":"jcommelin","hash":"9c0376549c2e4ce7abaa2e0ec8673f0118689072","message":"Fix run test eq_cases_on","date":"2020-05-13T20:26:43Z"},{"author":"jcommelin","committer":"jcommelin","hash":"9f4117601e9fc0f5da5c6ceded154aa0607014fe","message":"Fix run test intros_defeq_canonizer_bug","date":"2020-05-13T20:28:51Z"},{"author":"jcommelin","committer":"jcommelin","hash":"93a3fe94de0a94305d43d408bd8ba28abc30f4fd","message":"Fix run test dsimp_options","date":"2020-05-13T20:29:25Z"},{"author":"jcommelin","committer":"jcommelin","hash":"6a47cdfdc46a2d90189b19a8b29ab7c07fbfc26b","message":"Fix run test dsimp_proj","date":"2020-05-13T20:29:46Z"},{"author":"jcommelin","committer":"jcommelin","hash":"c6c54cc0243685f63d51358847946e3cde9c0d30","message":"Fix interactive test goal_info","date":"2020-05-13T20:34:40Z"},{"author":"jcommelin","committer":"jcommelin","hash":"9a3f4726cb2a1b0808431084568d06a21c44ae36","message":"Fix test 1898","date":"2020-05-13T20:36:15Z"},{"author":"jcommelin","committer":"jcommelin","hash":"a6f81190ed3eae4dba077066cffc5cd9c1567ba2","message":"Fix expected output for tests/lean/quote_error_pos.lean","date":"2020-05-13T20:39:28Z"},{"author":"jcommelin","committer":"jcommelin","hash":"926ba81fc2c06515337c1946ef6ce134c63772f0","message":"Fix run test rw1","date":"2020-05-14T04:32:35Z"},{"author":"jcommelin","committer":"jcommelin","hash":"bd6c3c33f159a3255e3d504fcb840256cb9fa51e","message":"Fix run test psum_wf_rec","date":"2020-05-14T04:34:31Z"},{"author":"jcommelin","committer":"jcommelin","hash":"32687698901c44b12e9cb5dc2a17a4b8334af639","message":"Hopefully fix interactive test goal_info","date":"2020-05-14T04:36:57Z"},{"author":"jcommelin","committer":"jcommelin","hash":"bc1c8a7adfe1eb81df1f3f7bc11b8d0e45e165c5","message":"Fix run test simp_tc_err","date":"2020-05-14T04:38:35Z"},{"author":"jcommelin","committer":"jcommelin","hash":"6621ed9f56d9d842ae4d478cd12f50f498fe162d","message":"Fix run test simp_zeta","date":"2020-05-14T04:39:06Z"},{"author":"jcommelin","committer":"jcommelin","hash":"c2edac9683cdd55097a4b310159c7f9b409fee0a","message":"Fix expected output of test get_unused_name","date":"2020-05-14T04:41:40Z"},{"author":"jcommelin","committer":"jcommelin","hash":"4c480a9f41ffb004ab9505226a2d02b7c04d8d31","message":"Fix expected output of test type_context","date":"2020-05-14T04:43:37Z"},{"author":"jcommelin","committer":"jcommelin","hash":"c9c9ac108878f908abbb0910ff678e3d0f3e95e5","message":"Fix run test u_eq_max_u_v","date":"2020-05-14T04:51:25Z"},{"author":"jcommelin","committer":"jcommelin","hash":"9a24ea9e5894c91304c417ae8a4f1d339d560941","message":"Fix run test term_app2","date":"2020-05-14T04:52:17Z"},{"author":"jcommelin","committer":"jcommelin","hash":"0fd581c72b7170e57d6849ffc2a132066245b638","message":"Fix run test name_resolution_with_params_bug","date":"2020-05-14T04:52:50Z"},{"author":"jcommelin","committer":"jcommelin","hash":"ce986cd02c543e36242ef818a45c6d5281ca9f4e","message":"Fix run test simp_lemmas_with_mvars","date":"2020-05-14T05:00:51Z"},{"author":"jcommelin","committer":"jcommelin","hash":"6e3598ac9d7e117162d4d6170a9fde3db68768af","message":"Fix run test cc_ac3","date":"2020-05-14T05:07:15Z"},{"author":"jcommelin","committer":"jcommelin","hash":"fdf0053274e30bb2b9ffffbc2ec1196750ad8c8f","message":"Fix run test nat_sub_ematch","date":"2020-05-14T05:10:18Z"},{"author":"jcommelin","committer":"jcommelin","hash":"d0b6e4ea59227cc490485fb09a4a12ce9c76a7ed","message":"Fix run test smt_assert_define","date":"2020-05-14T05:11:57Z"},{"author":"jcommelin","committer":"jcommelin","hash":"008beb76058a135d74e24a5eda57498ce75c19f7","message":"Fix run test smt_ematch1","date":"2020-05-14T05:12:36Z"},{"author":"jcommelin","committer":"jcommelin","hash":"b4209e2379a27b9ed99faf0be291b7e701329cbe","message":"Almost fix run test smt_ematch3","date":"2020-05-14T05:17:03Z"},{"author":"jcommelin","committer":"jcommelin","hash":"36afaaa0f777faebc48b48a5601f24efb36bf3e6","message":"Fix run test smt_tests","date":"2020-05-14T05:21:51Z"},{"author":"jcommelin","committer":"jcommelin","hash":"7682053686cf7de3656d3cc8915a112196c92eca","message":"Fix run test exhaustive_vm_impl_test","date":"2020-05-14T05:31:41Z"},{"author":"jcommelin","committer":"jcommelin","hash":"388302993ceec466f108d514362e17f2c72f73b4","message":"Partial fix for run test ematch_attr_to_defs","date":"2020-05-14T06:27:24Z"},{"author":"jcommelin","committer":"jcommelin","hash":"0b87e21447034d4f1e6df043c90cd3520a50b9f3","message":"The aexp test is thoroughly broken","date":"2020-05-14T08:47:08Z"},{"author":"jcommelin","committer":"jcommelin","hash":"830947dfb5d79c0c1df814f10ffce74b5199637d","message":"Workaround nasty issues in aexp test","date":"2020-05-14T08:47:49Z"},{"author":"jcommelin","committer":"jcommelin","hash":"512e7975089bdeacb5007f1df5f6c6ba2902c38c","message":"Fix run test cc_ac5, thanks Mario","date":"2020-05-14T08:58:03Z"},{"author":"jcommelin","committer":"jcommelin","hash":"ff22d1c51f06b9494b8b22dd1373ad4d4f4ac081","message":"Almost fixed run test ematch2","date":"2020-05-14T09:13:28Z"},{"author":"jcommelin","committer":"jcommelin","hash":"7076b9ec36cb0544a4e9f0f7c9735b589bfaf378","message":"Fix run test smt_ematch_alg_issue","date":"2020-05-14T09:18:31Z"},{"author":"jcommelin","committer":"jcommelin","hash":"4ff4eceeef7b17d7a7e6da4896a9730a41f561af","message":"Fix run test simp_lemma_issue","date":"2020-05-14T09:24:07Z"},{"author":"jcommelin","committer":"jcommelin","hash":"5ee4e4f4d5bb2ff45db8d327603989ff365237d0","message":"Fix run test ematch2","date":"2020-05-14T09:52:15Z"},{"author":"jcommelin","committer":"jcommelin","hash":"1a3031ca5f9da30797da289a89bcb2abfa889bad","message":"Remove example in run test using_smt2","date":"2020-05-14T10:38:41Z"},{"author":"jcommelin","committer":"jcommelin","hash":"9ff741dca37c1569e70f9f3c9739b8612aed0242","message":"Remove 4 failing tests","date":"2020-05-14T10:39:53Z"},{"author":"jcommelin","committer":"jcommelin","hash":"82d875dc8be95e1682113803f4bd31f56e8bbeb8","message":"Fix test 123-2","date":"2020-05-14T10:58:05Z"},{"author":"jcommelin","committer":"jcommelin","hash":"6260f1bdb2c6e138f5a5813c5f4614e2217159b5","message":"Merge branch 'master' into strip-algebra","date":"2020-05-14T17:38:32Z"},{"author":"jcommelin","committer":"jcommelin","hash":"2b5d4bf59d5124ea483166617cd7023ba7b54ae3","message":"Remove a lot of dead code, put gcd back in core","date":"2020-05-15T13:00:47Z"},{"author":"jcommelin","committer":"jcommelin","hash":"02b8bcded6541d9450d1f02b7fb74951a577ce1b","message":"Revert \"Fix run test exhaustive_vm_impl_test\"\n\nThis reverts commit 7682053686cf7de3656d3cc8915a112196c92eca.","date":"2020-05-15T13:01:21Z"},{"author":"jcommelin","committer":"jcommelin","hash":"aec23b2890af13bf03d29b7fb7bbf4f97d309a37","message":"Remove more commented code","date":"2020-05-15T13:04:42Z"},{"author":"jcommelin","committer":"jcommelin","hash":"3a092388575023977d0696da9ab93cbd79ab2629","message":"Merge remote-tracking branch 'origin/master' into strip-algebra","date":"2020-05-15T17:44:20Z"},{"author":"jcommelin","committer":"jcommelin","hash":"c2787f244fcb3acef6e2bc309d57ba073c7aca3e","message":"Fix run test 236c","date":"2020-05-15T17:47:39Z"}]},{"author":"JLimperg","number":228,"diff_summary":[{"file":"library/data/rbtree/insert.lean","status":"A","additions":641,"deletions":201},{"file":"library/init/meta/case_tag.lean","status":"A","additions":641,"deletions":201},{"file":"library/init/meta/interactive.lean","status":"A","additions":641,"deletions":201},{"file":"library/init/meta/name.lean","status":"A","additions":641,"deletions":201},{"file":"library/init/meta/tactic.lean","status":"A","additions":641,"deletions":201},{"file":"tests/lean/case.lean","status":"A","additions":641,"deletions":201},{"file":"tests/lean/case.lean.expected.out","status":"A","additions":641,"deletions":201},{"file":"tests/lean/cases_ginductive.lean.expected.out","status":"A","additions":641,"deletions":201}],"state":"closed","open_date":"2020-05-11T16:18:10Z","update_date":"2020-05-12T12:13:32Z","discussion":[{"author":"JLimperg","date":"2020-05-11T16:18:16Z","comment":"I can't test these changes with mathlib right now because there's no branch that builds against Lean master, but last I checked, the resulting breakage was relatively minor."},{"author":"gebner","date":"2020-05-11T16:40:09Z","comment":"> I can't test these changes with mathlib right now because there's no branch that builds against Lean master, but last I checked, the resulting breakage was relatively minor.\r\n\r\nFor the record, the branch that builds with mathlib is called `v3.11.0`."},{"author":"JLimperg","date":"2020-05-11T18:48:37Z","comment":"> For the record, the branch that builds with mathlib is called `v3.11.0`.\r\n\r\nOkay, I can cherry-pick this PR and my previous PR, which this one depends on, on top of the v3.11.0 tag. That's actually not terrible. Building mathlib now. (I've also started a [Zulip discussion about an alternative approach](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Create.20a.20mathlib.20branch.20that.20builds.20with.20Lean.20master.3F).)\r\n\r\nAlso, thanks for the prompt review! I'll go through your comments now."},{"author":"JLimperg","date":"2020-05-11T19:17:40Z","comment":"mathlib diff for this PR is indeed very small (+/- 13)."},{"author":"gebner","date":"2020-05-12T11:39:00Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-12T12:13:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/666832660)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/666832688)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/666832672)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/666832646)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/666832630)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/666832604)"}],"review_discussion":[{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-11T16:50:35Z","comment":"Please also add `has_repr`, `has_to_tactic_format`, and `has_format`."},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-11T16:51:16Z","comment":"Would it help if case tags were stored as `list expr` instead of `list name`?  This would be straightforward to implement."},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-11T16:56:42Z","comment":"This is a long doc string and I had to read it a few times to understand what's going on.\r\n\r\nI would really like one example for each `case_tag.pi` and `case_tag.hyps`:\r\n 1. The case tag for `list.cons x xs, nat.succ n`.\r\n 2. And the same after `with_cases { ... }`.\r\n\r\nPlease use a term like \"constructor names\" instead of \"names\".  I got massively confused by this as well."},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-11T16:57:00Z","comment":"How does this interact with `propagate_tags`?"},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-11T16:57:20Z","comment":"```suggestion\r\nmeta def ctor_names : case_tag → list name\r\n```"},{"author":"gebner","file":"library/init/meta/interactive.lean","date":"2020-05-11T17:02:27Z","comment":"This is just my personal opinion, but I find this syntax abhorrent and deeply offensive to my sense of beauty.  IMHO `case` should require the user to provide explicit argument names, and the `case` syntax should mirror the constructor.  That is, something like this:\r\n```lean\r\n  case cons x xs, succ y { ... }\r\n```\r\n\r\nBonus points if I could write:\r\n```lean\r\n  case x::xs, y+1 { ... }\r\n```"},{"author":"JLimperg","file":"library/init/meta/case_tag.lean","date":"2020-05-11T19:03:25Z","comment":"No, I don't think that would help much. Mario and I discussed a few possible designs in the Zulip thread and imo none of them is clearly better than the one we have now. The problem is that a bunch of tactics (including non-obvious ones such as `apply`) must agree on the semantics of goal tags. If we were to move to a different representation, I would currently favour `list case_tag`, or `list (case_tag + expr)` for extensibility."},{"author":"JLimperg","file":"library/init/meta/interactive.lean","date":"2020-05-11T19:12:36Z","comment":"I really like this suggestion actually. This would also force me to properly support chains of `cases x; cases y; induction z`. (At the moment, these are only properly supported if you put a `with_cases` around them.) Maybe I'll do a follow-up PR which adds this as alternative syntax."},{"author":"JLimperg","file":"library/init/meta/case_tag.lean","date":"2020-05-11T20:51:03Z","comment":"There seems to be no instance `has_repr name` (which blocks `has_repr case_tag`). Is this intentional?"},{"author":"JLimperg","file":"library/init/meta/case_tag.lean","date":"2020-05-11T21:25:47Z","comment":"I've added examples and clarified the 'names' issue. Better?"},{"author":"JLimperg","file":"library/init/meta/case_tag.lean","date":"2020-05-11T21:30:45Z","comment":"It doesn't really. `propagate_tags t` more or less copies the current goal tag to the first goal generated by `t`. If the unique names are still valid then, we're lucky; if not, I don't think we can do much about that. I've documented this limitation in the docstring for `case`."},{"author":"JLimperg","file":"library/init/meta/case_tag.lean","date":"2020-05-11T21:31:21Z","comment":"Fixed."},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-12T08:18:45Z","comment":"Yes, this is much better.  I have to admit, I am a quite lazy and typically don't bother to read the text, so it's great to have examples."},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-12T08:19:20Z","comment":"Ok."},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-12T08:24:35Z","comment":"I think the *intention* behind the `repr`/`to_string` split is that `repr` should output \"valid\" Lean code, and `to_string` a \"Human-readable\" version.  But we are missing lots of instances because of this stringification class inflation.  Practically speaking, it's really frustrating even if only some of the instances are missing because you need all of them.  For example, `#eval` want `has_repr`, `pp` wants `has_to_tactic_format`, etc.\r\n\r\nSo yes, please add `has_repr name`.  And add `has_repr case_tag` no matter whether there is a `has_repr name` or not.  (I would have been ok with `instance : has_repr case_tag := ⟨to_string⟩`.)"},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-12T08:24:44Z","comment":"Ok."},{"author":"gebner","file":"library/init/meta/interactive.lean","date":"2020-05-12T08:25:33Z","comment":"I agree, this can go in a follow-up PR, if you want.  I just wanted to vent."},{"author":"JLimperg","file":"library/init/meta/case_tag.lean","date":"2020-05-12T13:37:27Z","comment":"I get the `repr`/`to_string` split; there's a semantic difference there. What I think is unnecessary is `has_format`/`to_string`. If `format` wasn't `meta` -- and I don't see why it should be -- `to_string` could be subsumed by `has_format`.\r\n\r\nAnyway, I'll add the `has_repr` instances."},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-12T13:41:20Z","comment":"Oh, I hit the merge button a bit too early.\r\n\r\nBTW, `to_string` is *not* subsumed by `to_fmt`.  There is no `has_to_string` instance using `has_to_format`."},{"author":"JLimperg","file":"library/init/meta/case_tag.lean","date":"2020-05-12T13:51:27Z","comment":"Yes, my point was that `to_string` *could* be subsumed by `to_fmt` if `has_format` wasn't `meta`, because `to_format` and `to_string` serve the same purpose (human-friendly printing)."},{"author":"gebner","file":"library/init/meta/case_tag.lean","date":"2020-05-12T14:16:13Z","comment":":+1: for adding a low-priority instance converting from `has_to_format` to `has_to_string`."}],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"ce6b249e1ec7bfb320d4d948a3513a2e892875b4","message":"refactor(library/init/meta/interactive): refactor case tags","date":"2020-05-11T15:50:42Z"},{"author":"JLimperg","committer":"JLimperg","hash":"1e48484c918eac7aedf005d03dfd88264fa14a02","message":"Clarify docs of case_tag type","date":"2020-05-11T21:23:29Z"},{"author":"JLimperg","committer":"JLimperg","hash":"3c71ed4d6b06794fe495240e6a6533ef1725e3f1","message":"Rename case_tag.{names => case_names}","date":"2020-05-11T21:24:08Z"},{"author":"JLimperg","committer":"JLimperg","hash":"d796c32863d3565fdcaacf5ae2ee065d1737b0f3","message":"Fix build failure due to 3c71ed4d6b06794fe495240e6a6533ef1725e3f1","date":"2020-05-11T21:46:07Z"}]},{"author":"gebner","number":227,"diff_summary":[{"file":"src/library/pp_options.cpp","status":"M","additions":132,"deletions":134},{"file":"tests/lean/1327.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/1794.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/1817.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/add_defn_eqns.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/apply_elim.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/bad_error1.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/change1.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/change2.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/defeq_simp1.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/elab13.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/elab15.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/elab_error_recovery.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/eqn_proof.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/escape_id.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/eta_bug.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/eta_tac.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/expr_quote.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/float.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/fold.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/guard_names.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/implicit_after_auto_param_bug.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/induction_generalize_premise_args.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/induction_naming.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/induction_naming2.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/induction_tac1.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/inject.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/interactive/do_info.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/interactive/goal_info.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/interactive/info_id_pre_elab.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/non_exhaustive_error.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/pp_shadowed_const.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/print_meta.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/protected_test.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/qexpr1.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/right_assoc_dollar.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/smart_unfolding.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/tactic_state_pp.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/unfold1.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/unfold_crash.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/unification_hints1.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/unification_hints2.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/vm_override.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/whnf.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/whnf_cache_bug.lean.expected.out","status":"M","additions":132,"deletions":134},{"file":"tests/lean/whnf_core1.lean.expected.out","status":"M","additions":132,"deletions":134}],"state":"closed","open_date":"2020-05-11T14:18:19Z","update_date":"2020-05-14T11:53:03Z","discussion":[{"author":"gebner","date":"2020-05-14T11:13:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-14T11:53:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/674221660)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/674221681)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/674221670)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/674221701)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/674221691)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/674221628)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"58dd1c8374de13e3beab792b87c7cf066bc81da5","message":"chore(library/pp_options): enable `pp.generalized_field_notation` by default","date":"2020-05-11T14:15:47Z"},{"author":"gebner","committer":"gebner","hash":"d39c8ce188c68ac81b4dc4972daa8db41ae42165","message":"Fix tests.","date":"2020-05-11T14:37:29Z"},{"author":"gebner","committer":"web-flow","hash":"be0b86939bd8beff70243bf9fe1b2f491eebd36e","message":"Merge branch 'master' into pp_dot_notation_default","date":"2020-05-14T11:00:51Z"}]},{"author":"jcommelin","number":226,"diff_summary":[{"file":"library/init/algebra/ordered_field.lean","status":"M","additions":4,"deletions":4},{"file":"library/init/data/char/classes.lean","status":"M","additions":4,"deletions":4},{"file":"library/init/data/nat/default.lean","status":"M","additions":4,"deletions":4},{"file":"library/init/data/ordering/default.lean","status":"M","additions":4,"deletions":4}],"state":"closed","open_date":"2020-05-11T11:27:09Z","update_date":"2020-05-11T12:34:33Z","discussion":[{"author":"gebner","date":"2020-05-11T11:28:23Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T12:34:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/663173200)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/663173255)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/663173248)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/663173164)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/663173146)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/663173227)"}],"review_discussion":[],"tags":[],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"ec5972193adbd20a5edab43949fb42eb25bf7e34","message":"Make import lines start with 'import'","date":"2020-05-11T11:23:12Z"},{"author":"jcommelin","committer":"jcommelin","hash":"9bd5c477213ed29dd46d6e3b6e8c8e0059668d9a","message":"Use fully qualified import paths everywhere in library/","date":"2020-05-11T11:25:50Z"}]},{"author":"gebner","number":225,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":26,"deletions":1}],"state":"closed","open_date":"2020-05-11T10:56:14Z","update_date":"2020-05-11T11:26:12Z","discussion":[{"author":"gebner","date":"2020-05-11T10:56:20Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T11:26:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/662984800)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/662984856)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/662984845)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/662984783)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/662984776)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/662984824)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"39be064d323ba3559fbe341ccaa6018bfb14548d","message":"chore(github): only build lean_js in emscripten build\n\nWe add a separate test job for emscripten that bors ignores.","date":"2020-05-11T08:46:43Z"},{"author":"gebner","committer":"gebner","hash":"2291aec0b542bc5d868e9f95e28fe424f0789a5d","message":"Fix non-deterministic build errors in emscripten build.","date":"2020-05-11T08:50:03Z"},{"author":"gebner","committer":"gebner","hash":"b94748b7038013daf1133fc4ecc53fe28edd5cef","message":"Oops. Wrong target.","date":"2020-05-11T08:52:03Z"},{"author":"gebner","committer":"gebner","hash":"9df6c3a2972e191a682a5fa5655c6cbea953a4cc","message":"Disable tests and build everything in main emscripten build.","date":"2020-05-11T10:51:24Z"}]},{"author":"jcommelin","number":224,"diff_summary":[{"file":"src/library/CMakeLists.txt","status":"D","additions":10,"deletions":1226},{"file":"src/library/constants.cpp","status":"D","additions":10,"deletions":1226},{"file":"src/library/constants.h","status":"D","additions":10,"deletions":1226},{"file":"src/library/constants.txt","status":"D","additions":10,"deletions":1226},{"file":"src/library/norm_num.cpp","status":"D","additions":10,"deletions":1226},{"file":"src/library/norm_num.h","status":"D","additions":10,"deletions":1226},{"file":"src/library/tactic/CMakeLists.txt","status":"D","additions":10,"deletions":1226},{"file":"src/library/tactic/init_module.cpp","status":"D","additions":10,"deletions":1226},{"file":"src/library/tactic/norm_num_tactic.cpp","status":"D","additions":10,"deletions":1226},{"file":"src/library/tactic/norm_num_tactic.h","status":"D","additions":10,"deletions":1226},{"file":"src/library/tactic/simplify.cpp","status":"D","additions":10,"deletions":1226},{"file":"tests/lean/run/1587.lean","status":"D","additions":10,"deletions":1226},{"file":"tests/lean/run/check_constants.lean","status":"D","additions":10,"deletions":1226},{"file":"tests/lean/run/norm_num_tst.lean","status":"D","additions":10,"deletions":1226}],"state":"closed","open_date":"2020-05-11T07:39:06Z","update_date":"2020-05-11T12:05:01Z","discussion":[{"author":"gebner","date":"2020-05-11T08:31:24Z","comment":"LGTM.  Please choose a PR title that confirms to the naming scheme.  I've also put a few other PRs on the queue, so you will probably need to merge master and update `constants.txt` again in an hour or so."},{"author":"jcommelin","date":"2020-05-11T10:50:43Z","comment":"@gebner I fixed the conflicts"},{"author":"gebner","date":"2020-05-11T11:01:36Z","comment":"Please run `python3 script/gen_constants_cpp.py src/library/constants.txt`"},{"author":"jcommelin","date":"2020-05-11T11:06:12Z","comment":"Thanks! That script is helpful (-;"},{"author":"gebner","date":"2020-05-11T11:09:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T12:05:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/663066944)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/663066988)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/663066977)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/663067005)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/663067001)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/663067012)"}],"review_discussion":[],"tags":[],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"e55c7e16cf285c6cc77fe9c3d2c25569dea4155c","message":"Remove norm_num","date":"2020-05-11T07:35:15Z"},{"author":"jcommelin","committer":"jcommelin","hash":"a349f31b65d8bc75813b214c774acad7e4937c00","message":"Remove a bunch of tests","date":"2020-05-11T08:02:18Z"},{"author":"jcommelin","committer":"jcommelin","hash":"b1c6ca152781b78626ae5c6ac0acdef535bd03d3","message":"And remove another test","date":"2020-05-11T08:03:47Z"},{"author":"jcommelin","committer":"jcommelin","hash":"93ac6c4dca5d886e4be4ddebdb7e4b4c4098a761","message":"Merge remote-tracking branch 'origin/master' into remove-norm-num","date":"2020-05-11T10:49:57Z"},{"author":"jcommelin","committer":"jcommelin","hash":"864a42536f889b2a99aea3ea3f0f06a9b2320a4e","message":"Regenerate constants","date":"2020-05-11T11:05:54Z"}]},{"author":"gebner","number":223,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":3,"deletions":3}],"state":"closed","open_date":"2020-05-08T16:49:28Z","update_date":"2020-05-08T18:16:01Z","discussion":[{"author":"gebner","date":"2020-05-08T17:32:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-08T18:16:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/657102867)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/657102773)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/657102745)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/657102695)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/657102681)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/657102725)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c4ce6d33a5c996f0c85f18287633ee159a7e8482","message":"fix(github): put debug/release in artifact name","date":"2020-05-08T16:15:56Z"}]},{"author":"gebner","number":222,"diff_summary":[{"file":".github/workflows/on-push.yml","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2020-05-08T16:02:41Z","update_date":"2020-05-08T17:24:40Z","discussion":[{"author":"gebner","date":"2020-05-08T16:47:34Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-08T17:24:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/656986336)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/656986267)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/656986264)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/656986322)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/656986314)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/656986287)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"2f4d83bab292f10dd0da26c8c27d9038553514fc","message":"fix(.github/workflows): support old macos versions","date":"2020-05-08T16:02:02Z"}]},{"author":"gebner","number":221,"diff_summary":[{"file":"README.md","status":"M","additions":6,"deletions":6}],"state":"closed","open_date":"2020-05-08T15:35:17Z","update_date":"2020-05-08T16:13:17Z","discussion":[{"author":"gebner","date":"2020-05-08T15:35:31Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-08T16:13:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/656794783)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/656794727)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/656794713)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/656794816)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/656794806)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/656794761)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f3aa338d46fc8b354b5e8d7e00c2bc2aa7e6214c","message":"doc(README): update badges","date":"2020-05-08T15:03:52Z"}]},{"author":"gebner","number":220,"diff_summary":[{"file":"README.md","status":"M","additions":13,"deletions":3},{"file":"doc/changes.md","status":"M","additions":13,"deletions":3},{"file":"src/CMakeLists.txt","status":"M","additions":13,"deletions":3}],"state":"closed","open_date":"2020-05-08T15:32:51Z","update_date":"2020-05-08T16:13:19Z","discussion":[{"author":"gebner","date":"2020-05-08T15:35:33Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-08T16:13:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/656794783)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/656794727)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/656794713)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/656794816)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/656794806)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/656794761)"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"40ea5ca8edef80062932caf3140249afdbf5f132","message":"chore(*): release 3.11.0","date":"2020-05-08T14:55:57Z"}]},{"author":"gebner","number":219,"diff_summary":[{"file":".appveyor.yml","status":"A","additions":178,"deletions":299},{"file":".github/PULL_REQUEST_TEMPLATE.md","status":"A","additions":178,"deletions":299},{"file":".github/workflows/on-push.yml","status":"A","additions":178,"deletions":299},{"file":".travis.yml","status":"A","additions":178,"deletions":299},{"file":"README.md","status":"A","additions":178,"deletions":299},{"file":"bors.toml","status":"A","additions":178,"deletions":299},{"file":"script/ci_emscripten_zip.sh","status":"A","additions":178,"deletions":299},{"file":"src/CMakeLists.txt","status":"A","additions":178,"deletions":299}],"state":"closed","open_date":"2020-05-08T15:05:05Z","update_date":"2020-05-08T15:35:01Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"880983fdfffe93cd3218d381e4b1d8e65b236cac","message":"feat(*): switch to github actions and bors (#218)\n\n@EdAyers did all the work writing the github actions file.\r\n\r\nNightly builds are not deployed because they depend on the currently broken `gothub` tool.  Due to the fast release cadence, the importance of nightly builds has also decreased.\n\nCo-authored-by: E.W.Ayers <E.W.Ayers@maths.cam.ac.uk>","date":"2020-05-08T14:41:01Z"},{"author":"gebner","committer":"gebner","hash":"f3aa338d46fc8b354b5e8d7e00c2bc2aa7e6214c","message":"doc(README): update badges","date":"2020-05-08T15:03:52Z"}]},{"author":"gebner","number":218,"diff_summary":[{"file":".appveyor.yml","status":"A","additions":172,"deletions":293},{"file":".github/PULL_REQUEST_TEMPLATE.md","status":"A","additions":172,"deletions":293},{"file":".github/workflows/on-push.yml","status":"A","additions":172,"deletions":293},{"file":".travis.yml","status":"A","additions":172,"deletions":293},{"file":"bors.toml","status":"A","additions":172,"deletions":293},{"file":"script/ci_emscripten_zip.sh","status":"A","additions":172,"deletions":293},{"file":"src/CMakeLists.txt","status":"A","additions":172,"deletions":293}],"state":"closed","open_date":"2020-05-08T11:25:07Z","update_date":"2020-05-08T15:21:17Z","discussion":[{"author":"gebner","date":"2020-05-08T14:40:43Z","comment":"At least one macos and one windows user downloaded and tested the test release 9.9.9 without complaining, so I assume that this works.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-05-08T15:21:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/656636540)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/656636675)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/656636661)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/656636643)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/656636635)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/656636610)"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"b3cd44ea90c69cbc21ad817850b801b6621f99bc","message":"ci(github-actions): move CI to github actions\n\nStill need to do release workflow\n#156","date":"2020-04-08T21:01:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"1bc028876d85f89a11327f35fd4f1ca1dd3153f0","message":"Merge branch 'master' into github-actions","date":"2020-04-27T23:57:36Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b78eea2c719075b13c5bc7158d173c6218f0b47c","message":"ci(emscripten): emscripten fix assumes git repo","date":"2020-04-28T08:38:19Z"},{"author":"gebner","committer":"gebner","hash":"0a2ffc6acbccf94cc42477283a3b7f4a0eafe725","message":"Rename jobs.","date":"2020-05-08T09:33:07Z"},{"author":"gebner","committer":"gebner","hash":"8ad4c5bd818f45fcde2b0108648588e593c00f0a","message":"Add build types.","date":"2020-05-08T09:39:07Z"},{"author":"gebner","committer":"gebner","hash":"f4874278f0f1bfa97d3c113bc4fb00edc4316a24","message":"Enable bors.","date":"2020-05-08T09:44:38Z"},{"author":"gebner","committer":"gebner","hash":"a957ccf2d4a4fb7228d3470ef75a12e35475e809","message":"Disable static builds on macos.","date":"2020-05-08T09:46:05Z"},{"author":"gebner","committer":"gebner","hash":"82ff550b9c35fc1fcc1aac073fabca6359c85ad1","message":"Disable fail-fast on strategies.","date":"2020-05-08T09:48:02Z"},{"author":"gebner","committer":"gebner","hash":"3193d840777d560af4e0f1e7b4ae036c62c2fb9c","message":"Separate configure and build steps.","date":"2020-05-08T09:49:17Z"},{"author":"gebner","committer":"gebner","hash":"56667bddc0688152ffe377c7f5327b1e70173f30","message":"Reduce parallelism for debugging.","date":"2020-05-08T09:51:36Z"},{"author":"gebner","committer":"gebner","hash":"d65cd2ed5d4fe224ff5e0aa8f9c10970d71493b1","message":"Merge remote-tracking branch 'origin/master' into github-actions","date":"2020-05-08T09:54:28Z"},{"author":"gebner","committer":"gebner","hash":"7725f63891b59c059b30adb4e53e211ea7d59558","message":"Fix workflows file.","date":"2020-05-08T09:55:36Z"},{"author":"gebner","committer":"gebner","hash":"7cc50a9cb832f545c2b32f163b17aef0555d5d73","message":"Try to install current gmp.","date":"2020-05-08T09:58:14Z"},{"author":"gebner","committer":"gebner","hash":"ec3750bbfdcf1bb1de13b6163d36a26777bd36d7","message":"Fix static linking on ubuntu 18.04","date":"2020-05-08T10:16:00Z"},{"author":"gebner","committer":"gebner","hash":"d4077f8b5c602f4b32feb678ef422c33e2ae421d","message":"Remove workarounds.","date":"2020-05-08T10:16:20Z"},{"author":"gebner","committer":"gebner","hash":"78d5ac6f25946d1da72c5cd3979c65ae9864d940","message":"Change artifact names.","date":"2020-05-08T10:27:04Z"},{"author":"gebner","committer":"gebner","hash":"21ed5eeeb8e82c36cd11cf6513906e43f5da0629","message":"Add release support to gh actions.","date":"2020-05-08T10:37:36Z"},{"author":"gebner","committer":"gebner","hash":"00d6ed5a4994660cc9a3914778ac978685edd958","message":"Disable windows debug build.","date":"2020-05-08T10:39:02Z"},{"author":"gebner","committer":"gebner","hash":"b8facba1fbc62a0a94e6a4663a901b942718cdf1","message":"Disable build on tmp branches used by bors.","date":"2020-05-08T10:42:12Z"},{"author":"gebner","committer":"gebner","hash":"7ad056bdb6f139062fdb3cd69027f1fe0f393422","message":"Use less old gcc.","date":"2020-05-08T10:58:18Z"},{"author":"gebner","committer":"gebner","hash":"fe6ddbe363c601dd3b2607dff31dab7ac06505c8","message":"Try something else.","date":"2020-05-08T11:14:23Z"},{"author":"gebner","committer":"gebner","hash":"682e7b5a14ff223dc564a98753df861cbe83ca0b","message":"Only release release builds.","date":"2020-05-08T11:18:45Z"},{"author":"gebner","committer":"gebner","hash":"a4446ea3d07c9dd88190c1ef2181c852fe75af0c","message":"Fix syntax.","date":"2020-05-08T11:20:03Z"},{"author":"gebner","committer":"gebner","hash":"49652495dfbaa33dbe523f4410c161a61d451ab1","message":"Make ci_emscripten_zip executable.","date":"2020-05-08T11:39:30Z"}]},{"author":"urkud","number":217,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":643,"deletions":623},{"file":"library/init/data/list/basic.lean","status":"M","additions":643,"deletions":623},{"file":"library/init/data/set.lean","status":"M","additions":643,"deletions":623},{"file":"src/frontends/lean/brackets.cpp","status":"M","additions":643,"deletions":623},{"file":"src/frontends/lean/pp.cpp","status":"M","additions":643,"deletions":623},{"file":"src/library/constants.cpp","status":"M","additions":643,"deletions":623},{"file":"src/library/constants.h","status":"M","additions":643,"deletions":623},{"file":"src/library/constants.txt","status":"M","additions":643,"deletions":623},{"file":"tests/lean/1669.lean.expected.out","status":"M","additions":643,"deletions":623},{"file":"tests/lean/run/check_constants.lean","status":"M","additions":643,"deletions":623}],"state":"closed","open_date":"2020-05-07T07:14:44Z","update_date":"2020-05-11T09:40:06Z","discussion":[{"author":"urkud","date":"2020-05-07T07:16:16Z","comment":"The diff is large because I've also added missing lines to `constants.txt`, then sorted the file alphabetically and regenerated two other files."},{"author":"gebner","date":"2020-05-09T10:20:59Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-05-09T10:59:21Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/658788326)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/658788346)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/658788340)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/658788358)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/658788329)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/658788322)"},{"author":"gebner","date":"2020-05-11T08:25:53Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T09:40:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/662662578)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/662662665)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/662662650)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/662662620)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/662662611)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/662662705)"}],"review_discussion":[{"author":"gebner","file":"library/init/core.lean","date":"2020-05-07T14:21:27Z","comment":"I think `α` should be an out-param, just like in `insert`.  I believe that otherwise `({42} : set ℝ)` won't work (because Lean can't figure out `42` should be a real)."},{"author":"urkud","file":"library/init/core.lean","date":"2020-05-07T16:41:35Z","comment":"```suggestion\r\nclass has_singleton (α : out_param $ Type u) (β : Type v) := (singleton : α → β)\r\n```"},{"author":"urkud","file":"tests/lean/1669.lean.expected.out","date":"2020-05-07T18:57:07Z","comment":"```suggestion\r\n1669.lean:3:20: error: failed to synthesize type class instance for\r\n⊢ has_singleton ? (expr → list expr → tactic unit)\r\n1669.lean:1:4: error: failed to create auxiliary definition\r\n```"},{"author":"urkud","file":"tests/lean/1669.lean.expected.out","date":"2020-05-07T22:25:28Z","comment":"```suggestion\r\n⊢ has_singleton ?m_1 (expr → list expr → tactic unit)\r\n```"}],"tags":[],"commits":[{"author":"urkud","committer":"urkud","hash":"0f7c0b219cbde3349fe4f1702f7ebb35def07303","message":"refactor(singleton): add a class `has_singleton`","date":"2020-05-07T06:43:14Z"},{"author":"urkud","committer":"urkud","hash":"ef1648367f9981d23ef52b71ae4d99637836186a","message":"Define `has_singleton` for `set` and `list`","date":"2020-05-07T07:02:28Z"},{"author":"urkud","committer":"urkud","hash":"f1a7aa8791e8750017f7754ab81509ac54c6049a","message":"Update test output","date":"2020-05-07T08:37:50Z"},{"author":"urkud","committer":"web-flow","hash":"3fc677d14f26ea34edb391c2a4011294e20ef86a","message":"Use `out_param`","date":"2020-05-07T16:41:54Z"},{"author":"urkud","committer":"web-flow","hash":"df3a4d61b02a4d786ce24380cddea9fea2cc5064","message":"Update tests/lean/1669.lean.expected.out","date":"2020-05-07T18:57:19Z"},{"author":"urkud","committer":"web-flow","hash":"53e2ffd1e5fb5cd1631b04bbf2f108ecc0925d24","message":"Update tests/lean/1669.lean.expected.out","date":"2020-05-07T22:25:33Z"},{"author":"gebner","committer":"web-flow","hash":"ef89b5a8dcea1d4df5f7f603c870f2fd7e1f6424","message":"Merge branch 'master' into singleton","date":"2020-05-09T10:20:40Z"}]},{"author":"urkud","number":216,"diff_summary":[{"file":"library/init/function.lean","status":"M","additions":40,"deletions":22},{"file":"tests/lean/doc_strings.lean","status":"M","additions":40,"deletions":22},{"file":"tests/lean/doc_strings.lean.expected.out","status":"M","additions":40,"deletions":22}],"state":"closed","open_date":"2020-05-07T05:44:26Z","update_date":"2020-05-11T09:02:09Z","discussion":[{"author":"urkud","date":"2020-05-07T07:55:03Z","comment":"Test `tests/lean/doc_strings.lean` fails because it outputs docstrings of all loaded modules thus assumes that no files in `prelude` have module docs. What is the correct fix: `filter` the list before printing it? Something else?"},{"author":"gebner","date":"2020-05-07T08:08:51Z","comment":"> What is the correct fix: `filter` the list before printing it? Something else?\r\n\r\nI would remove the `olean_doc_strings` line.  The `module_doc_strings` is already a function that filters `olean_doc_strings`."},{"author":"urkud","date":"2020-05-07T22:26:23Z","comment":"BTW, should we move some of these lemmas to `mathlib` instead?"},{"author":"gebner","date":"2020-05-11T08:25:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T09:02:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/662562278)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/662562306)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/662562300)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/662562361)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/662562354)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/662562328)"}],"review_discussion":[],"tags":[],"commits":[{"author":"urkud","committer":"urkud","hash":"642156cfb1814b5fa727e94a261d3a3cbea7a5d0","message":"chore(library/init/function): use dot notation, add some docstrings","date":"2020-05-07T05:39:25Z"},{"author":"urkud","committer":"urkud","hash":"89438e9f15f1ab5add21e3b2d6723b55501178f0","message":"Try to fix tests","date":"2020-05-07T08:25:16Z"},{"author":"urkud","committer":"web-flow","hash":"d4b81448ae7274d7bd430b3e750e87c9cf5cbd80","message":"Merge branch 'master' into dot-notation","date":"2020-05-07T08:25:51Z"},{"author":"urkud","committer":"web-flow","hash":"39c780e426e8fa6e10a672c9394bcaaf10f9f195","message":"Merge branch 'master' into dot-notation","date":"2020-05-07T16:40:20Z"}]},{"author":"urkud","number":215,"diff_summary":[{"file":"README.md","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2020-05-07T05:15:12Z","update_date":"2020-05-07T08:09:42Z","discussion":[{"author":"gebner","date":"2020-05-07T08:09:35Z","comment":"I'll try to remember to update this next time."}],"review_discussion":[],"tags":[],"commits":[{"author":"urkud","committer":"urkud","hash":"e9c769f1ac5d37999004ee45dc093fd2a63533c0","message":"doc(README): update version","date":"2020-05-07T05:13:58Z"}]},{"author":"digama0","number":213,"diff_summary":[{"file":"src/library/tactic/rewrite_tactic.cpp","status":"A","additions":3,"deletions":1},{"file":"tests/lean/run/rw_instantiate_mvars.lean","status":"A","additions":3,"deletions":1}],"state":"merged","open_date":"2020-05-06T21:24:57Z","update_date":"2020-05-07T09:26:56Z","discussion":[{"author":"bryangingechen","date":"2020-05-06T22:12:02Z","comment":"Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/rw.3A.20equality.20is.20not.20an.20equality/near/196692155"},{"author":"PatrickMassot","date":"2020-05-07T10:19:05Z","comment":"Was this speed-benchmarked before merging?"},{"author":"gebner","date":"2020-05-07T10:58:55Z","comment":"I've had enough.  I think that this whole idea behind benchmarking Lean changes on mathlib and saying that they should be merged only if the compile time doesn't increase is fundamentally flawed.\r\n\r\nThe job of Lean is not to compile today's mathlib revision as fast as possible.  All code in mathlib has been written to work around Lean's performance and design deficiencies.  It should surprise nobody that it is optimized for the current Lean version.  The changes we're considering here fix actual bugs or allow better designs (see e.g. the type class changes or the congruence lemma changes).  It is possible that some workarounds in mathlib actually become counterproductive, and they should be fixed in mathlib.  Sometimes it also happens that we introduce regressions.  Please report them.  (I didn't see any bug reports about performance regressions recently.)\r\n\r\nI fundamentally disagree with the premise that faster is better.  If a new feature makes working with Lean less painful (such as this very PR), then we should merge it even if it increases mathlib build time a bit.\r\n\r\nOn a slightly more productive note: if you want to benchmark mathlib, please do so in a methodologically sound way.  Compile it always on the same (otherwise idle) machine.  Do it multiple times, and report the variance!  The total build time of mathlib is also not a good long-term metric: mathlib grows every single day.  It would be more informative to measure per-file runtime, or even per-declaration runtime.  This would also probably give more insight if a change causes regression in only a few declarations.\r\n\r\nFinally: I'm not sure complaining about this on every single core PR is going to get anybody interesting in setting up benchmarks."}],"review_discussion":[],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"5d915c61de3c8698b4282b019aa02e60256e6adb","message":"fix(library/tactic/rewrite_tactic): instantiate mvars in rw","date":"2020-05-06T21:22:28Z"}]},{"author":"JLimperg","number":212,"diff_summary":[{"file":"library/init/meta/congr_tactic.lean","status":"M","additions":219,"deletions":69},{"file":"library/init/meta/converter/conv.lean","status":"M","additions":219,"deletions":69},{"file":"library/init/meta/interactive.lean","status":"M","additions":219,"deletions":69},{"file":"library/init/meta/mk_dec_eq_instance.lean","status":"M","additions":219,"deletions":69},{"file":"library/init/meta/tactic.lean","status":"M","additions":219,"deletions":69},{"file":"tests/lean/andthen_focus_error_message.lean.expected.out","status":"M","additions":219,"deletions":69}],"state":"closed","open_date":"2020-05-04T16:09:48Z","update_date":"2020-05-11T09:40:08Z","discussion":[{"author":"gebner","date":"2020-05-11T08:26:40Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T09:40:06Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/662662578)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/662662665)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/662662650)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/662662620)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/662662611)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/662662705)"}],"review_discussion":[],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"94e1dcb182fda6c84949ef22491a2812c89d7e02","message":"feat(library/init/meta/tactic): add informative tactic combinators\n\nMost of the combinators for tactics (e.g. `focus`, `all_goals`, `solve`)\nused to work only with `tactic unit`s. This commit adds 'informative'\nvariants of these combinators which work with general `tactic α`.","date":"2020-05-04T15:54:44Z"},{"author":"JLimperg","committer":"JLimperg","hash":"d63ae70c9ef2622539cb8fe1e1fad52df18d3ab0","message":"refactor(library/init/meta/tactic): switch names of (non-)informative tactic combinators\n\nIn 94e1dcb182fda6c84949ef22491a2812c89d7e02, we added 'informative'\nvariants of tactic combinators like `all_goals` and `focus`. These were\npreviously called `all_goals'`, `focus'` etc. However, this is\ninconsistent with the existing naming convention for `mmap`/`mmap'`\netc., where the non-informative variant (i.e. the one working with\n`tactic unit` only) gets the prime. This commit therefore swaps the\nnaming convention for the tactic combinators.","date":"2020-05-04T15:56:20Z"},{"author":"JLimperg","committer":"JLimperg","hash":"d1399a421b828a874fc25054dac3624201181151","message":"test(andthen_focus_error_message): update expected output","date":"2020-05-05T14:27:15Z"}]},{"author":"bryangingechen","number":211,"diff_summary":[{"file":"src/library/tactic/rewrite_tactic.cpp","status":"A","additions":32,"deletions":10},{"file":"src/library/type_context.cpp","status":"A","additions":32,"deletions":10},{"file":"src/library/type_context.h","status":"A","additions":32,"deletions":10},{"file":"tests/lean/1277.lean.expected.out","status":"A","additions":32,"deletions":10},{"file":"tests/lean/run/mario_type_context.lean","status":"A","additions":32,"deletions":10}],"state":"merged","open_date":"2020-05-03T17:11:25Z","update_date":"2020-05-05T14:47:58Z","discussion":[{"author":"gebner","date":"2020-05-04T11:41:21Z","comment":"Here's the actual Lean 4 code: https://github.com/leanprover/lean4/blob/7899ab3761f4061f0699e6922102f4abf401f3be/src/Init/Lean/Meta/ExprDefEq.lean#L229-L238"},{"author":"bryangingechen","date":"2020-05-04T13:03:49Z","comment":"Interesting. Does the Lean 4 code behave similarly to this PR? \r\n\r\nWhat's the next step here? Since this PR breaks [a number of proofs in mathlib](https://gist.github.com/bryangingechen/8ebb9400835b54482f4d2246501f94be), is there something else in core that should be adjusted?"},{"author":"gebner","date":"2020-05-04T14:10:13Z","comment":"I think the new Lean 4 code dies exactly the same thing.\r\n\r\nAre the errors in mathlib fixable?  Let's merge this if it doesn't introduce any unsurmountable problems."},{"author":"bryangingechen","date":"2020-05-04T15:12:24Z","comment":"I've opened a branch https://github.com/leanprover-community/mathlib/tree/lean_pr_211 with a few fixes. I'll update the gist above marking the errors I've fixed.\r\n\r\nThere's more discussion about this happening in [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs)."}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"3c39a21f04845071383a23e6233831b81931bffc","message":"fix(library/type_context): do not unfold\nirreducible definitions when trying to unify/match types\n\nCopies a fix from Lean 4: https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/witt.20vectors/near/169124238","date":"2020-05-03T17:07:30Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"3c0962861593b56b9a393f1addb14ac538703e9f","message":"use try_for in test","date":"2020-05-04T11:26:46Z"},{"author":"gebner","committer":"gebner","hash":"d9293317c8cd3b77a7f94b20f05f7fc4164467e1","message":"Semireducible everywhere!","date":"2020-05-04T15:39:26Z"},{"author":"gebner","committer":"gebner","hash":"0594f9533543021f78c142782a39118de1b01d97","message":"Improve error reporting in rewrite_core.","date":"2020-05-04T16:09:06Z"},{"author":"gebner","committer":"gebner","hash":"65f5836d88235257d2061aa720f1d64de7b4aef8","message":"Fix test.","date":"2020-05-05T13:33:53Z"}]},{"author":"JLimperg","number":210,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":7,"deletions":5}],"state":"merged","open_date":"2020-05-02T15:55:36Z","update_date":"2020-05-05T13:37:20Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"653ee50fbaa9ee76cf184d888f42c009d21918a7","message":"doc(library/init/meta/interactive): fix docstring of tactic.interactive.rename\n\nFix an error in the code sample. Also add a note about how renaming\nworks when there are shadowed hypotheses.","date":"2020-05-02T15:52:19Z"}]},{"author":"gebner","number":209,"diff_summary":[{"file":"src/library/fun_info.cpp","status":"A","additions":28,"deletions":0},{"file":"tests/lean/run/sebastien_coe_simp.lean","status":"A","additions":28,"deletions":0}],"state":"merged","open_date":"2020-05-01T17:28:17Z","update_date":"2020-05-01T19:42:49Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"1794c8fd47f36f469a332744e556f69376ecc1b3","message":"feat(library/fun_info): improve congruence lemmas for coe_fn","date":"2020-05-01T17:21:12Z"}]},{"author":"gebner","number":208,"diff_summary":[{"file":"src/library/module_mgr.cpp","status":"M","additions":18,"deletions":5},{"file":"src/library/module_mgr.h","status":"M","additions":18,"deletions":5},{"file":"src/shell/lean.cpp","status":"M","additions":18,"deletions":5},{"file":"src/shell/server.cpp","status":"M","additions":18,"deletions":5},{"file":"src/shell/server.h","status":"M","additions":18,"deletions":5}],"state":"merged","open_date":"2020-05-01T10:40:54Z","update_date":"2020-05-01T12:13:38Z","discussion":[],"review_discussion":[],"tags":[{"tag":"enhancement","description":"New feature or request"}],"commits":[{"author":"gebner","committer":"gebner","hash":"7978366d5c61b0ea0173c79376eea20100b62fb8","message":"feat(library/module_mgr): add flag to use out-of-date oleans","date":"2020-05-01T10:37:30Z"}]},{"author":"Vierkantor","number":207,"diff_summary":[{"file":"src/frontends/lean/parser_config.cpp","status":"A","additions":35,"deletions":1},{"file":"tests/lean/notation_pp_priority.lean","status":"A","additions":35,"deletions":1},{"file":"tests/lean/notation_pp_priority.lean.expected.out","status":"A","additions":35,"deletions":1}],"state":"merged","open_date":"2020-05-01T10:39:14Z","update_date":"2020-05-01T12:14:03Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"0795b6eade586ae33c2527689d76e6e11ba77e8e","message":"feat(src/frontends): order notation by priority in pretty-printer\n\nIf you have a notation for a special case, e.g. `finset.sum finset.univ`, and a\nnotation for a general case, e.g. `finset.sum`, you can now give the\nspecial-cased notation a higher priority to ensure it is used by the\npretty-printer when applicable.\n\nWhen deciding how to pretty-print an expression, Lean looks up the notations\nassociated to the head of the expression. It tries them one-by-one until it\nfinds a notation that matches the expression. The order in which they are tried\nused to be the definition order. This PR changes this ordering to have\nhigher-priority notations first.\n\nAlthough `notation_entry.priority()` is also used by the parser, it doesn't\nseem to be set at all in mathlib. I expect that there will be no conflicts\nbetween the usage of `priority` in the parser and in the pretty-printer.","date":"2020-05-01T10:14:42Z"}]},{"author":"JLimperg","number":205,"diff_summary":[{"file":"library/init/data/list/basic.lean","status":"A","additions":171,"deletions":5},{"file":"library/init/meta/interactive.lean","status":"A","additions":171,"deletions":5},{"file":"library/init/meta/tactic.lean","status":"A","additions":171,"deletions":5},{"file":"tests/lean/1513.lean.expected.out","status":"A","additions":171,"deletions":5},{"file":"tests/lean/rename.lean","status":"A","additions":171,"deletions":5},{"file":"tests/lean/rename.lean.expected.out","status":"A","additions":171,"deletions":5}],"state":"merged","open_date":"2020-04-30T15:43:50Z","update_date":"2020-05-01T20:49:52Z","discussion":[{"author":"JLimperg","date":"2020-04-30T17:39:20Z","comment":"Sorry, just found a bug in nu-rename. Don't review/merge yet."},{"author":"JLimperg","date":"2020-04-30T17:48:24Z","comment":"Okay, now it's at least less obviously buggy."},{"author":"JLimperg","date":"2020-05-01T20:50:56Z","comment":"Thanks for the review!"},{"author":"gebner","date":"2020-05-02T12:06:37Z","comment":"How do you use this tactic to rename multiple variables with the same name?\r\n```lean\r\nexample (x x : ℕ) : ... :=\r\nbegin\r\n  rename ???\r\nend\r\n```"},{"author":"digama0","date":"2020-05-02T14:27:13Z","comment":"Hopefully that just names the second one. If you have this situation, you can call `dedup` first, but otherwise the first `x` is basically inaccessible, which is the point of name shadowing."},{"author":"JLimperg","date":"2020-05-02T14:36:12Z","comment":"No, `rename x y` will rename both `x`s. I didn't want to complicate the tactic even more to support a fringe case. (In all of mathlib, there was only one proof that relied on the 'rename only the last occurrence' semantics, and this was easy to solve using `dedup` as you point out.)"}],"review_discussion":[{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-05-01T10:47:14Z","comment":"Is this different from `ctx.drop (frozen_local_instance.get_or_else []).length`?"},{"author":"gebner","file":"library/init/meta/interactive.lean","date":"2020-05-01T10:50:41Z","comment":"I feel like `rename_lams` should be reimplemented using `rename_many` and `rename_unstable` should be removed."},{"author":"JLimperg","file":"library/init/meta/interactive.lean","date":"2020-05-01T20:22:35Z","comment":"Yes! That'll be the case tag PR which I'm working on, and which this PR is leading up to."},{"author":"JLimperg","file":"library/init/meta/tactic.lean","date":"2020-05-01T20:26:10Z","comment":"I think so, yes. Your version drops as many hyps from the context as there are frozen instances. However, we can have other hyps in between the frozen instances, so the part of the context that we can't touch can be longer."},{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-05-01T20:27:58Z","comment":"That's my question: is this possible?"},{"author":"gebner","file":"library/init/meta/interactive.lean","date":"2020-05-01T20:28:06Z","comment":":+1:"},{"author":"JLimperg","file":"library/init/meta/tactic.lean","date":"2020-05-01T20:40:09Z","comment":"Yes, here's a full test case where the implementations diverge.\r\n\r\n```lean \r\nnamespace list\r\n\r\ndef after {α} (p : α → Prop) [decidable_pred p] : list α → list α\r\n| [] := []\r\n| (x :: xs) := if p x then xs else after xs\r\n\r\nend list\r\n\r\nnamespace tactic\r\n\r\nmeta def revertible_local_context₁ : tactic (list expr) :=\r\ndo ctx ← local_context,\r\n   frozen ← frozen_local_instances,\r\n   pure $\r\n     match frozen with\r\n     | none := ctx\r\n     | some [] := ctx\r\n     | some (h :: _) := ctx.after (eq h)\r\n     end\r\n\r\nmeta def revertible_local_context₂ : tactic (list expr) :=\r\ndo ctx ← local_context,\r\n   frozen ← frozen_local_instances,\r\n   pure $ ctx.drop $ (frozen.get_or_else []).length\r\n\r\nmeta def interactive.test : tactic unit :=\r\ndo revertible_local_context₁ >>= trace,\r\n   revertible_local_context₂ >>= trace\r\n\r\nend tactic\r\n\r\n\r\nlemma test {α : Prop} [decidable α] {β : Prop} [decidable β] : unit :=\r\nbegin\r\n  test,\r\n  exact ()\r\nend\r\n```"},{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-05-01T20:49:40Z","comment":"Ah, so `frozen_local_instances` only returns the instances."},{"author":"bryangingechen","file":"library/init/meta/interactive.lean","date":"2020-05-02T15:28:02Z","comment":"These should be `rename`."},{"author":"JLimperg","file":"library/init/meta/interactive.lean","date":"2020-05-02T15:46:36Z","comment":"Yeah, I just noticed that as well. :( I'll write a doc PR."}],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"eaede22399a6234331c63ac1949a472ac72429d2","message":"feat(library/init/meta/*): new `rename` tactic\n\nWe reimplement the interactive `rename` tactic. The new tactic has the\nfollowing features:\n\n- Multiple hypotheses can be renamed at once.\n- The order of hypotheses doesn't change.\n- If there are multiple hypotheses with the same name in the context,\n  they are all renamed.\n\nThis tactic was previously implemented in mathlib.\n\nTo facilitate the implementation, we also port `list.after` from\nmathlib.","date":"2020-04-30T00:59:54Z"},{"author":"JLimperg","committer":"JLimperg","hash":"802997add7ffe100b2cee1077a73855682e14266","message":"fix(library/init/tactic): fix rename_many when using unique names\n\n`tactic.rename_many` can select the hypotheses to be renamed by unique\nnames. When using this mode, it would erroneously change the display\nname of any hypothesis that was not renamed to its unique name.","date":"2020-04-30T17:42:51Z"}]},{"author":"JLimperg","number":204,"diff_summary":[{"file":"library/init/data/list/instances.lean","status":"D","additions":11,"deletions":15},{"file":"library/init/data/string/basic.lean","status":"D","additions":11,"deletions":15},{"file":"library/init/data/string/default.lean","status":"D","additions":11,"deletions":15},{"file":"library/init/data/string/instances.lean","status":"D","additions":11,"deletions":15},{"file":"library/init/meta/name.lean","status":"D","additions":11,"deletions":15},{"file":"library/init/meta/well_founded_tactics.lean","status":"D","additions":11,"deletions":15}],"state":"merged","open_date":"2020-04-28T17:11:37Z","update_date":"2020-04-28T17:27:27Z","discussion":[{"author":"JLimperg","date":"2020-04-28T17:12:53Z","comment":"This change is fully backwards-compatible unless someone imports `init.data.string.instances` directly (and why would you?). Should I still write a `changes` entry?"},{"author":"gebner","date":"2020-04-28T17:26:14Z","comment":"LGTM.  The only important thing is that the decidability instance still has exactly the same name and type, because it is override in the VM.\r\n\r\nIf somebody imports `init.data.string.instances`, they're on their own."}],"review_discussion":[],"tags":[],"commits":[{"author":"JLimperg","committer":"JLimperg","hash":"7be276507a03c640dab73f07e949729fd7b8d4c6","message":"refactor(init/data/string/*): implement decidable equality for strings without using tactics\n\nThe decidable equality instance for strings\n(`string.has_decidable_equality`) was previously defined via the\n`mk_dec_eq_instance` tactic. However, we'd like to be able to use this\ninstance in init.meta.*, which creates import cycles. This commit\ntherefore reimplements the instance without using tactics.","date":"2020-04-28T16:29:14Z"}]},{"author":"jcommelin","number":203,"diff_summary":[{"file":"src/frontends/lean/tactic_notation.cpp","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2020-04-28T09:35:55Z","update_date":"2020-04-28T09:51:53Z","discussion":[{"author":"gebner","date":"2020-04-28T09:52:30Z","comment":"Wow, I didn't expect the tests to actually pass. :open_mouth: "},{"author":"PatrickMassot","date":"2020-04-28T09:55:58Z","comment":"We still lack performance tests..."}],"review_discussion":[],"tags":[],"commits":[{"author":"jcommelin","committer":"web-flow","hash":"36ca923526663f6bb0e92a9c981b3fbd46a260b8","message":"change interactive calc to `refine calc`\n\nIn tactic mode, `calc` was an abbreviation for `exact calc`, and I propose we change it to `refine calc`.","date":"2020-04-28T09:35:48Z"}]},{"author":"semorrison","number":202,"diff_summary":[{"file":"library/init/category/default.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/alternative.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/applicative.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/combinators.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/control/default.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/except.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/functor.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/id.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/lawful.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/lift.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/monad.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/monad_fail.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/option.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/reader.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/category/state.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/data/list/instances.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/data/option/basic.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/data/option/instances.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/data/set.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/default.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/exceptional.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/expr.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/interaction_monad.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/interactive.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/lean/parser.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/rb_map.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/smt/smt_tactic.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/tactic.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/type_context.lean","status":"A","additions":41,"deletions":41},{"file":"library/init/meta/vm.lean","status":"A","additions":41,"deletions":41},{"file":"tests/lean/run/cont.lean","status":"A","additions":41,"deletions":41}],"state":"merged","open_date":"2020-04-25T00:04:41Z","update_date":"2020-04-25T09:14:25Z","discussion":[{"author":"gebner","date":"2020-04-25T09:14:18Z","comment":"I'm not sure what this buys us?  Nobody imports `init.control.monad` directly, I hope?  Am I missing something?\r\n\r\nThe change effects nothing, but it also affects nothing and :four_leaf_clover: has `Init.Control.Monad` as well.  So let's merge it."},{"author":"semorrison","date":"2020-04-26T01:57:10Z","comment":"Sorry @gebner, I should have been clearer --- what it buys is no one getting confused after in mathlib we rename `category` to `control`, and `category_theory` to `category`."},{"author":"cipher1024","date":"2020-04-26T20:33:25Z","comment":"I don't know that `category_theory` should be renamed to `category`. I support `category` -> `control` but I feel like `category_theory` is a bit like `group_theory`, no?"},{"author":"jcommelin","date":"2020-04-28T06:44:21Z","comment":"Maybe the directory should keep the same name, but I guess it would make sense to rename `category_theory.category` to `_root_.category`? And maybe the namespace `category_theory` should also be renamed to `category`?"}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"semorrison","hash":"0d737c4a6de5429cb02c0b8323a0689ef8f9f7ac","message":"chore(category): rename to control","date":"2020-04-24T23:53:12Z"}]},{"author":"Vierkantor","number":198,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":4,"deletions":6},{"file":"tests/lean/simp_symm.lean","status":"M","additions":4,"deletions":6}],"state":"merged","open_date":"2020-04-21T08:17:03Z","update_date":"2020-04-21T08:46:21Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"dea486b0a0418716fb3154ef2b5732ca1e487d23","message":"fix(library/init/meta/interactive): removing for `simp [← local_const ...]`\n\nThis fixes issue #193.\n\nThe code to erase a lemma `h` from the simp set for calls of the form\n`simp [←h]` matched on `h = expr.const _ _`. It should also match when `h` is a\n`local_const`. I think this issue was not caught by the test because the the\narguments to `simp` were quoted incorrectly, so I've changed the test to use\nthe tactic quoter instead.","date":"2020-04-21T08:09:05Z"}]},{"author":"bryangingechen","number":195,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":30,"deletions":0}],"state":"merged","open_date":"2020-04-19T14:02:33Z","update_date":"2020-04-19T14:41:35Z","discussion":[{"author":"gebner","date":"2020-04-19T14:41:39Z","comment":"Thanks!"}],"review_discussion":[{"author":"bryangingechen","file":"doc/changes.md","date":"2020-04-19T14:03:28Z","comment":"```suggestion\r\n  - A frequently-violated assertion was removed from the elaborator (#194)\r\n```"},{"author":"bryangingechen","file":"doc/changes.md","date":"2020-04-19T14:04:18Z","comment":"```suggestion\r\n  - Nested comment parsing in doc strings was fixed (#191)\r\n```"}],"tags":[],"commits":[{"author":"bryangingechen","committer":"web-flow","hash":"81f1683fc36107350fe9a578d077059a4f8fd725","message":"doc(*): update changelog for 3.9","date":"2020-04-19T14:02:00Z"},{"author":"bryangingechen","committer":"web-flow","hash":"9c38d7b55f6bd778a751b51cbee6765c7c8c6d04","message":"Apply suggestions from code review","date":"2020-04-19T14:04:30Z"}]},{"author":"gebner","number":194,"diff_summary":[{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":104,"deletions":1},{"file":"tests/lean/123-1.lean","status":"A","additions":104,"deletions":1},{"file":"tests/lean/123-1.lean.expected.out","status":"A","additions":104,"deletions":1},{"file":"tests/lean/123-2.lean","status":"A","additions":104,"deletions":1},{"file":"tests/lean/123-2.lean.expected.out","status":"A","additions":104,"deletions":1}],"state":"merged","open_date":"2020-04-18T11:21:35Z","update_date":"2020-04-18T13:18:10Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f0682ea308b4ccf693dd396af7449a97b6eb0f69","message":"hack(frontends/lean/elaborator): remove assertion\n\nFixes #123","date":"2020-04-18T11:20:22Z"}]},{"author":"cipher1024","number":192,"diff_summary":[{"file":"library/init/meta/interaction_monad.lean","status":"A","additions":298,"deletions":13},{"file":"library/init/meta/lean/parser.lean","status":"A","additions":298,"deletions":13},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":298,"deletions":13},{"file":"src/frontends/lean/parser.h","status":"A","additions":298,"deletions":13},{"file":"src/frontends/lean/user_notation.cpp","status":"A","additions":298,"deletions":13},{"file":"src/library/vm/vm_parser.cpp","status":"A","additions":298,"deletions":13},{"file":"tests/lean/list_local_vars.lean","status":"A","additions":298,"deletions":13},{"file":"tests/lean/list_local_vars.lean.expected.out","status":"A","additions":298,"deletions":13},{"file":"tests/lean/user_notation.lean","status":"A","additions":298,"deletions":13},{"file":"tests/lean/user_notation.lean.expected.out","status":"A","additions":298,"deletions":13}],"state":"merged","open_date":"2020-04-14T03:48:39Z","update_date":"2020-04-15T16:27:00Z","discussion":[{"author":"khoek","date":"2020-04-20T11:50:31Z","comment":"@cipher1024 Am I right in thinking that there is no way to get the types and `binder_info` of the available included variables? This would make this much more useful I think!\r\n\r\nAlso, what is the difference between an included variable and an available included variable? Perhaps a more intuitive name for `list_include_var_names` is `list_variables`, if I understand correctly what it does?"},{"author":"khoek","date":"2020-04-20T12:05:31Z","comment":"Oh no, ok, it returns the actual `local_const`s. That's cool! At least in mathlib I'd like to wrap this in something which splits out `name \\times binder_info \\time expr`s, and I'll do this in a `#where` pull request in a moment. Is there any reason not to just return this actually?"}],"review_discussion":[{"author":"gebner","file":"src/library/vm/vm_parser.cpp","date":"2020-04-14T09:57:44Z","comment":"Please remove."},{"author":"gebner","file":"src/library/vm/vm_parser.cpp","date":"2020-04-14T09:58:23Z","comment":"Doesn't this require error handling?"},{"author":"gebner","file":"src/frontends/lean/parser.cpp","date":"2020-04-14T10:03:52Z","comment":"For include variables, isn't the name always the pretty name of the local constant?  (That is, this function is not necessary.)"},{"author":"gebner","file":"library/init/meta/lean/parser.lean","date":"2020-04-14T10:06:04Z","comment":"```suggestion\r\nRun the parser in a local declaration scope.\r\n\r\nLocal declarations added via `add_local` do not propagate outside of this scope.\r\n```"},{"author":"gebner","file":"library/init/meta/lean/parser.lean","date":"2020-04-14T10:07:52Z","comment":"```suggestion\r\nmeta constant add_local (v: expr) (is_variable := ff) : parser unit\r\n\r\n```"},{"author":"cipher1024","file":"src/frontends/lean/parser.cpp","date":"2020-04-14T16:21:30Z","comment":"No because if you're in a tactic, the list of names returned will include variables that are not in scope if they are not `include`-d."},{"author":"gebner","file":"src/frontends/lean/parser.cpp","date":"2020-04-14T16:29:51Z","comment":"I'm not sure I understand your answer.  Can you give an example where `get_include_variables` and `get_include_var_names` return different results?"},{"author":"cipher1024","file":"library/init/meta/lean/parser.lean","date":"2020-04-14T16:44:26Z","comment":"What would you do with this option?"},{"author":"gebner","file":"library/init/meta/lean/parser.lean","date":"2020-04-14T17:39:52Z","comment":"I was wondering if you should be able to simulate `variable x` from lean.  It's literally just an optional argument to `parser::add_local_expr`.\r\n\r\nBut don't feel obligated to add it.  There's a lot of API we could add."},{"author":"cipher1024","file":"src/frontends/lean/parser.cpp","date":"2020-04-14T18:57:24Z","comment":"```lean\r\nvariables (a b c : nat)\r\ninclude a\r\nexample : true := \r\nbegin\r\n   -- if you parse a tactic argument line here, `get_include_variables` returns `[a]` and `get_include_var_names` returns `[a,b,c]`.\r\nend\r\n```"},{"author":"cipher1024","file":"library/init/meta/lean/parser.lean","date":"2020-04-14T19:06:30Z","comment":"I see, yes it looks easy enough. I'll add it."},{"author":"gebner","file":"src/frontends/lean/parser.cpp","date":"2020-04-14T19:34:43Z","comment":"Ah, that's because `get_local` returns none.  Got it!"},{"author":"cipher1024","file":"library/init/meta/lean/parser.lean","date":"2020-04-14T20:21:28Z","comment":"Here are my thoughts on this feature: i won't add the flag but every time you call `add_local` it will be considered as a `variable`. If you use it inside of `with_local_scope`, it will be rolled back."},{"author":"gebner","file":"library/init/meta/interaction_monad.lean","date":"2020-04-15T09:48:30Z","comment":"```suggestion\r\nmeta def interaction_monad.finally {α β γ} (x : m α) (inside : m β) (y : m γ) : m β :=\r\n```"},{"author":"gebner","file":"library/init/meta/lean/parser.lean","date":"2020-04-15T09:48:48Z","comment":"```suggestion\r\nWhen `pat := tt`, the expression is parsed as a pattern, i.e. local\r\nconstants are not checked. -/\r\n```"},{"author":"cipher1024","file":"library/init/meta/interaction_monad.lean","date":"2020-04-15T15:21:00Z","comment":"I chose this name to be conform to this naming scheme: https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Exception.html#v:bracket_. `finally` guarantees that an action will be run at the end of the computation but `bracket` gives us a preamble as well."},{"author":"gebner","file":"library/init/meta/interaction_monad.lean","date":"2020-04-15T16:08:53Z","comment":"Ok I see, so `bracket x y z = (x *> finally y z)`.  I didn't see the `x` at first.  Got it now."}],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"cf7aead971b7c0f8ea46f27b3765b9e1e8548d59","message":"feat(parser/add_local): add control for local scope, pattern parsing\nand access to included variables","date":"2020-04-14T03:30:09Z"},{"author":"cipher1024","committer":"web-flow","hash":"d8f34b777aadb561de89c9a9d413588c6a18f266","message":"Update library/init/meta/lean/parser.lean\n\nCo-Authored-By: Gabriel Ebner <gebner@gebner.org>","date":"2020-04-14T16:22:05Z"},{"author":"cipher1024","committer":"cipher1024","hash":"2c1cbaf3eee8d3a4f90aaddbf45d5e7f6bce881c","message":"fix test","date":"2020-04-14T16:32:18Z"},{"author":"cipher1024","committer":"cipher1024","hash":"a58c5a07670973686de161eaa8046b9c9f74894c","message":"address comments from review","date":"2020-04-14T16:45:16Z"},{"author":"cipher1024","committer":"cipher1024","hash":"d00199677d0cf0413231f380ec6bad8931331932","message":"expose `variable`, `omit` and `include` as APIs","date":"2020-04-15T03:55:26Z"},{"author":"cipher1024","committer":"web-flow","hash":"0d389323759ce4d84f9d0610f254d220de890d19","message":"Update library/init/meta/lean/parser.lean\n\nCo-Authored-By: Gabriel Ebner <gebner@gebner.org>","date":"2020-04-15T15:21:10Z"},{"author":"cipher1024","committer":"cipher1024","hash":"5ebde62b1a65480c2c3da6e59eab8dfa1ce55fe5","message":"add `add_local_level`","date":"2020-04-15T15:35:33Z"}]},{"author":"bryangingechen","number":191,"diff_summary":[{"file":"src/frontends/lean/scanner.cpp","status":"A","additions":16,"deletions":3},{"file":"tests/lean/run/doc_string6.lean","status":"A","additions":16,"deletions":3}],"state":"merged","open_date":"2020-04-14T00:36:01Z","update_date":"2020-04-14T14:29:52Z","discussion":[],"review_discussion":[{"author":"gebner","file":"tests/lean/run/doc_string6.lean","date":"2020-04-14T08:50:36Z","comment":"Wow, it was already failing for regular comments?"},{"author":"bryangingechen","file":"tests/lean/run/doc_string6.lean","date":"2020-04-14T14:14:26Z","comment":"Yeah, opening this in 3.7.2c gives the following:\r\n```\r\ndoc string of `foo` was:\r\n/ // // nested docstring -- -- -/\r\n\r\nexpected:\r\n/- /- /- nested docstring -/ -/ -/\r\n```"}],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"aa249a14318c7465618d4538e721d9a1a1a974fd","message":"fix(scanner): read nested doc strings properly","date":"2020-04-14T00:41:00Z"}]},{"author":"jcommelin","number":190,"diff_summary":[{"file":"library/data/buffer.lean","status":"M","additions":40,"deletions":15},{"file":"library/init/data/array/basic.lean","status":"M","additions":40,"deletions":15},{"file":"src/library/vm/vm_array.cpp","status":"M","additions":40,"deletions":15},{"file":"tests/lean/run/array1.lean","status":"M","additions":40,"deletions":15},{"file":"tests/lean/run/array2.lean","status":"M","additions":40,"deletions":15}],"state":"merged","open_date":"2020-04-13T18:41:06Z","update_date":"2020-04-18T11:23:40Z","discussion":[{"author":"bryangingechen","date":"2020-04-16T21:45:57Z","comment":"This is [failing two tests at the moment](https://travis-ci.org/github/leanprover-community/lean/jobs/674894609#L2534): \r\n- https://github.com/leanprover-community/lean/blob/master/tests/lean/run/array1.lean\r\n- https://github.com/leanprover-community/lean/blob/master/tests/lean/run/array2.lean\r\n\r\n**edit**: I've fixed the tests, but it looks like there are other open questions about this PR that I can't address."},{"author":"gebner","date":"2020-04-18T09:03:05Z","comment":"@jcommelin Are you still working on this PR?  From my point of view, there are three things that still need to be done:\r\n 1. `array.map` should be defined in terms of `d_array.map` or `d_array.foreach`.\r\n 2. Therefore the type of `d_array.foreach` needs to be generalized.\r\n 3. The C++ implementation of `d_array.foreach` needs to ignore the new type argument."},{"author":"jcommelin","date":"2020-04-18T10:22:40Z","comment":"@gebner Hmmm... when it comes to changing some C++ implementation I would need a lot of hand holding. I'm perfectly happy with someone else making those changes. But if someone wants to take the time to teach me, that's fine as well."}],"review_discussion":[{"author":"gebner","file":"library/data/buffer.lean","date":"2020-04-13T18:58:53Z","comment":"I'm not sure if this is what Mario had in mind. :rofl: "},{"author":"jcommelin","file":"library/data/buffer.lean","date":"2020-04-13T19:09:27Z","comment":"I'm also not sure... @digama0 what did you have in mind?"},{"author":"gebner","file":"library/init/data/array/basic.lean","date":"2020-04-14T13:10:57Z","comment":"`map` needs to be implemented in terms of `foreach` because `foreach` has a fast VM implementation.\r\n\r\nThis is a list of all functions that have a VM implementation: https://github.com/leanprover-community/lean/blob/01063857bb6814374156433e8cbc0c94a9483f52/src/library/vm/vm_array.cpp#L169-L178"}],"tags":[],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"856cd90797d523e580c590f105f075758594a418","message":"feat(data/*): mmap and map for d_array, array, and buffer","date":"2020-04-13T18:43:11Z"},{"author":"jcommelin","committer":"jcommelin","hash":"58f0b47de042da899cfcf06129ce412601c3bded","message":"Whoops, forgot to rename to endomap","date":"2020-04-13T18:46:59Z"},{"author":"jcommelin","committer":"jcommelin","hash":"de1ef92f993cc875de77d4899973c581b6e37a5b","message":"Ditch d_array.mmap","date":"2020-04-14T11:52:54Z"},{"author":"jcommelin","committer":"jcommelin","hash":"635006c98a339b9f25675c8d4428b26f222936d7","message":"Fix build","date":"2020-04-14T14:55:10Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"f9c9300dd753ac7130a081a04b9d497a1d99e6df","message":"fix tests","date":"2020-04-17T22:19:14Z"},{"author":"gebner","committer":"gebner","hash":"9f4398f380a4b1a44d3ccb505aa6f04f6b6b0901","message":"Generalize d_array.foreach","date":"2020-04-18T11:06:13Z"}]},{"author":"rwbarton","number":189,"diff_summary":[{"file":"doc/fixing_tests.md","status":"A","additions":21,"deletions":39},{"file":"src/frontends/lean/decl_util.cpp","status":"A","additions":21,"deletions":39},{"file":"src/frontends/lean/util.cpp","status":"A","additions":21,"deletions":39},{"file":"src/frontends/lean/util.h","status":"A","additions":21,"deletions":39},{"file":"tests/lean/run/univ_of_instances.lean","status":"A","additions":21,"deletions":39}],"state":"merged","open_date":"2020-04-13T02:03:54Z","update_date":"2020-04-14T08:46:28Z","discussion":[{"author":"rwbarton","date":"2020-04-13T02:12:32Z","comment":"I tested that this PR does not break mathlib."}],"review_discussion":[{"author":"gebner","file":"tests/lean/univ_of_instances.lean","date":"2020-04-13T09:07:33Z","comment":"Tests that don't have any output and are only required to compile successfully should go into the `tests/lean/run` subdirectory."},{"author":"rwbarton","file":"tests/lean/univ_of_instances.lean","date":"2020-04-13T18:15:17Z","comment":"How do I run the test then?\r\n\r\nIs there any documentation for the test system? It's impossible to discover anything under `tests/lean` since there are 1000+ files there."},{"author":"gebner","file":"tests/lean/univ_of_instances.lean","date":"2020-04-13T18:31:11Z","comment":"I don't know of any documentation.  The canonical way to run the tests is to run `make test` or `ctest` in the build directory.  The nice thing about the files in the `tests/lean/run` directory is that they only need to run successfully, there is no complicated setup."},{"author":"rwbarton","file":"tests/lean/univ_of_instances.lean","date":"2020-04-13T22:05:22Z","comment":"Ah, thanks. I didn't even know about `make test`. The cmake build system has some annoying caching which made this much more difficult to test locally than it needed to be, but I think I succeeded in moving the test."}],"tags":[],"commits":[{"author":"rwbarton","committer":"rwbarton","hash":"c4cabf753340718d02767fd450a02365527b268c","message":"fix(doc/fixing_tests): fix typo","date":"2020-04-12T23:08:14Z"},{"author":"rwbarton","committer":"rwbarton","hash":"2e51d384d225b38eb8f812a4e15fffb3779f5407","message":"chore(frontends/lean/util): remove dead code","date":"2020-04-13T07:35:57Z"},{"author":"rwbarton","committer":"rwbarton","hash":"a5b75aab2cb3e5f0d42effc1d4032bbb36e27bb7","message":"fix(frontends/lean/decl_util): collect univ params of implicit instances\n\nFixes #146.\n\nThis fixes a headache that arises throughout mathlib's category theory library.","date":"2020-04-13T22:04:11Z"}]},{"author":"gebner","number":188,"diff_summary":[{"file":"src/frontends/lean/dependencies.cpp","status":"A","additions":40,"deletions":7},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":40,"deletions":7},{"file":"src/frontends/lean/parser.h","status":"A","additions":40,"deletions":7},{"file":"tests/lean/run/import_open_locale1.lean","status":"A","additions":40,"deletions":7},{"file":"tests/lean/run/import_open_locale2.lean","status":"A","additions":40,"deletions":7}],"state":"merged","open_date":"2020-04-12T09:24:49Z","update_date":"2020-04-12T14:27:39Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"16206b018ae72139b31bcddd8279afa2ae1ab959","message":"feat(frontends/lean/parser): support user commands after imports","date":"2020-04-12T09:24:39Z"},{"author":"gebner","committer":"gebner","hash":"a5d6a8356f1e1f0038d34425c0713427fff99e3c","message":"Fix go-to-definition on last import.","date":"2020-04-12T10:46:05Z"}]},{"author":"gebner","number":187,"diff_summary":[{"file":"src/library/compiler/preprocess.cpp","status":"M","additions":10,"deletions":0}],"state":"merged","open_date":"2020-04-11T16:41:35Z","update_date":"2020-04-12T12:53:35Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"a62ade9f7a07db90c9017754aa433ad74ba87ec9","message":"fix(library/compiler): convert string expressions into macros","date":"2020-04-12T09:38:33Z"}]},{"author":"gebner","number":186,"diff_summary":[{"file":"library/init/data/array/basic.lean","status":"M","additions":8,"deletions":1}],"state":"merged","open_date":"2020-04-11T16:20:08Z","update_date":"2020-04-12T09:34:27Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"a1765d4fbf7c7d2c8435b877e71ac645adb8f5f4","message":"perf(library/init/data/array/basic): speed up array.map","date":"2020-04-11T16:17:50Z"}]},{"author":"gebner","number":185,"diff_summary":[{"file":"src/library/compiler/erase_irrelevant.cpp","status":"M","additions":53,"deletions":3},{"file":"src/library/compiler/vm_compiler.cpp","status":"M","additions":53,"deletions":3},{"file":"src/library/string.cpp","status":"M","additions":53,"deletions":3},{"file":"src/library/string.h","status":"M","additions":53,"deletions":3},{"file":"src/library/vm/optimize.cpp","status":"M","additions":53,"deletions":3},{"file":"src/library/vm/vm.cpp","status":"M","additions":53,"deletions":3},{"file":"src/library/vm/vm.h","status":"M","additions":53,"deletions":3}],"state":"merged","open_date":"2020-04-11T11:48:03Z","update_date":"2020-04-11T14:56:57Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"9b87526a2af8565010d31bab8a32a05b15022b21","message":"feat(library/vm): string literals","date":"2020-04-11T11:44:55Z"}]},{"author":"gebner","number":183,"diff_summary":[{"file":"src/library/tactic/simp_lemmas.cpp","status":"A","additions":20,"deletions":6},{"file":"tests/lean/run/simp_emeta_order.lean","status":"A","additions":20,"deletions":6}],"state":"merged","open_date":"2020-04-11T11:05:35Z","update_date":"2020-04-11T14:37:48Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"ad83e53af2cda23c9ae0b550241cb104e2e624bc","message":"fix(library/tactic/simp_lemmas): reverse order of emetas","date":"2020-04-11T11:02:28Z"}]},{"author":"gebner","number":182,"diff_summary":[{"file":"src/library/CMakeLists.txt","status":"D","additions":71,"deletions":1699},{"file":"src/library/init_module.cpp","status":"D","additions":71,"deletions":1699},{"file":"src/library/parray.cpp","status":"D","additions":71,"deletions":1699},{"file":"src/library/parray.h","status":"D","additions":71,"deletions":1699},{"file":"src/library/phash_map.h","status":"D","additions":71,"deletions":1699},{"file":"src/library/phashtable.h","status":"D","additions":71,"deletions":1699},{"file":"src/library/vm/vm_array.cpp","status":"D","additions":71,"deletions":1699},{"file":"src/library/vm/vm_array.h","status":"D","additions":71,"deletions":1699},{"file":"src/library/vm/vm_format.cpp","status":"D","additions":71,"deletions":1699},{"file":"src/library/vm/vm_io.cpp","status":"D","additions":71,"deletions":1699},{"file":"src/tests/library/CMakeLists.txt","status":"D","additions":71,"deletions":1699},{"file":"src/tests/library/parray.cpp","status":"D","additions":71,"deletions":1699},{"file":"src/tests/library/phashtable.cpp","status":"D","additions":71,"deletions":1699}],"state":"closed","open_date":"2020-04-11T10:50:36Z","update_date":"2020-04-11T15:45:08Z","discussion":[{"author":"Kha","date":"2020-04-11T13:20:45Z","comment":"I didn't look too closely, but is the old VM not really bad at preserving linearity?"},{"author":"gebner","date":"2020-04-11T13:49:44Z","comment":"> I didn't look too closely, but is the old VM not really bad at preserving linearity?\r\n\r\nIndeed, it's not great at that.  Several people have told me that it's completely unpredictable.  It's also not easy to debug, but at least you know what to look for.\r\n\r\nHowever the performance characteristics of `parray` are completely and utterly opaque to me.  AFAICT even a simple read can cause allocation."},{"author":"gebner","date":"2020-04-11T15:45:05Z","comment":"I think I remember some of the issues now.  One place where linearity is not preserved is in monadic expressions."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"30be26062a04211365590333989869f5860a66ed","message":"refactor(*): remove parray","date":"2020-04-11T10:48:11Z"}]},{"author":"gebner","number":180,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":6,"deletions":6},{"file":"library/init/meta/expr.lean","status":"M","additions":6,"deletions":6},{"file":"src/library/vm/vm_expr.cpp","status":"M","additions":6,"deletions":6}],"state":"merged","open_date":"2020-04-09T12:23:14Z","update_date":"2020-04-09T13:37:23Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"8ae1a53a5992c75ad5d3bd342ddddd73c653db9a","message":"refactor(init/meta/expr): better corner-case for expr.subst","date":"2020-04-09T12:20:59Z"}]},{"author":"gebner","number":179,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":22,"deletions":0}],"state":"merged","open_date":"2020-04-09T10:58:26Z","update_date":"2020-04-09T11:32:17Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"e1aa5110a346cd72a9ee0768116cd5e8cff0e4d0","message":"doc(*): update changelog for 3.8","date":"2020-04-09T10:13:37Z"}]},{"author":"gebner","number":178,"diff_summary":[{"file":"library/init/algebra/field.lean","status":"M","additions":93,"deletions":163},{"file":"library/init/algebra/group.lean","status":"M","additions":93,"deletions":163},{"file":"library/init/algebra/ordered_field.lean","status":"M","additions":93,"deletions":163},{"file":"library/init/algebra/ring.lean","status":"M","additions":93,"deletions":163},{"file":"library/init/data/int/basic.lean","status":"M","additions":93,"deletions":163},{"file":"library/init/data/int/order.lean","status":"M","additions":93,"deletions":163},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":93,"deletions":163},{"file":"tests/lean/1952.lean.expected.out","status":"M","additions":93,"deletions":163}],"state":"merged","open_date":"2020-04-08T09:54:54Z","update_date":"2020-04-08T10:59:11Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c09c2d0137d92e130d99a14537ac0d5f9d3bd9fd","message":"Revert \"fix(init/algebra/group): use same definition for add_comm_monoid… (#177)\"\n\nThis reverts commit 4b0c279d850d5bba0bcfab329714d0f94fb2101a.","date":"2020-04-08T09:40:45Z"},{"author":"gebner","committer":"gebner","hash":"b64d0fc35ca261117f459d0ca13bec9d25afff18","message":"Revert \"refactor(algebra): removing unnecessary axioms from group, ring… (#132)\"\n\nThis reverts commit 0ca8cb2a7ef7942c339f59934e62a17220798e99.","date":"2020-04-08T09:40:57Z"}]},{"author":"gebner","number":177,"diff_summary":[{"file":"library/init/algebra/group.lean","status":"M","additions":2,"deletions":2}],"state":"merged","open_date":"2020-04-07T17:06:09Z","update_date":"2020-04-07T17:45:03Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"dd4aa5acc60f50b1698c104eec81976d5e16e333","message":"fix(init/algebra/group): use same definition for add_comm_monoid and comm_monoid","date":"2020-04-07T17:04:57Z"}]},{"author":"EdAyers","number":176,"diff_summary":[{"file":"library/init/meta/float.lean","status":"M","additions":48,"deletions":9},{"file":"src/library/vm/vm_float.cpp","status":"M","additions":48,"deletions":9},{"file":"tests/lean/float.lean","status":"M","additions":48,"deletions":9},{"file":"tests/lean/float.lean.expected.out","status":"M","additions":48,"deletions":9}],"state":"merged","open_date":"2020-04-07T15:29:51Z","update_date":"2020-04-07T16:03:40Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"9377ee6a238eedf798b76a4ebbc49de1af8f4732","message":"feat(native.float): add float.of_string and change ceil, floor, round, trunc to return ints","date":"2020-04-07T15:18:46Z"}]},{"author":"gebner","number":175,"diff_summary":[{"file":"library/data/buffer/parser.lean","status":"M","additions":277,"deletions":259},{"file":"library/data/lazy_list.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/algebra/classes.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/algebra/field.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/algebra/order.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/algebra/ordered_ring.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/category/alternative.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/category/applicative.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/category/except.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/category/lawful.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/category/lift.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/category/monad_fail.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/category/reader.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/category/state.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/core.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/data/nat/basic.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/data/quot.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/data/rbtree/basic.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/data/setoid.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/data/sigma/lex.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/logic.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/meta/environment.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/meta/exceptional.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/meta/expr.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/meta/interaction_monad.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/meta/tactic.lean","status":"M","additions":277,"deletions":259},{"file":"library/init/wf.lean","status":"M","additions":277,"deletions":259},{"file":"library/system/io.lean","status":"M","additions":277,"deletions":259},{"file":"library/system/io_interface.lean","status":"M","additions":277,"deletions":259},{"file":"src/frontends/lean/elaborator.cpp","status":"M","additions":277,"deletions":259},{"file":"src/frontends/lean/inductive_cmds.cpp","status":"M","additions":277,"deletions":259},{"file":"src/frontends/lean/parser.cpp","status":"M","additions":277,"deletions":259},{"file":"src/frontends/lean/parser.h","status":"M","additions":277,"deletions":259},{"file":"src/frontends/lean/structure_cmd.cpp","status":"M","additions":277,"deletions":259},{"file":"src/frontends/lean/type_util.cpp","status":"M","additions":277,"deletions":259},{"file":"src/library/inductive_compiler/util.cpp","status":"M","additions":277,"deletions":259},{"file":"tests/lean/172.lean.expected.out","status":"M","additions":277,"deletions":259},{"file":"tests/lean/1859.lean.expected.out","status":"M","additions":277,"deletions":259},{"file":"tests/lean/as_pattern.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/eqn_proof.lean.expected.out","status":"M","additions":277,"deletions":259},{"file":"tests/lean/inaccessible.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/inaccessible2.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/inaccessible2.lean.expected.out","status":"M","additions":277,"deletions":259},{"file":"tests/lean/out_param_proj.lean.expected.out","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/def8.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/destruct.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/div_wf.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/empty_set_inside_quotations.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/gcd.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/match2.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/monad_error_problem.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/rebind_bind.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/slow_tc_synth.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/run/tc_right_to_left.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/struct_class.lean.expected.out","status":"M","additions":277,"deletions":259},{"file":"tests/lean/tactic_state_pp.lean","status":"M","additions":277,"deletions":259},{"file":"tests/lean/trust0/basic.lean","status":"M","additions":277,"deletions":259}],"state":"merged","open_date":"2020-04-07T13:29:55Z","update_date":"2020-04-07T16:03:04Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"abfa7957c6e218e04ca2609446303fc8332243e7","message":"fix(*): make RelaxedImplicit default inferred implicit kind","date":"2020-04-07T15:50:32Z"}]},{"author":"jcommelin","number":174,"diff_summary":[{"file":"library/init/algebra/functions.lean","status":"M","additions":43,"deletions":43},{"file":"library/init/algebra/ordered_group.lean","status":"M","additions":43,"deletions":43},{"file":"library/init/algebra/ordered_ring.lean","status":"M","additions":43,"deletions":43},{"file":"library/init/data/int/order.lean","status":"M","additions":43,"deletions":43},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":43,"deletions":43}],"state":"merged","open_date":"2020-04-07T08:21:24Z","update_date":"2020-04-07T09:16:20Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"jcommelin","committer":"jcommelin","hash":"1e9529f86983379a9756fde4e28a1e69af591096","message":"refactor(algebra/*): rename ordered groups/monoids to ordered add_ groups/monoids","date":"2020-04-07T08:20:30Z"}]},{"author":"EdAyers","number":173,"diff_summary":[{"file":"src/library/compiler/simp_inductive.cpp","status":"A","additions":18,"deletions":5},{"file":"tests/lean/172.lean","status":"A","additions":18,"deletions":5},{"file":"tests/lean/172.lean.expected.out","status":"A","additions":18,"deletions":5}],"state":"merged","open_date":"2020-04-03T22:47:17Z","update_date":"2020-04-07T09:22:54Z","discussion":[],"review_discussion":[{"author":"gebner","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-04T09:21:16Z","comment":"This file doesn't seem to exist.\r\n\r\nIn addition to the correct filename, could you also describe the example here?  What is the problematic term?\r\n\r\nLooking through the file, most functions seem to assume that the minor premise is eta-expanded.  I'm surprised that just inserting a `break` here works."},{"author":"EdAyers","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-04T12:13:57Z","comment":"oops yes I renamed it.\r\n\r\nThe problematic term is\r\n\r\n```\r\ninstance its_a_monad : monad option :=\r\n{ pure := λ _, some\r\n, bind := λ α β x f, option.rec_on x option.none f}\r\n```\r\nIt is expecting `f` to be a lambda expression. "},{"author":"EdAyers","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-04T12:14:28Z","comment":"I could fix it by eta expanding instead?"},{"author":"gebner","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-04T12:36:56Z","comment":"No, I mean which recursor/cases_on application is the problem here?  I'd like to have the pp.all representation of the recursor term in a comment so that I know what's going on.\r\n\r\nI believe that eta-expansion is the \"proper\" fix here.  But the current fix is also ok given how rare the issue is."},{"author":"EdAyers","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-04T13:02:52Z","comment":"The best fix would be to figure out what code further up the call stack modified the minor prem such that this routine has the right to assert that the term is a lambda, but I can't find anything that does this. I guess you would add this to `visit_cases_on`?"},{"author":"EdAyers","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-04T13:38:43Z","comment":"Hmm, if I use `e = m_ctx.eta_expand(e);` , then test 172.lean fails to generate the bytecode:\r\n```\r\nfailed to generate bytecode for 'its_a_monad'\r\nunknown declaration 'its_a_monad._lambda_5'\r\n```\r\nIf I look in the debugger, the term `e` that this method is expecting to be a lambda is:\r\n```\r\nlean::expr[App] = {\r\n  m_fn = lean::expr[Constant] = {\r\n    m_name = 'its_a_monad'.'_lambda_5',\r\n    m_levels = lean::levels\r\n  },\r\n  m_arg = lean::expr[Local] = {\r\n    m_pp_name = '_x',\r\n    m_name = 0x0.'_fresh'.0xb.0x4d4,\r\n    m_bi = {\r\n      m_implicit = 0x0,\r\n      m_strict_implicit = 0x0,\r\n      m_inst_implicit = 0x0,\r\n      m_rec = 0x0\r\n    },\r\n    m_type = lean::expr[Constant] = {\r\n      m_name = 0x1,\r\n      m_levels = lean::levels\r\n    }\r\n  }\r\n}\r\n```\r\nSo it looks like the compiler has already done a pass over `f`, I'm not sure where, and made an auxiliary definition for the lambda expression, which I bet will be defeq to a lambda."},{"author":"gebner","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-04T14:02:36Z","comment":"Yeah, at this point the term no longer type-checks.  So eta-expansion is probably no longer possible."},{"author":"EdAyers","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-04T17:56:21Z","comment":"Ok, it does feel like a hack to add in the `break; `. I'll run a build of mathlib with this change and see if it breaks anything."},{"author":"gebner","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-06T11:34:56Z","comment":"Did it break anything in mathlib?  Otherwise I'll merge it."},{"author":"EdAyers","file":"src/library/compiler/simp_inductive.cpp","date":"2020-04-07T10:32:14Z","comment":"Hi sorry my mathlib build kept OOMing (because my comp doesn't have enough mem) and I forgot about it. I've got a github action hopefully set up to do it now. :)"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"1ca88935c46366dfc305d269e1bc2b2fc3a571ee","message":"fix(simp_inductive): fix an assertion violoation for compiling `cases_on`\n\nthis was added for the test `tests/lean/crash2.lean`.\nin `option.cases_on x none f`, we would get an assertion violation\nbecause it isn't expecting a partially applied function.\nI am not sure why this only seems to occur in record introductions.","date":"2020-04-03T22:44:18Z"},{"author":"EdAyers","committer":"web-flow","hash":"8178f6293d88766a6bcd0a9dad6e98ef4d39bcb6","message":"Fix bad file reference in comment","date":"2020-04-04T12:12:48Z"}]},{"author":"Jack-Pumpkinhead","number":171,"diff_summary":[{"file":"library/init/data/nat/bitwise.lean","status":"M","additions":40,"deletions":19},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":40,"deletions":19}],"state":"open","open_date":"2020-04-01T14:11:41Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"digama0","date":"2020-04-01T14:22:02Z","comment":"Rather than having `nat` versions of these theorems, I suggest importing the `decidable.*` order lemmas in `algebra.order` from mathlib and using them instead."},{"author":"digama0","date":"2020-04-01T14:24:38Z","comment":"Also, it would be nice if this extended to `int` as well. Again, it should be as simple as applying the `decidable.*` theorems instead of the regular ones when constructing the instance."},{"author":"Jack-Pumpkinhead","date":"2020-04-01T15:36:36Z","comment":"Oh.. `int.decidable_le` use (implicit) subtraction `int.has_sub` which comes from `int.comm_ring` which contains classical...\r\n\r\nIn other situations `decidable.*` is a good choice."},{"author":"digama0","date":"2020-04-01T15:52:46Z","comment":"Right, because the proof of `int.comm_ring` uses facts about linear ordered rings (on nat, I think) that ultimately trace back to those theorems. I originally wrote the `decidable.*` series with exactly this refactor in mind, but that was before we unfroze the lean repo."}],"review_discussion":[],"tags":[],"commits":[{"author":"Jack-Pumpkinhead","committer":"Jack-Pumpkinhead","hash":"438b613186f66b10045d6c533beae739590ae7df","message":"chore(library/init/data): constructive nat\n\nadd nat lemmas to avoid classical.choice","date":"2020-04-01T13:39:58Z"}]},{"author":"semorrison","number":170,"diff_summary":[{"file":"library/init/meta/simp_tactic.lean","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2020-04-01T12:35:34Z","update_date":"2020-04-01T14:47:04Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"web-flow","hash":"825847f7a8a6bd5664faaec19a49f3afbaa78f56","message":"fix(meta/simp_tactic): call instantiate_mvars on target before simplifying","date":"2020-04-01T12:34:55Z"}]},{"author":"semorrison","number":169,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":5,"deletions":5},{"file":"tests/lean/pp_zero_bug.lean.expected.out","status":"M","additions":5,"deletions":5},{"file":"tests/lean/run/1562.lean","status":"M","additions":5,"deletions":5}],"state":"merged","open_date":"2020-04-01T12:32:52Z","update_date":"2020-04-03T10:22:27Z","discussion":[{"author":"gebner","date":"2020-04-01T13:09:40Z","comment":"Should we also fix `has_emptyc` as well?  Should we make `mk {}` the default for classes (or even structures and/or inductives in general)?\r\n\r\nI am a bit reluctant to make such a fundamental change if the issue is likely to come back in a few months when we switch to Lean 4.\r\n\r\n@Kha Do you know about the situation in Lean 4?  In case you didn't follow the discussion, the issue is that the unifier has special code to unify type and type class arguments with higher transparency (i.e. semireducible).  However this code is only used when the arguments are implicit or instance-implicit.\r\n\r\nUnfortunately, `has_zero.zero` has the type as an explicit argument.  This is because the structure command only makes parameters implicit if they can be inferred from other arguments.  Hence the unification behavior of `has_zero.zero` and `has_add.add` is surprisingly different because the `α` argument has different implicitness:\r\n```lean\r\nhas_zero.zero (α) [has_zero α] : α\r\n\r\n-- for comparison, the `α` is implicit in (+)\r\nhas_add.add {α} [has_add α] : α → α → α\r\n```\r\n\r\nHere is a MWE:\r\n```lean\r\n-- M and ℕ unify with semireducible transparency\r\ndef M := ℕ\r\n\r\ninstance : has_zero M := nat.has_zero\r\ninstance : has_add M := nat.has_add\r\n\r\n-- unifies with reducible transparency\r\nexample (a b : ℕ) : (a + b : M) = (a + b : ℕ) :=\r\nby tactic.reflexivity tactic.transparency.reducible\r\n\r\n-- does not unify with reducible transparency\r\n-- (it should behave just like addition)\r\nexample : (0 : M) = (0 : ℕ) :=\r\nby tactic.reflexivity tactic.transparency.reducible\r\n```"},{"author":"Kha","date":"2020-04-01T14:22:54Z","comment":"> @Kha Do you know about the situation in Lean 4?\r\n\r\nI didn't know about this special case, but it looks like it's still there: https://github.com/leanprover/lean4/blob/master/src/Init/Lean/Meta/ExprDefEq.lean#L161-L172. `TransparencyMode` has been simplified to `all | default | reducible`."},{"author":"gebner","date":"2020-04-01T14:45:08Z","comment":"Nice, there haven't been any changes to the unifier.  Even the comments are the same. :smile: \r\n\r\nSo I guess this means we should make the arguments in `0` implicit.  Let's see how this goes."},{"author":"gebner","date":"2020-04-01T15:39:06Z","comment":"@semorrison Two tests fail now: `pp_zero_bug.lean` (output has changed) and `1562.lean`."},{"author":"semorrison","date":"2020-04-03T01:02:43Z","comment":"Okay... I'm going to have to learn how to actually build Lean again. It's been a while. (I made this PR direct from github.)"},{"author":"bryangingechen","date":"2020-04-03T02:41:50Z","comment":"@semorrison No worries, I've fixed the tests, I hope."}],"review_discussion":[],"tags":[],"commits":[{"author":"semorrison","committer":"web-flow","hash":"7db53bbfdf1aeed36e5d5582827b54b5d0ec95d1","message":"fix(init/core): make type argument in has_one/has_zero implicit\n\nSee discussion at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/unbearable.20unhappiness.20of.20.60simp.60.20not.20working","date":"2020-04-01T12:16:58Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"cf036b7e22da7ccb04e27ead94ba585f76024fe5","message":"fix tests","date":"2020-04-03T02:35:50Z"}]},{"author":"cipher1024","number":168,"diff_summary":[{"file":"library/init/meta/converter/conv.lean","status":"A","additions":350,"deletions":54},{"file":"library/init/meta/executor.lean","status":"A","additions":350,"deletions":54},{"file":"library/init/meta/interactive.lean","status":"A","additions":350,"deletions":54},{"file":"library/init/meta/tactic.lean","status":"A","additions":350,"deletions":54},{"file":"src/frontends/lean/interactive.cpp","status":"A","additions":350,"deletions":54},{"file":"src/frontends/lean/tactic_notation.cpp","status":"A","additions":350,"deletions":54},{"file":"src/frontends/lean/tactic_notation.h","status":"A","additions":350,"deletions":54}],"state":"open","open_date":"2020-04-01T00:47:24Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"gebner","date":"2020-04-01T08:40:39Z","comment":"Ping me please once there is something reviewable here."}],"review_discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"736060d87d1d19c3a3fb59a5e3dfe870be6ab77a","message":"feat(tactic/lint): add some hooks to allow linting of proof scripts","date":"2020-04-01T00:44:17Z"}]},{"author":"anfelor","number":167,"diff_summary":[{"file":"library/init/algebra/ordered_group.lean","status":"M","additions":37,"deletions":15},{"file":"library/init/algebra/ordered_ring.lean","status":"M","additions":37,"deletions":15},{"file":"library/init/data/int/order.lean","status":"M","additions":37,"deletions":15},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":37,"deletions":15}],"state":"merged","open_date":"2020-03-31T17:46:43Z","update_date":"2020-04-04T10:52:06Z","discussion":[{"author":"urkud","date":"2020-03-31T22:28:32Z","comment":"Should we create a branch with all proposed library changes, and a big pending PR from this branch to `master`? This way it will be easier to track, e.g., if this PR conflicts with #161, and at release we can merge the large PR without squashing."},{"author":"gebner","date":"2020-04-01T08:55:56Z","comment":"I think we have enough changes now to warrant a new release.  I'll merge this PR.  (EDIT: as soon as the comments are addressed.)\r\n\r\nI'm not sure if it was the right choice to wait with merging the PRs to keep Lean master compatible with mathlib master.  In the end we don't gain much from it."}],"review_discussion":[{"author":"anfelor","file":"library/init/algebra/ordered_group.lean","date":"2020-03-31T17:50:28Z","comment":"The original mathlib proof used `replace` instead of `let`, but I think they are equivalent here."},{"author":"bryangingechen","file":"library/init/algebra/ordered_group.lean","date":"2020-03-31T17:57:15Z","comment":"I would keep `replace`, actually. `let` keeps the details of the term around, but Lean's `Prop` is proof-irrelevant so there's no reason to use `let` when the type is in `Prop`. "},{"author":"bryangingechen","file":"library/init/algebra/ordered_group.lean","date":"2020-03-31T17:57:41Z","comment":"```suggestion\r\n  rw lt_iff_le_not_le at h ⊢,\r\n```"},{"author":"gebner","file":"library/init/algebra/ordered_ring.lean","date":"2020-03-31T17:59:34Z","comment":"Is there a reason you're sometimes removing the axioms for `≤` and sometimes the ones for `<`?"},{"author":"bryangingechen","file":"library/init/algebra/ordered_group.lean","date":"2020-03-31T18:00:01Z","comment":"```suggestion\r\n  ordered_comm_group.add_lt_add_left a b h c\r\n  \r\n```\r\n"},{"author":"gebner","file":"library/init/algebra/ordered_group.lean","date":"2020-03-31T18:00:43Z","comment":"I won't complain as long as the proof works."},{"author":"anfelor","file":"library/init/algebra/ordered_ring.lean","date":"2020-03-31T18:29:13Z","comment":"For `ordered_ring` there is one: `mul_nonneg => mul_pos` holds only in integral domains while the converse holds in arbitrary rings (that probably applies to semirings too in some way). For `ordered_comm_group` the reason is that I re-used the proof from mathlib, but I could change that for consistency.."},{"author":"anfelor","file":"library/init/algebra/ordered_group.lean","date":"2020-03-31T18:29:59Z","comment":"I thought `replace` came from mathlib. If it's in the lean core, I can use it too"},{"author":"gebner","file":"library/init/algebra/ordered_ring.lean","date":"2020-03-31T18:51:04Z","comment":"It's fine as long as there is a reason for it.  I was just surprised by the apparent inconsistency."},{"author":"bryangingechen","file":"library/init/algebra/ordered_group.lean","date":"2020-03-31T19:02:01Z","comment":"Oh, you're right. `replace` is indeed a mathlib tactic. You could use `have` there instead of `let`. There will be two variables named `w`  but Lean is smart enough here to figure out which one goes where. If it bothers you you can rename one of them to `w'`."},{"author":"bryangingechen","file":"library/init/algebra/ordered_group.lean","date":"2020-04-02T02:49:46Z","comment":"```suggestion\r\n    have w : -c + (c + b) ≤ -c + (c + a) := ordered_comm_group.add_le_add_left _ _ w _,\r\n```"}],"tags":[],"commits":[{"author":"anfelor","committer":"anfelor","hash":"fc8f6f13f4cf82776b956929cc0d8f86d9f8d99c","message":"Remove redundant fields","date":"2020-03-31T17:44:15Z"},{"author":"anfelor","committer":"web-flow","hash":"9ac9f21c51d241df6fad18e256478ee4a358c511","message":"Apply suggestions from code review\n\nCo-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-04-04T09:14:11Z"},{"author":"gebner","committer":"web-flow","hash":"31cfc2b6bf7d674f3d0f73848b842c9c9869c9f1","message":"Merge branch 'master' into master","date":"2020-04-04T09:23:52Z"}]},{"author":"EdAyers","number":166,"diff_summary":[{"file":"library/init/meta/attribute.lean","status":"M","additions":86,"deletions":73},{"file":"library/init/meta/congr_lemma.lean","status":"M","additions":86,"deletions":73},{"file":"library/init/meta/environment.lean","status":"M","additions":86,"deletions":73},{"file":"library/init/meta/format.lean","status":"M","additions":86,"deletions":73},{"file":"library/init/meta/simp_tactic.lean","status":"M","additions":86,"deletions":73},{"file":"library/init/meta/type_context.lean","status":"M","additions":86,"deletions":73}],"state":"merged","open_date":"2020-03-31T16:48:00Z","update_date":"2020-04-02T09:37:57Z","discussion":[{"author":"cipher1024","date":"2020-03-31T16:52:53Z","comment":"I appreciate the documentation! I had some complaints about indenting comments in docstrings. People seem to prefer\r\n\r\n```\r\n/-- foo foo bar foo\r\nnew line foo bar foo\r\n-/\r\n```\r\n\r\nbecause of how VSCode reads and displays the comments in hover text."},{"author":"gebner","date":"2020-03-31T17:56:22Z","comment":"This is a definite improvement.  Do you plan to fix the other `[TODO]`s as well?"},{"author":"EdAyers","date":"2020-04-01T14:09:27Z","comment":"Yes, I've just had a look through them now. Some of them were just notes to myself to understand some obscure config flag. I can't understand what some of the config flags do still so is it ok to just remove the '[todo]'?"},{"author":"gebner","date":"2020-04-01T14:17:57Z","comment":"Yes, please remove the TODOs.  If I (or somebody else) knows what the flags do, we can always add it as a suggestion."},{"author":"EdAyers","date":"2020-04-01T14:22:02Z","comment":"done, see the commit message of a6bf1c8 for more info."}],"review_discussion":[{"author":"gebner","file":"library/init/meta/environment.lean","date":"2020-04-01T14:22:14Z","comment":"```suggestion\r\nNote that projections have nothing to do with the dot `mylist.map` syntax.\r\n```"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"2d652a09e22d74ca2eb15ee74f04940943e4db22","message":"doc(format): add missing docstrings","date":"2020-03-31T16:34:06Z"},{"author":"EdAyers","committer":"EdAyers","hash":"da953da0e2935c551aeb58d33db1441783294f7a","message":"doc(type_context): improve docstrings\n\n- change old references to `tco`.\n- add clarification of `get_context`\n- add clarification of `level.assign`.\n- add docstring for `run`","date":"2020-03-31T16:35:29Z"},{"author":"EdAyers","committer":"web-flow","hash":"be607da26366bd7a1a2b30868cbe41bdd8a33c44","message":"doc(format): fix indenting in docstring","date":"2020-03-31T16:56:03Z"},{"author":"EdAyers","committer":"web-flow","hash":"719b9d5bf7ffbc5ae39d001405f65a58a99f4876","message":"doc(type_context): fix indenting in docstrings","date":"2020-03-31T16:57:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a6bf1c8fd5e97b0934db49c8627f2cc0330a5161","message":"doc(meta): fix some documentation todos\n\nI removed some todos that were done or not necessary.\nI resolved some of the todos be writing the docs.\nSome of the [todo]ed declarations remain opaque to me, so\nI've either removed them or added a link to a comment in the C++.\nI don't think this is a regression because there are plenty of other undocumented\ndeclarations that would need to be todoed to remain consistent.\nThe todos were originally there just as a personal note to attempt to\nunderstand how they work, but they were left in during the doc PR.","date":"2020-04-01T14:14:26Z"},{"author":"EdAyers","committer":"web-flow","hash":"7c0015f94f5ebb1efe7ead197f918d2e221a5896","message":"Update library/init/meta/environment.lean\n\nCo-Authored-By: Gabriel Ebner <gebner@gebner.org>","date":"2020-04-01T17:31:54Z"}]},{"author":"digama0","number":165,"diff_summary":[{"file":"src/library/app_builder.cpp","status":"M","additions":7,"deletions":2}],"state":"merged","open_date":"2020-03-29T04:13:13Z","update_date":"2020-04-01T14:52:49Z","discussion":[],"review_discussion":[{"author":"gebner","file":"src/library/app_builder.cpp","date":"2020-03-29T09:25:00Z","comment":"```suggestion\r\n        if (!is_arrow(mtype)) {\r\n```\r\n\r\nOtherwise we might call `relaxed_whnf` on a term with free de Brujin variables."},{"author":"digama0","file":"src/library/app_builder.cpp","date":"2020-03-29T11:09:05Z","comment":"What if the body contains a free occurrence of the binding, but it still reduces to `Sort u`?"},{"author":"gebner","file":"src/library/app_builder.cpp","date":"2020-04-01T14:52:36Z","comment":"Good point.  `whnf` has some code to handle de Bruijn variables, so it's probably going to be fine.  Or fails horribly.  Let's test this in production."}],"tags":[],"commits":[{"hash":"beb2cee17d13e4a7f64e62fbc504ef8384474c7c","message":"fix(library/app_builder): whnf universe first","date":"2020-03-29T04:12:14Z"}]},{"author":"urkud","number":161,"diff_summary":[{"file":"library/init/algebra/field.lean","status":"M","additions":63,"deletions":91},{"file":"library/init/algebra/ordered_field.lean","status":"M","additions":63,"deletions":91},{"file":"library/init/algebra/ordered_ring.lean","status":"M","additions":63,"deletions":91},{"file":"library/init/data/prod.lean","status":"M","additions":63,"deletions":91},{"file":"library/init/function.lean","status":"M","additions":63,"deletions":91},{"file":"library/init/logic.lean","status":"M","additions":63,"deletions":91}],"state":"merged","open_date":"2020-03-24T18:42:55Z","update_date":"2020-04-01T14:50:39Z","discussion":[{"author":"urkud","date":"2020-03-28T17:18:37Z","comment":"Any chance to have it reviewed soon?"},{"author":"cipher1024","date":"2020-03-28T18:19:27Z","comment":"> So far I've always postponed actually merging the PRs until the release day. My reasoning is that it is easier to test changes to Lean if Lean master can build mathlib master.\r\n\r\nIf we switch to GitHub Actions, any chance we could get the build system to check mathlib for us?"},{"author":"gebner","date":"2020-03-28T18:28:22Z","comment":"> If we switch to GitHub Actions, any chance we could get the build system to check mathlib for us?\r\n\r\nWe could, but this check would typically fail.  Usually we make breaking changes in Lean, and then shortly before the release fix mathlib in a `lean3N` branch."}],"review_discussion":[{"author":"gebner","file":"library/init/algebra/field.lean","date":"2020-03-28T17:28:28Z","comment":"```suggestion\r\nlemma div_mul_mul_eq_div {a : α} (b : α) (h : a ≠ 0) : (1 / (a * b)) * a = 1 / b :=\r\n```\r\n\r\nBut I'm not confident of my ability to choose good names."},{"author":"urkud","file":"library/init/algebra/field.lean","date":"2020-03-28T19:03:39Z","comment":"I assumed that this is a name used by `norm_num` or something, so I didn't touch it."},{"author":"gebner","file":"library/init/algebra/field.lean","date":"2020-04-01T14:49:08Z","comment":"Oh wow. That's the name we already use. I guess it's ok then."}],"tags":[],"commits":[{"author":"urkud","committer":"urkud","hash":"daab2d9bc4c2617ca13d5d67c09a2d9b410c033e","message":"chore(library/init/*): a few small improvements\n\nrefs #160\n\n* `inv_inv'` takes `a` as an explicit argument;\n* `div_mul_left` for `division_ring`s;\n* `prod.map` and `function.uncurry` don't use pattern matching;\n* export `inhabited.default` instead of `def`ining it","date":"2020-03-24T18:39:01Z"},{"author":"urkud","committer":"urkud","hash":"e6f02148da6defdcea945ec0b1fbff8bfdb0c6ea","message":"Move more lemmas from `field` to `ring` / `division_ring`","date":"2020-03-24T20:35:45Z"},{"author":"urkud","committer":"web-flow","hash":"b4317d8d45b21380a968ea138fcc36e6a8cd7e7f","message":"Merge branch 'master' into library-fixes","date":"2020-03-28T17:18:47Z"}]},{"author":"Vierkantor","number":159,"diff_summary":[{"file":"library/init/logic.lean","status":"A","additions":12,"deletions":11},{"file":"tests/lean/simp_ite.lean","status":"A","additions":12,"deletions":11},{"file":"tests/lean/simp_ite.lean.expected.out","status":"A","additions":12,"deletions":11}],"state":"merged","open_date":"2020-03-24T11:21:57Z","update_date":"2020-03-31T13:53:13Z","discussion":[{"author":"semorrison","date":"2020-03-25T05:08:51Z","comment":"Fantastic! It's lovely to see the top to bottom integration of the community work on Lean here. I was trying to prove that `1/#G \\Sigma_g g` projected onto the trivial isotypic component of a G representation, and here we are."}],"review_discussion":[],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"bd1652917a74a891dfbd0e3a59447b24d24da6c7","message":"Remove `if_simp_congr` for more powerful `if` simplification\n\nThe removed lemma caused `simp` to always use `decidable_of_decidable_iff`\nto construct a `decidable` instance for the condition of an `if` expression.\nThat meant that `if c then t else e = if c' then t else e` often did not get\nsolved by `simp`, getting stuck on `dec_c = decidable_of_decidable_of_iff ...`\nThere is another `congr` lemma, `if_congr`, defined just before\n`if_simp_congr`, which does allow the `decidable` instances to differ.\nBecause of the order of the declarations, `if_simp_congr` takes priority.\n\nIt seems that `if_simp_congr` was introduced to allow progress rewriting\n`if c then t else e` to `if c' then t else e` without requiring a\n`decidable c'` instance. However, this progress should never be needed to\nclose a goal: either the `if` expression is rewritten by another `simp` lemma\ncarrying its own `decidable` instances, or it is not rewritten, so the\n`decidable` instance already exists in the goal. The only breakage will be to\nnon-terminal `simp`s, which are an anti-pattern anyway.  The removed lemmas are\nnot used either in another part of the core library or mathlib.\n\nThe only errors occuring when compiling mathlib with these changes are goals\nbeing closed too soon because `simp` has become more powerful.","date":"2020-03-24T10:49:24Z"}]},{"author":"Vtec234","number":158,"diff_summary":[{"file":"README.md","status":"M","additions":3,"deletions":3}],"state":"merged","open_date":"2020-03-22T17:22:36Z","update_date":"2020-03-24T17:23:36Z","discussion":[{"author":"bryangingechen","date":"2020-03-22T17:24:25Z","comment":"I suggest we also link to [mathlib's installation instructions](https://github.com/leanprover-community/mathlib#installation) in the Installation section, since that's what most users should use."}],"review_discussion":[],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"ed9ece996c3ff883203c4a08dee45e6603234f2c","message":"doc(readme): clarify community version","date":"2020-03-22T17:19:09Z"},{"author":"Vtec234","committer":"web-flow","hash":"d4f19b9ab696dbd397d4c52e1cf3b62fced37b16","message":"Update README.md","date":"2020-03-22T17:33:45Z"}]},{"author":"Vtec234","number":155,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":8,"deletions":2},{"file":"src/CMakeLists.txt","status":"M","additions":8,"deletions":2},{"file":"src/library/module.cpp","status":"M","additions":8,"deletions":2}],"state":"merged","open_date":"2020-03-20T14:42:33Z","update_date":"2020-03-20T15:24:26Z","discussion":[{"author":"gebner","date":"2020-03-20T15:05:40Z","comment":"Looks good.  Did you test this on windows?  Does it fix the issue?"},{"author":"Vtec234","date":"2020-03-20T15:11:05Z","comment":"Yep, I've tested and it seems to fix the problem. We should merge and release this soon if possible, otherwise people on Windows will experience super slow builds with recent mathlib."}],"review_discussion":[],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"f15abcaff21896084487b76fc7a9210f4851161e","message":"fix(module): open .oleans in binary mode on Windows","date":"2020-03-20T14:41:22Z"}]},{"author":"digama0","number":153,"diff_summary":[{"file":"src/frontends/lean/brackets.cpp","status":"M","additions":14,"deletions":5},{"file":"src/frontends/lean/pp.cpp","status":"M","additions":14,"deletions":5}],"state":"closed","open_date":"2020-03-20T10:25:25Z","update_date":"2020-05-12T12:13:34Z","discussion":[{"author":"urkud","date":"2020-04-08T21:50:24Z","comment":"Note that with this PR `#check ({0, 1} : set nat)` will output `{1, 0}` because @digama0 changes the parser but not the pretty printer."},{"author":"jcommelin","date":"2020-05-11T11:51:38Z","comment":"@urkud @digama0 What is the status here? Yury's `has_singleton` PR has been merged. It would be nice to also have this one. And then fix mathlib."},{"author":"gebner","date":"2020-05-11T14:43:16Z","comment":"The only thing missing here is updating the pretty-printer."},{"author":"urkud","date":"2020-05-11T18:29:47Z","comment":"Possibly fixed the pretty printer. Compiling & testing."},{"author":"gebner","date":"2020-05-12T11:38:14Z","comment":"bors merge"},{"author":"gebner","date":"2020-05-12T11:39:44Z","comment":"bors r-\r\nbors r+"},{"author":"bors[bot]","date":"2020-05-12T11:39:45Z","comment":"Canceled."},{"author":"bors[bot]","date":"2020-05-12T12:13:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/666832660)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/666832688)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/666832672)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/666832646)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/666832630)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/666832604)"}],"review_discussion":[{"author":"gebner","file":"src/frontends/lean/brackets.cpp","date":"2020-04-01T08:50:11Z","comment":"Lean still uses C++11, so this won't work."},{"author":"urkud","file":"src/frontends/lean/brackets.cpp","date":"2020-04-11T05:53:53Z","comment":"What's the plan here: rewrite or switch to c++17?"},{"author":"digama0","file":"src/frontends/lean/brackets.cpp","date":"2020-04-11T06:02:47Z","comment":"While I would be fine with switching to C++17, my plan was to rewrite when I get the time to come back to this."},{"author":"urkud","file":"src/frontends/lean/brackets.cpp","date":"2020-04-11T06:24:15Z","comment":"With `g++ -std=c++17` I get the following error:\r\n```\r\n<...>/lean3/src/frontends/lean/brackets.cpp: In function ‘lean::expr lean::parse_fin_set(lean::parser&, const pos_info&, const lean::expr&)’:\r\n<...>/lean3/src/frontends/lean/brackets.cpp:59:18: error: declaration of ‘auto pos’ shadows a parameter\r\n   59 |     auto [pos, e2] = stack[i];\r\n      |                  ^\r\nmake[2]: *** [frontends/lean/CMakeFiles/lean_frontend.dir/build.make:427: frontends/lean/CMakeFiles/lean_frontend.dir/brackets.cpp.o] Error 1\r\nmake[1]: *** [CMakeFiles/Makefile2:2226: frontends/lean/CMakeFiles/lean_frontend.dir/all] Error 2\r\nmake: *** [Makefile:163: all] Error 2\r\n```"},{"author":"urkud","file":"src/frontends/lean/brackets.cpp","date":"2020-04-11T07:16:36Z","comment":"Fixed compile. Feel free to revert/rewrite."}],"tags":[],"commits":[{"author":"digama0","committer":"digama0","hash":"635f3ba172ecf7c192ee3b945b6e2d373ffcbcfc","message":"fix(frontends/lean/brackets): parse {a,b,c} as right associative","date":"2020-03-20T10:22:55Z"},{"author":"urkud","committer":"urkud","hash":"eccf6ca6fd65ea56afdb57da5c051ef6a3243bcb","message":"Fix compile","date":"2020-04-11T07:15:10Z"},{"author":"gebner","committer":"web-flow","hash":"10ca7e95d23ad60e792fca23bc3d879c370dbcd3","message":"Merge branch 'master' into rassoc-brackets","date":"2020-05-11T14:29:40Z"},{"author":"urkud","committer":"urkud","hash":"81e41373b3a45d24847640d73d5b6ccfa09bbf6a","message":"Adjust pretty-printer","date":"2020-05-11T18:59:30Z"},{"author":"urkud","committer":"urkud","hash":"3f25c9ca3249562e2e2e0da58a27b3d66b05ba68","message":"Make style check happy","date":"2020-05-11T19:08:06Z"}]},{"author":"gebner","number":152,"diff_summary":[{"file":"library/init/algebra/functions.lean","status":"M","additions":63,"deletions":79},{"file":"library/init/algebra/order.lean","status":"M","additions":63,"deletions":79},{"file":"library/init/algebra/ordered_field.lean","status":"M","additions":63,"deletions":79},{"file":"library/init/core.lean","status":"M","additions":63,"deletions":79},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":63,"deletions":79},{"file":"library/init/meta/comp_value_tactics.lean","status":"M","additions":63,"deletions":79},{"file":"library/init/meta/expr.lean","status":"M","additions":63,"deletions":79},{"file":"src/frontends/lean/calc.cpp","status":"M","additions":63,"deletions":79},{"file":"tests/lean/1513.lean.expected.out","status":"M","additions":63,"deletions":79},{"file":"tests/lean/anc1.lean.expected.out","status":"M","additions":63,"deletions":79},{"file":"tests/lean/curly_notation.lean.expected.out","status":"M","additions":63,"deletions":79},{"file":"tests/lean/elab8.lean.expected.out","status":"M","additions":63,"deletions":79},{"file":"tests/lean/elab9.lean.expected.out","status":"M","additions":63,"deletions":79},{"file":"tests/lean/hinst_lemmas1.lean.expected.out","status":"M","additions":63,"deletions":79},{"file":"tests/lean/induction_tac1.lean.expected.out","status":"M","additions":63,"deletions":79},{"file":"tests/lean/rev_tac1.lean.expected.out","status":"M","additions":63,"deletions":79},{"file":"tests/lean/set_of.lean.expected.out","status":"M","additions":63,"deletions":79},{"file":"tests/lean/subpp.lean.expected.out","status":"M","additions":63,"deletions":79}],"state":"closed","open_date":"2020-03-19T22:49:26Z","update_date":"2020-10-27T10:34:10Z","discussion":[{"author":"cipher1024","date":"2020-03-20T03:33:47Z","comment":"Why aren't they usable in `calc` blocks anymore? If we used `abbreviation` instead of `notation`, would that be good enough?"},{"author":"jcommelin","date":"2020-03-20T04:08:12Z","comment":"I would also very much like to keep them available in calc-blocks.\r\nOn the up side, does this mean that the `>`-linter can now be removed? Because `simp` will see through the notation, right?"},{"author":"gebner","date":"2020-03-20T11:27:21Z","comment":"> Why aren't they usable in calc blocks anymore?\r\n\r\nThe immediate reason is because the calc parser joins the proofs in the calc proof using transitivity steps.  So consider the following example:\r\n```lean\r\ncalc a = b    : p1\r\n   ... > c    : p2\r\n```\r\nHere `calc` needs to combine `a = b` and `dummy > c` via transitivity.  However, the second expression is actually `c < dummy` and Lean doesn't know how to apply transitivity here.  (The calc parser also gets confused since dummy is now the second argument.)\r\n\r\n> If we used abbreviation instead of notation, would that be good enough?\r\n\r\nThe definitions `ge` and `gt` are already reducible.  AFAICT the only difference between `abbreviation` and `@[reducible, inline] def` is that that the unifier unfolds the abbreviation a bit more eagerly.\r\n\r\nI'm not sure what goes wrong exactly, but I think it boils down to the fact that `e.get_app_fn.const_name` returns different names for `a < b` and `a > b`.  Turning `ge` and `gt` into an abbreviation doesn't change that.\r\n\r\n@digama0 @fpvandoorn IIRC you've been heavily involved in the war against `>`.  Do you have a small MWE of what goes wrong with `>`?"},{"author":"gebner","date":"2020-03-20T11:28:26Z","comment":">  On the up side, does this mean that the >-linter can now be removed? Because simp will see through the notation, right?\r\n\r\nYes!  That's the motivation for this change."},{"author":"Kha","date":"2020-03-20T11:48:43Z","comment":"> I'm not sure what goes wrong exactly, but I think it boils down to the fact that `e.get_app_fn.const_name` returns different names for `a < b` and `a > b`. Turning `ge` and `gt` into an abbreviation doesn't change that.\r\n\r\nThe big issue is head matching as used by `simp` and others, right? There is the `add_key_equivalence` command [that is supposed to solve this issue](https://github.com/leanprover/lean/blob/master/src/library/tactic/kabstract.h#L18), but AFAICS it's never been tried in either corelib or mathlib..."},{"author":"gebner","date":"2020-03-20T12:49:53Z","comment":"> The big issue is head matching as used by simp and others, right?\r\n\r\nI assume so, but I'm not an expert on the gt-issues.\r\n\r\n> There is the add_key_equivalence command that is supposed to solve this issue.\r\n\r\nUnfortunately, the `add_key_equivalence` only affects `kabstract` used by `rw`.  The simplifier uses the `head_index` class, which literally computes `const_name(get_app_fn(lhs))`: https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/library/head_map.cpp#L23"},{"author":"Kha","date":"2020-03-20T12:52:59Z","comment":"Ah, you're right."},{"author":"ChrisHughes24","date":"2020-03-20T13:39:57Z","comment":"Maybe this is for another PR, but should we do the same for `ne` as well?"},{"author":"digama0","date":"2020-03-20T13:55:48Z","comment":"I don't think so. `ne a b` is actually shorter than `not (eq a b)`, and also there are theorems in the `ne` namespace like `ne.symm` that would be lost if it was turned into a notation. Plus `ne` is in simp normal form so there isn't a need to eliminate it."},{"author":"cipher1024","date":"2020-03-20T23:16:12Z","comment":"If we could add the right keys in the right tables rather than removing `>`, I'd prefer that. And if we could have a notion of synonym that can be reused, that would be even better. I can think of the same treatment for `>>=` vs `=<<`. Maybe we need an attribute?"},{"author":"rwbarton","date":"2020-05-26T13:55:35Z","comment":"One mild reason for `>` to be a definition rather than notation is that it means the pretty-printer can reproduce what the user wrote, rather than always producing `<` (or worse, always producing `>`)."}],"review_discussion":[{"author":"jcommelin","file":"library/init/algebra/order.lean","date":"2020-03-20T04:10:13Z","comment":"Why are you removing this attribute? Doesn't that mean that\r\n```lean\r\n  transitivity c,\r\n```\r\nwill no longer work when I'm proving `a ≥ b`?"},{"author":"digama0","file":"library/init/algebra/order.lean","date":"2020-03-20T05:35:20Z","comment":"Now that `≥` is a notation, `ge_trans` is identical to ` le_trans` (except the two arguments are in the opposite order). When you are proving `a ≥ b`, lean will see that you are actually proving `b ≤ a`, and so `transitivity c` will work, and will apply `le_trans` instead, meaning that the two subgoals will be in the opposite order from today."},{"author":"jcommelin","file":"library/init/algebra/order.lean","date":"2020-03-20T06:04:17Z","comment":"Aha, fair enough."}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"d85be337d6827e1e036413051e91f2d6aecd43b3","message":"refactor(*): remove gt and ge","date":"2020-03-19T22:47:22Z"}]},{"author":"Vtec234","number":150,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":44,"deletions":19},{"file":"src/CMakeLists.txt","status":"M","additions":44,"deletions":19},{"file":"src/library/module.cpp","status":"M","additions":44,"deletions":19},{"file":"src/library/module.h","status":"M","additions":44,"deletions":19},{"file":"src/library/module_mgr.cpp","status":"M","additions":44,"deletions":19},{"file":"src/util/optional.h","status":"M","additions":44,"deletions":19}],"state":"merged","open_date":"2020-03-16T13:58:22Z","update_date":"2020-03-16T16:12:34Z","discussion":[{"author":"Vtec234","date":"2020-03-16T14:00:24Z","comment":"@gebner Would you like me to also pop this into the changelog and set the version to 3.7.1?"},{"author":"gebner","date":"2020-03-16T14:07:09Z","comment":"> Would you like me to also pop this into the changelog and set the version to 3.7.1?\r\n\r\nYes, please."},{"author":"bryangingechen","date":"2020-03-16T14:33:37Z","comment":"While we're on the topic of the changelog, I noticed that 3.6.1c was missing. Here it is for ease of copy+paste.\r\n```\r\nv3.6.1c (2 Mar 2020)\r\n--------------------\r\n\r\nBug fix:\r\n - Correctly reference the community fork of Lean in `leanpkg.toml` (#131)\r\n```"}],"review_discussion":[],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"6fec0d6be68142bc467378aa3ad93ba1d7cd9082","message":"fix(module): load standalone .oleans","date":"2020-03-16T13:51:06Z"},{"author":"Vtec234","committer":"Vtec234","hash":"beb268cf283d8f0f1a33ae716c55db2d05527d6c","message":"chore(*): update changelog and set version to 3.7.1","date":"2020-03-16T14:15:14Z"},{"author":"Vtec234","committer":"web-flow","hash":"17a47484e09a6cd27168ca72582aff130a2969cf","message":"Update changes.md","date":"2020-03-16T14:35:54Z"}]},{"author":"gebner","number":149,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":25,"deletions":4}],"state":"merged","open_date":"2020-03-12T13:56:05Z","update_date":"2020-03-12T15:29:04Z","discussion":[],"review_discussion":[{"author":"Vtec234","file":"doc/changes.md","date":"2020-03-12T14:02:45Z","comment":"c? :)"},{"author":"gebner","file":"doc/changes.md","date":"2020-03-12T14:05:59Z","comment":"Good catch."},{"author":"bryangingechen","file":"doc/changes.md","date":"2020-03-12T14:13:11Z","comment":"```suggestion\r\n  - Files are recompiled based on hash code instead of timestamp (#140)\r\n```"}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"ca9539e74d3d814e0b36f1ac387b51fb209fc2f1","message":"doc(*): update changelog for 3.7","date":"2020-03-12T13:55:32Z"},{"author":"gebner","committer":"gebner","hash":"dd5901fe4466fb8eea3835f649314f0ad2a410df","message":"Add `c` suffix.","date":"2020-03-12T14:05:36Z"},{"author":"gebner","committer":"web-flow","hash":"3320ad1c575e310a6114d5bf802f00ca194483d7","message":"Update doc/changes.md\n\nCo-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>","date":"2020-03-12T14:18:27Z"}]},{"author":"gebner","number":148,"diff_summary":[{"file":"src/frontends/lean/calc.cpp","status":"M","additions":35,"deletions":30},{"file":"src/frontends/lean/interactive.cpp","status":"M","additions":35,"deletions":30},{"file":"src/frontends/lean/local_decls.h","status":"M","additions":35,"deletions":30},{"file":"src/frontends/lean/local_level_decls.h","status":"M","additions":35,"deletions":30},{"file":"src/frontends/lean/parser.cpp","status":"M","additions":35,"deletions":30},{"file":"src/frontends/lean/pp.cpp","status":"M","additions":35,"deletions":30},{"file":"src/frontends/lean/print_cmd.cpp","status":"M","additions":35,"deletions":30},{"file":"src/frontends/lean/tactic_notation.cpp","status":"M","additions":35,"deletions":30},{"file":"src/library/inductive_compiler/util.cpp","status":"M","additions":35,"deletions":30},{"file":"src/library/library_task_builder.cpp","status":"M","additions":35,"deletions":30},{"file":"src/library/module.cpp","status":"M","additions":35,"deletions":30},{"file":"src/library/module_mgr.cpp","status":"M","additions":35,"deletions":30},{"file":"src/library/tactic/smt/theory_ac.h","status":"M","additions":35,"deletions":30},{"file":"src/library/vm/vm.h","status":"M","additions":35,"deletions":30},{"file":"src/library/vm/vm_io.cpp","status":"M","additions":35,"deletions":30},{"file":"src/shell/server.cpp","status":"M","additions":35,"deletions":30},{"file":"src/util/json.hpp","status":"M","additions":35,"deletions":30},{"file":"src/util/sexpr/format.h","status":"M","additions":35,"deletions":30},{"file":"src/util/task_builder.h","status":"M","additions":35,"deletions":30}],"state":"merged","open_date":"2020-03-12T13:48:28Z","update_date":"2020-03-12T20:15:04Z","discussion":[{"author":"gebner","date":"2020-03-12T20:14:58Z","comment":"CI failures are of unclear origin, probably related to the 50 minute timeout."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"598f8eaca1d707eb4a96df1ca9db640cddb415ce","message":"chore(*): fix compiler warnings","date":"2020-03-12T13:46:22Z"}]},{"author":"gebner","number":147,"diff_summary":[{"file":"src/library/tactic/vm_type_context.cpp","status":"A","additions":20,"deletions":17},{"file":"src/library/vm/interaction_state.h","status":"A","additions":20,"deletions":17},{"file":"src/library/vm/interaction_state_imp.h","status":"A","additions":20,"deletions":17},{"file":"tests/lean/issue136.lean","status":"A","additions":20,"deletions":17},{"file":"tests/lean/issue136.lean.expected.out","status":"A","additions":20,"deletions":17}],"state":"merged","open_date":"2020-03-12T13:25:13Z","update_date":"2020-03-12T15:27:55Z","discussion":[{"author":"bryangingechen","date":"2020-04-02T05:05:28Z","comment":"Does this mean that we can remove `of_tactic'` from mathlib?"},{"author":"gebner","date":"2020-04-02T09:28:22Z","comment":"I think I've already removed `of_tactic'` from mathlib, did I miss anything?"},{"author":"bryangingechen","date":"2020-04-02T14:57:24Z","comment":"Oh, you're right. I got confused by some comments in the tests."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"7f0e52b49651551af3eca4fb8dd31bdca8601929","message":"fix(library/vm/interaction_state_imp): remove dangerous functions\n\nThe interaction_monad.exception constructor takes an `option (thunk\nformat)` as argument.  The functions in `interaction_state_imp.h`\ntreated this inconsistently: `get_exception_message` returned the\noption, while the `mk_exception` function wrapped it in a some.","date":"2020-03-12T13:21:39Z"}]},{"author":"gebner","number":143,"diff_summary":[{"file":"library/init/category/lift.lean","status":"M","additions":2,"deletions":2}],"state":"merged","open_date":"2020-03-09T13:01:54Z","update_date":"2020-03-09T14:24:07Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"f9d745ded4624b0231c38a184b396fab32cf9e78","message":"fix(library/init/category/lift): flip instance arguments","date":"2020-03-09T13:00:39Z"}]},{"author":"gebner","number":142,"diff_summary":[{"file":"src/library/tactic/simplify.cpp","status":"A","additions":33,"deletions":6},{"file":"tests/lean/run/simp_tc_err.lean","status":"A","additions":33,"deletions":6}],"state":"merged","open_date":"2020-03-06T11:26:33Z","update_date":"2020-03-08T13:54:18Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"bc4ab605dac27d0882ea5ef0052740ecc1eec5b0","message":"fix(library/tactic/simplify): catch exceptions\n\nFixes https://github.com/leanprover-community/lean/issues/137","date":"2020-03-06T11:23:55Z"}]},{"author":"Vierkantor","number":141,"diff_summary":[{"file":"src/library/type_context.cpp","status":"A","additions":20,"deletions":12},{"file":"tests/lean/defeq_match.lean","status":"A","additions":20,"deletions":12},{"file":"tests/lean/defeq_match.lean.expected.out","status":"A","additions":20,"deletions":12},{"file":"tests/lean/match_at_type.lean","status":"A","additions":20,"deletions":12},{"file":"tests/lean/run/sigma_match.lean","status":"A","additions":20,"deletions":12}],"state":"merged","open_date":"2020-03-05T14:52:10Z","update_date":"2020-03-08T18:43:35Z","discussion":[{"author":"gebner","date":"2020-03-08T14:02:07Z","comment":"@Vierkantor I don't remember: did you test this change on mathlib?  Were there any issues?"},{"author":"Vierkantor","date":"2020-03-08T17:45:50Z","comment":"I tested these changes together with #134, and compared to #134 alone, there were no issues. Should I test building mathlib again with all changes that were merged?"},{"author":"gebner","date":"2020-03-08T18:43:21Z","comment":"Ok, good.  There's no point in testing right now, everything's broken."}],"review_discussion":[],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"eff2f257fdb425a6686ea1a481b4c4b336e7abc9","message":"Fix inconsistent unification of match-based definitions\n\nThe issue was that `nat.add` didn't get unified with `λ a b, nat.add a b`,\nbecause `nat.add` is defined using matches. If such a definition is applied to\na term, only when the term matches one of the match cases the whole is\nunfolded.  In contrast, if there is no application, the constant `nat.add` is\nhappily unfolded all the way. Thus the elaborator decides unification fails.\n\nThere are basically two solutions: unfolding more (i.e. also unfold `nat.add a\nb`) or unfolding less (i.e. don't unfold `nat.add`). Since unfolding `nat.add`\nwould expose implementation details, namely the `nat.add._main` function,\nchoosing to unfold less is better.\n\nBut this leads to another issue: now `λ <a, b>, a` does not unify with\n`λ <a, b>, a` if they are defined separately. This is not a big issue since\n`example : let c := 0 in (λ <a, b>, a + c) = (λ <a, b>, a + c) := rfl`\ndidn't work anyway. Hence the changed tests.","date":"2020-03-05T14:51:45Z"}]},{"author":"Vtec234","number":140,"diff_summary":[{"file":"src/api/module.cpp","status":"A","additions":209,"deletions":58},{"file":"src/library/module.cpp","status":"A","additions":209,"deletions":58},{"file":"src/library/module.h","status":"A","additions":209,"deletions":58},{"file":"src/library/module_mgr.cpp","status":"A","additions":209,"deletions":58},{"file":"src/library/module_mgr.h","status":"A","additions":209,"deletions":58},{"file":"src/shell/CMakeLists.txt","status":"A","additions":209,"deletions":58},{"file":"src/shell/server.cpp","status":"A","additions":209,"deletions":58},{"file":"src/shell/server.h","status":"A","additions":209,"deletions":58},{"file":"src/util/CMakeLists.txt","status":"A","additions":209,"deletions":58},{"file":"src/util/hash.cpp","status":"A","additions":209,"deletions":58},{"file":"src/util/hash.h","status":"A","additions":209,"deletions":58},{"file":"src/util/line_endings.cpp","status":"A","additions":209,"deletions":58},{"file":"src/util/line_endings.h","status":"A","additions":209,"deletions":58},{"file":"src/util/path.cpp","status":"A","additions":209,"deletions":58},{"file":"src/util/path.h","status":"A","additions":209,"deletions":58},{"file":"tests/lean/importing/test_importing.sh","status":"A","additions":209,"deletions":58}],"state":"merged","open_date":"2020-03-05T14:37:40Z","update_date":"2020-03-08T13:54:58Z","discussion":[{"author":"Vtec234","date":"2020-03-07T20:38:37Z","comment":"Fixed! It's only slightly ironic what the culprit was."},{"author":"Vtec234","date":"2020-03-09T12:15:53Z","comment":"@digama0 @cipher1024 : this PR changes the .olean format by adding two extra unsigned 32-bit integers between the version string and the olean hash"},{"author":"digama0","date":"2020-03-09T12:26:45Z","comment":"Is there an olean version number you can bump? Is it possible to support both formats?"},{"author":"Vtec234","date":"2020-03-09T14:08:51Z","comment":"Afaik oleans aren't versioned, but Lean itself is, so I think olean-rs could:\r\n1. parse the olean up until the Lean version string\r\n2. if the version is 3.7 or greater (assuming 3.7 will have this change in it), read the two extra hashes; otherwise, proceed as for earlier versions\r\nThis won't work with dev builds of e.g. current master because the version is still 3.6.1, but should work with proper releases."}],"review_discussion":[{"author":"gebner","file":"src/util/line_endings.h","date":"2020-03-05T14:44:21Z","comment":"```suggestion\r\nvoid remove_cr(std::string & str);\r\n```\r\n\r\nAnd then put the implementation in `src/util/line_endings.cpp`."},{"author":"gebner","file":"src/shell/server.cpp","date":"2020-03-05T14:47:07Z","comment":"There is a certain performance issue here.  (Not necessarily here in the server code, but in general.)  For example, there is already a hash on olean files (just for integrity) that we do not check due to performance reasons.\r\n\r\nHow long does it take to hash all of mathlib?"},{"author":"gebner","file":"src/library/module_mgr.cpp","date":"2020-03-05T14:49:17Z","comment":"This block occurs a few times.  Can you turn it into a function?"},{"author":"gebner","file":"src/library/module_mgr.cpp","date":"2020-03-05T14:49:54Z","comment":"Yes!"},{"author":"gebner","file":"src/library/module_mgr.cpp","date":"2020-03-05T14:52:11Z","comment":"```suggestion\r\n            // If anything in the reflexive-transitive import tree has changed, rebuild the module.\r\n```"},{"author":"gebner","file":"src/library/module_mgr.cpp","date":"2020-03-05T14:52:58Z","comment":"```suggestion\r\n            mod->m_trans_hash = mod->m_src_hash;\r\n```"},{"author":"gebner","file":"src/library/module.cpp","date":"2020-03-05T14:53:56Z","comment":"NB: this code is never executed, since `check_hash` is set to false for performance reasons."},{"author":"gebner","file":"src/library/module.cpp","date":"2020-03-05T14:54:48Z","comment":"This changes the olean format, right?  What happens when I open new olean files with the old Lean version or old olean files with the new Lean version?\r\n\r\nPlease also ping Simon/Mario to update olean-rs if this change lands."},{"author":"gebner","file":"src/api/module.cpp","date":"2020-03-05T14:56:02Z","comment":"NB: This code is not used by anyone."},{"author":"gebner","file":"src/library/module.cpp","date":"2020-03-05T14:57:45Z","comment":"Is there a reason why you added the hash check to this function?  (And if yes, why `src_hash` and not `trans_hash`?)"},{"author":"gebner","file":"src/shell/server.cpp","date":"2020-03-05T15:05:06Z","comment":"To answer your question: we ignore the line-endings in the `module_mgr` because the line-endings from the on-disk file in some cases differ from the line endings that vscode sends.  Hence we normalize them so that people on windows don't rebuild mathlib after go-to-definition.\r\n\r\nIn this function here, the `m_open_files` map only contains files sent by vscode.  Hence they should all have the same line endings and we don't need to normalize anything.\r\n\r\nBut it's completely fine to normalize or compare hashes here.  Byte offsets are completely irrelevant.  And the line ending normalization doesn't change `(line_number, column)`."},{"author":"Vtec234","file":"src/library/module.cpp","date":"2020-03-05T17:28:56Z","comment":"We want to check if the olean might be valid for the given source file, so checking for a match of the stored source hash allows rejecting outdated oleans early. It cannot be `trans_hash`, because when `is_candidate_olean_file` is called, we only know the location of the source file but not its imports, so we cannot compute the transitive hash just yet."},{"author":"Vtec234","file":"src/library/module_mgr.cpp","date":"2020-03-05T17:31:12Z","comment":"This would change the semantics, since `trans_hash` here is the *actual* value which is later compared to `mod->m_trans_hash`. I changed its name to reflect this."},{"author":"Vtec234","file":"src/shell/server.cpp","date":"2020-03-05T17:35:55Z","comment":"So we can speed up by a constant factor :) I think I still need to normalize line endings, since this `ef.m_src_hash` may be compared against one computed from a file stored on-disk."},{"author":"Vtec234","file":"src/library/module.cpp","date":"2020-03-05T17:45:33Z","comment":"It does change the format. Note I have already messed with .oleans in 3.5.0c by adding a new kind of modification. If someone tries to open old .oleans with this version or .oleans produced by this with an older Lean, the version string check will fail and they will be rebuilt."},{"author":"Vtec234","file":"src/shell/server.cpp","date":"2020-03-05T18:04:37Z","comment":"I just measured it on my laptop, and hashing all of mathlib takes around 1s the first time, then .1s with a hot disk cache, so this should not be an issue. Note that the hash on olean files serves a different purpose, since it's derived from the object code rather than the .lean source file.\r\n\r\n.olean files tend to be significantly larger than .lean files, so that may be why it's a concern for them."},{"author":"Vtec234","file":"src/library/module_mgr.cpp","date":"2020-03-05T18:14:41Z","comment":"I've thought about this a bit more, and I'm now inclined to say a simple xor is fine. There are no security concerns here so it can be predictable, and xoring *will* incorporate data from all imports. Can you think of a case where this breaks? The only one that comes to mind for me is if the same module is imported twice, then that would xor to 0 and `src_hash == trans_hash`. But a) Lean actually just ignores any duplicate import statements and b) even if it didn't, the `src_hash == trans_hash` would still be different for any two files that both happen to import some module twice."},{"author":"gebner","file":"src/shell/server.cpp","date":"2020-03-05T21:52:43Z","comment":"Ok, then let's not worry about performance."},{"author":"gebner","file":"src/library/module_mgr.cpp","date":"2020-03-05T21:54:15Z","comment":"I'm pretty sure that if you write an import twice, it will appear twice in the imports list."},{"author":"gebner","file":"src/library/module.cpp","date":"2020-03-05T21:54:56Z","comment":"As long as you've tested it, it's ok."},{"author":"gebner","file":"src/library/module.cpp","date":"2020-03-05T21:55:54Z","comment":"I don't think this is hugely important for performance, but I guess it doesn't hurt either."},{"author":"gebner","file":"src/shell/server.cpp","date":"2020-03-05T21:56:29Z","comment":"Yes, if you compare the file with the on-disk version, then you should normalize line endings on both of them."},{"author":"gebner","file":"src/library/module_mgr.cpp","date":"2020-03-05T21:58:43Z","comment":"Ah, got it.  I was confused because the code was updating the structure field before."},{"author":"Vtec234","file":"src/library/module_mgr.cpp","date":"2020-03-06T18:18:44Z","comment":"[This](https://github.com/leanprover-community/lean/blob/03d515a6f6556c9087a3e4abfb5245500766931e/src/library/module.cpp#L646) is the line is was basing that claim on. However, for the sake of not even having to make that argument, I added a different way to combine hashes."},{"author":"gebner","file":"src/library/module_mgr.cpp","date":"2020-03-06T18:33:40Z","comment":"I think you looked in completely the wrong place.  The pipeline is roughly as follows: 1) the parser produces a list of names (e.g. `data.nat`, `tactic.core`, `data.nat`), 2) then the module_mgr resolves each of the names in the list to a file and recursively produces the module_info for each of the dependencies, 3) then the parser produces this list of names again, 4) then they are passed to `import_modules` which then uses a callback passed from the module_mgr to resolve the modules and imports them into the environment.\r\n\r\nThis function here is 2).  The `imports` list contains names, which may contain duplicates.  (There's some extra information in addition to the names for relative imports, but that's not so important.)  The line you've linked to is from 4), and that line just makes sure that we do not import the same module twice into an environment."},{"author":"gebner","file":"src/util/hash.cpp","date":"2020-03-06T18:34:38Z","comment":"Why not `hash(h1, h2)`?"},{"author":"Vtec234","file":"src/util/hash.cpp","date":"2020-03-06T19:11:33Z","comment":"Do you know the rationale behind that algorithm? I used the one from SO because it had at least some explanation behind it, but on second thought `hash(h1, h2)` is probably fine, so I reverted to it."},{"author":"gebner","file":"src/util/hash.cpp","date":"2020-03-06T19:25:57Z","comment":"The rationale is very simple: Leo put it in, and so it's probably a good choice.  This is the commit where he added it 14 years ago: https://github.com/Z3Prover/z3/blob/e9eab22e5ccadc4c6ea36406e38d2dbc3d6786c2/lib/hash.h#L63-L68"},{"author":"Vtec234","file":"src/library/module_mgr.cpp","date":"2020-03-06T19:26:13Z","comment":"Gotcha, thanks for explaining that! Maybe the parser could also ignore duplicate imports, but in any case since hashes are combined differently now, I am marking this as resolved."},{"author":"gebner","file":"tests/lean/importing/test_importing.sh","date":"2020-03-06T20:08:12Z","comment":"```suggestion\r\nout=$($LEAN -j0 --make z.lean 2>&1 | tr -d '\\n')\r\n```\r\nThe `-j0` option enables the deterministic single-threaded task manager.  Although you've already written the test files so that they can only be executed in one order."}],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"03d515a6f6556c9087a3e4abfb5245500766931e","message":"feat(module): hash source code instead of tracking timestamps","date":"2020-03-05T14:30:02Z"},{"author":"Vtec234","committer":"Vtec234","hash":"3e2a478abedb091adcee2b1f3493ee7d03900be0","message":"chore(hash): style","date":"2020-03-05T15:01:27Z"},{"author":"Vtec234","committer":"Vtec234","hash":"a264087bd56e2487470bfe0262af760eb99fa29c","message":"chore(style): address some comments","date":"2020-03-05T17:42:03Z"},{"author":"Vtec234","committer":"Vtec234","hash":"6d904c08979d3c58db3f024a46c620dc8864654a","message":"chore: address remaining comments","date":"2020-03-05T18:07:18Z"},{"author":"Vtec234","committer":"Vtec234","hash":"47f8582af65d55664a500f47db8c33d02337f31b","message":"fix(module): combine hashes in a different way","date":"2020-03-05T22:51:56Z"},{"author":"Vtec234","committer":"Vtec234","hash":"e1913651df82db082127377ccf250c8becac0007","message":"chore(test): test rebuilding of imports","date":"2020-03-06T18:16:13Z"},{"author":"Vtec234","committer":"Vtec234","hash":"45ac9ed083fb608e0e93d117127213b41cafb220","message":"Revert \"fix(module): combine hashes in a different way\"\n\nThis reverts commit 47f8582af65d55664a500f47db8c33d02337f31b.","date":"2020-03-06T19:07:02Z"},{"author":"Vtec234","committer":"Vtec234","hash":"e7f23be2438735a49bfa67237873b66c5efe3612","message":"fix(module): combine hashes using hash(h1, h2)","date":"2020-03-06T19:08:12Z"},{"author":"Vtec234","committer":"Vtec234","hash":"bd43b291e75e9d6cd5ee7e53e477637f2bc8966a","message":"fix(test): deterministic tests","date":"2020-03-06T20:47:26Z"},{"author":"Vtec234","committer":"Vtec234","hash":"602db2ce79bb3ca4d33ece7539535a316a03ce4d","message":"fix(test): windows","date":"2020-03-07T20:38:05Z"}]},{"author":"gebner","number":139,"diff_summary":[{"file":"library/init/category/monad_fail.lean","status":"A","additions":26,"deletions":11},{"file":"library/init/category/reader.lean","status":"A","additions":26,"deletions":11},{"file":"library/init/coe.lean","status":"A","additions":26,"deletions":11},{"file":"src/library/type_context.cpp","status":"A","additions":26,"deletions":11},{"file":"tests/lean/run/tc_right_to_left.lean","status":"A","additions":26,"deletions":11}],"state":"merged","open_date":"2020-03-05T14:01:04Z","update_date":"2020-03-08T13:57:52Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"c9432e878811a7f4339a142032a89cab18cb1f13","message":"perf(library/type_context): process instance arguments from right to left","date":"2020-03-05T13:56:11Z"},{"author":"gebner","committer":"web-flow","hash":"8c90304c6ebfe813b557f12420617ef52f174d0d","message":"Merge branch 'master' into tc_rtl","date":"2020-03-07T20:26:45Z"}]},{"author":"cipher1024","number":138,"diff_summary":[{"file":".travis.yml","status":"A","additions":61,"deletions":2},{"file":"library/init/meta/derive.lean","status":"A","additions":61,"deletions":2},{"file":"library/init/meta/environment.lean","status":"A","additions":61,"deletions":2},{"file":"library/init/meta/tactic.lean","status":"A","additions":61,"deletions":2},{"file":"script/travis_long.sh","status":"A","additions":61,"deletions":2},{"file":"src/library/vm/vm_environment.cpp","status":"A","additions":61,"deletions":2}],"state":"merged","open_date":"2020-03-04T22:04:19Z","update_date":"2020-03-08T13:55:56Z","discussion":[{"author":"robertylewis","date":"2020-03-04T22:10:48Z","comment":"Nice!\r\n\r\nAFAIK there's no way (before this PR) to make a declaration protected after it's been defined -- it's only done with the `protected def` syntax. Are there any bad interactions if, say, I define `nat.foo`, open `nat`, do some stuff with `foo`, and then protect `foo`?"},{"author":"cipher1024","date":"2020-03-04T22:41:43Z","comment":"I think there shouldn't be but maybe we should ask @Kha for a second opinion. My perspective is that protected only affects name resolution in the elaborator. We can reduce the risk by exposing only `add_protected` (combine `add` and `mk_protected`) instead of letting the user use the two separately. An added benefit of doing it this way is that we won't have tactics popping up randomly making old declarations protected."},{"author":"Kha","date":"2020-03-05T08:31:09Z","comment":"Either way should be fine. The Lean 4 API is `addProtected (env : Environment) (n : Name) : Environment`, though usually you would of course use a higher-level function such as `elabDef (modifiers : Modifiers) (stx : Syntax) : CommandElabM Unit`.\r\n\r\n"},{"author":"cipher1024","date":"2020-03-07T20:25:07Z","comment":"The change seems to make the build time out. I'm not clear on why that would slow down the build."},{"author":"gebner","date":"2020-03-07T20:29:32Z","comment":"> The change seems to make the build time out. I'm not clear on why that would slow down the build. \r\n\r\nI've merged #122 since an example in `mini_crush` will be broken by an upcoming change to the core library (#132).  So you can just merge master and CI will pass."},{"author":"cipher1024","date":"2020-03-07T21:25:54Z","comment":"I have also added a trick to make sure that `make` doesn't time out. Is this related to any recent change?"},{"author":"gebner","date":"2020-03-07T21:31:42Z","comment":"> I have also added a trick to make sure that `make` doesn't time out. Is this related to any recent change?\r\n\r\nThe `travis_long` script is a good idea.  I don't know what causes the time outs, but I've also seen them."}],"review_discussion":[{"author":"gebner","file":"library/init/meta/environment.lean","date":"2020-03-05T10:14:29Z","comment":"```suggestion\r\nmeta constant add_protected   : environment → name → environment\r\n```\r\nI think you should revert this back to `add_protected : environment → name → environment` just like it is in Lean 4.\r\n\r\nBTW, I don't think this one can fail either.  Both functions just modify the `m_protected` set without ever checking that there exist declarations with this name.  You can probably do cool things with this feature, like making declarations protected before they are declared. :smile: "},{"author":"gebner","file":"library/init/meta/environment.lean","date":"2020-03-05T10:16:39Z","comment":"```suggestion\r\nmeta constant is_protected    : environment → name → bool\r\n```\r\nLooking at the implementation, I don't think this can ever fail."},{"author":"cipher1024","file":"library/init/meta/environment.lean","date":"2020-03-05T10:35:45Z","comment":"That sounds like a funny application but is there any real benefit to splitting the two? One downside I can see is carelessly protecting the wrong declaration or even protecting arbitrary definitions. I feel like this way, it's easier to use well."},{"author":"gebner","file":"library/init/meta/environment.lean","date":"2020-03-05T11:02:50Z","comment":"Yes, the application was a joke.  The benefit is to have the same API as the C++ code (and Lean 4).  I'm very much against designing a separate restricted special-purpose API that is also different from the C++ code.  If it is easy possible (and it is in this case), then we should always expose the C++ API as literally as we can.  We can easily build nicer abstractions on top of it in Lean.\r\n\r\nIf you want to make it easier to use, please add separate `add_protected_decl : environment → declaration → exceptional environment` and `add_protected_decl : declaration → tactic unit` functions.  "},{"author":"cipher1024","file":"library/init/meta/environment.lean","date":"2020-03-06T03:03:09Z","comment":"I think the case here for having a separate API in Lean and in C++ is similar to the case for having private functions in some modules. They don't provide a good way to use the module and there's no good use cases that need them."},{"author":"cipher1024","file":"library/init/meta/environment.lean","date":"2020-03-06T03:03:34Z","comment":"(here, the private stuff is the C++ code that does not get exported)"},{"author":"gebner","file":"library/init/meta/environment.lean","date":"2020-03-06T10:39:48Z","comment":"There are advantages to having a separate `add_protected` function that just takes a name.  Namely, it composes well with other functions that create declarations.  For example, you can mark declarations created with `mk_aux_decl` as protected.\r\n\r\n> I think the case here for having a separate API in Lean and in C++ is similar to the case for having private functions in some modules. They don't provide a good way to use the module and there's no good use cases that need them.\r\n\r\nThe C++ function `add_protected` is exported, and it is used from lots of other modules.  It very much is the public API.\r\n\r\nI'm not going to argue whether this is a good or a bad API, but it's the one that we have and that is used everywhere.  In a sense it is not too different from attributes, which can also be applied after the fact:\r\n```lean\r\ndef foo := nat\r\nattribute [class] foo\r\nattribute [irreducible] foo\r\n```"}],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"1eb25a5dd1447856ec1d351b0697205a4e9e8604","message":"feat(tactic/mk_protected): make `protected` part of the API and use it\nin `derive`","date":"2020-03-07T21:26:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"6bf5c955294ce30139598c3aba6cbbaeb1e6dd46","message":"couple `mk_protected` with `add_decl` to only add protection when creating a decl","date":"2020-03-07T21:26:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"995e981deeb385d4945d86a138d3ec46b590e5d3","message":"make `is_protected` pure","date":"2020-03-07T21:26:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"067eec600cbdc100222f2547e6d0f123ceaf952f","message":"make little changes to handling protected declarations","date":"2020-03-07T21:26:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"e88c94c2da0c96c877be35b37175cf9a9a519622","message":"make build tolerant to time out","date":"2020-03-07T21:26:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"f216e88491ed8dc8f896d61fd2c70b3638e1f84a","message":"fix","date":"2020-03-07T21:26:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"a5aecac9fda415d1f5c7aaae4323dfc57bdb1cd8","message":"fix again","date":"2020-03-07T21:26:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"291e838be0d0720e4ba5212ee0c369ca0b969027","message":"reflect C++ API into Lean more closely","date":"2020-03-07T21:26:44Z"}]},{"author":"fpvandoorn","number":136,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":36,"deletions":6},{"file":"library/init/meta/interaction_monad.lean","status":"M","additions":36,"deletions":6},{"file":"library/init/meta/lean/parser.lean","status":"M","additions":36,"deletions":6}],"state":"closed","open_date":"2020-03-04T19:09:56Z","update_date":"2020-03-12T15:27:55Z","discussion":[{"author":"gebner","date":"2020-03-08T14:07:59Z","comment":"I'm not sure it is a good idea to just move the primed functions to core.  Either we should fix the bugs (and remove the primed functions), or we can keep the bugfix in mathlib.\r\n\r\n@fpvandoorn Do you have a testcase where `of_tactic` fails, or a description of what is wrong with it?"},{"author":"digama0","date":"2020-03-09T03:13:00Z","comment":"@gebner You can kind of see this from the implementation of `of_tactic'`, but `of_tactic` does not properly handle failure reporting. I forget what exactly it does but what it should do is propagate the exception into the tactic monad rather than crashing or something."},{"author":"digama0","date":"2020-03-09T03:17:30Z","comment":"```lean\r\nimport tactic.core\r\n\r\nmeta def tactic.interactive.test (a : interactive.parse\r\n  (lean.parser.of_tactic (@tactic.fail ℕ _ _ \"oh no\"))) :=\r\ntactic.skip\r\n\r\nmeta def tactic.interactive.test' (a : interactive.parse\r\n  (lean.parser.of_tactic' (@tactic.fail ℕ _ _ \"oh no\"))) :=\r\ntactic.skip\r\n\r\nexample : true := begin test end -- vm check failed: is_closure(o)\r\nexample : true := begin test' end -- oh no\r\n```"}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"139ac0ae8f7de0cf6747f102cab757909f335dfc","message":"feat(parser): move fixed coercion from tactic to parser to core\n\nalso update (and fix dates in) changes.md","date":"2020-03-04T19:08:41Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"d5c28e53663c1b237302b5002119d85939f2d6cd","message":"add missing import","date":"2020-03-05T17:14:35Z"}]},{"author":"gebner","number":135,"diff_summary":[{"file":"src/library/type_context.cpp","status":"A","additions":107,"deletions":0},{"file":"tests/lean/run/slow_tc_synth.lean","status":"A","additions":107,"deletions":0}],"state":"merged","open_date":"2020-03-04T14:13:40Z","update_date":"2020-03-08T13:57:00Z","discussion":[{"author":"gebner","date":"2020-03-05T13:43:07Z","comment":"Travis failure is unrelated, the build script could not access `github.com`.\r\n\r\nI also tried to backport the change from Lean 4 that processes the instance arguments from right to left (instead of left-to-right).  However this breaks some stuff: at the very least we'd need to refactor the `coe_trans` instances and switch their arguments."},{"author":"gebner","date":"2020-03-05T22:34:22Z","comment":"This causes some breakage in mathlib: now the `additive.is_add_hom` and `multiplicative.is_mul_hom` instances for the unbundled instances loop when used in `tensor_product.lean`.\r\n\r\n```lean\r\ninstance additive.is_add_hom [has_mul α] [has_mul β] (f : α → β) [is_mul_hom f] :\r\n  @is_add_hom (additive α) (additive β) _ _ f := /- ... -/\r\n\r\ninstance multiplicative.is_mul_hom [has_add α] [has_add β] (f : α → β) [is_add_hom f] :\r\n  @is_mul_hom (multiplicative α) (multiplicative β) _ _ f := /- ... -/\r\n```\r\n\r\nNote that these instances terminate only if types are unified with only reducible transparency (i.e., that `additive α` and `α` do not unify).  But I believe that this just plain doesn't work in Lean 3.  Such a problem also cropped up earlier with simp lemmas: https://github.com/leanprover-community/mathlib/pull/2026\r\n\r\nAFAICT the only reason why they didn't loop previously is because vector spaces have no `has_mul` instance."},{"author":"jcommelin","date":"2020-03-06T01:33:24Z","comment":"Certainly `additive` and `multiplicative` should be as irreducible as possible."},{"author":"gebner","date":"2020-03-06T14:30:32Z","comment":"> Certainly additive and multiplicative should be as irreducible as possible.\r\n\r\nUnfortunately they become much harder to use.  Consider the first instance:\r\n```lean\r\ninstance additive.is_add_hom [has_mul α] [has_mul β] (f : α → β) [is_mul_hom f] :\r\n  @is_add_hom (additive α) (additive β) _ _ f := /- ... -/\r\n```\r\nIf you look closely, we treat `f` not only as a function of type `f : α → β` (when passing it to `is_mul_hom`), but also as a function of type `f : additive α → additive β` (when passing it to `is_add_hom`).  If we could not unfold `additive`, this instance would not even be well-typed!\r\n\r\nIf `additive α` was irreducible, then we'd need to have a coercion from `α → β` to `additive α → additive β` and the instance would read:\r\n```lean\r\ninstance additive.is_add_hom [has_mul α] [has_mul β] (f : α → β) [is_mul_hom f] :\r\n  is_add_hom (f : additive α → additive β) := /- ... -/\r\n```"},{"author":"gebner","date":"2020-03-06T19:20:23Z","comment":"mathlib builds just fine with https://github.com/leanprover-community/mathlib/pull/2096 applied.  Well, I've had to remove tactics from four proofs because they were no longer necessary."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"6b4ba6ad9c125c36b3c97a4df07865ed53261630","message":"perf(library/type_context): speed up topological_ring.to_topological_add_group","date":"2020-03-04T13:59:30Z"}]},{"author":"Vierkantor","number":134,"diff_summary":[{"file":"src/library/congr_lemma.cpp","status":"A","additions":160,"deletions":37},{"file":"tests/lean/simp_subsingleton.lean","status":"A","additions":160,"deletions":37},{"file":"tests/lean/simp_subsingleton.lean.expected.out","status":"A","additions":160,"deletions":37}],"state":"merged","open_date":"2020-03-03T16:24:56Z","update_date":"2020-03-08T13:52:52Z","discussion":[{"author":"Vierkantor","date":"2020-03-05T09:29:42Z","comment":"Update: `mathlib` doesn't build with this change because it exposes another weirdness (bug?) where η-expansion fails: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Missing.20.CE.B7"},{"author":"Vierkantor","date":"2020-03-05T13:34:55Z","comment":"After fixing the η-expansion issue in the elaborator, mathlib builds successfully (with the appropriate modifications, since `simp` is more powerful now)."},{"author":"gebner","date":"2020-03-05T15:17:42Z","comment":"Oh, I didn't realize this also changed the congruence lemmas for SMT since `mk_congr` calls `mk_congr_simp` first.  I think we should disentangle them by removing the call to `mk_congr_simp` here: https://github.com/leanprover-community/lean/blob/b3a6165c5813ceefa6f31971e40fca9b676e3656/src/library/congr_lemma.cpp#L425"},{"author":"Vierkantor","date":"2020-03-06T15:25:21Z","comment":"I changed `mk_congr` and `mk_congr_simp` so that they call `congr_kinds` and `congr_simp_kinds` respectively. I _think_ the logic for `congr_kinds` is correct, and it passes the tests and builds mathlib successfully. A reviewer should check again that it makes sense though, since it's rather subtle."}],"review_discussion":[{"author":"gebner","file":"library/init/meta/congr_tactic.lean","date":"2020-03-05T10:35:52Z","comment":"Can you try changing `congr_core` to use the non-simp congruence lemmas instead?"},{"author":"gebner","file":"src/library/congr_lemma.cpp","date":"2020-03-05T10:41:47Z","comment":"This introduces a counterintuitive change for instance-implicit arguments without backward dependencies: simp can rewrite the argument if and only if it is a subsingleton.\r\n\r\nI think it's a bad idea to make the decision where we can rewrite based on whether there is a subsingleton instance available.  That's what's got us in this situation in the first place.\r\n\r\nI think the conservative approach would be to always mark instance-implicit arguments as Fixed (or Cast, if possible)."},{"author":"gebner","file":"library/init/meta/congr_tactic.lean","date":"2020-03-06T16:48:21Z","comment":"Is this line still necessary?"},{"author":"Vierkantor","file":"library/init/meta/congr_tactic.lean","date":"2020-03-06T17:25:07Z","comment":"Ah, I thought I got rid of that line. Time to remove it and recompile mathlib again :grimacing: "}],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"0565737c113ba2c21d98b719b0ecc81e72b3a598","message":"Run the simplifier on subsingletons","date":"2020-03-03T14:13:19Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"71a1db9761e6a7b9c8a4a356f4e47fb9ec2ec1cf","message":"Fix tests","date":"2020-03-03T15:54:37Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"e3ba8a040bf540414b49b541bb7ab820cd0a6334","message":"Test that `simp` can rewrite subsingletons","date":"2020-03-03T15:57:51Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"4aa3e92dfecca54342e24584490d1500fbd55381","message":"Move `subsingleton.elim` to `congr_core` from `congr`","date":"2020-03-05T14:52:26Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"6f70eba9a39a8d96952f52c8d9eec88ebc960a94","message":"Instance-implicit arguments should be non-`simp`-able, regardless of `subsingleton` instances","date":"2020-03-05T14:52:26Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"d079db3cf394d4861333f4193e561dc3aa1c11d4","message":"Split `mk_congr` and `mk_congr_simp` in generation of `congr_arg_kind`","date":"2020-03-06T15:21:07Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"0f5c026bf3998f5b5e444cbf1b43e772faf707e5","message":"Remove unnecessary `subsingleton.elim`","date":"2020-03-06T18:15:30Z"}]},{"author":"fpvandoorn","number":133,"diff_summary":[{"file":"extras/latex/lstlean.md","status":"M","additions":124,"deletions":102},{"file":"extras/latex/lstlean.tex","status":"M","additions":124,"deletions":102},{"file":"extras/latex/sample.tex","status":"M","additions":124,"deletions":102}],"state":"merged","open_date":"2020-03-02T20:15:18Z","update_date":"2020-03-08T13:51:38Z","discussion":[{"author":"fpvandoorn","date":"2020-03-03T01:02:11Z","comment":"@robertylewis do you remember why you commented out `eval`? I did add it back as a keyword (I don't know how to just add `#eval` as a keyword, neither `#eval` nor `\\#eval` seem to work. Instead, I now just always color `#` using `keywordcolor`)"},{"author":"robertylewis","date":"2020-03-03T09:44:03Z","comment":"We were writing about `polynomial.eval` and it was getting highlighted."}],"review_discussion":[],"tags":[],"commits":[{"author":"fpvandoorn","committer":"fpvandoorn","hash":"315f99a808d69c39c439d5258039af84d64b53ac","message":"feat(lstlean.tex): updates\n\n- Make more symbols `symbolcolor`\n- Highlight strings. Add `errorcolor` and `stringcolor`.\n- Add a few more symbols used in mathlib\n- Add package to `sample.tex` which was required by previous commits.","date":"2020-03-02T20:11:28Z"},{"author":"fpvandoorn","committer":"fpvandoorn","hash":"f0a55ff382185d98f4021d8f980959fc84a78a86","message":"update keywords[1]\n\nremove many obsolete keywords\nsort the others\ncolor # in phrases like #check","date":"2020-03-03T00:59:07Z"}]},{"author":"ChrisHughes24","number":132,"diff_summary":[{"file":"library/init/algebra/field.lean","status":"M","additions":168,"deletions":92},{"file":"library/init/algebra/group.lean","status":"M","additions":168,"deletions":92},{"file":"library/init/algebra/ordered_field.lean","status":"M","additions":168,"deletions":92},{"file":"library/init/algebra/ring.lean","status":"M","additions":168,"deletions":92},{"file":"library/init/data/int/basic.lean","status":"M","additions":168,"deletions":92},{"file":"library/init/data/int/order.lean","status":"M","additions":168,"deletions":92},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":168,"deletions":92},{"file":"tests/lean/1952.lean.expected.out","status":"M","additions":168,"deletions":92}],"state":"merged","open_date":"2020-03-01T13:04:46Z","update_date":"2020-04-07T15:42:17Z","discussion":[{"author":"digama0","date":"2020-03-02T21:36:58Z","comment":"Oops, I deleted my comment and apparently your response as well."},{"author":"ChrisHughes24","date":"2020-03-02T21:50:54Z","comment":"@digama0 I don't think this is ready to merge yet because of the issue with `linear_ordered_field`. It should extend `field` rather than `division_ring`, but doing that causes an error."},{"author":"digama0","date":"2020-03-02T21:55:52Z","comment":"Why don't the types of the two left_distribs match? I would think that either one is a field and the other is a proven property, or they have the same field.\r\n\r\nAs for one_mul vs mul_one, how about switching the field axiom to `a⁻¹ * a = 1`? It's commutative so it shouldn't matter which we pick, and this makes it more consistent with groups."},{"author":"ChrisHughes24","date":"2020-03-02T21:59:45Z","comment":"I'm not sure why the types of the two `left_distrib`s don't match. They look like they should reduce to the same thing to me, though they do have different instance paths."},{"author":"ChrisHughes24","date":"2020-03-02T22:01:39Z","comment":"The downside to changing the axiom for a field to `a⁻¹ * a = 1` is that it will break more stuff, since previously it was the other way, but I guess this isn't really a big deal."},{"author":"digama0","date":"2020-03-02T22:03:05Z","comment":"This is going to break a lot of stuff anyway. May as well pull the band-aid off and clean things up as much as you can while you have the opportunity."},{"author":"digama0","date":"2020-03-02T22:04:45Z","comment":"I think the left_distrib problem might be a lean bug. Maybe we should wait until someone has a chance to go into the code and fix it"},{"author":"ChrisHughes24","date":"2020-03-02T22:07:04Z","comment":"One last issue I forgot to mention is that this PR does add a bunch of new instances that aren't really necessary. Now that `group` extends `has_one` but not `monoid`, we have a `group.to_has_one` instance that we didn't have before. Is this a problem? "},{"author":"digama0","date":"2020-03-02T22:15:14Z","comment":"Those instances already existed, with those same names no less. You get a `B.to_A` instance by default when you say `class B extends A`."},{"author":"ChrisHughes24","date":"2020-03-02T22:16:06Z","comment":"`group.to_has_one` didn't I don't think, because it didn't extend `has_one`, it extended `monoid`"},{"author":"digama0","date":"2020-03-02T22:16:23Z","comment":"Oh you mean transitive instances. That might be a performance problem because lean doesn't handle diamonds well, we'll see."},{"author":"ChrisHughes24","date":"2020-03-02T22:17:12Z","comment":"If only I could just do `attribute [-instance]` at the end of the file."},{"author":"digama0","date":"2020-03-02T22:17:55Z","comment":"maybe make an issue :D"},{"author":"digama0","date":"2020-03-02T22:18:52Z","comment":"Could you make a MWE for the left_distrib issue? I'm having trouble reproducing it."},{"author":"ChrisHughes24","date":"2020-03-02T22:44:42Z","comment":"[MWE](https://gist.github.com/ChrisHughes24/a1f25f9d9e933838ea41585811236212)"},{"author":"fpvandoorn","date":"2020-03-03T16:29:11Z","comment":"> One last issue I forgot to mention is that this PR does add a bunch of new instances that aren't really necessary. Now that `group` extends `has_one` but not `monoid`, we have a `group.to_has_one` instance that we didn't have before. Is this a problem?\r\n\r\nA workaround for this is to use \r\n```lean\r\nstructure group ...\r\n\r\nattribute [class] group\r\n```\r\nI'm not sure if this has other unintended consequences. I can think of two:\r\n* The projections will have the wrong arguments explicit. This should be fine, since we don't use the `group.foo` projections directly anyway.\r\n* The constructor `group.mk` might be different, but I don't think this will actually be the case with `old_structure_cmd`."},{"author":"ChrisHughes24","date":"2020-03-12T19:54:40Z","comment":"@fpvandoorn Another downside of the `attribute [class]` approach is that the instances `group.to_has_inv` and the like also have the wrong arguments explicit. I can redefine these as `group.to_has_inv'` etc, but this has caused a problem with a `simp [add_comm]` failing to simplify in a situation where `rw add_comm` solves the goal. \r\n\r\nThe `simp` failure fails to prove a goal that looks like `a * b + b * b = b * b + a * b`. The two `a * b` have different paths for `has_mul` and making them the same means that the simplifier succeeds. I know that with `simp [add_comm]` the simplifier puts things in some normalized order, does this ordering depend on the instance path?"},{"author":"gebner","date":"2020-04-07T14:32:18Z","comment":"I'm gonna merge this today.  Please complain if I missed any big issues in the discussion above."},{"author":"gebner","date":"2020-04-08T15:51:02Z","comment":"BTW, I've reverted this for now: #178.  Let's revisit this in Lean >=3.9."}],"review_discussion":[{"author":"digama0","file":"library/init/data/nat/lemmas.lean","date":"2020-03-02T21:33:51Z","comment":"I think you can delete theorems `nat.add_zero` and similar that were removed from the structures now."},{"author":"ChrisHughes24","file":"library/init/data/nat/lemmas.lean","date":"2020-03-02T21:41:56Z","comment":"I already deleted the ones that weren't used in the proofs of other properties."},{"author":"gebner","file":"library/init/algebra/group.lean","date":"2020-04-07T16:53:07Z","comment":"This was a bit of a blunder here.  I only spotted it myself when compiling mathlib.\r\n\r\nThe definition of `comm_monoid` and `add_comm_monoid` need to be exactly the same for `to_additive` to work:\r\n```lean\r\nclass comm_monoid (α : Type u) extends comm_semigroup α, has_one α :=\r\nclass add_comm_monoid (α : Type u) extends add_semigroup α, has_zero α, add_comm_semigroup α :=\r\n```\r\n\r\nSee #177."}],"tags":[],"commits":[{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"d7ae1f57711ed485dec8702c39383cd2661da1b3","message":"refactor(algebra): removing unnecessary axioms from group, ring etc.","date":"2020-02-29T21:00:24Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"6eb6373df578ca864be5ad0f40d83426e7fb1867","message":"fix build","date":"2020-02-29T22:42:45Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"00729804c4b2b85e0a60936d61d555b042ea9f7f","message":"fix division ring axioms","date":"2020-03-01T00:28:26Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"46d3f1ef1db5a365a75f12b0b384ed123cefcf80","message":"update group axioms","date":"2020-03-01T12:42:59Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"2b8dd5696a31f256e2af76b0edadaea8dd744a91","message":"fix test","date":"2020-03-01T14:08:29Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"1241c7285bd7005883299f4422c7022e153f37b9","message":"fix test again","date":"2020-03-01T14:11:17Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"7fa22e742da6c4bac3d57b8a726caa1a0a51c07b","message":"remove nat.mul_one and int.add_zero","date":"2020-03-02T21:49:18Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"8c74e1220577d26dfa1659b72f5e7dcf88b534e8","message":"change division_ring axiom from `mul_one` to `one_mul`","date":"2020-03-02T22:09:54Z"},{"author":"ChrisHughes24","committer":"web-flow","hash":"5df0bc76c2058af952645eb6ff9fba783c23e8c2","message":"Merge branch 'master' into ring-axioms","date":"2020-03-12T18:06:56Z"},{"author":"gebner","committer":"gebner","hash":"8e82f8ef68e4552c25e914cfe66a087103004732","message":"Merge branch 'master' into ring-axioms","date":"2020-04-07T13:52:24Z"}]},{"author":"TwoFX","number":131,"diff_summary":[{"file":"leanpkg/leanpkg/lean_version.lean","status":"M","additions":2,"deletions":9},{"file":"leanpkg/leanpkg/main.lean","status":"M","additions":2,"deletions":9}],"state":"merged","open_date":"2020-02-28T12:12:27Z","update_date":"2020-03-02T10:26:37Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"TwoFX","committer":"TwoFX","hash":"80e47066a3d8432ff1eeba87471994bea41d66b1","message":"Revert \"feat(leanpkg): avoid version warning for external Leans (#106)\"\n\nThis reverts commit f2acb66b6db96e7a3e1e7aab42c2e8c251a3efc1.","date":"2020-02-28T11:56:07Z"},{"author":"TwoFX","committer":"TwoFX","hash":"baf2f73378e33a77ab0b111bd731ec656b902b69","message":"Add the correct origin to the leanpkg lean_version_string","date":"2020-02-28T12:10:17Z"}]},{"author":"cipher1024","number":129,"diff_summary":[{"file":"library/init/meta/format.lean","status":"M","additions":16,"deletions":2},{"file":"src/library/vm/vm_format.cpp","status":"M","additions":16,"deletions":2},{"file":"src/util/sexpr/format.cpp","status":"M","additions":16,"deletions":2},{"file":"src/util/sexpr/format.h","status":"M","additions":16,"deletions":2}],"state":"closed","open_date":"2020-02-26T21:08:03Z","update_date":"2020-03-01T22:09:59Z","discussion":[{"author":"Kha","date":"2020-02-26T21:31:44Z","comment":"How is `f1 ++ soft_break ++ f2` different from `group $ f1 ++ line ++ f2`?"},{"author":"cipher1024","date":"2020-02-26T21:43:14Z","comment":"Doesn't `line` always break? That's what I have observed so far. "},{"author":"Kha","date":"2020-02-26T21:46:17Z","comment":"It shouldn't inside of `group`."},{"author":"cipher1024","date":"2020-02-27T00:09:22Z","comment":"If I write the following, both `trace` statements print the same thing:\r\n\r\n```lean\r\nmeta def test : tactic unit :=\r\ndo let x := list.repeat (to_fmt \"word\") 40,\r\n   let y := format.group $ format.join (list.intersperse format.line x),\r\n   let y' := format.join (list.intersperse format.line x),\r\n   tactic.trace \"> group\",\r\n   tactic.trace y,\r\n   tactic.trace \"> non-group\",\r\n   tactic.trace y'\r\n```\r\n\r\nThey both print:\r\n\r\n```\r\nword\r\nword\r\nword\r\nword\r\n...\r\n```\r\n\r\nAm I misusing `group`?"},{"author":"gebner","date":"2020-02-27T10:18:19Z","comment":"What @Kha said.  You need to put a `format.group` around it, but converting line breaks to spaces when they fit on a single line is literally the raison d'être of `format`.  The formatter in Lean is a standard Wadler-style pretty printer, so it should have all the API you need.  (Read the [paper](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf).)  I don't see any implementation or examples in the PR, is this what you expected:\r\n```lean\r\nopen format\r\n\r\n#eval tactic.trace $ group $\r\n  ((list.range 3).map (λ i, to_fmt \"word\" ++ line)).foldl (++) nil\r\n/-\r\nword word word\r\n\r\n-/\r\n\r\n#eval tactic.trace $ group $\r\n  ((list.range 30).map (λ i, to_fmt \"word\" ++ line)).foldl (++) nil\r\n/-\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\n\r\n-/\r\n```"},{"author":"cipher1024","date":"2020-02-27T18:08:56Z","comment":"Thanks for the clarification. I now see that I did not understand `line` and `group`. Still `soft_break` provides a different feature (I'll add a test to illustrate that). Consider the following:\r\n\r\n```lean\r\n#eval tactic.trace $ group $\r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.line)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ group $\r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.line)).foldl (++) nil\r\n-- prints 25 lines\r\n#eval tactic.trace $ group $\r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ group $\r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints 2 lines\r\n```"},{"author":"gebner","date":"2020-03-01T13:16:19Z","comment":"@cipher1024 You can define `soft_break` yourself:\r\n```lean\r\nopen format\r\nmeta def format.soft_break := line.group\r\n#eval tactic.trace $ group $\r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.line)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ group $\r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.line)).foldl (++) nil\r\n-- prints 25 lines\r\n#eval tactic.trace $ group $\r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ group $\r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints 2 lines\r\n```"},{"author":"cipher1024","date":"2020-03-01T22:09:59Z","comment":"Thanks! I hadn't realized that. And now, it also works without nesting the whole `format` expression inside another `group`:\r\n\r\n```lean\r\n#eval tactic.trace $ \r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ \r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints 2 lines\r\n```\r\n\r\nI'll PR it to mathlib."},{"author":"bryangingechen","date":"2020-03-01T22:24:39Z","comment":"At the same time it looks like `format.line` and `format.group` deserve better docstrings."}],"review_discussion":[{"author":"fpvandoorn","file":"library/init/meta/format.lean","date":"2020-02-27T04:06:37Z","comment":"doc string"}],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"ff24728799230a61fd729ee637d350b9b798ad55","message":"feat(format): soft line breaks that lets the formatter decide","date":"2020-02-26T21:02:40Z"}]},{"author":"ChrisHughes24","number":128,"diff_summary":[{"file":"library/init/data/nat/basic.lean","status":"M","additions":0,"deletions":85},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":0,"deletions":85}],"state":"closed","open_date":"2020-02-25T18:41:34Z","update_date":"2020-08-28T14:51:01Z","discussion":[{"author":"ChrisHughes24","date":"2020-03-01T13:17:32Z","comment":"This breaks `data/nat/bitwise.lean`. Maybe these lemma should be moved to mathlib?"},{"author":"gebner","date":"2020-04-01T08:52:29Z","comment":"> This breaks `data/nat/bitwise.lean`. Maybe these lemma should be moved to mathlib?\r\n\r\nI don't think these are used anywhere, so we can probably safely move them to mathlib."},{"author":"cipher1024","date":"2020-04-02T17:57:58Z","comment":"> > This breaks `data/nat/bitwise.lean`. Maybe these lemma should be moved to mathlib?\r\n> \r\n> I don't think these are used anywhere, so we can probably safely move them to mathlib.\r\n\r\nI can confirm. I believe we PRed this module when I was at Galois. @joehendrix Do you use the Lean 3 community fork at Galois? Is it a problem if `bitvec` moves to `mathlib`?\r\n"},{"author":"gebner","date":"2020-04-07T09:30:50Z","comment":"Another issue is that `nat.pow` and the bitwise operations have efficient VM implementations."},{"author":"cipher1024","date":"2020-04-15T19:14:28Z","comment":"For `nat.pow`, we could use `**` as the notation and not create an instance. We can use it in programs and have a simp rule rewrite it to `^` in proofs."},{"author":"jcommelin","date":"2020-08-28T04:29:12Z","comment":"> Another issue is that `nat.pow` and the bitwise operations have efficient VM implementations.\r\n\r\nDo those VM implementations care about what the definition of `nat.pow` is in Lean? I don't think so, right? So we can make this work, if we want."},{"author":"joehendrix","date":"2020-08-28T04:59:46Z","comment":"I just saw my name mentioned here.\r\nI don't think anybody at Galois is using Lean 3, and dropping `nat.pow` (or just changing the definition) seems fine to me.  I've always been a bit uncomfortable in general with having definitions that are only efficient because they have VM acceleration that isn't always documented in the Lean source."},{"author":"rwbarton","date":"2020-08-28T14:51:01Z","comment":"The build failed because these lemmas are used elsewhere in the core library. I'm going to replace this with a new PR."}],"review_discussion":[],"tags":[],"commits":[{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"71b1959f08d932719971298d7336a7985b9d2a9c","message":"refactor(data/nat/basic): get rid of nat.pow","date":"2020-02-25T18:38:47Z"},{"author":"ChrisHughes24","committer":"web-flow","hash":"4d87ed28d031a1e4410207b5f98f5a413ccc2f33","message":"Merge branch 'master' into nat-pow","date":"2020-03-14T18:47:11Z"}]},{"author":"gebner","number":127,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":33,"deletions":0}],"state":"merged","open_date":"2020-02-25T13:28:30Z","update_date":"2020-02-25T18:20:41Z","discussion":[{"author":"bryangingechen","date":"2020-02-25T14:46:00Z","comment":"Here are the commits in 3.5.1c (released 4 Feb 2020) which also aren't in the changelog:\r\n\r\nFeatures:\r\n- feat(tactic/change): allow `change` to be used to rename bound variables (#96)\r\n- feat(frontends/lean/pp): annotate pretty-printed output with full constant names (#89)\r\n- feat(library/init/meta/module_info): import modules from meta code (#88)\r\n- feat(library/init/meta/interactive): make `add_interactive` copy doc string (#97)\r\n- feat(leanpkg): avoid version warning for external Leans (#106) \r\n\r\nBugfixes:\r\n- fix(library/vm/vm_float): VM float cleanup (#87) \r\n- fix(builtin_cmds): force tactic type in run_cmd (#103) \r\n- fix(library/type_context): `?m_1` and `(λ x, ?m_1) y` are definitionally equal (#107)\r\n"},{"author":"gebner","date":"2020-02-25T15:24:39Z","comment":"Thanks, I've added them as well."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"3bc656a24f565a031c253ac3b1ce6869ea61744a","message":"doc(doc/changes): changelog for 3.6","date":"2020-02-25T13:26:17Z"},{"author":"gebner","committer":"gebner","hash":"201db399fa5f2c3f8c748bdb050e960a6a865d13","message":"Changelog for 3.5.1","date":"2020-02-25T15:24:15Z"}]},{"author":"bryangingechen","number":125,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":4,"deletions":4},{"file":"library/init/meta/tactic.lean","status":"M","additions":4,"deletions":4},{"file":"tests/lean/by_contradiction.lean.expected.out","status":"M","additions":4,"deletions":4}],"state":"merged","open_date":"2020-02-23T05:25:36Z","update_date":"2020-02-23T16:56:07Z","discussion":[{"author":"jcommelin","date":"2020-02-23T07:22:28Z","comment":"Should they now also mention `open_locale classical`?"},{"author":"gebner","date":"2020-02-23T09:41:47Z","comment":"Ah, the tests now fail because we check for the exact error message.  Please update the tests.\r\n\r\nI don't think we should mention `open_locale classical`, this is mathlib-specific."},{"author":"bryangingechen","date":"2020-02-23T15:18:43Z","comment":"Whoops, fixed now."}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"41a361758bd4bfd4b9bbb1afad9428b439b01a58","message":"fix(init/meta/interactive,tactic): docstring fix\n\nThe docstrings for by_cases, by_contra, by_contradiction had\n`local attribute classical.prop_decidable [instance]`\ninstead of\n`local attribute [instance] classical.prop_decidable`.","date":"2020-02-23T05:24:45Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"dda41aa899ac978ac2a19b54aee8d27c526fc45e","message":"update test","date":"2020-02-23T15:18:02Z"}]},{"author":"gebner","number":122,"diff_summary":[{"file":".appveyor.yml","status":"D","additions":0,"deletions":26},{"file":".travis.yml","status":"D","additions":0,"deletions":26},{"file":"packages/.gitignore","status":"D","additions":0,"deletions":26},{"file":"packages/leanpkg.toml","status":"D","additions":0,"deletions":26}],"state":"merged","open_date":"2020-02-21T12:41:33Z","update_date":"2020-03-07T13:04:09Z","discussion":[{"author":"cipher1024","date":"2020-02-22T05:01:00Z","comment":"I'm not sure that's a good idea. I thought it was good to have a couple of sanity checks to make sure we don't go crazy with the checks."},{"author":"gebner","date":"2020-02-22T09:03:19Z","comment":"The ugly truth is that all of the external projects tested in this way are experiments that have not been used by anyone in the last three years (to the best of my knowledge).  Furthermore, all of them are virtually 100% meta code.  The only thing being tested is that the tactics API remains unchanged.\r\n\r\nThe original purpose of the registry test in the CI was to ensure that changes in Lean core don't cause unexpected breakage in the Lean ecosystem.  The ecosystem is *mathlib* now, and we're very actively keeping an eye on it.  I don't see the value in chaining ourselves to abandonware."},{"author":"gebner","date":"2020-03-07T13:03:57Z","comment":"So I didn't want to merge this unless necessary, but #132 breaks the mini_crush examples."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"9541267ae8a759eb60d475b015247138ffa47916","message":"chore(.travis.yml): do not build mini_crush, etc.","date":"2020-02-22T08:41:13Z"}]},{"author":"Vierkantor","number":121,"diff_summary":[{"file":"library/init/meta/well_founded_tactics.lean","status":"A","additions":10,"deletions":1},{"file":"tests/lean/well_founded_tactics.lean","status":"A","additions":10,"deletions":1},{"file":"tests/lean/well_founded_tactics.lean.expected.out","status":"A","additions":10,"deletions":1}],"state":"merged","open_date":"2020-02-21T09:45:28Z","update_date":"2020-02-22T12:42:34Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"2d8a50918f7ea4f615be250f6d85b2a44ecf0a25","message":"Fix `well_founded_tactics.default` on already solved goals\n\nThis fix is an adaptation from `well_founded_tactics.default_dec_tac'` in\nmathlib, written by Scott Morrison.\nThe call to `unfold_sizeof` could happen to discharge the goal, and\n`cancel_nat_add_lt` assumes that there are remaining goals. A call to `done`\nchecks for this condition, and finishes execution in that case.","date":"2020-02-20T12:15:35Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"3eca6530dad47b1df0d06ff9292152d8c91d7785","message":"Add a test for the fix of `well_founded_tactics`\n\nThis definition was in mathlib with custom `well_founded_tactics`, but with the\nfixed tactic of the previous commit, it doesn't need this anymore.","date":"2020-02-21T09:44:21Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"555f38e870016a078ebbd673f9814815760931c7","message":"Empty commit to restart the build","date":"2020-02-21T15:44:41Z"},{"author":"gebner","committer":"gebner","hash":"1f1b0553f1077bce85054dd11d70873747d99b6c","message":"Merge remote-tracking branch 'origin/master' into fix_wf_tacs","date":"2020-02-22T08:43:06Z"}]},{"author":"ChrisHughes24","number":119,"diff_summary":[{"file":"library/init/algebra/field.lean","status":"M","additions":90,"deletions":209},{"file":"library/init/algebra/norm_num.lean","status":"M","additions":90,"deletions":209},{"file":"library/init/algebra/ordered_field.lean","status":"M","additions":90,"deletions":209},{"file":"src/library/norm_num.cpp","status":"M","additions":90,"deletions":209}],"state":"merged","open_date":"2020-02-20T21:43:19Z","update_date":"2020-02-26T08:11:14Z","discussion":[{"author":"rwbarton","date":"2020-02-20T23:55:28Z","comment":"> What fallout do we expect from this change in mathlib? Is it clear what we need to do in mathlib?\r\n\r\nProbably just replace all occurrences of `discrete_field` by `field`."},{"author":"digama0","date":"2020-02-21T01:12:26Z","comment":"It's not just a name change, the change to division rings might have some fallout, but I think we have done almost nothing with division rings so this should be mostly just a find/replace job."},{"author":"jcommelin","date":"2020-02-21T06:11:12Z","comment":"Note that this change is in some sense quite important. Currently, in Lean you can have two division ring structures on a type that are provably *not* equal (after applying ext, etc...), whereas they are mathematically identical. The difference would be that in maths `inv zero` doesn't make any sense, whereas in Lean one of the structures could have `inv zero = one` and the other `inv zero = zero`. This fact is actually blocking the generalisation of a bunch of simp-lemmas from fields to division rings."},{"author":"gebner","date":"2020-02-21T10:17:45Z","comment":"The build fails in `ordered_field.lean`."},{"author":"gebner","date":"2020-02-21T15:24:05Z","comment":"Now it fails in `norm_num.lean`."},{"author":"fpvandoorn","date":"2020-02-21T17:58:18Z","comment":"* I think this PR should also get rid of (or at least rename) `discrete_linear_ordered_field`.\r\n* Should we add a `decidable_eq` instance to the fields of `field`? I think we have a couple of choices:\r\n  1. We don't add `decidable_eq`, and just use classical logic to get `decidable_eq` instances\r\n  2. We don't add `decidable_eq`, but add it as an instance whenever needed.\r\n  3. We add `decidable_eq` to `field`.\r\n\r\n  These choices matter if we do constructive logic, but I don't think anyone cares about this too much. However, they might also matter when doing classical logic. For example, if there is an instance `linear_ordered_field -> decidable_linear_order` which uses `classical.prop_decidable` then we might have two instances of `decidable_linear_order rat`, one where `decidable_le` (and variants) is proven, and one where it is a consequence of `classical.prop_decidable`. That could lead to potential fallout (for example: locally changing an instance priority might make all lemmas involving `max` not apply anymore)."},{"author":"ChrisHughes24","date":"2020-02-21T21:46:44Z","comment":"Another option is to make `max` and `abs` fields of the structures and get rid of the `decidable_eq` assumptions. There are examples where there was a diamond where `sup` was not the same as `max` on `with_top` of a linear order. I think there should perhaps be a `has_abs.abs` that includes the `abs` on complexes perhaps? I'd be happy to rename `max` to `sup` as well."},{"author":"digama0","date":"2020-02-21T22:14:09Z","comment":"Why not use the lattice operations for this? `max` coincides with `sup` whenever the former is defined, and `abs` coincides with `max x (-x)` in the current definition but we also might want it to look like `norm` in some cases. But `norm` is real valued while `abs` is valued in the structure, so I don't know what the right generalization is."},{"author":"gebner","date":"2020-02-25T13:19:49Z","comment":"This change seems to require a bit more discussion, is everybody OK with delaying it until Lean 3.7?"},{"author":"jcommelin","date":"2020-02-25T17:32:21Z","comment":"> This change seems to require a bit more discussion, is everybody OK with delaying it until Lean 3.7?\r\n\r\nLet's at least add `inv_zero` to `division_ring`. That should be completely uncontroversial.\r\n"},{"author":"ChrisHughes24","date":"2020-02-25T18:00:59Z","comment":"I think everything in this PR should be uncontroversial. The part that requires discussion is what to do with ordered rings and fields, but this PR does nothing to them."},{"author":"gebner","date":"2020-02-25T18:30:06Z","comment":"Ok, then let's get this in.  I've merged master into the branch and everything builds locally.  Let's wait for the CI."},{"author":"gebner","date":"2020-02-25T18:32:56Z","comment":"One test failed (the C++ code uses the norm_num helper lemmas to construct proofs, and you removed one unnecessary argument).  I've fixed this so that we can merge this ASAP."}],"review_discussion":[],"tags":[],"commits":[{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"5af30caa42aeefdf508cd61cddcad57f38480b14","message":"feat(algebra/field): get rid of discrete_field","date":"2020-02-20T21:29:54Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"2254eab86c39037832912889562984dc63539f48","message":"refactor(field): remove inv_mul_cancel axiom from field","date":"2020-02-20T21:51:57Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"36b6792e746aee3c15924da8e79c8353d70d3589","message":"fix build","date":"2020-02-21T12:40:01Z"},{"author":"ChrisHughes24","committer":"ChrisHughes24","hash":"9429d3eae794ad8bc97d52b9208535b22d4e4bfb","message":"fix norm_num","date":"2020-02-25T18:12:21Z"},{"author":"gebner","committer":"web-flow","hash":"865b414a90c6eb677caeb2a2483b419cb1c9cd1d","message":"Merge branch 'master' into discrete_field","date":"2020-02-25T18:22:44Z"},{"author":"gebner","committer":"gebner","hash":"ef2b9b5a53bdfa21f905cf1021fff95b7df4d897","message":"fix(library/norm_num): fix proof construction","date":"2020-02-25T18:31:47Z"}]},{"author":"gebner","number":117,"diff_summary":[{"file":"library/init/algebra/functions.lean","status":"M","additions":10,"deletions":3},{"file":"library/init/algebra/group.lean","status":"M","additions":10,"deletions":3},{"file":"library/init/algebra/norm_num.lean","status":"M","additions":10,"deletions":3},{"file":"library/init/algebra/ring.lean","status":"M","additions":10,"deletions":3},{"file":"library/init/data/int/basic.lean","status":"M","additions":10,"deletions":3},{"file":"library/init/data/int/order.lean","status":"M","additions":10,"deletions":3}],"state":"merged","open_date":"2020-02-20T10:12:03Z","update_date":"2020-02-21T12:32:30Z","discussion":[],"review_discussion":[{"author":"fpvandoorn","file":"library/init/algebra/group.lean","date":"2020-02-20T18:24:10Z","comment":"I didn't know this was valid syntax! 💡 "}],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"8cbd4d8c8508a8b773a94517ffd9cff4edb8ead6","message":"feat(init/algebra/group): remove simp attribute from sub_eq_add_neg","date":"2020-02-20T10:10:16Z"},{"author":"gebner","committer":"web-flow","hash":"3602e340462bb5d06579fceb0e0b3af7cb408453","message":"Merge branch 'master' into sub-eq-add-neg","date":"2020-02-21T09:40:25Z"}]},{"author":"gebner","number":116,"diff_summary":[{"file":".travis.yml","status":"M","additions":1,"deletions":15}],"state":"merged","open_date":"2020-02-19T21:01:55Z","update_date":"2020-02-20T05:05:43Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"6343a0b03853534e8911c6d12c327805c0332f03","message":"chore(travis.yml): simplify travis config","date":"2020-02-19T20:56:40Z"}]},{"author":"gebner","number":115,"diff_summary":[{"file":"library/init/core.lean","status":"M","additions":2,"deletions":3}],"state":"merged","open_date":"2020-02-19T11:03:44Z","update_date":"2020-02-21T07:53:57Z","discussion":[{"author":"fpvandoorn","date":"2020-02-20T19:03:37Z","comment":"Is the test failure related to this change?"},{"author":"bryangingechen","date":"2020-02-20T19:51:45Z","comment":"No, the failure comes from #72, which is supposed to be addressed by #104."},{"author":"gebner","date":"2020-02-20T22:46:43Z","comment":"Yes, the CI error should be fixed now that I've merged master into this branch.  I'm just trying to avoid merges as much as possible because the CI capacity in this repository is severely crippled: we can only do about one CI run every 2 hours or so."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"e48b2cd1faa83f9c43847b9e36e81c25ad9713b8","message":"refactor(library/init/core): replace insert definition by export","date":"2020-02-19T10:59:48Z"},{"author":"gebner","committer":"web-flow","hash":"4d0b7cedfef0df6d1c874732a666debb37983cd5","message":"Merge branch 'master' into has-insert","date":"2020-02-20T10:13:39Z"},{"author":"gebner","committer":"web-flow","hash":"6488a50d95106e5bfda5e0c5bea959b7e9db72d1","message":"Merge branch 'master' into has-insert","date":"2020-02-20T22:40:20Z"}]},{"author":"bryangingechen","number":113,"diff_summary":[{"file":"library/init/meta/expr.lean","status":"M","additions":41,"deletions":5},{"file":"library/init/meta/tactic.lean","status":"M","additions":41,"deletions":5},{"file":"src/frontends/lean/scanner.cpp","status":"M","additions":41,"deletions":5},{"file":"src/frontends/lean/scanner.h","status":"M","additions":41,"deletions":5},{"file":"tests/lean/run/comment.lean","status":"M","additions":41,"deletions":5}],"state":"merged","open_date":"2020-02-14T02:40:52Z","update_date":"2020-02-17T14:14:33Z","discussion":[{"author":"bryangingechen","date":"2020-02-14T03:35:40Z","comment":"Ugh, [the docstring to `olean_doc_strings` in`init.meta.tactic`](https://github.com/leanprover-community/lean/blob/master/library/init/meta/tactic.lean#L553) contains `` `/-!` `` which breaks the naïve approach I took here. \r\n\r\nShould I try to detect backticks or is there something simpler?"},{"author":"bryangingechen","date":"2020-02-14T05:07:03Z","comment":"~This is still broken... the interactive tests freeze.~\r\n\r\nWith the current approach we'll have to be more careful with backticks near the end of the docstrings. For instance, [this `` `-/ `` in `init.meta.expr`](https://github.com/leanprover-community/lean/blob/master/library/init/meta/expr.lean#L189) was also breaking the build."},{"author":"robertylewis","date":"2020-02-14T09:48:42Z","comment":"Nice!\r\n\r\n> With the current approach we'll have to be more careful with backticks near the end of the docstrings. For instance, [this `` `-/ `` in `init.meta.expr`](https://github.com/leanprover-community/lean/blob/master/library/init/meta/expr.lean#L189) [](/leanprover-community/lean/blob/HEAD@{2020-02-14T05:07:03Z}/library/init/meta/expr.lean#L189) was also breaking the build.\r\n\r\nIt gives an error in VSCode if you write it, right? In that case, I don't think it's a big problem."},{"author":"gebner","date":"2020-02-14T14:03:59Z","comment":"> Should I try to detect backticks or is there something simpler?\r\n\r\nI think you should just change the `olean_doc_string` docstring to `` `/-! ... -/` ``.  Detecting `` `/- `` as done currently in this PR is just as error-prone (it fails for `` `/-! ... -/` ``).  Let's go with the simplest approach here."},{"author":"gebner","date":"2020-02-17T13:44:27Z","comment":"LGTM."}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"381ed5cb627ecfbd8404a9201e4a5b0423e302e7","message":"feat(scanner): allow nested comment blocks in docstrings","date":"2020-02-14T02:36:06Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"a286be77ba6e20ef0ef8e8b0790d596ce800ec10","message":"backticks, add characters to m_buffer","date":"2020-02-14T04:40:38Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"3bb2583c7db6dad7b746d26343b7f447ed99d4d0","message":"fix comment `-/","date":"2020-02-14T05:12:42Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"fe763ae78ac508b37beed14ef81fa4087ba75e2c","message":"remove backticks logic, fix docstrings","date":"2020-02-14T15:11:28Z"}]},{"author":"robertylewis","number":110,"diff_summary":[{"file":"extras/latex/lstlean.tex","status":"M","additions":32,"deletions":14}],"state":"merged","open_date":"2020-02-06T16:11:12Z","update_date":"2020-02-18T21:10:07Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"robertylewis","committer":"robertylewis","hash":"cc3572dc416397be48ad28145b56b355b341c5a4","message":"feat(extras): update lstlean.xex to be more modern","date":"2020-02-06T16:09:31Z"}]},{"author":"gebner","number":107,"diff_summary":[{"file":"src/library/type_context.cpp","status":"A","additions":32,"deletions":2},{"file":"tests/lean/run/mvar_beta_isdefeq.lean","status":"A","additions":32,"deletions":2}],"state":"merged","open_date":"2020-02-03T08:53:29Z","update_date":"2020-02-04T17:00:39Z","discussion":[{"author":"cipher1024","date":"2020-02-04T03:20:46Z","comment":"Can you summarize why this commit is correct and is the kernel using `quick_is_def_eq`? Also, can you check that mathlib builds with it?"},{"author":"gebner","date":"2020-02-04T08:49:41Z","comment":"> Can you summarize why this commit is correct\r\n\r\nThe type context uses the same code for unification and checking definitional equality of terms, this function is called `is_def_eq`.  The variables `m_update_left` and `m_update_right` in the `type_context` class control whether we assign metavariables in the left (resp., right) expression.  They hence control whether we do unification or definitional equality checks.  This issue concerns the case when these variables are set to false, i.e., when we perform definitional equality checks.\r\n\r\nThe `is_def_eq` function is constructed in several layers:\r\n * `is_def_eq` calls `is_def_eq_core`, and then logs a trace message and handles postponed universe level unification problems\r\n * `is_def_eq_core` calls `is_def_eq_core_core`, and adds the pair of the expressions to the cache if they have been found to be definitionally equal\r\n * `is_def_eq_core_core` is the core function.  It does βηιζ-reduction as well as δ-reduction guided by the definitional height heuristic.  Then it tries some ad-hoc heuristics like offset equations and unification hints.  After that, it does the \"typical\" unification steps: e.g. reduce `f a =?= g b` to `f =?= g` and `a =?= b`.  Finally, it implements proof irrelevance.  However, at the very beginning of `is_def_eq_core_core` (before we reduce anything) is a quick check that should detect unifiable/non-unifiable terms without the costly βδιζ-reduction done in `is_def_eq_core_core`; this function is called `quick_is_def_eq`.\r\n * `quick_is_def_eq` has some pretty straightforward checks: return true if the pointers are equal, or return true if we have cached the definitional equality.  Then it unfolds metavariables.  If there is a still a metavariable on one side, then it tries to assign it, however the code essentially works like this [comments are my reading of the code]:\r\n```c++\r\nif (f1 is a metavariable) {\r\n  if (m_update_left) {\r\n    // Try to assign metavariable\r\n  } else {\r\n    // The metavariable is not syntactically equal to the other expression.\r\n    // We cannot assign the metavariable, hence they cannot be\r\n    // definitionally equal.\r\n    // ⚡\r\n    return l_false;\r\n  }\r\n}\r\n```\r\n  Alas, this is not correct.  The expressions could still be definitionally equal after reduction.  This PR changes the `l_false` to `l_undef`, thereby proceeding with `is_def_eq_core_core`.\r\n\r\n> kernel using quick_is_def_eq\r\n\r\nOf course not.  The kernel uses different code for type checking, namely the `type_checker` instead of the `type_context`.\r\n\r\n> Also, can you check that mathlib builds with it?\r\n\r\nThe mathlib build succeeds with debug assertions enabled."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"dbb833787b4af803f6c6a363823630e2ee2ee062","message":"fix(library/type_context): `?m_1` and `(λ x, ?m_1) y` are definitionally equal","date":"2020-02-03T08:50:59Z"}]},{"author":"robertylewis","number":106,"diff_summary":[{"file":"leanpkg/leanpkg/main.lean","status":"M","additions":8,"deletions":1}],"state":"merged","open_date":"2020-01-31T10:38:44Z","update_date":"2020-02-04T16:54:35Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"robertylewis","committer":"web-flow","hash":"df59b32e2f12358de55295653662b3ef1a934104","message":"feat(leanpkg): avoid version warning for external Leans","date":"2020-01-31T10:38:06Z"}]},{"author":"Vierkantor","number":104,"diff_summary":[{"file":"tests/lean/non_meta_rec_fn.lean","status":"D","additions":0,"deletions":16},{"file":"tests/lean/non_meta_rec_fn.lean.expected.out","status":"D","additions":0,"deletions":16}],"state":"merged","open_date":"2020-01-30T10:00:56Z","update_date":"2020-02-21T16:09:29Z","discussion":[{"author":"cipher1024","date":"2020-01-30T16:54:21Z","comment":"We're losing a lot of details by doing that. If the error message changes by accident, we won't be warned."},{"author":"bryangingechen","date":"2020-01-31T20:58:31Z","comment":"Related issue: #72. Out of curiosity, does anyone have any insight into why the column number would be inconsistent here?"},{"author":"gebner","date":"2020-02-01T10:40:24Z","comment":"My pet theory is the following: while the position of an expression is stored in the expression itself, the position does not factor in the hash code or equality checks (it is also mutable IIRC).  We probably just deduplicate expressions somewhere, and replace the expression with one position with another (equal!) expression with a different position."},{"author":"gebner","date":"2020-02-04T08:55:07Z","comment":"I think this is a good and pragmatic change and believe that we should merge it.\r\n\r\nThe important part about this test is just that it fails, not the precise wording of the error message.  While it would be nice to fix the nondeterministic column on macOS instead, I'm not sure this is realistic given our resources or even a good use of our time."},{"author":"cipher1024","date":"2020-02-04T17:56:11Z","comment":"What worries me about this change is not so much about losing a test for the wording but losing an indication of the proof state that gets reported. If an error gets introduced in wf recursion such that the goal gets messed up, this is one of the safeguards that could warn us."},{"author":"gebner","date":"2020-02-04T18:23:19Z","comment":"I think we have quite a few other tests for well-founded recursion (including error messages), this test specifically tests for a apparent inconsistency in Lean one or two years ago."},{"author":"gebner","date":"2020-02-21T16:10:36Z","comment":"And the problem reappeared in the darwin build for #122."}],"review_discussion":[],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"fc166be153a40def6988a80608530894302f76df","message":"Move `non_meta_rec_fn` to the fail tests\n\nThis tests checks soundness of Lean when defining a generally recursive\nfunction in a tactic block, by verifying this gives an error.  In CI there were\nsome failures because the error message given by `non_meta_rec_fn` did not have\na consistent column number (but was otherwise consistent). To make the tests\nless flaky, moving it to the fail tests should check that the definition is\ninvalid, while not being as strict about the precise error message.","date":"2020-01-30T09:57:24Z"}]},{"author":"Vtec234","number":103,"diff_summary":[{"file":"src/frontends/lean/builtin_cmds.cpp","status":"A","additions":14,"deletions":0},{"file":"tests/lean/run_cmd_type.lean","status":"A","additions":14,"deletions":0},{"file":"tests/lean/run_cmd_type.lean.expected.out","status":"A","additions":14,"deletions":0}],"state":"merged","open_date":"2020-01-30T01:30:27Z","update_date":"2020-02-04T16:55:31Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"6b1164025f50a656471dc9148c7cf0ffc7b27036","message":"fix(builtin_cmds): force tactic type in run_cmd","date":"2020-01-30T01:22:14Z"}]},{"author":"Vierkantor","number":100,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"A","additions":209,"deletions":74},{"file":"library/init/meta/simp_tactic.lean","status":"A","additions":209,"deletions":74},{"file":"library/init/meta/well_founded_tactics.lean","status":"A","additions":209,"deletions":74},{"file":"src/library/inductive_compiler/nested.cpp","status":"A","additions":209,"deletions":74},{"file":"src/library/tactic/eqn_lemmas.cpp","status":"A","additions":209,"deletions":74},{"file":"src/library/tactic/simp_lemmas.cpp","status":"A","additions":209,"deletions":74},{"file":"src/library/tactic/simp_lemmas.h","status":"A","additions":209,"deletions":74},{"file":"src/library/tactic/simplify.cpp","status":"A","additions":209,"deletions":74},{"file":"tests/lean/run/pathsimp.lean","status":"A","additions":209,"deletions":74},{"file":"tests/lean/simp_symm.lean","status":"A","additions":209,"deletions":74},{"file":"tests/lean/simp_symm.lean.expected.out","status":"A","additions":209,"deletions":74}],"state":"merged","open_date":"2020-01-28T16:49:56Z","update_date":"2020-02-19T10:59:16Z","discussion":[{"author":"Vierkantor","date":"2020-01-29T11:20:39Z","comment":"I'm currently compiling the full `mathlib` against the changes, but from testing `mathlib/src/tactics`, it seems that only `squeeze_simp` needs some fixes. Here is the PR to `mathlib` to fix this: https://github.com/leanprover-community/mathlib/pull/1923"},{"author":"Vierkantor","date":"2020-01-30T14:31:20Z","comment":"After updating to the master branch, mathlib builds with no errors!\r\n\r\nI've added some code to prevent conflicts between forwards and backwards rewriting rules (preventing an infinite loop of rewriting back-and-forth): if there is a `@[simp] lemma foo` and `simp [<-foo]` is called, the original lemma `foo` is deleted from the set of simp lemmas so that only `foo.symm` remains.\r\n\r\nBut I just realized that this doesn't solve all conflicts: if for whatever reason there is a `@[simp] lemma bar` with the same type as `foo`, `simp [<-foo]` would be equivalent to `simp [<-foo, bar]`, and thus start looping again. I guess the simplest way to prevent all these issues is to say `[<-foo]` is only allowed as an argument to `simp only` so conflicts should be easily apparent. Or is this just something that the user is expected to be careful with?"},{"author":"gebner","date":"2020-02-11T10:30:27Z","comment":"> Or is this just something that the user is expected to be careful with?\r\n\r\nYes, I think this is up to the user.  You can already very easily make simp loop by calling `simp *`, so this issue is not new."},{"author":"gebner","date":"2020-02-11T10:31:27Z","comment":"> Or is this just something that the user is expected to be careful with?\r\n\r\nYes, I think this is up to the user.  You can already very easily make simp loop by calling `simp *`, so this issue is not new.\r\n\r\nLGTM."},{"author":"cipher1024","date":"2020-02-19T19:58:01Z","comment":"What's going on with the build?"},{"author":"bryangingechen","date":"2020-02-19T20:18:09Z","comment":"@cipher1024 From what I can tell, something went wrong [here](https://travis-ci.org/leanprover-community/lean/jobs/652621473#L1584) causing `ccache` not to be installed. [Here's](https://github.com/leanprover-community/lean/blob/master/.travis.yml#L172) the relevant part of `.travis.yml`. Not sure if something changed with homebrew or with travis..."},{"author":"gebner","date":"2020-02-19T20:50:46Z","comment":"This is a bit surprising, the CI worked on the PR."},{"author":"gebner","date":"2020-02-19T21:02:22Z","comment":"See #116."}],"review_discussion":[{"author":"Vierkantor","file":"src/library/tactic/simp_lemmas.h","date":"2020-01-28T16:51:26Z","comment":"Should this argument have a default value of `false`?"},{"author":"gebner","file":"library/init/meta/simp_tactic.lean","date":"2020-01-28T16:54:28Z","comment":"These new extra argument is probably going to break lots of stuff in mathlib.  Can you maybe at least add a default for the new argument?"},{"author":"gebner","file":"library/init/meta/simp_tactic.lean","date":"2020-01-28T16:55:22Z","comment":"Similar situation here, except we can't even use default argument.  Could we just keep the old API?\r\n\r\nCould you maybe also try to build mathlib with this change, just to see what breaks?"},{"author":"gebner","file":"library/init/meta/simp_tactic.lean","date":"2020-01-28T16:55:33Z","comment":"```suggestion\r\n      new_S ← if use_hyps then mcond (is_prop new_d) (S.add h_new ff) (return S)\r\n```"},{"author":"gebner","file":"src/library/tactic/simp_lemmas.h","date":"2020-01-28T16:58:06Z","comment":"In C++ you can only add default arguments for the last arguments.  Since `priority` has no default value, you can't add one for `symm` either.\r\n\r\nYou can however define an overload, which you probably should:\r\n```c++\r\ninline simp_lemmas add(type_context_old & ctx, simp_lemmas const & s, name const & id, unsigned priority) {\r\n\treturn add(ctx, s, id, false, priority);\r\n}\r\n```"},{"author":"gebner","file":"library/init/meta/interactive.lean","date":"2020-01-29T10:33:32Z","comment":"Could you use this function for `erase_simp_arg` in `squeeze_simp`?"},{"author":"Vierkantor","file":"library/init/meta/simp_tactic.lean","date":"2020-01-29T10:58:27Z","comment":"This function doesn't seem to be called in `mathlib`, and only once in core Lean: `mk_simp_set_core`. I will revert this to the old type (which is all `mk_simp_set_core` needs) and introduce a new version just in case it is picked up in `mathlib`."}],"tags":[],"commits":[{"author":"Vierkantor","committer":"Vierkantor","hash":"2cd22eb83a3ca2a408461f34ebd8cda4e8b37e6e","message":"Add `symm` flag to `simp` lemmas","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"7dce5aed2e053a4526042230e5f012cb903fb7f2","message":"Use <- before a simp lemma to rewrite the other way","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"3e657911d428298e7a7a4c80c135d61c5cff52c1","message":"Fix `pathsimp.lean` test that uses the old interface to `simp`","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"4a334292a12374548e34654c29a01971e7c2eb44","message":"Code cleanup","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"6a04d94b3c9d725a35c5fe38ce00bdd7899a94cb","message":"Add reverse direction to docstring of `simp`","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"12dade90ee6fac24b3af3864e3ba358c6edee2bd","message":"Make testcase for `simp_symm` pass: copy expected output, i.e. empty","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"3c0fdbd5d852eae7733fe8b2f42ef196eb53de40","message":"`simp [<-h]` works if `h : R a b` for any symmetric R","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"e798b106f0cba680d3d61b4af1f9fa04ae2b7bcc","message":"Delete TODOs that were irrelevant","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"4c2faa42380dfeccd6d40b021fb391d955080575","message":"`false` should be `ff` in Lean\n\nCo-Authored-By: Gabriel Ebner <gebner@gebner.org>","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"8fcfec53196a2249c88615930ca78a10e9df8f34","message":"`simp.add`'s argument `symm` should default to `false/ff`","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"65ae5c42bbab7e9950eed7430b223f5ce2e9ddbd","message":"Make calls to `simp_arg_type` and `decode_simp_arg_list` backwards-compatible\n\nThe problem is that some tactics in `mathlib` extending `simp` do not handle\nthe `symm` argument, so by introducing the new behavior under a new name and\nerroring out when `symm` is found in the old behavior, calls (but not\npattern-matching) shouldn't break too much.","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"0c62318dd90c94337e10211fe7ad4bf6de017cae","message":"Define `has_to_tactic_format` instance for `simp_arg_type`\n\nIn `mathlib`, a similar function was used by `squeeze_simp`, but changes in the\ndefinition for `simp_arg_type` will break this.  This solution adds a polyfill\ninstance in `mathlib` with low priority and the \"real\" instance with high\npriority in the new version of core Lean.","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"47d9b5837a4466f977fa1954429cb2990ebdd840","message":"Small refactor: use `mfoldl` instead of manually combining `bind` and `foldl`","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"a96bc112a5dd21696ba2667a623be10cfac49f92","message":"Make backwards-compatible version of `simp_lemmas.append`","date":"2020-01-30T12:09:45Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"cc65428f6d85e39310c06773256a1af14864013e","message":"Prevent some conflicts between forward and reverse rewrite rules\n\nIf there is a `lemma @[simp] foo` and we call `simp [<-foo]`, this would give a\ntimeout because it will start rewriting back and forth from LHS to RHS. To\navoid this, we delete all `foo`s coming from annotations when collecting lemmas\nfor `simp [<-foo]`.","date":"2020-01-30T14:24:10Z"},{"author":"Vierkantor","committer":"Vierkantor","hash":"5ab07cb13e38d64815c8d5dcc3be81f22c67da1d","message":"Fix (one part of?) the build failure","date":"2020-01-31T13:25:24Z"}]},{"author":"robertylewis","number":99,"diff_summary":[{"file":"README.md","status":"M","additions":9,"deletions":14}],"state":"merged","open_date":"2020-01-27T16:09:08Z","update_date":"2020-02-04T16:56:49Z","discussion":[{"author":"bryangingechen","date":"2020-01-29T20:42:46Z","comment":"While we're at it, we should say something about the community fork vs the official version in the README, e.g. this text snippet should be updated and maybe we should link to the leanprover-community website:\r\n\r\n> Important: Lean 3.4.2 is the latest release. It is also the last release for the Lean 3.x code base. Only major bugs (e.g., soundness) will be fixed for this code base from now on. We are currently developing Lean 4 in a new (private) repository. The Lean 4 source code will be released here when ready. The main goals for Lean 4 are described here.\r\n"},{"author":"robertylewis","date":"2020-01-30T11:00:31Z","comment":"Good call. I've updated the readme a bit more."}],"review_discussion":[],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"commits":[{"author":"robertylewis","committer":"web-flow","hash":"068d7a702487c5dfd5b823ddf5fdedb5fc8ce7c6","message":"doc(readme): don't link to 3.4.2 release","date":"2020-01-27T14:02:04Z"},{"author":"robertylewis","committer":"web-flow","hash":"fc02d97bf32060eeae9060c4a47916c733577989","message":"doc(readme): nightlies are at a different repo","date":"2020-01-29T20:32:35Z"},{"author":"robertylewis","committer":"web-flow","hash":"30451de3ca29109cea4bdd57b7a3dd930df9cb3f","message":"Update README.md","date":"2020-01-30T10:59:18Z"}]},{"author":"bryangingechen","number":97,"diff_summary":[{"file":"library/init/meta/interactive.lean","status":"M","additions":22,"deletions":1},{"file":"tests/lean/run/add_interactive.lean","status":"M","additions":22,"deletions":1}],"state":"merged","open_date":"2020-01-13T03:09:49Z","update_date":"2020-01-30T03:55:18Z","discussion":[],"review_discussion":[{"author":"cipher1024","file":"library/init/meta/interactive.lean","date":"2020-01-29T17:28:52Z","comment":"This function does not use the `new_namespace` argument anywhere. Instead, it hard codes `tactic.interactive`. Can we use the argument instead?"},{"author":"bryangingechen","file":"library/init/meta/interactive.lean","date":"2020-01-29T18:13:05Z","comment":"good catch! I fixed this and added a test."}],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"4639e1c230c663aed6d284a493870ba7e6d28cc1","message":"feat(library/init/meta/interactive): make `add_interactive` copy doc string","date":"2020-01-29T18:02:43Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"044878e6d04795759a1ad0c13f64f553edb46508","message":"reviewer comment","date":"2020-01-29T18:12:22Z"}]},{"author":"cipher1024","number":96,"diff_summary":[{"file":"src/library/tactic/change_tactic.cpp","status":"M","additions":20,"deletions":1},{"file":"tests/lean/change_tac.lean","status":"M","additions":20,"deletions":1},{"file":"tests/lean/change_tac.lean.expected.out","status":"M","additions":20,"deletions":1}],"state":"merged","open_date":"2020-01-11T22:08:01Z","update_date":"2020-01-12T06:52:28Z","discussion":[{"author":"bryangingechen","date":"2020-01-13T20:27:04Z","comment":"Don't mind me, just commenting here so that issue #95 gets linked."}],"review_discussion":[{"author":"robertylewis","file":"tests/lean/change_tac.lean","date":"2020-01-11T23:08:21Z","comment":"Does this need a corresponding file with the expected output? I'm not sure what the test is right now, it should pass with any output from trace, right?"},{"author":"gebner","file":"tests/lean/change_tac.lean","date":"2020-01-11T23:37:00Z","comment":"There's already a file with the expected output, it just needs to be updated.\r\n\r\n@cipher1024 You can run the tests locally on your machine by executing `ctest` in the build directory.  (Or `ctest -R leantest` if you only want to run the `tests/lean` tests.)  You can also run a single test using the `test_single.sh` script in the `tests/lean` directory."},{"author":"cipher1024","file":"tests/lean/change_tac.lean","date":"2020-01-11T23:51:55Z","comment":"Sorry, I forgot it wasn't it my normal `make` command for Lean 3. The fix is coming"}],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"045d736a3a49cfa0ccd7db6e4b27d14521098a31","message":"feat(tactic/change): allow change to simply rename variables","date":"2020-01-10T03:41:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"baa9c39d4e6083d3d2e734680658108cad611a8f","message":"chore(*): add test for `change`","date":"2020-01-11T23:51:02Z"}]},{"author":"cipher1024","number":94,"diff_summary":[{"file":".github/workflows/ccpp.yml","status":"A","additions":239,"deletions":0},{"file":"default.nix","status":"A","additions":239,"deletions":0},{"file":"nix/derivation.nix","status":"A","additions":239,"deletions":0},{"file":"nix/nixpkgs.nix","status":"A","additions":239,"deletions":0},{"file":"script/ci.sh","status":"A","additions":239,"deletions":0}],"state":"closed","open_date":"2019-12-28T07:47:25Z","update_date":"2019-12-30T17:54:35Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"cipher1024","committer":"web-flow","hash":"81188e1bbadc1db8c2b081f2908d4d8edd715106","message":"Create ccpp.yml","date":"2019-12-28T07:47:15Z"},{"author":"cipher1024","committer":"web-flow","hash":"5c420235437c6abdeeac99e7129b1b48951243a3","message":"Update ccpp.yml","date":"2019-12-28T07:49:04Z"},{"author":"cipher1024","committer":"web-flow","hash":"ccefb8ba14ede6f81bb52df9256eb1b31bf06083","message":"Update ccpp.yml","date":"2019-12-28T07:50:40Z"},{"author":"cipher1024","committer":"web-flow","hash":"f68fe6122906d1b15f909d407e59dfa9f5f60275","message":"Update ccpp.yml","date":"2019-12-28T07:53:59Z"},{"author":"cipher1024","committer":"web-flow","hash":"47e29c0c5850047053ffcc0ec4c539a212957318","message":"Update ccpp.yml","date":"2019-12-28T07:55:00Z"},{"author":"cipher1024","committer":"web-flow","hash":"216ddc4af9d1d67c3588485f833be133242c98f5","message":"Update ccpp.yml","date":"2019-12-28T08:00:40Z"},{"author":"cipher1024","committer":"cipher1024","hash":"ceb4eb7fc8557ac13e2bfa95d68e4cd0564d8d7f","message":"add default.nix","date":"2019-12-28T08:13:26Z"},{"author":"cipher1024","committer":"cipher1024","hash":"a362d2485b83d8f7b8a893e03a8eaa12757e059f","message":"more nix files","date":"2019-12-28T08:17:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"50354ee13a8137e966a4e056c350889ccb27e776","message":"CXX_FAMILY","date":"2019-12-28T08:32:23Z"},{"author":"cipher1024","committer":"cipher1024","hash":"253a201b179282ec8ac154b8b7e457aede9eac70","message":"CXX_FAMILY","date":"2019-12-29T15:03:30Z"},{"author":"cipher1024","committer":"cipher1024","hash":"8ec18d79fa60b8adf58b208a8942bafcc202564d","message":"boots","date":"2019-12-29T15:12:15Z"},{"author":"cipher1024","committer":"cipher1024","hash":"e1c946ca0af54753d1385fb33e90980ac8099bef","message":"more","date":"2019-12-29T15:14:41Z"},{"author":"cipher1024","committer":"cipher1024","hash":"c7f21411f836e6c5b303a2a176c9ae888c1c1a56","message":"again","date":"2019-12-29T15:15:48Z"},{"author":"cipher1024","committer":"cipher1024","hash":"26f02d085d6030941fb359e0e37fae73aa8387e3","message":"more vars","date":"2019-12-29T15:45:32Z"},{"author":"cipher1024","committer":"cipher1024","hash":"b947b84091d7cc12851d0fc1b224531ea06a62db","message":"more","date":"2019-12-29T15:47:24Z"},{"author":"cipher1024","committer":"cipher1024","hash":"cf638988da42839a5a1811a8ca410e254fdcfc1b","message":"install scripts","date":"2019-12-29T16:11:31Z"},{"author":"cipher1024","committer":"cipher1024","hash":"c8fe9756cd89f79566abd57fc1b91e3b9cd3a029","message":"fix","date":"2019-12-29T16:13:01Z"},{"author":"cipher1024","committer":"cipher1024","hash":"f30f6d2a49f20343ff3d4c3bb895a7c3b6f2ef3f","message":"install ccache","date":"2019-12-29T16:27:21Z"},{"author":"cipher1024","committer":"cipher1024","hash":"6344d2665a08accf8d4e06c67b7013e4d6cc10fc","message":"compiler name","date":"2019-12-29T20:06:40Z"},{"author":"cipher1024","committer":"cipher1024","hash":"542df5f132f868492c557cfeae286083c2ab76d8","message":"more","date":"2019-12-29T20:09:09Z"},{"author":"cipher1024","committer":"cipher1024","hash":"d9689a9b5b324c897cec313308923cd3119a088d","message":"no ccache","date":"2019-12-29T20:11:09Z"},{"author":"cipher1024","committer":"cipher1024","hash":"41c37f959cc66da35545880f21d732d3e5971524","message":"ci script","date":"2019-12-30T17:01:22Z"},{"author":"cipher1024","committer":"cipher1024","hash":"ef9f7279f61b5ff95e055fb115996d43559a7582","message":"typo","date":"2019-12-30T17:04:09Z"},{"author":"cipher1024","committer":"cipher1024","hash":"368847ae98bf50a2ff2b47b62e9ea9d1ab793a38","message":"defensive","date":"2019-12-30T17:07:38Z"},{"author":"cipher1024","committer":"cipher1024","hash":"f40a88e04c900d3de3b6ddeaa5747347a003315e","message":"windows vars","date":"2019-12-30T17:15:40Z"},{"author":"cipher1024","committer":"cipher1024","hash":"dec7346d0ef6d68372ea381a5423ced6aa4f8447","message":"run nix true","date":"2019-12-30T17:19:27Z"},{"author":"cipher1024","committer":"cipher1024","hash":"c79c3b96f86070b3d9cffa503c25092b26eebaf6","message":"windows no install scripts","date":"2019-12-30T17:30:18Z"},{"author":"cipher1024","committer":"cipher1024","hash":"0b75020ecae59b34f73eefd7c887603bc14be55b","message":"no nix on Windows","date":"2019-12-30T17:39:46Z"}]},{"author":"bryangingechen","number":92,"diff_summary":[{"file":".travis.yml","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2019-12-27T18:12:03Z","update_date":"2019-12-27T19:00:40Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"web-flow","hash":"87232adbde25cc1933292d098293d177cd43f502","message":"fix(build): generate emscripten zip for releases","date":"2019-12-27T18:08:28Z"}]},{"author":"gebner","number":89,"diff_summary":[{"file":"src/frontends/lean/pp.cpp","status":"A","additions":149,"deletions":30},{"file":"src/frontends/lean/pp.h","status":"A","additions":149,"deletions":30},{"file":"src/library/local_context.cpp","status":"A","additions":149,"deletions":30},{"file":"src/library/pp_options.cpp","status":"A","additions":149,"deletions":30},{"file":"src/library/pp_options.h","status":"A","additions":149,"deletions":30},{"file":"src/library/type_context.cpp","status":"A","additions":149,"deletions":30},{"file":"tests/lean/1836.lean.expected.out","status":"A","additions":149,"deletions":30},{"file":"tests/lean/add_defn_eqns.lean.expected.out","status":"A","additions":149,"deletions":30},{"file":"tests/lean/pp_generalized_field_notation.lean","status":"A","additions":149,"deletions":30},{"file":"tests/lean/pp_generalized_field_notation.lean.expected.out","status":"A","additions":149,"deletions":30},{"file":"tests/lean/pp_links.lean","status":"A","additions":149,"deletions":30},{"file":"tests/lean/pp_links.lean.expected.out","status":"A","additions":149,"deletions":30},{"file":"tests/lean/proj_notation.lean.expected.out","status":"A","additions":149,"deletions":30}],"state":"merged","open_date":"2019-12-17T10:29:17Z","update_date":"2020-01-27T23:47:27Z","discussion":[{"author":"gebner","date":"2019-12-17T13:20:17Z","comment":"I also added a `pp.generalized_field_notation` that uses field notation for all function instead of just structure projections."},{"author":"Vtec234","date":"2019-12-17T13:36:06Z","comment":"Do you think with the full knowledge of type information, we could link to the correct *instance* of a typeclass rather than the typeclass itself? E.g. the `•` in `1 • b = b` could link to the inferred instance of `has_scalar mytype` rather than `has_scalar.smul`."},{"author":"gebner","date":"2019-12-17T14:06:25Z","comment":"I would also like to see that.  In practice I'm not sure there's an always an obvious choice for the instance declaration.  E.g. in your example with `•`, the instance for `has_scalar` is `mul_action.to_has_scalar`, which is probably not what you want."},{"author":"cipher1024","date":"2019-12-18T00:49:35Z","comment":"This looks good to me. I especially like what you did to pretty print projections. Ready to merge?"},{"author":"gebner","date":"2019-12-18T09:28:47Z","comment":"Yes, I think this can be merged.  The `pp.generalized_field_notation` option is turned off by default though.  Should we switch it on by default?"},{"author":"robertylewis","date":"2020-01-10T19:37:33Z","comment":"For doc gen reasons, could I request that this PR be included in a 3.5 release before we officially move mathlib over to 3.5?"},{"author":"cipher1024","date":"2020-01-10T19:47:03Z","comment":"Certainly. Sorry I completely lost sight of this PR. We can schedule 3.5.1 in the near future to make this PR available. Let's see if you have backward compatible PRs until then."},{"author":"robertylewis","date":"2020-01-27T14:22:25Z","comment":"@cipher1024 In advance of the shift to 3.5c, could we merge this so it's part of the nightlies?"}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"6a4a62b7f03a55be0ee2a0163606e745e2dbd14e","message":"feat(frontends/lean/pp): annotate pretty-printed output with full constant names","date":"2019-12-16T20:30:39Z"},{"author":"gebner","committer":"gebner","hash":"7a94b7022b76e48bf2d9af0182932d30d99f1af8","message":"fix(library/{local,type}_context): disable violated assertions\n\nThis allows the debug build to build mathlib.","date":"2019-12-17T10:09:43Z"},{"author":"gebner","committer":"gebner","hash":"7bec5508b20376170d902478d6ffbec4ecc262be","message":"feat(frontends/lean/pp): pretty-print using generalized field notation","date":"2019-12-17T12:53:27Z"},{"author":"gebner","committer":"gebner","hash":"5fe582789fb6fbc6bb006def79e087fefee6384e","message":"fix(frontends/lean/pp): reduce parenthesis in field notation","date":"2019-12-17T13:17:57Z"},{"author":"cipher1024","committer":"web-flow","hash":"5051c9cd2fd77ba702cd3508c32847ad785cb69f","message":"Merge branch 'master' into pp_links","date":"2020-01-10T19:47:06Z"}]},{"author":"gebner","number":88,"diff_summary":[{"file":"library/init/meta/default.lean","status":"A","additions":386,"deletions":16},{"file":"library/init/meta/expr.lean","status":"A","additions":386,"deletions":16},{"file":"library/init/meta/module_info.lean","status":"A","additions":386,"deletions":16},{"file":"library/init/meta/tactic.lean","status":"A","additions":386,"deletions":16},{"file":"src/library/module.cpp","status":"A","additions":386,"deletions":16},{"file":"src/library/module.h","status":"A","additions":386,"deletions":16},{"file":"src/library/module_mgr.cpp","status":"A","additions":386,"deletions":16},{"file":"src/library/module_mgr.h","status":"A","additions":386,"deletions":16},{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":386,"deletions":16},{"file":"src/library/vm/CMakeLists.txt","status":"A","additions":386,"deletions":16},{"file":"src/library/vm/init_module.cpp","status":"A","additions":386,"deletions":16},{"file":"src/library/vm/vm.h","status":"A","additions":386,"deletions":16},{"file":"src/library/vm/vm_expr.cpp","status":"A","additions":386,"deletions":16},{"file":"src/library/vm/vm_module_info.cpp","status":"A","additions":386,"deletions":16},{"file":"src/library/vm/vm_module_info.h","status":"A","additions":386,"deletions":16},{"file":"src/shell/lean.cpp","status":"A","additions":386,"deletions":16},{"file":"src/shell/server.cpp","status":"A","additions":386,"deletions":16},{"file":"tests/lean/get_weight.lean","status":"A","additions":386,"deletions":16},{"file":"tests/lean/get_weight.lean.expected.out","status":"A","additions":386,"deletions":16},{"file":"tests/lean/module_info.lean","status":"A","additions":386,"deletions":16},{"file":"tests/lean/module_info.lean.expected.out","status":"A","additions":386,"deletions":16}],"state":"merged","open_date":"2019-12-13T12:52:25Z","update_date":"2020-01-29T17:34:29Z","discussion":[{"author":"gebner","date":"2019-12-14T21:10:25Z","comment":"The tests fail on windows because of the different path separator (`\\` vs. `/`), and because of the style check for the C++ code.  I'll fix that on Monday."}],"review_discussion":[{"author":"Vtec234","file":"src/library/module.cpp","date":"2019-12-13T15:41:57Z","comment":"Nitpick, but maybe this should be `as_decl_modification` since the return value is not just a Boolean? By the way, is it okay to ignore `inductive_modification`s here?"},{"author":"gebner","file":"src/library/module.cpp","date":"2019-12-13T17:41:05Z","comment":"I think `is_*` is the common name for such a function in Lean, e.g. [`is_bit0`, etc.](https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/library/num.h#L21):\r\n```c++\r\noptional<expr> is_bit0(expr const & e);\r\noptional<expr> is_bit1(expr const & e);\r\noptional<expr> is_neg(expr const & e);\r\n```\r\n\r\n"}],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"commits":[{"author":"gebner","committer":"gebner","hash":"d0d1a6f2989495faaf844ac543d45f7af5c002a1","message":"feat(library/init/meta/expr): expr.get_weight and expr.get_depth","date":"2019-12-04T14:03:42Z"},{"author":"gebner","committer":"gebner","hash":"0661a69babe7c5bc2b08a83307aa4e5c4499ca59","message":"feat(library/init/meta/tactic): tactic.set_env_core","date":"2019-12-13T12:19:24Z"},{"author":"gebner","committer":"gebner","hash":"103b730188fd38c2762fe24ccf08016744df8ade","message":"feat(library/vm/vm): define_vm_external","date":"2019-12-13T12:19:24Z"},{"author":"gebner","committer":"gebner","hash":"c30c2aed742708dd72a1a4fcdfeb4b42caac280c","message":"fix(library/{local,type}_context): disable violated assertions\n\nThis allows the debug build to build mathlib.","date":"2019-12-13T12:23:52Z"},{"author":"gebner","committer":"gebner","hash":"825530c6e1e55d7f81021b8c85c410f478dfd151","message":"feat(library/init/meta/module_info): import modules from meta code","date":"2019-12-16T10:15:45Z"},{"author":"cipher1024","committer":"web-flow","hash":"ac6bd213cf409c3eb498104d7538fb9193111848","message":"Merge branch 'master' into meta_import","date":"2020-01-29T17:32:59Z"}]},{"author":"gebner","number":87,"diff_summary":[{"file":"src/library/vm/init_module.cpp","status":"M","additions":12,"deletions":13},{"file":"src/library/vm/vm_float.cpp","status":"M","additions":12,"deletions":13},{"file":"src/library/vm/vm_float.h","status":"M","additions":12,"deletions":13}],"state":"merged","open_date":"2019-12-13T12:23:00Z","update_date":"2020-01-29T17:29:48Z","discussion":[{"author":"cipher1024","date":"2019-12-14T09:13:05Z","comment":"Why does the order matter?"},{"author":"gebner","date":"2019-12-14T09:29:52Z","comment":"The order only matters for consistency.  In practice there is no issue here since all the finalizers are empty.  It would make a difference for example if `finalize_vm_float` tried to remove the built-in functions added `initialize_vm_float`: the `g_vm_cbuiltins` map storing the built-in functions is freed in `finalize_vm_core`, and then `finalize_vm_float` would segfault if run in the wrong order."},{"author":"cipher1024","date":"2019-12-14T18:57:26Z","comment":"Ok. Just to confirm, this PR has no effect on the behavior. Is that correct?"},{"author":"gebner","date":"2019-12-14T21:08:52Z","comment":"Yes, there should be no effects on the runtime behavior.  I wanted to create a vm_float, and happened to notice the wrong finalization order (as well as the missing `to_obj` function in the header file)."}],"review_discussion":[],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"commits":[{"author":"gebner","committer":"gebner","hash":"27a585f733f346557a4cd61a55bb99890eb7be60","message":"fix(library/vm/vm_float): remove optional version of to_float","date":"2019-12-13T12:21:05Z"},{"author":"gebner","committer":"gebner","hash":"cb36b485401347a69755595322109a0ee73b721f","message":"fix(library/vm/init_module): fix float initialization order","date":"2019-12-13T12:21:28Z"}]},{"author":"gebner","number":86,"diff_summary":[{"file":"src/library/check.cpp","status":"A","additions":28,"deletions":8},{"file":"src/library/check.h","status":"A","additions":28,"deletions":8},{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":28,"deletions":8},{"file":"tests/lean/run/type_check_mvar.lean","status":"A","additions":28,"deletions":8}],"state":"merged","open_date":"2019-12-03T16:23:51Z","update_date":"2019-12-03T19:53:45Z","discussion":[{"author":"cipher1024","date":"2019-12-03T19:40:15Z","comment":"After looking at the code, I think I understand your PR better. By not assigning to meta-variables, terms that would require that assignment now fail to type check. Is that correct?"},{"author":"gebner","date":"2019-12-03T19:50:54Z","comment":"Yes, precisely."}],"review_discussion":[],"tags":[],"commits":[{"author":"gebner","committer":"gebner","hash":"fb080c9ab942d507d988380428568c43815060b4","message":"fix(library/check): do not assign metavariables in tactic.type_check","date":"2019-12-03T16:14:15Z"}]},{"author":"EdAyers","number":83,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":1,"deletions":0}],"state":"merged","open_date":"2019-11-15T14:29:09Z","update_date":"2019-11-15T16:32:22Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"web-flow","hash":"3cdfc0acf9660465068cbcb3725b974beb4bda9b","message":"chore(changes): add #79 to changelog","date":"2019-11-15T14:28:55Z"}]},{"author":"Vtec234","number":81,"diff_summary":[{"file":"doc/changes.md","status":"M","additions":142,"deletions":52},{"file":"library/init/meta/tactic.lean","status":"M","additions":142,"deletions":52},{"file":"src/frontends/lean/parser.cpp","status":"M","additions":142,"deletions":52},{"file":"src/library/documentation.cpp","status":"M","additions":142,"deletions":52},{"file":"src/library/documentation.h","status":"M","additions":142,"deletions":52},{"file":"src/library/module.cpp","status":"M","additions":142,"deletions":52},{"file":"src/library/module.h","status":"M","additions":142,"deletions":52},{"file":"src/library/tactic/tactic_state.cpp","status":"M","additions":142,"deletions":52},{"file":"src/shell/leandoc.cpp","status":"M","additions":142,"deletions":52},{"file":"tests/lean/doc_strings.lean","status":"M","additions":142,"deletions":52},{"file":"tests/lean/doc_strings.lean.expected.out","status":"M","additions":142,"deletions":52}],"state":"merged","open_date":"2019-11-11T23:59:55Z","update_date":"2019-11-22T23:10:16Z","discussion":[{"author":"robertylewis","date":"2019-11-12T09:33:49Z","comment":"Cool, thanks!\r\n\r\n> If a single module contains multiple top-level docstrings, they're concatenated with newlines (but I could make it a list like before if people want).\r\n\r\nI think a list would be better. No reason to throw away information about how they're separated. Even better: would it be possible to pair each docstring with its location in the file?"},{"author":"robertylewis","date":"2019-11-12T09:36:52Z","comment":"The motivation there is that when we're generating docs, it would be nice to have some kind of sectioning. Module docs in the middle of the file would be the easiest way to do this. But we need to know where to put them in the generated docs."},{"author":"Vtec234","date":"2019-11-14T17:43:50Z","comment":"It's now a list of `(source filename, [(position info, doc string)])`."},{"author":"Vtec234","date":"2019-11-14T19:32:31Z","comment":"Here is a possible log entry for this:\r\n* Changes the semantics of `tactic.module_doc_strings` to return a list of module-level documentation entries for each imported file, and not just the currently open one."},{"author":"Vtec234","date":"2019-11-16T01:26:53Z","comment":"New version adds `olean_doc_strings` and reimplements `module_doc_strings` on top of that."},{"author":"Vtec234","date":"2019-11-18T20:41:06Z","comment":"Hm, that CI failure is really quite mysterious. I have no clue why this PR would change the column number printed in an unrelated test, and only on MacOS of all things."},{"author":"bryangingechen","date":"2019-11-18T21:10:11Z","comment":"It's yet another instance of #72. It should go away if [the job](https://travis-ci.org/leanprover-community/lean/jobs/612778328) is re-run. @cipher1024 "},{"author":"robertylewis","date":"2019-11-19T12:12:03Z","comment":"I haven't pushed it yet (still needs some cleanup), but I updated my doc generation tool to use this. Worked exactly as expected. Thanks again!"}],"review_discussion":[],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"3bdf1a01c17440f9c82dd8af705adadc451beca8","message":"feat(tactic): make docstrings of imported modules accessible","date":"2019-11-16T01:15:59Z"},{"author":"Vtec234","committer":"Vtec234","hash":"1603dd40872c7c1e3b25cc546392a55cbd3cedc6","message":"feat(tactic): expose module docstrings as list","date":"2019-11-16T12:15:47Z"}]},{"author":"EdAyers","number":80,"diff_summary":[{"file":"doc/make/index.md","status":"M","additions":68,"deletions":26},{"file":"library/init/meta/match_tactic.lean","status":"M","additions":68,"deletions":26}],"state":"merged","open_date":"2019-11-11T20:16:01Z","update_date":"2019-11-15T02:52:29Z","discussion":[{"author":"bryangingechen","date":"2019-11-11T21:36:54Z","comment":"The dev tips look good to me (with the caveats that I haven't tried `ninja` nor have I managed to get `gdb` to work on macOS)."}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"5f2400a3cc2b72d2786ae7d9edcfb81f172bbdb1","message":"doc(match_tactic): fix innacurate docstring\n\nThe documentation was incorrect before because I didn't realise\nit could create more temp mvars than the input list.","date":"2019-05-20T16:32:59Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7f6b5be5c2c1044026ae113fff326621961f0cea","message":"doc(make): add some tips for developers","date":"2019-09-16T16:16:15Z"},{"author":"EdAyers","committer":"EdAyers","hash":"67c538cc87365d26517668df9d48b8c1a49aa2e1","message":"doc(make): add sentence about lean-gdb.py","date":"2019-11-11T19:59:13Z"},{"author":"EdAyers","committer":"EdAyers","hash":"3951669029eb92e63b9f1ab175bf1d557d85d8f2","message":"Merge branch 'master' into doc","date":"2019-11-11T20:07:07Z"}]},{"author":"EdAyers","number":79,"diff_summary":[{"file":"src/library/type_context.cpp","status":"A","additions":39,"deletions":1},{"file":"tests/lean/destructive_let_issue.lean","status":"A","additions":39,"deletions":1},{"file":"tests/lean/destructive_let_issue.lean.expected.out","status":"A","additions":39,"deletions":1}],"state":"merged","open_date":"2019-11-09T19:12:31Z","update_date":"2019-11-15T03:02:07Z","discussion":[{"author":"cipher1024","date":"2019-11-14T19:10:18Z","comment":"Can you add it to the change log please?"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"9399dfdeea2515d1f7ae8f20366e6a15d16c004a","message":"fix(55): Fixes #55\nby adding an elaborator synthesis step in `elaborator::visit_equation`.\n\nYet to be tested with mathlib.","date":"2019-11-03T14:35:44Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b747c076831e2fc19b6a53a4c765df4aa62b9a52","message":"fix(55): Add check to `mk_class_instance_at`.\nFixes #55\n\nThis is a bug because it is not necessarily true that\ntwo local contexts are equal when their local instances are equal.","date":"2019-11-09T19:07:39Z"}]},{"author":"Vtec234","number":78,"diff_summary":[{"file":"src/CMakeLists.txt","status":"M","additions":2,"deletions":1}],"state":"merged","open_date":"2019-11-01T12:21:16Z","update_date":"2019-11-06T18:57:36Z","discussion":[{"author":"Vtec234","date":"2019-11-06T16:31:55Z","comment":"This looks good to go @cipher1024"}],"review_discussion":[],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"3f8fecd442923ab52947535fea377e294089aa24","message":"chore(build): Fix Fedora build","date":"2019-11-01T12:18:45Z"}]},{"author":"EdAyers","number":75,"diff_summary":[{"file":".github/CONTRIBUTING.md","status":"M","additions":18,"deletions":17},{"file":".github/ISSUE_TEMPLATE.md","status":"M","additions":18,"deletions":17},{"file":"README.md","status":"M","additions":18,"deletions":17},{"file":"doc/export_format.md","status":"M","additions":18,"deletions":17},{"file":"doc/faq.md","status":"M","additions":18,"deletions":17},{"file":"doc/make/index.md","status":"M","additions":18,"deletions":17}],"state":"merged","open_date":"2019-10-30T15:29:16Z","update_date":"2019-11-09T19:17:35Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"5c259c4a4efd0e0c24d4cea0694cde801940ae35","message":"fix(73): Update github issue hyperlinks\n\n[skip ci]\nfixes #73","date":"2019-10-30T15:25:24Z"}]},{"author":"EdAyers","number":69,"diff_summary":[{"file":"library/init/meta/attribute.lean","status":"A","additions":903,"deletions":19},{"file":"library/init/meta/default.lean","status":"A","additions":903,"deletions":19},{"file":"library/init/meta/expr.lean","status":"A","additions":903,"deletions":19},{"file":"library/init/meta/local_context.lean","status":"A","additions":903,"deletions":19},{"file":"library/init/meta/type_context.lean","status":"A","additions":903,"deletions":19},{"file":"src/library/idx_metavar.cpp","status":"A","additions":903,"deletions":19},{"file":"src/library/metavar_context.cpp","status":"A","additions":903,"deletions":19},{"file":"src/library/metavar_context.h","status":"A","additions":903,"deletions":19},{"file":"src/library/tactic/CMakeLists.txt","status":"A","additions":903,"deletions":19},{"file":"src/library/tactic/fun_info_tactics.h","status":"A","additions":903,"deletions":19},{"file":"src/library/tactic/init_module.cpp","status":"A","additions":903,"deletions":19},{"file":"src/library/tactic/vm_local_context.cpp","status":"A","additions":903,"deletions":19},{"file":"src/library/tactic/vm_local_context.h","status":"A","additions":903,"deletions":19},{"file":"src/library/tactic/vm_type_context.cpp","status":"A","additions":903,"deletions":19},{"file":"src/library/tactic/vm_type_context.h","status":"A","additions":903,"deletions":19},{"file":"src/library/type_context.h","status":"A","additions":903,"deletions":19},{"file":"src/library/vm/interaction_state_imp.h","status":"A","additions":903,"deletions":19},{"file":"src/library/vm/vm_expr.cpp","status":"A","additions":903,"deletions":19},{"file":"src/library/vm/vm_format.cpp","status":"A","additions":903,"deletions":19},{"file":"src/library/vm/vm_format.h","status":"A","additions":903,"deletions":19},{"file":"tests/lean/get_free_var_range.lean","status":"A","additions":903,"deletions":19},{"file":"tests/lean/get_free_var_range.lean.expected.out","status":"A","additions":903,"deletions":19},{"file":"tests/lean/type_context.lean","status":"A","additions":903,"deletions":19},{"file":"tests/lean/type_context.lean.expected.out","status":"A","additions":903,"deletions":19}],"state":"merged","open_date":"2019-10-10T18:48:41Z","update_date":"2019-11-09T19:15:37Z","discussion":[{"author":"gebner","date":"2019-10-11T08:15:02Z","comment":"> As is the name tco, maybe call it mvar_context_monad\r\n\r\nPlease just ignore the `_old` at the end, and call it `tc`.  For most of Lean 3's life, this class was called `type_context`.  It only got renamed to `type_context_old` in the preparation for Lean 4.\r\n\r\nEDIT: or maybe don't abbreviate it at all, and call it `type_context` and `local_context`."},{"author":"EdAyers","date":"2019-10-28T10:58:23Z","comment":"Any ideas why this test would be failing on just one configuration of travis?\r\n```\r\n380/1327 Test #284: leantest_non_meta_rec_fn.lean ...............................***Failed    0.05 sec\r\n\r\n-- testing non_meta_rec_fn.lean\r\n\r\n-- using result from test_all.sh\r\n\r\n--- non_meta_rec_fn.lean.expected.out\t2019-10-28 00:12:20.000000000 +0000\r\n\r\n+++ non_meta_rec_fn.lean.produced.out\t2019-10-28 00:25:23.000000000 +0000\r\n\r\n@@ -1,4 +1,4 @@\r\n\r\n-non_meta_rec_fn.lean:3:36: error: failed to prove recursive application is decreasing, well founded relation\r\n\r\n+non_meta_rec_fn.lean:3:0: error: failed to prove recursive application is decreasing, well founded relation\r\n\r\n   @has_well_founded.r true (@has_well_founded_of_has_sizeof true (default_has_sizeof true))\r\n\r\n Possible solutions: \r\n\r\n   - Use 'using_well_founded' keyword in the end of your definition to specify tactics for synthesizing well founded relations and decreasing proofs.\r\n\r\nERROR: file non_meta_rec_fn.lean.produced.out does not match non_meta_rec_fn.lean.expected.out\r\n````"},{"author":"bryangingechen","date":"2019-10-28T14:18:47Z","comment":"I've seen this sort of thing before on the macOS builds, where the build produces `n:0` instead of `n:m`. (Here, the test expects `3:36`, but the build produced `3:0`). It would be good to track down exactly what's going wrong here, but for now I'd suggest re-running that job and seeing if it goes away."}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"2193535a2014b428ff9804af92a311f08addf613","message":"feat(expr): add delayed abstraction builtin","date":"2019-05-27T01:04:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ffb4935b27eab313838b3539f01fbbea8fdeea9d","message":"feat(expr): add `instantiate_nth_var` and `get_free_var_range`","date":"2019-05-27T01:04:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c9359ee2ec9994829da88e2ad03fae01d5db0b9f","message":"feat(tactic): introduce a monad for interacting with type_context_old.\n\nThe idea is to investigate exposing some of the constructs which Lean\nuses to make type_context_old to enable the user to create\nmore powerful tactics.\n\nSome examples can be seen in the `tests/lean/tco.lean`:\nThere is a reimplementation of `intro` and `match_pattern` using the new monad.","date":"2019-05-27T01:05:00Z"},{"author":"EdAyers","committer":"EdAyers","hash":"62f1a059e1f6e2a0a77fc219715b4c7683a17d7e","message":"fix(tco): add up to date expected out file","date":"2019-05-27T15:07:39Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4bc31d93687702ca1ebfc1573ea3924b2d6a42e5","message":"feat(tco): add builtins","date":"2019-05-27T16:06:00Z"},{"author":"EdAyers","committer":"EdAyers","hash":"dd056eba1e126561b96b37953f3db652cd56502b","message":"reimplement mk_pattern","date":"2019-05-28T16:03:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a6638c895e8cd5c985adfdea071f401cb5f000fd","message":"feat(tco): add meta constants","date":"2019-10-09T13:55:29Z"},{"author":"EdAyers","committer":"EdAyers","hash":"679fe5a9b4957957f26cec8e532d81860d3c60c9","message":"Add a test for `lc`.","date":"2019-10-09T22:00:57Z"},{"author":"EdAyers","committer":"EdAyers","hash":"e6d08236e11a838e35ce1748b84caa10769eb4bc","message":"feat(ctxt_manip): add `try`, implement `fold_mvars`","date":"2019-10-10T18:04:42Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b4a0578e7c33c541ef1f14d53be79a629543b062","message":"Merge branch 'master' into ctxt_manip","date":"2019-10-10T18:06:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a7b5a9aab4a1d0606e3994557aa7c7802e5d3d77","message":"feat(ctxt_manip): remove old tactic code","date":"2019-10-11T09:32:38Z"},{"author":"EdAyers","committer":"EdAyers","hash":"71daf7496dc4087a07db038977dd665fc060025e","message":"feat(ctxt_manip): Rename`lc` -> `local_context` and `tco` -> `type_context_old`","date":"2019-10-11T16:59:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"f5b678565991786f782cfdce8dcc1578b4cf6487","message":"feat(ctxt_manip): Tidy up","date":"2019-10-27T23:04:14Z"}]},{"author":"bryangingechen","number":68,"diff_summary":[{"file":".travis.yml","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2019-09-28T00:36:09Z","update_date":"2019-10-01T14:33:32Z","discussion":[{"author":"bryangingechen","date":"2019-09-28T05:34:12Z","comment":"This should be ready to merge."}],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"30527bed6025263f07f8d329a5eea968a3c32998","message":"test travis change","date":"2019-09-28T03:54:16Z"}]},{"author":"rwbarton","number":67,"diff_summary":[{"file":"src/library/tactic/apply_tactic.cpp","status":"A","additions":24,"deletions":3},{"file":"tests/lean/synth_instances_order.lean","status":"A","additions":24,"deletions":3},{"file":"tests/lean/synth_instances_order.lean.expected.out","status":"A","additions":24,"deletions":3}],"state":"merged","open_date":"2019-09-25T23:05:37Z","update_date":"2020-03-08T13:50:49Z","discussion":[{"author":"rwbarton","date":"2019-09-25T23:31:10Z","comment":"I suppose the responsible thing to do is to add a test case, I'll write one in a bit."},{"author":"rwbarton","date":"2019-09-27T16:29:51Z","comment":"I don't understand why Travis claims the emscripten build failed--I guess I'll try restarting it again (I already tried once)."},{"author":"bryangingechen","date":"2019-09-27T19:07:51Z","comment":"It looks like it happened with [this build too](https://travis-ci.org/leanprover-community/lean/jobs/590120979). \r\n\r\nOne difference I noticed is the `kill %1` command doesn't return any output on the broken builds [1](https://travis-ci.org/leanprover-community/lean/jobs/590058488#L2922) [2](https://travis-ci.org/leanprover-community/lean/jobs/590120979#L3007), whereas it did previously: cf. [the last working build](https://travis-ci.org/leanprover-community/lean/jobs/589621216#L3008).\r\n\r\nSo maybe the `while sleep 5m` [in `.travis.yml`](https://github.com/leanprover-community/lean/blob/master/.travis.yml#L140-L142) might be failing to terminate and thus causing the build to fail."},{"author":"bryangingechen","date":"2019-09-28T05:34:43Z","comment":"There's now a fix for the travis issue in #68."},{"author":"gebner","date":"2020-03-08T13:50:41Z","comment":"No regressions on mathlib, let's get this in."}],"review_discussion":[],"tags":[],"commits":[{"author":"rwbarton","committer":"rwbarton","hash":"2f04b0f9d6bc1d3356743eb88b2e4d2d6e0b0fc8","message":"fix(tactic/apply_tactic): solve instances in forward order\n\nThis fixes an issue with rw discussed at\nhttps://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/rewriting.20and.20type.20class.20inference/near/176608876.","date":"2019-09-26T17:07:06Z"},{"author":"gebner","committer":"web-flow","hash":"f08dfec166f1652420a9e7267f1ee4a444ea70af","message":"Merge branch 'master' into apply-forward","date":"2020-03-03T21:23:06Z"}]},{"author":"cipher1024","number":66,"diff_summary":[{"file":"library/init/algebra/group.lean","status":"A","additions":46,"deletions":17},{"file":"library/init/meta/tactic.lean","status":"A","additions":46,"deletions":17},{"file":"src/library/attribute_manager.cpp","status":"A","additions":46,"deletions":17},{"file":"src/library/attribute_manager.h","status":"A","additions":46,"deletions":17},{"file":"src/library/tactic/user_attribute.cpp","status":"A","additions":46,"deletions":17},{"file":"tests/lean/run/local_attribute.lean","status":"A","additions":46,"deletions":17}],"state":"merged","open_date":"2019-09-23T22:56:44Z","update_date":"2020-03-10T10:25:21Z","discussion":[{"author":"cipher1024","date":"2019-09-23T23:01:18Z","comment":"Implementing https://github.com/leanprover/lean/issues/1896"},{"author":"gebner","date":"2020-03-08T14:01:12Z","comment":"@cipher1024 The PR looks good to me in principle, but it still fails CI.  My suggestion was stupid, you can just remove the `operator==` declaration.  Please also move the test to the `tests/lean/run/` directory."},{"author":"gebner","date":"2020-03-09T13:03:22Z","comment":"CI still fails."},{"author":"gebner","date":"2020-03-10T10:25:16Z","comment":"The debug build times out as usual. :-/"}],"review_discussion":[{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-02-06T18:39:11Z","comment":"This is not backwards compatible, since it changes the return type."},{"author":"gebner","file":"src/library/attribute_manager.cpp","date":"2020-03-05T14:16:45Z","comment":"```suggestion\r\n    bool operator == (attr_record const & other) = 0;\r\n```\r\n\r\nThe equality operator is not used anywhere, right?"},{"author":"cipher1024","file":"library/init/meta/tactic.lean","date":"2020-03-06T03:32:44Z","comment":"Are we now ok with changing the signature?"},{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-03-06T10:43:28Z","comment":"It's ok, it will only break one line in mathlib."},{"author":"gebner","file":"library/init/meta/tactic.lean","date":"2020-03-06T10:44:54Z","comment":"The `has_attribute` function is pretty horrible to use on its own anyway, since it fails if the attribute is not present.  Everybody uses the mathlib function `has_attribute'` anyhow."},{"author":"gebner","file":"src/library/attribute_manager.cpp","date":"2020-03-06T10:46:55Z","comment":"Ah, I didn't test this suggestion.  The ` = 0` allows you to disable auto-generated functions in C++.  But the `operator==` is not auto-generated, you can just remove this line completely."},{"author":"cipher1024","file":"library/init/meta/tactic.lean","date":"2020-03-06T22:01:50Z","comment":"This might be a good time to merge `has_attribute'` with `has_attribute`. How about that?"}],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"a66ce3abf8119a701c24d2c9b914517ab1c3bb85","message":"feat(tactic/has_attribute): check if attribute is persistent","date":"2020-03-08T22:06:52Z"},{"author":"cipher1024","committer":"cipher1024","hash":"7a9ebc3e4e46405702effc0ff9336d77cd6339d4","message":"merge two functions","date":"2020-03-08T22:21:58Z"},{"author":"cipher1024","committer":"cipher1024","hash":"3bd7c85b8b99d0a076664e319395cc0b4065c470","message":"fix build","date":"2020-03-09T22:12:37Z"}]},{"author":"EdAyers","number":65,"diff_summary":[{"file":"library/data/stream.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/algebra/group.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/algebra/norm_num.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/algebra/ordered_field.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/data/int/basic.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/data/int/comp_lemmas.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/data/int/order.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/data/list/lemmas.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/data/nat/lemmas.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/data/string/ops.lean","status":"M","additions":38,"deletions":34},{"file":"library/init/meta/well_founded_tactics.lean","status":"M","additions":38,"deletions":34},{"file":"tests/lean/nested_match.lean","status":"M","additions":38,"deletions":34},{"file":"tests/lean/run/1685.lean","status":"M","additions":38,"deletions":34},{"file":"tests/lean/run/bin_tree.lean","status":"M","additions":38,"deletions":34},{"file":"tests/lean/run/conv_tac1.lean","status":"M","additions":38,"deletions":34},{"file":"tests/lean/run/term_app2.lean","status":"M","additions":38,"deletions":34}],"state":"merged","open_date":"2019-09-23T22:08:06Z","update_date":"2020-02-20T22:39:06Z","discussion":[{"author":"digama0","date":"2019-09-23T22:21:44Z","comment":"Should we start a feature branch for the next version? I think the plan is to have 3.5c not break anything, and changing simp lemmas will definitely break things (as much as I would like this PR to land because I've been aware of this problem since Leo first removed mul_comm but not add_comm from the simp set, see https://github.com/leanprover/lean/pull/1894)."},{"author":"digama0","date":"2019-09-23T22:23:04Z","comment":"This would be fixed by the open issue https://github.com/leanprover/lean/issues/1896"},{"author":"cipher1024","date":"2019-09-23T22:27:56Z","comment":"Incidentally, I've accidentally been implementing #1896 all afternoon. That should probably also go in a feature branch."}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"e83c46718ebc12d62867e4d4483f965c72dc9616","message":"fix(simp): remove add_comm from simp lemmas","date":"2019-09-23T17:20:36Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7f7cd208911b6f4e9714e1a5a1251e3fee51c7bf","message":"fix(simp): Remove `add_left_comm` from simp lemmas.","date":"2019-09-23T19:30:54Z"},{"author":"EdAyers","committer":"EdAyers","hash":"39f00c9d1fdc3dc03f45c48ba47747f525fea254","message":"fix(simp): mend tests","date":"2019-09-23T21:45:08Z"},{"author":"gebner","committer":"web-flow","hash":"329a1b3557aa5b30a80dcf847c7a8fbfd14b3e23","message":"Merge branch 'master' into fix_add_comm_simp","date":"2020-02-19T11:04:38Z"},{"author":"gebner","committer":"web-flow","hash":"054fadc5e6b7d88b3d534091e9ecea1683e6a35e","message":"Merge branch 'master' into fix_add_comm_simp","date":"2020-02-20T08:40:43Z"}]},{"author":"Vtec234","number":63,"diff_summary":[{"file":"src/CMakeLists.txt","status":"M","additions":14,"deletions":10},{"file":"src/kernel/expr_maps.h","status":"M","additions":14,"deletions":10},{"file":"src/library/arith_instance.h","status":"M","additions":14,"deletions":10},{"file":"src/util/log_tree.cpp","status":"M","additions":14,"deletions":10},{"file":"src/util/numerics/double.cpp","status":"M","additions":14,"deletions":10},{"file":"src/util/numerics/float.cpp","status":"M","additions":14,"deletions":10},{"file":"src/util/numerics/numeric_traits.cpp","status":"M","additions":14,"deletions":10},{"file":"src/util/task_builder.h","status":"M","additions":14,"deletions":10},{"file":"src/util/thread.h","status":"M","additions":14,"deletions":10}],"state":"merged","open_date":"2019-08-29T13:01:37Z","update_date":"2019-08-30T04:39:43Z","discussion":[{"author":"cipher1024","date":"2019-08-29T13:30:50Z","comment":"This looks good! Any reasons for the changes outside of `CMakelists.txt`? They look superfluous.\r\n\r\nWhat is the consequence on performance of disabling this feature? I assume it's an optimization."},{"author":"Vtec234","date":"2019-08-29T15:04:22Z","comment":"@cipher1024 I introduced the changes when searching for this bug to silence some annoying `-Wpedantic` warnings. Mostly cosmetic, but they don't hurt. The JSON update did break emscripten, so I reverted it just now.\r\n\r\nI'm not sure how to benchmark of this - I don't suppose we have something like Lean 4's [speedcenter](http://speedcenter.informatik.kit.edu/lean/)? Anyway I can conjecture that this won't have any significant impact, because the flag disables the most specific pass it can - [ifcombine](https://github.com/gcc-mirror/gcc/blob/master/gcc/tree-ssa-ifcombine.c#L51). In effect, statements like `if (a > b) { if (a > c) { ` will not be combined into one, but all the other optimizations will still be done."},{"author":"cipher1024","date":"2019-08-29T15:26:24Z","comment":"I haven't seen that tool used with Lean 3. If you feel like setting it up, that would be great. Otherwise, that explanation sounds good to me."},{"author":"Vtec234","date":"2019-08-29T17:24:53Z","comment":"Oof, I'm afraid setting that up would be outside my jurisdiction. But hopefully there will be no observable difference and anyway we can remove the flag when a fixed GCC is released."},{"author":"cipher1024","date":"2019-08-29T19:55:04Z","comment":"That's alright. Which Travis / appveyor builds test your changes?"},{"author":"Vtec234","date":"2019-08-29T20:20:29Z","comment":"The only build that uses GCC 9.1.0 is [the AppVeyor MinGW one](https://ci.appveyor.com/project/cipher1024/lean-e5aoi/builds/27050814/job/04wbejvc3su9beuc)."},{"author":"cipher1024","date":"2019-08-29T20:25:15Z","comment":"Any chance it might also fix #59?"},{"author":"Vtec234","date":"2019-08-29T20:30:21Z","comment":"It seems to have [failed for the same reason](https://ci.appveyor.com/project/cipher1024/lean-e5aoi/builds/26836597/job/a0p7ulnskt0e1arb), so yeah, probably."},{"author":"cipher1024","date":"2019-08-29T22:40:25Z","comment":"It did solve it, thanks! Can you revert the `;` changes? I'd like to limit the number of files this PR touches. I'll merge after."},{"author":"Vtec234","date":"2019-08-29T23:00:01Z","comment":"Why limit the number of files? I'm not clear on why that would be helpful."},{"author":"cipher1024","date":"2019-08-29T23:03:42Z","comment":"Because the changes create noise in the git history. Minimizing the changes makes it easier to read a commit and see what it's about."},{"author":"Vtec234","date":"2019-08-29T23:12:54Z","comment":"Ah right, that's true. I split it into two commits to make them clearer."},{"author":"cipher1024","date":"2019-08-29T23:49:13Z","comment":"Oh! I didn't think they were necessary! If we need them, that's ok to keep them in one commit. It will encapsulate the whole solution to the problem."},{"author":"Vtec234","date":"2019-08-30T11:39:32Z","comment":"@cipher1024 To be clear, the `;`s were *not* needed for this fix. They just happened to have been the easiest-to-fix out of the warnings I sifted through looking for this bug, being a syntactic change that can't affect program meaning. It should have then been two commits, but I'm personally mildly opposed to trying to keep a pristine git history, because at some point the process adds significant overhead and becomes more trouble than it's worth. So I say a \"good-enough\" history is fine - as long as every meaningful change is noted, sneaking in minutiae like these on the side is acceptable."},{"author":"cipher1024","date":"2019-08-30T17:21:52Z","comment":"Like everything else, there is a point where putting more time cleaning up the git history yields no return. The question is when does this occur. In this situation, I was under the impression that adding the `;` had no effect (as opposed to removing warnings) so it looked like pure noise to me which seems worth dismissing (a bit like an arbitrary change in spacing in an unrelated commit). \r\n\r\nSince getting rid of the warnings was part of your investigation of the bug, I think it's ok to keep them together or separate them. As you say, going on and on about that decision is not that useful."}],"review_discussion":[],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"baee1a96f4f5f129021b6793193162f2f1e0fbf8","message":"chore(style): deal with some -Wpedantic warnings","date":"2019-08-29T23:10:37Z"},{"author":"Vtec234","committer":"Vtec234","hash":"4632fc49ab054a55fd9316b12dfe50ef4a8a5d24","message":"fix(CMakeLists.txt): fix building with GCC 9.1.0","date":"2019-08-29T23:11:23Z"}]},{"author":"Vtec234","number":61,"diff_summary":[{"file":"doc/make/index.md","status":"A","additions":201,"deletions":37},{"file":"src/frontends/lean/inductive_cmds.cpp","status":"A","additions":201,"deletions":37},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":201,"deletions":37},{"file":"src/frontends/lean/parser.h","status":"A","additions":201,"deletions":37},{"file":"src/frontends/lean/scanner.h","status":"A","additions":201,"deletions":37},{"file":"src/util/flet.h","status":"A","additions":201,"deletions":37},{"file":"tests/lean/doc_string_ctr.lean","status":"A","additions":201,"deletions":37},{"file":"tests/lean/doc_string_ctr.lean.expected.out","status":"A","additions":201,"deletions":37}],"state":"merged","open_date":"2019-08-27T21:35:49Z","update_date":"2019-09-12T22:51:56Z","discussion":[{"author":"Vtec234","date":"2019-08-30T13:01:56Z","comment":"Rebased on the fixes, should be good to go."},{"author":"cipher1024","date":"2019-08-30T17:43:48Z","comment":"Can you add a test file for this feature? I think we should be ready to merge after."},{"author":"Vtec234","date":"2019-09-12T20:32:13Z","comment":"@cipher1024 could we merge this please?"},{"author":"cipher1024","date":"2019-09-12T22:52:06Z","comment":"Sorry for the delays"}],"review_discussion":[{"author":"cipher1024","file":"src/frontends/lean/inductive_cmds.cpp","date":"2019-08-30T17:14:01Z","comment":"I'm not a fan of burying a `return` deep inside the control flow. Can we at least use a `break` instead?"}],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"c87e1a9efa505d96d3c1db6f4156e1bd6a73cf13","message":"chore(docs): note quicker build target","date":"2019-08-30T11:09:33Z"},{"author":"Vtec234","committer":"Vtec234","hash":"be6720dad6295718485807534a6247f0c2a5acf6","message":"feature(parser): support docstrings on constructors","date":"2019-08-30T11:09:41Z"},{"author":"Vtec234","committer":"Vtec234","hash":"e9e02f2b385d23c4b6471cbd1704b73504e85307","message":"feature(scanner): lookahead","date":"2019-08-30T11:09:46Z"},{"author":"Vtec234","committer":"web-flow","hash":"150488eb8aa9d0011cbf2022f836e38c67c027fb","message":"fix(inductive_cmds): clearer control flow","date":"2019-08-30T17:40:28Z"},{"author":"Vtec234","committer":"Vtec234","hash":"15330864f6dc5975d7a1b1a2b1f6261ae5e79c15","message":"feat(inductive_cmd): add constructor doc string test","date":"2019-08-30T18:15:41Z"}]},{"author":"cipher1024","number":59,"diff_summary":[{"file":".travis.yml","status":"M","additions":19,"deletions":15},{"file":"src/CMakeLists.txt","status":"M","additions":19,"deletions":15},{"file":"src/kernel/expr_maps.h","status":"M","additions":19,"deletions":15},{"file":"src/library/arith_instance.h","status":"M","additions":19,"deletions":15},{"file":"src/util/log_tree.cpp","status":"M","additions":19,"deletions":15},{"file":"src/util/numerics/double.cpp","status":"M","additions":19,"deletions":15},{"file":"src/util/numerics/float.cpp","status":"M","additions":19,"deletions":15},{"file":"src/util/numerics/numeric_traits.cpp","status":"M","additions":19,"deletions":15},{"file":"src/util/task_builder.h","status":"M","additions":19,"deletions":15},{"file":"src/util/thread.h","status":"M","additions":19,"deletions":15}],"state":"merged","open_date":"2019-08-04T20:32:47Z","update_date":"2019-09-12T22:51:00Z","discussion":[{"author":"Vtec234","date":"2019-09-12T20:31:44Z","comment":"@cipher1024 I think this is good to go."}],"review_discussion":[],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"0059e29215c932a2c5f9546afc48e79de4d5d830","message":"fix(CMakeLists.txt): fix building with GCC 9.1.0","date":"2019-08-29T14:54:57Z"},{"author":"cipher1024","committer":"cipher1024","hash":"05947b12be689f96190ea0e1efe5f76bab409ca1","message":"chore(build): migrate to dist xenial","date":"2019-08-29T20:24:06Z"}]},{"author":"bryangingechen","number":56,"diff_summary":[{"file":"src/library/tactic/revert_tactic.cpp","status":"M","additions":21,"deletions":4},{"file":"tests/lean/revert_err.lean","status":"M","additions":21,"deletions":4},{"file":"tests/lean/revert_err.lean.expected.out","status":"M","additions":21,"deletions":4}],"state":"merged","open_date":"2019-07-14T06:17:51Z","update_date":"2019-07-15T17:13:50Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"59a4e89febe990b57dd86b8eaba0dc3513b7e26b","message":"fix(library/tactic/revert_tactic): disallow dupes","date":"2019-07-14T06:10:53Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"3289973a4a610973863423798b8a119d72706ae5","message":"reword messages, add test","date":"2019-07-14T14:07:53Z"},{"author":"cipher1024","committer":"web-flow","hash":"00925dca39dd36e95b0a8802305b9e551a487c2f","message":"Merge branch 'master' into revert","date":"2019-07-15T02:36:20Z"}]},{"author":"Vtec234","number":54,"diff_summary":[{"file":"src/library/documentation.cpp","status":"A","additions":25,"deletions":6},{"file":"tests/lean/doc_string_ctr.lean.expected.out","status":"A","additions":25,"deletions":6},{"file":"tests/lean/doc_string_ctr.lean","status":"A","additions":25,"deletions":6},{"file":"tests/lean/doc_strings.lean.expected.out","status":"A","additions":25,"deletions":6}],"state":"merged","open_date":"2019-07-05T20:42:31Z","update_date":"2019-11-09T19:00:04Z","discussion":[{"author":"ratmice","date":"2019-07-05T21:39:47Z","comment":"> On a final note, the documentation output format is a bit strange - it looks like Markdown with inline HTML. It seems it could be more useful if Lean could output the docs as a stupid-simple JSON file with module-declaration-docstring mappings to be consumed by a postprocessing stage. Maybe [https://github.com/ratmice/lumpy-leandoc](lumpy-leandoc) (cc @ratmice)?\r\n\r\nNeat, I agree that a stupid-simple JSON file would be easier for post-processing with lumpy-leandoc than the markdown output, One thing sticks to me out in the current output.\r\n\r\n````lean\r\n/-- foo_test is documented it's document includes `code`\r\n    Or perhaps:\r\n    ```\r\n    a long bit of code\r\n    ```\r\n-/\r\ndef foo_test := foo.b foo.a\r\n````\r\nLumpy is going to eventually want to syntax highlight the definition of foo_test using a different theme from the definition of the actual code to differentiate them I haven't tried the branch yet (Will definitely do!), but I imagine this is going to output something of the form.\r\n\r\n````\r\n<a name=\"foo_test\"></a>**Definition** foo_test\r\n```lean\r\ndef foo_test :  foo\r\n```\r\nfoo_test is documented it's documentation includes `code`.\r\n  Or perhaps:\r\n  ```lean\r\n  a longer bit of code\r\n  ```\r\n````\r\n\r\nIt would be great if this JSON kept the definition/documentation in different keys, once they get combined into a string it's difficult to differentiate between these code blocks.\r\n\r\nEdit: I should note it *is* possible to convey this information inline in the commonmark standard:\r\nanything between a space and the end of line at the beginning marker can contain some reader specified \"Info String\", some things accept CSS and the like\r\n````\r\n   ```lean definition=true\r\n       ...\r\n   ```\r\n````\r\n\r\nThe parser lumpy-leandoc depends on currently ignores this information and doesn't convey it to lumpy-leandoc in a way it can be used, That can be fixed however.\r\n"},{"author":"Vtec234","date":"2019-07-05T23:20:54Z","comment":"I pushed a version of leandoc that outputs JSON and marked this WIP so that I can clean up the code later. The output looks like so:\r\n```json\r\n{ \"module\": \"/path/to/module.lean\",\r\n\"doc\": \"4D6F64756C6520646F6320314D6F64756C6520646F632032\",\r\n\"declarations\": [\r\n\r\n\"$ALL_STDLIB_DECLARATIONS\"\r\n\r\n{\r\n\"name\": \"foo\",\r\n\"kind\": \"inductive\",\r\n\"code\": \"6060606C65616E0A696E647563746976652020666F6F203A2020547970650A6060600A2A2A436F6E7374727563746F72733A2A2A0A6060606C65616E0A666F6F2E61203A2020666F6F0A666F6F2E62203A2020666F6F20FFFFFFE2FFFFFF86FFFFFF9220666F6F0A6060600A\",\r\n\"doc\": \"466F6F20697320616E20696E6475637469766520747970652E\"\r\n},\r\n{\r\n\"name\": \"foo_test\",\r\n\"kind\": \"definition\",\r\n\"code\": \"6060606C65616E0A64656620666F6F5F74657374203A2020666F6F0A6060600A\",\r\n\"doc\": \"20666F6F5F7465737420697320646F63756D656E7465642E0A49747320646F63756D656E746174696F6E20696E636C756465732060636F6465600A616E64206D6F726520636F64653A0A6060606C65616E0A236576616C20666F6F5F74657374202D2D20310A606060\"\r\n},\r\n]\r\n},\r\n```\r\nI encoded documentation and code as hex strings to avoid having to escape quotes, but that could be fixed (I'm not sure it's really a problem though, this isn't meant for consumption by humans anyway)."},{"author":"cipher1024","date":"2019-07-06T22:28:31Z","comment":"In your build directory, see what the style check errors are in `lean/build/debug/Testing/Temporary/LastTestFailed.log`\r\n\r\nDo you have a switch to select Markdown vs JSON?"},{"author":"Vtec234","date":"2019-07-09T11:31:13Z","comment":"@cipher1024 No - in fact, on the one hand no one was relying on the Markdown output and on the other, the community has already built tools with better output (leandoc's MD is really bare-bones). With this in mind, I figured it makes more sense to remove the MD code and only output something structured to be consumed by the existing tools. What do you think?\r\n\r\nI pushed a version that disposes of the silly hex strings and uses `nlohmann::json` instead. I will put this PR on hold for now and come back to it later. The biggest issue right now is that `declarations` for each module include everything in the environment, including all imported declarations, which produces a lot of output - I would advise against testing this on large libraries like mathlib."},{"author":"cipher1024","date":"2019-07-09T17:24:20Z","comment":"I'm not sure I'd want to remove that feature completely. Can you put it in ok shape so that it can be improved if we decide to use it for one reason or another?"},{"author":"Vtec234","date":"2019-11-06T17:56:16Z","comment":"I revamped this PR and dropped support for JSON output. Instead, it simply makes sure that module documentation is included in .olean files. This allows lumpy-leandoc to extract module-level docstrings from built modules. Note that there is currently no tactic that exposes module-level docstrings (declaration docs *are* exposed) from imported modules. If a usecase for such a thing appears, it could be added, but for lumpy we just need what's implemented here.  "},{"author":"cipher1024","date":"2019-11-06T18:31:12Z","comment":"So far, are the other doc strings in the olean files? "},{"author":"ratmice","date":"2019-11-06T18:34:47Z","comment":"Yes, at least I haven't run across doc strings except module ones which are not already in olean."},{"author":"cipher1024","date":"2019-11-06T18:41:22Z","comment":"Ok. I think we could merge this. Anything else to add?"},{"author":"ratmice","date":"2019-11-06T18:52:31Z","comment":"I don't believe I have anything else to add, beyond that I agree with Vtec234's self-review that optional<name> would be preferable, and it's unfortunate that it breaks compatibility. \r\n"},{"author":"cipher1024","date":"2019-11-06T18:55:23Z","comment":"@Vtec234: can we get more information on that breakage?"},{"author":"Vtec234","date":"2019-11-06T19:10:19Z","comment":"Hm, I think that .olean files should be just fine - possibly I misinterpreted the GCC 9.2.0 miscompilation bug as being caused by this. But it *will* break `olean-rs`, and it's such a minor cosmetic thing I'd say it's not worth the bother."},{"author":"cipher1024","date":"2019-11-06T19:14:12Z","comment":"That's fair"},{"author":"digama0","date":"2019-11-07T01:40:44Z","comment":"@Vtec234 If it is possible for olean-rs to support this extension backward compatibly, please make a PR for it. I'd hate for it to inhibit progress on the format!"},{"author":"Vtec234","date":"2019-11-08T10:40:27Z","comment":"@digama0 It would definitely be possible to support this in olean-rs, but my point was more that in the end the change itself is not really that useful and would only create additional complexity. If we need to change the .olean format, let's only do it if there is a clear advantage in doing so."}],"review_discussion":[{"author":"Vtec234","file":"src/library/documentation.cpp","date":"2019-07-05T20:45:52Z","comment":"~~I tried to use `optional<name>` here, where module docs would have the field empty and declaration docs have a proper name here, but this seems to break .olean output, probably in the `doc_modification::serialize` function. So instead, an empty string is used as a workaround.~~"},{"author":"Vtec234","file":"src/shell/lean.cpp","date":"2019-07-05T20:48:36Z","comment":"As the comment says. I also tried `get_latest_env()` - doesn't work, the returned `environment` is missing the entire `documentation_ext` extension. Perhaps it's possible to retrieve an environment at this point which only contains the changes/docs relevant to the current module, so that the dependencies' docs aren't printed."}],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"af475e4ba9567ff5eff221a667bcad603ff1127c","message":"feat(olean): store module documentation in .olean files","date":"2019-11-06T17:39:24Z"}]},{"author":"Vtec234","number":50,"diff_summary":[{"file":"doc/make/index.md","status":"M","additions":82,"deletions":38},{"file":"src/frontends/lean/inductive_cmds.cpp","status":"M","additions":82,"deletions":38},{"file":"src/frontends/lean/parser.h","status":"M","additions":82,"deletions":38}],"state":"closed","open_date":"2019-06-18T19:36:40Z","update_date":"2019-08-27T21:36:04Z","discussion":[],"review_discussion":[{"author":"cipher1024","file":"doc/make/index.md","date":"2019-06-18T23:10:43Z","comment":"Can you give the example of the command line? Is it `ninja shell/bin_lean`?"},{"author":"Vtec234","file":"doc/make/index.md","date":"2019-06-19T11:41:37Z","comment":"I added explicit commands."}],"tags":[],"commits":[{"author":"Vtec234","committer":"Vtec234","hash":"0b07af4354917acbfd8c85703dc0aa00c1207a2a","message":"chore(docs): note quicker build target","date":"2019-06-19T11:40:30Z"},{"author":"Vtec234","committer":"Vtec234","hash":"1bb6a63e2b7f2a1eaab9b37b78765d2a18a8546e","message":"feature(parser): support docstrings on constructors","date":"2019-06-19T11:40:42Z"}]},{"author":"cipher1024","number":49,"diff_summary":[{"file":".appveyor.yml","status":"A","additions":1822,"deletions":235},{"file":".gitignore","status":"A","additions":1822,"deletions":235},{"file":".gitmodules","status":"A","additions":1822,"deletions":235},{"file":".travis.yml","status":"A","additions":1822,"deletions":235},{"file":"doc/library/vm.md","status":"A","additions":1822,"deletions":235},{"file":"library/init/data/int/basic.lean","status":"A","additions":1822,"deletions":235},{"file":"library/init/data/int/order.lean","status":"A","additions":1822,"deletions":235},{"file":"library/init/meta/environment.lean","status":"A","additions":1822,"deletions":235},{"file":"library/init/meta/expr.lean","status":"A","additions":1822,"deletions":235},{"file":"library/init/meta/interactive.lean","status":"A","additions":1822,"deletions":235},{"file":"library/init/meta/tactic.lean","status":"A","additions":1822,"deletions":235},{"file":"library/init/meta/vm.lean","status":"A","additions":1822,"deletions":235},{"file":"library/init/meta/well_founded_tactics.lean","status":"A","additions":1822,"deletions":235},{"file":"library/system/foreign.lean","status":"A","additions":1822,"deletions":235},{"file":"script/ccache-clang++","status":"A","additions":1822,"deletions":235},{"file":"script/ccache-g++","status":"A","additions":1822,"deletions":235},{"file":"src/CMakeLists.txt","status":"A","additions":1822,"deletions":235},{"file":"src/cmake/Modules/cpplint.py","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/calc.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/decl_cmds.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/decl_util.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/decl_util.h","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/definition_cmds.h","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/parser.h","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/pp.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/print_cmd.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/tactic_notation.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/util.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/frontends/lean/util.h","status":"A","additions":1822,"deletions":235},{"file":"src/library/io_state.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/io_state.h","status":"A","additions":1822,"deletions":235},{"file":"src/library/library_task_builder.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/module.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/module_mgr.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/CMakeLists.txt","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/init_module.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm.h","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm_environment.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm_ffi.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm_ffi.h","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm_int.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm_int.h","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm_io.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm_io.h","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm_nat.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/library/vm/vm_nat.h","status":"A","additions":1822,"deletions":235},{"file":"src/shell/server.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/util/path.cpp","status":"A","additions":1822,"deletions":235},{"file":"src/util/path.h","status":"A","additions":1822,"deletions":235},{"file":"tests/lean/add_defn_eqns.lean","status":"A","additions":1822,"deletions":235},{"file":"tests/lean/add_defn_eqns.lean.expected.out","status":"A","additions":1822,"deletions":235},{"file":"tests/lean/case_let.lean","status":"A","additions":1822,"deletions":235},{"file":"tests/lean/case_let.lean.expected.out","status":"A","additions":1822,"deletions":235},{"file":"tests/lean/ffi.lean","status":"A","additions":1822,"deletions":235},{"file":"tests/lean/ffi.lean.expected.out","status":"A","additions":1822,"deletions":235},{"file":"tests/lean/vm_dynload/Makefile","status":"A","additions":1822,"deletions":235},{"file":"tests/lean/vm_dynload/client.c","status":"A","additions":1822,"deletions":235},{"file":"tests/lean/vm_dynload/some_file.c","status":"A","additions":1822,"deletions":235},{"file":"thirdparty/dlfcn-win32","status":"A","additions":1822,"deletions":235}],"state":"open","open_date":"2019-06-03T01:59:42Z","update_date":"2022-06-09T08:34:11Z","discussion":[],"review_discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"commits":[{"author":"agentultra","committer":"agentultra","hash":"d3990fd0e22954c9bc6194cffc48e1f789a8ba0d","message":"Add src/library/vm/vm_dynload.h\n\nThis module will allow the vm to dynamically link shared objects at\nrun time so that Lean can call external code written in C/C++.\n\nFixes: leanprover-community/lean #24","date":"2019-04-28T03:17:35Z"},{"author":"agentultra","committer":"agentultra","hash":"bd7478f7bb0c94b55ba95c6407cb97c4a2e711dd","message":"Add vm_foreign_obj struct","date":"2019-05-01T02:52:01Z"},{"author":"agentultra","committer":"agentultra","hash":"b2d116f270c960b7786384ec1e74bde15cd9a66f","message":"Add load_foreign_obj\n\nFollowing some conventions established in (#20) I added some\nconstructor functions to allocate the `vm_foreign_obj` struct in the\nVM.","date":"2019-05-02T01:10:06Z"},{"author":"agentultra","committer":"agentultra","hash":"ba09d6fca55c6efa9350f083be840ea7eb578b0d","message":"Add doc/library/vm.md\n\nAs I'm learning about the VM architecture in Lean I'm adding notes to\nhelp future contributors.","date":"2019-05-02T01:58:42Z"},{"author":"cipher1024","committer":"cipher1024","hash":"3ee640007648b665010710e3279c9984b421b405","message":"add foreign objects as environment extensions","date":"2019-05-03T01:02:08Z"},{"author":"agentultra","committer":"agentultra","hash":"f4de3fb86c2676d265fdb72db804685337fef42b","message":"src/CMakeLists.txt\n\nWe add libffi to our build dependencies","date":"2019-05-03T02:56:33Z"},{"author":"agentultra","committer":"agentultra","hash":"54f164bfc4ea51835efff8c3c76d641573e008cd","message":"Add libffi to EXTRA_LIBS and includes","date":"2019-05-03T03:10:33Z"},{"author":"agentultra","committer":"agentultra","hash":"9061f8e279933b5013d9159bb42a0b6dad2ab563","message":"Modify doc/library/vm.md\n\nAdd initial documentation on the VM FFI","date":"2019-05-07T02:35:05Z"},{"author":"agentultra","committer":"agentultra","hash":"1a8fa985d8a7f97cb4769735e05c55dda248ea5d","message":"Register ffi attribute\n\nWIP\n\nWe register a declaration attribute to bind foreign functions to Lean\nconstants like so:\n\n    @[ffi `libfoo]\n    constant foo_fun : c_int -> c_int -> c_int\n\nAllowing the vm to get a handle to the foreign function from `dlsym`\nand map it with a `ffi_cif` struct from `ffi.h`. This will allow Lean\nusers to then create functions using this type to marshal Lean values\ninto the bound `ffi_cif` and make the call with `libffi` under the\nhood.","date":"2019-05-10T02:34:53Z"},{"author":"cipher1024","committer":"agentultra","hash":"872c148d4c6af3f89f2d895a9583ab5c121ce7bc","message":"fix(tactic/case): `case` fails when used with `let` #32","date":"2019-05-10T02:44:45Z"},{"author":"cipher1024","committer":"agentultra","hash":"1a1a5756a7f03dcdb956e5b5d2760ad5499e2721","message":"chore(build): avoid redundant builds [skip ci]","date":"2019-05-10T02:44:45Z"},{"author":"cipher1024","committer":"agentultra","hash":"dad53e7e80d778e9ab32f121a119ee5ffa2a5ff4","message":"fix(tests): add `expected` file for `case_let.lean`","date":"2019-05-10T02:44:45Z"},{"author":"cipher1024","committer":"agentultra","hash":"fa6a121eb8b7eae72331468efef7942ee328d271","message":"fix(build): disable building other branches than master","date":"2019-05-10T02:44:45Z"},{"author":"cipher1024","committer":"agentultra","hash":"5c76c03a1640fe20b93b35e73f3ca6669cc7d71b","message":"chore(build): restrict Travis tasks when building nightlies [skip ci]","date":"2019-05-10T02:44:45Z"},{"author":"cipher1024","committer":"agentultra","hash":"40912b44152c416db628dd0f32bc77d939503531","message":"feat(tactic/add_def_eqns): add a Lean function to access the equation compiler (#26)","date":"2019-05-10T02:44:45Z"},{"author":"cipher1024","committer":"agentultra","hash":"7acbd729f01a8b623f5306147d93d524a12472c1","message":"chore(build): fix ccache+clang++ on travis","date":"2019-05-10T02:44:45Z"},{"author":"cipher1024","committer":"cipher1024","hash":"abd06a912899c878b768d62da97812409043d0a4","message":"play around with libffi","date":"2019-05-10T20:20:08Z"},{"author":"cipher1024","committer":"cipher1024","hash":"609afe895c7aaa193662622b13ec221a8c955251","message":"include ffi.h","date":"2019-05-10T20:20:08Z"},{"author":"cipher1024","committer":"cipher1024","hash":"353d4ab65a78dcee26b822cd6c75591cbc7eb767","message":"WIP","date":"2019-05-12T01:59:54Z"},{"author":"cipher1024","committer":"cipher1024","hash":"490adbb61721ddf0d945f9e9a45b47657a96ffd4","message":"WIP","date":"2019-05-16T19:17:48Z"},{"author":"cipher1024","committer":"cipher1024","hash":"e3d3d59699c2a85ddf76f15dfabc47b278daedbd","message":"fix lint issues","date":"2019-05-16T19:18:18Z"},{"author":"cipher1024","committer":"cipher1024","hash":"71a550f7d3a55a5d4722d7bacdd92e8636186962","message":"add basic C data types","date":"2019-05-16T19:18:18Z"},{"author":"cipher1024","committer":"cipher1024","hash":"9131709818afa8882f5a7d75a90f8cea2ba7821e","message":"fix merging issues","date":"2019-05-16T20:59:28Z"},{"author":"agentultra","committer":"agentultra","hash":"c2205e4dfa7b579039d5ac558f650a6040a8566d","message":"Add conditional include paths for libffi on linux","date":"2019-05-17T02:23:00Z"},{"author":"agentultra","committer":"agentultra","hash":"88ef7cc93b83f45a6ce0df92b2cbe01e3fd91065","message":"Update tests/lean/ffi.lean\n\nFix relative paths to work on linux","date":"2019-05-17T02:23:23Z"},{"author":"cipher1024","committer":"cipher1024","hash":"35ebbcdc0bc7a5dac50c486c846808eb4be61d41","message":"fix merging issues","date":"2019-05-17T20:15:17Z"},{"author":"cipher1024","committer":"cipher1024","hash":"ffb85f6e92329b6f13b3011245e7e2e4808a9899","message":"some fixes","date":"2019-05-18T01:13:05Z"},{"author":"agentultra","committer":"agentultra","hash":"f743e1b31e2f3e3f9d9f38c2358fac1434138111","message":"Modify src/library/vm/vm_environment.cpp\n\nNormalize the file path handed to `load_foreign_object`","date":"2019-05-18T01:58:13Z"},{"author":"agentultra","committer":"agentultra","hash":"b1600d060dff1a40ce6277f9270ea560346201de","message":"Merge branch 'feature/vm-dynload' of github.com:leanprover-community/lean into upstream/vm-dynload","date":"2019-05-18T02:04:19Z"},{"author":"cipher1024","committer":"cipher1024","hash":"14df4156193a59e93a5d817f8f36076b1920506a","message":"remove absolute path from ffi test","date":"2019-05-18T20:11:20Z"},{"author":"cipher1024","committer":"cipher1024","hash":"03a3e523626f705ed0c876a0063dd7b2aecc4c56","message":"install libffi on windows [skip travis]","date":"2019-05-19T23:20:04Z"},{"author":"cipher1024","committer":"cipher1024","hash":"45de7d136f3eea4597e2297765ea9a4de816d79d","message":"get libffi from ftp [skip travis]","date":"2019-05-19T23:50:46Z"},{"author":"cipher1024","committer":"cipher1024","hash":"55307ac7893e8583e98ec0589649aafcf3365ad0","message":"with nuget [skip travis]","date":"2019-05-20T16:49:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"a40aeb9ed00fe3013ca8284e4c8772e3dede81c4","message":"use vcpkg [skip travis]","date":"2019-05-21T16:41:36Z"},{"author":"cipher1024","committer":"cipher1024","hash":"d2cc6e00b62fb9cd8642b6befd9746e1ecd0675a","message":"address warnings","date":"2019-05-21T16:54:25Z"},{"author":"cipher1024","committer":"cipher1024","hash":"718d132f99fa0545d6f033fda5642c6c78c70980","message":"look for `dlfcn.h` in cmake files [skip travis]","date":"2019-05-23T03:55:00Z"},{"author":"cipher1024","committer":"cipher1024","hash":"c409a4fd7676267cec377b452406af20497ab3bb","message":"add dlfcn-win32 as a submodule [skip travis]","date":"2019-05-23T23:34:40Z"}]},{"author":"cipher1024","number":48,"diff_summary":[{"file":"library/init/category/option.lean","status":"A","additions":961,"deletions":91},{"file":"library/init/meta/float.lean","status":"A","additions":961,"deletions":91},{"file":"library/init/meta/vm.lean","status":"A","additions":961,"deletions":91},{"file":"src/frontends/lean/builtin_cmds.cpp","status":"A","additions":961,"deletions":91},{"file":"src/frontends/lean/decl_attributes.cpp","status":"A","additions":961,"deletions":91},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":961,"deletions":91},{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":961,"deletions":91},{"file":"src/frontends/lean/notation_cmd.cpp","status":"A","additions":961,"deletions":91},{"file":"src/frontends/lean/structure_cmd.cpp","status":"A","additions":961,"deletions":91},{"file":"src/frontends/lean/util.cpp","status":"A","additions":961,"deletions":91},{"file":"src/frontends/lean/util.h","status":"A","additions":961,"deletions":91},{"file":"src/kernel/inductive/inductive.cpp","status":"A","additions":961,"deletions":91},{"file":"src/kernel/inductive/inductive.h","status":"A","additions":961,"deletions":91},{"file":"src/library/compiler/inliner.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/compiler/inliner.h","status":"A","additions":961,"deletions":91},{"file":"src/library/compiler/preprocess.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/compiler/preprocess.h","status":"A","additions":961,"deletions":91},{"file":"src/library/compiler/vm_compiler.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/compiler/vm_compiler.h","status":"A","additions":961,"deletions":91},{"file":"src/library/equations_compiler/unbounded_rec.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/equations_compiler/util.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/equations_compiler/util.h","status":"A","additions":961,"deletions":91},{"file":"src/library/tactic/eval.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/tactic/vm_monitor.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/type_context.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/type_context.h","status":"A","additions":961,"deletions":91},{"file":"src/library/util.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/util.h","status":"A","additions":961,"deletions":91},{"file":"src/library/vm/CMakeLists.txt","status":"A","additions":961,"deletions":91},{"file":"src/library/vm/init_module.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/vm/interaction_state_imp.h","status":"A","additions":961,"deletions":91},{"file":"src/library/vm/vm.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/vm/vm.h","status":"A","additions":961,"deletions":91},{"file":"src/library/vm/vm_override.cpp","status":"A","additions":961,"deletions":91},{"file":"src/library/vm/vm_override.h","status":"A","additions":961,"deletions":91},{"file":"src/util/name.cpp","status":"A","additions":961,"deletions":91},{"file":"src/util/name.h","status":"A","additions":961,"deletions":91},{"file":"tests/lean/vm_override.lean","status":"A","additions":961,"deletions":91},{"file":"tests/lean/vm_override.lean.expected.out","status":"A","additions":961,"deletions":91}],"state":"merged","open_date":"2019-06-01T20:07:05Z","update_date":"2020-04-07T16:04:03Z","discussion":[{"author":"cipher1024","date":"2020-04-04T19:16:16Z","comment":"Thanks for the comments!\r\n\r\n> The main thing I'm missing here is some motivation: what do you want to use this for? Do you have an application? Is this \"just\" to experiment with the VM?\r\n\r\nNo it's because I wrote (with @avigad and @digama0) a paper on defining inductive and coinductive data types in dependent type theory (paper [here](https://www.andrew.cmu.edu/user/avigad/Papers/qpf.pdf), slides [here](https://itp19.cecs.pdx.edu/wp-content/uploads/2019/09/hudon_slides.pdf)) and the definition for coinductive data types gives inefficient programs and data structures so I want to generate more efficient representations using `vm_override`.\r\n\r\n> Am I right that you can use `attribute [vm_override foo] bar` to back-patch definitions? \r\n\r\nI don't think I'd like to keep back-patching as an option but I haven't come up with a way of blocking it. \r\n\r\n> It should be noted somewhere that this doesn't work for inductives. \r\n\r\nDo  you mean that if you try it the implementation is going to be inconsistent?"},{"author":"gebner","date":"2020-04-04T21:18:14Z","comment":"> > It should be noted somewhere that this doesn't work for inductives.\r\n> \r\n> Do you mean that if you try it the implementation is going to be inconsistent?\r\n\r\nBack-patching inductives doesn't work for the same reason as the inlined calls.  The calls to the recursor and constructors are directly compiled to bytecode.  I don't think there is any reasonable way of making back-patching work here.\r\n\r\nThe result is that already compiled code will completely ignore the overrides.\r\n\r\nI think there just needs to be a big warning that you should not use `vm_override` for back-patching (unless you *really* know what you're doing)."},{"author":"cipher1024","date":"2020-04-04T21:37:37Z","comment":"Even if you know what you're doing, back-patching would make for some fragile code that would be easy to break. I don't know why we would need to allow it."}],"review_discussion":[{"author":"gebner","file":"src/kernel/inductive/inductive.cpp","date":"2020-04-04T18:14:51Z","comment":"```suggestion\r\nname get_cases_on_name(name const & n) {\r\n```"},{"author":"gebner","file":"src/library/compiler/inliner.cpp","date":"2020-04-04T18:17:39Z","comment":"This is just wrong.  It will have exponential runtime on dag-like terms."},{"author":"gebner","file":"src/library/compiler/inliner.cpp","date":"2020-04-04T18:18:05Z","comment":"Why can't you apply the overrides here?"},{"author":"gebner","file":"src/library/tactic/vm_monitor.cpp","date":"2020-04-04T18:18:25Z","comment":"```suggestion\r\nvm_obj vm_decl_override_idx(vm_obj const & d) {\r\n```"},{"author":"gebner","file":"src/library/util.h","date":"2020-04-04T18:21:16Z","comment":"```suggestion\r\n/** \\brief Is `e` of the form `Π ..., Sort _`? */\r\n```\r\n\r\nIn general, this seems like the wrong thing to check.  You'd typically want to do whnf as well."},{"author":"gebner","file":"src/library/type_context.h","date":"2020-04-04T18:22:51Z","comment":"The other flags on `type_context` are scoped and set using `flet`.  But I'm ok with this since `type_context` is EOL anyhow, and if you'd do it properly you'd also need to handle caching correctly which is another can of worms."},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-04-04T18:23:59Z","comment":"```suggestion\r\n        if (!decl_override) { return; }\r\n```\r\n\r\nI thought the style check would complain about this."},{"author":"gebner","file":"src/library/vm/vm.h","date":"2020-04-04T18:26:30Z","comment":"```suggestion\r\nenvironment add_override(environment const & env, name const & n, name const & n_override);\r\n```\r\nI think it would be clearer (and a simplification of the API) if you'd only pass a single name for inductives types which is both the name of the replacement type as well as the namespace (which is also the typical case in the examples)."},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-04-04T18:31:00Z","comment":"The docstring is at the wrong place here."},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-04-04T18:34:08Z","comment":"Since you only patch `InvokeGlobal`, this means it is not possible to override meta constants that have an implementation in C++ code, right?"},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-04-04T18:50:03Z","comment":"Given how unsafe the whole VM overriding thing is anyhow, I'd also be ok without the checks here."},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-04-04T19:01:20Z","comment":"```suggestion\r\n    if (!get_vm_override_enabled(opts))\r\n```\r\nAnd pass the `m_options` field from `vm_state` as an argument."},{"author":"gebner","file":"src/library/compiler/inliner.cpp","date":"2020-04-04T19:03:49Z","comment":"Since overrides are already applied in inlining, this means that disabling the `vm.override` option doesn't have effect on already compiled definitions that are not inlined.\r\n\r\nI'm happy with this, but this should be mentioned somewhere."},{"author":"cipher1024","file":"src/library/vm/vm.cpp","date":"2020-04-04T19:18:23Z","comment":"Because I want to make it a central part of a data type package, I'd like to know when I'm messing up."},{"author":"cipher1024","file":"src/library/compiler/inliner.cpp","date":"2020-04-04T19:23:57Z","comment":"How would you rewrite it?"},{"author":"cipher1024","file":"src/library/compiler/inliner.cpp","date":"2020-04-04T19:26:29Z","comment":"Actually, it has an effect because the vm uses `get_vm_decl` to resolve non-inlined calls and `get_vm_decl` takes overrides into account."},{"author":"cipher1024","file":"src/library/compiler/inliner.cpp","date":"2020-04-04T19:27:10Z","comment":"Why here?"},{"author":"gebner","file":"src/library/compiler/inliner.cpp","date":"2020-04-04T21:01:00Z","comment":"Because then you don't need to traverse the term first (with potentially exponential runtime).  See my comment above. ^^"},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-04-04T21:01:24Z","comment":"Ok, makes sense."},{"author":"gebner","file":"src/library/compiler/inliner.cpp","date":"2020-04-04T21:13:37Z","comment":"Yes, non-inlined calls take the `vm.override` option into account.  Note: many calls are inlined.  For example all calls to function defined using the equation compiler are inlined:\r\n```lean\r\nset_option trace.compiler.optimize_bytecode true\r\n-- list.length is never called\r\n#eval [1,2,3].length\r\n```\r\n\r\nAgain, this shouldn't be an issue if you want to use it for the qpf implementation but it should be documented.  And it makes me wonder if the `vm.override` option is actually useful in practice."},{"author":"cipher1024","file":"src/library/vm/vm.cpp","date":"2020-04-05T02:58:10Z","comment":"I don't remember making this change. It might have found its way in by mistake. Do you see a point in keeping it?"},{"author":"cipher1024","file":"src/library/compiler/inliner.cpp","date":"2020-04-05T02:58:49Z","comment":"I made a change, please let me know what you think."},{"author":"cipher1024","file":"src/library/compiler/inliner.cpp","date":"2020-04-05T04:18:17Z","comment":"To be honest, I'm not sold on that flag either but @digama0 seemed to think it was important. It is hard to implement in a consistent way."},{"author":"gebner","file":"src/library/vm/vm.cpp","date":"2020-04-05T10:05:42Z","comment":"It would only matter if the override was a different kind of function, i.e. if you override a definition with a meta constant."},{"author":"gebner","file":"src/library/compiler/inliner.cpp","date":"2020-04-05T10:14:35Z","comment":"It would be a good idea to factor this out into a separate function, maybe like this:\r\n```c++\r\n optional<name> get_vm_override_name_trans(environment const & env, name const & decl_name);\r\n```"},{"author":"gebner","file":"src/library/compiler/inliner.cpp","date":"2020-04-05T10:19:41Z","comment":"I think a more idiomatic way to write this function is:\r\n```c++\r\n  optional<expr> apply_overrides(expr const & e) {\r\n    buffer<expr> args;\r\n    expr const & fn = get_app_args(e, args);\r\n    if (is_constant(fn)) {\r\n      if (auto override_name = get_vm_override_name_trans(m_env, n, m_enable_overrides)) {\r\n        return optional<expr>(mk_app(mk_constant(override_name, const_levels(fn)), args));\r\n      }\r\n    }\r\n    return optional<expr>();\r\n  }\r\n```"},{"author":"gebner","file":"src/library/compiler/inliner.cpp","date":"2020-04-05T10:19:50Z","comment":"Yes, that's better."},{"author":"cipher1024","file":"src/library/vm/vm.cpp","date":"2020-04-05T17:09:21Z","comment":"I don't think that change would be appropriate because the information about cfun, external, etc, is stored in the `vm_decl` and `get_vm_decl` will return the `vm_decl` of the override so the right invocation strategy should be invoked."},{"author":"cipher1024","file":"src/library/compiler/inliner.cpp","date":"2020-04-05T18:02:07Z","comment":"Good point. I have already this kind of transitivity in `get_vm_decl` so I'll just delegate it to that group of functions"}],"tags":[],"commits":[{"author":"EdAyers","committer":"cipher1024","hash":"6fcfe65e4a8dfcc78cc0e685b99449ec866fd624","message":"Introduce VM_override","date":"2020-04-01T02:06:05Z"},{"author":"cipher1024","committer":"cipher1024","hash":"a0e8e122618ca8d76829ae6ca21cac6adf0c81fe","message":"fix tests","date":"2020-04-01T19:55:43Z"},{"author":"EdAyers","committer":"cipher1024","hash":"3a99f559cf86715824ec689973ca6316145e2155","message":"feat(vm_override): overrides are found at compile time","date":"2020-04-01T20:15:29Z"},{"author":"cipher1024","committer":"cipher1024","hash":"6c800e931bf9d22765f6aa3cdb8faa1c975d59a9","message":"merge with master","date":"2020-04-01T20:17:02Z"},{"author":"cipher1024","committer":"cipher1024","hash":"aaa2f8ebd516963afe2b92c9415e72582b4e6e4c","message":"expand overrides during inlining phase","date":"2020-04-01T23:34:38Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6b604e974f12c2731f8e7d47dfc4b7be68e746da","message":"feat(vm_override): docs, tidy test","date":"2020-04-02T15:19:09Z"},{"author":"cipher1024","committer":"cipher1024","hash":"a56e193291408e887b5c553391babd446c5d6742","message":"disable overrides in inliner when flag is turned off","date":"2020-04-02T17:03:43Z"},{"author":"cipher1024","committer":"cipher1024","hash":"2f51ddff1ad66964426abcffbe2be6ec8ee8e341","message":"fix `vm_override.enable` flag","date":"2020-04-03T18:54:12Z"},{"author":"cipher1024","committer":"cipher1024","hash":"a70225871aa4df11dfe8cc356ec282e057aecd30","message":"fix style","date":"2020-04-03T20:03:16Z"},{"author":"cipher1024","committer":"cipher1024","hash":"797f2ce203971a51a51cf7373d3e0e18c43833fb","message":"fix test","date":"2020-04-03T23:03:00Z"},{"author":"cipher1024","committer":"cipher1024","hash":"94d938741dcf7fce07e89bc8f95a71ad96528b21","message":"apply reviewer suggestions","date":"2020-04-05T02:02:57Z"},{"author":"cipher1024","committer":"cipher1024","hash":"4520f085109f96095c430ba3d86667eff14ea70f","message":"avoid redundant traversal","date":"2020-04-05T02:54:33Z"},{"author":"cipher1024","committer":"cipher1024","hash":"8b013343769b5b6fedd648062bf78a1b41d9a1c0","message":"move comment","date":"2020-04-05T03:25:48Z"},{"author":"cipher1024","committer":"cipher1024","hash":"39e0e3b4907e3a087fb3db7a6c34b98a8bbc4e01","message":"roll back change","date":"2020-04-05T04:32:20Z"},{"author":"cipher1024","committer":"cipher1024","hash":"1fc0170cb982c05f1ae02e3f426e40deae759b1f","message":"simplify inliner / overrider","date":"2020-04-05T18:02:27Z"}]},{"author":"agentultra","number":47,"diff_summary":[{"file":"src/frontends/lean/decl_attributes.cpp","status":"M","additions":154,"deletions":21},{"file":"src/frontends/lean/structure_cmd.cpp","status":"M","additions":154,"deletions":21},{"file":"src/frontends/lean/structure_cmd.h","status":"M","additions":154,"deletions":21},{"file":"src/library/vm/vm.cpp","status":"M","additions":154,"deletions":21},{"file":"src/library/vm/vm.h","status":"M","additions":154,"deletions":21},{"file":"src/library/vm/vm_ffi.cpp","status":"M","additions":154,"deletions":21},{"file":"src/library/vm/vm_ffi.h","status":"M","additions":154,"deletions":21},{"file":"tests/lean/ffi.lean","status":"M","additions":154,"deletions":21},{"file":"tests/lean/vm_dynload/some_file.c","status":"M","additions":154,"deletions":21}],"state":"open","open_date":"2019-06-01T19:36:22Z","update_date":"2020-04-03T10:24:29Z","discussion":[],"review_discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"commits":[{"author":"agentultra","committer":"agentultra","hash":"cc8c11976899911a2e2ec258a5bfb1dd6d28a300","message":"Add ffi test case for structs","date":"2019-05-26T01:38:59Z"},{"author":"agentultra","committer":"agentultra","hash":"04aac9830d13c393b10f4705606236c2c829f9de","message":"Modify src/library/vm/vm_ffi.cpp\n\nRename a poorly named variable.","date":"2019-05-26T02:14:06Z"},{"author":"agentultra","committer":"agentultra","hash":"b376cc236ba2a7ecb816981a4f56be2bf062b785","message":"Add vm_ffi_attribute_struct\n\nThe idea here is that when we register the `ffi` attribute we'll\ncase match on the expresssion: if it's a function definition use the\nfunction attribute, if it's a structure then use this one.","date":"2019-05-26T21:52:15Z"},{"author":"agentultra","committer":"agentultra","hash":"1da2dd653a73838f22a6da39b9d7d74b2a39dfa2","message":"Remove parse method from ffi_attribute_struct\n\nWe should be able to get the Lean struct definition from the\nenvironment without parsing the attribute field.","date":"2019-06-01T17:54:52Z"},{"author":"agentultra","committer":"agentultra","hash":"a197b58c3dbda830d49ac8c6776edbc7a4dd3d00","message":"Get struct fields from environment\n\nWIP","date":"2019-06-01T19:29:07Z"},{"author":"agentultra","committer":"agentultra","hash":"2f9b90db4c9265b5434c3b2ee428b8b4effa06cf","message":"Remove vm_ffi_attribute_struct\n\nAlso start pulling in the struct definition from the vm","date":"2019-06-01T20:06:22Z"},{"author":"agentultra","committer":"agentultra","hash":"136867ea514381df416fea64917e0498dedbe9b6","message":"Add missing include to vm_ffi.cpp","date":"2019-06-01T20:12:23Z"},{"author":"cipher1024","committer":"cipher1024","hash":"0a637001d0fa441d7a4be0f15bef114809dfe116","message":"add vm foreign values [skip ci]","date":"2019-06-03T01:34:15Z"},{"author":"cipher1024","committer":"cipher1024","hash":"c0a447854204a7338b43d877db1c554614a467c3","message":"make different kinds of call for ffi structures [skip ci]","date":"2019-06-03T02:38:54Z"},{"author":"agentultra","committer":"agentultra","hash":"ad33c2b189652b4e006a0f509cca22fd1c869c83","message":"Modify src/library/vm/vm.cpp [skip ci]\n\nAdded add_foreign_struct to create an ffi_type definition to tell\nlibffi about a user struct type","date":"2019-06-19T01:36:24Z"},{"author":"cipher1024","committer":"cipher1024","hash":"87a9e0b2357f294e3b04ecd3a7b74dfd023ec1d8","message":"add struct signature to `vm_decls` [skip ci]","date":"2019-07-09T01:42:21Z"}]},{"author":"EdAyers","number":46,"diff_summary":[{"file":"library/init/meta/level.lean","status":"A","additions":16,"deletions":2},{"file":"src/library/vm/vm_level.cpp","status":"A","additions":16,"deletions":2},{"file":"tests/lean/level_instantiate.lean","status":"A","additions":16,"deletions":2},{"file":"tests/lean/level_instantiate.lean.expected.out","status":"A","additions":16,"deletions":2}],"state":"merged","open_date":"2019-05-28T16:52:20Z","update_date":"2019-06-23T20:35:15Z","discussion":[{"author":"khoek","date":"2019-05-30T13:49:51Z","comment":"Perhaps a test?"}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"020b5b14739b699f0eb544fba662b1c68de7b9e8","message":"fix(level): give level.instantiate correct type","date":"2019-06-03T08:49:54Z"}]},{"author":"EdAyers","number":45,"diff_summary":[{"file":"doc/make/index.md","status":"M","additions":59,"deletions":19},{"file":"library/init/meta/match_tactic.lean","status":"M","additions":59,"deletions":19}],"state":"closed","open_date":"2019-05-20T16:35:45Z","update_date":"2019-11-11T20:12:15Z","discussion":[{"author":"cipher1024","date":"2019-07-12T22:39:22Z","comment":"@EdAyers Are we happy with this PR?"},{"author":"EdAyers","date":"2019-11-11T20:12:15Z","comment":"Closing as it is has become desynchronised from my fork in a strange way. Will reopen."}],"review_discussion":[{"author":"cipher1024","file":"library/init/meta/match_tactic.lean","date":"2019-05-20T17:07:52Z","comment":"because temporary meta variables are not an accessible concept in the tactic language, I'm hesitant to mention them in the documentation."},{"author":"cipher1024","file":"library/init/meta/match_tactic.lean","date":"2019-05-20T17:08:16Z","comment":"Could it be that this should be a design note?"},{"author":"EdAyers","file":"library/init/meta/match_tactic.lean","date":"2019-05-21T16:00:54Z","comment":"Temporary metas aren't accessible in the tactic language but they are accessible on `pattern`. The fields of `pattern` make no sense if you can't talk about temporary metavariables. `match_tactic` is one of the few places in lean that lets you create temporary metavaribles."},{"author":"cipher1024","file":"library/init/meta/match_tactic.lean","date":"2019-05-21T16:19:45Z","comment":"Does it mixes temporary and non-temporary meta vars? If not, it might be simpler to document this interface by saying that `match_tactic` treats meta vars differently from everywhere else."},{"author":"EdAyers","file":"library/init/meta/match_tactic.lean","date":"2019-05-23T15:33:03Z","comment":"It does not mix regular and temp metas. I  think it is more confusing if we pretend that tmp metas don't exist."},{"author":"EdAyers","file":"library/init/meta/match_tactic.lean","date":"2019-05-24T10:50:05Z","comment":"I am happy to add some extra docs explaining what temporary metas are."},{"author":"bryangingechen","file":"doc/make/index.md","date":"2019-07-14T05:56:39Z","comment":"Do you mean `make bin_lean` here? (`make shell/lean` doesn't work for me on macOS)"},{"author":"bryangingechen","file":"doc/make/index.md","date":"2019-07-14T06:07:37Z","comment":"Hmm... maybe the `standard_lib` target should be mentioned here instead actually, since we haven't turned off the olean version checking (yet?)."},{"author":"Vtec234","file":"doc/make/index.md","date":"2019-07-14T13:26:32Z","comment":"I think it's either `make bin_lean` or `ninja bin_lean`."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"5f2400a3cc2b72d2786ae7d9edcfb81f172bbdb1","message":"doc(match_tactic): fix innacurate docstring\n\nThe documentation was incorrect before because I didn't realise\nit could create more temp mvars than the input list.","date":"2019-05-20T16:32:59Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5bf7fcec930408b4b9bc7109a3f0e5d4339df52e","message":"doc(make): add some tips for developers\n\n[skip ci]","date":"2019-05-26T18:05:15Z"}]},{"author":"agentultra","number":44,"diff_summary":[{"file":"src/library/vm/vm_environment.cpp","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2019-05-18T02:20:36Z","update_date":"2019-05-23T01:27:26Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"agentultra","committer":"agentultra","hash":"9149c8f06db956f0a277670af32c8aa6adb1646f","message":"Modify src/library/vm/vm_environment.cpp\n\nChange `load_foreign_object` to use `lrealpath` to ensure we pass a\ncanonical path to `dlopen`.","date":"2019-05-18T02:52:26Z"}]},{"author":"cipher1024","number":43,"diff_summary":[{"file":"src/library/CMakeLists.txt","status":"A","additions":210,"deletions":38},{"file":"src/library/init_module.cpp","status":"A","additions":210,"deletions":38},{"file":"src/library/io_env.cpp","status":"A","additions":210,"deletions":38},{"file":"src/library/io_env.h","status":"A","additions":210,"deletions":38},{"file":"src/library/tactic/tactic_state.cpp","status":"A","additions":210,"deletions":38},{"file":"src/library/vm/vm_io.cpp","status":"A","additions":210,"deletions":38},{"file":"src/library/vm/vm_io.h","status":"A","additions":210,"deletions":38},{"file":"src/util/path.cpp","status":"A","additions":210,"deletions":38},{"file":"src/util/path.h","status":"A","additions":210,"deletions":38},{"file":"tests/lean/set_cwd.lean","status":"A","additions":210,"deletions":38},{"file":"tests/lean/set_cwd.lean.expected.out","status":"A","additions":210,"deletions":38}],"state":"open","open_date":"2019-05-17T20:08:05Z","update_date":"2022-06-09T08:34:11Z","discussion":[],"review_discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"2a120553de35b11104329b7b9933ed127f8d25a1","message":"WIP: cwd in environment objects","date":"2019-05-17T20:06:41Z"},{"author":"cipher1024","committer":"cipher1024","hash":"d58b050b00d87d49ee87b6c21dd23b1f14461ad0","message":"fix absolute paths to non-existant files","date":"2019-05-18T20:53:21Z"},{"author":"cipher1024","committer":"cipher1024","hash":"ae55905cd82dce1306ee7b911066460be4d7cb3d","message":"fix OS-dependent path separators","date":"2019-05-19T01:13:34Z"},{"author":"cipher1024","committer":"cipher1024","hash":"9dafd212a9f5387728c85cafb6836483fe767f97","message":"use unix path format in `io` primitives","date":"2019-05-19T06:43:07Z"}]},{"author":"agentultra","number":42,"diff_summary":[{"file":"library/system/foreign.lean","status":"A","additions":197,"deletions":75},{"file":"src/library/tactic/vm_monitor.cpp","status":"A","additions":197,"deletions":75},{"file":"src/library/vm/vm.cpp","status":"A","additions":197,"deletions":75},{"file":"src/library/vm/vm.h","status":"A","additions":197,"deletions":75},{"file":"src/library/vm/vm_environment.cpp","status":"A","additions":197,"deletions":75},{"file":"src/library/vm/vm_ffi.cpp","status":"A","additions":197,"deletions":75},{"file":"tests/lean/ffi.lean","status":"A","additions":197,"deletions":75},{"file":"tests/lean/vm_dynload/Makefile","status":"A","additions":197,"deletions":75},{"file":"tests/lean/vm_dynload/client.c","status":"A","additions":197,"deletions":75}],"state":"closed","open_date":"2019-05-17T02:30:16Z","update_date":"2019-05-18T02:00:09Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"9131709818afa8882f5a7d75a90f8cea2ba7821e","message":"fix merging issues","date":"2019-05-16T20:59:28Z"},{"author":"agentultra","committer":"agentultra","hash":"c2205e4dfa7b579039d5ac558f650a6040a8566d","message":"Add conditional include paths for libffi on linux","date":"2019-05-17T02:23:00Z"},{"author":"agentultra","committer":"agentultra","hash":"88ef7cc93b83f45a6ce0df92b2cbe01e3fd91065","message":"Update tests/lean/ffi.lean\n\nFix relative paths to work on linux","date":"2019-05-17T02:23:23Z"},{"author":"agentultra","committer":"agentultra","hash":"f743e1b31e2f3e3f9d9f38c2358fac1434138111","message":"Modify src/library/vm/vm_environment.cpp\n\nNormalize the file path handed to `load_foreign_object`","date":"2019-05-18T01:58:13Z"}]},{"author":"ratmice","number":40,"diff_summary":[{"file":"library/init/meta/attribute.lean","status":"M","additions":16,"deletions":5},{"file":"library/init/meta/expr.lean","status":"M","additions":16,"deletions":5},{"file":"library/init/meta/tactic.lean","status":"M","additions":16,"deletions":5},{"file":"src/library/documentation.cpp","status":"M","additions":16,"deletions":5}],"state":"merged","open_date":"2019-05-15T22:07:02Z","update_date":"2019-05-17T17:38:19Z","discussion":[{"author":"ratmice","date":"2019-05-15T22:20:59Z","comment":"Just remembered I forgot to compile mathlib, it quite possibly has the same sort of issue as 00fdee1"},{"author":"cipher1024","date":"2019-05-15T22:21:56Z","comment":"Can you try using this feature to build mathlib? If it doesn't break too badly, we can get this into `3.5.0c`"},{"author":"ratmice","date":"2019-05-15T22:22:55Z","comment":"Will do it in the morning."},{"author":"ratmice","date":"2019-05-17T12:22:55Z","comment":"@cipher1024 \r\nmathlib compiled without issue, the resulting doc_strings in the .olean were the same,\r\nand the rather naive lookahead in the patch didn't appear to affect compile times."},{"author":"cipher1024","date":"2019-05-17T12:45:22Z","comment":"Nice, thank you. It seems like the only thing left to fix is your coding style. Travis gave those errors:\r\n\r\n```\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:132:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:133:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:134:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:135:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:137:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:138:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:139:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:141:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:142:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:144:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:145:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:146:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:147:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n```"},{"author":"ratmice","date":"2019-05-17T16:54:36Z","comment":"@cipher1024 So, that seemed to work, except the 1 error with the clang-3.4, travis image, \r\nbut it doesn't appear to be anything I resolve afaict."}],"review_discussion":[],"tags":[],"commits":[{"author":"ratmice","committer":"ratmice","hash":"fb74ebbfd62f37f183fc070dbfe47e3de638985f","message":"doc(src/library): Make closing code fence as long as opening fence.\n\naccording to https://spec.commonmark.org/0.29/#example-94\nThe closing code fence must be at least as long as the opening fence:","date":"2019-05-15T21:21:23Z"},{"author":"ratmice","committer":"ratmice","hash":"139ac0d773dbf0f54cc682612bf8f02297c211dd","message":"fix(src/library/documentation.cpp): don't add lean suffix if code fence has an info string.\n\nonly add an info string/language to a code fence like:\n```\ndef this : unit := ()\n```\n\nCode fences like:\n```lean\ndef this : unit := ()\n```\n\n``` lean\ndef this : unit := ()\n```\nalready have one, specified and a code fence like ```#check ()``` cannot have one.\nPreviously this could would turn ``` lean\n\t\t\t\t     def this : unit := ()\n\t\t\t\t ```\ninto ```lean lean\n        def this : unit := ()\n     ```\n\nand ```lean\n       def this : unit := ()\n    ```\n\n    ```lean\n       def this : unit := ()\n    ```\ninto: ```lean\n         def this : unit := ()\n      ```lean\n\nSince it only recognized the start of a code block if the 4th\ncharacter was whitespace. It would try and add an info string\nto the end of the code fence, beleiving it to be the start of\na new block.","date":"2019-05-17T13:21:59Z"}]},{"author":"bryangingechen","number":39,"diff_summary":[{"file":".travis.yml","status":"M","additions":5,"deletions":2},{"file":"script/ci_emscripten_docker.sh","status":"M","additions":5,"deletions":2},{"file":"src/shell/emscripten.h","status":"M","additions":5,"deletions":2}],"state":"merged","open_date":"2019-05-13T17:57:48Z","update_date":"2019-05-13T18:00:35Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"3f719144e8dd689eec5ce0b7a99d378a538fbd67","message":"fix emscripten FS issue; don't mkdir in docker","date":"2019-05-13T17:42:05Z"}]},{"author":"bryangingechen","number":38,"diff_summary":[{"file":".travis.yml","status":"M","additions":29,"deletions":104},{"file":"script/ci_emscripten_docker.sh","status":"M","additions":29,"deletions":104},{"file":"script/ci_emscripten_zip.sh","status":"M","additions":29,"deletions":104},{"file":"src/shell/emscripten.h","status":"M","additions":29,"deletions":104}],"state":"closed","open_date":"2019-05-13T03:22:39Z","update_date":"2019-05-13T17:58:04Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"9e5902422746a0cb6458c426ae290495885f3ed0","message":"add tracing for Travis","date":"2019-05-12T20:38:39Z"},{"author":"cipher1024","committer":"cipher1024","hash":"bd82188e5d82ec465ab964ad32e34d48de7c6155","message":"set -e","date":"2019-05-12T21:36:19Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"95c20eb56a6eeeda4c4bbcfafcf31ed9755d5461","message":"try newer version of node","date":"2019-05-13T03:17:41Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"a7f59a05f1c6823a58b055fe660354dabc910ff1","message":"only build emscripten in this branch","date":"2019-05-13T03:21:14Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"f45ddc7dec6152d0cc30b5237983a3a29821a720","message":"debug fs","date":"2019-05-13T04:17:20Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"3fc750d0cae60dbc2f450e0a832d031e0f6dfefe","message":"avoid setup_nightly","date":"2019-05-13T05:18:35Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"59447abe9635b2029be7c00da35aae4edeba9d28","message":"mkdir outside docker","date":"2019-05-13T13:40:00Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"132d415f5f54d8a0275f17aa3f26c9ed0b95daea","message":"tracing fs error","date":"2019-05-13T14:44:15Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"bb34af3c54ec96fba5faa1daad3f522c20eb3bef","message":"don't attempt to create /home or /tmp","date":"2019-05-13T16:35:51Z"}]},{"author":"cipher1024","number":37,"diff_summary":[{"file":".travis.yml","status":"M","additions":7,"deletions":2},{"file":"script/ci_emscripten_zip.sh","status":"M","additions":7,"deletions":2}],"state":"closed","open_date":"2019-05-12T20:32:05Z","update_date":"2019-05-14T20:40:59Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"9e5902422746a0cb6458c426ae290495885f3ed0","message":"add tracing for Travis","date":"2019-05-12T20:38:39Z"},{"author":"cipher1024","committer":"cipher1024","hash":"bd82188e5d82ec465ab964ad32e34d48de7c6155","message":"set -e","date":"2019-05-12T21:36:19Z"}]},{"author":"digama0","number":35,"diff_summary":[{"file":"library/data/hash_map.lean","status":"A","additions":238,"deletions":2},{"file":"library/data/hashed_func.lean","status":"A","additions":238,"deletions":2},{"file":"library/init/data/cached.lean","status":"A","additions":238,"deletions":2},{"file":"library/init/data/default.lean","status":"A","additions":238,"deletions":2},{"file":"src/library/vm/CMakeLists.txt","status":"A","additions":238,"deletions":2},{"file":"src/library/vm/init_module.cpp","status":"A","additions":238,"deletions":2},{"file":"src/library/vm/vm_cached.cpp","status":"A","additions":238,"deletions":2},{"file":"src/library/vm/vm_cached.h","status":"A","additions":238,"deletions":2},{"file":"tests/lean/run/cached.lean","status":"A","additions":238,"deletions":2}],"state":"open","open_date":"2019-05-10T00:39:49Z","update_date":"2022-06-09T08:34:11Z","discussion":[],"review_discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"commits":[{"author":"digama0","committer":"digama0","hash":"705670807ed8b9960d84b8524b10f65aaeb017b2","message":"feat(init/data/cached): Caching mechanism\n\nThis still needs more work on the VM side.","date":"2017-06-22T19:59:06Z"},{"author":"digama0","committer":"digama0","hash":"e21f362d6b7a17ac9fc694b2f6a8d5bc20e09b2a","message":"feat(init/data/cached): Constructions based on cached","date":"2017-06-22T19:59:06Z"},{"author":"digama0","committer":"digama0","hash":"9a709b77d85a8d24c0108f60ee13b29e97c55d4c","message":"feat(library/vm/vm_cached): cached implementation","date":"2017-06-22T19:59:06Z"},{"author":"digama0","committer":"digama0","hash":"b90c3cbd842d41ba45adbadc01391d1a7ca5a436","message":"refactor(init/data/cached): forgot about unchecked_cast","date":"2017-06-22T19:59:06Z"},{"author":"digama0","committer":"digama0","hash":"939475d7e495bc4fbd2dca1978446da6e97b56c6","message":"fix(init/data/cached): add has_repr instance","date":"2017-06-22T19:59:06Z"},{"author":"digama0","committer":"digama0","hash":"318e90015db62434b312c9c6becc59e897af7d8c","message":"test(tests/lean/run/cached): add test for cached","date":"2017-06-22T19:59:06Z"},{"author":"digama0","committer":"digama0","hash":"5ffc462b8531992ffa960928e633bad08d3fcfa7","message":"feat(init/data/cached): add simp theorems for cached","date":"2017-06-22T19:59:06Z"}]},{"author":"khoek","number":33,"diff_summary":[{"file":"library/init/meta/lean/parser.lean","status":"A","additions":23,"deletions":1},{"file":"tests/lean/run/parser_itactic.lean","status":"A","additions":23,"deletions":1},{"file":"tests/lean/interactive/parser_itactic.lean.expected.out","status":"A","additions":23,"deletions":1}],"state":"merged","open_date":"2019-04-30T09:51:17Z","update_date":"2019-05-15T22:40:44Z","discussion":[{"author":"cipher1024","date":"2019-05-01T19:06:41Z","comment":"Is this ready?"},{"author":"khoek","date":"2019-05-08T05:13:33Z","comment":"Yep, it is. Typeclass resolution and the instances in the last pull do the rest of the job. You can see an example of what you can do now in the tests."},{"author":"cipher1024","date":"2019-05-08T18:55:57Z","comment":"Cool! When you call `./test_single.sh` on it, you can generate a file for the expected output. That would be interesting to have in git and it would be a more complete test. You do it with `./test_single.sh path/to/lean/binary test_file.lean yes`. Please do that and I'll merge."},{"author":"khoek","date":"2019-05-14T08:59:40Z","comment":"@cipher1024 Hopefully I've now done what you wanted. But travis has broken itself with some failed apt-get business "}],"review_discussion":[],"tags":[],"commits":[{"author":"khoek","committer":"khoek","hash":"1d34ba72dee9774101d59fa92e2476b5b8f40f3a","message":"feat(interactive): add def for parsing raw `expr`s","date":"2019-05-13T07:13:01Z"},{"author":"khoek","committer":"web-flow","hash":"03e65cf7de87e663c3953bcc5dcbb919d96cdbb5","message":"Merge branch 'master' into parse-raw","date":"2019-05-14T00:35:16Z"}]},{"author":"khoek","number":31,"diff_summary":[{"file":"leanpkg/leanpkg/main.lean","status":"M","additions":71,"deletions":44},{"file":"leanpkg/leanpkg/resolve.lean","status":"M","additions":71,"deletions":44},{"file":"library/system/io.lean","status":"M","additions":71,"deletions":44},{"file":"library/system/io_interface.lean","status":"M","additions":71,"deletions":44},{"file":"src/library/vm/vm_io.cpp","status":"M","additions":71,"deletions":44},{"file":"tests/lean/run/io_fs_2.lean","status":"M","additions":71,"deletions":44}],"state":"merged","open_date":"2019-04-24T06:46:15Z","update_date":"2019-04-27T16:49:36Z","discussion":[{"author":"khoek","date":"2019-04-26T12:13:21Z","comment":"Good to go"}],"review_discussion":[{"author":"cipher1024","file":"leanpkg/leanpkg/main.lean","date":"2019-04-24T14:57:14Z","comment":"Can you also check that `src` is a directory? It does not seem like `io.fs.exist` can tell the difference between files and directory."},{"author":"khoek","file":"leanpkg/leanpkg/main.lean","date":"2019-04-26T12:13:59Z","comment":"I don't think this is much of a functional change since `leanpkg` would totally break if there was a file there called `src` anyway, but fixed. :)"}],"tags":[{"tag":"ready-to-merge","description":"Let's merge this"}],"commits":[{"author":"khoek","committer":"khoek","hash":"261650162567b7d31a8585bd0eaf7d5957bb38dc","message":"feat(io): better file existence api\n\nand switch over obsolete file existence tests in leanpkg","date":"2019-04-26T12:12:14Z"},{"author":"khoek","committer":"web-flow","hash":"ec0c483a86279e9c22c7ad786c0f9fe0220cdd86","message":"Merge branch 'master' into leanpkg-io","date":"2019-04-26T23:33:12Z"}]},{"author":"khoek","number":30,"diff_summary":[{"file":"test-file","status":"A","additions":0,"deletions":0}],"state":"closed","open_date":"2019-04-24T04:38:29Z","update_date":"2019-04-24T06:11:54Z","discussion":[{"author":"khoek","date":"2019-04-24T04:39:23Z","comment":"https://github.com/leanprover-community/lean/pull/19 compiles on top of master, so I figure it was just a travis muck up"},{"author":"khoek","date":"2019-04-24T05:35:52Z","comment":"Yeah, it all looks fine to me."},{"author":"khoek","date":"2019-04-24T06:10:54Z","comment":"@digama0 I don't know if that's a joke, but are you able to re-run travis on master? If failed on osx randomly last time"},{"author":"khoek","date":"2019-04-24T06:11:54Z","comment":"Oh ok you did sweet"},{"author":"digama0","date":"2019-04-24T07:02:06Z","comment":"that was a joke."},{"author":"cipher1024","date":"2019-04-24T13:24:17Z","comment":"That's curious. I re-ran it a couple of times before asking for help. "}],"review_discussion":[],"tags":[],"commits":[{"author":"khoek","committer":"khoek","hash":"344575ad36133c723763c242cf3838bf6775e134","message":"nothing","date":"2019-04-24T04:37:35Z"}]},{"author":"cipher1024","number":26,"diff_summary":[{"file":".gitignore","status":"A","additions":763,"deletions":213},{"file":".travis.yml","status":"A","additions":763,"deletions":213},{"file":"library/init/meta/environment.lean","status":"A","additions":763,"deletions":213},{"file":"library/init/meta/expr.lean","status":"A","additions":763,"deletions":213},{"file":"library/init/meta/tactic.lean","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/decl_cmds.cpp","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/decl_util.cpp","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/decl_util.h","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/definition_cmds.cpp","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/definition_cmds.h","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/elaborator.cpp","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/parser.cpp","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/parser.h","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/util.cpp","status":"A","additions":763,"deletions":213},{"file":"src/frontends/lean/util.h","status":"A","additions":763,"deletions":213},{"file":"src/library/io_state.cpp","status":"A","additions":763,"deletions":213},{"file":"src/library/io_state.h","status":"A","additions":763,"deletions":213},{"file":"tests/lean/add_defn_eqns.lean","status":"A","additions":763,"deletions":213},{"file":"tests/lean/add_defn_eqns.lean.expected.out","status":"A","additions":763,"deletions":213}],"state":"merged","open_date":"2019-04-23T02:05:10Z","update_date":"2019-05-07T03:39:46Z","discussion":[{"author":"cipher1024","date":"2019-05-01T19:04:45Z","comment":"@kha, @EdAyers, @khoek, @digama0 if you have time, I'd appreciate you having a look at this. I think I'm ready to merge if there's no comment."},{"author":"cipher1024","date":"2019-05-03T22:20:31Z","comment":"This still does not allow the use of:\r\n\r\n * mutually recursive functions\r\n * functions without pattern matching\r\n * unreachable patterns"}],"review_discussion":[{"author":"cipher1024","file":"src/frontends/lean/definition_cmds.cpp","date":"2019-05-06T07:14:07Z","comment":"@kha, I changed some details of error recovery to disable it when calling the equation compiler from Lean. Can you tell me if I'm messing up?"}],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"be55b1f3876c1322e1a5276a802c2a27fa254397","message":"feat(tactic/add_def_eqns): add a Lean function to access the equation compiler","date":"2019-05-02T03:26:28Z"},{"author":"cipher1024","committer":"cipher1024","hash":"24ffa28d8b35a0ecd0bc05db8e2594c55a78ba6c","message":"Travis / ctest","date":"2019-05-05T04:18:25Z"},{"author":"cipher1024","committer":"cipher1024","hash":"222718ae3caf030d697ad8642abaef6151310304","message":"represent patterns as pre-terms","date":"2019-05-05T06:35:44Z"},{"author":"cipher1024","committer":"cipher1024","hash":"f4f186f2a1430251e037e696ad96fc1c34da29ba","message":"disable error recovery in the equation compiler API","date":"2019-05-06T05:33:24Z"},{"author":"cipher1024","committer":"cipher1024","hash":"49c900840ae9f3a4754a96af4d6c00793080ce47","message":"fix implicit binders in definition types","date":"2019-05-06T05:40:33Z"},{"author":"cipher1024","committer":"cipher1024","hash":"156f146da55e5011360b2757787ebd11ee828d29","message":"enable ccache on Travis","date":"2019-05-06T05:52:46Z"},{"author":"cipher1024","committer":"web-flow","hash":"3b4ad701387af445e59579645723f74a94d44aba","message":"Merge branch 'master' into add_defn_eqns","date":"2019-05-06T18:18:13Z"}]},{"author":"khoek","number":20,"diff_summary":[{"file":"leanpkg/leanpkg/main.lean","status":"A","additions":481,"deletions":20},{"file":"leanpkg/leanpkg/resolve.lean","status":"A","additions":481,"deletions":20},{"file":"library/system/io.lean","status":"A","additions":481,"deletions":20},{"file":"library/system/io_interface.lean","status":"A","additions":481,"deletions":20},{"file":"src/CMakeLists.txt","status":"A","additions":481,"deletions":20},{"file":"src/frontends/lean/interactive.cpp","status":"A","additions":481,"deletions":20},{"file":"src/library/constants.cpp","status":"A","additions":481,"deletions":20},{"file":"src/library/constants.h","status":"A","additions":481,"deletions":20},{"file":"src/library/noncomputable.cpp","status":"A","additions":481,"deletions":20},{"file":"src/library/tactic/tactic_evaluator.cpp","status":"A","additions":481,"deletions":20},{"file":"src/library/vm/interaction_state.h","status":"A","additions":481,"deletions":20},{"file":"src/library/vm/interaction_state_imp.h","status":"A","additions":481,"deletions":20},{"file":"src/library/vm/vm_io.cpp","status":"A","additions":481,"deletions":20},{"file":"tests/lean/leanpkg/new.sh.expected.out","status":"A","additions":481,"deletions":20},{"file":"tests/lean/run/io_fs_2.lean","status":"A","additions":481,"deletions":20},{"file":"tests/lean/run/sleep.lean","status":"A","additions":481,"deletions":20},{"file":"tests/lean/run/socket_client.lean","status":"A","additions":481,"deletions":20},{"file":"tests/lean/run/socket_server.lean","status":"A","additions":481,"deletions":20},{"file":"tests/lean/run/test_all.sh","status":"A","additions":481,"deletions":20},{"file":"tests/lean/run/test_single.sh","status":"A","additions":481,"deletions":20}],"state":"merged","open_date":"2019-04-20T05:08:34Z","update_date":"2019-04-23T14:45:26Z","discussion":[{"author":"cipher1024","date":"2019-04-20T15:09:06Z","comment":"Is this what you would use if you wanted to create a binding for a database (e.g. postgres)?"},{"author":"khoek","date":"2019-04-21T00:35:02Z","comment":"If the database server was running on the same machine, yes."},{"author":"cipher1024","date":"2019-04-21T00:48:07Z","comment":"Perfect! I'll see if I can find some time to build database bindings. That could be useful for web apps and other popular application domains"},{"author":"khoek","date":"2019-04-21T08:28:56Z","comment":"Now you could potentially write a database server in lean as well ;)"},{"author":"cipher1024","date":"2019-04-21T16:42:47Z","comment":"I'd love to see some test cases when you have a moment"},{"author":"khoek","date":"2019-04-22T11:21:11Z","comment":"@cipher1024 Test included, and it runs on windows now too."},{"author":"khoek","date":"2019-04-22T16:31:07Z","comment":"If I used git right, that should be good."},{"author":"cipher1024","date":"2019-04-22T17:28:19Z","comment":"I just saw the tests. They look great! Thank you for writing that!"},{"author":"khoek","date":"2019-04-23T11:35:33Z","comment":"I'm done with this one for now, too. I'll submit a separate pull for inet sockets, which are simple extension of what exists now."},{"author":"khoek","date":"2019-04-23T11:36:13Z","comment":"As a side-effect, `leanpkg` won't break on bare windows anymore, which I think is a great plus"},{"author":"khoek","date":"2019-04-23T11:37:51Z","comment":"(It used to need an `mkdir` with `-p` semantics.)"},{"author":"bryangingechen","date":"2019-04-27T17:38:01Z","comment":"It turns out that this commit has been breaking the emscripten build. Do these features make sense in that context or would it make more sense for me to disable them?"},{"author":"cipher1024","date":"2019-04-27T17:40:55Z","comment":"Maybe they should be disabled or implemented otherwise. @agentultra, any way we can implement sockets with emscripten?"},{"author":"bryangingechen","date":"2019-04-27T18:22:14Z","comment":"It's looking like the other PR is building after I added: `|| defined(LEAN_EMSCRIPTEN))` in a few places. Let's continue the discussion [there](https://github.com/leanprover-community/lean/pull/17)."},{"author":"agentultra","date":"2019-04-27T18:23:46Z","comment":"I’m not too familiar with Emscriptem but unless it has a way to translate the Unix socket API to the Web Socket API then I think the answer would be no. \n\nSent from my mobile\n\n> On Apr 27, 2019, at 1:40 PM, Simon Hudon <notifications@github.com> wrote:\n> \n> Maybe they should be disabled or implemented otherwise. @agentultra, any way we can implement sockets with emscripten?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"},{"author":"bryangingechen","date":"2019-04-27T18:41:37Z","comment":"Apparently it exists, though the only docs I could find on emscripten's socket-to-websocket functionality are hidden in [this open PR](https://github.com/emscripten-core/emscripten/blob/503c7889349c2f28e39e8b20a21dcdea71200c63/site/source/docs/porting/networking.rst#emulated-posix-tcp-sockets-over-websockets)."}],"review_discussion":[{"author":"cipher1024","file":"library/system/io_interface.lean","date":"2019-04-20T15:06:56Z","comment":"Can we move that to `monad_io_net_system`?"},{"author":"khoek","file":"library/system/io_interface.lean","date":"2019-04-21T02:56:05Z","comment":"The only thing is that this mirrors the situation with core's `handle : Type`, which is also defined in `monad_io` but is used in the `fs.*` named IO functions."},{"author":"cipher1024","file":"library/system/io_interface.lean","date":"2019-04-21T04:28:50Z","comment":"I thought that might be your reason. I think the rationale for `handle` to be there is that it's used in `monad_io_file_system`, in `monad_io_serial` and `monad_io_process` and those classes don't need to depend on each other."},{"author":"khoek","file":"library/system/io_interface.lean","date":"2019-04-21T06:47:18Z","comment":"Ok sure :)"}],"tags":[],"commits":[{"author":"khoek","committer":"khoek","hash":"a9c19ed0781782cf5f19c358b033033b94a108ed","message":"feat(io): fs io (remove/rename/mkdir/rmdir) + UNIX socket io (listen/accept/connect/send/recv)","date":"2019-04-23T09:52:37Z"}]},{"author":"khoek","number":19,"diff_summary":[{"file":"library/init/meta/has_reflect.lean","status":"A","additions":144,"deletions":35},{"file":"library/init/meta/interactive_base.lean","status":"A","additions":144,"deletions":35},{"file":"library/init/meta/lean/parser.lean","status":"A","additions":144,"deletions":35},{"file":"src/frontends/lean/tactic_notation.cpp","status":"A","additions":144,"deletions":35},{"file":"src/frontends/lean/tactic_notation.h","status":"A","additions":144,"deletions":35},{"file":"src/frontends/lean/user_command.cpp","status":"A","additions":144,"deletions":35},{"file":"src/frontends/lean/user_notation.cpp","status":"A","additions":144,"deletions":35},{"file":"src/library/constants.cpp","status":"A","additions":144,"deletions":35},{"file":"src/library/constants.h","status":"A","additions":144,"deletions":35},{"file":"src/library/vm/vm_parser.cpp","status":"A","additions":144,"deletions":35},{"file":"tests/lean/run/parser_itactic.lean","status":"A","additions":144,"deletions":35}],"state":"merged","open_date":"2019-04-20T03:53:17Z","update_date":"2019-04-26T15:20:47Z","discussion":[{"author":"digama0","date":"2019-04-20T04:08:21Z","comment":"Do you understand the reason why `itactic` is not a `parser (tactic unit)`? I would certainly prefer that if possible."},{"author":"khoek","date":"2019-04-20T05:12:18Z","comment":"I'll look into if it's (easily) possible."},{"author":"khoek","date":"2019-04-20T05:29:12Z","comment":"@digama0 one real problem is that there is no instance of `reflected (tactic unit)`, which is required to even write `interactive.parse my_parser` for `my_parser : lean.parser (tactic unit)`."},{"author":"khoek","date":"2019-04-20T05:46:32Z","comment":"The definition is\r\n````\r\n@[reducible] meta def parse {α : Type} [has_reflect α] (p : parser α) : Type := α\r\n````\r\nDo you understand why `[has_reflect α]` is there, and why it is used internally? I can happily write\r\n````lean\r\nvariables (α : Type) [inhabited α]\r\nmeta def ppp : lean.parser α := return $ inhabited.default α \r\n````\r\nbut I'll never be able to `parse (ppp random_inhabited_type)` in general?"},{"author":"khoek","date":"2019-04-20T08:36:25Z","comment":"Mario made some comments on Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/has_reflect.20in.20interactive.2Eparse\r\n\r\nI'll implement that"},{"author":"khoek","date":"2019-04-20T13:05:06Z","comment":"@digama0 There we go, implemented!"},{"author":"khoek","date":"2019-04-21T02:50:31Z","comment":"Rebased on master, also better test"},{"author":"khoek","date":"2019-04-21T03:06:47Z","comment":"The way we implement `parse_interactive_param` now actually considerably simplifies the logic compared to vanilla lean."},{"author":"khoek","date":"2019-04-21T12:16:03Z","comment":"Everything passes, but just one more thing---I'm going to rename `[r : reflected val]` (in my own definition) to `[reflect : reflected val]`"},{"author":"khoek","date":"2019-04-21T14:12:07Z","comment":"There we go, done"},{"author":"khoek","date":"2019-04-26T08:24:12Z","comment":"Merge me? :D :dancer: "}],"review_discussion":[{"author":"digama0","file":"library/init/meta/lean/parser.lean","date":"2019-04-21T03:14:25Z","comment":"I think you should have an instance of `reflectable (val p)` that uses `p`... That way you can have the `optional` instance say `[reflectable p] : reflectable (optional p)`, which is what I expected to see. Or is there another reason you wrote it that way?"},{"author":"khoek","file":"library/init/meta/lean/parser.lean","date":"2019-04-21T03:33:28Z","comment":"That instance is the content of `reflectable.cast`, and sure that sounds better."}],"tags":[],"commits":[{"author":"khoek","committer":"khoek","hash":"ac2217b2c4b66bf4fe928281dee30ffb024d3619","message":"feat(tactic/interactive): add `lean.parser.itactic`, a tactic block parser","date":"2019-04-21T12:20:01Z"},{"author":"cipher1024","committer":"web-flow","hash":"0cb16713cf6acc007c807a83fe9f719d10b9be2c","message":"Merge branch 'master' into oitactic","date":"2019-04-23T17:09:14Z"}]},{"author":"khoek","number":18,"diff_summary":[{"file":"library/data/buffer/parser.lean","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2019-04-20T03:46:36Z","update_date":"2019-04-20T04:06:02Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"khoek","committer":"khoek","hash":"c3a15fbd01b9cdc0714ca99ae0fac828ecc9c2c0","message":"fix(doc): spelling","date":"2019-04-20T02:56:45Z"}]},{"author":"bryangingechen","number":17,"diff_summary":[{"file":".travis.yml","status":"A","additions":307,"deletions":96},{"file":"doc/make/index.md","status":"A","additions":307,"deletions":96},{"file":"script/ci_emscripten_docker.sh","status":"A","additions":307,"deletions":96},{"file":"script/ci_emscripten_zip.sh","status":"A","additions":307,"deletions":96},{"file":"src/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/api/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/checker/checker.cpp","status":"A","additions":307,"deletions":96},{"file":"src/frontends/lean/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/kernel/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/compiler/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/constructions/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/equations_compiler/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/inductive_compiler/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/tactic/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/tactic/backward/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/tactic/smt/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/vm/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/library/vm/vm_io.cpp","status":"A","additions":307,"deletions":96},{"file":"src/shell/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/shell/emscripten.h","status":"A","additions":307,"deletions":96},{"file":"src/shell/lean.cpp","status":"A","additions":307,"deletions":96},{"file":"src/shell/lean_js.html","status":"A","additions":307,"deletions":96},{"file":"src/tests/shared/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/tests/shell/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/tests/shell/shell.cpp","status":"A","additions":307,"deletions":96},{"file":"src/util/lean_path.cpp","status":"A","additions":307,"deletions":96},{"file":"src/util/numerics/CMakeLists.txt","status":"A","additions":307,"deletions":96},{"file":"src/util/path.cpp","status":"A","additions":307,"deletions":96},{"file":"src/util/sexpr/CMakeLists.txt","status":"A","additions":307,"deletions":96}],"state":"merged","open_date":"2019-04-20T02:08:52Z","update_date":"2019-05-12T17:22:14Z","discussion":[{"author":"cipher1024","date":"2019-04-20T02:14:26Z","comment":"Can you write a test that will show that your fix works?"},{"author":"bryangingechen","date":"2019-04-20T02:16:54Z","comment":"Not sure how... any suggestions?"},{"author":"cipher1024","date":"2019-04-20T02:23:00Z","comment":"Actually I'm not familiar with emscripten. How do you check whether it works when you're fixing it on your machine?"},{"author":"bryangingechen","date":"2019-04-20T02:30:15Z","comment":"Ah, well it failed to build before (with lots of error messages), and now the build completes successfully. The main check I used is that the JS and wasm files functioned \"properly\" in an instance of lean-web-editor.\r\n\r\nFor the first part, maybe we could set something up with travis? For the second, I'm not sure... maybe there's a way to run lean's tests in node?"},{"author":"bryangingechen","date":"2019-04-20T02:34:20Z","comment":"Maybe this is the way to do emscripten stuff on travis: https://emscripten.org/docs/compiling/Travis.html\r\n\r\nI can look into this but I will probably have some questions."},{"author":"cipher1024","date":"2019-04-20T02:35:49Z","comment":"Thanks for doing that. Feel free to ask questions, I'll do what I can to give something informative."},{"author":"cipher1024","date":"2019-04-20T02:37:03Z","comment":"What time zone are you in?"},{"author":"khoek","date":"2019-04-21T11:55:14Z","comment":"FYI, there is already something called `emscripten_test` in generated in `tests/shell/CTestTestfile.cmake`:\r\n````\r\nadd_test(emscripten_test \"bash\" \"/home/khoek/code/lean/src/tests/shell/test.sh\" \"/home/khoek/code/lean/build/release/tests/shell/shell_test\")\r\n````\r\n"},{"author":"bryangingechen","date":"2019-04-21T17:55:53Z","comment":"Yes, when I try running `ctest`, it seems that almost every test fails with the emscripten build. I'm going to ask for more advice on zulip.\r\n\r\n**edit**: see [here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/emscripten.20build/near/163916548)."},{"author":"bryangingechen","date":"2019-04-25T06:14:13Z","comment":"Made some progress on this - I'm down to 5 broken tests on my machine. Pushing commits now to see whether my Travis script is any good."},{"author":"bryangingechen","date":"2019-04-26T06:48:05Z","comment":"An update:\r\n\r\n- First, I [added some info](https://github.com/leanprover-community/lean/pull/17/commits/216f5466db79f3d1bea6aa5c13c04430e89b08db) to the build docs about the files generated in the emscripten build.\r\n\r\n- I [changed](https://github.com/leanprover-community/lean/pull/17/commits/6d9a71158c778671fb9a07d2179c11f5f0ab6f7c#diff-6655349fbe93a4438c8741015ff60a3aL224) `src/util/path.cpp` so that files built for node and files built for the browser behave differently. This means that in the emscripten build, two versions of the \"util\" target have to be built. **EDIT**: @gebner showed me a better way [here](https://github.com/leanprover-community/lean/pull/17#discussion_r283126033)\r\n\r\n- I tested a build script for Travis locally (on macOS, if that matters) using [the docker container suggested in the emscripten docs](https://hub.docker.com/r/trzeci/emscripten) and everything builds fine there, though there are several failing tests:\r\n  - 14 - leantest_all (Failed)\r\n  - 56 - leantest_1956.lean (Failed)\r\n  - 243 - leantest_io_process_echo.lean (Failed)\r\n  - 869 - leanruntest_io_process_env.lean (Failed)\r\n  - 1281 - shared_test (Failed) *\r\n  - 1284 - c_univ_test (Failed) *\r\n  - 1285 - c_expr_test (Failed) *\r\n  - 1286 - thread_test (Failed)\r\n\r\n  The ones marked by * only fail in the docker container, the others also fail when building outside the container.\r\n\r\n- I was unable to build `lean_js.js`, an obsolete browser version of the lean server (see the above-mentioned docs), inside the docker container, though it builds fine outside of that. I disabled this target in the build scripts [here](https://github.com/leanprover-community/lean/pull/17/commits/f3ef0a07ea683b5e4cee2f6c858a95eb6df29e43).\r\n\r\n~~- Here's where I'm stuck now: the docker build (which works on my computer) [fails on Travis](https://travis-ci.org/leanprover-community/lean/jobs/524780214#L2974). The error message suggests that the build is trying to pull in Windows header files, which I don't understand at all. In fact, I don't understand why the behavior is different at all.~~ The explanation is that Travis automatically merges master into PRs before building. Thanks to @agentultra for helping me debug this!\r\n\r\nAny feedback would be appreciated!"},{"author":"khoek","date":"2019-04-28T04:33:46Z","comment":"You probably know better than me Bryan, but just be aware that jobs which are silent for too long can be killed by travis, and I noticed some pipes to /dev/null in those `cmake` files."},{"author":"bryangingechen","date":"2019-04-28T04:43:48Z","comment":"Thanks Keeley. I'm planning to prepend the `docker exec` calls in `.travis.yml` with `travis_wait 60` which should keep things going if that becomes an issue.\r\n\r\nThe underlying issue is that when the emscripten \"binary\" compiles the standard_lib or the leanpkg files it spams thousands of lines of text and [this also causes travis to kill the job](https://travis-ci.org/leanprover-community/lean/jobs/525502660) (see the bottom of [the raw log](https://api.travis-ci.org/v3/job/525502660/log.txt)). (In fact, I thought I'd already piped the output to /dev/null for that particular build... maybe something strange with docker?)"},{"author":"bryangingechen","date":"2019-04-28T18:29:30Z","comment":"Here's another status update:\r\n\r\n- I split the emscripten build into two and they both now build successfully on Travis: \r\n  - \"Main\": builds the shell utilities and the `lean_js_*` files that are meant for the browser.\r\n  - \"Test\": builds the standalone test binaries.\r\n\r\n- However, the tests are still failing:\r\n  - \"Main\": it takes ~35 minutes for Travis to finish building everything, which leaves a scant 15 minutes for the 1238 tests, so it times out. [See here](https://travis-ci.org/leanprover-community/lean/jobs/525539318#L3136).\r\n  - \"Test\": There are 5 broken tests (out of 55), [see here](https://travis-ci.org/leanprover-community/lean/jobs/525539319#L3504).\r\n\r\nIn principle we could break up the \"Main\" build into several testing stages with Travis's build stage feature, and then it might be interesting for someone more well-versed in emscripten / C++ to look into figuring out all the broken tests.\r\n\r\nFor now, I'm inclined to suggest that we skip running ctest on Travis (and only perform the \"Main\" build) since it's not clear to me that the errors are relevant to the browser version of lean (which is probably the only thing built by emscripten that people will want to use). Note that as part of the \"Main\" build, the standard library is compiled using the emscripten version of lean, so there's already a fair amount of testing going on even before `ctest` is run.\r\n\r\nIf this is OK, I'm going to comment out the various tests and then add some lines to .travis.yml to upload a tarball of the browser JS / wasm files to the lean-nightly repository.  Then it should be possible to automate deployment of a more or less up-to-date `lean-community` version of the lean web editor."},{"author":"bryangingechen","date":"2019-04-29T22:51:35Z","comment":"This should be ready for review."},{"author":"cipher1024","date":"2019-05-11T19:26:08Z","comment":"You may also want to do `before_install: true`"},{"author":"bryangingechen","date":"2019-05-11T19:28:03Z","comment":"I've got the `docker run` command in that phase. Let's see if this works though."},{"author":"cipher1024","date":"2019-05-11T19:30:18Z","comment":"Sorry! I missed that. That's better than what I was suggesting."},{"author":"cipher1024","date":"2019-05-12T17:28:57Z","comment":"I forgot to mention this: there is a daily build to construct a nightly release. Should there be a nightly `emscripten` release? If not, let's disable that build on cron tasks with `if: type != cron` but if we want a release, let's set it up."},{"author":"bryangingechen","date":"2019-05-12T17:31:00Z","comment":"I tried to adapt the nightly release scripts to the emscripten build in this PR, but I haven't been able to test it. See [here](https://github.com/leanprover-community/lean/blob/master/.travis.yml#L137)."},{"author":"bryangingechen","date":"2019-05-12T17:38:34Z","comment":"By the way, thanks for the review @gebner and the quick merge @cipher1024!"},{"author":"cipher1024","date":"2019-05-12T18:00:17Z","comment":"And thank you, @bryangingechen, for taking on the project!"},{"author":"cipher1024","date":"2019-05-12T18:01:41Z","comment":"I started a cron build. We'll see what happens."}],"review_discussion":[{"author":"gebner","file":"src/util/path.cpp","date":"2019-05-12T08:36:37Z","comment":"Does something like the following work instead of compiling `path.cpp` twice?\r\n```c++\r\n#if defined(LEAN_EMSCRIPTEN)\r\nif (EM_ASM_INT(typeof window === \"object\")) {\r\n  return fname;\r\n}\r\n#endif\r\n```"},{"author":"gebner","file":"src/api/CMakeLists.txt","date":"2019-05-12T08:37:55Z","comment":"Do you know why this is only needed with emscripten?  And why it wasn't necessary before?"},{"author":"bryangingechen","file":"src/util/path.cpp","date":"2019-05-12T12:27:23Z","comment":"Yeah, that's great! I should be able to revert a lot of the CMake complications I had to add with this."},{"author":"bryangingechen","file":"src/api/CMakeLists.txt","date":"2019-05-12T12:36:23Z","comment":"This is only needed for emscripten because only emscripten has to build the ExternalProject `gmp` whereas the non-emscripten builds are required to have gmp already installed. I'm not entirely sure why it wasn't necessary before. It was only after I split up the `util` target into `util_shared` and `util_path(_browser)` that I started seeing `make` try to build some of these other targets without building `gmp` first, so I added these explicit dependencies to address that."},{"author":"gebner","file":"src/api/CMakeLists.txt","date":"2019-05-12T14:18:47Z","comment":"Ah, now I remember: this didn't work before either.  I just always run `emmake make gmp` first."}],"tags":[],"commits":[{"author":"bryangingechen","committer":"bryangingechen","hash":"5df838d917ac5b33e0d2c911392f786f6c040bae","message":"fix(src/CMakeLists,src/shell/CMakeLists): fix emscripten build","date":"2019-04-20T02:06:39Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"f1e15f82bea41ab119eb66e1e1a823a5daa1fa3b","message":"fix readme","date":"2019-04-24T23:27:32Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"20d93038e0db94901ea9f17bf84d8149a0744f53","message":"fix lean_js.html","date":"2019-04-24T23:35:08Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"cadcd2722ed5c2d92716d6fc1c16ef5f4f4138fd","message":"lean.js -> lean_js.js","date":"2019-04-25T03:18:00Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"6d9a71158c778671fb9a07d2179c11f5f0ab6f7c","message":"path fixes for node / browser","date":"2019-04-25T06:04:48Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"e239f5206924e3fdea5b5d9660f7023653de3e7e","message":"test fixes for emscripten / node","date":"2019-04-25T06:05:28Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"1633722d40785d958620129a73f249c4ca30a4c7","message":"add emscripten to travis","date":"2019-04-25T13:03:11Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"fa79a5de060d09afbad77e036cfdd33889af4d77","message":"remove target_link_options","date":"2019-04-25T13:56:05Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"782c02d06a0e503a6fdcd2e3fcb949b808a8cfa0","message":"add backup url for libgmp","date":"2019-04-25T15:03:21Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"c4b1f5f2190aac9d3259ae1cc316c03d065686d9","message":"update gmp, install gmp dependencies in docker","date":"2019-04-26T04:25:15Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"216f5466db79f3d1bea6aa5c13c04430e89b08db","message":"more detail in build doc","date":"2019-04-26T04:25:30Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"f3ef0a07ea683b5e4cee2f6c858a95eb6df29e43","message":"disable lean_js.js build on CI, fix typo","date":"2019-04-26T04:26:36Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"5bb0ac9b3899b41ccb943073f7ac51823158ada9","message":"simplify env var logic","date":"2019-04-26T18:18:59Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"34d3a926f4c79059974071f0e864eaedc54835b9","message":"Merge remote-tracking branch 'community/master' into emscripten","date":"2019-04-27T17:28:26Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"106ed615aea1356de9ced55c2032328e67d76ace","message":"add emscripten cases to vm_io.cpp","date":"2019-04-27T18:29:01Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"dc8a481243c302e898d1276c59f6be506b6dbfd7","message":"split emscripten build on travis into Main / Test","date":"2019-04-28T02:00:37Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"d0bca60ed3ad589cd63798e80782bd60c7e8a557","message":"add explicit gmp dependencies","date":"2019-04-28T06:26:43Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"39db493866d45cf6c0078b4cf0a70333874baec4","message":"travis_wait doesn't play well with docker exec","date":"2019-04-28T07:51:22Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"ed5cefade3f803e6d389cbc47405971f92a340c9","message":"disable ctest on travis, enable upload, fix dependency","date":"2019-04-29T20:07:53Z"},{"author":"cipher1024","committer":"web-flow","hash":"c9c9487738f16dde328ff0bb66b42151ae7e2d29","message":"Merge branch 'master' into emscripten","date":"2019-05-11T16:50:05Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"3b2ff6748f632c1dcac08cbdfb2f72813826d3d3","message":"emscripten: skip install phase on travis","date":"2019-05-11T19:23:51Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"b58faae61648631111216b4a499d22406bf6e3e5","message":"Merge remote-tracking branch 'community/master' into emscripten","date":"2019-05-12T00:23:13Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"d86b176a4ce5e2d8034d6076ad92c8e8eed75d81","message":"don't use apt addon for emscripten builds on travis","date":"2019-05-12T01:38:09Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"6781126eb96f5c5f98f981fe9a9ede0c50f9532d","message":"Merge remote-tracking branch 'community/master' into emscripten","date":"2019-05-12T11:27:05Z"},{"author":"bryangingechen","committer":"bryangingechen","hash":"7017a198ab0e199ff097a9db6ed772b54bb9e859","message":"simplify build per review","date":"2019-05-12T16:02:29Z"}]},{"author":"cipher1024","number":12,"diff_summary":[{"file":"src/library/tactic/revert_tactic.cpp","status":"A","additions":16,"deletions":4},{"file":"tests/lean/revert_err.lean","status":"A","additions":16,"deletions":4},{"file":"tests/lean/revert_err.lean.expected.out","status":"A","additions":16,"deletions":4}],"state":"merged","open_date":"2019-04-18T21:38:14Z","update_date":"2019-04-19T21:14:58Z","discussion":[{"author":"khoek","date":"2019-04-18T23:57:00Z","comment":"Tiny mistake in your test. It's fixed in https://github.com/khoek/klean/tree/fix-revert"},{"author":"cipher1024","date":"2019-04-19T03:02:48Z","comment":"thanks!"},{"author":"khoek","date":"2019-04-19T10:38:31Z","comment":"Do we have any idea what is going on with the rando-failures? Travis is just killing the `ctest` process, right?"},{"author":"cipher1024","date":"2019-04-19T14:14:47Z","comment":"There's something weird going on with this build. Can anyone see why that is?"}],"review_discussion":[],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"d0e14588efac57d1749138408ee780aa0ed9258f","message":"fix(tactic/revert_lst): check that the provided expressions are variables","date":"2019-04-18T21:35:47Z"},{"author":"khoek","committer":"khoek","hash":"2a77a36638e1ed232b4202c6a270a8b03c3362f2","message":"Fix test","date":"2019-04-18T23:55:43Z"},{"author":"cipher1024","committer":"cipher1024","hash":"b50eed97a1b8a1c3f92259a5badd2e8831cb8f23","message":"delete blank line","date":"2019-04-19T18:47:08Z"}]},{"author":"EdAyers","number":11,"diff_summary":[{"file":"src/frontends/lean/parser.cpp","status":"M","additions":16,"deletions":16},{"file":"src/kernel/expr.cpp","status":"M","additions":16,"deletions":16},{"file":"src/library/discr_tree.cpp","status":"M","additions":16,"deletions":16},{"file":"src/library/inductive_compiler/basic.cpp","status":"M","additions":16,"deletions":16},{"file":"src/library/inductive_compiler/util.cpp","status":"M","additions":16,"deletions":16},{"file":"src/library/replace_visitor.cpp","status":"M","additions":16,"deletions":16},{"file":"src/util/rb_tree.h","status":"M","additions":16,"deletions":16},{"file":"src/util/small_object_allocator.h","status":"M","additions":16,"deletions":16},{"file":"src/util/trie.h","status":"M","additions":16,"deletions":16}],"state":"merged","open_date":"2019-04-15T12:08:38Z","update_date":"2019-04-19T23:15:26Z","discussion":[{"author":"EdAyers","date":"2019-04-16T18:38:28Z","comment":"Hmm I can't figure out why the build failed."},{"author":"khoek","date":"2019-04-16T23:34:29Z","comment":"I think it might have just been bad luck?"},{"author":"EdAyers","date":"2019-04-17T09:57:52Z","comment":"Is there a way to get it to run again?"},{"author":"khoek","date":"2019-04-17T10:06:45Z","comment":"`````\r\n$ git commit --amend --date=\"$(date)\"\r\n$ git push (yourrepo) HEAD:(yourbranch) --force\r\n`````"}],"review_discussion":[{"author":"digama0","file":"src/util/small_object_allocator.h","date":"2019-04-16T00:14:38Z","comment":"I think it would be better to leave the implementation in (it will affect overload resolution) but replace the function body with `/* unreachable */`"},{"author":"digama0","file":"src/library/inductive_compiler/basic.cpp","date":"2019-04-16T00:50:22Z","comment":"You say `name_map` is already a pointer but I don't think that's true, or at least it's no more a pointer than everything else is. It is a typedef for `rb_map` which is a `node` object, which contains a pointer to the rest of the structure, is that what you mean?\r\n\r\nThe issue here isn't with whether it's a pointer or not as who owns the data. A reference is a non-owned pointer, meaning that the destructor is not called when this object is destroyed - whoever provided the reference is responsible for cleaning up the data. Making it a subfield means that the data will be destroyed when this object goes away. That said, given that the constructors take a name_map by value, I think you are right to store an actual name_map here rather than a const ref."},{"author":"EdAyers","file":"src/library/inductive_compiler/basic.cpp","date":"2019-04-16T11:19:09Z","comment":"Thanks for the clarification. I haven't used C++ in ages and not on a project this complex.\r\n\r\nTo make sure I understand: \r\nby using `const &` the rc of the `node_cell` is not increasing when we construct the `add_basic_inductive_decl_fn` instance. Without `const &`, the rc increments and is then decremented when the `add_basic_inductive_decl_fn` is destructed.\r\n\r\nSo the program will still run without a mem leak or anything whether or not `const &` is added. The only issue is getting rid of the warning message without making things worse.\r\n\r\nThe constructors for `add_basic_inductive_decl_fn` take `m_implicit_infer_map` by value, which means that the rc increases when the constructor is called. IIRC the C++ compiler will always copy unless you use `std::move`. So -- in the master version -- the node belongs to the constructor function, not the `add_basic_inductive_decl_fn` instance which means that the rc is decremented again once the constructor returns. In my version without `const &`, the rc is incremented when the constructor is called and decremented once the `add_basic_inductive_decl_fn` instance is destroyed. Is this right?\r\n\r\nIt seems to me that this is a mistake because the author either intended it to be by reference (`const &`) in both places or by value (not `const &`) in both places. I guess with `const &` is more efficient if you can guarantee that the cell hasn't been deleted before it is used. So you would use `const &` if `add_basic_inductive_decl_fn` is some ephemeral data (which it looks like it is but not sure).\r\n\r\nI decided to go for removing `const &` because all of the tests still passed and adding by reference to the constructors just pushed the warnings on to the call sites of the constructors."},{"author":"EdAyers","file":"src/util/small_object_allocator.h","date":"2019-04-16T11:19:33Z","comment":"fixed"},{"author":"digama0","file":"src/library/inductive_compiler/basic.cpp","date":"2019-04-17T13:29:18Z","comment":"I think you are right about `std::move`. I'm mostly carrying over Rust intuitions here, where `std::move` is the default. You can probably add `std::move` here and avoid the reference inc/dec, but it's not a very big issue.\r\n\r\nI'm pretty sure that it is a potential use-after-free the way it was on master though, because having it be owned only by the constructor is very bad, as the constructor returns immediately and potentially decreases the refcount to zero and frees the memory needed for the add_basic_inductive_decl_fn. The bad ref is then packaged along with other stuff and passed to the caller. Then when operator() is called later, the data isn't available. It might be okay in this case if the caller is also keeping a copy of the name map but it doesn't have to with this API."}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"919bda3a42cb01a9c9235a2a3c6e10182a3cb31b","message":"Fix C++ compiler warnings.","date":"2019-04-11T18:21:06Z"},{"author":"EdAyers","committer":"EdAyers","hash":"ff9f143c6610d07724334e68319eb359c515215f","message":"Merge branch 'master' into warnings","date":"2019-04-11T18:29:55Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b618fca7300ed8d371e4ae6ec4a1dad1cdd17891","message":"Fix -Wreturn-std-move warnings.","date":"2019-04-14T21:23:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"2b31c977aa5cb71a3016a0f918ccfc31eccea805","message":"Merge branch 'master' into warnings","date":"2019-04-14T21:24:02Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6db7bcf488e26ee56c11994740d6e2a0eda41b00","message":"Replace commented out `delete` op\nwith `/* unreachable */` body to suppress error.","date":"2019-04-17T10:45:35Z"},{"author":"cipher1024","committer":"web-flow","hash":"21871a289cbb0397e3ccf6cc6dc5b8b87df3d128","message":"Merge branch 'master' into warnings","date":"2019-04-19T19:34:49Z"}]},{"author":"khoek","number":10,"diff_summary":[{"file":"library/init/meta/smt/interactive.lean","status":"M","additions":94,"deletions":17},{"file":"library/init/meta/tactic.lean","status":"M","additions":94,"deletions":17},{"file":"src/frontends/lean/tactic_notation.cpp","status":"M","additions":94,"deletions":17},{"file":"src/library/constants.cpp","status":"M","additions":94,"deletions":17},{"file":"src/library/constants.h","status":"M","additions":94,"deletions":17},{"file":"tests/lean/interactive/my_tac_class.lean","status":"M","additions":94,"deletions":17},{"file":"tests/lean/interactive/rb_map_ts.lean","status":"M","additions":94,"deletions":17},{"file":"tests/lean/run/my_tac_class.lean","status":"M","additions":94,"deletions":17}],"state":"merged","open_date":"2019-04-11T07:38:06Z","update_date":"2019-04-13T02:39:16Z","discussion":[{"author":"khoek","date":"2019-04-11T10:46:36Z","comment":"Of course this should be non-breaking with mainline `lean`, and the tests + current mathlib building against this version testifies to that."},{"author":"khoek","date":"2019-04-11T15:04:10Z","comment":"(Travis died, let's try that one again)"},{"author":"cipher1024","date":"2019-04-13T02:19:49Z","comment":"@digama0 Are we happy with this PR?"}],"review_discussion":[{"author":"digama0","file":"library/init/meta/interactive_base.lean","date":"2019-04-11T08:16:39Z","comment":"How about having only `execute_with`, and provide a default `config_type` object to pass (i.e. an inhabited instance)? That seems consistent with the smt example, and with most use cases I can think of."},{"author":"khoek","file":"library/init/meta/interactive_base.lean","date":"2019-04-11T10:46:28Z","comment":"Sounds great. Done."},{"author":"digama0","file":"library/init/meta/tactic.lean","date":"2019-04-11T12:52:21Z","comment":"You shouldn't have `config_type` be implicit here. Conversely, does the implicitness of the `inhabited` instance allow it to be inferred in the `smt_config` example?"},{"author":"khoek","file":"library/init/meta/tactic.lean","date":"2019-04-11T12:59:50Z","comment":"@digama0 I'm pretty sure there's no `inhabited unit` in core?"},{"author":"khoek","file":"library/init/meta/tactic.lean","date":"2019-04-11T13:00:51Z","comment":"Oh, that has nothing to do with what you said, gotcha"},{"author":"digama0","file":"library/init/meta/tactic.lean","date":"2019-04-11T13:02:34Z","comment":"If there is no `inhabited unit` in core, then I know what the next PR is..."},{"author":"khoek","file":"library/init/meta/tactic.lean","date":"2019-04-11T13:05:57Z","comment":"Changed, but the instance can't be inferred in that example."},{"author":"khoek","file":"library/init/meta/tactic.lean","date":"2019-04-11T13:26:16Z","comment":"@digama0 I thought about that, but there is a copy in mathlib (if I recall). So we run into a problem where we wouldn't be compatible between lean versions."},{"author":"gebner","file":"src/library/constants.cpp","date":"2020-04-18T14:51:17Z","comment":"@cipher1024 @khoek The `constants.*` files should not be edited by hand, they are automatically generated from the `constants.txt` file using the `scripts/gen_constants_cpp.py` script."},{"author":"khoek","file":"src/library/constants.cpp","date":"2020-04-18T16:46:17Z","comment":"Oh, ok, thanks for the heads up. When I wrote this I was totally on my own in the codebase. :)"},{"author":"gebner","file":"src/library/constants.cpp","date":"2020-04-18T16:56:26Z","comment":"No hard feelings.  I was just surprised when I added something to `constants.txt` so I felt like I should share this."}],"tags":[],"commits":[{"author":"khoek","committer":"khoek","hash":"60e32e84d2adf128cd4c0c78cc04fd9f27e79c1a","message":" feat(tactic/interactive): generalize custom tactic monads in `begin ... end` blocks","date":"2019-04-12T09:08:25Z"},{"author":"khoek","committer":"web-flow","hash":"36d5a7329b69d28a378a6cf15d3282c746e8f9ab","message":"Merge branch 'master' into generalize-custom-monads","date":"2019-04-12T11:26:33Z"}]},{"author":"khoek","number":8,"diff_summary":[{"file":"library/init/algebra/field.lean","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2019-04-10T09:47:45Z","update_date":"2019-04-11T14:48:47Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"kckennylau","committer":"khoek","hash":"85370f989a7816f9802dbfe6465ce70012c39730","message":"fix(init/algebra/field): repeated instance","date":"2019-04-11T01:34:40Z"}]},{"author":"cipher1024","number":7,"diff_summary":[{"file":"src/library/vm/vm_io.cpp","status":"A","additions":6,"deletions":1},{"file":"tests/lean/run/1010.lean","status":"A","additions":6,"deletions":1}],"state":"merged","open_date":"2019-04-08T18:03:39Z","update_date":"2019-04-09T16:16:03Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"2889cfa35979d4f61ebefe67ee098fcfc2bfa575","message":"fix(vm/get_cwd): add test for get_cwd","date":"2019-04-08T17:53:58Z"}]},{"author":"khoek","number":6,"diff_summary":[{"file":"library/system/io.lean","status":"M","additions":56,"deletions":0},{"file":"library/system/io_interface.lean","status":"M","additions":56,"deletions":0},{"file":"src/library/vm/vm_io.cpp","status":"M","additions":56,"deletions":0}],"state":"merged","open_date":"2019-04-08T13:23:58Z","update_date":"2019-04-10T19:21:17Z","discussion":[{"author":"cipher1024","date":"2019-04-08T13:36:22Z","comment":"Why does this need to be in Lean itself?"},{"author":"khoek","date":"2019-04-08T14:34:01Z","comment":"Ultimately, speed. After multiple attempts at parsing a string serialised format from within lean (the fastest is on my github under `leancache`), I ran into two major roadblock problems: 1. manipulating strings and in particular doing string IO can be really slow from within lean, for instance appending to a `buffer char` can take ludicrously long times when dealing with megabyte sized stuff (on the order of 5-10 seconds) and 2. even in crafted situations where I could avoid the IO problems, just parsing serialised strings and constructing the nested `expr`s takes a really disappointing amount of time.\r\n\r\nI used to have hard comparison numbers but I'm pretty sure I've lost them(?), but the bottom line is that in my testing C++ serialisation/deserialisation of the same thing vs within lean was a factor of 1000 times faster, with examples taking say 6-10 in editor from within lean, and <10 milliseconds with a native implementation. The 1000 is not an exaggeration, and it was so bad that at the time I totally gave up doing it from within lean.\r\n\r\nActually, to be honest, UTF8 transcoding big pieces of data can suffer from point (1) above too, which is why I didn't end up investing too much time in writing good lean support for it back when I was interested in it."},{"author":"khoek","date":"2019-04-08T14:51:59Z","comment":"On the other hand, the C++ implementation is *really* fast. Massive proofs in tens of milliseconds. I think it could be life-changing."},{"author":"khoek","date":"2019-04-10T02:37:54Z","comment":"Fixed up the whitespace making the linter fail."}],"review_discussion":[],"tags":[],"commits":[{"author":"khoek","committer":"khoek","hash":"98d804412d72e2ccdd3d0c1154224e03b9233125","message":"feat(io/serial): add `expr` serialization/deserialization functions","date":"2019-04-10T02:12:40Z"}]},{"author":"khoek","number":5,"diff_summary":[{"file":"library/init/meta/environment.lean","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2019-04-08T13:22:44Z","update_date":"2019-04-08T17:16:56Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"khoek","committer":"khoek","hash":"43ae4164c668d057154e1c9f609d77a4f6e97423","message":"Fix build","date":"2019-04-08T13:17:29Z"}]},{"author":"digama0","number":3,"diff_summary":[{"file":"library/init/meta/environment.lean","status":"A","additions":160,"deletions":4},{"file":"src/library/inductive_compiler/util.cpp","status":"A","additions":160,"deletions":4},{"file":"src/library/inductive_compiler/util.h","status":"A","additions":160,"deletions":4},{"file":"src/library/vm/vm_environment.cpp","status":"A","additions":160,"deletions":4},{"file":"tests/lean/run/add_decl.lean","status":"A","additions":160,"deletions":4}],"state":"merged","open_date":"2019-03-12T12:03:17Z","update_date":"2019-04-09T16:16:40Z","discussion":[],"review_discussion":[],"tags":[],"commits":[{"author":"cipher1024","committer":"cipher1024","hash":"9bdc29dc52a8ea16fb117aa9e7d884c252abb505","message":"feat(tactic/add_inductive): generate auxiliary declaration such as `no_confusion`","date":"2019-03-06T19:26:45Z"},{"author":"cipher1024","committer":"cipher1024","hash":"c1cdd207b72e20f818a46a804508a1e969ed1c36","message":"more stuff","date":"2019-03-07T21:38:16Z"},{"author":"digama0","committer":"digama0","hash":"a7cedd9cfdddd1441e3a4da2c3c156657911c554","message":"feat(meta/environment): add_ginductive","date":"2019-03-12T10:38:38Z"},{"author":"khoek","committer":"digama0","hash":"3636f1ed64baa028bcdac6c0e502a0345ed26d82","message":"Fix build (#5)","date":"2019-04-08T17:16:56Z"}]},{"author":"EdAyers","number":2,"diff_summary":[{"file":".travis.yml","status":"A","additions":480,"deletions":2},{"file":"library/init/default.lean","status":"A","additions":480,"deletions":2},{"file":"library/init/meta/float.lean","status":"A","additions":480,"deletions":2},{"file":"src/library/vm/CMakeLists.txt","status":"A","additions":480,"deletions":2},{"file":"src/library/vm/init_module.cpp","status":"A","additions":480,"deletions":2},{"file":"src/library/vm/vm_float.cpp","status":"A","additions":480,"deletions":2},{"file":"src/library/vm/vm_float.h","status":"A","additions":480,"deletions":2},{"file":"src/library/vm/vm_int.h","status":"A","additions":480,"deletions":2},{"file":"tests/lean/float.lean","status":"A","additions":480,"deletions":2},{"file":"tests/lean/float.lean.expected.out","status":"A","additions":480,"deletions":2}],"state":"merged","open_date":"2019-02-26T11:56:12Z","update_date":"2019-05-11T23:25:45Z","discussion":[{"author":"digama0","date":"2019-02-26T12:01:52Z","comment":"I think it should be in the `native` namespace. I'm planning to have the verified version take the name without the `native` namespace, and reference this one. (Although I'm not sure `float` is a smart name these days... C has a lot of bad/ambiguous names for things regarding sized types and I'm not keen on reflecting that in lean.)"},{"author":"cipher1024","date":"2019-02-26T15:14:24Z","comment":"Do we want to expose `native.float` and later relate it to the `float` model through overrides (coming soon if Mario is motivated) or should we hide them completely and \"cheat\" by replacing the model of float under the hood with `native.float`?"},{"author":"digama0","date":"2019-02-26T15:18:40Z","comment":"With the override model, they should appear as separate definitions, one a meta constant and the other a proper definition. With the current sneaky override model, we don't have a proper lean model of floats to sneaky override, so it's just a bunch of meta constants, and I would prefer that the meta constants be called `native.float`. For people who think that the name is too long they can `open native (float)` or define `float := native.float` locally."},{"author":"EdAyers","date":"2019-02-27T12:40:26Z","comment":"Can someone clue me in on 'the override model'?"},{"author":"cipher1024","date":"2019-02-27T12:43:03Z","comment":"The idea is to have some definitions of float for reasoning about it and mark it and its function with `@[override native.float]` so that, in the VM, it gets represented using your float instead of the code generated for the model"},{"author":"EdAyers","date":"2019-02-27T12:50:03Z","comment":"Ah ok. So it's kind of like `DECLARE_VM_BUILTIN` but for lean-side code."},{"author":"cipher1024","date":"2019-02-27T12:58:04Z","comment":"I will take your word for it. I haven't really played with the C++ side of things. But the way you put it, it sounds like it will be pretty simple"},{"author":"digama0","date":"2019-02-27T13:25:58Z","comment":"The hope is that it will be able to replace `DECLARE_VM_BUILTIN`, at least for non-`meta constant` definitions. We can use lean side overrides to redirect a definition like `nat.add` to a meta constant `native.nat.add` which is implemented via `DECLARE_VM_BUILTIN`; this doesn't change much as far as behavior is concerned but it makes it much more obvious what's happening when you look at the lean code."},{"author":"EdAyers","date":"2019-05-10T12:59:11Z","comment":"I think this is good enough for version 0.5 now except for code to convert nats that are too big to fit in to unsigned int to floats.\r\nWishlist:\r\n- make `vm_float.cpp` use templates so that `double` can be used instead of float without any rewrite.\r\n- make a constant to return the mantissa digits in an array.\r\n- code coverage for unit tests could be improved."},{"author":"cipher1024","date":"2019-05-11T15:56:47Z","comment":"I think converting to lambdas was unnecessary and it seems problematic on Windows"},{"author":"EdAyers","date":"2019-05-11T17:29:06Z","comment":"I disagree: having to maintain the code in one place using lambdas rather than two places using an explicit declaration reduces bugs."},{"author":"EdAyers","date":"2019-05-11T17:58:49Z","comment":"Also the root problem is that it doesn't know about `M_PI` and it doesn't know about `pow`."}],"review_discussion":[{"author":"cipher1024","file":"library/init/meta/float.lean","date":"2019-05-10T13:22:32Z","comment":"please give a type to `mantissa`"},{"author":"cipher1024","file":"library/init/meta/float.lean","date":"2019-05-10T13:23:47Z","comment":"`open specification`"},{"author":"cipher1024","file":"tests/lean/float.lean","date":"2019-05-10T13:25:52Z","comment":"put `:=` on previous line"},{"author":"cipher1024","file":"src/library/vm/vm_float.cpp","date":"2019-05-11T18:11:04Z","comment":"Try to include `<math.h>` instead of hard coding `pi`\r\n"},{"author":"EdAyers","file":"src/library/vm/vm_float.cpp","date":"2019-05-11T18:12:04Z","comment":"Didn't including <math.h> cause something else to fail?"},{"author":"cipher1024","file":"src/library/vm/vm_float.cpp","date":"2019-05-11T18:14:02Z","comment":"Yes, I remember replacing it with `cmath`. Let's include both to please Windows and Linux"},{"author":"EdAyers","file":"src/library/vm/vm_float.cpp","date":"2019-05-11T18:14:52Z","comment":"Maybe I am being naive: I feel like hardcoding pi is more robust. It's not like it's a parameter we are going to have to change later."},{"author":"cipher1024","file":"src/library/vm/vm_float.cpp","date":"2019-05-11T18:29:41Z","comment":"I have visceral response to hard coding constants. It's a big software engineering no-no. One reason is that you may not notice if you got it wrong and changed digits. Another is that, if your source is wrong and gets corrected, it won't be reflected in your code. Yet another is that, by putting it in your code, you take responsibility for all the complex considerations that come into writing a floating point number one way instead of another. In general, it's safe to assume that library writers know their stuff and they have put a lot of thought into a lot of aspects of their code and trusting them blindly, although overly simplistic,  is still better than thinking \"this doesn't look hard, I'll redo their work\"."},{"author":"cipher1024","file":"src/library/vm/vm_float.cpp","date":"2019-05-11T19:18:21Z","comment":"You may need to move that to the first line of the file."},{"author":"digama0","file":".travis.yml","date":"2019-05-12T07:16:13Z","comment":"What is this about? Should it still be here now that the PR is merged?"}],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"63c5d9cedd8496552f17979612d175700062770b","message":"Add float vm module.","date":"2019-02-26T11:43:30Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d8d914988d1eb500d230430dc77b9103d77c5be6","message":"Add float.lean","date":"2019-02-26T11:45:10Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a98dc6379f020049f71044e91084a589fc259540","message":"Import float.lean from default.lean.\nImporting in meta/default.lean causes a cyclic dep.","date":"2019-02-26T12:26:03Z"},{"author":"EdAyers","committer":"EdAyers","hash":"126af3bda6c55493cdbeca4ed01e4b35011458e3","message":"Make order of function decs consistent.","date":"2019-02-27T13:05:27Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7944c3244bdb29a56fe79e83b8f370ee64d78a51","message":"Merge branch 'master' into float","date":"2019-04-11T18:32:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"7ff342d55b27435c94f9d73f56d357e3ddeea79a","message":"Merge branch 'master' into float","date":"2019-05-06T14:07:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a56e2340aab8aea94d1e967ca3748d7884e177cc","message":"Draft adding lower float primitives.","date":"2019-05-09T10:54:46Z"},{"author":"EdAyers","committer":"EdAyers","hash":"575be48f2c82460b52e522bc3f302e5cc107bd44","message":"Add float test file. More functions.","date":"2019-05-09T12:20:54Z"},{"author":"EdAyers","committer":"EdAyers","hash":"94faba74a0f876791e4677419302cfbf4965e437","message":"Even more constants.","date":"2019-05-09T12:52:53Z"},{"author":"EdAyers","committer":"EdAyers","hash":"29bd850fc6737ee03c621a0a07d3b8c858992e4e","message":"Merge branch 'master' into float","date":"2019-05-10T09:26:53Z"},{"author":"EdAyers","committer":"EdAyers","hash":"46f58cf5c801f3c4c0560fd67b01cefd8d7c8f88","message":"Refactor to use lambdas. Add test cases.","date":"2019-05-10T12:55:07Z"},{"author":"EdAyers","committer":"EdAyers","hash":"02ee4065410c1017cffe044e94cc1cf9bb663be1","message":"Fix PR review issues.","date":"2019-05-10T13:30:43Z"},{"author":"EdAyers","committer":"EdAyers","hash":"8b42f561a597fedabfd5cf54f47e37d67210332c","message":"Add decidable_le.","date":"2019-05-10T13:40:03Z"},{"author":"cipher1024","committer":"cipher1024","hash":"dabe3b57abcc5b22641760f2e96ca756501d9862","message":"revert back to C++0x","date":"2019-05-10T15:22:47Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c49e7d295262f2d8bebd6585169cf70963136ad1","message":"Prepend `std::` to all float constants.","date":"2019-05-10T16:19:15Z"},{"author":"EdAyers","committer":"EdAyers","hash":"e4bc3472cf7629f7b1e26c0a46f78333e86bfcc2","message":"Fix missing std.","date":"2019-05-10T16:44:17Z"},{"author":"EdAyers","committer":"EdAyers","hash":"eb159fbf909e587a948d9c03b56340a618df571f","message":"Remove tests that are platform dependent.","date":"2019-05-11T13:47:12Z"},{"author":"EdAyers","committer":"EdAyers","hash":"99b02cb7ddafb8ca23e14c15833009461ccaea0e","message":"Fix for windows build.\n\nReplace M_PI with a magic number for windows.\n\nPrepend std:: to pow.","date":"2019-05-11T18:02:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0a687c452da754b7323177511dbd131ae5555230","message":"Remove test that is different on windows.\n\nAlso remove magic PI.","date":"2019-05-11T18:45:46Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c4deef166e930d329a3240fd157f12321518f06c","message":"Fix windows error with `_USE_MATH_DEFINES`.\n\nSee https://stackoverflow.com/questions/26065359/m-pi-flagged-as-undeclared-identifier","date":"2019-05-11T19:13:54Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c8b07fd70484f6a93c20018a7e5d24dbcf289c2b","message":"Move _USE_MATH_DEFINES to the top.","date":"2019-05-11T21:17:46Z"}]},{"author":"EdAyers","number":1,"diff_summary":[{"file":"library/data/buffer/parser.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/algebra/order.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/category/alternative.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/coe.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/core.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/data/array/basic.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/data/repr.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/data/to_string.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/function.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/logic.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/attribute.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/congr_lemma.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/converter/conv.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/environment.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/exceptional.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/expr.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/format.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/fun_info.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/has_reflect.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/hole_command.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/interactive_base.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/level.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/rb_map.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/rec_util.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/ref.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/relation_tactics.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/rewrite_tactic.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/simp_tactic.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/tactic.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/meta/task.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/util.lean","status":"M","additions":617,"deletions":163},{"file":"library/init/wf.lean","status":"M","additions":617,"deletions":163},{"file":"src/frontends/lean/elaborator.cpp","status":"M","additions":617,"deletions":163},{"file":"src/frontends/lean/pp.cpp","status":"M","additions":617,"deletions":163},{"file":"tests/lean/interactive/do_info.lean.expected.out","status":"M","additions":617,"deletions":163},{"file":"tests/lean/run/doc_string1.lean","status":"M","additions":617,"deletions":163}],"state":"merged","open_date":"2019-02-10T16:30:04Z","update_date":"2019-04-20T02:38:12Z","discussion":[{"author":"khoek","date":"2019-04-10T09:48:59Z","comment":"I fixed one of the two failing tests in a pull request, but the other has a `[TODO]` in it so I didn't touch it."},{"author":"khoek","date":"2019-04-15T11:14:38Z","comment":"Boo-hoo on the last build failure, but I'm pretty sure that that was caused by bad luck and not a test failure."}],"review_discussion":[],"tags":[],"commits":[{"author":"EdAyers","committer":"EdAyers","hash":"7d1775bee06ba609a7ba062be2e47dbc36a793f1","message":"add some docstrings","date":"2018-08-28T19:16:38Z"},{"author":"EdAyers","committer":"EdAyers","hash":"2e3be44e66e67cc78dfa331b97d0eaf9f2c9fc9d","message":"Add docstrings to `expr.lean`.","date":"2018-10-09T16:40:33Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a226c2975adf12804355d5737b6c1f2a21027d2c","message":"Add docstrings.","date":"2018-10-27T14:15:31Z"},{"author":"EdAyers","committer":"EdAyers","hash":"8a225bf3bce06293173c040126f7efcc1f3d8e5b","message":"Improve description of macros.","date":"2018-10-27T14:36:52Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d8c4991e0295108b45221c69e3b36cbd380b880a","message":"Docs stubs for simps and funinfo","date":"2018-11-12T17:28:32Z"},{"author":"EdAyers","committer":"EdAyers","hash":"4b583398d150017e1a7c07df1554461bb493de1c","message":"Merge branch 'doc' into docstrings","date":"2018-11-12T17:29:46Z"},{"author":"EdAyers","committer":"EdAyers","hash":"e843fe21680460de6c7376b5fa8fe906411d20b3","message":"More simp_lemmas docstrings","date":"2018-11-12T17:34:28Z"},{"author":"EdAyers","committer":"EdAyers","hash":"8d9ce80df8a8173ffcfa3848f3b7dece323e3964","message":"Merge branch 'master' into doc","date":"2018-11-12T17:35:54Z"},{"author":"EdAyers","committer":"EdAyers","hash":"497311d2b04eb2057b277deb7d5f044bde675385","message":"Add a build script.","date":"2018-11-14T21:52:07Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a27a0ac6f633650e740a7512999a8f686faf2cc1","message":"More documentation for `tactic.lean`.","date":"2018-11-14T21:52:35Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5dcf19a50c597727e0709907ac7e040466f3053a","message":"Fix `heq` docstring.","date":"2018-11-28T10:36:43Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c3d35ba95e89787bdf22ecffd6c3d01d26b85f3d","message":"Add some comments to the notation reservations.","date":"2018-11-28T11:01:27Z"},{"author":"EdAyers","committer":"EdAyers","hash":"dce2d6a9ce281eb6f3168878fb5424d116f04338","message":"Docstrings for parser, array/basic","date":"2018-12-05T15:42:08Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d7faf50889f9f8bf5d5ac9b488630cd6931fa773","message":"Add docstrings for string handling.","date":"2018-12-05T16:16:45Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b3fc150fd85ac4b593ae2f9c8df0618bcbae59a2","message":"Add docstring for `expr.replace`.","date":"2018-12-05T17:14:32Z"},{"author":"EdAyers","committer":"EdAyers","hash":"05abbd2d37e2fd889e56bfa63444be7be486133e","message":"Write all `expr.lean` meta constant docstrings.","date":"2018-12-08T21:59:05Z"},{"author":"EdAyers","committer":"EdAyers","hash":"abbd128e53af0ec3814e1a4c343b193c16a02fab","message":"Merge branch 'master' into doc","date":"2018-12-10T14:19:06Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d39adafa1baf941d4d8cf3bcd782da7359a16484","message":"Start congr_lemma docs","date":"2018-12-10T17:48:11Z"},{"author":"EdAyers","committer":"EdAyers","hash":"1ab421cd005bc8251ed8d6941f5164408adaa452","message":"Add docs for congr_lemma.lean","date":"2018-12-10T19:02:44Z"},{"author":"EdAyers","committer":"EdAyers","hash":"01d3dc8c0c5ee1de7a0b37dd927d6fb57e0d8c10","message":"Write docs for conv.lean","date":"2018-12-10T19:07:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"8c8c293132e7395d91295632b1301f40bfc966aa","message":"Improve docs in `simp_tactic.lean`","date":"2018-12-11T13:07:42Z"},{"author":"EdAyers","committer":"EdAyers","hash":"e98c5b413a1607eb54155e550cd5d700aac1c9a9","message":"Add clarification to `to_expr`","date":"2018-12-11T18:32:18Z"},{"author":"EdAyers","committer":"EdAyers","hash":"3e97849d03d8f720df9cbe45c2be7e0b1246e3f5","message":"Add `simp_lemmas.rewrites` which finds _all_ possible rewrites of a given expression.","date":"2018-12-11T22:07:13Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9dea842aa51542424173cc6806320497134c7db5","message":"Comment out some unreachable C++ that is giving me compiler warnings on mac.","date":"2018-12-11T22:07:48Z"},{"author":"EdAyers","committer":"EdAyers","hash":"a27f5806cc76d6977ae21d3a9df784295a604106","message":"Write docstrings for `fapply` `eapply`.","date":"2018-12-12T16:53:59Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d5a5647248eaa5031767a0d32e441a801faf347b","message":"Merge branch 'doc' into simp_rewrites","date":"2018-12-12T16:54:26Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5a91bb997c0cf8145da52307686f5af0534257b0","message":"Fix silly mistake in `release.sh`","date":"2018-12-12T17:53:04Z"},{"author":"EdAyers","committer":"EdAyers","hash":"95dd6e73054289b18e497b2a3c8750290e4d8954","message":"Get simp_lemmas_rewrites_core to return an empty list of lemmas if it fails.","date":"2018-12-13T14:20:24Z"},{"author":"EdAyers","committer":"EdAyers","hash":"710dbde833b9a22ef0206d61af47badefa010e74","message":"Fix getting expr constructor pretty vs unique names the wrong way round.","date":"2018-12-13T14:23:06Z"},{"author":"EdAyers","committer":"EdAyers","hash":"42b13c61e0521444aa45a6564db838280ed5bcc2","message":"Add clarification to `simp_lemmas`","date":"2018-12-13T14:23:22Z"},{"author":"EdAyers","committer":"EdAyers","hash":"0d5047ee8698632439fae6f544e785565f7bb836","message":"Add a TODO to docstring.","date":"2018-12-13T14:23:34Z"},{"author":"EdAyers","committer":"EdAyers","hash":"5ee85193c63d471f687a1a93da23c87ca30f8b43","message":"Revert code change from doc branch.","date":"2018-12-17T13:40:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b17abe2a94b14d9d4f5c966fc9fa9ac244d27698","message":"Merge branch 'master' into doc","date":"2018-12-19T15:35:37Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9bb43ffd4bec9d1b0dc04afbe3487a11846b7298","message":"Docstring for `format.line`.","date":"2018-12-28T18:24:13Z"},{"author":"EdAyers","committer":"EdAyers","hash":"115f9d0820c92055cdce592ec15e550b01b10a46","message":"Add explanation of format.nest","date":"2019-01-03T19:32:46Z"},{"author":"EdAyers","committer":"EdAyers","hash":"08491dd25d826e78089b27f4fc36814381c49b1a","message":"Fix repr docstrings.","date":"2019-01-10T15:58:36Z"},{"author":"EdAyers","committer":"EdAyers","hash":"242d35ac539867bea3a7207bd0cda552a429be34","message":"Docs for intro.","date":"2019-01-14T20:31:35Z"},{"author":"EdAyers","committer":"EdAyers","hash":"c4059734de6d8c1b964a40177b79c15b3ccf138d","message":"Docs for `expr.lower_vars`.","date":"2019-01-14T20:31:51Z"},{"author":"EdAyers","committer":"EdAyers","hash":"956ddc402a3b5704cfdc050d28b78f33009e8426","message":"Merge branch 'master' into doc","date":"2019-01-21T14:42:06Z"},{"author":"EdAyers","committer":"EdAyers","hash":"3e03c584270d8d2ae4bdcd8a872548086c728e16","message":"Add docstrings for attribute.lean","date":"2019-01-31T14:42:30Z"},{"author":"EdAyers","committer":"EdAyers","hash":"6370f584828c1d513177d1439ae4e19a76fa2831","message":"Trim trailing whitespace in core.lean","date":"2019-02-10T14:09:09Z"},{"author":"EdAyers","committer":"EdAyers","hash":"68e6eda728b6f937e54adb6fc123a2b64deb883e","message":"Tweak some docstrings","date":"2019-02-10T16:09:23Z"},{"author":"EdAyers","committer":"EdAyers","hash":"be52d03b8a1c40b5fb456a706a21fed740b2d30e","message":"Add missing space to description in pp.cpp file.","date":"2019-02-10T16:09:43Z"},{"author":"EdAyers","committer":"EdAyers","hash":"3d1e166238facc0db474781fdd55c96a5262e962","message":"Add space before `\\--` descriptions.","date":"2019-02-10T16:12:02Z"},{"author":"EdAyers","committer":"EdAyers","hash":"261508cf7e2eebcfeb72ea52ad11dd966a9d39a2","message":"Remove a release script.","date":"2019-02-10T16:12:56Z"},{"author":"EdAyers","committer":"EdAyers","hash":"f383eeeb17dd4e09a07de844ee26ba0a204898da","message":"Revert non-documentation change to sourcecode that\nshouldn't have been committed.","date":"2019-02-10T16:14:19Z"},{"author":"EdAyers","committer":"EdAyers","hash":"e527c9d1e2d3eaa1909018f1c511f66b8ffe9581","message":"Add docs for projection_info","date":"2019-02-13T17:49:21Z"},{"author":"EdAyers","committer":"EdAyers","hash":"b17c8a6a6b9e0a76291cbda33c3a3b01806384af","message":"Add caveat to `is_ginductive`.","date":"2019-02-25T19:05:20Z"},{"author":"EdAyers","committer":"EdAyers","hash":"9172ff7cfb862be7444bafd44b5ffb233a79aa78","message":"Add fingerprint docstrings.","date":"2019-02-25T19:13:30Z"},{"author":"EdAyers","committer":"EdAyers","hash":"34b7564a1286fddc04c1417bed6ed40168c050a5","message":"Add some descriptions for the different orders.","date":"2019-04-03T16:15:43Z"},{"author":"EdAyers","committer":"EdAyers","hash":"dd5e150dd985734883fbf8cf573241aba88e2028","message":"Add more docstrings for tactic.lean","date":"2019-04-03T16:16:30Z"},{"author":"khoek","committer":"khoek","hash":"49ef5c19ac94736c192365818f90580fccc13186","message":"Fix one of the two failing tests","date":"2019-04-10T09:41:57Z"},{"author":"EdAyers","committer":"EdAyers","hash":"cf74ec7f7916a36178bfcc253a39b3dc8505e73f","message":"Merge with master.","date":"2019-04-14T16:51:35Z"},{"author":"EdAyers","committer":"EdAyers","hash":"da0ed7d165a87e16eb6d188916982d52e3650cb1","message":"Remove docstring for `tactic.abstract`.\n\nBecause it is explained in `interactive.abstract`.","date":"2019-04-14T19:20:24Z"},{"author":"EdAyers","committer":"EdAyers","hash":"d48de9a47daa8f5ee9a86eacb35d51d6a32f5ce7","message":"Add more congr_lemma docstrings.","date":"2019-04-14T19:20:59Z"},{"author":"EdAyers","committer":"EdAyers","hash":"dd2ec4abafef336abbad8ed3f462c48159423e6f","message":"Merge branch 'master' into doc","date":"2019-04-14T19:45:27Z"},{"author":"cipher1024","committer":"web-flow","hash":"140207855e613c8777e4968e51a82c1abf8a02c2","message":"Merge branch 'master' into doc","date":"2019-04-19T23:15:50Z"}]}]