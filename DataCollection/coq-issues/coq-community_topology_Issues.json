[{"author":"Columbus240","number":42,"state":"open","open_date":"2022-06-24T19:38:30Z","update_date":"2022-06-24T19:40:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":41,"state":"open","open_date":"2022-06-18T18:25:50Z","update_date":"2022-06-26T11:53:57Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":40,"state":"closed","open_date":"2022-02-12T22:12:00Z","update_date":"2022-06-17T07:19:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":39,"state":"closed","open_date":"2022-02-07T07:58:57Z","update_date":"2022-06-24T20:35:40Z","discussion":[{"author":"Columbus240","date":"2022-02-07T08:01:02Z","comment":"> Maybe we should consider creating a separate directory for examples – since it would inevitably require supplementary lemmas unrelated to topology, that have a little value outside it. Among real number lemmas above, perhaps, only `sin x < x` is useful, so I submitted it to the standard library - see https://github.com/coq/coq/pull/15599.\r\n\r\nSounds reasonable to me."},{"author":"stop-cran","date":"2022-02-07T10:02:19Z","comment":"> The reference asin was not found in the current environment.\r\n\r\nLooks like `asin` was not defined in versions 8.11 and 8.10."},{"author":"Columbus240","date":"2022-02-07T10:58:14Z","comment":"We could drop support to 8.10 & 8.11 if we want.\r\n\r\nI looked more closely over your work. We could avoid defining the function from S¹ to [0,1] explicitly, by using the theorem that any continuous function from a compact to a Hausdorff space is an embedding (a homeomorphism onto its image). Because the function `f_inv : [0,1]/{0,1} → S¹` is such a function, we can spare ourselves the technical details of the inverse map.\r\nAlso, we can simplify the definition of `f_inv` as\r\n```coq\r\nDefinition circle_cover (t : RTop) : ProductTopology2 RTop RTop :=\r\n  (cos (2*PI*t), sin (2*PI*t)).\r\n\r\nAxiom circle_cover_image : forall t, In S1_Ensemble (circle_cover t).\r\n\r\nAxiom f_inv_helper : forall (x y : UnitInterval) :\r\n  SpaceAdjunction (Couple U0 U1) x y ->\r\n  (fun x => exist _ (circle_cover (subspace_inc _ x)) (circle_cover_image _)) x =\r\n  (fun x => exist _ (circle_cover (subspace_inc _ x)) (circle_cover_image _)) y.\r\n\r\nDefinition f_inv : ClosedUnitInterval -> S1 :=\r\n  induced_function\r\n    (fun x => exist _ (circle_cover (subspace_inc _ x)) _)\r\n    (SpaceAdjunction_equivalence _) f_inv_helper.\r\n```\r\n\r\nUsing some (new) lemmas about the properties of `induced_function`, we can reduce the length of the proofs and remove technical details, by staying \"more conceptual\"."},{"author":"Columbus240","date":"2022-02-07T21:53:23Z","comment":"I am so free and push some changes, implementing the above sketch.\r\nAbove I claimed\r\n> We could avoid defining the function from S¹ to [0,1] explicitly, by using the theorem …\r\n\r\nBut this is wrong. For surjectivity we still need to do define this function. At least we can avoid concerning ourselves with continuity of that function, or we could define the function only inside the proof.\r\n\r\nThe largest proofs are currently `circle_cover_inj`, `circle_cover_preimage` (less so) and `f_inv_bijective`. A lot of time they spend shuffling real numbers around.\r\nErm, there are some redundancies in a proof (I pose both `PI > 0` and `PI <> 0`) and the commit a18aac7 should not be in this branch."},{"author":"Columbus240","date":"2022-02-12T11:09:39Z","comment":"The theorems `cos_inj` and `sin_inj` of the stdlib were only added in https://github.com/coq/coq/commit/aa9926492feaf8326f379469a555f77393fcd306, which is part of v8.12. If we wanted this branch to be compatible with v8.10 and v8.11 we would need to add the theorems to our library ourselves or get them from another dependency.\r\nI don't think either of these things is worth it and propose removing support for v8.10 and v8.11. Because I don't know of any project that makes use of this library, I think it's ok to do so. Dropping support for v8.10 would also allow us to fix the `deprecated-ident-entry` warnings of v8.13 and upwards (see #17)."},{"author":"stop-cran","date":"2022-02-14T12:36:24Z","comment":"@Columbus240 I agree to remove support for v8.10 and v8.11, because apart from the last issue, we have missing definition of `asin` and related lemmas."},{"author":"Columbus240","date":"2022-02-14T13:03:54Z","comment":"Ok, then I will make a new release and then drop support in `master`.\r\nYou may have seen already: I pushed my previous notes on the product of Ensembles to `master`."},{"author":"Columbus240","date":"2022-06-24T20:35:03Z","comment":"I extracted those lemmas out of Examples/S1.v which I found worthy. If we did more work involving the reals or trigonometry, we might need the other ones too, but that can be done as necessary. The rest of the commits I squashed down.\r\nI moved the file into a separate folder, as we discussed.\r\nI'll merge this, as it is now."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":38,"state":"closed","open_date":"2022-02-06T12:09:59Z","update_date":"2022-02-12T10:25:07Z","discussion":[{"author":"Columbus240","date":"2022-02-12T10:25:01Z","comment":"For lack of response, I'll merge this."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":37,"state":"open","open_date":"2022-02-06T10:40:17Z","update_date":"2022-02-06T10:40:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"stop-cran","number":36,"state":"closed","open_date":"2022-02-02T16:21:46Z","update_date":"2022-02-07T07:43:15Z","discussion":[{"author":"stop-cran","date":"2022-02-04T17:43:43Z","comment":"@Columbus240 I like an idea with ℝ/ℤ as unit interval with glued ends. However, my further idea is to generalize this homeomorphism to n+1-sphere being homeomorphic to a suspension of n-sphere, starting from a discrete two-point space as 0-sphere. So unit interval would be needed to define suspension. "},{"author":"Columbus240","date":"2022-02-06T10:23:51Z","comment":"Hmm. I don't think we can re-use the approach of [0,1]/{0,1} being homeomorphic to S¹, when dealing with the suspension of S⁰, because S⁰ ×[0,1] is \"two parallel line segments\" which then get glued together to form a circle.\r\n\r\nHaving a fixed definition of the space [0,1] in the library is useful, without doubt. When I formalized the basics of homotopy (in some branch), I also needed to introduce that. We should probably define it in a separate file (maybe in a folder \"spaces\").\r\n\r\nSide note: The approach of using ℝ/ℤ doesn't generalize to spheres in higher dimensions but to tori. (i.e. ℝ^n/ℤ^n is some torus, which is homeomorphic to the n-fold product of S¹)"},{"author":"Columbus240","date":"2022-02-06T10:47:02Z","comment":"Could you create a branch in the common repo (coq-community/topology) for this? Then I could work on it as well."},{"author":"stop-cran","date":"2022-02-07T07:43:15Z","comment":"Maybe we should consider creating a separate directory for examples - since it would inevitably require supplementary lemmas unrelated to topology, that have a little value outside it. Among real number lemmas above, perhaps, only `sin x < x` is useful, so I submitted it to the standard library - see https://github.com/coq/coq/pull/15599."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":35,"state":"open","open_date":"2021-08-21T09:46:57Z","update_date":"2021-08-21T09:46:57Z","discussion":[],"tags":[{"tag":"enhancement","description":null}],"pull_requests":[]},{"author":"Columbus240","number":34,"state":"open","open_date":"2021-08-19T12:34:56Z","update_date":"2022-02-14T20:49:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":33,"state":"closed","open_date":"2021-08-19T09:02:56Z","update_date":"2021-08-20T12:38:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"siraben","number":32,"state":"open","open_date":"2021-07-31T14:36:09Z","update_date":"2021-08-15T10:36:17Z","discussion":[{"author":"stop-cran","date":"2021-08-02T12:40:39Z","comment":"According to the definition the reduced goal is:\r\n```\r\nSame_set (FamilyUnion F) (Singleton b) \\/\r\nSame_set (FamilyUnion F) (Couple b c) \\/ Same_set (FamilyUnion F) (Couple a b) \\/ Same_set (FamilyUnion F) Full_set\r\n```\r\nSo we just need a classical choice on whether a, b, and c are in the set:\r\n```\r\ndestruct (classic (In (FamilyUnion F) a)), (classic (In (FamilyUnion F) b)), (classic (In (FamilyUnion F) c)).\r\n```\r\nThus you gain 8 subgoals, each of them is pretty straightforward."},{"author":"siraben","date":"2021-08-02T13:00:37Z","comment":"Thanks, that helps but I have the following goal which seems impossible:\r\n\r\n```\r\n  F : Family X\r\n  HF : forall S : Ensemble X, In F S -> T S\r\n  H : In (FamilyUnion F) a\r\n  H0 : ~ In (FamilyUnion F) b\r\n  H1 : In (FamilyUnion F) c\r\n  ============================\r\n  Same_set (FamilyUnion F) (Singleton b) \\/\r\n  Same_set (FamilyUnion F) (Couple b c) \\/\r\n  Same_set (FamilyUnion F) (Couple a b) \\/\r\n  Same_set (FamilyUnion F) Full_set\r\n```"},{"author":"stop-cran","date":"2021-08-03T10:42:51Z","comment":"As any topology, `T` should include `Empty_set`. Adding it solves the problem:\r\n```coq\r\nFrom Coq Require Import Ensembles.\r\nFrom ZornsLemma Require Import EnsemblesTactics.\r\nFrom Topology Require Import TopologicalSpaces.\r\n\r\nSection TopSpaceEx1.\r\n\r\nInductive X : Type := a | b | c.\r\n\r\nDefinition T (x : Ensemble X) : Prop := Same_set x Empty_set\r\n                                     \\/ Same_set x (Singleton b)\r\n                                     \\/ Same_set x (Couple b c)\r\n                                     \\/ Same_set x (Couple a b)\r\n                                     \\/ Same_set x Full_set.\r\n\r\nLtac split_destruct_x :=\r\nsplit; red; intros x ?; destruct x.\r\n\r\nLtac destruct_or :=\r\nrepeat match goal with\r\n   | [H: _ \\/ _ |- _] => destruct H as [H | H]\r\n   | [H: Same_set _ _ |- _] => apply Extensionality_Ensembles in H\r\nend; subst.\r\n\r\nLtac firstorder_or tac :=\r\nmatch goal with\r\n   | [ |- _ \\/ _] => try (left; firstorder_or tac); try (right; firstorder_or tac)\r\n   | _ => tac; fail\r\nend. \r\n\r\nLemma T_is_topology : TopologicalSpace.\r\nProof.\r\nrefine (Build_TopologicalSpace X T _ _ ltac:(firstorder));\r\n  intros; unfold T in *.\r\n- destruct (classic (In (FamilyUnion F) a)),\r\n           (classic (In (FamilyUnion F) b)),\r\n           (classic (In (FamilyUnion F) c));\r\n    firstorder_or ltac:(split_destruct_x; easy + constructor);\r\n    match goal with\r\n       | [HH: In _ _ |- _] => inversion HH\r\n    end;\r\n    pose proof (H _ H3);\r\n    destruct_or;\r\n    easy + contradict H1;\r\n    repeat (econstructor + eassumption).\r\n- destruct_or;\r\n    firstorder_or ltac:(now repeat (split_destruct_x; inversion_ensembles_in) + constructor).\r\nQed.\r\n\r\nEnd TopSpaceEx1.\r\n```"},{"author":"siraben","date":"2021-08-04T04:53:39Z","comment":"Ah, interesting. I assumed that adding the empty set would be redundant because this was already proven in `TopologicalSpaces.v`\r\n\r\n\r\n```coq\r\nLemma open_empty: forall X:TopologicalSpace, open (@Empty_set X).\r\n```"},{"author":"stop-cran","date":"2021-08-04T14:55:04Z","comment":"`open_empty` implies `T` is topology, which implies that it contains `Empty_set`.\r\nHowever, one don't need an empty set in a base. For the topology above there exists a base consisting of `Singleton b`, `Couple a b` and `Couple b c`. By the way, building the same topology from base looks easier:\r\n```coq\r\nFrom Coq Require Import Ensembles.\r\nFrom ZornsLemma Require Import EnsemblesTactics.\r\nFrom Topology Require Import TopologicalSpaces OpenBases.\r\n\r\nSection TopSpaceEx1.\r\n\r\nInductive X : Type := a | b | c.\r\n\r\nLtac destruct_or :=\r\nrepeat match goal with\r\n   | [H: _ \\/ _ |- _] => destruct H as [H | H]\r\n   | [H: Same_set _ _ |- _] => apply Extensionality_Ensembles in H\r\nend; subst.\r\n\r\nDefinition B (x : Ensemble X) : Prop := Same_set x (Singleton b)\r\n                                     \\/ Same_set x (Couple b c)\r\n                                     \\/ Same_set x (Couple a b).\r\n\r\nLemma B_couple_a : forall W, In W a -> In B W -> W = (Couple a b).\r\nProof.\r\nintros.\r\nextensionality_ensembles_inv;\r\n  destruct_or;\r\n  try apply Extensionality_Ensembles in H2;\r\n  subst;\r\n  try destruct H1;\r\n  easy + right.\r\nQed.\r\n\r\nLemma B_couple_c : forall W, In W c -> In B W -> W = (Couple b c).\r\nProof.\r\nintros.\r\nextensionality_ensembles_inv;\r\n  destruct_or;\r\n  try apply Extensionality_Ensembles in H2;\r\n  subst;\r\n  try destruct H1;\r\n  easy + left.\r\nQed.\r\n\r\nLemma B_is_basis : TopologicalSpace.\r\nProof.\r\nrefine (Build_TopologicalSpace_from_open_basis B _ _);\r\n  red; intros;\r\n  try destruct H1;\r\n  destruct x.\r\n- rewrite (B_couple_a _ H1 H), (B_couple_a _ H2 H0).\r\n  exists (Couple a b).\r\n  repeat split; trivial + (do 3 constructor);\r\n  now red; intros.\r\n- exists (Singleton b).\r\n  repeat split;\r\n    try now destruct H3.\r\n  left.\r\n  now split; red; intros.\r\n- rewrite (B_couple_c _ H1 H), (B_couple_c _ H2 H0).\r\n  exists (Couple b c).\r\n  repeat split; trivial + (do 3 constructor);\r\n  now red; intros.\r\n- exists (Couple a b).\r\n  now repeat (right + constructor).\r\n- exists (Singleton b).\r\n  now repeat constructor.\r\n- exists (Couple b c).\r\n  now repeat (right + constructor).\r\nQed.\r\n\r\nEnd TopSpaceEx1.\r\n```"},{"author":"Columbus240","date":"2021-08-15T10:36:16Z","comment":"Constructing the topological space from a subbasis should be even easier, because subbases don't have to satisfy any conditions."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":31,"state":"closed","open_date":"2021-06-02T09:54:25Z","update_date":"2021-06-25T09:26:18Z","discussion":[{"author":"Columbus240","date":"2021-06-25T09:21:46Z","comment":"Since nobody commented, I’ll merge this branch."},{"author":"Columbus240","date":"2021-06-25T09:26:18Z","comment":"Huh, I expected github to fast-forward."}],"tags":[],"pull_requests":[]},{"author":"siraben","number":30,"state":"open","open_date":"2021-05-24T17:21:15Z","update_date":"2022-02-14T12:20:35Z","discussion":[{"author":"Columbus240","date":"2021-06-01T21:30:45Z","comment":"I took the liberty to give a more general result, relating global and local homeomorphisms and using it to change the proof of `locally_homeomorphic_refl`.\r\nI think we could/should do the following:\r\n- [ ] Fix the compilation errors found by the CI.\r\n- [ ] Move the definition of `restriction` to ZornsLemma, if some more lemmas or theorems about it become relevant. Since it does not depend on a topology.\r\n- [ ] Maybe look for a simpler or \"better\" proof of `homeomorphism_restriction`. The one I gave was hastily given. But it probably doesn’t matter much.\r\n- [ ] For second-countability of `EuclideanSpace n`, maybe prove/use the fact that finite products of second-countable spaces are second-countable again. Since `Sphere n` is a subset of an `EuclideanSpace n`, we get second-countability as well.\r\n- [ ] To prove that `EuclideanSpace n` and `Sphere n` are Hausdorff, we only need to recall that they are metric spaces and all metric spaces are Hausdorff.\r\n- [ ] The proof that `RTop` and `EuclideanSpace 1` could be finished. The second equality needs a nasty induction/inversion on a member of `Vector`. Maybe `g` has to be defined differently for it to work well, or there could be a more general statement hiding."}],"tags":[],"pull_requests":[]},{"author":"siraben","number":29,"state":"open","open_date":"2021-05-24T09:27:01Z","update_date":"2022-06-24T20:44:03Z","discussion":[{"author":"stop-cran","date":"2021-05-24T15:24:01Z","comment":"For local homeomorphism I'd propose the following definition:\r\n\r\n```\r\nFrom Topology Require Import Homeomorphisms SubspaceTopology.\r\n\r\nDefinition restriction {X Y: Type} (f : X -> Y) (U : Ensemble X): {x | U x} -> {y | Im U f y}.\r\nintro x.\r\napply (exist _ (f (proj1_sig x))).\r\napply (Im_intro _ _ _ _ _ (proj2_sig x)).\r\nreflexivity.\r\nDefined.\r\n\r\nInductive local_homeomorphism {X Y : TopologicalSpace}\r\n                              (f : point_set X -> point_set Y) : Prop :=\r\n| intro_local_homeomorphism:\r\n  (forall (x: point_set X),\r\n    exists U:Ensemble (point_set X),\r\n      open_neighborhood U x /\\\r\n      open (Im U f) /\\\r\n      @homeomorphism (SubspaceTopology U) (SubspaceTopology (Im U f)) (restriction f U)) ->\r\n    local_homeomorphism f.\r\n```\r\n\r\nFeel free to submit a PR with more definitions and proofs!"},{"author":"siraben","date":"2021-05-24T16:14:40Z","comment":"With more Euclidean space theories we would be able to talk about Riemannian and pesudo-Riemannian manifolds"},{"author":"siraben","date":"2021-05-25T03:04:21Z","comment":"@stop-cran because of the use of sigmas in `restriction`, it seems to make proving some things more difficult such as, in proving `locally_homeomorphic` is reflexive, it requires one to prove the goal\r\n\r\n```coq\r\ncontinuous (restriction (fun p : X => p) Full_set)\r\n```\r\n\r\nSo, naturally one would like to prove something like `restriction (fun p : X => p) Full_set = (fun p : X => p)`, but it fails:\r\n\r\n```coq\r\nFail Lemma restriction_full (X : TopologicalSpace) :\r\n  restriction (fun p : X => p) Full_set = (fun p : X => p).\r\n(* The command has indeed failed with message: *)\r\n(* Found type \"point_set X\" where \"{x : X | Full_set x}\" was expected. *)\r\n```\r\n\r\nHow would I deal with this, would I have to use projections?"},{"author":"stop-cran","date":"2021-05-25T03:36:24Z","comment":"@siraben restriction of a function on a full set, similar to `SubspaceTopology Full_Set` looks like a place, where mathematicians implicitly use the univalence axiom. For Coq `f` and `restriction f Full_Set` are still different objects though. I'll try to prove some simple facts a bit later and see if we can come up with a more convenient definition. "},{"author":"siraben","date":"2021-05-25T03:44:13Z","comment":"@stop-cran thank you, I'll familiarize myself with the style of proof and definitions in the topology library. The tracking PR is #30, branch `manifolds`"},{"author":"stop-cran","date":"2021-05-25T08:57:42Z","comment":"@siraben try this proof for `locally_homeomorphic_refl`:\r\n```\r\nFrom Topology Require Import Homeomorphisms.\r\nFrom Topology Require Import SubspaceTopology.\r\nFrom Coq Require Import Image.\r\n\r\nDefinition restriction {X Y: Type} (f : X -> Y) (U : Ensemble X): {x | U x} -> {y | Im U f y}.\r\nintro x.\r\nexists (f (proj1_sig x)).\r\nnow apply (Im_intro _ _ _ _ _ (proj2_sig x)).\r\nDefined.\r\n\r\nInductive local_homeomorphism {X Y : TopologicalSpace}\r\n                              (f : point_set X -> point_set Y) : Prop :=\r\n| intro_local_homeomorphism:\r\n  (forall (x: point_set X),\r\n    exists U:Ensemble (point_set X),\r\n      open_neighborhood U x /\\\r\n      open (Im U f) /\\\r\n      @homeomorphism (SubspaceTopology U) (SubspaceTopology (Im U f)) (restriction f U)) ->\r\n    local_homeomorphism f.\r\n\r\nDefinition locally_homeomorphic (X Y:TopologicalSpace) : Prop :=\r\n  exists (f : point_set X -> point_set Y), local_homeomorphism f.\r\n\r\nLemma homeomorphism_refl (X : TopologicalSpace) : @homeomorphism X X id.\r\nProof.\r\neconstructor;\r\n  (apply continuous_identity || now intros).\r\nQed.\r\n\r\nLemma restriction_continuous {X Y: TopologicalSpace} (f : point_set X -> point_set Y) (U : Ensemble X):\r\n  continuous f -> @continuous (SubspaceTopology U) (SubspaceTopology (Im U f)) (restriction f U).\r\nProof.\r\n  intros Hcont V [F H].\r\n  rewrite inverse_image_family_union_image.\r\n  apply open_family_union.\r\n  intros.\r\n  destruct H0.\r\n  subst.\r\n  apply H in H0.\r\n  clear H F V.\r\n  induction H0.\r\n  - match goal with\r\n     | [ |- open ?S ] => replace S with (@Full_set (SubspaceTopology U))\r\n    end.\r\n    + apply open_full.\r\n    + extensionality_ensembles;\r\n        repeat constructor.\r\n  - destruct H, a.\r\n    match goal with\r\n     | [ |- open ?S ] => replace S with (inverse_image (subspace_inc U) (inverse_image f V))\r\n    end.\r\n    + now apply subspace_inc_continuous, Hcont.\r\n    + extensionality_ensembles;\r\n        now repeat constructor.\r\n  - rewrite inverse_image_intersection.\r\n    now apply open_intersection2.\r\nQed.\r\n\r\nDefinition full_set_unrestriction (X : TopologicalSpace):\r\n  @SubspaceTopology X (@Im X X (@Full_set X) (@id X)) -> @SubspaceTopology X (@Full_set X).\r\nintro x.\r\nnow exists (proj1_sig x).\r\nDefined.\r\n\r\nLemma full_set_unrestriction_continuous (X : TopologicalSpace): continuous (full_set_unrestriction X).\r\nProof.\r\n  intros V [F H].\r\n  rewrite inverse_image_family_union_image.\r\n  apply open_family_union.\r\n  intros.\r\n  destruct H0.\r\n  subst.\r\n  apply H in H0.\r\n  induction H0.\r\n  - rewrite inverse_image_full_set.\r\n    apply open_full.\r\n  - destruct H0, a.\r\n    unfold full_set_unrestriction.\r\n    match goal with\r\n     | [ |- open ?S ] => replace S with (inverse_image (subspace_inc (Im (@Full_set X) id)) V0)\r\n    end.\r\n    + now apply subspace_inc_continuous.\r\n    + extensionality_ensembles;\r\n        now repeat constructor.\r\n  - rewrite inverse_image_intersection.\r\n    now apply open_intersection2.\r\nQed.\r\n\r\nLemma locally_homeomorphic_refl (X : TopologicalSpace) : locally_homeomorphic X X.\r\nProof.\r\n  exists id.\r\n  constructor.\r\n  intro.\r\n  exists Full_set.\r\n  repeat split.\r\n  - apply X.\r\n  - replace (Im Full_set id) with (@Full_set X).\r\n    + apply X.\r\n    + extensionality_ensembles;\r\n        repeat econstructor.\r\n  - econstructor.\r\n    + apply restriction_continuous, continuous_identity.\r\n    + apply full_set_unrestriction_continuous.\r\n    + now intros [x0 []].\r\n    + intros [x0 [x1 [] ?]].\r\n      now subst.\r\nQed.\r\n```"},{"author":"siraben","date":"2021-05-25T09:35:26Z","comment":"@stop-cran great, this works!"},{"author":"siraben","date":"2021-05-25T09:58:28Z","comment":"How would you express the notion of an atlas? I'm not sure if I should use an IndexedFamily or Ensemble here (maybe there are resources you could recommend, since I've mostly learned via Software Foundations and CPDT).\r\n\r\n> A collection of charts {x_α : U_α → U_α′ } covering M (i.e. such that the union ⋃U_α of the chart domains is M) is called an atlas."},{"author":"siraben","date":"2021-05-25T11:33:22Z","comment":"@stop-cran Ah, the problem with\r\n\r\n```coq\r\nDefinition locally_homeomorphic (X Y:TopologicalSpace) : Prop :=\r\n  exists (f : point_set X -> point_set Y), local_homeomorphism f.\r\n```\r\n\r\nIs that it fixes an `f` that would work globally over `X`, whereas in differential topology it is allowed for chart domains to overlap (and have possibly different outputs)."},{"author":"stop-cran","date":"2021-05-25T14:17:34Z","comment":"@siraben `Family` is more generic, since does not require an explicit indices, whereas `IndexedFamily` is sometimes easier to use. One more thought is about functoriality. Since `Ensemble` is a contravariant functor on it's single argument `T` (as any function type on it's input argument), `Family` as a composition of two contravariant functors is a (covariant) functor. Whereas `IndexedFamily A` is contravariant functor on `T`. It depends which functoriality is better in each case."},{"author":"Columbus240","date":"2021-06-01T12:28:50Z","comment":"Hello @siraben.\r\n\r\nWe might want to introduce a dependency on a linear algebra library for definitions and properties of vector spaces. Otherwise we need to introduce all this ourselves as we go.\r\nI don’t think we can introduce differential geometry/topology easily without some major parts of analysis. I know I don’t have the time to develop such a theory, but feel free to do so. I think using an existing library could make it easier.\r\nI haven’t yet looked around for libraries that’d make good candidates."},{"author":"siraben","date":"2021-06-01T13:26:46Z","comment":"> We might want to introduce a dependency on a linear algebra library for definitions and properties of vector spaces.\n\nYes, this would be necessary when we talk about immersions, embeddings and the rank theorem.\n\n> I don’t think we can introduce differential geometry/topology easily without some major parts of analysis.\n\nThis seems necessary to do as well, since partial derivatives in Rⁿ and the Jacobian come up quite often. I have only worked with the stdlib's real analysis but I've read that [Coquelicot](http://coquelicot.saclay.inria.fr/) is well-designed."},{"author":"Columbus240","date":"2021-06-01T21:51:54Z","comment":"I can’t take the time at the moment to inform myself, which library would be appropriate etc. Can’t support you in that regard. But Coquelicot seems ok at first glance, but I didn’t find out whether the library is still supported. There might be some other libraries for real analysis and linear algebra floating around in coq-community, the ssreflect or the mathematical-components communities.\r\n\r\nEdit: I should be honest: I am not interested enough in developing the theory of manifolds, to help decide on a library. It isn’t so much a problem of having time.\r\nBut if you find a library that works, feel free to create pull requests etc to add it."},{"author":"Columbus240","date":"2021-08-21T08:44:33Z","comment":"Maybe we can avoid depending a lot on the construction of euclidean spaces, if we first characterize them up to homeomorphism and then work with \"axiomatized euclidean spaces\".\r\nWe still would need to construct one example of R^n, to show our axiomatization is correct, and would still need to choose a library for linear algebra, before we could develop theory about manifolds."},{"author":"Columbus240","date":"2021-12-18T12:48:01Z","comment":"We could do the\r\n- [ ] Classification of compact manifolds without boundary.\r\nA proof is included in Munkres' Topology book. For a part of the proof a separate paper is needed, which is referenced in the book."},{"author":"Columbus240","date":"2022-06-24T20:44:03Z","comment":"We have a proof that glueing the ends of an interval together results in a circle. This is an example of a more general construction, described in \"[suspension of spheres](https://ncatlab.org/nlab/show/suspension#suspension_of_spheres)\" on the nlab. There's links to other more or less algebraic results on constructions of manifolds. (I wanted to preserve this note from #39) So another possibility is\r\n- [ ] Introduce the \"suspension\" construction and prove that it maps spheres to spheres."}],"tags":[{"tag":"enhancement","description":null}],"pull_requests":[]},{"author":"Columbus240","number":28,"state":"open","open_date":"2021-02-07T22:11:36Z","update_date":"2022-02-14T20:49:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":27,"state":"open","open_date":"2021-02-06T21:18:43Z","update_date":"2021-02-06T21:18:43Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":26,"state":"open","open_date":"2021-01-10T14:17:35Z","update_date":"2022-02-14T20:49:10Z","discussion":[{"author":"siraben","date":"2021-05-24T16:11:52Z","comment":"Maybe this would be good for #29 as well"},{"author":"Columbus240","date":"2021-06-01T21:41:21Z","comment":"Maybe we should first \"stabilize\" this branch on euclidean spaces, before doing a lot of work on manifolds #29. I consider my work here very ad-hoc and not very well structured. Names and formatting could be improved, I think. Maybe the definitions could be improved as well.\r\nThe changes you (@siraben) added to EuclideanSpaces.v could be moved from branch #30 to here.\r\n\r\nUnrelated to manifolds: The theorem that all norms on ℝ^n generate the same topology would be nice to have. By using the basis of open-balls, it suffices to show that there exist `C, c ∈ ℝ` such that `C ||x|| ≥ |x| ≥ c ||x||`, if `|| . ||` is the euclidean norm and `| . |` is some other norm (or reversed). From this the general statement follows quickly."}],"tags":[],"pull_requests":[]},{"author":"stop-cran","number":25,"state":"open","open_date":"2021-01-08T19:35:57Z","update_date":"2022-02-06T10:23:15Z","discussion":[{"author":"Columbus240","date":"2021-01-10T14:11:46Z","comment":"A nice way to define spheres, would be as `SubspaceTopology (inverse_image (euclidean_norm_on_R^n) (Singleton 1))`. So some theory about finite products and finite dimensional euclidean spaces would be useful in this setting.\r\nUsing the Heine-Borel property of R^n we can then show that spheres are compact.\r\n\r\nI made a sketch on a separate [branch](https://github.com/coq-community/topology/tree/WIP_EuclideanSpaces).\r\n\r\nWhile playing around, I noticed that working with `SubspaceTopology` is very clunky and needs a lot of boilerplate, translating between `X` and `{ x : X | In S x }`. Doing this to functions & ensembles makes everything a lot more difficult.\r\nHow about introducing a notion of \"open_in_subspace\" or somesuch, as\r\n```coq\r\nDefinition open_in_subspace\r\n  {X : TopologicalSpace}\r\n  (S : Ensemble (point_set X))\r\n  (U : Ensemble (point_set X)) :=\r\n    Included U S /\\ exists U', open U' /\\ U = Intersection S U'.\r\n```\r\nAnd similar notion for compactness? Or at least a lemma that maps from `U : Ensemble (point_set (SubspaceTopology S)), open U` to `open_in_subspace`."},{"author":"Columbus240","date":"2021-08-20T15:10:21Z","comment":"The definition `open_in_subspace` is unnecessary, now that `subspace_open_char` is an equivalence. But more a definition of `compact_subspace` would still be nice.\r\n\r\nSome more example spaces & constructions:\r\n* discrete & indiscrete spaces\r\n* Sierpinski space (leading to some characterization theorems of other properties)\r\n* cofinite & cocountable topologies\r\n* theory of euclidean spaces and their subsets"},{"author":"Columbus240","date":"2022-02-06T10:23:14Z","comment":"Some possible constructions and isomorphisms:\r\n* ℝ^n / ℤ^n is homeomorphic to the n-fold product of S^1, which is called \"the n-dimensional torus\". The quotient map from ℝ^n to the torus is the universal cover.\r\n* The n-spheres S^n are one-point-compactifications of ℝ^n."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":24,"state":"closed","open_date":"2021-01-08T16:51:45Z","update_date":"2021-08-20T14:17:11Z","discussion":[{"author":"Columbus240","date":"2021-08-20T14:16:56Z","comment":"I abandon this branch. The usual ordinal constructions of set-theory are hard to reproduce in type-theory. Universe conflicts etc. also make it hard to work with. Maybe I first have to study ordinals in ETCS or similar, before retrying the Hartog construction.\r\nI'll describe the long line differently."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":23,"state":"closed","open_date":"2021-01-08T16:15:38Z","update_date":"2021-02-07T14:01:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":22,"state":"open","open_date":"2021-01-06T22:39:00Z","update_date":"2021-08-20T14:22:00Z","discussion":[{"author":"Columbus240","date":"2021-01-06T22:40:43Z","comment":"I haven’t yet looked at other libraries and how they formalise ordinals. Might be worth it."},{"author":"palmskog","date":"2021-01-07T16:08:58Z","comment":"For reference, here are some formalizations of topology/ordinals in proof assistants, which might be useful since you already assume classical logic:\r\n- [Coq+MathComp](https://github.com/math-comp/analysis/blob/master/theories/topology.v)\r\n- [HOL Light](https://github.com/jrh13/hol-light/blob/master/Multivariate/topology.ml)\r\n- [Isabelle/HOL](https://www.google.com/search?q=topology&btnG=Google+Search&domains=isa-afp.org&sitesearch=isa-afp.org)\r\n- [Lean](https://leanprover-community.github.io/mathlib-overview.html)"},{"author":"Columbus240","date":"2021-01-11T21:29:35Z","comment":"Thanks for the reading material.\r\n\r\nI noticed today, that the file Quotients.v exists. Well, that might be useful."},{"author":"Columbus240","date":"2021-08-20T14:21:59Z","comment":"I came up with an easier way to describe the long line. I can introduce the first uncountable ordinal as a hypothesis, without giving an explicit construction. This way we can avoid intricate constructions and universe incompatibilities.\r\nThe following snippet is a starting point:\r\n```coq\r\nFrom ZornsLemma Require Import CountableTypes WellOrders.\r\n\r\nFrom Coq Require Import Relation_Operators.\r\n\r\nFrom Topology Require Import RTopology.\r\n\r\nDefinition ho_unit_interval :=\r\n  [z : RTop | 0 <= z < 1].\r\n\r\n(* It is a bit clunky to work with the construction of the long line.\r\n   Can we work with it axiomatically? Would that be easier?\r\n   (i.e. list some properties such that every space satisfying these\r\n   properties is homeomorphic to some canonical construction of the\r\n   long line.)\r\n*)\r\n\r\nSection LongLine.\r\n  (* Assume, that [Omega] is the first uncountable\r\n  ordinal. Independent of its actual construction, we are only\r\n  interested in this property. *)\r\n  Variable Omega : Type.\r\n  Variable lt :\r\n    relation Omega.\r\n  Variable Omega_well_ordered :\r\n    well_order lt.\r\n  Hypothesis Omega_Uncountable : ~CountableT Omega.\r\n  (* [Omega] is the least uncountable ordinal. I.e. it can be order-embedded into all other uncountable ordinals. *)\r\n  Hypothesis Omega_minimal :\r\n    forall (X : Type) (R : relation X),\r\n      well_order R ->\r\n      ~CountableT X ->\r\n      exists f : Omega -> X,\r\n        forall x y,\r\n          lt x y <->\r\n          R (f x) (f y).\r\n\r\n  Definition clr_le : relation _ :=\r\n      (lexprod\r\n         (SubspaceTopology ho_unit_interval)\r\n         (fun _ => Omega)\r\n         (fun x y =>\r\n            Rle (proj1_sig x)\r\n                (proj1_sig y))\r\n         (fun _ x y =>\r\n            x = y \\/\r\n            lt x y)).\r\n\r\n  Definition closed_long_ray :=\r\n    OrderTopology clr_le.\r\nEnd LongLine.\r\n```"}],"tags":[],"pull_requests":[]},{"author":"palmskog","number":21,"state":"closed","open_date":"2021-01-05T20:26:41Z","update_date":"2021-01-05T20:52:56Z","discussion":[{"author":"Columbus240","date":"2021-01-05T20:52:35Z","comment":"Thanks. I once more forgot to check the CI results before pushing."}],"tags":[],"pull_requests":[]},{"author":"palmskog","number":20,"state":"closed","open_date":"2021-01-04T18:34:02Z","update_date":"2021-01-05T14:43:16Z","discussion":[{"author":"Zimmi48","date":"2021-01-04T18:40:46Z","comment":"You could also recommend using Dune to manually build / install. IIUC the reason to keep putting `make` forward is that it's simpler to use when you want to edit the project and have correct editor support..."},{"author":"palmskog","date":"2021-01-05T14:43:16Z","comment":"In its current state, with a naked `dune build` failing due to limitations in handling of dependencies, I don't think it's a good idea to talk much about building with Dune. However, we can address this when 1.0 support for Coq in Dune is out."}],"tags":[],"pull_requests":[]},{"author":"stop-cran","number":19,"state":"open","open_date":"2020-12-22T08:32:37Z","update_date":"2022-02-09T15:37:10Z","discussion":[{"author":"Columbus240","date":"2020-12-22T22:01:08Z","comment":"I also think a style guide would be good. This way we can define how certain issues should be solved.\r\n\r\nOn Zulip, Karl Palmskog listed some already existing style guides:\r\n* https://gitlab.mpi-sws.org/iris/iris/blob/iris-3.2.0/StyleGuide.md\r\n* https://github.com/math-comp/math-comp/blob/mathcomp-1.9.0/CONTRIBUTING.md\r\n* https://github.com/uwplse/verdi-raft/blob/master/STYLE.md\r\n* https://www.ssi.gouv.fr/uploads/2014/11/anssi-requirements-on-the-use-of-coq-in-the-context-of-common-criteria-evaluations-v1.0-en.pdf\r\n* https://github.com/HoTT/HoTT/blob/master/STYLE.md (this link is from me)\r\n\r\nOther useful stuff he listed:\r\n* https://github.com/Karmaki/coq-dpdgraph\r\n* https://github.com/coq-community/awesome-coq.\r\n\r\nI think using `Set Bullet Behavior Strict Subproofs` would be useful.\r\n\r\nAnd your points above agree (more or less) with what I had in mind. Always explicitly declaring hypotheses if they are used later might be a bit hard to enforce... I have not a lot of experience using that approach. (I think Chlipala wrote something about that in CPDT...) Something I found useful to make my proofs less fragile is the following:\r\n```coq\r\nmatch goal with\r\n| H0 : ?a = true,\r\n  H1 : ?a = false |- _ =>\r\n  rewrite H0 in H1; discriminate H1\r\nend.\r\n```\r\n\r\nHow about\r\n```\r\n    ...\r\n    assert (forall a b:R, -b <= a -> a <= b -> Rabs a <= b).\r\n    { intros.\r\n      unfold Rabs.\r\n      destruct Rcase_abs; lra.\r\n    }\r\n    intros.\r\n    apply H.\r\n    ...\r\n```\r\nor\r\n```\r\n    ...\r\n    assert (forall a b:R, -b <= a -> a <= b -> Rabs a <= b). {\r\n      intros.\r\n      unfold Rabs.\r\n      destruct Rcase_abs; lra.\r\n    }\r\n    intros.\r\n    apply H.\r\n    ...\r\n```\r\nI like these more, because I’m used to having each subproof indented another layer. I use the first variant more often.\r\nSometimes I also do the following, if the proof of the subgoal is especially short (one to two tactics maybe).\r\n```\r\n  ...\r\n  destruct some_boolean.\r\n  2: { assumption. }\r\n  intros.\r\n  ...\r\n```\r\n\r\nLet’s start bikeshedding! :D On another day, I’ll write more concrete ideas and respond more to your above ideas.\r\n\r\nP.S. We might consider not defining *every* possible thing in the style guide, like every possible placement of braces and every possible ambiguity and corner case."},{"author":"Zimmi48","date":"2020-12-25T14:03:00Z","comment":"> I think using `Set Bullet Behavior Strict Subproofs` would be useful.\r\n\r\nIt's `Set Bullet Behavior \"Strict Subproofs\"` and it is already the default. Were you actually looking for something like `Set Default Goal Selector \"!\"` (see https://coq.inria.fr/refman/proof-engine/proof-handling.html#mandatory-bullets)?\r\n\r\n>Explicitly declare all terms, that are explicitly referenced later in proofs - current proofs are fragile because auto-generated names like H0, H1, H2, etc. tend to change all together in case of even minor proof amendments\r\n\r\nYou can check for this with `Set Mangle Names` (see https://coq.inria.fr/refman/proof-engine/tactics.html#proof-maintenance) or `-mangle-name` (see https://coq.inria.fr/refman/practical-tools/coq-commands.html#by-command-line-options)."},{"author":"stop-cran","date":"2020-12-28T14:48:35Z","comment":"At least I'm going to put bullets in all existing proofs."},{"author":"Columbus240","date":"2021-01-05T16:40:35Z","comment":"Thanks for the clarification @Zimmi48.\r\n\r\nI agree with you (@stop-cran), about using bullets & braces where applicable."},{"author":"Columbus240","date":"2021-01-05T19:20:07Z","comment":"Other stuff that is sometimes inconsistent:\r\n* Capitalisation in the names in ZornsLemma. The stdlib uses capitalised function names (Complement, Intersection, Full_set, ...) and uses capitalised names in lemmas that use these functions (Complement_Complement, Intersection_inv, Union_commutative, ...).\r\nZornsLemma follows this convention very often in function names (FamilyUnion, IndexedFamilyIntersection, ...) with some exceptions (inverse_image). But it often doesn’t follow this convention in the names of lemmas (empty_family_union, inj_countable, ...).\r\nI just wanted to note this, but am not very inclined to do something about it.\r\n* Where the parameters of a lemma go, isn’t always done the same way. There are examples of `Lemma foo (X : Type) : bar X.` and `Lemma foo : forall (X : Type), bar X.`.\r\n* Indentation level of proofs. Most times the following is done:\r\n```coq\r\nLemma foo : bar.\r\nProof.\r\nintros; reflexivity.\r\nQed.\r\n```\r\nBut there are also examples of this:\r\n```coq\r\nLemma foo : baz.\r\nProof.\r\n  intros; reflexivity.\r\nQed.\r\n```\r\nThe latter is the \"default\" setting of ProofGeneral. Instances of the latter style can be detected (very crudely) using `grep -rozP \"Proof.\\n  \"` (executed in `/theories/`). The command is somehow rendered wrongly, there should be two spaces after the '\\n'."},{"author":"Columbus240","date":"2021-01-11T21:48:17Z","comment":"I added a hint to automatically prove `In Full_set x`. This makes some proofs a little shorter.\r\n\r\nI think functions from/to topological spaces could be declared more concisely if we declare `point_set : TopologicalSpace -> Type` to be a [coercion](https://coq.inria.fr/distrib/current/refman/addendum/implicit-coercions.html). But note: in `forall f : RTop -> RTop, continuous f` coq will be able to insert the necessary `point_set` around `RTop`, but in `forall f : R -> R, continuous f` it can’t, because we haven’t specified the topology on `R`.\r\n@stop-cran what do you think about declaring the coercion?"},{"author":"stop-cran","date":"2021-01-14T15:52:37Z","comment":"@Columbus240 yes, why not. I thought more about `Hint Constructors` for `Full_set` and using `auto`, but these ways are not mutually exclusive."},{"author":"Columbus240","date":"2021-01-14T20:57:22Z","comment":"More in the direction of automatic proofs: We could declare topological properties as \"typeclasses\" and then write implications between the properties as instances."},{"author":"Columbus240","date":"2021-08-20T15:19:06Z","comment":"We could harmonize the naming of definitions/lemmas. A consistent (& hopefully) short naming style. Currently, because styles from the stdlib and the style of the library mix, we have `Complement_FamilyUnion` and `image_family_union` next to eachother. Powerset_facts or the stdlib theorems about `Included`, `Union` and `Intersection` are also all over the place. With very wordy names.\r\nMore automatization would also be nice. A lot of the `apply Extensionality_Ensembles; ...` could be simplified to a single tactic. `extensionality_ensembles` and `extensionality_ensembles_inv` already exist for this. More hints, maybe a \"simplification\" tactic for things related to sets. Make `open` not unfold on `simpl` when dealing with topological spaces constructed by some other notion."},{"author":"Columbus240","date":"2022-02-09T15:37:09Z","comment":"I created a [note on formatting](https://gist.github.com/Columbus240/a1ece869fd4df72d1b056767075d8eb5). Mostly I wrote down how I (and for example the Coq stdlib) format and indent braces, bullets and proofs."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":18,"state":"closed","open_date":"2020-12-21T14:17:24Z","update_date":"2021-01-05T16:42:30Z","discussion":[{"author":"Columbus240","date":"2020-12-21T14:22:41Z","comment":"I copied most of the structure from [hydra-battles](https://github.com/coq-community/hydra-battles), but I’m not sure whether there’s an error somewhere.\r\n\r\nI’m unsure about:\r\n- Does coq-topology.opam always use the \"correct\" version of ZornsLemma? Whatever that means.\r\n- Should the \"settings\" of the subtree be changed somehow or are they fine as-is?\r\n\r\nCurrently `coq-zorns-lemma` is still listed as a dependency of `coq-topology` in `coq-topology.opam` and `meta.yml`. But this wasn’t done in hydra-battles."},{"author":"Zimmi48","date":"2020-12-25T13:48:25Z","comment":"> Currently `coq-zorns-lemma` is still listed as a dependency of `coq-topology` in `coq-topology.opam` and `meta.yml`. But this wasn’t done in hydra-battles.\r\n\r\nThis is because the two sub-projects are independent in the case of hydra-battles, which is not the case here."},{"author":"Zimmi48","date":"2021-01-04T10:16:20Z","comment":"ping @palmskog (about CI)"},{"author":"palmskog","date":"2021-01-04T10:22:54Z","comment":"@Zimmi48 maybe it's easiest if I just push some commits to set up the CI according to what has been done before (Chapar seems closest: https://github.com/coq-community/chapar/blob/master/.github/workflows/docker-ci.yml)? This is probably faster than suggesting big diffs."},{"author":"Zimmi48","date":"2021-01-04T10:23:36Z","comment":"Sounds good to me."},{"author":"palmskog","date":"2021-01-04T12:02:30Z","comment":"@Zimmi48 incremental CI is done. Do you see anything else needed here, or can we merge this and archive the zorns-lemma repo?"},{"author":"Zimmi48","date":"2021-01-04T12:59:05Z","comment":"It looks ready to me."},{"author":"palmskog","date":"2021-01-04T13:03:39Z","comment":"OK, since everything should be reversible in theory, let's just go ahead and set things up."},{"author":"Columbus240","date":"2021-01-05T16:42:26Z","comment":"Thanks for finishing this, while I was unavailable."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":17,"state":"open","open_date":"2020-12-21T13:55:01Z","update_date":"2021-08-21T17:20:04Z","discussion":[{"author":"Columbus240","date":"2021-08-20T15:07:12Z","comment":"Fixing the `deprecated-ident-entry` warnings (from v8.13 upwards) is impossible while staying compatible with v8.10. I propose making a new release of the opam package, then dropping support for v8.10.\r\n<s>\r\nThe `fragile-hint-constr` warnings don't look convincing to me for our use-case. Whenever we use it, we declare `@some_lemma` to be the hint. I see the following options:\r\n* ignore the warning, as we currently did\r\n* silence the warning with `Local Set Warnings \"-fragile-hint-constr\".`\r\n* define intermediate values like `Local Definition some_lemma' := @some_lemma` thus cluttering the namespaces.\r\n* make all arguments of these lemmas explicit (maybe then applying the lemmas will behave differently?)\r\n* verify coqc well-enough, to show that the warning can be removed for hints of this form. Then land an appropriate change.\r\n</s>\r\nHas been resolved. A non-issue upon closer inspection."},{"author":"Zimmi48","date":"2021-08-20T15:16:04Z","comment":"@Columbus240 Are you sure that these hints would behave differently if you just dropped the `@`? IINM it used to be the case but it isn't anymore. cc @ppedrot "},{"author":"ppedrot","date":"2021-08-20T16:19:22Z","comment":"Globals behave the same as their `@`-explicit form in hints commands at least since Coq 8.5."},{"author":"Columbus240","date":"2021-08-21T08:45:59Z","comment":"Hm, I thought I tried that once and it failed. Will check again. Thanks for pointing that out."},{"author":"ppedrot","date":"2021-08-21T10:32:18Z","comment":"Note that it's not the case for the `using` clause of auto tactics, where `foo` and `@foo` are not the same thing (see coq/coq#12512 for instance). This might be the source of the confusion."},{"author":"Columbus240","date":"2021-08-21T16:18:43Z","comment":"It seems `Hint Rewrite` can't cope with implicit arguments. But that's probably because `Hint Rewrite` is something different from `Hint Unfold`, `Hint Resolve`, etc.\r\n```coq\r\nLemma foo {X : Type} : 0 = 0.\r\nAdmitted.\r\n\r\nLemma bar (X : Type) : 0 = 0.\r\nAdmitted.\r\n\r\nFail Hint Rewrite foo : core. (* Cannot infer implicit parameter X of foo whose type is \"Type\". *)\r\nHint Rewrite bar : core.\r\n```\r\n\r\nConcretely, the first failure appeared on `inverse_image_empty`, when I removed the `@` in InverseImage.v."},{"author":"ppedrot","date":"2021-08-21T16:20:56Z","comment":"Despite the name, `Hint Rewrite` is a completely different beast that does behave differently on `foo` and `@foo`. But it shouldn't complain with a warning if you pass it an arbitrary term (otherwise it's a bug). Just fix the warnings."},{"author":"Columbus240","date":"2021-08-21T16:34:01Z","comment":"<s>?\r\nThe fragile-hint-constr warnings are on `Hint Rewrite @inverse_image_empty : sets.`. So you mean its a bug that the warnings appear there?\r\n\r\nEdit: In terms of foo:\r\n```coq\r\nLemma foo {X : Type} : 0 = 0.\r\nAdmitted.\r\n\r\nHint Rewrite @foo : core. (* causes a \r\n```\r\n</s>\r\nEdit: I was mistaken, the warnings came from the `Hint Resolve` and not from the `Hint Rewrite`. Sorry."},{"author":"Columbus240","date":"2021-08-21T17:08:45Z","comment":"I probably treated the `Hint Resolve` and the `Hint Rewrite` warnings the same, and always removed the `@` for both kinds of hints (if they were next to eachother in a file), instead of only treating the `Hint Resolve`.\r\nThanks for the assistance."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":16,"state":"closed","open_date":"2020-12-20T17:44:33Z","update_date":"2020-12-21T12:53:23Z","discussion":[{"author":"Columbus240","date":"2020-12-20T18:00:24Z","comment":"The results of these CI runs are *very* strange. Both times it compiled on my system without problems. I’ll redo this branch in an hour or two."},{"author":"Columbus240","date":"2020-12-20T20:19:41Z","comment":"Noo! (In some overly dramatic fashion)\r\nI wanted to squash the TMP commit, before merging the branch."},{"author":"Zimmi48","date":"2020-12-21T09:23:54Z","comment":"FYI, a good way to mark a PR as not-for-merging on GitHub is to use the \"draft PR\" feature: https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/about-pull-requests#draft-pull-requests"},{"author":"Columbus240","date":"2020-12-21T12:53:23Z","comment":"Thanks for mentioning that."}],"tags":[],"pull_requests":[]},{"author":"palmskog","number":15,"state":"closed","open_date":"2020-12-20T08:18:24Z","update_date":"2020-12-20T08:37:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":14,"state":"closed","open_date":"2020-12-18T22:37:37Z","update_date":"2021-02-06T21:07:27Z","discussion":[{"author":"palmskog","date":"2020-12-19T10:37:53Z","comment":"@Columbus240 it sounds like a good idea to me to factor out more pure set theory results to the zorns-lemma library (@stop-cran hopefully agrees). \r\n\r\nThe best approach may to be first \"duplicate\" the set theory results in zorns-lemma and then remove them from topology. Hence, the initial work is likely best done in the zorns-lemma project. However, the main maintainer of zorns-lemma said he will not have time to work on that project for a while. @Columbus240 are you interested in co-maintaining the zorns-lemma repo? I can help set that up if so."},{"author":"Zimmi48","date":"2020-12-19T19:51:03Z","comment":"In [this Zulip thread](https://coq.zulipchat.com/#narrow/stream/237663-coq-community-devs.20.26.20users/topic/Maintenance.20status.20of.20zorns-lemma.20and.20topology), we discussed that it would make sense to merge the two projects in a single \"mono-repository\". The tooling is not yet fully ready for this but Dune should still make this possible, and this would ease the transfer of lemmas from one library to the other.\n\nBTW, following this discussion, I also thought that we'd asked @stop-cran to co-maintain both repositories (IMHO it makes sense to keep the same team of maintainers on both, since they generally interest the same people)."},{"author":"stop-cran","date":"2020-12-19T19:58:12Z","comment":"@Zimmi48 I think I can help in maintaining zorns-lemma as well. "},{"author":"Columbus240","date":"2020-12-19T20:13:38Z","comment":"I’d be happy to work more on topology (& zorns-lemma). But what responsibility would I have as co-maintainer? (I read the [coq-community/manifesto](https://github.com/coq-community/manifesto/blob/master/CONTRIBUTING.md)) It may happen that I don’t login to Github for some months or that I don’t check the associated mailbox for a while. So it might take a while until I answer any issues or pull requests. Would that be ok?\r\n\r\nI’m also not so sure in which direction I’m allowed develop these libraries. There are many topics or theorems that may be added, or changes to the style of proofs that might be done. I find the current style often very hard to follow, since it often omits bullet points. Are there expectations in what directions the development should go or shouldn’t go?\r\n\r\nI’d be happy to have a chat on some medium (here, Zulip, something else?) about this.\r\n\r\nEdit: Of course I should add, that I work on/with topology & zorns-lemma only in my free time and would like to keep it that way. So I can’t strictly guarantee any work. But I’m sure my interest in Coq and the mathematics involved will make me do something. ;)"},{"author":"palmskog","date":"2020-12-20T08:49:00Z","comment":"The main formal responsibility of a maintainer is to respond to (somehow act on, not necessarily merge) incoming pull requests - this is elaborated on [here](https://github.com/coq-community/manifesto/blob/master/CONTRIBUTING.md#maintaining-a-coq-community-package). Responsibilities can be delegated, so it's not necessary for one particular person to respond to a PR quickly. Maintainers can also step down at any time if they wish.\r\n\r\nA secondary informal responsibility is to maintain compatibility with new released Coq versions, and ideally even the development Coq version. Many maintainers also think about evolving their projects to better suit the community's needs (submit their own PRs), but this is far from a requirement. The members of coq-community are volunteers and most work on their free time.\r\n\r\n[Zulip](https://coq.zulipchat.com/#narrow/stream/237663-coq-community-devs.20.26.20users) is indeed the best place for casual questions and chat."},{"author":"Columbus240","date":"2020-12-20T16:51:23Z","comment":"Sounds good to me."},{"author":"Columbus240","date":"2020-12-20T17:40:16Z","comment":"The whole file Filter.v can also be moved to zorns-lemma, but I’ll do that after the repos have merged."},{"author":"Zimmi48","date":"2020-12-21T09:22:05Z","comment":"I've added @Columbus240 to the list of maintainers in the description of the repository, but the `meta.yml` and (auto-generated) `README.md` will have to be fixed as well."},{"author":"Columbus240","date":"2021-02-06T21:07:27Z","comment":"Closing, since all things mentioned above have been moved from Topology to ZornsLemma."}],"tags":[],"pull_requests":[]},{"author":"Columbus240","number":13,"state":"closed","open_date":"2020-12-18T22:29:13Z","update_date":"2020-12-20T16:30:30Z","discussion":[{"author":"palmskog","date":"2020-12-19T10:03:24Z","comment":"Note that the 8.11 and 8.12 builds fail because the content of this pull request requires the `master` branch version of `coq-zorns-lemma`. One way to fix it is the following diff:\r\n```diff\r\ndiff --git a/coq-topology.opam b/coq-topology.opam\r\nindex e6ceb12..5834c4b 100644\r\n--- a/coq-topology.opam\r\n+++ b/coq-topology.opam\r\n@@ -17,7 +17,7 @@ build: [make \"-j%{jobs}%\" ]\r\n install: [make \"install\"]\r\n depends: [\r\n   \"coq\" {(>= \"8.11\" & < \"8.14~\") | (= \"dev\")}\r\n-  \"coq-zorns-lemma\" {(>= \"8.11\" & < \"8.14~\") | (= \"dev\")}\r\n+  \"coq-zorns-lemma\" {= \"dev\"}\r\n ]\r\n \r\n tags: [\r\n```\r\nThe failure of the `coq:dev` build is unrelated and is due to changes in Coq itself."},{"author":"Columbus240","date":"2020-12-19T17:06:21Z","comment":"Thanks for the patch."},{"author":"stop-cran","date":"2020-12-19T18:48:55Z","comment":"I see for 8.11 and 8.12 build `\"coq-zorns-lemma\" {= \"dev\"}` dependency could not be found."},{"author":"Columbus240","date":"2020-12-19T21:42:19Z","comment":"By looking at the logs, I couldn’t tell the problem. Somehow opam can’t find the \"dev\" version of zorns-lemma. But without much difference, the 8.13 version finds it without problem.\r\nI’ll look at it a bit closer another day. (Maybe diff the logs against eachother...)"},{"author":"palmskog","date":"2020-12-20T08:11:30Z","comment":"I know what the problem is, I will do separate PR to fix some CI issues, and then when my PR is merged this PR can be rebased."},{"author":"palmskog","date":"2020-12-20T08:38:26Z","comment":"@Columbus240 I updated the `master` branch with the required fixes. Please rebase this PR over the latest `master`, and CI should be all green."},{"author":"Columbus240","date":"2020-12-20T16:30:30Z","comment":"Thanks for fixing the CI."}],"tags":[],"pull_requests":[]},{"author":"palmskog","number":12,"state":"closed","open_date":"2020-12-08T08:46:51Z","update_date":"2020-12-08T08:56:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"palmskog","number":11,"state":"closed","open_date":"2020-11-24T23:00:15Z","update_date":"2020-11-24T23:09:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":10,"state":"closed","open_date":"2020-05-28T13:55:48Z","update_date":"2020-11-24T22:47:01Z","discussion":[{"author":"Zimmi48","date":"2020-05-29T14:35:09Z","comment":"Currently, the project doesn't work with Coq < 8.11, so I've pushed a second commit acknowledging this. But maybe, you'd like to try to restore compatibility instead?"}],"tags":[],"pull_requests":[]},{"author":"amiloradovsky","number":9,"state":"closed","open_date":"2020-04-20T01:24:47Z","update_date":"2020-05-20T16:48:45Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"stop-cran","number":8,"state":"closed","open_date":"2020-02-06T13:31:39Z","update_date":"2020-12-08T04:46:37Z","discussion":[{"author":"palmskog","date":"2020-11-25T09:02:17Z","comment":"@stop-cran do you still want to get this PR merged? If so, the project was recently updated to fix CI and support for recent Coq, so the changes will need a rebase. We are also looking for someone to co-maintain the project, is this something you are interested in?"},{"author":"stop-cran","date":"2020-12-07T16:20:07Z","comment":"@palmskog yes, I'm interested in co-maintaining this project. Also will check latest CI changes for this PR."},{"author":"palmskog","date":"2020-12-08T04:46:37Z","comment":"@stop-cran I invited you to join the coq-community organization. Once you accept the invitation, we can set you up as co-maintainer of Topology."}],"tags":[],"pull_requests":[]},{"author":"stop-cran","number":7,"state":"closed","open_date":"2019-11-15T15:02:05Z","update_date":"2019-12-01T20:44:55Z","discussion":[{"author":"amiloradovsky","date":"2019-12-01T20:44:55Z","comment":"@stop-cran This one is a bit more involved.\r\nAfter a few fixes, compiles on 8.10 and doesn't seem to break anything.\r\nAlso the refactoring is much appreciated. Thanks."}],"tags":[],"pull_requests":[]},{"author":"stop-cran","number":6,"state":"closed","open_date":"2019-10-07T14:38:23Z","update_date":"2019-11-04T00:23:22Z","discussion":[{"author":"amiloradovsky","date":"2019-11-04T00:23:22Z","comment":"@stop-cran Thanks. Good work.\r\nYou can also make the proofs a little bit shorter by dropping the `assumption` etc. in the end and prefixing the last remaining command with `now`. It means applying `easy` after the command, which in turn is something in-between `auto` and `trivial`."}],"tags":[],"pull_requests":[]},{"author":"stop-cran","number":5,"state":"closed","open_date":"2019-09-19T14:55:24Z","update_date":"2019-09-29T18:12:23Z","discussion":[{"author":"amiloradovsky","date":"2019-09-29T18:12:23Z","comment":"@stop-cran Thank you!\r\nYou might want to utilize some bullets and curly braces, to make the structure of the proofs(' sub-goals) a bit more evident. But, given the proofs in the rest of the library are pretty much \"flat\", it is optional."}],"tags":[],"pull_requests":[]},{"author":"matthew-piziak","number":4,"state":"closed","open_date":"2019-04-16T19:53:29Z","update_date":"2019-04-16T23:30:02Z","discussion":[{"author":"matthew-piziak","date":"2019-04-16T19:57:38Z","comment":"`coqc TopologicalSpaces.v -R ../ZornsLemma ZornsLemma` worked for me. Hopefully that's all that's needed."},{"author":"amiloradovsky","date":"2019-04-16T21:30:36Z","comment":"You can/should just put `-R ../ZornsLemma ZornsLemma` into `Make`.\r\nThis option isn't there precisely because the physical paths may differ."},{"author":"matthew-piziak","date":"2019-04-16T23:30:01Z","comment":"@amiloradovsky Thank you kindly."}],"tags":[],"pull_requests":[]},{"author":"amiloradovsky","number":3,"state":"closed","open_date":"2019-02-26T11:31:26Z","update_date":"2019-12-08T00:15:26Z","discussion":[{"author":"Zimmi48","date":"2019-03-01T18:41:39Z","comment":"Currently testing a fix at https://travis-ci.com/Zimmi48/topology/builds/102855363"},{"author":"amiloradovsky","date":"2019-03-01T23:26:19Z","comment":"```\r\ntrying https://github.com/coq-contribs/zorns-lemma/archive/719915f98c1da56ada31b058851a67b22788199a.tar.gz\r\nunpacking source archive /tmp/nix-build-source.drv-0/719915f98c1da56ada31b058851a67b22788199a.tar.gz\r\nbuilding '/nix/store/873j17l2xlcrj0nm45xd13m6nld7x40n-coq8.6-zorns-lemma-v8.8.0.drv'...\r\n```\r\nBut that commit (`719915f98c1da56ada31b058851a67b22788199a`) doesn't include the changes needed for it to compile (in my case at least), although tagged `v8.8`: at least version `6ac9bb914f6017cdd9a544ff4b0bef73fd33b44c` is needed."},{"author":"Zimmi48","date":"2019-03-02T16:26:39Z","comment":"I updated the `zorns-lemma` package to the latest commit in the repo, but it means I had to \"invent\" a version number. It would be good to do a proper release soon (probably after merging the `meta.yml` PR though), and to publish the new release on opam."},{"author":"Zimmi48","date":"2019-03-02T17:08:39Z","comment":"I've updated [my branch](https://github.com/Zimmi48/topology/tree/meta.yml). It should be OK now. I can push here if you want."},{"author":"amiloradovsky","date":"2019-03-02T18:36:19Z","comment":"I haven't actually tested it on Coq 8.6, only 8.7, and just expected it to work there too. I suspect, fixing the build for that version wouldn't be difficult, but is probably not worth it now. Or is it?\r\nGenerally, yes, I imagined it as releasing `zorns-lemma` on OPAM with the latest changes and pointing the latest `topology` to it.\r\nSure you can push it here, I don't have plans to do something radically different."},{"author":"Zimmi48","date":"2019-03-03T15:48:27Z","comment":"Coq 8.7 introduced several changes in the Reals library:\r\n\r\n>IZR (Reals) has been changed to produce a compact representation of integers. As a consequence, IZR is no longer convertible to INR and lemmas such as INR_IZR_INZ should be used instead.\r\n>\r\n>Real constants are now represented using IZR rather than R0 and R1; this might cause rewriting rules to fail to apply to constants.\r\n\r\n(extracts from CHANGES)\r\n\r\nThis can make it a bit difficult to provide compatibility with both 8.6 and 8.7 and is probably not worth it anyway since Coq 8.7.0 has been released one and a half year ago."},{"author":"Zimmi48","date":"2019-07-19T07:51:57Z","comment":"FTR the best way to fix these error messages:\r\n\r\n```\r\n# File \"./UrysohnsLemma.v\", line 119, characters 11-14:\r\n# Error: The reference Zlt was not found in the current environment.\r\n# \r\n```\r\n\r\nis to look at the warnings in 8.9 (possibly even making them errors) because they tell you with what to replace the deprecated notation."},{"author":"herbelin","date":"2019-12-05T10:00:58Z","comment":"As part of a global update of coq-contribs to Coq 8.9 (and later to 8.10), I now have the possibility to make a release of topology compatible with Coq 8.9. How to proceed?\r\n\r\nIs it ok if I push myself a V8.9.0 tag on the archive, what will automatically produce a 8.9 release? (Note that I actually already did [that](https://github.com/coq-community/zorns-lemma/releases/tag/v8.9.0) for ZornsLemma).\r\n\r\nA possibility is also that I become the maintainer, and then, I can merge the current PR."},{"author":"Zimmi48","date":"2019-12-05T12:10:47Z","comment":"@herbelin This PR is only about template files (README, testing, etc.). All the required compatibility fixes are already in master. In particular, you pushed a `v8.9` branch with commits that duplicated work that was already done (in master). It would have been probably better to ask first. I see you've done the same on the \"semantics\" project (with again duplicated work that had already been done in master). The model you have kept in mind from coq-contribs, and applied there, is not the preferred one for Coq libraries, where it is rather recommended having a single master branch which keeps compatibility with several successive versions of Coq at the same time, which is checked by CI. This removes any use for pushing a new branch every time there is a Coq release. See also: https://github.com/coq-community/manifesto/wiki/Commit,-branch-and-release-policies"},{"author":"herbelin","date":"2019-12-05T14:03:36Z","comment":"@zimmi48: I'm very sorry. zorns-lemma and topology were still in my archive of coq-contribs, so I upgraded them at the same time as the other coq-contribs without paying attention that there were other commits around. I'll consider the work done in coq-community to be the reference.\r\n\r\nRegarding zorns-lemma and topology,  we should definitely decide if we remove them from coq-contribs or not. In the latter case, I'll not care anymore about upgrading them. For zorns-lemma and topology, there is still the issue that they don't have a well-identified \"release\" ensured to work with Coq 8.9 or 8.10, and in particular no opam package for Coq >= 8.9.\r\n\r\nRegarding semantics, I initially forgot there were commits upstream but even after realizing that some job had been made, the resulting master was not compatible with v8.9, so I decided to keep a v8.9 branch anyway. Anyway, the duplication of work is lost of time only on my side. The work from contributors has been preserved in master!\r\n\r\n> This removes any use for pushing a new branch every time there is a Coq release. \r\n\r\nI don't think new branches are useful, indeed. A tag would be enough if we can identify a time of the linear history where the package compile with the given version.\r\n\r\n>  which is checked by CI.\r\n\r\nSorry for my ignorance, but I failed to see where to check CI compatibility for a coq-community package."},{"author":"Zimmi48","date":"2019-12-05T17:18:51Z","comment":"@herbelin I hope I didn't sound harsh, it was not my intention to blame you in any way, and I'm indeed aware that the time lost is on your side. Sorry that I forgot to remove the submodules for these former contribs, as this is what led to the duplication.\r\n\r\nTo answer your question regarding CI, this is the point of the badges that are added in the README produced by the template. But not all projects in coq-community have adopted them yet (and semantics for instance has already a standard README but no CI setup yet)."},{"author":"amiloradovsky","date":"2019-12-08T00:09:41Z","comment":"I guess I now should just merge it as-is, despite some failed tests, and open new PRs/issues as needed. And then update the package(s) in Opam, but it wouldn't be wise from me to promise any short terms…"}],"tags":[],"pull_requests":[]},{"author":"amiloradovsky","number":2,"state":"closed","open_date":"2018-12-06T18:46:28Z","update_date":"2018-12-06T19:30:35Z","discussion":[{"author":"herbelin","date":"2018-12-06T19:30:35Z","comment":"Sorry, my fault. I forgot to commit a fix I had on my own copy."}],"tags":[],"pull_requests":[]},{"author":"amiloradovsky","number":1,"state":"closed","open_date":"2018-10-08T19:46:39Z","update_date":"2019-12-08T00:15:04Z","discussion":[{"author":"herbelin","date":"2018-12-04T10:00:38Z","comment":"Thanks a lot. I merged your commits 1, 2, 3, 6, and the addition of bullets in 7. I skipped commit 4 (adding path to zorns-lemma) which assumes a layout which has no reason to be same for everyone. We unfortunately both changed master independently, so I skipped commit 5 which was conflictual (in `RationalsInReals.v`) and one line in commit 7.\r\n\r\nSide question: would you be interested in moving `zorns-lemma` and `topology` to [coq-community](http://github.com/coq/coq-community) (and, optionally, be the official current maintainer)?\r\n"},{"author":"amiloradovsky","date":"2018-12-18T02:15:53Z","comment":"You mean https://github.com/coq-community. — Yes, I think I am interested.\nWhat is the procedure?"},{"author":"herbelin","date":"2018-12-19T18:08:22Z","comment":"@Zimmi48 will correct me if I'm wrong, but I think I just need your ok and then click somewhere to move the repository from here to coq-community. Then, you'll be the maintainer for as long as you want, especially in charge of merging PRs if any, coordinating discussions about PRs if needed, contributing extensions if you wish, proposing collaborative projects around the work, if relevant."},{"author":"Zimmi48","date":"2018-12-20T19:12:10Z","comment":"Indeed, this is as simple as this, although an additional good first step would be to open an issue at https://github.com/coq-community/manifesto/issues because this will give some publicity to the move."},{"author":"Zimmi48","date":"2019-01-01T22:15:23Z","comment":"@amiloradovsky: would you like me to proceed with the transfer to coq-community and adding you as the maintainer there?"},{"author":"amiloradovsky","date":"2019-01-02T07:30:18Z","comment":"@Zimmi48 Yes, please.\n\nI was a little busy the last couple weeks. And I'll be away from my main machine(s) for yet another week or so. But generally I have plans regarding integration of some further theory."},{"author":"Zimmi48","date":"2019-02-18T13:54:45Z","comment":"@amiloradovsky Sorry for the long delay: I have opened https://github.com/coq-community/manifesto/issues/43. Can you confirm there that you are still interested in taking over as official maintainer?"}],"tags":[],"pull_requests":[]}]