[{"author":"affeldt-aist","number":993,"state":"open","open_date":"2023-04-11T09:05:38Z","update_date":"2023-04-11T09:05:38Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":992,"state":"closed","open_date":"2023-04-10T13:05:28Z","update_date":"2023-04-10T14:39:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":991,"state":"closed","open_date":"2023-04-10T06:51:16Z","update_date":"2023-04-10T10:10:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"shiranaiyo","number":990,"state":"open","open_date":"2023-04-06T16:58:00Z","update_date":"2023-04-11T09:43:58Z","discussion":[{"author":"shiranaiyo","date":"2023-04-07T12:31:37Z","comment":"Wow, thank you a lot for that in depth code review! I've learned a lot with it, I will try to write more closer to this in my future PRs. For now, I've applied all your sugestionss."}],"tags":[],"pull_requests":[]},{"author":"jouvelot","number":989,"state":"closed","open_date":"2023-04-04T16:32:55Z","update_date":"2023-04-07T16:46:09Z","discussion":[{"author":"proux01","date":"2023-04-06T06:21:43Z","comment":"I don't know why the CI is not running (the `pull_request_target` jobs are the master branch without the PR, there should be some `pull_request` jobs with the PR) but this looks innocuous enough so let's merge."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":988,"state":"closed","open_date":"2023-04-04T14:56:37Z","update_date":"2023-04-07T16:46:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":987,"state":"open","open_date":"2023-03-31T09:42:27Z","update_date":"2023-04-09T08:59:13Z","discussion":[{"author":"CohenCyril","date":"2023-04-05T09:38:37Z","comment":"> I fixed a typo and copy-pasted forgotten files from MathComp-Analysis\r\n\r\nI created https://github.com/math-comp/tools to avoid duplication of code. I think we should remove the ad-hoc copies in both math-comp and analysis repositories"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":986,"state":"open","open_date":"2023-03-28T15:38:03Z","update_date":"2023-04-05T11:36:29Z","discussion":[{"author":"thery","date":"2023-03-28T15:58:14Z","comment":"Should we also generalize ler_psqrt?\r\n````coq\r\nLemma ler_psqrt : {in @Num.nneg R &, {mono sqrt : a b / a <= b}}.\r\nProof.\r\napply: le_mono_in => x y x_gt0 y_gt0.\r\nrewrite !lt_neqAle => /andP[neq_xy le_xy].\r\nby rewrite ler_wsqrtr // eqr_sqrt // neq_xy.\r\nQed. \r\n\r\nLemma ler_sqrt a b : 0 <= b -> (sqrt a <= sqrt b) = (a <= b).\r\nProof.\r\nmove=> b_ge0; have [a_le0|a_gt0] := ler0P a; last first.\r\n  by rewrite ler_psqrt // nnegrE ltW.\r\nby rewrite ler0_sqrtr // sqrtr_ge0 (le_trans a_le0).\r\nQed.\r\n````"},{"author":"pi8027","date":"2023-03-28T16:33:29Z","comment":"Do we have apery (which uses this lemma) in CI? I couldn't find it."},{"author":"proux01","date":"2023-03-28T16:43:53Z","comment":"No, there seems to be no Nix derivation for apery. Should I add one based on the OPAM package (is it up to date ?)."},{"author":"pi8027","date":"2023-03-28T16:51:43Z","comment":"@proux01 Yes please."},{"author":"proux01","date":"2023-04-05T11:36:29Z","comment":"@pi8027 I added algebra-tactics and apery in the CI and apery is indeed the only thing to break. Would you welcome an overlay that make apery depend on MC >= 1.17 or do you need backward compatibility?"}],"tags":[{"tag":"TODO: HB port","description":""}],"pull_requests":[]},{"author":"proux01","number":985,"state":"closed","open_date":"2023-03-28T11:18:22Z","update_date":"2023-03-29T08:22:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"KimayaBedarkar","number":984,"state":"closed","open_date":"2023-03-20T15:47:16Z","update_date":"2023-04-07T16:46:59Z","discussion":[{"author":"CohenCyril","date":"2023-03-20T17:54:05Z","comment":"Thanks for your contribution.\r\nThe only failure is in Coqeal and seems unrelated.\r\nLet's merge."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":983,"state":"closed","open_date":"2023-03-12T08:13:35Z","update_date":"2023-03-31T09:44:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":982,"state":"closed","open_date":"2023-03-12T08:06:05Z","update_date":"2023-03-12T08:10:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"marinalopezchamosa","number":981,"state":"closed","open_date":"2023-03-10T11:34:07Z","update_date":"2023-04-07T16:47:10Z","discussion":[{"author":"proux01","date":"2023-03-13T08:57:03Z","comment":"Thanks for your contribution! Some of these lemmas may indeed be useful. However, I wonder whether we really want to add all of them. Indeed, some rewritings can be obtained with patterns or the mechanism in [ssrAC](https://github.com/math-comp/math-comp/blob/master/mathcomp/ssreflect/ssrAC.v) as examplified below. Could you remove those lemmas from your pull request? (I guess the remaining lemmas should be the `___lemma` in https://github.com/math-comp/math-comp/issues/643 but I haven't thoroughly checked)\r\n\r\n```Coq\r\nFrom mathcomp Require Import ssreflect ssrfun ssrbool ssrnat bigop ssrAC.\r\n\r\nLemma ex1 m n p : (m + n) + p = (n + m) + p.\r\nProof. by rewrite [X in X + _]addnC. Qed.\r\n\r\nLemma ex2 m n p : (m + n) + p = (n + p) + m.\r\nProof. by rewrite (ACl (2*3*1))/=. Qed.\r\n\r\nLemma ex3 m n p : m + (n + p) = p + (m + n).\r\nProof. by rewrite (AC (1*2) (3*(1*2)))/=. Qed.\r\n```"},{"author":"marinalopezchamosa","date":"2023-03-22T15:38:04Z","comment":"Please let us know if any more changes are needed!"},{"author":"proux01","date":"2023-04-04T12:34:47Z","comment":"Thanks @marinalopezchamosa for your contribution and your patience with the reviewing process (as you can see, this issue #643 was particularly tricky)."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":980,"state":"open","open_date":"2023-03-09T14:15:51Z","update_date":"2023-03-31T09:43:09Z","discussion":[{"author":"pi8027","date":"2023-03-09T14:31:34Z","comment":"While this change seems useful in practice, I have two remarks:\r\n- I think that `order_scope` should not be opened unless you are reasoning about abstract order instances.\r\n- Opening `ring_scope` after `order_scope` seems better in general since it should give precedence to the notations in `ring_scope` in parsing:\r\n  > If a notation is defined in multiple scopes, Coq uses the interpretation from the most recently opened notation scope or declared lonely notation."},{"author":"proux01","date":"2023-03-09T14:50:37Z","comment":">     * I think that `order_scope` should not be opened unless you are reasoning about abstract order instances.\r\n> \r\n>     * Opening `ring_scope` after `order_scope` seems better in general since it should give precedence to the notations in `ring_scope` in parsing:\r\n>       > If a notation is defined in multiple scopes, Coq uses the interpretation from the most recently opened notation scope or declared lonely notation.\r\n\r\nBut then , how would you handle two concrete orders, one being on some numDomainType but not the other?\r\n"},{"author":"pi8027","date":"2023-03-09T15:38:07Z","comment":"> But then, how would you handle two concrete orders, one being on some numDomainType but not the other?\r\n\r\nIn that case, I would open only `ring_scope` and explicitly write `%O` (or another scope delimiter if applicable) for the other."},{"author":"proux01","date":"2023-03-09T15:44:00Z","comment":"That sounds pretty inconvenient, why shouldn't we open `order_scope`? Is there something bad with having a generic `_ <= _` notation for all porder types? or some other reason?"},{"author":"proux01","date":"2023-03-17T09:53:51Z","comment":"@pi8027 I have given a bit more though to this and I realize maybe I'm just messing something up with my displays. Here is my use case:\r\n* orders on `numDomainType` have a notation on `ring_display` that  parses and prints as `(_ <= _)%R`\r\n* in Analysis (c.f. [constructive_ereal.v](https://github.com/math-comp/analysis/blob/master/theories/constructive_ereal.v)), the extended reals have a notation on `ereal_display` that also parses and prints as `(_ <= _)%E`\r\n\r\nMaybe we should just reuse `ring_display` in `constructive_ereal.v` as we don't really want the display to differ from the one of `ring_display` after all? Doing this, I wouldn't have to open `order_scope` (or put `%E` scope annotations everywhere) but only `ring_scope` in my usecase."},{"author":"pi8027","date":"2023-03-17T10:44:41Z","comment":"@proux01 From my superficial understanding, it is safer to have both `ring_display` (resp. `ring_scope`) and `ereal_display` (resp. `ereal_scope`). But `constructive_ereal.v` seems to lack specialized notations for `bottom` and `top` (and thus both `bottom` and `GRing.zero` are printed as `0`?). What about redefining `+oo` and `-oo` as such?"},{"author":"proux01","date":"2023-03-17T10:55:18Z","comment":"> `constructive_ereal.v` seems to lack specialized notations for `bottom` and `top` (and thus both `bottom` and `GRing.zero` are printed as `0`?). What about redefining `+oo` and `-oo` as such?\r\n\r\nI agree, thanks for pointing this out.\r\n\r\n> @proux01 From my superficial understanding, it is safer to have both ring_display (resp. ring_scope) and ereal_display (resp. ereal_scope).\r\n\r\nWell, what's the point of having two different displays with the same... display? When writing pen and paper proofs I write `_ <= _` both for reals and extended reals, I would find it nice if I didn't need to change one to `(_ <= _)%R` or `(_ <= _)%E` when formalizing.\r\n"},{"author":"pi8027","date":"2023-03-17T11:17:57Z","comment":"> > @proux01 From my superficial understanding, it is safer to have both ring_display (resp. ring_scope) and ereal_display (resp. ereal_scope).\r\n> \r\n> Well, what's the point of having two different displays with the same... display? When writing pen and paper proofs I write `_ <= _` both for reals and extended reals, I would find it nice if I didn't need to change one to `(_ <= _)%R` or `(_ <= _)%E` when formalizing.\r\n\r\nI think that mixing `(_ <= _)%R` and `(_ <= _)%E` in printing is potential pitfall, although I don't have any concrete example."},{"author":"proux01","date":"2023-03-17T12:02:51Z","comment":"Could you elaborate on your idea? I just don't grasp it unfortunately."},{"author":"pi8027","date":"2023-03-17T12:51:47Z","comment":"Sure. `(x%:E <= y%:E)%E` should be convertible with `(x <= y)%R`, but we have to unfold `Order.le` in the first term to see this fact. IIUC, keyed matching does not unfold the head symbol to see this kind of fact (it checks whether the arguments are respectively convertible after finding a candidate subterm based on the head symbol). So it seems that ssr tactics may not find the right subterm you expect, unless we have a clear distinction between these two things."},{"author":"pi8027","date":"2023-03-17T12:54:36Z","comment":"To be clear, I'm not against the changes introduced by this PR, but saying that there is a discipline in the use of displays, notation scopes, etc. We can open an issue on the analysis repo and continue the discussion."},{"author":"CohenCyril","date":"2023-03-20T12:16:11Z","comment":"@pi8027 I agree we should have a more general discussion, but I also think the notations `0` and `1` were particularly bad in the first place :sweat_smile: \r\n\r\n@proux01 wow you went a long way to preserve backward compatiblity, but I'm not sure it's desirable, and it's definitely error prone since, unless I'm mistaken, you missed a few rescoping in the notations you added (e.g. ``x `&` y`` in `orderBT_scope` does not rescope `x` and `y` properly and it's not the only the only place).\r\nI would be more aggressive and add `\\bot` and `\\top` and remove `0` and  `1` from `order_scope`, and risk breaking compat and add declarations in the few (I expect) places where it's really necessary.\r\nWe could also add unscoped `0%O` and `1%O` parsing only notations, maybe we can even hack the display to trigger a deprecation warning?\r\n\r\n"},{"author":"proux01","date":"2023-03-20T19:48:17Z","comment":"> @pi8027 I agree we should have a more general discussion\r\n\r\nI added the point to the agenda of the next Analysis meeting (extended reals are still there currently)\r\n\r\n> I would be more aggressive and add `\\bot` and `\\top` and remove `0` and `1` from `order_scope`, and risk breaking compat and add declarations in the few (I expect) places where it's really necessary.\r\n\r\nIndeed, done that\r\n\r\n> We could also add unscoped `0%O` and `1%O` parsing only notations,\r\n\r\nDone, this doesn't work with Coq 8.13 and 8.14 (apparently something got fixed/improved in 8.15), so I think this is a good time to drop support for 8.13 and 8.14, if we agree CI is now green.\r\n\r\n> maybe we can even hack the display to trigger a deprecation warning?\r\n\r\nDidn't manage to get anything along this line but since the notation is parsing only, the printing should already be an indice that something changed (beside it doesn't seem to be much used (apparently only mczify in the CI)).\r\n"},{"author":"pi8027","date":"2023-03-21T14:49:57Z","comment":"Just in case, I opened a PR to fix mczify math-comp/mczify#46."},{"author":"proux01","date":"2023-03-22T12:40:58Z","comment":"Thanks, no hurry, that'll only be actually required when we'll remove the new deprecated `0%O` and `1%O` notations."}],"tags":[{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."},{"tag":"TODO: HB port","description":""}],"pull_requests":[]},{"author":"proux01","number":979,"state":"closed","open_date":"2023-03-09T13:56:36Z","update_date":"2023-03-09T18:09:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":978,"state":"open","open_date":"2023-03-08T09:51:17Z","update_date":"2023-03-08T09:51:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":977,"state":"closed","open_date":"2023-03-06T17:11:15Z","update_date":"2023-03-08T09:56:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"thery","number":976,"state":"closed","open_date":"2023-03-02T16:05:59Z","update_date":"2023-03-03T08:47:21Z","discussion":[{"author":"proux01","date":"2023-03-03T07:27:38Z","comment":"Thanks"}],"tags":[],"pull_requests":[]},{"author":"thery","number":975,"state":"closed","open_date":"2023-03-02T15:55:57Z","update_date":"2023-03-03T08:46:33Z","discussion":[{"author":"proux01","date":"2023-03-03T08:37:51Z","comment":"Thanks"}],"tags":[],"pull_requests":[]},{"author":"t6s","number":974,"state":"closed","open_date":"2023-03-02T11:44:39Z","update_date":"2023-03-03T08:39:48Z","discussion":[{"author":"thery","date":"2023-03-02T13:33:02Z","comment":"> I wonder wether we should go through a deprecation phase?\r\n\r\nThese theorems have not be released no?"},{"author":"proux01","date":"2023-03-02T13:41:28Z","comment":"> These theorems have not be released no?\r\n\r\nWell, they appeared in 1.16.0 we just released last month.\r\nBut CI is green, so I hope we wouldn't hurt too many users with the change.\r\n"},{"author":"proux01","date":"2023-03-03T08:39:34Z","comment":"Thanks @t6s for the backport"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":973,"state":"closed","open_date":"2023-03-01T14:24:19Z","update_date":"2023-03-01T14:53:13Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"thery","number":972,"state":"closed","open_date":"2023-02-28T15:38:43Z","update_date":"2023-04-02T20:36:13Z","discussion":[{"author":"thery","date":"2023-03-28T10:46:33Z","comment":"the `coqeal` errors seem unrelated\r\n"},{"author":"proux01","date":"2023-03-28T11:18:39Z","comment":"Indeed: https://github.com/math-comp/math-comp/pull/985"},{"author":"CohenCyril","date":"2023-03-28T11:43:44Z","comment":"Still the changelog should mention the existence of the new instances :\r\n- in `ssralg.v`, the type `bool` is canonically a `fieldType` with additive law `addb` and multiplicative law `andb`\r\n- in `finalg.v`, the type `bool` is canonically a `finFieldType` and a `decFieldType`."},{"author":"thery","date":"2023-03-28T15:37:46Z","comment":":sweat: \r\nThanks :wink: "},{"author":"thery","date":"2023-03-29T14:28:09Z","comment":"Don't understand why there is still the one change asked by a review. I have marked it was resolved. Should I dismiss the review?"},{"author":"CohenCyril","date":"2023-04-01T15:28:47Z","comment":"> Don't understand why there is still the one change asked by a review. I have marked it was resolved. Should I dismiss the review?\r\n\r\nNo you should ping me for reviewing my review."}],"tags":[],"pull_requests":[]},{"author":"MSoegtropIMC","number":971,"state":"closed","open_date":"2023-02-28T15:36:41Z","update_date":"2023-02-28T17:07:10Z","discussion":[{"author":"proux01","date":"2023-02-28T17:07:10Z","comment":"> P.P.S.: I suppressed the issue creation for all mathcomp packages which have the same version number as ssreflect. In case this is not what you want, please let me know.\r\n\r\nThat's perfect, thanks!"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":970,"state":"open","open_date":"2023-02-26T23:02:31Z","update_date":"2023-03-06T17:22:50Z","discussion":[{"author":"proux01","date":"2023-03-06T17:22:50Z","comment":"@pi8027 this seems to work in the hierarchy-builder branch so maybe not worth trying to fix that in master\r\n```Coq\r\nFrom HB Require Import structures.\r\nFrom mathcomp Require Import all_ssreflect.\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nRecord tupleprod_of n (T : Type) :=\r\n  Tupleprod { tpval : seqprod T; _ : size tpval == n }.\r\n\r\nHB.instance Definition _ n T :=\r\n  [isSub for @tpval n T].\r\n\r\n(* work also if uncommented                                                                                                                                    \r\nHB.instance Definition _ n (T : eqType) :=                                                                                                                     \r\n  [Equality of tupleprod_of n T by <:].                                                                                                                        \r\n*)\r\n\r\nHB.instance Definition _ n (T : choiceType) :=\r\n  [Choice of tupleprod_of n T by <:].\r\n\r\n(* work also if uncommented                                                                                                                                    \r\nHB.instance Definition _ n (T : countType) :=                                                                                                                  \r\n  [Countable of tupleprod_of n T by <:].                                                                                                                       \r\n*)\r\n\r\nHB.instance Definition _ d n (T : porderType d) :=\r\n  [SubChoice_isSubPOrder of tupleprod_of n T by <: with d].\r\n\r\nPrint Canonical Projections tupleprod_of.\r\n(*                                                                                                                                                             \r\ntupleprod_of <- SubChoice.sort ( test_tupleprod_of__canonical__choice_SubChoice )                                                                              \r\ntupleprod_of <- Order.SubPOrder.sort ( test_tupleprod_of__canonical__Order_SubPOrder )                                                                         \r\ntupleprod_of <- Sub.sort ( test_tupleprod_of__canonical__eqtype_Sub )                                                                                          \r\ntupleprod_of <- Choice.sort ( test_tupleprod_of__canonical__choice_Choice )                                                                                    \r\ntupleprod_of <- Order.POrder.sort ( test_tupleprod_of__canonical__Order_POrder )                                                                               \r\ntupleprod_of <- Equality.sort ( test_tupleprod_of__canonical__eqtype_Equality )                                                                                \r\ntupleprod_of <- SubEquality.sort ( test_tupleprod_of__canonical__eqtype_SubEquality )                                                                          \r\n*)\r\n```"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":969,"state":"closed","open_date":"2023-02-24T23:26:52Z","update_date":"2023-03-08T15:03:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":968,"state":"closed","open_date":"2023-02-10T05:29:12Z","update_date":"2023-02-10T17:39:33Z","discussion":[{"author":"affeldt-aist","date":"2023-02-10T05:53:40Z","comment":"This should be fixed in Coq : https://github.com/coq/coq/pull/17249"},{"author":"affeldt-aist","date":"2023-02-10T05:53:57Z","comment":"Related problem: PR #968 "},{"author":"affeldt-aist","date":"2023-02-10T05:55:07Z","comment":"TODO: close this if PR #968 and https://github.com/coq/coq/pull/17249 go through"},{"author":"proux01","date":"2023-02-10T12:44:28Z","comment":"@affeldt-aist even if https://github.com/coq/coq/pull/17249 goes through, you should add the switched notations in `mathcomp/ssreflect/ssrfun.v` below a `(* 8.18 additions *)` comment (that will be removed once mathcomp requires COq >= 8.18). Otheriwse, merging this as is will reintroduce the printing bug for sval."},{"author":"affeldt-aist","date":"2023-02-10T13:56:38Z","comment":"@proux01 Thank you!"},{"author":"proux01","date":"2023-02-10T15:14:00Z","comment":"According to CI, Coquelicot requires a patch, I sent a fix to Guillaume."},{"author":"proux01","date":"2023-02-10T17:39:18Z","comment":"Fixed, let's merge"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":967,"state":"closed","open_date":"2023-02-10T05:14:42Z","update_date":"2023-02-10T17:39:36Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":966,"state":"closed","open_date":"2023-02-10T05:08:46Z","update_date":"2023-02-10T12:16:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Tragicus","number":965,"state":"closed","open_date":"2023-02-07T13:59:02Z","update_date":"2023-02-14T14:43:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":964,"state":"closed","open_date":"2023-02-07T06:46:48Z","update_date":"2023-02-10T03:37:52Z","discussion":[{"author":"affeldt-aist","date":"2023-02-07T07:11:21Z","comment":"NB: the `sval` theory is duplicated in `ssrfun.v`."}],"tags":[],"pull_requests":[]},{"author":"clayrat","number":963,"state":"closed","open_date":"2023-02-06T16:35:11Z","update_date":"2023-02-10T17:40:21Z","discussion":[{"author":"proux01","date":"2023-02-10T17:40:21Z","comment":"Thanks @clayrat for your contribution!"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":962,"state":"closed","open_date":"2023-01-31T06:33:41Z","update_date":"2023-02-01T14:12:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":961,"state":"closed","open_date":"2023-01-24T15:47:45Z","update_date":"2023-01-24T16:39:55Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"erikmd","number":960,"state":"closed","open_date":"2023-01-21T00:17:42Z","update_date":"2023-01-21T19:54:11Z","discussion":[{"author":"proux01","date":"2023-01-21T13:53:42Z","comment":"Maybe we should consider removing that upper bound in this dev package, it doesn't make much sense to me.\r\nBut CI green, let's merge."}],"tags":[],"pull_requests":[]},{"author":"thery","number":959,"state":"open","open_date":"2023-01-19T15:56:10Z","update_date":"2023-03-31T09:43:25Z","discussion":[{"author":"CohenCyril","date":"2023-01-20T22:23:27Z","comment":"BTW we should also add the structures of algebra, field algebra, field extension and normal field extension when it makes sense. (So as to provide the missing ingredients for the zulip topic [Explicit construction of F256](https://coq.zulipchat.com/#narrow/stream/237664-math-comp-users/topic/Explicit.20construction.20of.20F256))\r\n"},{"author":"thery","date":"2023-01-21T00:10:04Z","comment":"For algebra I can do it, for the other structures I am less familiar (but I will have a look) but this indicates that we should split qpoly.v  moving the construction of qfpoly to field in a file qfpoly.v."},{"author":"thery","date":"2023-01-21T16:09:39Z","comment":"@CohenCyril ok I am stuck in the galois thing. I still have to understand what I actually need to prove."},{"author":"thery","date":"2023-01-21T21:22:17Z","comment":"@CohenCyril  ok I have done somehing but  with no control as  I don't understand the comments about the problems with finType and canonical structure in `finfield.v`."},{"author":"CohenCyril","date":"2023-01-22T17:11:54Z","comment":"> @CohenCyril ok I have done somehing but with no control as I don't understand the comments about the problems with finType and canonical structure in `finfield.v`.\r\n\r\nI'll take a look"},{"author":"thery","date":"2023-01-23T13:36:31Z","comment":"@CohenCyril what I don't understand is why once you are a finite field you don't have automatically all the good properties and you still have to do something. "},{"author":"thery","date":"2023-01-27T09:48:03Z","comment":"We have checked the compatibility with #879 and  [Verified-FEC](https://github.com/thery/Verified-FEC/tree/qpoly)."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"TODO: HB port","description":""}],"pull_requests":[]},{"author":"thery","number":958,"state":"closed","open_date":"2023-01-12T16:52:08Z","update_date":"2023-01-12T21:59:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":957,"state":"open","open_date":"2023-01-12T15:21:24Z","update_date":"2023-01-12T15:21:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":956,"state":"closed","open_date":"2023-01-11T12:01:26Z","update_date":"2023-01-12T17:06:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":955,"state":"closed","open_date":"2023-01-11T10:52:35Z","update_date":"2023-01-11T16:11:43Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":954,"state":"closed","open_date":"2023-01-11T10:30:32Z","update_date":"2023-01-12T09:36:20Z","discussion":[{"author":"proux01","date":"2023-01-11T17:25:36Z","comment":"I made a stupid error in the Nix derivation (`repo = \"math-comp\"` instead of `repo = \"analysis\"`), so this is waiting for https://github.com/NixOS/nixpkgs/pull/210234"}],"tags":[],"pull_requests":[]},{"author":"thery","number":953,"state":"closed","open_date":"2023-01-03T16:23:16Z","update_date":"2023-01-04T09:44:27Z","discussion":[{"author":"thery","date":"2023-01-04T08:50:00Z","comment":"@CohenCyril  only coqeal fails but I guess it is not my fault"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":952,"state":"closed","open_date":"2022-12-16T16:10:19Z","update_date":"2023-04-07T16:35:20Z","discussion":[{"author":"proux01","date":"2023-01-04T08:56:29Z","comment":"> PS: BTW @proux01 maybe there should be a Co-Authored-By crediting me, @affeldt-aist and IshiguroYoshihiro and Takafumi Saikawa ?\r\n\r\nIndeed, done"},{"author":"proux01","date":"2023-01-10T16:18:06Z","comment":"> I found that some lemmas have very short names such as `subset_big`. When looking for this lemma for example I could have been tempted to include the substring `le` in my `Search` command. Would it make sense to have a bit longer but more informative name?\r\n\r\n@affeldt-aist  I tend to agree, I added `le_` in bigop lemmas were it was absent. Does that feel better?\r\n\r\n"},{"author":"proux01","date":"2023-01-11T08:55:58Z","comment":"> There are two pending comments, but they are probably the same. The UI does not let me see them.\r\n\r\nHere, I can click on \"show resolved\" on the right to expand them."},{"author":"ybertot","date":"2023-01-11T10:16:09Z","comment":"After discussion in a developer meeting, we chose to support a name with suffix \"_mk_monoid\", so the best name seems to be `big_AC_mk_monoid`"},{"author":"proux01","date":"2023-01-11T10:44:57Z","comment":"Thanks, done"},{"author":"proux01","date":"2023-01-17T15:50:37Z","comment":"@ybertot is that mergeable?"},{"author":"affeldt-aist","date":"2023-01-18T09:41:20Z","comment":"> > I found that some lemmas have very short names such as `subset_big`. When looking for this lemma for example I could have been tempted to include the substring `le` in my `Search` command. Would it make sense to have a bit longer but more informative name?\r\n> \r\n> @affeldt-aist I tend to agree, I added `le_` in bigop lemmas were it was absent. Does that feel better?\r\n\r\nYes, I think it is better this way."},{"author":"thery","date":"2023-01-18T14:36:44Z","comment":"I have a naive question : why big is not defined in such a way that \r\n`big[+%/0]_(i <-  [::x1, .... xn]) f i` is simply ` (f x1 + (f x2 + .. f xn)) `  and \r\n`big[+%/0]_(i <-  [::]) f i` is `0.` \r\nIt would make all this trick about `big_max` not necessary."},{"author":"CohenCyril","date":"2023-01-18T16:23:03Z","comment":"> I have a naive question : why big is not defined in such a way that\r\n> `big[+%/0]_(i <- [::x1, .... xn]) f i` is simply `(f x1 + (f x2 + .. f xn))` and\r\n> `big[+%/0]_(i <- [::]) f i` is `0.`\r\n> It would make all this trick about `big_max` not necessary.\r\n\r\nIt might change lots of other behaviours in the non semi-group case ... We should try though."},{"author":"proux01","date":"2023-01-18T16:36:11Z","comment":"> It might change lots of other behaviours in the non semi-group case ... We should try though.\r\n\r\nEven in the non monoid case? But since many lemmas address the monoid case, this might be bearable, I agree we should try.\r\n\r\nIsn't this point relatively orthogonal to that PR though?\r\n"},{"author":"CohenCyril","date":"2023-01-18T16:45:36Z","comment":"@thery we tested briefely with @affeldt-aist, the new definition would invalidate `big_rec2` and `big_rec3` which have many occurrences, we did not push the experiment forward. AFAIU this changes too much the behaviour of bigop for non-monoids.\r\nCC @ggonthier "},{"author":"thery","date":"2023-01-18T18:07:35Z","comment":"The only drawback I see is that we don ´t have `big[+%/0]_(i <-  x :: l)  f i = f x + big[+%/0]_(i <- l) f i` anymore."},{"author":"proux01","date":"2023-01-18T19:12:54Z","comment":"It also seem we would loose `big_rec`."},{"author":"thery","date":"2023-01-18T19:18:40Z","comment":"So it was a bad idea, I have learned something today"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":951,"state":"closed","open_date":"2022-12-16T09:41:32Z","update_date":"2022-12-16T15:47:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Tragicus","number":949,"state":"closed","open_date":"2022-12-12T16:16:07Z","update_date":"2022-12-23T11:26:15Z","discussion":[{"author":"Tragicus","date":"2022-12-19T15:54:14Z","comment":"Except for the new line that I do not find, it should be ok."}],"tags":[],"pull_requests":[]},{"author":"Tragicus","number":948,"state":"closed","open_date":"2022-12-08T21:07:04Z","update_date":"2022-12-09T09:25:37Z","discussion":[{"author":"CohenCyril","date":"2022-12-09T07:46:30Z","comment":"@Tragicus thank you for your contribution, your change will be merged after the suggestions above are addressed."}],"tags":[],"pull_requests":[]},{"author":"jouvelot","number":947,"state":"closed","open_date":"2022-12-04T18:07:39Z","update_date":"2023-04-04T16:19:32Z","discussion":[{"author":"jouvelot","date":"2022-12-11T19:36:36Z","comment":"If these lemmas are considered useful, I could also add to this PR the following ones, which I proved, for completeness, even though I didn't need them:\r\n```\r\nNotation prodn s := (\\prod_(i <- s) i).\r\n\r\nLemma prodn_nconsE s n0 n : prodn (ncons n n0 s) = n0 ^ n * prodn s.\r\n\r\nLemma prodn_set_nthE s n0 n m : \r\n  0 < nth n0 s n ->\r\n  let m' := m * (if size s <= n then nth n0 s n * n0 ^ (n - size s) else 1) in \r\n  prodn (set_nth n0 s n m) = prodn s * m' %/ (nth n0 s n).\r\n```\r\n"},{"author":"proux01","date":"2023-02-21T09:18:30Z","comment":"@jouvelot sorry for the dramatically delayed review.\r\nI simplified your proofs a bit (taking inspiration from similar lemmas about `count` and `set_nth`).\r\nIf that's good for you, I'll merge."},{"author":"jouvelot","date":"2023-02-21T09:30:03Z","comment":"@proux01 No problem for the delay, and these proofs look quite nice, thanks :) Merge is fine for me, yes.  "}],"tags":[],"pull_requests":[]},{"author":"jouvelot","number":946,"state":"closed","open_date":"2022-12-04T15:53:33Z","update_date":"2022-12-04T15:54:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"jouvelot","number":945,"state":"closed","open_date":"2022-11-29T19:51:08Z","update_date":"2022-12-04T15:43:33Z","discussion":[{"author":"CohenCyril","date":"2022-12-04T14:57:43Z","comment":"Hi @jouvelot, thank you for your contribution.\r\nI didn't have the time to look at the substance of your PR yet, but on the form:\r\n1. please never merge anything in your PR branches, use only rebase (e.g. use`git pull -r upstream master`)\r\n2. please never use your own master branch to make PR (one reason being it often triggers unwanted occurences of 1.)"},{"author":"jouvelot","date":"2022-12-04T15:03:17Z","comment":"Thanks for the advice, @CohenCyril. Should I submit a cleaner PR?"},{"author":"CohenCyril","date":"2022-12-04T15:05:29Z","comment":"> Thanks for the advice, @CohenCyril. Should I submit a cleaner PR?\r\n\r\nYes please :pray: "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":944,"state":"open","open_date":"2022-11-29T08:58:45Z","update_date":"2023-02-27T23:11:31Z","discussion":[{"author":"thery","date":"2023-01-13T10:37:24Z","comment":"maybe to make this PR less scary to review, it would be good to split it in 5 digestible chunks : \r\nalgebra,  field,  fingroup,  solvable,  ssreflect\r\n"},{"author":"amahboubi","date":"2023-01-16T17:00:45Z","comment":"I agree with @thery  that this PR is too monolithic. \r\n"},{"author":"amahboubi","date":"2023-01-16T17:03:09Z","comment":"Splitting package-wise might not be the most relevant / easy thing to do. For instance, the changes in ssreflect are of quite different nature. But any way to make the reviewing more incremental would be great.\r\n"},{"author":"amahboubi","date":"2023-01-16T17:06:29Z","comment":"This would allow to accept little controversial additions (e.g., `eisenstein`) rapidly. Other contributions (e.g., the `^^` notation for `map_poly`) might deserve a bit more discussion."},{"author":"amahboubi","date":"2023-01-16T17:08:40Z","comment":"Also, I offered offline to help with finalizing the PR, in particular with the documentation, but a few sketchy comments in the code would nonetheless be much appreciated."},{"author":"amahboubi","date":"2023-01-16T17:13:14Z","comment":"E.g., the intended usage of `dfwith`, the expected caveats of novel notations if any, etc.\r\n"},{"author":"affeldt-aist","date":"2023-02-22T13:06:58Z","comment":"I have just reported a few comments that were made during today's meeting + alpha but maybe I should have addressed most of them myself directly. I'll try to do that a bit later."},{"author":"affeldt-aist","date":"2023-02-22T13:20:20Z","comment":"Compilation fails in `galois.v`. I am afraid I am missing something."}],"tags":[],"pull_requests":[]},{"author":"yoshihiro503","number":943,"state":"closed","open_date":"2022-11-18T01:36:14Z","update_date":"2022-11-22T12:23:12Z","discussion":[{"author":"proux01","date":"2022-11-22T12:23:12Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"SnarkBoojum","number":942,"state":"closed","open_date":"2022-11-17T06:52:26Z","update_date":"2022-12-12T13:04:08Z","discussion":[{"author":"SnarkBoojum","date":"2022-11-17T06:53:44Z","comment":"This is about issue #928."},{"author":"SnarkBoojum","date":"2022-11-17T14:52:36Z","comment":"Ah, I had missed the part about moving the Arguments away ; I'll work on it probably tomorrow afternoon."},{"author":"proux01","date":"2022-12-12T13:01:39Z","comment":"I fixed the last remaining issues, let's merge.\r\n\r\n@SnarkBoojum when a point is addressed, feel free to click on \"Resolve conversation\" so that it's easier to see what remains to be done."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":941,"state":"closed","open_date":"2022-11-03T16:38:02Z","update_date":"2022-11-04T08:41:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":940,"state":"closed","open_date":"2022-10-25T05:50:24Z","update_date":"2022-10-25T08:16:19Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":939,"state":"closed","open_date":"2022-10-25T05:49:13Z","update_date":"2022-10-25T08:16:19Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gares","number":938,"state":"closed","open_date":"2022-10-21T14:56:04Z","update_date":"2022-10-29T18:28:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"yoshihiro503","number":937,"state":"closed","open_date":"2022-10-21T02:27:35Z","update_date":"2022-11-21T15:12:54Z","discussion":[{"author":"proux01","date":"2022-10-23T16:29:57Z","comment":"According to WP: https://en.wikipedia.org/wiki/Vandermonde_matrix the Vandermonde matrix seems to be the transpose, but they also say \"Some authors define the Vandermonde matrix as the [transpose](https://en.wikipedia.org/wiki/Transpose) of the above matrix\". I don't know which one we want here?"},{"author":"CohenCyril","date":"2022-10-24T00:33:09Z","comment":"> According to WP: https://en.wikipedia.org/wiki/Vandermonde_matrix the Vandermonde matrix seems to be the transpose, but they also say \"Some authors define the Vandermonde matrix as the [transpose](https://en.wikipedia.org/wiki/Transpose) of the above matrix\". I don't know which one we want here?\r\n\r\nWe do want the transpose of the \"normal one\" (i.e. the one that is defined here) due to the specific conventions of the mathcomp library wrt that."},{"author":"proux01","date":"2022-10-24T08:05:40Z","comment":"I don't get those specific conventions but I definitely trust you."},{"author":"CohenCyril","date":"2022-10-27T12:04:29Z","comment":"@yoshihiro503 @affeldt-aist also `Vandermonde` must be added to the header of the file (I chose to capitalize and keep the name full because it's a proper name).\r\nPS: is it clear how to proceed to get this PR merged?"},{"author":"CohenCyril","date":"2022-11-21T15:12:54Z","comment":"Thank you @yoshihiro503 "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":936,"state":"closed","open_date":"2022-10-16T10:55:35Z","update_date":"2022-10-17T13:48:42Z","discussion":[{"author":"CohenCyril","date":"2022-10-16T10:59:57Z","comment":"Actually `take_min` might be a better choice than `take_take`... what do you think @thery?\r\nShould we add commit 10f5a1cbb5f77020bfa3d0b3afff8387828c7116 or not?"},{"author":"thery","date":"2022-10-16T11:40:36Z","comment":"do you want to deprecate take_take and only lieave take_taker and take_takel?"},{"author":"thery","date":"2022-10-16T11:43:37Z","comment":"ok this is what you did :+1: "},{"author":"CohenCyril","date":"2022-10-16T11:46:46Z","comment":"> do you want to deprecate take_take and only lieave take_taker and take_takel?\r\n\r\nActually I was considering deprecating nothing (i.e. excluding commit https://github.com/math-comp/math-comp/commit/10f5a1cbb5f77020bfa3d0b3afff8387828c7116) and keeping exactly `take_min`, `take_take` (as it was in 1.15) and `take_taker`, since actually `take_min` seems at least as natural to me than the \"new\" `take_take` (from the current `master` branch)...\r\nWhat do you think @thery?"},{"author":"thery","date":"2022-10-16T12:03:48Z","comment":"I find a bit strange to have `take_taker` and not `take_takel` but  there are other places in the library where it is like this, for example  `comp_polyXr`"},{"author":"thery","date":"2022-10-16T12:05:21Z","comment":"maybe it makes sense to have `take_takel` since there is no reason to priviledge `i<=j` to `j<=i`"}],"tags":[],"pull_requests":[]},{"author":"thery","number":935,"state":"closed","open_date":"2022-10-05T15:39:57Z","update_date":"2022-10-15T08:01:41Z","discussion":[{"author":"proux01","date":"2022-10-07T11:58:11Z","comment":"I would also have expected a lemma like `drop_poly_id : drop_poly 0 p = p`"},{"author":"proux01","date":"2022-10-07T12:13:37Z","comment":"It could also be worth adding a lemma in polydiv.v linking `drop_poly` with division?"},{"author":"thery","date":"2022-10-07T14:25:43Z","comment":"\r\n> It could also be worth adding a lemma in polydiv.v linking `drop_poly` with division?\r\n\r\nYes I thought about it. My problem is that polydiv proposes some weak form of division. So I think it would be nice \r\nto have the theorem with (%/ ) but the definition is so intricate that I am quickly lost in the proof. I see if I have more energy in the weekend\r\n"},{"author":"thery","date":"2022-10-07T19:04:35Z","comment":"@proux01  ok I think I have adressed all your issues. Thanks a lot. It was a bit shaky!"},{"author":"thery","date":"2022-10-10T12:22:08Z","comment":"@proux01 thanks for your review, very helpful!"},{"author":"CohenCyril","date":"2022-10-10T12:38:57Z","comment":"I also have a series of corrections to make (if @proux01 didn't take care of them already ^^')"},{"author":"proux01","date":"2022-10-10T13:02:17Z","comment":"@CohenCyril the last point I'm not entirely sure about is the general rule \"put most complicated term on left of equality\", that's not really satisfied by `odd_even_polyE` and `take_drop_polyE`"},{"author":"thery","date":"2022-10-10T15:16:27Z","comment":"@CohenCyril Thanks. Just one remark about `comp_polyXn`and `comp_polyXnr` I was trying to mimic `comp_polyX` and `comp_polyXr`"},{"author":"CohenCyril","date":"2022-10-10T15:30:50Z","comment":"Woops I did not see your message in time...\r\n\r\n> @CohenCyril Thanks. Just one remark about `comp_polyXn`and `comp_polyXnr` I was trying to mimic `comp_polyX` and `comp_polyXr`\r\n\r\nOh I see... I think `Xnr` is confusing because `n` is for natural and `r` right...so it is a weird mixture of type abbreviation and position :-/... I prefer to have is the way I changed it, using the positions of the words `Xn` and `poly` to understand which is on which side..."},{"author":"thery","date":"2022-10-12T14:31:16Z","comment":"@CohenCyril  looks good to me. The only thing I am puzzled about is that I am not sure that  `sum_even_poly` and `sum_odd_poly` are \"useful\" theorems, they seem there only to ease the proof of  `poly_even_odd`.\r\n\r\nI've found a direct  proof of `poly_even_odd` without bigop surgery (using induction). Maybe it is better?\r\n```\r\nLemma poly_even_odd p : even_poly p \\Po 'X^2 + (odd_poly p \\Po 'X^2) * 'X = p.\r\nProof.\r\nelim/poly_ind: p => [|n IH nE]; first by rewrite !linear0 mul0r add0r.\r\nrewrite !linearD /= even_polyMX odd_polyMX.\r\nrewrite even_polyC odd_polyC linear0 addr0 comp_polyC.\r\nrewrite -[in RHS]nE addrAC mulrDl [_ * _ + _]addrC -mulrA -expr2.\r\nby rewrite /comp_poly rmorphM hornerM_comm /comm_poly /= map_polyX hornerX.\r\nQed.\r\n```"},{"author":"proux01","date":"2022-10-12T14:38:50Z","comment":"I do prefer the current proof, the intermediate lemmas `sum_even_poly` and `sum_odd_poly` can be of interest (I guess, I haven't used them)."},{"author":"thery","date":"2022-10-12T14:53:33Z","comment":"They look very technical to me \r\nFor example I am not sure I would want \r\n```\\sum_(n <= i < size p) p`_i *: 'X^i = drop_poly n p * 'X^n``` \r\nbut if you think they are useful no problem to have them."},{"author":"CohenCyril","date":"2022-10-12T15:21:44Z","comment":"> . The only thing I am puzzled about is that I am not sure that `sum_even_poly` and `sum_odd_poly` are \"useful\" theorems, they seem there only to ease the proof of `poly_even_odd`.\r\n\r\nYes I saw your previous proof. The reason why I suggested to add `sum_even_poly` and `sum_odd_poly` is because I thought they were informative and were good test-benches for the more generic additions to the library. I'm not entirely sure if they are useful though, you are right... Are you ok with keeping them?"},{"author":"CohenCyril","date":"2022-10-12T15:39:21Z","comment":"> For example I am not sure I would want\r\n> `` \\sum_(n <= i < size p) p`_i *: 'X^i = drop_poly n p * 'X^n ``\r\n> but if you think they are useful no problem to have them.\r\n\r\nGood idea! I'm quite fond of it actually :)"},{"author":"thery","date":"2022-10-12T17:10:38Z","comment":"> Good idea! I'm quite fond of it actually :)\r\n\r\n@CohenCyril  maybe you could use it to shorten the proof of `poly_take_drop` :smile: \r\n\r\nwould be interested to have a vscode extrensionl that annotates each theorem of the library with  the number of times it is  used in the CI database.\r\n\r\n\r\n\r\n\r\n\r\n"},{"author":"thery","date":"2022-10-14T07:33:13Z","comment":"I could not improve the proof `poly_take_drop`. So I am fine with the current state of the PR"},{"author":"proux01","date":"2022-10-14T07:37:45Z","comment":"Ok, let's merge"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":934,"state":"open","open_date":"2022-10-04T10:33:42Z","update_date":"2023-04-06T07:02:52Z","discussion":[{"author":"proux01","date":"2022-10-13T09:35:34Z","comment":"@CohenCyril @affeldt-aist I had a look at `_add` and `_sub`, this would give the following renamings:\r\n```\r\n`ler_add2l` -> `lerD2`\r\n`ler_add2r` -> `leD2r`\r\n`ltr_add2l` -> `ltrD2`\r\n`ltr_add2r` -> `ltD2r`\r\n`ler_add2` -> `lerD2r`\r\n`ltr_add2` -> `ltrD2r`\r\n`lter_add2` -> `lterD2r`\r\n`ler_add` -> `lerD`\r\n`ler_lt_add` -> `ler_ltD`\r\n`ltr_le_add` -> `ltr_leD`\r\n`ltr_add` -> `ltrD`\r\n`ler_sub` -> `lerB`\r\n`ler_lt_sub` -> `ler_ltB`\r\n`ltr_le_sub` -> `ltr_leB`\r\n`ltr_sub` -> `ltrB`\r\n`ler_subl_addr` -> `lerBDr`\r\n`ltr_subl_addr` -> `ltrBDr`\r\n`ler_subr_addr` -> `leBrDr`\r\n`ltr_subr_addr` -> `ltBrDr`\r\n`ler_sub_addr` -> `lerBDr`\r\n`ltr_sub_addr` -> `ltrBDr`\r\n`lter_sub_addr` -> `lterBDr`\r\n`ler_subl_addl` -> `lerBrD`\r\n`ltr_subl_addl` -> `ltrBrD`\r\n`ler_subr_addl` -> `leBrrD`\r\n`ltr_subr_addl` -> `ltBrrD`\r\n`ler_sub_addl` -> `leBrD`\r\n`ltr_sub_addl` -> `ltBrD`\r\n`lter_sub_addl` -> `lteBrD`\r\n`ler_addl` -> `lerD`\r\n`ltr_addl` -> `ltrD`\r\n`ler_addr` -> `leDr`\r\n`ltr_addr` -> `ltDr`\r\n`ger_addl` -> `gerD`\r\n`gtr_addl` -> `gtrD`\r\n`ger_addr` -> `geDr`\r\n`gtr_addr` -> `gtDr`\r\n`cpr_add` -> `cprD`\r\n```\r\nFor lemmas like `ltr_paddl` or `ltr_spaddl` I guess we shouln't change anything?\r\n\r\nWhat do you think? (I'd rather not do all the painful work before we reach a consensus)"},{"author":"affeldt-aist","date":"2022-10-16T05:40:21Z","comment":"> For lemmas like ltr_paddl or ltr_spaddl I guess we shouln't change anything?\r\n\r\nIn case of doubt I wouldn't do anything for the time being.\r\n\r\n> What do you think? (I'd rather not do all the painful work before we reach a consensus)\r\n\r\nI think that the last commits address the renamings in Pierre's list (modulo a few typos).\r\n\r\nOther potential candidates for renaming:\r\n- ler_norm_add -> ler_normD\r\n- ler_norm_sub -> ler_normB\r\n- leif_add -> leifD\r\n- gtr_opp -> gtrN\r\n- lteif_oppl -> lteifNl\r\n- lteif_oppr -> lteifNr\r\n\r\nI am not sure about lemmas that involve `dist` (we don't have a one-letter equivalent for it, right?).\r\nAlso when there many caps such as in `leif_subLR` -> `leifBLR`.\r\n\r\n\r\n"},{"author":"proux01","date":"2022-10-18T08:59:52Z","comment":"> I think that the last commits address the renamings in Pierre's list (modulo a few typos).\r\n\r\nWell, this looks to me like much more than typos. You kept the `l` and `r` suffixes for left and right, which differs from what is done for `opp` at the beginning of the PR. Also, aren't those suffixes reserved to long identifiers, in contrast to one letters `B`, `D`, `N` and the like (well maybe not, there are `mulrDl` and `mulrDr` for distributivity).\r\nLooks like we are unfortunately not settled yet :-(."},{"author":"affeldt-aist","date":"2022-10-18T10:37:27Z","comment":"> > I think that the last commits address the renamings in Pierre's list (modulo a few typos).\r\n> \r\n> Well, this looks to me like much more than typos. You kept the `l` and `r` suffixes for left and right, which differs from what is done for `opp` at the beginning of the PR. Also, aren't those suffixes reserved to long identifiers, in contrast to one letters `B`, `D`, `N` and the like (well maybe not, there are `mulrDl` and `mulrDr` for distributivity). Looks like we are unfortunately not settled yet :-(.\r\n\r\nOh, sorry, I thought I saw collisions. I will go back to it asap and will happily try to be more uniform (get rid of superfluous `l` and `r` suffixes that I have difficult to remember anyway ^_^)."},{"author":"affeldt-aist","date":"2022-10-19T04:46:57Z","comment":"`ler_subl_addr` -> `lerBDr` and `ler_sub_addr` -> `lerBDr`\r\nso I guess `ler_sub_addr` should be `leBDr`\r\n(same for `ltr_sub{l,}_addr`)\r\n(and thus `lter_sub_addr` -> `lteBDr` instead of `lterBDr`?)\r\n\r\nI chose 3 letters suffix to follow `ler_sub_addl` that comes after\r\nbut then this does not really agree with `ler_add2` and `ltr_add2` that became `lerD2r` and `ltrD2r`...\r\n\r\n`ler_add` and `ler_addl` also collide (so the second part of the changelog is really wip)\r\n"},{"author":"proux01","date":"2022-10-19T06:54:42Z","comment":"> `ler_subl_addr` -> `lerBDr` and `ler_sub_addr` -> `lerBDr` so I guess `ler_sub_addr` should be `leBDr` (same for `ltr_sub{l,}_addr`) (and thus `lter_sub_addr` -> `lteBDr` instead of `lterBDr`?)\r\n\r\nSounds good (those were indeed typos from me ;-) )\r\n\r\n> I chose 3 letters suffix to follow `ler_sub_addl` that comes after but then this does not really agree with `ler_add2` and `ltr_add2` that became `lerD2r` and `ltrD2r`...\r\n\r\nNot perfect indeed but sounds a reasonable way to solve the name collision.\r\n\r\n> `ler_add` and `ler_addl` also collide (so the second part of the changelog is really wip)\r\n\r\nThis looks worse, maybe `lerD` and `le_rD`?\r\n"},{"author":"thery","date":"2022-10-19T08:31:53Z","comment":"`lez_addr1` -> `lezD1`?"},{"author":"affeldt-aist","date":"2022-10-20T01:08:23Z","comment":"This PR triggered many renamings. Given the release schedule, the\r\ntiming is right but much care seems to be needed to achieve\r\nconsensus while avoiding name clashes and too cryptic\r\nidentifiers. See for example\r\nhttps://github.com/math-comp/math-comp/wiki/Minutes-October-19-2022.\r\nFor the sake of discussion, it is maybe better to be incremental\r\nin this PR, hence this intermediate summary.\r\n\r\nIntermediate summary:\r\n\r\nScope of this PR (a priori):\r\n- `_add/D`, `_sub/B`, `_opp/N`, `_mul/M`, `_inv/V`, `_exp/X`\r\n- `dist` out of scope\r\n\r\nRenaming so far:\r\n- see the changelog of this PR\r\n\r\nCandidates renamings in the queue:\r\n- `lteif_oppl` -> `lteifNl`\r\n- `lteif_oppr` -> `lteifNr`\r\n\r\nNot sure:\r\n- `leif_subLR` -> `leifBLR` (too many caps)\r\n- `ltr_paddl`, `ltr_spaddl` -> no change\r\n"},{"author":"proux01","date":"2022-10-20T08:30:53Z","comment":"> Renaming so far:\r\n> \r\n>     * see the changelog of this PR\r\n> \r\n> \r\n> Candidates renamings in the queue:\r\n> \r\n>     * `lteif_oppl` -> `lteifNl`\r\n> \r\n>     * `lteif_oppr` -> `lteifNr`\r\n\r\nSo, if I understand correctly, this is all going for `l` and `r` suffixes for left and right? While I found them fine after long identifiers, I do prefer one letters like `r` and `n`, for ring and nat, after one letter abbreviations (see `realMr`, `realrM`, `realrMn` for instance).\r\nHowever there are already a few uses like `mulrDl`, `mulrDr` for distributivity, so I guess it's ok, even if I dislike it."},{"author":"affeldt-aist","date":"2022-10-20T09:21:51Z","comment":"> So, if I understand correctly, this is all going for `l` and `r` suffixes for left and right? While I found them fine after long identifiers, I do prefer one letters like `r` and `n`, for ring and nat, after one letter abbreviations (see `realMr`, `realrM`, `realrMn` for instance). However there are already a few uses like `mulrDl`, `mulrDr` for distributivity, so I guess it's ok, even if I dislike it.\r\n\r\nI think that everybody felt the same: positional notation should be preferred and `l`, `r` suffixes aren't great.\r\nBut in the presence of name clashes, a compromise might be necessary, at least for a while. \r\n\r\n"},{"author":"affeldt-aist","date":"2022-10-25T09:14:14Z","comment":"Intermediate summary:\r\n\r\nScope of this PR (a priori):\r\n- `_add/D`, `_sub/B`, `_opp/N`, `_mul/M`, `_inv/V`, `_exp/X`\r\n- `dist` out of scope\r\n\r\nRenaming so far:\r\n- see the changelog of this PR\r\n\r\nCandidates renamings in the queue:\r\n- ler_sub_norm_add -> lerB_normD\r\n- ler_sub_dist -> lerB_dist\r\n- ler_dist_norm_add -> ler_dist_normD\r\n- ler_sub_real -> lerB_real\r\n- leq_add_dist -> leqD_dist\r\n- ltr_expn2r -> ltrX2r\r\n- ler_expn2r -> lerX2r\r\n- ler_pmul -> lerpM\r\n\r\nNot sure:\r\n- `leif_subLR` -> `leifBLR` (too many caps)\r\n - `eqr_oppLR` -> `eqrNLR` (too many caps)\r\n- `ltr_paddl`, `ltr_spaddl` -> no change\r\n\r\nClashes\r\n- `lteif_oppE` should be `lteifNE` but this conflicts with \r\nhttps://github.com/math-comp/math-comp/blob/4a1ed8d219c6a928ce7fa66c15deea5443d616ae/mathcomp/ssreflect/order.v#L4151\r\nWhat should we do here?\r\n\r\n\r\n"},{"author":"affeldt-aist","date":"2022-10-26T01:10:22Z","comment":"> Clashes\r\n> - `lteif_oppE` should be `lteifNE` but this conflicts with \r\n> https://github.com/math-comp/math-comp/blob/4a1ed8d219c6a928ce7fa66c15deea5443d616ae/mathcomp/ssreflect/order.v#L4151\r\n> What should we do here?\r\n\r\nShould the existing `lteifNE` become `neg_lteifE`?"},{"author":"CohenCyril","date":"2022-10-26T09:44:28Z","comment":"> Should the existing `lteifNE` become `neg_lteifE`?\r\n\r\nI don't think so. Maybe multi-rules can keep long names?"},{"author":"affeldt-aist","date":"2022-10-27T01:44:36Z","comment":"Intermediate summary:\r\n\r\nScope of this PR (a priori):\r\n- `_add/D`, `_sub/B`, `_opp/N`, `_mul/M`, `_inv/V`, `_exp/X`\r\n- `dist` out of scope\r\n- span: ssrnum.v, ssrint.v\r\n\r\nRenaming so far:\r\n- see the changelog of this PR\r\n\r\nCandidate renamings in the queue:\r\n- `ler_pmul2l` -> `lerpM2l`\r\n- `lef_pinv` -> `lefpV2`\r\n- `minr_pmull` -> `minrpMl`\r\n- `ler_pexpn2r` ->` lerpX2r`\r\n\r\nNot sure:\r\n- `ltr_wpexpn2r` -> `ltrwpX2r` (not too cryptic?)\r\n- `ler_pdivl_mulr` -> `ler_pdivMr` (it might seem weird to change `_mul` but not `div`)\r\n- `leif_subLR` -> `leifBLR` (too many caps?)\r\n- `eqr_oppLR` -> `eqrNLR` (too many caps?)\r\n\r\nNo change:\r\n- `ltr_paddl`, `ltr_spaddl`\r\n- `lteif_oppE` should have been `lteifNE` but this conflicts with \r\nhttps://github.com/math-comp/math-comp/blob/4a1ed8d219c6a928ce7fa66c15deea5443d616ae/mathcomp/ssreflect/order.v#L4151\r\nso we'll keep the long suffixes for multi-rules\r\n"},{"author":"proux01","date":"2022-10-27T07:36:36Z","comment":">     * `ltr_wpexpn2r` -> `ltrwpX2r` (not too cryptic?)\r\n\r\nWe probably don't want to loose the `n`?"},{"author":"affeldt-aist","date":"2022-10-27T07:41:42Z","comment":"> > ```\r\n> > * `ltr_wpexpn2r` -> `ltrwpX2r` (not too cryptic?)\r\n> > ```\r\n> \r\n> We probably don't want to loose the `n`?\r\n\r\nReally?\r\nBecause I changed `ltr_expn2r` to `ltrX2r`.\r\nI got rid of the `n` after looking at `realX`, `normrX`.\r\n(But I haven't changed much about `_expn` because I was also wondering.)"},{"author":"proux01","date":"2022-10-27T07:53:58Z","comment":"Maybe it's ok then (but I fear we would have conflicts if one day we want to add similar lemmas for some `exp``somewhere)"},{"author":"affeldt-aist","date":"2022-10-27T14:27:20Z","comment":"> Maybe it's ok then (but I fear we would have conflicts if one day we want to add similar lemmas for some `exp``somewhere)\r\n\r\nYes, I also thought of that, but maybe this other `exp` will then deserve a long identifier."},{"author":"affeldt-aist","date":"2022-11-01T12:21:23Z","comment":"Intermediate summary:\r\n\r\nScope of this PR (a priori):\r\n- `_add/D`, `_sub/B`, `_opp/N`, `_mul/M`, `_inv/V`, `_exp/X` (see remarks)\r\n  `_muln/Mn`, `_mulz/Mz`\r\n  (by extension, `_pmul` -> `_pM`, `_wpmul` -> `_wpM`, `_iexpn` -> `_iXn`)\r\n- `dist`, `min`, `max`, `div` out of scope\r\n- span: `ssrnum.v`, `ssrint.v`, `ssralg.v`, `interval.v`\r\n- \r\nRenaming so far:\r\n- see the changelog of this PR\r\n\r\nNot applied:\r\n- use `MV` for division so that, e.g., `ler_pdivl_mulr` -> `ler_pMVlMr`?\r\n  + may not be readable, postoned\r\n\r\nRemarks:\r\n- `lteif_oppE` should have been `lteifNE` but this conflicts with \r\nhttps://github.com/math-comp/math-comp/blob/4a1ed8d219c6a928ce7fa66c15deea5443d616ae/mathcomp/ssreflect/order.v#L4151\r\nso we'll keep the long suffixes for multi-rules\r\n- `_expn` becomes `Xn`, note that `Xn` is also used in `poly.v` with a different meaning\r\n  `_expz` becomes `Xz`\r\n- `real_oppr_max` -x-> `realNr_max` because `real` is not the head symbol of the RHS but a prefix,\r\n  `oppr` is the head symbol to say that the domain of validity of the lemma is `Num.real`\r\n- strings of 8 short identifiers should be exceptional (and the use of long identifiers considered instead)\r\n- p is also the notation for poly\r\n"},{"author":"affeldt-aist","date":"2023-04-06T06:56:53Z","comment":"> Modulo the addition of deprecation notations to help users transition\r\n\r\nDid you spot any missing deprecation notation?\r\nI tried to be careful to add them incrementally.\r\n"},{"author":"proux01","date":"2023-04-06T07:02:52Z","comment":"My bad, I just missed all of them 😢, please ignore my comment.\r\nSo I let @CohenCyril update his review and merge."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":933,"state":"open","open_date":"2022-10-04T08:21:36Z","update_date":"2022-10-05T21:18:56Z","discussion":[{"author":"proux01","date":"2022-10-04T08:26:26Z","comment":"Indeed"},{"author":"CohenCyril","date":"2022-10-04T14:10:14Z","comment":"- or `ler_opp`\r\n- or `lerN2`/`lerN`/`leNr` for the others?"},{"author":"affeldt-aist","date":"2022-10-04T14:42:13Z","comment":"> * or `ler_opp`\r\n> * or `lerN2`/`lerN`/`leNr` for the others?\r\n\r\nYou mean `lerN` for `ler_oppr`? I would see that as an improvement but maybe only because I am bad at left and right. ^_^\r\n\r\nBut for `lerN2`, I am not sure. In fact, I would argue to keep `ler_opp` because I see `_opp` as the long version of `N`\r\nand also because I am not sure we have been using the `2` notation that much (am I wrong?).\r\n\r\n\r\n"},{"author":"proux01","date":"2022-10-04T14:58:21Z","comment":"There are `ler_add2l` and the like but not sure how \"common\" it is."},{"author":"affeldt-aist","date":"2022-10-04T22:54:58Z","comment":"> There are `ler_add2l` and the like but not sure how \"common\" it is.\r\n\r\nRight. But in this case this is the long `_add` instead of `D`."},{"author":"CohenCyril","date":"2022-10-05T21:18:56Z","comment":"This is for historical reasons"}],"tags":[],"pull_requests":[]},{"author":"thery","number":932,"state":"closed","open_date":"2022-09-28T18:15:13Z","update_date":"2023-01-13T14:01:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pPomCo","number":931,"state":"open","open_date":"2022-09-27T14:51:09Z","update_date":"2022-10-02T23:00:33Z","discussion":[{"author":"proux01","date":"2022-09-28T08:18:45Z","comment":"@pPomCo in order to help reviewing (but again, I can't review myself, being utterly unqualified here), you may want to point to/explain your use case for those new lemmas."},{"author":"erikmd","date":"2022-09-28T22:21:03Z","comment":"> @pPomCo in order to help reviewing (but again, I can't review myself, being utterly unqualified here), you may want to point to/explain your use case for those new lemmas.\r\n\r\nThanks @proux01 for all your comments!\r\n\r\nI believe a bit of history/motivation of a number of lemmas involved in this PR is lacking in the Coq comments, indeed:\r\n\r\nAll the lemmas related to `fprod` (finite product) were developed by me within this older contribution:\r\n\r\n```\r\n@inproceedings{DBLP:conf/types/Martin-DorelS16,\r\n  author    = {{\\'{E}}rik Martin{-}Dorel and\r\n               Sergei Soloviev},\r\n  editor    = {Silvia Ghilezan and\r\n               Herman Geuvers and\r\n               Jelena Ivetic},\r\n  title     = {A Formal Study of Boolean Games with Random Formulas as Payoff Functions},\r\n  booktitle = {22nd International Conference on Types for Proofs and Programs, {TYPES}\r\n               2016, May 23-26, 2016, Novi Sad, Serbia},\r\n  series    = {LIPIcs},\r\n  volume    = {97},\r\n  pages     = {14:1--14:22},\r\n  publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\r\n  year      = {2016},\r\n  url       = {https://doi.org/10.4230/LIPIcs.TYPES.2016.14},\r\n  doi       = {10.4230/LIPIcs.TYPES.2016.14},\r\n  timestamp = {Tue, 11 Feb 2020 15:52:14 +0100},\r\n  biburl    = {https://dblp.org/rec/conf/types/Martin-DorelS16.bib},\r\n  bibsource = {dblp computer science bibliography, https://dblp.org}\r\n}\r\n```\r\n\r\nin order to formalize the dependent product of finTypes, also endowed with a finType canonical structure.\r\n\r\nThe main definition is as follows:\r\n\r\n```coq\r\n(** Definition and cardinal of [fprod] := dependent product of finTypes *)\r\nRecord fprod : predArgType :=\r\n  { fprod_fun : {ffun I -> {i : I & T_ i}} ;\r\n    fprod_prop : [forall i : I, tag (fprod_fun i) == i] }.\r\n```\r\n\r\nand it straightforwardly follows (hopefully in a math-comp idiomatic way) the usual pencil-and-paper construction of dependent products in set theory for example, namely:\r\n\r\n[![https://en.wikipedia.org/wiki/Cartesian_product#Infinite_Cartesian_products](https://wikimedia.org/api/rest_v1/media/math/render/svg/24697ee110c11986a30ca7aa1c8eda0dd5be75f6)](https://en.wikipedia.org/wiki/Cartesian_product#Infinite_Cartesian_products)\r\n\r\nIt happened the review of the TYPES-2016-post-proceedings articles was very long (≥2Y), and at the time we were focusing on submitting a PR for this `fprod` material in math-comp, we noticed Georges' PR https://github.com/math-comp/math-comp/pull/294 in April 2019, which thoroughly generalized non-dependent finfuns to dependent finfuns; making our PR idea useless at first sight.\r\n\r\nHowever, when working with @pPomCo on his [formalization of games of incomplete information](https://github.com/pPomCo/coq-belgames-csl2023/), the fact to have this alternative, layered definition of \"dependent finfuns\" seemed to make several proofs easier, relying on existing math-comp material.\r\n\r\nSo, one part of this PR #931 directly provides this materiel *(BTW @pPomCo we might want to add a `Co-Authored-By: _` clause in this PR, maybe)*\r\nAnd the second part amounts to general, albeit seemingly useful material for {finfun.v, finset.v, fintype.v} (so just to recall @proux01: the current use case is just coq-belgames, from file [general_lemmas.v](https://github.com/pPomCo/coq-belgames-csl2023/blob/main/theories/general_lemmas.v))"},{"author":"CohenCyril","date":"2022-10-02T13:37:16Z","comment":"All right, I did a first pass to see more clearly.\r\nI performed many renamings, simplifications and refactorings.\r\nDoing so I introduced\r\n- the predicate `tagged_with` which was left unnamed in your PR.\r\n- the mutual bijections `tag_with` / `untag_with` between `T_ i` and `{x in tagged_with T_ i}`\r\n- the mutual bijections `to_family_tagged_with` / `of_family_tagged_with` between `fprod T_` and `{x in family (tagged_with T_)`\r\n\r\nThe bijections I introduced suggest two alternative and more concise representations for `fprod` using preexisting ingredients:\r\n- `{x in family (tagged_with T_)}`\r\n- `{dffun forall i : I, {x in tagged_with T_ i}}`\r\nAnd many of my simplification take advantage of these.\r\n\r\nI'm not entirely sure of the purpose of lemma `big_fprod_dep` but it looks like the type of `Q` should be changed (so that the correpondance between `fprod` and other representations is always used in the same direction) but I'm not sure, I must see usecases.\r\n\r\nI also left some succint comments questioning the use of some lemmas.\r\n"},{"author":"erikmd","date":"2022-10-02T23:00:33Z","comment":"Thanks a lot, @CohenCyril !\r\n\r\n@pPomCo and I will take a look at your refined version and try to address your commented questions."}],"tags":[],"pull_requests":[]},{"author":"pPomCo","number":930,"state":"closed","open_date":"2022-09-27T14:41:06Z","update_date":"2022-09-27T14:43:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pPomCo","number":929,"state":"closed","open_date":"2022-09-27T14:37:52Z","update_date":"2022-09-30T07:31:46Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"SnarkBoojum","number":928,"state":"closed","open_date":"2022-09-26T06:56:08Z","update_date":"2022-12-12T13:04:45Z","discussion":[{"author":"SnarkBoojum","date":"2022-09-27T12:30:44Z","comment":"I'm not getting anywhere, stuck because I'm not yet fluent enough in Coq ; here is what I have:\r\n```\r\nFrom mathcomp Require Import all_ssreflect ssralg.\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nSection Missing.\r\n\r\nImport GRing.Theory.\r\nLocal Open Scope ring_scope.\r\n\r\nLemma telescope_sumr_eq {a b: nat} {aleqb: a <= b} {V: zmodType} {u: nat -> V}:\r\n forall (f: nat -> V),\r\n (forall k, (a <= k < b)%N -> u k = f k.+1 - f k) -> \\sum_(a <= k < b) u k = f b - f a.\r\nProof.\r\nmove=> f diffexpr.\r\nunder eq_big_nat => k kab do rewrite diffexpr //=.\r\nby apply telescope_sumr.\r\nQed.\r\n\r\n(* FIXME: here the idea was that I would want to say I want to use a telescopic sum, and coq\r\n  would grant my wish only if I can prove the existence of an appropriate f - it doesn't quite\r\n  work like this, even if I can prove this result *)\r\nLemma telescope_sumr_eq' {a b: nat} {aleqb: a <= b} {V: zmodType} {u: nat -> V}:\r\n (exists f, forall k, (a <= k < b)%N -> u k = f k.+1 - f k)\r\n  -> exists f, \\sum_(a <= k < b) u k = f b - f a.\r\nProof.\r\nmove=> [f diffexpr].\r\nunder eq_big_nat => k kab do rewrite diffexpr //=.\r\nexists f.\r\nby apply telescope_sumr.\r\nQed.\r\n\r\nEnd Missing.\r\n\r\nFrom mathcomp Require Import all_algebra.\r\n\r\nSection Example.\r\n\r\nLocal Open Scope ring_scope.\r\n\r\nVariable RR: realFieldType.\r\n\r\nLemma testing_telescope_sumr_eq n: \\sum_(1 <= k < n.+1) 1/(k * (k+1))%:R = 1-1/n.+1%:R :> RR.\r\nProof.\r\nCheck telescope_sumr_eq. (* here I see the first argument is f *)\r\nCheck (telescope_sumr_eq _). (* but now it's the forall k, a <= k < b -> ... !? *)\r\napply (telescope_sumr_eq (fun k => -1/k%:R)). (* so this fails... *)\r\n\r\nEnd Example.\r\n```"},{"author":"jouvelot","date":"2022-09-27T13:01:36Z","comment":"You can move forward by using `rewrite` instead of `apply`:\r\n\r\nrewrite (@telescope_sumr_eq _ _ _ _  _ (fun k => -1/k%:R)). \r\n\r\n> On 27 Sep 2022, at 14:30, Julien Puydt ***@***.***> wrote:\r\n> \r\n> \r\n> I'm not getting anywhere, stuck because I'm not yet fluent enough in Coq ; here is what I have:\r\n> \r\n> From mathcomp Require Import all_ssreflect ssralg.\r\n> \r\n> Set Implicit Arguments.\r\n> Unset Strict Implicit.\r\n> Unset Printing Implicit Defensive.\r\n> \r\n> Section Missing.\r\n> \r\n> Import GRing.Theory.\r\n> Local Open Scope ring_scope.\r\n> \r\n> Lemma telescope_sumr_eq {a b: nat} {aleqb: a <= b} {V: zmodType} {u: nat -> V}:\r\n>  forall (f: nat -> V),\r\n>  (forall k, (a <= k < b)%N -> u k = f k.+1 - f k) -> \\sum_(a <= k < b) u k = f b - f a.\r\n> Proof.\r\n> move=> f diffexpr.\r\n> under eq_big_nat => k kab do rewrite diffexpr //=.\r\n> by apply telescope_sumr.\r\n> Qed.\r\n> \r\n> (* FIXME: here the idea was that I would want to say I want to use a telescopic sum, and coq\r\n>   would grant my wish only if I can prove the existence of an appropriate f - it doesn't quite\r\n>   work like this, even if I can prove this result *)\r\n> Lemma telescope_sumr_eq' {a b: nat} {aleqb: a <= b} {V: zmodType} {u: nat -> V}:\r\n>  (exists f, forall k, (a <= k < b)%N -> u k = f k.+1 - f k)\r\n>   -> exists f, \\sum_(a <= k < b) u k = f b - f a.\r\n> Proof.\r\n> move=> [f diffexpr].\r\n> under eq_big_nat => k kab do rewrite diffexpr //=.\r\n> exists f.\r\n> by apply telescope_sumr.\r\n> Qed.\r\n> \r\n> End Missing.\r\n> \r\n> From mathcomp Require Import all_algebra.\r\n> \r\n> Section Example.\r\n> \r\n> Local Open Scope ring_scope.\r\n> \r\n> Variable RR: realFieldType.\r\n> \r\n> Lemma testing_telescope_sumr_eq n: \\sum_(1 <= k < n.+1) 1/(k * (k+1))%:R = 1-1/n.+1%:R :> RR.\r\n> Proof.\r\n> Check telescope_sumr_eq. (* here I see the first argument is f *)\r\n> Check (telescope_sumr_eq _). (* but now it's the forall k, a <= k < b -> ... !? *)\r\n> apply (telescope_sumr_eq (fun k => -1/k%:R)). (* so this fails... *)\r\n> \r\n> End Example.\r\n> —\r\n> Reply to this email directly, view it on GitHub <https://github.com/math-comp/math-comp/issues/928#issuecomment-1259437795>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AEH4LNOX5T2WO5362FSB3V3WALSIFANCNFSM6AAAAAAQVPMAHU>.\r\n> You are receiving this because you are subscribed to this thread.\r\n> \r\n\r\n"},{"author":"SnarkBoojum","date":"2022-09-30T19:36:15Z","comment":"Here is a new version of the code ; as you can see I have:\r\n- a working `telescope_sumr_eq` lemma ;\r\n- an unsatisfying `telescome_sumr_eq'` lemma I would like to discuss ;\r\n- an unsatisfying example of using `telescope_sumr_eq`: the first lines show the interest of the lemma, but there are so many awkward goals to take care afterwards... what can be done to improve that?\r\n\r\n```\r\nFrom mathcomp Require Import all_ssreflect ssralg.\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nSection Missing.\r\n\r\nImport GRing.Theory.\r\nLocal Open Scope ring_scope.\r\n\r\nLemma telescope_sumr_eq {a b: nat} {V: zmodType} {u: nat -> V}:\r\n forall (f: nat -> V), (a <= b) ->\r\n (forall k, (a <= k < b)%N -> u k = f k.+1 - f k) -> \\sum_(a <= k < b) u k = f b - f a.\r\nProof.\r\nmove=> f [aleqb diffexpr].\r\nunder eq_big_nat => k kab do rewrite diffexpr //=.\r\nby apply telescope_sumr.\r\nQed.\r\n\r\n\r\n(* FIXME: here the idea was that I would want to say I want to use a telescopic sum, and coq\r\n  would grant my wish only if I can prove the existence of an appropriate f - it doesn't quite\r\n  work like this, as I don't see how to express it with a single existence quantification.\r\n  The lemma below is the best I managed to express&prove *)\r\nLemma telescope_sumr_eq' {a b: nat} {aleqb: a <= b} {V: zmodType} {u: nat -> V}:\r\n (exists f, forall k, (a <= k < b)%N -> u k = f k.+1 - f k)\r\n  -> exists f, \\sum_(a <= k < b) u k = f b - f a.\r\nProof.\r\nmove=> [f diffexpr].\r\nunder eq_big_nat => k kab do rewrite diffexpr //=.\r\nexists f.\r\nby apply telescope_sumr.\r\nQed.\r\n\r\nEnd Missing.\r\n\r\n(* FIXME: I have to do that so my arguments don't get optional under my feet\r\n -- I hope it won't bite me in the PR code *)\r\nArguments telescope_sumr_eq {a b V u} f.\r\n\r\nFrom mathcomp Require Import all_algebra.\r\nFrom mathcomp.algebra_tactics Require Import ring.\r\n\r\nSection Example.\r\n\r\nImport GRing.Theory Num.Theory.\r\nLocal Open Scope ring_scope.\r\n\r\nVariable RR: realFieldType.\r\n\r\nLemma testing_telescope_sumr_eq n: \\sum_(1 <= k < n.+1) 1/(k * (k+1))%:R = 1%:R - 1/n.+1%:R :> RR.\r\nProof.\r\nrewrite (telescope_sumr_eq (fun (k: nat) => -1/k%:R)) //=.\r\n  field.\r\n  by rewrite -mulrS pnatr_eq0.\r\nmove=> k /andP [Hk0 Hkn].\r\nfield ; apply/andP ; split.\r\n - by rewrite pnatr_eq0 lt0n_neq0.\r\n - by rewrite -mulrS pnatr_eq0.\r\nQed.\r\n\r\nEnd Example.\r\n```"},{"author":"jouvelot","date":"2022-09-30T21:02:02Z","comment":"Note that, regarding `telescope_sumr_eq'`, it can in fact be decoupled from telescopic sums:\r\n```\r\nLemma telescope_sumr_eq' {a b: nat} {aleqb: a <= b} {V: zmodType} {u: nat -> V}:\r\n (exists f, forall k, (a <= k < b)%N -> u k = f k.+1 - f k)\r\n  -> exists f, \\sum_(a <= k < b) u k = f b - f a.\r\nProof.\r\nmove=> _.\r\nexists (fun x => if x == b then \\sum_(a <= k < b) u k else 0).\r\nhave [/eqP ->|] := boolP (a == b); last by rewrite eq_refl subr0.\r\nby rewrite eq_refl !big_geq // subr0.\r\nQed.\r\n```"},{"author":"SnarkBoojum","date":"2022-10-03T14:27:57Z","comment":"About `telescope_sumr_eq'`, I don't care much to improve the proof: it's the statement I don't like.\r\n\r\nThe most worrying part is the example, where most of the lines are for trivial goals..."},{"author":"jouvelot","date":"2022-10-03T15:36:09Z","comment":"Indeed, the statement `telescope_sumr_eq'` can be proven without referring to telescopic sums whatsoever. It seems to me that `telescope_sumr_eq` is already the good one. As for the remaining trivial goals to prove in the example, at least, they are.... \"trivial\" :)"},{"author":"SnarkBoojum","date":"2022-10-03T15:38:45Z","comment":"Their proof is definitely not simple enough compared to their statement -- I tend to consider that a bug."},{"author":"jouvelot","date":"2022-10-03T18:57:56Z","comment":"\"Bug\" seems to me a bit too strong a word; \"inconvenience\" could be better. But your mileage may vary.... ;)"},{"author":"SnarkBoojum","date":"2022-10-03T19:13:07Z","comment":"Well, the target I have in mind is a generic first-year student, so \"inconvenience\" is an understatement... each of those `rewrite` line and the `apply/andP` are pretty terrible!"},{"author":"proux01","date":"2022-10-04T11:02:21Z","comment":"@SnarkBoojum \r\n\r\nFor `telescope_sumr_eq`, I would probably put the arguments in the following order (f is the thing you usually want to provide, let's put it as early as possible):\r\n```Coq\r\nFrom mathcomp Require Import all_ssreflect all_algebra.\r\nFrom mathcomp.algebra_tactics Require Import ring.\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nImport GRing.Theory Num.Theory.\r\n\r\nLocal Open Scope ring_scope.\r\n\r\nSection First.\r\n\r\nLemma telescope_sumr_eq (V : zmodType) (f u : nat -> V) (a b: nat) :\r\n    (a <= b)%N -> (forall k, (a <= k < b)%N -> u k = f k.+1 - f k) ->\r\n  \\sum_(a <= k < b) u k = f b - f a.\r\nProof.\r\nmove=> aleqb diffexpr.\r\nunder eq_big_nat => ? ? do rewrite diffexpr //.\r\nexact: telescope_sumr.\r\nQed.\r\n\r\nEnd First.\r\nArguments telescope_sumr_eq {V} f u.\r\n```\r\nFor the use, it looks good to me on your example:\r\n```Coq\r\nSection Test1.\r\n\r\nVariable F : realFieldType.\r\n\r\nLemma testing_telescope_sumr_eq n :\r\n  \\sum_(1 <= k < n.+1) 1 / (k * k.+1)%:R = 1%:R - 1 / n.+1%:R :> F.\r\nProof.\r\nrewrite (telescope_sumr_eq (fun k => - 1 / k%:R)) => [|//|k /andP[kgt0 _]].\r\n  by field; rewrite -mulrS pnatr_eq0.\r\nby field; rewrite -mulrS !pnatr_eq0 -lt0n kgt0.\r\nQed.\r\n```\r\n(although, as already discussed, it would be nice to have some automation to solve the goals with `%:R` left by field)\r\n\r\n> Well, the target I have in mind is a generic first-year student, so \"inconvenience\" is an understatement... each of those rewrite line and the apply/andP are pretty terrible!\r\n\r\nWow, that seems ambitious to me, maybe you can discuss with @mkerjean and @amahboubi who, IIRC, teach an introductory Coq lecture for early math students."},{"author":"ybertot","date":"2022-10-04T11:09:49Z","comment":"@proux01 For your information, I am also involved in this project and discussing with @SnarkBoojum.  [This site](https://liberabaci.gitlabpages.inria.fr/) may help understanding some of our reflection on the matter."},{"author":"amahboubi","date":"2022-10-13T19:19:44Z","comment":"Hello @SnarkBoojum . Usually, using more forward chaining steps (with `have`, `suffices`, `pose`, `set`, ...) helps writing more satisfactory proof scripts.\r\n"},{"author":"SnarkBoojum","date":"2022-11-15T13:57:47Z","comment":"I finally dived again in this ; I also wrote a `telescope_prodr_eq` because that's definitely useful on a few occasions too:\r\n```Coq\r\nFrom mathcomp Require Import all_ssreflect ssralg.\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nSection Missing.\r\n\r\nImport GRing.Theory.\r\nLocal Open Scope ring_scope.\r\n\r\nLemma telescope_sumr_eq {a b: nat} {V: zmodType} {u: nat -> V} {aleqb: a <= b}:\r\n forall f: nat -> V,\r\n (forall k, (a <= k < b)%N -> u k = f k.+1 - f k)\r\n -> \\sum_(a <= k < b) u k = f b - f a.\r\nProof.\r\nmove=> f diffexpr.\r\nunder eq_big_nat => k kab do rewrite diffexpr //=.\r\nby apply: telescope_sumr.\r\nQed.\r\n\r\nLemma telescope_prodr_eq {a b: nat} {R: comUnitRingType} {u: nat -> R} {altb: a < b}:\r\n forall (f: nat -> R),\r\n   (forall k, a< k < b -> f k \\is a GRing.unit)\r\n   -> (forall k, (a <= k < b)%N -> u k = f k.+1 / f k)\r\n   -> \\prod_(a <= k < b) u k = f b / f a.\r\nProof.\r\nmove=> f Hf quotexpr.\r\nunder eq_big_nat => k kab do rewrite quotexpr //=.\r\nrewrite (telescope_big (fun i j => f j / f i)) ?altb //.\r\nmove=> k kab //=.\r\nrewrite mulrC mulrA divrK //.\r\nby exact: Hf k kab.\r\nQed.\r\n\r\nEnd Missing.\r\n\r\n(* FIXME: I have to do that so my arguments don't get optional under my feet\r\n -- I hope it won't bite me in the PR code *)\r\nArguments telescope_sumr_eq {a b V u aleqb} f.\r\nArguments telescope_prodr_eq {a b R u altb} f.\r\n\r\nFrom mathcomp Require Import all_algebra.\r\nFrom mathcomp.algebra_tactics Require Import ring.\r\n\r\nSection Example.\r\n\r\nImport GRing.Theory Num.Theory.\r\nLocal Open Scope ring_scope.\r\n\r\nVariable RR: realFieldType.\r\n\r\nLemma testing_telescope_sumr_eq n:\r\n  \\sum_(1 <= k < n.+1) 1/(k * (k+1))%:R = 1%:R - 1/n.+1%:R :> RR.\r\nProof.\r\nrewrite (telescope_sumr_eq (fun (k: nat) => -1/k%:R)) //=.\r\n  field.\r\n  by rewrite -mulrS pnatr_eq0.\r\nmove=> k /andP [Hk0 Hkn].\r\nfield.\r\napply/andP ; split.\r\n - by rewrite pnatr_eq0 lt0n_neq0.\r\n - by rewrite -mulrS pnatr_eq0.\r\nQed.\r\n\r\nLemma testing_telescope_prodr_eq n:\r\n  n != 0%N\r\n  -> \\prod_(1 <= k < n.+1) (k.+1%:R / k%:R) = n.+1%:R :> RR.\r\nProof.\r\nmove=> nneq0.\r\nrewrite (telescope_prodr_eq (fun (k: nat) => k%:R)) //=.\r\n- by field.\r\n- move: nneq0.\r\n  by case: n.\r\n- move=> k /andP [kgt1 _].\r\n  apply: unitf_gt0.\r\n  rewrite ltr0n.\r\n  by apply: ltn_trans _ kgt1.\r\nQed.\r\n\r\nEnd Example.\r\n```\r\n\r\nHow does it look?"},{"author":"proux01","date":"2022-11-15T14:18:28Z","comment":"Seems good for a PR. As I said above, I would change the order of the arguments:\r\n```Coq\r\nLemma telescope_sumr_eq {a b : nat} {V : zmodType} (f u : nat -> V) :\r\n   (a <= b)%N ->\r\n   (forall k, (a <= k < b)%N -> u k = f k.+1 - f k) ->\r\n \\sum_(a <= k < b) u k = f b - f a.\r\n```\r\nBut let's discuss those details in the PR."},{"author":"SnarkBoojum","date":"2022-11-15T14:54:02Z","comment":"@proux01 I wanted most arguments to be optional (and put them first) and only then `f` and the fact it was a suitable candidate for telescoping as final mandatory ones, but that's just because I tend to distinguish between \"stupid\" hyps and active ones in my mathematical statements and hence mimick that in Coq.\r\n\r\nThat brings two questions:\r\n1. what would the other order bring in?\r\n2. why is it better to discuss in a PR and not here?"},{"author":"proux01","date":"2022-11-15T15:02:57Z","comment":">     1. what would the other order bring in?\r\n\r\nIt's easier to provide `u` in case you want to rewrite backward.\r\n\r\n>     2. why is it better to discuss in a PR and not here?\r\n\r\nBecause we have an actual code (rather than a bunch of messages) and github offers good tools to visualize diffs and make suggestions."},{"author":"SnarkBoojum","date":"2022-11-17T06:54:53Z","comment":"Ok, PR done."},{"author":"proux01","date":"2022-12-12T13:04:42Z","comment":"Addressed in #942 "}],"tags":[],"pull_requests":[]},{"author":"pPomCo","number":927,"state":"closed","open_date":"2022-09-23T12:45:33Z","update_date":"2022-09-27T14:38:34Z","discussion":[{"author":"pPomCo","date":"2022-09-27T14:38:34Z","comment":"Thanks proux01 for your fast review.\r\nAs you suggest, I will propose smaller pull requests in order to split finType-related and algebra-related lemmas.\r\nAlso I will take into account all the useful comments you made for this PR.\r\n"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":926,"state":"closed","open_date":"2022-09-22T11:48:54Z","update_date":"2022-09-22T14:00:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":925,"state":"closed","open_date":"2022-09-13T14:11:01Z","update_date":"2022-09-14T12:21:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"erikmd","number":924,"state":"closed","open_date":"2022-09-13T13:37:08Z","update_date":"2022-09-13T15:06:30Z","discussion":[{"author":"proux01","date":"2022-09-13T13:42:32Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"SnarkBoojum","number":923,"state":"closed","open_date":"2022-09-13T09:17:33Z","update_date":"2022-09-22T14:01:32Z","discussion":[{"author":"proux01","date":"2022-09-13T09:36:16Z","comment":"Then, you can either try to modify the current `hornerE` but if CI reveals too many breakage, it's probably better to add a new multirule lemma. In any case, feel free to open a pull request, this will launch the CI on math-comp itself and a few reverse dependencies, enabling you to assess the impact of your change."},{"author":"SnarkBoojum","date":"2022-09-13T09:43:12Z","comment":"The impact should be pretty minimal ; if you look at the patch you'll see most proofs using `hornerE` break because they want to simplify something which is already simple."},{"author":"proux01","date":"2022-09-13T10:05:20Z","comment":"Ho, sorry, I mixed this for the issue and didn't notice it is a PR.\r\nYour patch indeed looks pretty good.\r\nAccording to the CI, you need to prepare an overlay real-closed (and then possibly CoqEAL and Abel), could you do that to check the change is reasonnable there too (maybe just add `?` to make your patch backward compatible)."},{"author":"SnarkBoojum","date":"2022-09-13T10:12:40Z","comment":"I'm clueless on how to make an overlay, but I'm already having a look at mathcomp-real-closed, I'll look into CoqEAL later.\r\n\r\nI don't know anything about Abel yet but I can probably dig."},{"author":"proux01","date":"2022-09-13T10:18:17Z","comment":"For overlays, just open a PR on the other project (real-closed, CoqEAL,...)\r\nIf you want to run the CI with the overlay here, you can update the `.nix/config.nix` file adding lines like `mathcomp-real-closed.override.version = \"SnarkBoojum:<name_of_you_branch_on_your_fork_of_real_closed>\";` in each bundle."},{"author":"proux01","date":"2022-09-13T10:19:22Z","comment":"Note that there might be nothing to do for CoqEAL and Abel, you'll find out after doing the overlay for real-closed since they both depend on real-closed."},{"author":"SnarkBoojum","date":"2022-09-13T12:07:14Z","comment":"Ok, I made a fork and tried to point config.nix to it... is it enough?"},{"author":"SnarkBoojum","date":"2022-09-13T13:39:23Z","comment":"On my box with my patches to mathcomp, mathcomp-real-closed and mathcomp-abel, everything is ok."},{"author":"proux01","date":"2022-09-14T05:54:13Z","comment":"@SnarkBoojum congrats! CI is green (and I stand corrected, the change did not break everything). Your patch looks great and I'd like to merge by next week if there is no more comments.\r\nFor this, we first need to get the two overlays (real-closed and abel) merged, since they are backward compatible. Could you open the pull requests there?"},{"author":"SnarkBoojum","date":"2022-09-14T06:31:03Z","comment":"I see three failures in the tests... so it's not all green.\r\n\r\nThe PR are opened, but it looks like MC-Abel's CI has issues with the PR, and for MC-real-closed, it looks like someone needs to manually trigger the CI."},{"author":"proux01","date":"2022-09-14T06:47:45Z","comment":"> I see three failures in the tests... so it's not all green.\r\n\r\nThose are expected because no overlays are set for the Docker based CI (but since they are successfully tested in the Nix based CI, that's fine)."},{"author":"SnarkBoojum","date":"2022-09-14T06:56:47Z","comment":"I must admit I have a hard time knowing exactly what a given check-line corresponds to -- so I don't know how problematic each is."},{"author":"SnarkBoojum","date":"2022-09-14T07:16:00Z","comment":"I'm not sure my last change on MC-Abel is that good on the new hornerE ; how can I restart the CI here?"},{"author":"proux01","date":"2022-09-14T12:12:24Z","comment":"> I'm not sure my last change on MC-Abel is that good on the new hornerE ; how can I restart the CI here?\r\n\r\nEither click on `details` on the right of the job and there should be a `Rerun all jobs` button on top right corner, or just force-push (`git commit --amend --no-edit; git push --force-with-lease`)."},{"author":"SnarkBoojum","date":"2022-09-20T15:24:51Z","comment":"Oh, @CohenCyril, thank you but shouldn't you have dealt with the real-closed PR before merging this one?"},{"author":"proux01","date":"2022-09-20T15:27:55Z","comment":"Yes, we should merge the real-closed overlay: https://github.com/math-comp/real-closed/pull/49\r\n(and remove the overlays here, I can do that in a separate PR)"},{"author":"CohenCyril","date":"2022-09-21T15:10:58Z","comment":"Oh right, I did a mistake yesterday... I was tired. Thanks noticing, and for preparing the overlay-removing PR"},{"author":"proux01","date":"2022-09-22T14:01:32Z","comment":"We are now all set, thanks @SnarkBoojum for the contribution!"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":922,"state":"closed","open_date":"2022-09-11T17:15:54Z","update_date":"2022-09-11T21:57:06Z","discussion":[{"author":"erikmd","date":"2022-09-11T20:38:15Z","comment":"Thanks @proux01 for the force-push fixup :+1: "}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"erikmd","number":921,"state":"closed","open_date":"2022-09-11T16:55:55Z","update_date":"2022-09-11T17:10:59Z","discussion":[{"author":"proux01","date":"2022-09-11T17:10:59Z","comment":"Thanks @erikmd ! Indeed, 1.15.0 doesn't compile anymore with master. I'm in part the one to blame as I fixed a warning at some point without turning it as error, enabling to reintroduce an unnoticed instance a few days later. Lesson learned: when fixing a warning, keep it as error for some time.\r\n\r\nIn practice, this means we'll have to relase a 1.16.0 before Coq 8.17 is out. (The good news is that we should also have a 2.0 by then ;-) )"}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"SnarkBoojum","number":920,"state":"open","open_date":"2022-09-08T14:10:03Z","update_date":"2022-09-13T09:36:46Z","discussion":[{"author":"proux01","date":"2022-09-08T14:27:26Z","comment":"@SnarkBoojum could you be more precise? `by rewrite !hornerE` works for me:\r\n```Coq\r\nFrom mathcomp Require Import all_ssreflect all_algebra.\r\nFrom mathcomp.analysis Require Import reals.\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nImport GRing.Theory.\r\n\r\nLocal Open Scope ring_scope.\r\n\r\nSection BadHornerE.\r\n\r\nVariable RR: realType.\r\nVariable a: RR.\r\n\r\nDefinition Psum : {poly RR} := 4 *: 'X^3 - 3 *: 'X + 1.\r\n\r\nLemma nameless: Psum.[a] == 4 * a^+ 3 - 3 * a + 1.\r\nProof. by rewrite !hornerE. Qed.\r\n\r\nEnd BadHornerE.\r\n```\r\n\r\nNote (although this has no impact here) that the imports of `ssralg`, `ssrnum` and `ssrint` are superfluous as they are already included in `all_algebra`. It is also recommended *not* to import `GRing` as stated in the header of ssralg.v:\r\n```Coq\r\n(* The Lemmas about these structures are contained in both the GRing module   *)\r\n(* and in the submodule GRing.Theory, which can be imported when unqualified  *)\r\n(* access to the theory is needed (GRing.Theory also allows the unqualified   *)\r\n(* use of additive, linear, Linear, etc). The main GRing module should NOT be *)\r\n(* imported.                                                                  *)\r\n```"},{"author":"SnarkBoojum","date":"2022-09-08T15:11:42Z","comment":"I was expecting the result of `rewrite !hornerE` to give me an equality of `4 * a ^ 3 - 3 * a + 1` with itself, but it gives a much more complex expression.\r\n\r\nOf course, prefixing with `by` solves that simple goal ; but if you are inside a complete proof and just need a simplified expression for the polynomial evalutation, you get something awful, and I think that can be a problem."},{"author":"proux01","date":"2022-09-08T15:33:18Z","comment":"Note that if you do `rewrite !hornerE /=`, you get `4 * a * a * a - 3 * a + 1 == 4 * a * a * a - 3 * a + 1`, but indeed it might be worse defining something like\r\n```Coq\r\nDefinition hornerEX := (hornerD, hornerN, hornerX, hornerC, horner_exp,\r\n  hornerZ, hornerM).\r\n```\r\nthat does what you want. A PR would be welcome but I'm not sure about the name (@CohenCyril if you have any better idea for something like \"hornerE but preserves powers\")."},{"author":"SnarkBoojum","date":"2022-09-08T15:35:27Z","comment":"Why shouldn't `hornerE` itself preserve powers?"},{"author":"proux01","date":"2022-09-08T15:56:05Z","comment":"I guess the role of `hornerE` is to simplfy as much as possible, which it does well.\r\nFeel free to try changing it though (opening a draft PR would launch the CI and you would see what it breaks), but I fear it would have much more impact changing `hornerE` than adding a new rule (haven't tried, I might be wrong).\r\n"},{"author":"SnarkBoojum","date":"2022-09-13T09:36:46Z","comment":"Here is what the slightly changed hornerE I propose gives on my example:\r\n```\r\nFrom mathcomp Require Import all_ssreflect all_algebra.\r\nFrom mathcomp.analysis Require Import reals.\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nImport GRing.Theory.\r\n\r\nLocal Open Scope ring_scope.\r\n\r\nSection BadHornerE.\r\n\r\nVariable RR: realType.\r\nVariable a: RR.\r\n\r\nDefinition Psum : {poly RR} := 4 *: 'X^3 - 3 *: 'X + 1.\r\n\r\nLemma nameless: Psum.[a] == 4 * a^+ 3 - 3 * a + 1.\r\nProof.\r\n rewrite !hornerE. (* stop here and have a look at the expression *)\r\n by [].\r\nQed.\r\n\r\nEnd BadHornerE.\r\n\r\nSection MyHornerE.\r\n\r\nLocal Notation simp := Monoid.simpm.\r\n\r\nDefinition MyHornerE :=\r\n  (hornerD, hornerN, hornerX, hornerC, horner_exp,\r\n   hornerCM, hornerZ, hornerM, horner_cons).\r\n\r\nVariable RR: realType.\r\nVariable a: RR.\r\n\r\nDefinition Psum' : {poly RR} := 4 *: 'X^3 - 3 *: 'X + 1.\r\n\r\nLemma nameless': Psum'.[a] == 4 * a^+ 3 - 3 * a + 1.\r\nProof.\r\n rewrite !MyHornerE. (* stop here and have a look at the expression *)\r\n by [].\r\nQed.\r\n\r\nEnd MyHornerE.\r\n```"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":919,"state":"closed","open_date":"2022-09-06T08:31:01Z","update_date":"2022-10-04T15:46:19Z","discussion":[{"author":"amahboubi","date":"2022-09-06T09:05:51Z","comment":"(approval up to ci validation)\r\n"},{"author":"proux01","date":"2022-09-06T15:03:18Z","comment":"CI seems reasonnably green (the two failures on master come from the recent merge of  https://github.com/coq/coq/pull/16004 )"},{"author":"proux01","date":"2022-09-08T14:01:53Z","comment":"CI green, does this deserve a CHANGELOG entry?"},{"author":"CohenCyril","date":"2022-09-12T15:16:37Z","comment":"> CI green, does this deserve a CHANGELOG entry?\r\n\r\nIt would be good, yes"},{"author":"proux01","date":"2022-09-13T08:01:13Z","comment":"done"},{"author":"CohenCyril","date":"2022-10-02T11:40:29Z","comment":"CI failure seems unrelated"},{"author":"proux01","date":"2022-10-04T15:46:19Z","comment":"> CI failure seems unrelated\r\n\r\nIndeed, it's due to https://github.com/math-comp/multinomials/pull/63 not being merged yet.\r\n"}],"tags":[],"pull_requests":[]},{"author":"amahboubi","number":918,"state":"open","open_date":"2022-09-05T15:11:18Z","update_date":"2022-09-12T15:39:02Z","discussion":[{"author":"amahboubi","date":"2022-09-05T15:17:46Z","comment":"Context : @ecranceMERCE pointed me to this change in meaning for `f 2` from versions 1.14 to 1.15 when benchmarking his [Trakt](https://ecrancemerce.github.io/trakt/#/) preprocesssing tool. "},{"author":"proux01","date":"2022-09-05T15:31:06Z","comment":"Indeed, with the introduction of number notations in `ring_scope`, this is expected. The old behavior can be kept by typing `f 2%Z` or simply `f 2%N` (backward compatible). I don't have any better solution since the notation mechanism is unaware of the precise ring when parsing, it cannot detect the particular case of int."},{"author":"proux01","date":"2022-09-05T15:35:36Z","comment":"Well, an alternative solution in this case is\r\n```Coq\r\nArguments f _%int_scope.\r\n```\r\nMaybe we could try\r\n```Coq\r\nBind Scope int_scope with int.\r\n```\r\nin ssrint.v but I fear this could easily wreak havoc since we currently have\r\n```Coq\r\nBind Scope ring_scope with int.\r\n```\r\n"},{"author":"amahboubi","date":"2022-09-06T07:03:33Z","comment":"One thing I find specially disturbing, and difficult to explain to newcomers in particular, is the discrepancy between `e0` and `e1`: `e1` is the copy-paste of the displayed statement for `e0`."},{"author":"amahboubi","date":"2022-09-06T07:35:23Z","comment":"> Indeed, with the introduction of number notations in `ring_scope`, this is expected. The old behavior can be kept by typing `f 2%Z` or simply `f 2%N` (backward compatible). I don't have any better solution since the notation mechanism is unaware of the precise ring when parsing, it cannot detect the particular case of int.\r\n\r\nWould it help to have number notations in `int_scope` as well?"},{"author":"proux01","date":"2022-09-06T08:41:30Z","comment":"> One thing I find specially disturbing, and difficult to explain to newcomers in particular, is the discrepancy between `e0` and `e1`: `e1` is the copy-paste of the displayed statement for `e0`.\r\n\r\nI agree this behavior is disturbing. It comes from the notation being only printing (excerpt from ssrint.v):\r\n```Coq\r\nNotation \"n = m :> 'int'\"  := (Posz n = Posz m) (only printing)  : ring_scope.\r\n```\r\nParsing is then done via the generic notation\r\n```\r\nNotation \"x = y :> A\" := (@eq A x y) : type_scope.\r\n```\r\nHere is a PR that fixes that: https://github.com/math-comp/math-comp/pull/919\r\n\r\n> Would it help to have number notations in int_scope as well?\r\n\r\nWell, there is (that's how `2%Z` is parsed as `Posz 2`), the difficulty is rather in \"opening\" the scope. We could first think that\r\n```Coq\r\nOpen Scope ring_scope.\r\nOpen Scope int_scope.\r\n```\r\nwould do the job. However, we have (in ssrint.v):\r\n```Coq\r\nBind Scope ring_scope with int.\r\n```\r\nmeaning any function with an int argument will have ring_scope attached to it\r\n```Coq\r\nVariable f : int -> Prop.\r\nAbout f.\r\n(* Arguments f _%ring_scope *)\r\n```\r\nbinding int to int_scope wouldn't work as we would loose all ring_scope notations (unless we completely duplicate all ring_scope notations into int_scope which is not practical). Ideally we would like something like\r\n```Coq\r\nArguments f%int_scope%ring_scope\r\n```\r\nbut Coq only allows opening a single scope in arguments, maybe we should extend that? (I don't see any fundamental reason for that limitation)\r\n"},{"author":"amahboubi","date":"2022-09-06T09:06:45Z","comment":"Thanks for the elaborated answer.\r\n\r\n> but Coq only allows opening a single scope in arguments, maybe we should extend that? (I don't see any fundamental reason for that limitation)\r\n\r\n+1\r\n\r\n"},{"author":"proux01","date":"2022-09-09T13:29:58Z","comment":"Here it is: https://github.com/coq/coq/pull/16472\r\n\r\nThis should enable\r\n```Coq\r\nBind Scope int_scope with int.\r\nSet Warnings \"-unsupported-attributes\".\r\n#[add_bottom] Bind Scope ring_scope with int.\r\nSet Warnings \"+unsupported-attributes\".\r\n```\r\nwhich would keep the current behavior with Coq < 8.17 and offer the expected one with Coq >= 8.17 (we could remove the warning change once requiring Coq >= 8.17)."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":917,"state":"closed","open_date":"2022-09-05T11:51:59Z","update_date":"2022-10-01T06:23:19Z","discussion":[{"author":"CohenCyril","date":"2022-09-12T15:08:20Z","comment":"@proux01 I don't understand the fix? Why does this fix the bug?"},{"author":"proux01","date":"2022-09-12T15:37:51Z","comment":"Because `f` and `g` don't have the same type, c.f., https://github.com/math-comp/math-comp/blob/017829e1c4a6d07a3acfd73b8fcec8a6952a4b96/mathcomp/algebra/ssralg.v#L2416 and https://github.com/math-comp/math-comp/blob/017829e1c4a6d07a3acfd73b8fcec8a6952a4b96/mathcomp/algebra/ssralg.v#L2429"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":916,"state":"closed","open_date":"2022-09-05T11:50:53Z","update_date":"2022-09-30T20:52:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":915,"state":"closed","open_date":"2022-09-05T10:42:30Z","update_date":"2022-09-06T08:47:47Z","discussion":[{"author":"proux01","date":"2022-09-05T12:41:31Z","comment":"@affeldt-aist Analysis seems broken on Coq 8.16?"},{"author":"affeldt-aist","date":"2022-09-05T12:43:16Z","comment":"Let me check."},{"author":"affeldt-aist","date":"2022-09-05T13:29:55Z","comment":"The problem does not occur with HB 1.3.0 but it does with HB 1.2.1 and 1.2.0."},{"author":"proux01","date":"2022-09-05T14:13:30Z","comment":"@affeldt-aist thanks, looks like we had to merge https://github.com/coq-community/coq-nix-toolbox/pull/111 to get HB 1.3.0"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":914,"state":"closed","open_date":"2022-09-04T23:58:24Z","update_date":"2022-09-05T14:31:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"MSoegtropIMC","number":913,"state":"closed","open_date":"2022-08-10T09:43:28Z","update_date":"2022-08-10T13:00:03Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"SnarkBoojum","number":912,"state":"closed","open_date":"2022-08-08T06:06:56Z","update_date":"2022-08-13T14:24:20Z","discussion":[{"author":"SnarkBoojum","date":"2022-08-10T09:40:08Z","comment":"I like your proofs better, indeed. I'll try to name my branches in the future."}],"tags":[],"pull_requests":[]},{"author":"gares","number":911,"state":"open","open_date":"2022-08-02T20:39:55Z","update_date":"2022-08-02T20:39:55Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":910,"state":"closed","open_date":"2022-08-01T12:57:26Z","update_date":"2022-10-27T07:54:24Z","discussion":[{"author":"affeldt-aist","date":"2022-08-02T01:59:05Z","comment":"I just backported a few shorter proofs from mathcomp-analysis."},{"author":"proux01","date":"2022-10-18T08:36:29Z","comment":"@affeldt-aist this seems reasonably ready for nearly three months now, would you assign and merge?"},{"author":"affeldt-aist","date":"2022-10-20T02:33:21Z","comment":"> @affeldt-aist this seems reasonably ready for nearly three months now, would you assign and merge?\r\n\r\nI would have said okay a few days ago but the generalization requested in\r\nhttps://github.com/math-comp/analysis/pull/779\r\nseems (at first sight) to trigger generalizations here also. I will try to investigate\r\nthis by the end of the week."},{"author":"proux01","date":"2022-10-21T13:41:05Z","comment":"@affeldt-aist I had a look at https://github.com/math-comp/analysis/pull/779 , this made me add `big_undup_AC` here.\r\nThere are certainly other things from the mathcomp_extra.v file from analysis to backport to matchomp, but I think this backporting belongs to a further PR."},{"author":"proux01","date":"2022-10-27T07:37:11Z","comment":"@affeldt-aist is this mergeable?"}],"tags":[],"pull_requests":[]},{"author":"thery","number":909,"state":"closed","open_date":"2022-07-25T14:02:05Z","update_date":"2022-10-14T13:14:45Z","discussion":[{"author":"CohenCyril","date":"2022-07-26T11:01:08Z","comment":"Great! But even if the CI does not seem to show a single failure, this change is not backward compatible, so I'm a little bit hesitant to approve. It could be make backward compatible at the cost of naming the new (generalized) lemma slightly differently (e.g. `take_take_min`, or just `take_min` swapping the RHS and LHS of the equality).\r\n@thery what do you think?"},{"author":"pi8027","date":"2022-07-26T11:49:28Z","comment":"Related discussion: https://github.com/math-comp/math-comp/pull/381#discussion_r320603902"},{"author":"thery","date":"2022-07-26T12:07:40Z","comment":"@pi8027 oops I've missed that discussion. I know it is a breaking change but don't you think it is more reasonable like this?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":908,"state":"closed","open_date":"2022-07-09T09:05:47Z","update_date":"2022-07-09T17:04:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":907,"state":"closed","open_date":"2022-07-06T14:06:34Z","update_date":"2022-07-07T13:32:04Z","discussion":[{"author":"proux01","date":"2022-07-07T09:57:21Z","comment":"Let's make this an error in the makefiles, to avoid introducing even more (the name of the branch is already long enough ;) ).\r\n"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":906,"state":"closed","open_date":"2022-07-06T11:39:29Z","update_date":"2022-07-06T21:34:53Z","discussion":[{"author":"erikmd","date":"2022-07-06T17:08:30Z","comment":"FYI the [GitLab CI pipeline](https://gitlab.com/math-comp/math-comp/-/pipelines/581464715) is now green :heavy_check_mark:\r\n\r\nSo given this PR only deals with the Docker-based GitLab CI, I think it can now be merged."},{"author":"proux01","date":"2022-07-06T19:20:46Z","comment":"Thanks!"}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"affeldt-aist","number":905,"state":"closed","open_date":"2022-07-04T13:33:45Z","update_date":"2022-07-04T15:50:26Z","discussion":[{"author":"erikmd","date":"2022-07-04T14:38:43Z","comment":"> Amazingly, `eq_poly` is not used anywhere else in the mathcomp library.\r\n\r\nYes, IIRC, it had only been added for some external use, along with the `under` tactic…\r\n\r\n**Edit:** indeed, cf. this related PR: https://github.com/math-comp/math-comp/pull/292"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":904,"state":"closed","open_date":"2022-07-04T12:52:07Z","update_date":"2022-07-06T13:34:47Z","discussion":[{"author":"gares","date":"2022-07-04T13:05:29Z","comment":"It is a bit sad this is not in 1.15.0, but well... "},{"author":"ppedrot","date":"2022-07-04T13:16:47Z","comment":"The change clearly introduced a new warning, maybe we need a bit more infrastructure to check this."},{"author":"gares","date":"2022-07-04T13:24:53Z","comment":"I think the infrastructure is in place since https://github.com/math-comp/math-comp/pull/891 , am I wrong?"},{"author":"gares","date":"2022-07-04T13:25:49Z","comment":"Ah, that is only in coq_project, not in Make"},{"author":"gares","date":"2022-07-04T13:26:30Z","comment":"@proux01 was it intended? I thought you wanted to keep the project clean, but _CoqProject is only used by UIs, not by `make` which uses `Make` instead, IIRC"},{"author":"proux01","date":"2022-07-04T16:34:58Z","comment":"No, that's obviously an error from me."},{"author":"proux01","date":"2022-07-04T16:37:58Z","comment":"Note that\r\n```\r\n-arg -w -arg +deprecated-hint-rewrite-without-locality\r\n```\r\nis wrong (we'll have to wait for MathComp to require Coq >= 8.14 for that).\r\nBut we could indeed put\r\n```\r\n-arg -w -arg +deprecated-hint-without-locality\r\n```\r\nin the makefiles."},{"author":"gares","date":"2022-07-04T20:36:54Z","comment":"yes, this is what I meant."},{"author":"ppedrot","date":"2022-07-06T13:34:47Z","comment":"Damn, this was not enough. I somehow missed another warning introduced in the meantime. Guess I'll have to open yet another fix PR."}],"tags":[{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"mgbedmar","number":903,"state":"closed","open_date":"2022-06-30T13:29:01Z","update_date":"2022-07-08T06:56:35Z","discussion":[{"author":"mgbedmar","date":"2022-07-04T10:37:45Z","comment":"Changelog updated."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":902,"state":"closed","open_date":"2022-06-24T15:47:23Z","update_date":"2022-06-25T09:42:53Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"thery","number":901,"state":"closed","open_date":"2022-06-22T14:32:28Z","update_date":"2023-01-13T13:58:19Z","discussion":[{"author":"thery","date":"2022-06-23T10:59:14Z","comment":"> Maybe add a similar lemma for half (something like `m <= n./2 = m.*2 <= n`).\r\n\r\ndone, thanks"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":900,"state":"closed","open_date":"2022-06-19T14:04:58Z","update_date":"2022-06-19T22:55:00Z","discussion":[{"author":"proux01","date":"2022-06-19T14:31:53Z","comment":"Thanks!"}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"erikmd","number":899,"state":"closed","open_date":"2022-06-16T11:05:12Z","update_date":"2022-06-19T22:55:25Z","discussion":[{"author":"erikmd","date":"2022-06-16T15:50:12Z","comment":"Except `Nix CI for bundle coq-8.14 / category-theory (pull_request_target)`, all checks are green, including Docker-based GitLab CI jobs so I guess this can be merged now :heavy_check_mark: "}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"affeldt-aist","number":898,"state":"closed","open_date":"2022-06-16T03:25:50Z","update_date":"2022-07-01T06:33:51Z","discussion":[{"author":"proux01","date":"2022-06-16T09:36:51Z","comment":"Should we also remove older deprecations? Grep gives:\r\n* deprecated in 1.11: 22\r\n* deprecated in 1.12: 151\r\n* deprecated in 1.13: 22\r\n* deprecated in 1.14: 1\r\n\r\nIt feels strange to me to only remove one thing out of 22 in the 1.13 list and keep the remaining?\r\n"},{"author":"affeldt-aist","date":"2022-06-17T06:47:57Z","comment":"> It feels strange to me to only remove one thing out of 22 in the 1.13 list and keep the remaining?\r\n\r\nYou're right. Let's do that as part of this PR. I'll do that ASAP.\r\n"},{"author":"affeldt-aist","date":"2022-06-18T17:20:13Z","comment":"> > It feels strange to me to only remove one thing out of 22 in the 1.13 list and keep the remaining?\r\n> \r\n> You're right. Let's do that as part of this PR. I'll do that ASAP.\r\n\r\nAre we really supposed to remove the deprecated items marked as 1.13.0? (I understand that `big_uncond` is one of them.)"},{"author":"proux01","date":"2022-06-28T06:48:55Z","comment":"@affeldt-aist I agree to remove only 1.11 and 1.12 deprecations\r\n\r\nThis is ready, CI \"green\" (docker CI failures are due to the lack of overlay for finmap, but this works in Nix CI),\r\nthe overlay https://github.com/math-comp/finmap/pull/97 should be merged first before merging the current PR (minus the overlay commit)"},{"author":"proux01","date":"2022-06-29T05:12:31Z","comment":"Coq dev in Nix CI is broken since https://github.com/coq/coq/pull/15560 but Docker CI is ok,\r\nso I think this can be merged."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":897,"state":"closed","open_date":"2022-06-14T06:41:43Z","update_date":"2022-06-19T22:55:43Z","discussion":[{"author":"proux01","date":"2022-06-14T08:47:50Z","comment":"CI green !"}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"proux01","number":896,"state":"closed","open_date":"2022-06-13T13:00:59Z","update_date":"2022-06-14T16:31:25Z","discussion":[{"author":"proux01","date":"2022-06-14T16:31:15Z","comment":"I fixed the version of paramcoq (not yet in Nix) and disactivated coq-elpi (not yet released) and analysis."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":895,"state":"closed","open_date":"2022-06-13T09:22:25Z","update_date":"2022-06-13T10:29:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"SnarkBoojum","number":894,"state":"closed","open_date":"2022-06-12T13:16:34Z","update_date":"2022-07-27T07:30:06Z","discussion":[{"author":"CohenCyril","date":"2022-07-26T18:44:32Z","comment":"@SnarkBoojum I refactored the proofs slightly and did some renamings, thanks for your contribution."},{"author":"proux01","date":"2022-07-27T07:30:06Z","comment":"Thanks @CohenCyril for having taken care of this.\r\nSorry @SnarkBoojum I should have reviewed that one much earlier but was pretty busy lately."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":893,"state":"closed","open_date":"2022-06-10T11:27:08Z","update_date":"2022-06-30T21:29:12Z","discussion":[{"author":"gares","date":"2022-06-29T13:51:15Z","comment":"@affeldt-aist I merged the other PR and rebased this one. I think you should merge the CI is green (coq-master is broken, the others should work)"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":872,"state":"closed","open_date":"2022-04-15T14:42:18Z","update_date":"2022-04-19T14:40:52Z","discussion":[{"author":"proux01","date":"2022-04-19T14:15:11Z","comment":"Thanks for the changelog, CI is as green as it can be."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":871,"state":"closed","open_date":"2022-04-15T14:10:29Z","update_date":"2022-04-20T07:48:26Z","discussion":[{"author":"proux01","date":"2022-04-19T14:10:15Z","comment":"Thanks for the changelog entry, I indeed forgot it."},{"author":"proux01","date":"2022-04-19T14:13:21Z","comment":"Unfortunately, this breaks analysis in the CI because it's mathcomp_extra file tries to redeclare the coercion which is unfortunately an error. I have to think about a transition plan :cry:"},{"author":"pi8027","date":"2022-04-19T14:18:59Z","comment":"> Unfortunately, this breaks analysis in the CI because it's mathcomp_extra file tries to redeclare the coercion which is unfortunately an error. I have to think about a transition plan cry\r\n\r\n@proux01 What about:\r\n```coq\r\nFrom mathcomp Require choice.\r\nCoercion Choice.mixin : ... .\r\nImport choice.\r\n````\r\nin `mathcomp_extra`?"},{"author":"proux01","date":"2022-04-19T15:28:41Z","comment":"Thanks @pi8027 this seems to work, so we could:\r\n* merge https://github.com/math-comp/analysis/pull/654\r\n* relaunch CI here\r\n* provided it's green, merge here"},{"author":"affeldt-aist","date":"2022-04-20T05:13:55Z","comment":"The CI seems to indicate that MathComp-Analysis compiles with this commit and KS's trick. Let's merge? @proux01 "},{"author":"proux01","date":"2022-04-20T06:42:20Z","comment":"Great"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":869,"state":"closed","open_date":"2022-04-05T09:23:31Z","update_date":"2022-05-04T08:19:55Z","discussion":[{"author":"ybertot","date":"2022-04-05T11:24:32Z","comment":"LGTM, but\r\n\r\n- It feels that users will rarely use these, because it takes too much remembering that these pattern exist.\r\n- This suggests that the \"RHS\" notation should be usable to denote the right-hand side of equalities and inequalities alike.  How would that be possible?  It seems that one would need to be able to define \"multi-patterns\" (disjunctions of patterns), in the same way that we already define multi-rules.  On the surface, it seems an easy thing to define, but digging more deeply, it feels that providing this together with extensibility (as in extending multi-rules) is quite hard actually."},{"author":"ybertot","date":"2022-04-05T11:29:55Z","comment":"Another issue I have with this PR is that it corrects some spacing problems which are independent from the subject in the title.  It is too bad that these corrections will be forgotten if this PR is not incorporated."},{"author":"CohenCyril","date":"2022-04-05T12:46:02Z","comment":"> * This suggests that the \"RHS\" notation should be usable to denote the right-hand side of equalities and inequalities alike.  How would that be possible?\r\n\r\nI tried at some point and failed: this was too ambiguous, e.g. for which `r` would `RHS` match `y` in `r x y`? \r\nEven if we narrow `r` down to a few symbols (e.g. through some for of table, e.g. canonical projections),\r\nmany goals containing `_ <= _` also contain `_ = _`, if we are not more precise than just `RHS` how do we specify?\r\nThe ad-hoc solution here is to tailor customized patterns for the most frequently used...\r\n\r\nLike many things in ssr most people will not use it until they really feel the need, and that's when they must be able find them through documentation. Maybe we should rewrite a mathcomp local addentum to https://coq.inria.fr/refman/proof-engine/ssreflect-proof-language.html for that purpose?"},{"author":"affeldt-aist","date":"2022-04-14T09:50:47Z","comment":"The topic was discussed during the last mathcomp-dev meeting, see https://github.com/math-comp/math-comp/wiki/Minutes-April-06-2022.\r\nAfter the meeting @gares figured out a way based on @CohenCyril 's idea:\r\n```\r\nNotation LEFT symb := (X in symb X _)%pattern.\r\n```\r\nwith the following comment: \"one still needs to put in %pattern scope some notations for the usual infix symbols.\"\r\n\r\nShould it come as a replacement or an addition?"},{"author":"CohenCyril","date":"2022-04-14T12:30:42Z","comment":"> Should it come as a replacement or an addition?\r\n\r\nI would vote for \"as an addition\""},{"author":"gares","date":"2022-04-14T12:45:31Z","comment":"I guess one needs to make the scope explicit around symb as well. And test it a little, since I did not do it very carefully."},{"author":"thery","date":"2022-04-14T12:46:37Z","comment":"a pity we can't write  `[LEFT <=]` and `[LEFT =]`"},{"author":"gares","date":"2022-04-14T13:07:23Z","comment":"I think you can if you add these notations in the pattern scope (not as infix, just as atoms)."},{"author":"thery","date":"2022-04-14T13:11:45Z","comment":"I am pretty bad at notation I tried to add\r\n`Notation \"LEFT <=\" := (X in X <= _)%pattern (at level 10).`\r\nand it broke everything :see_no_evil: \r\n"},{"author":"gares","date":"2022-04-14T13:16:14Z","comment":"I'm not on my pc\r\n```\r\nNotation \"<=\" := leq : symb_scope.\r\nNotation \"LEFT f\" := (X in f%symb X _)%pattern.\r\n```"},{"author":"affeldt-aist","date":"2022-04-14T13:22:29Z","comment":"> I would vote for \"as an addition\"\r\n\r\nThen we can maybe merge this one for now and issue for the more general pattern (it might require some testing).\r\n"},{"author":"thery","date":"2022-04-14T13:25:47Z","comment":"I have tried\r\n```coq\r\nNotation \"<=\" := leq : symb_scope.\r\nDelimit Scope symb_scope with symb.\r\nNotation \"'LEFT' f\" := (X in f%symb X _)%pattern (at level 10).\r\nGoal 1 <= 2 .\r\n```\r\nand I get a\r\n`Unknown interpretation for notation \"<=\".`\r\nfor the `<=` in the goal.\r\n"},{"author":"CohenCyril","date":"2022-04-14T13:36:56Z","comment":"I think we need to create a new nonterminal (a.k.a. custom entry) for that otherwise we will screw up the main parser."},{"author":"thery","date":"2022-04-14T13:53:41Z","comment":"ok this works\r\n```coq\r\nDeclare Custom Entry symb.\r\nNotation \"<=\" := leq (in custom symb at level 0).\r\nNotation \"'LEFT' f\" := (X in f X _)%pattern (f in custom symb, at level 10).\r\nGoal 1 <= 2 .\r\nrewrite -[LEFT <=](addn1).\r\n```"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"jonsterling","number":868,"state":"closed","open_date":"2022-03-31T18:33:17Z","update_date":"2022-03-31T23:56:52Z","discussion":[{"author":"affeldt-aist","date":"2022-03-31T23:56:52Z","comment":"Thank you!"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":867,"state":"closed","open_date":"2022-03-27T15:12:15Z","update_date":"2022-03-31T08:32:12Z","discussion":[{"author":"proux01","date":"2022-03-31T08:31:58Z","comment":"Merging, so as not to block https://github.com/coq/coq/pull/15693"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":866,"state":"closed","open_date":"2022-03-18T14:40:29Z","update_date":"2022-03-21T22:59:00Z","discussion":[],"tags":[{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"thery","number":865,"state":"closed","open_date":"2022-03-18T10:38:31Z","update_date":"2022-03-18T20:00:25Z","discussion":[{"author":"thery","date":"2022-03-18T12:03:14Z","comment":"@proux01 why I get all these errors in the Nix CI?"},{"author":"proux01","date":"2022-03-18T12:08:47Z","comment":"@thery Coq master is broken on Nix since https://github.com/coq/coq/pull/15220 (that's a known issue, but fixing it requires some Nix expert, so it will likely take some more time)"},{"author":"proux01","date":"2022-03-18T12:46:30Z","comment":"CI green, let's squash and merge"}],"tags":[],"pull_requests":[]},{"author":"thery","number":864,"state":"closed","open_date":"2022-03-18T08:16:57Z","update_date":"2023-01-13T13:54:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":863,"state":"closed","open_date":"2022-03-15T22:09:39Z","update_date":"2023-01-22T17:15:43Z","discussion":[{"author":"CohenCyril","date":"2022-03-18T09:14:42Z","comment":"Am I right that this is a backward compatible change? As long as client code does not start using `[in A]` and keep using `mem A`, they will not be impacted in anyway. If that's the case I do not see why not push the changes to Coq's ssrbool straight away."},{"author":"ggonthier","date":"2022-03-24T17:06:25Z","comment":"As it stands, part of the change  is not backward compatible : adding the new `[in A]` notation obviously is, but using it in the `[predU A & B]`, `[predI A & B]`, etc. notation is not. It breaks various fragile scripts that rely on `rewrite inE` of such notation exposing a `mem A x` (really `pred_of_simpl (simpl_of_mem (mem A)) x`) subterm, as explained the rationale.\r\n   The PR fixes this in `mathcomp` proper, as do math-comp/odd-order#40 and coq-community/fourcolor#42 for `odd-order` and `foucolor`, respectively (in a backward compatible way), but CI also indicates a similar failure in `graph-theory`, for which I've yet to propose a fix (I'm not set up to compile it right now).\r\n   It thus seems prudent to fix the clients before pushing the full PR to `coq/ssrbool`, though of course the definition of `[in A]` could be pushed immediately."},{"author":"chdoc","date":"2022-03-24T19:45:04Z","comment":"> but CI also indicates a similar failure in `graph-theory`, for which I've yet to propose a fix (I'm not set up to compile it right now).\r\n\r\nIf needed, I can try to investigate and fix this next week, but I'm out of office until Tuesday. "},{"author":"pi8027","date":"2022-04-01T08:12:14Z","comment":"This PR looks good to me except for the above minor suggestion and CI, but I have an impression that I don't understand Boolean predicates of MathComp deep enough. It is probably better if someone else can review it.\r\n\r\nBTW, do we still want to keep `[mem A]`? When should we consider using it?"},{"author":"chdoc","date":"2022-04-01T08:29:34Z","comment":"Is there some `nix` command that would allow me to quickly get to the context the CI will be in when trying to build `graph-theory` on top of this PR? "},{"author":"CohenCyril","date":"2022-04-01T09:27:47Z","comment":"> Is there some nix command that would allow me to quickly get to the context the CI will be in when trying to build graph-theory on top of this PR?\r\n\r\n\r\nRun this in the current branch\r\n```\r\nnix-shell --no-out-link --argstr bundle \"coq-8.14\" --argstr job \"graph-theory\"\r\n```\r\nThen cd to your graph-theory workdir\r\n"},{"author":"chdoc","date":"2022-04-01T14:12:17Z","comment":"It appears that in the part of `graph-theory` that is checked by the MathComp CI there is only one line that breaks.\r\n\r\nI noticed that the Nix package used in the CI does not build the part that depends on `fourcolor`. In the opam package, `fourcolor` is an optional dependency (i.e., Wagner's theorem is only checked and installed if `fourcolor` is available). \r\n\r\nWhat do I have to add to the `nix-shell` invocation in order to add the (cached) `fourcolor` run on PR `#42` (the overlay for this PR)?\r\n"},{"author":"proux01","date":"2022-06-15T08:48:05Z","comment":"@ggonthier could you please rebase so that we could merge?"},{"author":"affeldt-aist","date":"2023-01-18T09:28:57Z","comment":"As discussed during the last meeting, we are planning to merge this PR.\r\nBefore we merge, @chdoc could you test that `graph-theory` still compiles with this PR?\r\n(Since `graph-theory` requires the Four color theorem, the default CI test is only partial.)"},{"author":"proux01","date":"2023-01-18T09:45:09Z","comment":"@affeldt-aist in fact, since https://github.com/math-comp/math-comp/pull/956 we have a Nix CI overlay that tests it (long story short: they moved to dune in graph-theory master, which made `make` build unconditionally with fourcolor and broke the dev Nix derivation).\r\nSo if CI is green, it's fine.\r\n"},{"author":"affeldt-aist","date":"2023-01-18T09:57:24Z","comment":"> @affeldt-aist in fact, since #956 we have a Nix CI overlay that tests it (long story short: they moved to dune in graph-theory master, which made `make` build unconditionally with fourcolor and broke the dev Nix derivation). So if CI is green, it's fine.\r\n\r\nThanks for information. I missed it.\r\n"},{"author":"CohenCyril","date":"2023-01-18T16:08:40Z","comment":"> @affeldt-aist in fact, since #956 we have a Nix CI overlay that tests it (long story short: they moved to dune in graph-theory master, which made `make` build unconditionally with fourcolor and broke the dev Nix derivation).\r\n> So if CI is green, it's fine.\r\n\r\n~~AFAIU they released a 0.9.1 version with a separation between two packages `graph-theory` and `graph-theory-planar`, only the latter depends on fourcolor, I added it as a PR to nixpkgs and I started a job at https://github.com/coq-community/coq-nix-toolbox/pull/130 to test it... However there is an independent failure (about smtcoq) that might delay the integration here. We might either trust 0.9 results or make an overlay using my PR https://github.com/NixOS/nixpkgs/pull/211137~~\r\n\r\nEDIT: I got it wrong about 0.9.1. So I restored the previous version but testing 0.9.1 with Coq >= 8.14"},{"author":"proux01","date":"2023-01-18T19:02:36Z","comment":"> EDIT: I got it wrong about 0.9.1. So I restored the previous version but testing 0.9.1 with Coq >= 8.14\r\n\r\nMy understanding of `.nix/config.nix` is that the tested version is master."},{"author":"CohenCyril","date":"2023-01-20T14:08:32Z","comment":"Multinomials is failing now and I do not understand why, it didn't change since 2 days ago @proux01 @strub any hints?"},{"author":"proux01","date":"2023-01-20T16:28:13Z","comment":"@CohenCyril no idea, I'll have a look tomorrow."},{"author":"proux01","date":"2023-01-21T15:47:36Z","comment":"@CohenCyril : so, the PR is changing the names of a few implicit arguments in `seq.v`.\r\nHere is an overlay for multinomials: https://github.com/math-comp/multinomials/pull/68 , I also updated the CHANGELOG to indicate the renamings.\r\nCI is now green."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":862,"state":"closed","open_date":"2022-03-13T10:04:48Z","update_date":"2022-03-18T09:58:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":861,"state":"closed","open_date":"2022-03-11T13:09:59Z","update_date":"2022-03-13T10:01:43Z","discussion":[{"author":"proux01","date":"2022-03-11T15:46:05Z","comment":"CI green, this is backward compatible."},{"author":"proux01","date":"2022-03-13T09:59:33Z","comment":"Sorry, this was probably needed due to a bug in a previous version of the upstream PR, but this seems to be no longer needed, closing."}],"tags":[],"pull_requests":[]},{"author":"jouvelot","number":860,"state":"closed","open_date":"2022-03-07T17:55:24Z","update_date":"2022-03-19T22:25:14Z","discussion":[{"author":"proux01","date":"2022-03-17T16:55:05Z","comment":"So, looks we are all set, I'll squash and merge by the end of the week if there is no further comment."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":859,"state":"closed","open_date":"2022-03-07T05:22:08Z","update_date":"2022-06-30T08:14:06Z","discussion":[{"author":"CohenCyril","date":"2022-03-07T15:47:00Z","comment":"Two remarks:\r\n1. do we want to keep `!!` as the notation for this. It was the notation in mca until now, but I'm not fond of it. Are there better syntax suggestions for this?\r\n2. It has to be backported to coq/coq"},{"author":"affeldt-aist","date":"2022-04-14T09:45:46Z","comment":">     1. do we want to keep `!!` as the notation for this. It was the notation in mca until now, but I'm not fond of it.\r\n>         Are there better syntax suggestions for this?\r\n\r\nNo idea. I got accustomed to it.\r\n\r\n>     2. It has to be backported to coq/coq\r\n\r\nSo we should issue after merge to remind the release managers not to forget to backport the new version of `ssreflect.v` I guess.\r\n\r\n"},{"author":"CohenCyril","date":"2022-04-14T13:39:45Z","comment":"We should call for alternative proposals for this syntax and vote for the best. Also we should see if there are alternative plans that are less hackish. CC @gares"},{"author":"affeldt-aist","date":"2022-06-15T08:50:03Z","comment":"Since we didn't have a better proposition for the syntax, should we merge it as it is?"},{"author":"gares","date":"2022-06-16T20:24:47Z","comment":"I'd say so"},{"author":"gares","date":"2022-06-29T08:43:45Z","comment":"`[infer t]` or `[fill t]` or `[elaborate t]`"},{"author":"gares","date":"2022-06-29T13:49:02Z","comment":"@CohenCyril please review the suggestion and merge"}],"tags":[],"pull_requests":[]},{"author":"jouvelot","number":858,"state":"closed","open_date":"2022-03-02T14:14:48Z","update_date":"2022-03-02T15:51:19Z","discussion":[{"author":"jouvelot","date":"2022-03-02T15:31:19Z","comment":"This should be good, now. Thanks for the tip on company-coq :)"},{"author":"proux01","date":"2022-03-02T15:51:14Z","comment":"Perfect, thanks, I'm merging."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":857,"state":"closed","open_date":"2022-03-01T19:18:18Z","update_date":"2022-03-02T07:50:24Z","discussion":[{"author":"proux01","date":"2022-03-02T07:50:09Z","comment":"CI as green as it can be, this is trivial, I'm merging."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":856,"state":"closed","open_date":"2022-03-01T15:46:51Z","update_date":"2022-03-03T21:51:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":855,"state":"closed","open_date":"2022-02-28T10:25:09Z","update_date":"2022-02-28T11:18:28Z","discussion":[{"author":"proux01","date":"2022-02-28T11:18:23Z","comment":"Thanks"}],"tags":[],"pull_requests":[]},{"author":"jouvelot","number":854,"state":"closed","open_date":"2022-02-26T13:11:35Z","update_date":"2022-02-28T08:52:30Z","discussion":[{"author":"jouvelot","date":"2022-02-27T09:15:14Z","comment":"For quantifier completeness, maybe we could add the related lemma:\r\n```\r\nLemma not_exists_eqP f1 f2 : reflect (~ (exists x, f1 x = f2 x)) (~~ [exists x, f1 x == f2 x]).\r\n```\r\nalthough I'm not sure there is a use case for it."},{"author":"proux01","date":"2022-02-27T10:21:26Z","comment":"In MathComp, we try when adding a lemma to also add lemmas of the same \"family\", so that would make sense, even if we don't see a use case (yet)."},{"author":"ggonthier","date":"2022-02-27T21:24:32Z","comment":"I'm a little curious about the use case for such lemmas. In principle, they should not be needed, as contrapositives for `reflect` are intended to be covered by the `introN` and `elimN` view hints, i.e., `move/eqfunP` should work the same as `move/not_eqfunP`, unless there's a double negation, as in `~ ~ (f1 =1 f2) -> ...` (was that the issue?). Direct application,\r\nas in `not_eqfunP (neq_fg : ~~ [forall x, f x == g x])` will also work, but the `elimN` hint must be given explicitly (as in `elimN eqfunP neq_fg`), since the default (coercion) is ` elimT`."},{"author":"jouvelot","date":"2022-02-28T08:40:56Z","comment":"Oh, great! I didn't know that reflection would also work \"past\" the negation operator. In this case, my PR can be discarded, unless we want to keep it for the double negation case, as mentioned by Georges. "},{"author":"proux01","date":"2022-02-28T08:52:29Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"gares","number":853,"state":"closed","open_date":"2022-02-23T10:09:47Z","update_date":"2022-06-07T16:49:15Z","discussion":[{"author":"proux01","date":"2022-06-07T10:02:24Z","comment":"@gares should we close this now that reverse coercions are in Coq master?"},{"author":"gares","date":"2022-06-07T16:49:14Z","comment":"yes"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":852,"state":"closed","open_date":"2022-02-19T10:29:05Z","update_date":"2022-02-20T18:18:36Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":849,"state":"closed","open_date":"2022-02-05T10:19:42Z","update_date":"2022-03-13T10:03:58Z","discussion":[{"author":"proux01","date":"2022-03-13T10:03:55Z","comment":"Outdated and no longer needed, closing."}],"tags":[],"pull_requests":[]},{"author":"WojciechKarpiel","number":848,"state":"closed","open_date":"2022-02-02T18:41:03Z","update_date":"2022-02-05T10:03:57Z","discussion":[{"author":"thery","date":"2022-02-02T18:48:20Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"thery","number":847,"state":"closed","open_date":"2022-01-24T13:10:10Z","update_date":"2023-01-13T13:57:50Z","discussion":[{"author":"proux01","date":"2022-01-24T14:01:35Z","comment":"I'm a bit worried by the fact that all uses seem to become a bit more complicated (maybe using `minElt` instead of `minn_idPl` could help, but still)"},{"author":"thery","date":"2022-01-24T15:34:01Z","comment":"@proux01  Yep, it is not ideal. I like the new statement of `size_take` better but not having `minnElt` makes the scripts more cumbersome. In scripts, the place where it get  better  is the last application in  `seq.v` and in `tuple.v`.\r\n"},{"author":"CohenCyril","date":"2022-01-24T15:47:15Z","comment":"I suggest having an alternative statement `size_take_min` for this more general theorem."},{"author":"thery","date":"2022-01-24T17:33:42Z","comment":"@CohenCyril fine with me"},{"author":"proux01","date":"2022-01-25T09:23:00Z","comment":"Looks good, I'll merge by the end of the week if there is no further comment."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":846,"state":"closed","open_date":"2022-01-19T09:46:07Z","update_date":"2022-01-19T11:29:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gares","number":845,"state":"closed","open_date":"2022-01-19T09:14:49Z","update_date":"2022-01-19T10:16:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":844,"state":"closed","open_date":"2022-01-19T09:09:22Z","update_date":"2022-01-19T11:53:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":842,"state":"closed","open_date":"2022-01-15T19:52:23Z","update_date":"2022-03-04T09:29:47Z","discussion":[{"author":"proux01","date":"2022-02-17T08:52:10Z","comment":"Rebased on top of #841 "}],"tags":[],"pull_requests":[]},{"author":"proux01","number":841,"state":"closed","open_date":"2022-01-15T19:14:58Z","update_date":"2022-03-04T07:28:57Z","discussion":[{"author":"CohenCyril","date":"2022-01-16T18:46:40Z","comment":"The canonical way to refer to `nat_scope` in mathcomp is `%N`."},{"author":"proux01","date":"2022-01-26T10:52:03Z","comment":"@gares you were right, the `Open Scope ring_scope` in extraspecial.v and extremal.v were not needed\r\n\r\n@chdoc FYI:\r\n* 22 additional `%N`\r\n* 21 `%:R` removed\r\n\r\nso almost on par now (thanks to Enrico)\r\n"},{"author":"proux01","date":"2022-02-17T08:32:16Z","comment":"Rebased, all overlays merged, this will be mergeable whenever we decide to drop support for Coq 8.11 and 8.12."},{"author":"proux01","date":"2022-03-04T07:28:57Z","comment":"done"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":840,"state":"closed","open_date":"2022-01-13T23:23:05Z","update_date":"2022-01-19T09:00:48Z","discussion":[{"author":"CohenCyril","date":"2022-01-18T15:58:17Z","comment":"I think it's ok to merge right away ;)"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":839,"state":"closed","open_date":"2022-01-13T23:09:06Z","update_date":"2022-05-18T13:30:00Z","discussion":[{"author":"ejgallego","date":"2022-01-18T13:28:45Z","comment":"I cc @jouvelot as he has a similar lemma in our codebase and may want to have a look."},{"author":"jouvelot","date":"2022-01-18T13:58:53Z","comment":"Thanks, Emilio: indeed sortedP seems quite natural. I'm not sure this is what you had in mind, but the other lemma I was looking for was the existence of a finite list of (improperly ordered) transpositions that, composed together, would yield a sorted list from an unsorted one (think bubble sort).\n\n> On 18 Jan 2022, at 14:28, Emilio Jesús Gallego Arias ***@***.***> wrote:\n> \n> \n> I cc @jouvelot <https://github.com/jouvelot> as he has a similar lemma in our codebase and may want to have a look.\n> \n> —\n> Reply to this email directly, view it on GitHub <https://github.com/math-comp/math-comp/pull/839#issuecomment-1015412958>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AEH4LNNNKZECO5HP62STDETUWVTJPANCNFSM5L5GLZ7A>.\n> Triage notifications on the go with GitHub Mobile for iOS <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>. \n> You are receiving this because you were mentioned.\n> \n\n"},{"author":"proux01","date":"2022-01-18T14:45:56Z","comment":"@jouvelot I don't think we have that currently in MathComp, so feel free to pen a separate PR."},{"author":"jouvelot","date":"2022-04-22T20:56:40Z","comment":"Hi Pierre (@proux01 ), \r\nI wrote a specification and proof for the following BubbleSort-like lemma:\r\n```\r\nbs_spec\r\n     : forall s : seq nat,\r\n       uniq s ->\r\n       exists ts : seq transposition,\r\n         let '(all_bubbles, s') := swap aperm s ts in \r\n         all_bubbles /\\ up_sorted s'\r\n```\r\nwhich fulfills what I was looking for. Since it's a big complicated, I'm not sure this would be acceptable for a mathcomp PR. Would you please be willing to have a quick look at the file `bubblesort.v` in the public repo [https://github.com/jouvelot/mech.v](https://github.com/jouvelot/mech.v) to give me some advice about this?\r\nThanks."},{"author":"proux01","date":"2022-05-14T14:48:53Z","comment":"Hi @jouvelot , sorry for the late answer. I finally got a look. IINM you want to prove that every permutation of a finite set is the composition of finitely many transpositions. I don't know that part of MathComp very well but it seems to me that this result is already proved as `prod_tpermP` in `perm.v`. Why don't you use that?"},{"author":"jouvelot","date":"2022-05-14T20:13:16Z","comment":"No problem, @proux01. One limitation of `prod_termP` I see comes from the fact that the permutations in `perm.v` for a sequence `s` deal with the values in `s`, while I need to deal with both the values and their indices. The theorem I suggest sees transpositions as pairs of indices. The motivation for this is that one can then limit oneself, to sort upward `s`, to applying transpositions that all have the property of being non-sorted bubbles (i.e., if `i1 < i2`, then `nth s i2 < nth s i1`), which is what bubble sort uses. In addition of providing a specification for a kind of bubble sort algorithm, this theorem is a key ingredient to prove some lemmas in `mech.v`, which is a framework under development to specify auction mechanisms (in the Mechanism Design sense)."},{"author":"proux01","date":"2022-05-15T13:54:37Z","comment":"Interesting. I wonder whether you could only go with indices (as values can be retrieved with `nth`). If it were me, I would probably have a detailed look at the proof of `prod_tpermP` and see if I can mimick it for my (stronger) property.\r\nAnyway, to answer the initial question, \"duplicating\" the definition of transposition and redoing on nat things that were (for a small part) already there on ordinals seems a bit wasteful and I wouldn't consider this ready for a pull request (at least in its current state).\r\n"},{"author":"jouvelot","date":"2022-05-15T18:55:32Z","comment":"I agree with your assessment. \r\n\r\n- I thought using `nat` instead of ordinals would be more useful, since it would have more impact than limiting it to finite types (which is ironic, since I use mostly ordinals and tuples in `mech.v`; in fact, I had to add a layer to map the `nat`-based version of my lemma to ordinals, so that I could use it in `mech.v`). \r\n- I also thought about using \"mathcomp indices\" instead of explicit ones, but they can sometimes be a bit difficult to use when duplicates exist in sequences (I use it nonetheless in the proof, since this issue is not a factor there). \r\n- The duplications you mention are indeed unfortunate, although most of the `max`-based lemmas are not present in `bigop.v` (and may not be applicable to `nat`, anyhow, if they were there). Some of them could in fact be added to `bigop.v`, if deemed useful.\r\n- For now, I'll have, as you suggest, a detailed look at `prod_termP`. \r\n\r\nI managed to get my \"bubble lemma\" to work as expected in my project. In my mind, the question remains of whether getting a nicer-looking version of it would be of value to the mathcomp community, or whether I should limit myself to a finite-type-only version ... or just drop it.\r\n\r\nThanks a lot for your advice."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":838,"state":"closed","open_date":"2022-01-12T02:30:28Z","update_date":"2022-04-21T13:33:14Z","discussion":[{"author":"affeldt-aist","date":"2022-04-14T09:52:22Z","comment":"For the record, we have been using this modification to generate the documentation of MathComp-Analysis and that seems to be ok."},{"author":"CohenCyril","date":"2022-04-14T13:38:21Z","comment":"Maybe we should try to regenerate the doc of mathcomp and make a diff?"},{"author":"affeldt-aist","date":"2022-04-15T05:15:48Z","comment":"It turns out that this fix also fixes problems in the mathcomp documentation:\r\n- https://math-comp.github.io/htmldoc_1_14_0/mathcomp.ssreflect.ssrnotations.html (e^`() notation)\r\n- https://math-comp.github.io/htmldoc_1_14_0/mathcomp.solvable.abelian.html ('Ldiv_n() notation)\r\n- https://math-comp.github.io/htmldoc_1_14_0/mathcomp.algebra.poly.html (p^`() notation)\r\n(I noticed thanks to a diff.)"},{"author":"proux01","date":"2022-04-15T07:51:03Z","comment":"I'll merge next thursday if there is no further comment."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":837,"state":"closed","open_date":"2022-01-10T15:17:15Z","update_date":"2022-01-11T07:39:00Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":836,"state":"closed","open_date":"2022-01-10T11:31:32Z","update_date":"2022-04-14T14:06:16Z","discussion":[{"author":"pi8027","date":"2022-04-14T10:21:05Z","comment":"@CohenCyril It seems to me that naming inconsistency still exists after this renaming. Do you plan to perform one more step of renamings to make them consistent? https://github.com/coq/coq/blob/2706baf2651da5d425ed8ef77f68c55c809f92fd/theories/ssr/ssrbool.v#L2120-L2125 https://github.com/coq/coq/blob/2706baf2651da5d425ed8ef77f68c55c809f92fd/theories/ssr/ssrbool.v#L2165-L2175"},{"author":"CohenCyril","date":"2022-04-14T13:37:24Z","comment":"> @CohenCyril It seems to me that naming inconsistency still exists after this renaming. Do you plan to perform one more step of renamings to make them consistent?\r\n\r\nSure we probably need to fix consistency in the next version."},{"author":"pi8027","date":"2022-04-14T14:06:01Z","comment":"@CohenCyril Please open an issue somewhere so that we don't forget that."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":835,"state":"closed","open_date":"2022-01-09T12:01:08Z","update_date":"2022-01-10T19:42:29Z","discussion":[{"author":"CohenCyril","date":"2022-01-09T18:16:32Z","comment":"They should also be removed from the gitlab CI, but it can be in another PR"},{"author":"proux01","date":"2022-01-10T19:42:28Z","comment":"Indeed, there it is : https://github.com/math-comp/math-comp/pull/837"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":834,"state":"closed","open_date":"2022-01-07T22:17:40Z","update_date":"2022-01-19T09:01:05Z","discussion":[{"author":"proux01","date":"2022-01-10T15:48:31Z","comment":"So CI is green modulo analysis for 8.11 and 8.12 that has been / should be removed.\r\nI'll merge tomorrow if there is no further comment."}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":833,"state":"closed","open_date":"2022-01-07T15:40:17Z","update_date":"2022-01-09T11:41:39Z","discussion":[{"author":"proux01","date":"2022-01-07T16:55:01Z","comment":"CI is morally green:\r\n* `Nix CI for bundle coq-master / mathcomp-doc` is likely unrelated\r\n* `Nix CI for bundle coq-8.11 / mathcomp-analysis`, `Nix CI for bundle coq-8.12 / mathcomp-analysis`, `Gitlab CI job ci-analysis-8.11` and `Gitlab CI job ci-analysis-8.12` are due to analysis recently dropping 8.11 and 8.12 support (I'll do a separate PR to remove those jobs from the CI here)\r\n\r\nSo I'll merge tomorrow if there is no further comment."}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"proux01","number":832,"state":"closed","open_date":"2022-01-07T11:23:34Z","update_date":"2022-03-04T11:30:47Z","discussion":[{"author":"CohenCyril","date":"2022-01-08T17:40:01Z","comment":"That's awesome! Slightly off topic:\r\n- I'd like the same for `int` in another PR\r\n- Could we have the same for an arbitrary ring."},{"author":"proux01","date":"2022-01-09T11:28:18Z","comment":"> * I'd like the same for `int` in another PR\r\n\r\nSure, that should be an easier PR\r\n\r\n> * Could we have the same for an arbitrary ring.\r\n\r\nUnfortunately not, Coq requires the parsed type to be an inductive or at least a constant (so not a section variable).\r\nI could probably rather easily extend Coq to have `<number>` be parsed (and printed back) just as `<number>%:R` but I don't know if it's worth it (the `GRing.natmul` wouldn't be computed in any case (if only because we wouldn't know how to print back the result)).\r\n"},{"author":"proux01","date":"2022-01-15T19:16:26Z","comment":"Never mind, I just found a hack to do it without modifying Coq itself: #841 "},{"author":"proux01","date":"2022-01-15T19:52:55Z","comment":"> * I'd like the same for `int` in another PR\r\n\r\nHere it is: #842"},{"author":"proux01","date":"2022-02-17T09:10:09Z","comment":"Rebased on top of #842 "}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":830,"state":"closed","open_date":"2022-01-01T15:28:28Z","update_date":"2022-01-25T08:02:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":829,"state":"closed","open_date":"2021-12-28T15:10:14Z","update_date":"2022-04-13T15:02:31Z","discussion":[],"tags":[{"tag":"kind: bug","description":"Issue which describe bugs"}],"pull_requests":[]},{"author":"proux01","number":826,"state":"closed","open_date":"2021-12-07T08:42:46Z","update_date":"2021-12-07T10:43:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":824,"state":"closed","open_date":"2021-11-24T13:16:19Z","update_date":"2022-06-10T07:12:42Z","discussion":[{"author":"pi8027","date":"2022-01-25T08:11:38Z","comment":"I still have to apply this change to other structures."},{"author":"proux01","date":"2022-01-25T09:24:09Z","comment":"@pi8027 do you want to do it in the current PR or in a further one?"},{"author":"pi8027","date":"2022-04-13T17:38:45Z","comment":"In the end, I found and fixed a bunch of similar issues using `grep`. Now I think my lack of confidence in the fix is a bigger issue. So I'd like to ask for a careful review."}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"thery","number":823,"state":"closed","open_date":"2021-11-24T02:44:37Z","update_date":"2023-01-13T14:02:50Z","discussion":[{"author":"thery","date":"2021-11-24T02:47:08Z","comment":"I've tried to merge what I had and what @clayrat had. "},{"author":"thery","date":"2021-11-24T02:52:08Z","comment":"need help to improve theorem names ..."},{"author":"proux01","date":"2021-11-24T09:18:32Z","comment":"Is there a good reason for this to be specific to 2?"},{"author":"clayrat","date":"2021-11-24T12:34:54Z","comment":"It appears in complexity theory (required number of bits, various bounds for binary tree-like structures), is often included in standard libraries as a primitive (eg, in C and Matlab), and interacts nicely with 2-based special cases that Mathcomp already has (e.g. `.*2` or `./2`)."},{"author":"thery","date":"2021-11-24T21:32:42Z","comment":"@proux01 ok I've tried to generalize, not sure my assumptions are minimal"},{"author":"thery","date":"2021-12-06T15:03:32Z","comment":"> ```coq\r\n> Lemma up_log_trunc_log p n : 1 < p -> (up_log p n).-1 = trunc_log p n.-1.\r\n> Proof.\r\n> move=> p_gt1.\r\n> case: (leqP (up_log p n) 0).\r\n>   rewrite leqn0 up_log_eq0 leqNgt p_gt1 /=.\r\n>   case: n => [_|[_|//]] /=; first by rewrite up_log0.\r\n>   by rewrite up_log1.\r\n> rewrite up_log_gt0 => /andP[_ n_gt1].\r\n> apply: succn_inj; rewrite prednK ?up_log_gt0 ?p_gt1//.\r\n> apply: up_log_eq => //.\r\n> rewrite -[n]prednK ?ltnS -?pred_Sn ?[0 < n]ltnW//.\r\n> by rewrite trunc_logP ?ltn_predRL// trunc_log_ltn.\r\n> Qed.\r\n> ```\r\n@proux01 Completly overlooked there was such a simple relation. I have added in a slighty different form. Look if it is ok\r\n"},{"author":"proux01","date":"2021-12-06T15:44:19Z","comment":"> I have added in a slighty different form. Look if it is ok\r\n\r\nNice, your form seems much more usable.\r\n"},{"author":"thery","date":"2021-12-06T16:22:58Z","comment":"@proux01 changed the def of `trunc_log`, a bit scare it breaks something :crossed_fingers: "},{"author":"thery","date":"2021-12-06T22:13:04Z","comment":"@proux01 @CohenCyril do you have any idea why `coqeal` is not compiling?"},{"author":"proux01","date":"2021-12-07T07:58:57Z","comment":"There seems to be a dependency issue (missing dependency to real_closed, added recently), maybe we should update the coq-nix-toolbox? (there is still a bit of dark magic there for me)"},{"author":"proux01","date":"2021-12-07T10:46:33Z","comment":"@thery CI should be fixed https://github.com/math-comp/math-comp/pull/826 (except for bigenough on Coq master https://github.com/math-comp/bigenough/pull/5 ), please rebase"},{"author":"thery","date":"2021-12-07T10:53:29Z","comment":"@proux01 Did it. Hope not to get 30 \"failing\" emails like before :roll_eyes:  "},{"author":"thery","date":"2021-12-07T13:20:47Z","comment":"@proux01 Thanks. Seems pretty good only 6 failures but they seem unrelated"},{"author":"proux01","date":"2021-12-07T15:54:24Z","comment":"Indeed, all failures are due to bienough not being compatible with Coq master (c.f. https://github.com/math-comp/bigenough/pull/5 ) so I'll merge by the end of the week if there is no further comment.\r\n\r\nBTW, you may want to remove `trunc_log0n` and `trunc_log1n` since it's now the definition."},{"author":"proux01","date":"2021-12-10T12:14:09Z","comment":"@thery I was about to merge when I realised there seems to be a bunch of unrelated things in the diff of  `CHANGELOG_UNRELEASED.md`, a rebase issue?\r\n"},{"author":"thery","date":"2021-12-10T15:35:51Z","comment":"@proux01 my bad, I've used the github web-interface to fix the conflict and I've clearly messed up. Should be ok now."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":822,"state":"closed","open_date":"2021-11-15T04:26:35Z","update_date":"2022-06-10T07:13:01Z","discussion":[{"author":"chdoc","date":"2021-11-15T07:49:36Z","comment":"This generalization certainly makes sense. In fact, coq-communnity/reglang uses an eqType version of `bigmax_sup`:\r\n```\r\nLemma bigmax_seq_sup (T : eqType) (s:seq T) (P : pred T) F k m :\r\n  k \\in s -> P k -> m <= F k -> m <= \\max_(i <- s | P i) F i.\r\nProof. move => A B C. by rewrite (big_rem k) //= B leq_max C. Qed.\r\n```\r\nSo maybe it's a good idea do generalize that as well. "},{"author":"affeldt-aist","date":"2021-11-15T07:53:57Z","comment":"Great. I'll look at more potential such generalizations about \\max and turn this draft PR into a genuine one asap. Thank you."},{"author":"proux01","date":"2022-06-07T13:40:30Z","comment":"It seems we reached a consensus here. I'll merge by the end of the week if there is no further comment."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":821,"state":"closed","open_date":"2021-10-30T21:08:13Z","update_date":"2021-11-02T08:31:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":820,"state":"closed","open_date":"2021-10-28T16:10:44Z","update_date":"2021-10-28T20:22:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":819,"state":"closed","open_date":"2021-10-28T13:44:56Z","update_date":"2021-12-07T08:48:38Z","discussion":[{"author":"proux01","date":"2021-10-28T15:27:55Z","comment":"Th failures for `coq-master / mathcomp-abel` and `coq-8.12 / odd-order` look unrelated but I don't really understand them (they both fail at step \"Checking presence of CI target {mathcomp-abel,odd-order}\")"},{"author":"CohenCyril","date":"2021-10-28T16:15:00Z","comment":"> Th failures for `coq-master / mathcomp-abel` and `coq-8.12 / odd-order` look unrelated but I don't really understand them (they both fail at step \"Checking presence of CI target {mathcomp-abel,odd-order}\")\r\n\r\nI dropped error messages a bit too eagerly, sorry!\r\nhttps://github.com/coq-community/coq-nix-toolbox/pull/73\r\n\r\nMeanwhile you can do the `nix-build` command manually without throwing out the output :smile: \r\n```bash\r\n$ nix-build --no-out-link --argstr bundle \"coq-master\" --argstr job \"mathcomp-abel\"\r\nthese derivations will be built:\r\n  /nix/store/a319n9bcxdja4i2y37xdkap7sig07939-coqdev-mathcompdev-abel-dev.drv\r\nthese paths will be fetched (168.88 MiB download, 633.94 MiB unpacked):\r\n  /nix/store/rxzkrfkhzd2agc9haj351nay2x689h2y-coq-dev\r\n```\r\nBut I don't see the problem either :laughing: "},{"author":"CohenCyril","date":"2021-10-28T20:24:14Z","comment":"@proux01  If you rebase on top of master you should be able to see the error message now."},{"author":"proux01","date":"2021-10-29T07:50:57Z","comment":"Thanks, looks like things fixed themselves?\r\nAnyway, CI green"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":818,"state":"closed","open_date":"2021-10-26T08:52:33Z","update_date":"2022-06-25T13:37:34Z","discussion":[{"author":"CohenCyril","date":"2021-10-26T08:53:46Z","comment":"CC @hivert @ChrisHughes24"},{"author":"hivert","date":"2021-10-28T06:06:08Z","comment":"May I suggest to take the opportunity to add all the easy lemmas about complex conjugation such as `1^* = 1` or `(x + y)^* = x^* + y^*`. Admitedly, they are all one liner thank to the various `rmorph?`. However, they are easier to apply if you have exactly the right lemma. For example, I'd rather do `rewrite -conjC1`, instead of `rewrite -(rmorph1 [rmorphism of (fun x => x^*)]) /=.`\r\n"},{"author":"CohenCyril","date":"2022-01-10T11:35:08Z","comment":"> May I suggest to take the opportunity to add all the easy lemmas about complex conjugation such as `1^* = 1` or `(x + y)^* = x^* + y^*`. Admitedly, they are all one liner thank to the various `rmorph?`. However, they are easier to apply if you have exactly the right lemma. For example, I'd rather do `rewrite -conjC1`, instead of `rewrite -(rmorph1 [rmorphism of (fun x => x^*)]) /=.`\r\n\r\n`conjC0` and `conjC1` were already there, I added `conjCN1` and I will not add the `conjCD`, etc, since the pattern of the RHS is sufficient to infer the morphism, so the contrived form  `rewrite -(rmorphD [rmorphism of (fun x => x^*)]) /=.` would ne be necessary anyway. I think this is a good compromise and will stop there."},{"author":"CohenCyril","date":"2022-01-11T14:59:31Z","comment":"@thery thanks for your thorough review."},{"author":"proux01","date":"2022-06-15T08:46:52Z","comment":"@CohenCyril could you rebase please?"},{"author":"CohenCyril","date":"2022-06-23T06:43:51Z","comment":"> @CohenCyril could you rebase please?\r\n\r\ndone"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":817,"state":"closed","open_date":"2021-10-26T00:03:12Z","update_date":"2021-10-27T13:05:03Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":816,"state":"closed","open_date":"2021-10-25T11:07:10Z","update_date":"2021-10-28T12:24:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"chdoc","number":815,"state":"closed","open_date":"2021-10-25T09:30:45Z","update_date":"2021-10-28T12:24:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":814,"state":"closed","open_date":"2021-10-22T15:01:35Z","update_date":"2021-10-24T08:42:42Z","discussion":[],"tags":[{"tag":"kind: bug","description":"Issue which describe bugs"},{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":813,"state":"closed","open_date":"2021-10-22T11:35:39Z","update_date":"2022-07-04T12:50:01Z","discussion":[{"author":"ppedrot","date":"2022-07-04T12:50:01Z","comment":"@gares FYI merging this PR has broken compat of mathcomp with coq/coq#16004, because the hint is locality-free..."}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":812,"state":"closed","open_date":"2021-10-22T08:29:03Z","update_date":"2021-10-25T08:43:34Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"proux01","number":810,"state":"closed","open_date":"2021-10-21T13:17:33Z","update_date":"2022-07-26T12:49:50Z","discussion":[],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."}],"pull_requests":[]},{"author":"proux01","number":809,"state":"closed","open_date":"2021-10-21T11:10:29Z","update_date":"2021-10-25T08:47:36Z","discussion":[{"author":"proux01","date":"2021-10-21T11:42:15Z","comment":"The nixppkgs PR NixOS/nixpkgs#142174 just got merged, so we may rather want to wait a few days and update nixpkgs here."},{"author":"proux01","date":"2021-10-21T12:52:50Z","comment":"And multinomials 8.12 is ok by applying @erikmd suggestion from https://github.com/math-comp/math-comp/pull/793#issuecomment-946141996"},{"author":"CohenCyril","date":"2021-10-21T13:19:26Z","comment":"@proux01 I am going to remove the draft status and merge this if you agree?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":808,"state":"closed","open_date":"2021-10-20T12:54:50Z","update_date":"2021-10-26T13:12:18Z","discussion":[{"author":"pi8027","date":"2021-10-20T13:01:30Z","comment":"> @pi8027 could you test if this is enough to solve the inefficiencies encountered in apery?\r\n\r\nIndeed. I will report ASAP."},{"author":"pi8027","date":"2021-10-20T14:36:19Z","comment":"math-comp/apery#4 compiles without almost any issue! I have just changed one line which was already a bottleneck with MathComp 1.12.\r\n\r\nWith this PR:\r\n```\r\nmake  595.03s user 9.88s system 99% cpu 10:05.20 total\r\n```\r\nWith MathComp 1.12:\r\n```\r\nmake  741.40s user 9.96s system 99% cpu 12:31.72 total\r\n```\r\n\r\nInterestingly, it is now faster than MathComp 1.12, although the result without native compilation could be different..."},{"author":"CohenCyril","date":"2021-10-22T11:36:29Z","comment":"@pi8027 fixed notations `[rat x // y]` and removed `vm_compute` for now and made another pull request #813  for this."},{"author":"CohenCyril","date":"2021-10-22T13:19:32Z","comment":"@pi8027 I think it is ready now..."},{"author":"proux01","date":"2021-10-26T13:12:18Z","comment":"BTW, maybe an alternative to resorting to `30%:Q` would be to have a number notation like `30` (or `3.14`) in scope `rat_scope`?"}],"tags":[],"pull_requests":[]},{"author":"hivert","number":806,"state":"closed","open_date":"2021-10-19T21:16:52Z","update_date":"2021-10-22T13:56:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"erikmd","number":804,"state":"closed","open_date":"2021-10-18T10:55:12Z","update_date":"2021-11-06T12:29:17Z","discussion":[{"author":"erikmd","date":"2021-10-18T18:19:05Z","comment":"Closing/reopening the PR to restart the CI now that https://github.com/coq/opam-coq-archive/pull/1869 has been merged."},{"author":"erikmd","date":"2021-10-18T19:44:04Z","comment":"FYI @CohenCyril now that's fine for the (coq-8.12, multinomials) job with the Docker build:\r\nhttps://gitlab.com/math-comp/math-comp/-/pipelines/390538250\r\n\r\nBut I'm not sure what happens for the Nix jobs."},{"author":"erikmd","date":"2021-10-18T19:51:58Z","comment":"> But I'm not sure what happens for the Nix jobs.\r\n\r\nIn particular for the coqeal failure… Anyway I guess that's orthogonal to this PR? (which is only an opam-related bugfix PR)"},{"author":"CohenCyril","date":"2021-10-19T08:38:50Z","comment":"> In particular for the coqeal failure… Anyway I guess that's orthogonal to this PR? (which is only an opam-related bugfix PR)\r\n\r\nYes it must be orthogonal in terms of fix, but the problem is related.\r\nThe thing is I do not understand how native vs non-native computation is enabled & propagated..."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":802,"state":"closed","open_date":"2021-10-15T12:04:28Z","update_date":"2021-10-15T16:00:22Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":801,"state":"open","open_date":"2021-10-14T09:09:36Z","update_date":"2023-01-11T09:33:34Z","discussion":[{"author":"thery","date":"2023-01-11T09:33:19Z","comment":"The header with the new functions is missing."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":800,"state":"open","open_date":"2021-10-14T09:01:54Z","update_date":"2023-01-11T09:46:08Z","discussion":[{"author":"proux01","date":"2022-06-15T08:37:04Z","comment":"@CohenCyril should we postpone this or try to move toward merging?"},{"author":"CohenCyril","date":"2022-06-22T09:32:51Z","comment":"This is a WIP, let's postpone."},{"author":"affeldt-aist","date":"2023-01-11T09:46:08Z","comment":"TODO: find where to put this alternative proof in math-comp (gallery?)"}],"tags":[],"pull_requests":[]},{"author":"hivert","number":799,"state":"closed","open_date":"2021-10-13T21:51:33Z","update_date":"2021-10-23T00:11:22Z","discussion":[{"author":"hivert","date":"2021-10-20T20:56:01Z","comment":"I'll take care of https://github.com/math-comp/math-comp/issues/778 too in this PR."},{"author":"hivert","date":"2021-10-22T14:05:52Z","comment":"Finally following @ggonthier, i'd rather keep https://github.com/math-comp/math-comp/issues/778 to another PR. So those few typos can be fixed right now."}],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."}],"pull_requests":[]},{"author":"CohenCyril","number":798,"state":"closed","open_date":"2021-10-13T12:01:24Z","update_date":"2021-10-25T08:43:21Z","discussion":[{"author":"CohenCyril","date":"2021-10-13T15:31:42Z","comment":"@thery now it fails because it's too powerful https://github.com/math-comp/math-comp/pull/798/checks?check_run_id=3884025523#step:11:27"},{"author":"thery","date":"2021-10-13T17:04:17Z","comment":"@CohenCyril that was the only problem. Commited [here](https://github.com/coq-community/gaia/commit/4659f7098908d5d7af947f52895c1c086953e0a3) "},{"author":"thery","date":"2021-10-14T12:13:22Z","comment":"@CohenCyril would it be worth to add a test_rat.v in the test_suite to check everything works as planned?"},{"author":"CohenCyril","date":"2021-10-15T12:13:27Z","comment":"> @CohenCyril would it be worth to add a test_rat.v in the test_suite to check everything works as planned?\r\n\r\ndone"},{"author":"thery","date":"2021-10-15T12:29:13Z","comment":"@CohenCyril do we wait for @pi8027's review or we merge?"}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"affeldt-aist","number":797,"state":"closed","open_date":"2021-10-09T01:41:37Z","update_date":"2021-10-11T06:19:15Z","discussion":[],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."}],"pull_requests":[]},{"author":"hivert","number":796,"state":"closed","open_date":"2021-10-06T11:46:31Z","update_date":"2021-10-26T07:42:38Z","discussion":[{"author":"CohenCyril","date":"2021-10-25T08:46:03Z","comment":"@chdoc we may want to include this in 1.13.0"}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":795,"state":"closed","open_date":"2021-10-05T10:47:20Z","update_date":"2021-10-08T16:59:45Z","discussion":[{"author":"affeldt-aist","date":"2021-10-06T08:35:22Z","comment":"@CohenCyril should this PR be milestoned 1.13?"},{"author":"CohenCyril","date":"2021-10-07T08:11:09Z","comment":"> @CohenCyril should this PR be milestoned 1.13?\r\n\r\nOf course, actually, nothing can ever get forward before the CI works."}],"tags":[],"pull_requests":[]},{"author":"hivert","number":793,"state":"closed","open_date":"2021-10-01T20:39:23Z","update_date":"2021-10-22T12:21:29Z","discussion":[{"author":"hivert","date":"2021-10-01T21:05:14Z","comment":"There something wrong with multinomials but I don't thing it's related to this PR."},{"author":"hivert","date":"2021-10-03T20:29:44Z","comment":"Thanks @proux01 for the careful review !"},{"author":"hivert","date":"2021-10-04T08:30:56Z","comment":"Any confirmation that the failing of multinomials is not due to me ?"},{"author":"proux01","date":"2021-10-04T08:41:04Z","comment":"Indeed it's actually due to multinomials using dune which prompted math-comp/multinomials#45 which requires `/usr/bin/env` that doesn't seem available in nix. That's definitely unrelated."},{"author":"erikmd","date":"2021-10-14T17:11:52Z","comment":"> Indeed it's actually due to multinomials using dune which prompted [math-comp/multinomials#45](https://github.com/math-comp/multinomials/pull/45) which requires `/usr/bin/env` that doesn't seem available in nix. That's definitely unrelated.\r\n\r\n@CohenCyril is there something to do upstream in multinomials to this aim? e.g., replacing `/usr/bin/env bash` in the configure script with `/bin/bash`?"},{"author":"proux01","date":"2021-10-15T09:56:58Z","comment":"> @CohenCyril is there something to do upstream in multinomials to this aim? e.g., replacing `/usr/bin/env bash` in the configure script with `/bin/bash`?\r\n\r\n@erikmd no, that wouldn't help, @CohenCyril fixed the nixpkg package https://github.com/NixOS/nixpkgs/pull/140150 so there is nothing to do, this should now work"},{"author":"CohenCyril","date":"2021-10-15T16:01:38Z","comment":"> @CohenCyril is there something to do upstream in multinomials to this aim? e.g., replacing `/usr/bin/env bash` in the configure script with `/bin/bash`?\r\n\r\nThe failure of multinomials is now on the docker side. I'm ignoring for now."},{"author":"CohenCyril","date":"2021-10-15T22:01:47Z","comment":"> The failure of multinomials is now on the docker side. I'm ignoring for now.\r\n\r\nAh nevermind there is also a failure on the nix side, just for coq 8.12, which I do not understand...\r\nhttps://github.com/math-comp/math-comp/pull/793/checks?check_run_id=3905504301#step:12:22\r\n"},{"author":"erikmd","date":"2021-10-18T20:31:43Z","comment":"> Ah nevermind there is also a failure on the nix side, just for coq 8.12, which I do not understand... https://github.com/math-comp/math-comp/pull/793/checks?check_run_id=3905504301#step:12:22\r\n\r\nHi @CohenCyril, I've just have a look and I don't know either what's the meaning of\r\n```\r\nError: Library \"coq.kernel\" not found.\r\n```\r\nas this seems to be a dune-related error…\r\n\r\nBut I see that two lines above this error, there is:\r\n```\r\ncoq-native support enabled!\r\n```\r\nwhile I believe (IINM) that in the Nix packaging of multinomials, native compilation was expected to be off.\r\n\r\nSo if the error and this flag were related, I believe I have a simple solution that wouldn't require a change in multinomials codebase, just in the Nix packaging of `coq-mathcomp-multinomials.{dev & upcoming releases 1.5.5+}`:\r\n\r\nactually, the only purpose of the 50-line configure script I had proposed in multinomials is [this if-then-else](https://github.com/math-comp/multinomials/blob/348222aeee8ce02f84fc1ceaf1ff4f286cd29db1/configure#L39-L44):\r\n```\r\n    if coq_native_compiler; then\r\n        echo 'coq-native support enabled!' >&2\r\n        sed -e 's/;coq-native-disabled; \\?//' \"$dir/src/dune.in\" > \"$dir/src/dune\"\r\n    else\r\n        cat \"$dir/src/dune.in\" > \"$dir/src/dune\"\r\n    fi\r\n```\r\nAdmittedly, the coq_native_compiler condition is more strict for Coq 8.12.1 (the minimal version of Coq that is compatible with the `(mode native)` of dune ≥ 2.8), because of several reasons (briefly speaking, the 'COQ_NATIVE_COMPILER_DEFAULT=yes' string that can output `coqc -config` cannot be found in Coq <8.13, and we cannot do some opam query to see if the \"coq-native\" package has been installed, precisely given this detection/guess has to be done by the build system layer, agnostic w.r.t. the chosen package manager).\r\n\r\nBut, if you confirm that the Nix packaging need not enabling the `-native-compiler yes` option, a simple solution could be to replace the `./configure` Nix build step with just `cp -f src/dune.in src/dune`\r\n\r\nI'm not Nix-savvy at all, but hopefully this is feasible in https://github.com/CohenCyril/nixpkgs/blob/master/pkgs/development/coq-modules/multinomials/default.nix ? (this way, as I said just now, it wouldn't require another change in multinomials.dev)"},{"author":"CohenCyril","date":"2021-10-19T08:32:15Z","comment":"> while I believe (IINM) that in the Nix packaging of multinomials, native compilation was expected to be off.\r\n\r\nThis I'm not sure, since I do not understand where it comes from... Why would it be expected to be off?"},{"author":"proux01","date":"2021-10-21T11:59:15Z","comment":"> I don't know either what's the meaning of\r\n> \r\n> ```\r\n> Error: Library \"coq.kernel\" not found.\r\n> ```\r\n> \r\n> as this seems to be a dune-related error…\r\n\r\nIf this can shed some light, this happens only when native compilation is enabled, then dune need the OCaml library `coq.kernel` to be able to build the native OCaml code. That doesn't explain why it is not found though.\r\n\r\n> But, if you confirm that the Nix packaging need not enabling the `-native-compiler yes` option, a simple solution could be to replace the `./configure` Nix build step with just `cp -f src/dune.in src/dune`\r\n\r\nI guess native compilation with dune didn't get any serious testing in nix. Meanwhile, I'd rather be in favor of your solution (this configure script being already a workaround for a dune deficiency anyway).\r\n"},{"author":"proux01","date":"2021-10-22T08:12:13Z","comment":"@hivert could you rebase on master, CI should now be fixed (apologies for the inconvenience)"},{"author":"CohenCyril","date":"2021-10-22T08:55:41Z","comment":"> @hivert could you rebase on master, CI should now be fixed (apologies for the inconvenience)\r\n\r\nWait 1h please"},{"author":"hivert","date":"2021-10-22T09:44:58Z","comment":"@CohenCyril I didn't see your message before pushing. I hope I didn't rebase too soon."},{"author":"CohenCyril","date":"2021-10-22T09:46:51Z","comment":"> @CohenCyril I didn't see your message before pushing. I hope I didn't rebase too soon.\r\n\r\nYou did, please rebase again now."},{"author":"hivert","date":"2021-10-22T09:50:42Z","comment":"> You did, please rebase again now.\r\n\r\nDone"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"pi8027","number":792,"state":"closed","open_date":"2021-09-30T14:53:27Z","update_date":"2021-10-25T08:56:45Z","discussion":[],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."}],"pull_requests":[]},{"author":"affeldt-aist","number":791,"state":"closed","open_date":"2021-09-27T00:56:02Z","update_date":"2021-10-08T08:24:47Z","discussion":[{"author":"thery","date":"2021-10-07T07:49:40Z","comment":"thanks!\r\n"}],"tags":[],"pull_requests":[]},{"author":"JasonGross","number":790,"state":"closed","open_date":"2021-09-26T01:57:06Z","update_date":"2023-04-06T11:16:53Z","discussion":[{"author":"gares","date":"2021-09-26T06:14:46Z","comment":"Apparently there is a conflict in fintype"},{"author":"JasonGross","date":"2021-09-26T22:45:41Z","comment":"I think I need @herbelin 's help in how to factor notations so that they work:\r\n```coq\r\nRequire Import Coq.Lists.List.\r\nDeclare Scope seq_scope.\r\nOpen Scope seq_scope.\r\nNotation \"[ 'seq' E | i <- s ]\" := (map (fun i => E) s)\r\n  (at level 0, E at level 99, i binder,\r\n   format \"[ '[hv' 'seq'  E '/ '  |  i  <-  s ] ']'\") : seq_scope.\r\nCheck [seq ?[F] i | i <- ?[enum] ?[P] ].\r\nReserved Notation \"[ 'seq' F | x : T ]\"\r\n  (at level 0, F at level 99, x ident,\r\n   format \"'[hv' [ 'seq'  F '/ '  |  x  :  T ] ']'\").\r\nCheck [seq ?[F] i | i <- ?[enum] ?[P] ].\r\n(* Error: Syntax error: ':' expected after [name] (in [term]). *)\r\n```"},{"author":"CohenCyril","date":"2022-01-10T10:21:54Z","comment":"Hi @JasonGross @herbelin any hope to make this PR go forward?"},{"author":"herbelin","date":"2022-01-10T11:45:55Z","comment":"Hi,\r\n\r\nAt first view, supporting `[ 'seq' E | i <- s ]` with `i` a binder would require to change `x` to `binder` also in `[ 'seq' F | x : T ]` but the latter does not seem easy to generalize because the `x : T` has apparently a more complex interpretation than just being a binder, see the `in pred_of_simpl (@pred_of_argType T)` part (what would go wrong actually by replacing this part with `fun x : T => true`, in which case we would get the generalization easily?).\r\n\r\nAssuming that there is no easy way to reformulate `pred_of_simpl (@pred_of_argType T)` under a form referring to `x : T` rather than to only `T`, what could be tried is to only add `[ 'seq' E | ' i <- s ]` with `i` pattern, rather than generalizing `[ 'seq' E | i <- s ]` to `i` binder.\r\n\r\nHoping that it helps.\r\n"},{"author":"herbelin","date":"2022-01-13T08:49:28Z","comment":"@CohenCyril: we would need your help to know if there is a way to reformulate `pred_of_simpl (@pred_of_argType T)` under a form referring to `x : T` rather than to only `T` in notation `[ 'seq' F | x : T ] := [seq F | x : T in pred_of_simpl (@pred_of_argType T)]`."},{"author":"JasonGross","date":"2022-01-13T16:54:07Z","comment":"> reformulate `pred_of_simpl (@pred_of_argType T)` under a form referring to `x : T` rather than to only `T` in notation\r\n\r\n@herbelin What about using the `match` trick for substitution to do `(fun A (a : A) => A) _ (x : T))` in a way that does not leave a beta redex?  (I can code up a solution that does this the next time I'm at a computer; I don't have in my head an accurate model of which zeta-redexs unification will unfold and in what order, when it needs to perform evar unification.)"},{"author":"herbelin","date":"2022-01-13T20:29:39Z","comment":"> @herbelin What about using the `match` trick for substitution to do `(fun A (a : A) => A) _ (x : T))` in a way that does not leave a beta redex? (I can code up a solution that does this the next time I'm at a computer; I don't have in my head an accurate model of which zeta-redexs unification will unfold and in what order, when it needs to perform evar unification.)\r\n\r\nI don't know if that'll work. We need `x : T` to occur in position of binder so that when substituted with something such as `'pat` it continues to make sense,\r\n"},{"author":"JasonGross","date":"2022-01-13T22:52:21Z","comment":"> We need `x : T` to occur in position of binder so that when substituted with something such as `'pat` it continues to make sense,\r\n\r\nWhat about the equivalent of `(fun A (a : A -> True) => A) _ (fun x : T => I)`?"},{"author":"JasonGross","date":"2022-01-13T22:54:55Z","comment":"(Of course the `match` form will never be used for printing, I don't know if that is an issue)"},{"author":"JasonGross","date":"2022-01-14T03:36:41Z","comment":"> What about the equivalent of `(fun A (a : A -> True) => A) _ (fun x : T => I)`?\r\n\r\n```coq\r\nNotation \"'type_of' x\"\r\n  := match _, (fun x => I) with\r\n     | T, f\r\n       => match match f return T -> True with f' => f' end with\r\n          | _ => T\r\n          end\r\n     end\r\n       (x binder, only parsing, at level 20).\r\nCheck type_of x : nat. (* nat *)\r\nCheck type_of '((x, y) : nat * nat). (* (nat * nat)%type *)\r\n```"},{"author":"JasonGross","date":"2022-01-14T03:59:51Z","comment":"Updated PR, seems to be working"},{"author":"JasonGross","date":"2022-01-14T05:22:53Z","comment":"Two issues seem to arise:\r\n1. This change is incompatible with Coq 8.11 and Coq 8.12.  With mathcomp be dropping support for these versions on master anytime soon?\r\n2. multinomials fails with\r\n```\r\nFile \"./src/freeg.v\", line 207, characters 37-38:\r\nError:\r\nIn environment\r\nG : zmodType\r\nK : choiceType\r\ns : seq (G * K)\r\nx : K\r\nThe term \"x\" has type \"Choice.sort K\" while it is expected to have type\r\n \"(?A * ?B)%type\".\r\n```\r\nat https://github.com/math-comp/multinomials/blob/200ef66f7f892814dc7b9254f4f23bc7f59de093/src/freeg.v#L207 which is\r\n```coq\r\nDefinition predom s: seq K := [seq x.2 | x <- s].\r\n```\r\nwith\r\n```coq\r\nVariable G : zmodType.\r\nVariable K : choiceType.\r\nImplicit Types s   : seq (G * K).\r\nImplicit Types x y : K.\r\n```\r\n\r\nThe issue is that Coq now infers `x : K` rather than `x : _ * _`.  There's an easy backwards-compatible fix of changing `x` to `v` on that line; is that acceptable?"},{"author":"CohenCyril","date":"2022-01-14T12:11:40Z","comment":"> 1. This change is incompatible with Coq 8.11 and Coq 8.12.  With mathcomp be dropping support for these versions on master anytime soon?\r\n\r\nCoq 8.11 I think we can do it for the next release, for Coq 8.12 we might have to wait a few more month but eventually yes."},{"author":"JasonGross","date":"2022-01-15T17:56:29Z","comment":"Oops, I closed and reopened to restart the CI, and coqbot removed the 1.15.0 milestone :-("},{"author":"proux01","date":"2022-06-08T07:31:39Z","comment":"@JasonGross mathcomp now requires Coq >= 8.13, does that help here?\r\n"},{"author":"affeldt-aist","date":"2023-01-18T09:54:04Z","comment":"This PR was discussed during the last MathComp meeting (https://github.com/math-comp/math-comp/wiki/Minutes-January-11-2023) and has been considered for merging.\r\n@JasonGross Could you rebase it? Thank you.\r\n\r\n"},{"author":"JasonGross","date":"2023-02-15T03:57:16Z","comment":"Sorry, this fell off my todo list, I'll try to rebase shortly"},{"author":"JasonGross","date":"2023-02-28T21:08:34Z","comment":"I've rebased, but the CI seems extremely unhappy."},{"author":"JasonGross","date":"2023-03-03T01:22:13Z","comment":"And now there is no CI?"},{"author":"JasonGross","date":"2023-03-03T03:28:30Z","comment":"Overlay for monomials: https://github.com/math-comp/multinomials/pull/73"},{"author":"JasonGross","date":"2023-03-03T03:42:39Z","comment":"I'm confused by [the error in odd-order](https://github.com/math-comp/math-comp/actions/runs/4319328583/jobs/7538872530#step:15:559):\r\n[File \"./theories/PFsection3.v\", line 335, characters 17-19](https://github.com/math-comp/odd-order/blob/663e1827836cf0dedebb99f0ab6b232bab9bffd0/theories/PFsection3.v#L335R17-R19):\r\n`Error: Syntax error: ''' or [term level 99] expected after 'seq' (in [term]).`\r\n\r\nI cannot reproduce this locally.  Can anyone else reproduce this?\r\n"},{"author":"JasonGross","date":"2023-04-01T21:30:30Z","comment":"> I'm confused by [the error in odd-order](https://github.com/math-comp/math-comp/actions/runs/4319328583/jobs/7538872530#step:15:559): [File \"./theories/PFsection3.v\", line 335, characters 17-19](https://github.com/math-comp/odd-order/blob/663e1827836cf0dedebb99f0ab6b232bab9bffd0/theories/PFsection3.v#L335R17-R19): `Error: Syntax error: ''' or [term level 99] expected after 'seq' (in [term]).`\r\n> \r\n> I cannot reproduce this locally. Can anyone else reproduce this?\r\n\r\nAh, this only occurs with Coq 8.13.  Is odd-order planning to drop support for Coq 8.13 anytime soon?  (The rest of the ecosystem seems to build fine.)"},{"author":"JasonGross","date":"2023-04-01T21:40:34Z","comment":"Ah, maybe if someone merges https://github.com/math-comp/odd-order/pull/46 then this PR will work (finally) as-is"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":789,"state":"closed","open_date":"2021-09-24T16:05:52Z","update_date":"2021-10-14T12:40:49Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"hivert","number":788,"state":"closed","open_date":"2021-09-23T21:13:13Z","update_date":"2021-10-23T17:46:19Z","discussion":[{"author":"hivert","date":"2021-10-14T20:51:52Z","comment":"It seems that the changes in path breaks real closed. I'm reverting them."},{"author":"hivert","date":"2021-10-15T12:53:45Z","comment":"There is still a failure with  coq-8.12 / multinomials. Thinks seems to be fixed for the other versions of Coq."},{"author":"CohenCyril","date":"2021-10-18T08:11:12Z","comment":"> LGTM, although we should probably open an issue to remember investigating why using `[rel x y | e x z]` in path breaks real closed.\r\n\r\nSure but we cannot merge until then."},{"author":"chdoc","date":"2021-10-18T08:44:18Z","comment":"@CohenCyril, The change in `path.v` that breaks real-closed was reverted. The CI failure is due to multinomials and probably unreleated. So I think this can be merged, either as is or using `(fun x y => e y x)` instead of `[rel x y  | e y x]` for consistency. "},{"author":"hivert","date":"2021-10-23T00:26:54Z","comment":"I Just pushed to relaunch the tests."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"erikmd","number":786,"state":"closed","open_date":"2021-09-22T21:46:02Z","update_date":"2022-06-08T07:33:58Z","discussion":[{"author":"proux01","date":"2022-06-08T07:33:56Z","comment":"@erikmd I guess we can close this now?"}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"erikmd","number":785,"state":"closed","open_date":"2021-09-22T20:52:48Z","update_date":"2021-10-25T09:17:51Z","discussion":[{"author":"CohenCyril","date":"2021-10-25T08:49:37Z","comment":"@chdoc and this (harmless)"}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"erikmd","number":784,"state":"closed","open_date":"2021-09-22T20:21:26Z","update_date":"2021-10-25T08:50:03Z","discussion":[{"author":"erikmd","date":"2021-09-22T21:47:07Z","comment":"Given reverse dependencies are not yet ready, splitting this PR in two parts:\r\n\r\n1. this mere commit https://github.com/math-comp/math-comp/pull/784/commits/e04a8b15c50e7bef425a5a9ad1669e38da4624da\r\n\r\n2. and PR https://github.com/math-comp/math-comp/pull/786\r\n\r\n(so that 1. can be merged sooner)"},{"author":"gares","date":"2021-09-23T08:12:58Z","comment":"LGTM, the failure on nix 8.13 + 4CT seems unrelated"}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"hivert","number":783,"state":"closed","open_date":"2021-09-18T22:18:18Z","update_date":"2021-10-25T08:50:09Z","discussion":[{"author":"hivert","date":"2021-09-23T19:19:18Z","comment":"One more contribution from me ;-) Glad to help !"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":782,"state":"closed","open_date":"2021-09-13T01:18:08Z","update_date":"2021-10-18T12:21:06Z","discussion":[{"author":"affeldt-aist","date":"2021-09-13T02:46:32Z","comment":"NB: CI fails with mathcomp-abel\r\nNB: no observed anymore on 2021-10-09"},{"author":"CohenCyril","date":"2021-10-08T17:07:13Z","comment":"> NB: CI fails with mathcomp-abel\r\n\r\nI do not see this failure, where is it?"},{"author":"affeldt-aist","date":"2021-10-09T00:36:31Z","comment":"> > NB: CI fails with mathcomp-abel\r\n> \r\n> I do not see this failure, where is it?\r\n\r\nI don't see it anymore. I guess it has disappeared."}],"tags":[],"pull_requests":[]},{"author":"hivert","number":781,"state":"closed","open_date":"2021-09-06T09:43:21Z","update_date":"2021-10-19T18:47:47Z","discussion":[{"author":"hivert","date":"2021-10-18T16:13:36Z","comment":"Thanks Cyril for the re-reading,"},{"author":"chdoc","date":"2021-10-18T16:22:06Z","comment":"So, now we have both multinomials and coqeal failing, but both look completely unrelated :man_shrugging: "},{"author":"hivert","date":"2021-10-18T16:28:29Z","comment":"> So, now we have both multinomials and coqeal failing, but both look completely unrelated man_shrugging\r\n\r\nSorry ! If you feel you need some time working on the infrastructure and leave my series of pull-requests for some time alone, I won't feel offended. Build systems are always a nightmare for me (for whatever language by the way) and I'm glad someone else is taking care of it... By the way, you are likely to get one more pull request from me in a near future, from a discussion with Georges..."},{"author":"proux01","date":"2021-10-19T08:54:53Z","comment":"@CohenCyril the Coqeal failure comes from https://github.com/coq-community/coqeal/pull/52 basically, depending on paramcoq >= 1.1.3 should be enough, do you want me to try to craft a PR on nixpkg ?"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"chdoc","number":780,"state":"closed","open_date":"2021-09-03T13:14:30Z","update_date":"2021-10-25T08:50:43Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"ed-hermoreyes","number":779,"state":"closed","open_date":"2021-09-02T10:13:20Z","update_date":"2022-06-25T09:43:31Z","discussion":[{"author":"chdoc","date":"2021-09-02T10:23:34Z","comment":"Can you name one or two of the developers you talked to, as they might be good candidates for code reviews?"},{"author":"ed-hermoreyes","date":"2021-09-02T11:47:13Z","comment":"We talked to Cyril Cohen."},{"author":"mgbedmar","date":"2021-09-06T11:48:45Z","comment":"We've made a general cleanup following your guidelines and we believe the code could be ready now. Let us know if you have any other suggestions."},{"author":"mgbedmar","date":"2021-09-08T13:28:52Z","comment":"> Also, please do not merge 'master' into PRs, instead please crate pull requests from branches that you can freely modify (i.e., usually something other than master) and then just rebase onto master, squashing intermediate commits in the process.\r\n\r\nSorry about that. We're not sure of completely understanding the protocol you just described. Can you confirm that the following steps would fix the current PR?\r\n\r\n1. Create another branch `ed-hermoreyes:subchain` with all the commits we've made until now.\r\n2. Re-establish the state of `ed-hermoreyes:master` to be as `math-comp:master`. \r\n3. Modify this PR so that it goes \"into `math-comp:master` from `ed-hermoreyes:subchain`\".\r\n4. Rebase squashing all our commits to `ed-hermoreyes:subchain` into a single one.\r\n5. Do 4 each time we request review.\r\n\r\n"},{"author":"chdoc","date":"2021-09-08T13:44:11Z","comment":"> Sorry about that. We're not sure of completely understanding the protocol you just described. Can you confirm that the following steps would fix the current PR?\r\n\r\nNo problem. I think this looks like a sound process to fix the current PR, although I do not know how to change the \"from\" branch for an existing PR in GitHub. \r\n\r\nTo be on the safe side, it may be a good idea to implement the changes I proposed before rebase squashing everything. Also, it's not necessary to squash for every review cycle, doing this once when things are (almost) stable can make the the review process more understandable. In the meantime, it may be necessary to rebase (without squashing) in order to resolve conflicts and make the CI run.  In any case, I would suggest only pushing commits you actually want to be reviewed, as every push triggers an email to every member of the core team and a lengthy CI pipeline. "},{"author":"chdoc","date":"2021-09-10T13:01:37Z","comment":"As it comes to the lemma statements and proofs,I'm much happier now than I was initally. And we're down from ~560 to ~330 lines. I will try to make another detailed pass over the weekend. \r\n\r\nI'm still not entirely happy about the naming of things. In particular the double use of `prefix` and `suffix` as indicators for patterns as well as the names of definitions. This leads to confusing names like `prefix_prefix` and `suffix_suffix`. Also, unlike `prefix` and `suffix`, the name `subchain` does not speak to me. Is there maybe an alternative name? \r\n\r\n@CohenCyril Do you maybe have some suggestions?"},{"author":"mgbedmar","date":"2021-09-10T14:41:08Z","comment":"I agree with your objections about the names, we simply didn't find anything better. I even remember that Cyril didn't like `subchain` either. If we keep `prefix` and `suffix` for the names of the predicates, then, following grammar conventions, `subchain` could be renamed as `infix`. But then I have no solution for the double use of `prefix` and `suffix`."},{"author":"chdoc","date":"2021-09-10T15:03:29Z","comment":">  If we keep `prefix` and `suffix` for the names of the predicates, then, following grammar conventions, `subchain` could be renamed as `infix`. \r\n\r\nI won't deny that this idea had already crossed my mind. And, after reading about the grammatical term, I'm actually starting to like it better than `subchain`. :thinking: "},{"author":"chdoc","date":"2021-09-12T18:06:20Z","comment":"I made a pass over the proofs, trying to find some synergies by reordering the lemmas. I hope you're fine with me committing directly to the branch of this PR (another reason why it's preferable to use something other than `master` for the source). I think there are more simplifications to be found. \r\n\r\nI removed `subchain_prefixP`, since the RHS of the disjunction subsumes the LHS. \r\n\r\nI still think that some lemmas can be removed, because they are merely compositions (by transitivity) of other lemmas, even though they are not necessarily proved that way currently. Maybe you can make another pass with this in mind. \r\n\r\n"},{"author":"mgbedmar","date":"2021-09-13T15:03:54Z","comment":"We've been looking at the code. The changes you introduced are nice. Now, to be honest we don't have a clear idea of what the criterion is to decide what lemmas should be kept and which should be removed. The ones that have proofs that are merely compositions of two lemmas are `prefix_subchain` and `suffix_subchain`, but they also exist for `subseq`, so it doesn't feel quite right to remove them. Maybe you can give more concrete directives? Or just remove what you see fit, it's totally okay for you to make changes on the repo."},{"author":"CohenCyril","date":"2021-09-14T09:32:00Z","comment":"> , although I do not know how to change the \"from\" branch for an existing PR in GitHub.\r\n\r\nThe author of the PR might be able to do it using the \"edit\" button next to the title of the PR."},{"author":"chdoc","date":"2021-09-14T10:46:48Z","comment":"On my own PRs, I can only change the target (base) branch but not the source branch. "},{"author":"CohenCyril","date":"2021-10-18T10:51:11Z","comment":"I have several rephrasings to suggest. I will post in the next few days."},{"author":"gares","date":"2021-12-17T12:54:49Z","comment":"> I have several rephrasings to suggest. I will post in the next few days.\r\n\r\nDid you forge to submit the review @CohenCyril ?"},{"author":"chdoc","date":"2022-01-05T16:30:16Z","comment":"@CohenCyril Ping!?"},{"author":"CohenCyril","date":"2022-01-10T10:23:33Z","comment":"@chdoc wrote:\r\n> @CohenCyril Ping!?\r\n\r\n@gares wrote:\r\n> Did you forge to submit the review @CohenCyril ?\r\n\r\nI did a big refactoring in f852b67. It needs some polishing, double-checking and CHANGELOG update.\r\n@ed-hermoreyes @mgbedmar if you are up for it please proceed, otherwise I will do it on my own time, at some point."},{"author":"chdoc","date":"2022-01-10T15:42:12Z","comment":"Thanks for getting back to this @CohenCyril . For now I will wait for the authors to comment or for you to make a cleanup pass. "},{"author":"CohenCyril","date":"2022-03-18T09:17:21Z","comment":"@mgbedmar @ed-hermoreyes any update?"},{"author":"mgbedmar","date":"2022-03-29T09:11:40Z","comment":"We have updated the CHANGELOG and made sure everything was on place. For us this is done, let us know if more changes are needed."},{"author":"proux01","date":"2022-06-08T07:40:41Z","comment":"@chdoc what's the status of this?"},{"author":"proux01","date":"2022-06-15T08:33:28Z","comment":"Will merge next week if no further comments."},{"author":"pi8027","date":"2022-06-15T08:34:52Z","comment":"Shouldn't this PR close #621?"},{"author":"proux01","date":"2022-06-24T15:48:53Z","comment":"Sorry, I messed up with this master branch and can no longer push anything on the original [ed-hermoreyes:master](https://github.com/ed-hermoreyes/math-comp) branch, hence reopen the PR. I'm reopening as https://github.com/math-comp/math-comp/pull/902"},{"author":"proux01","date":"2022-06-25T09:43:31Z","comment":"Merged as #902 , sorry again for the mess."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"hivert","number":777,"state":"closed","open_date":"2021-08-26T20:48:54Z","update_date":"2021-10-25T08:52:35Z","discussion":[{"author":"affeldt-aist","date":"2021-08-27T02:41:04Z","comment":"+1\r\n\r\nWe have been using a variant of this lemma (with a useless generalization) in infotheo so that would help.\r\n\r\nIt can also be proved as follows:\r\n```\r\nLemma tval_tcastE T m n (eq_mn : m = n) (t : m.-tuple T) :\r\n  tcast eq_mn t = t :> seq T.\r\nProof. by subst n; rewrite tcast_id. Qed.\r\n```\r\nNot very ssreflectish..."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"hivert","number":776,"state":"closed","open_date":"2021-08-16T16:52:53Z","update_date":"2021-08-23T05:45:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"thery","number":775,"state":"closed","open_date":"2021-08-13T21:38:32Z","update_date":"2021-10-25T08:52:45Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"ybertot","number":772,"state":"closed","open_date":"2021-07-26T13:54:22Z","update_date":"2021-10-07T19:07:14Z","discussion":[{"author":"CohenCyril","date":"2021-07-27T09:07:10Z","comment":"Thanks for the PR! Additionally could you try to spot a few places in the current code of mathcomp where it would be beneficial to use these multirules and try them out?"},{"author":"ybertot","date":"2021-07-27T10:46:45Z","comment":"Following up on an oral conversation, we should also add more instances of `linearE` in files where more rules can be added."},{"author":"siraben","date":"2021-07-27T14:59:41Z","comment":"Looks good! I think this would be useful in helping shape the goal into some normal form when dealing with linear functions."}],"tags":[],"pull_requests":[]},{"author":"eupp","number":771,"state":"closed","open_date":"2021-07-23T15:56:50Z","update_date":"2021-10-13T11:43:30Z","discussion":[{"author":"eupp","date":"2021-08-02T09:28:17Z","comment":"@CohenCyril thank you for the thoughtful review. \r\n\r\nI've added `card_bseq` lemma. The proof of this lemma utilizes injectivity of `bseq_tagged_tuple` and `tagged_tuple_bseq`. \r\nThe proof of infectivity for `tagged_tuple_bseq` is a bit clumsy because of dependent pairs' trickery and might be a subject to simplification. \r\n\r\nRegarding the usefulness of `bseq_of_seq`. I took it from `infotheo`, so it is better to ask @affeldt-aist whether we should keep it. \r\nNevertheless, I've added lemma `size_bseq_of_seq : size (bseq_of_seq n s) <= size s.`\r\n\r\nI've rechecked other lemmas for `n.-tuple T`. It looks like these lemmas are mostly about `thead`, `tnth`, etc. \r\nThese definitions do not have equivalents for `n.-bseq T`, because bounded sequences have weaker guarantees on the length of sequences, in particular, they do not guarantee non-emptiness.\r\n\r\nI've also updated the docs and changelog. \r\n"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"gares","number":770,"state":"closed","open_date":"2021-07-21T15:06:28Z","update_date":"2021-10-25T08:53:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":769,"state":"closed","open_date":"2021-07-07T09:25:37Z","update_date":"2021-07-07T15:01:49Z","discussion":[{"author":"gares","date":"2021-07-07T10:41:39Z","comment":"I wonder of you can add a link to https://github.com/math-comp/mathcomp-history-before-github"},{"author":"CohenCyril","date":"2021-07-07T10:45:07Z","comment":"> I wonder of you can add a link to https://github.com/math-comp/mathcomp-history-before-github\r\n\r\nWhy not, but how do you want to introduce it?"}],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."}],"pull_requests":[]},{"author":"CohenCyril","number":768,"state":"closed","open_date":"2021-07-07T09:23:06Z","update_date":"2021-07-07T10:44:26Z","discussion":[],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."}],"pull_requests":[]},{"author":"proux01","number":767,"state":"closed","open_date":"2021-07-07T08:00:47Z","update_date":"2021-12-07T08:48:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":766,"state":"closed","open_date":"2021-07-07T07:23:17Z","update_date":"2021-10-10T10:19:52Z","discussion":[{"author":"proux01","date":"2021-07-08T18:06:23Z","comment":"@CohenCyril CoqEAL should be fixed"},{"author":"CohenCyril","date":"2021-08-03T11:22:44Z","comment":"@pi8027 if you have some time to review this?"},{"author":"pi8027","date":"2021-08-04T12:51:35Z","comment":"Yes, I will do that by the end of this week."},{"author":"CohenCyril","date":"2021-10-01T11:55:28Z","comment":"@vbgl / @maximedenes / @zimmi48 please help, I'm completely clueless about this CI failure...\r\nTo reproduce:\r\n```bash\r\ncd $(mktemp -d)\r\ngit clone https://github.com/math-comp/multinomials -b nix-toolbox && cd multinomials\r\nnix-build\r\n```\r\nNote that `note nix-shell --run \"./configure && make\"` works :confused: "},{"author":"vbgl","date":"2021-10-01T12:08:05Z","comment":"The multinomials package is broken: the new `configure` script (recently added by Erik) refers to `/usr/bin/env` that is not available in the CI environment.\r\n\r\nBelow is a possible patch. (You may also set `dontConfigure = true;` to skip the failing configuration phase.)\r\n\r\n~~~\r\ndiff --git a/.nix/coq-overlays/multinomials/default.nix b/.nix/coq-overlays/multinomials/default.nix\r\nindex 1c62b70..64b4945 100644\r\n--- a/.nix/coq-overlays/multinomials/default.nix\r\n+++ b/.nix/coq-overlays/multinomials/default.nix\r\n@@ -33,6 +33,10 @@ with lib; mkCoqDerivation {\r\n \r\n   useDune2ifVersion = v: versions.isGe \"1.5.3\" v || v == \"dev\";\r\n \r\n+  preConfigure = ''\r\n+    patchShebangs configure\r\n+  '';\r\n+\r\n   propagatedBuildInputs =\r\n     [ mathcomp.ssreflect mathcomp.algebra mathcomp-finmap mathcomp-bigenough ];\r\n \r\n~~~"}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"SkySkimmer","number":765,"state":"closed","open_date":"2021-07-05T10:01:10Z","update_date":"2021-08-03T12:42:52Z","discussion":[],"tags":[{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"SkySkimmer","number":764,"state":"closed","open_date":"2021-07-05T10:00:45Z","update_date":"2021-07-09T15:36:24Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"hivert","number":763,"state":"closed","open_date":"2021-07-05T08:41:11Z","update_date":"2021-08-17T07:47:14Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"hivert","number":761,"state":"closed","open_date":"2021-07-03T22:38:13Z","update_date":"2021-10-25T08:53:36Z","discussion":[{"author":"chdoc","date":"2021-07-04T08:19:53Z","comment":"If I am not mistaken, the restriction to commutative monoids is a conscious decision with upcoming changes that have (so far) not been made. See [this comment](https://github.com/math-comp/math-comp/blob/7d95be787eaa018f297a413bd36eeca0f08d37b3/mathcomp/ssreflect/bigop.v#L555-L564) for an explanation. "},{"author":"hivert","date":"2021-07-04T08:47:26Z","comment":"> If I am not mistaken, the restriction to commutative monoids is a conscious decision with upcoming changes that have (so far) not been made. See [this comment](https://github.com/math-comp/math-comp/blob/7d95be787eaa018f297a413bd36eeca0f08d37b3/mathcomp/ssreflect/bigop.v#L555-L564) for an explanation.\r\n\r\nArgll ! Thanks for the pointer, I'm pretty sure I already asked and completely forgot about it. Sorry !"}],"tags":[{"tag":"kind: wontfix","description":"Issue that might never be attended."}],"pull_requests":[]},{"author":"ejgallego","number":759,"state":"closed","open_date":"2021-06-30T14:03:44Z","update_date":"2021-07-01T16:48:51Z","discussion":[{"author":"ejgallego","date":"2021-07-01T09:30:59Z","comment":"Thanks for the comments, good catch about the monoid identity, indeed it should be this way."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"chdoc","number":757,"state":"closed","open_date":"2021-06-21T16:41:55Z","update_date":"2021-10-21T22:35:09Z","discussion":[{"author":"chdoc","date":"2021-10-18T09:58:14Z","comment":"So, should I PR `andPP` and `orPP` for Coq, so that they become part of 8.15, creating a `(* v8.15 addtions *)` section in the mathcomp version of ssrbool? "},{"author":"CohenCyril","date":"2021-10-19T14:06:33Z","comment":"I think `implyPP` should also be added though..."},{"author":"chdoc","date":"2021-10-20T08:20:11Z","comment":"I can take care of this this afternoon. "},{"author":"chdoc","date":"2021-10-20T11:37:42Z","comment":"> I think `implyPP` should also be added though...\r\n\r\nI also added `negPP` and put everything into a section to match the style of `ssrbool.v` in Coq. If there are no more comments, I will open the PR on the Coq side. "},{"author":"CohenCyril","date":"2021-10-21T15:22:46Z","comment":"Actually it would be nice if `negP` could be combined using a `'neg_` notation (same as  `'forall_` and `'exist_`)."},{"author":"clayrat","date":"2021-10-21T22:26:27Z","comment":"This PR is breaking https://github.com/imdea-software/fcsl-pcm. The reason seems to be that `T2` in the new version of `eq_in_map` is constrained to `eqType` whereas it was an arbitrary `Type` before. The new proof doesn't seem to actually require this constraint, so I assume it can be removed without consequences?"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":756,"state":"closed","open_date":"2021-06-17T15:55:13Z","update_date":"2021-10-25T10:49:22Z","discussion":[{"author":"proux01","date":"2021-10-21T15:41:51Z","comment":"@CohenCyril thanks for the careful review, everything should be taken into account now."},{"author":"proux01","date":"2021-10-22T07:41:20Z","comment":"Oupss, indeed, done."},{"author":"CohenCyril","date":"2021-10-25T08:54:33Z","comment":"@chdoc this is also a reasonnable addition to 1.13.0"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":755,"state":"closed","open_date":"2021-06-16T09:27:17Z","update_date":"2021-08-31T15:06:39Z","discussion":[{"author":"proux01","date":"2021-07-05T08:16:57Z","comment":"@chdoc all your comments are taken into account here."},{"author":"proux01","date":"2021-08-25T13:46:54Z","comment":"Indeed `map2 f s s'` is redundant with `map (fun xy => f xy.1 xy.2) (zip s s')` and could be easily removed from CoqEAL (c.f. CoqEAL/CoqEAL#44 ), so let's close this. Thanks @chdoc and @CohenCyril for your comments!"}],"tags":[],"pull_requests":[]},{"author":"hivert","number":754,"state":"closed","open_date":"2021-06-13T10:33:27Z","update_date":"2021-06-15T07:21:21Z","discussion":[{"author":"pi8027","date":"2021-06-13T11:17:28Z","comment":"Also, this is a missing piece to support product rings in [algebra-tactics](https://github.com/math-comp/algebra-tactics). Thanks!"},{"author":"hivert","date":"2021-06-13T11:39:21Z","comment":"> They should be re-exported from here.\r\n\r\nCorrect me if I'm wrong, but all those canonicals have to be re-exported because they were defined in a the Theory module. The new ones are defined outside...\r\n\r\nI'm investigating but the failure seems to be due to a non localized rewrite...\r\n\r\n"},{"author":"hivert","date":"2021-06-13T11:41:36Z","comment":"> Also, this is a missing piece to support product rings in [algebra-tactics](https://github.com/math-comp/algebra-tactics). Thanks!\r\n\r\nI don't understand what you mean here (and know very little about tactic programming)..."},{"author":"pi8027","date":"2021-06-13T12:22:03Z","comment":"> > They should be re-exported from here.\r\n> \r\n> Correct me if I'm wrong, but all those canonicals have to be re-exported because they were defined in a the Theory module. The new ones are defined outside...\r\n\r\nSorry, my bad. Indeed, instances for products are defined after the `GRing` module.\r\n\r\nCould you investigate the breakage in separable.v? I guess you have to add some explicit patterns to specify subterms to rewrite.\r\n\r\n> > Also, this is a missing piece to support product rings in [algebra-tactics](https://github.com/math-comp/algebra-tactics). Thanks!\r\n> \r\n> I don't understand what you mean here (and know very little about tactic programming)...\r\n\r\nNevermind. I just wanted to show my support for this PR. But here are some details in the case you are interested in it: the algebra-tactics library provides ring and field tactics (as in Coq) for MathComp with a work-in-progress feature to support morphisms, e.g., it can prove `f ((x + y) ^+ 2) = f x ^+ 2 + f y ^+ 2 + f x * f y *+ 2` automatically, where `f` is a ring morphism to a `comRingType`. By relying on this feature and the canonical instances added by this PR, it should also be able to prove equations on product rings involving `fst`, `snd`, and `pair`."},{"author":"hivert","date":"2021-06-13T12:33:24Z","comment":"> Could you investigate the breakage in separable.v? I guess you have to add some explicit patterns to specify subterms to rewrite.\r\n\r\nI'm doing it right now, but I must confess it seems more complicated than that I expected that replacing the failing\r\n\r\n    rewrite -!rmorphM\r\n\r\nby\r\n\r\n      rewrite -[X in X + _]rmorphM -[X in _ + X]rmorphM.\r\n\r\nshould work but it doesn't. What is even strange it that \r\n\r\n       set mor := [rmorphism of map_poly at_t].\r\n       rewrite -!(rmorphM mor).\r\n\r\nwork as expected ! However I expect that you won't accept such a crude fix.\r\nThe canonical is here and for some reason Coq fail to find the correct matching. I'm trying some more things, but It may be beyond my skills...\r\n\r\n\r\n> Nevermind. I just wanted to show my support for this PR. \r\n\r\nThanks !\r\n\r\n> But here are some details in the case you are interested in it: the algebra-tactics library provides ring and field tactics (as in Coq) for MathComp with a work-in-progress feature to support morphisms, e.g., it can prove `f ((x * y) ^+ 2) = f x ^+ 2 + f y ^+ 2 + f x * f y *+ 2` automatically, where `f` is a ring morphism to a `comRingType`. By relying on this feature and the canonical instances added by this PR, it should also be able to prove equations on product rings involving `fst`, `snd`, and `pair`.\r\n\r\nThat is indeed very cool ! "},{"author":"hivert","date":"2021-06-13T13:32:31Z","comment":"I just pushed a reasonable fix. However I've no idea why it used to work and it is failing now. I don't know enough about Coq's pattern matching/canonical machinery to investigate further. If someone is able to understand and give me an explanation, please do !"},{"author":"hivert","date":"2021-06-13T15:04:37Z","comment":"The failure seems to be unrelated... I don't know how to relaunch the test to be sure."},{"author":"hivert","date":"2021-06-15T06:33:38Z","comment":"Good ! May I take the occasion to kindly ask the mathcomp project if they could put my name somewhere as an external contributor ? I've now probably more than 15 commit in the project, so that I think I deserve it ;-)"},{"author":"pi8027","date":"2021-06-15T07:21:21Z","comment":"We have a list of contributors for each release in its announcement e-mail. But, I personally think it makes a lot of sense to increase its visibility. I added it to the [topics](https://github.com/math-comp/math-comp/wiki/TopicsNextMeeting) for the next MathComp meeting (10 AM CEST tomorrow)."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"hivert","number":753,"state":"closed","open_date":"2021-06-12T08:21:13Z","update_date":"2021-07-03T22:45:27Z","discussion":[],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."},{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"affeldt-aist","number":752,"state":"closed","open_date":"2021-06-09T07:50:43Z","update_date":"2021-08-03T11:29:54Z","discussion":[{"author":"affeldt-aist","date":"2021-06-14T02:40:39Z","comment":"\r\n> ```coq\r\n> Lemma big_rev_mkord m n P F :\r\n>  \\big[op/idx]_(m <= k < n | P k) F k = \\big[op/idx]_(k < n - m | P (n - k.+1)) F (n - k.+1).\r\n> Proof.\r\n> rewrite big_nat_rev (big_addn 0)/= big_mkord.\r\n> by apply: eq_bigr => i; rewrite -addSn addnC subnDr.\r\n> Qed.\r\n> ```\r\n> \r\n> I'm not yet sure about the name though...\r\n\r\nBy the look at `big_geq_mkord`, this looks like a reasonable name to me.\r\n"},{"author":"CohenCyril","date":"2021-07-07T14:24:21Z","comment":"> By the look at `big_geq_mkord`, this looks like a reasonable name to me.\r\n\r\n@chdoc I remember seeing a comment about the name not being so reasonable to you, but I cannot find it anymore, did I imagine it?"},{"author":"chdoc","date":"2021-07-07T14:33:45Z","comment":"I do not recall commenting on this name. :man_shrugging: "},{"author":"CohenCyril","date":"2021-07-07T14:36:10Z","comment":"> I do not recall commenting on this name.\r\n\r\nMaybe it was in a dream..."},{"author":"CohenCyril","date":"2021-07-07T14:39:55Z","comment":"Ah I see, since I was not there, I imagined the worst:\r\nhttps://github.com/math-comp/math-comp/wiki/Minutes-June-16-2021\r\n> - PR 752:\r\n>   - Cyril: to come back to it but this should be light\r\n>   - Christian: questioning the naming of big_rev_mkord\r\n\r\nWould you mind telling me your questioning and what answers you had?"},{"author":"chdoc","date":"2021-07-07T15:23:05Z","comment":"From what I remember, I had simply missed that the order is in fact reversed, because my expectation was to find a lemma where the range has been shifted down (so that it begins with 0) without reversing the bigop. :man_shrugging: "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":751,"state":"closed","open_date":"2021-06-08T11:17:11Z","update_date":"2021-10-25T08:57:03Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"thery","number":750,"state":"closed","open_date":"2021-06-07T11:02:28Z","update_date":"2023-01-13T13:51:11Z","discussion":[{"author":"CohenCyril","date":"2021-06-08T12:53:07Z","comment":"@thery can you rebase?"}],"tags":[{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"thery","number":749,"state":"closed","open_date":"2021-06-07T10:26:09Z","update_date":"2023-01-13T13:56:02Z","discussion":[{"author":"CohenCyril","date":"2021-06-08T14:35:26Z","comment":"I just merged https://github.com/math-comp/odd-order/pull/30 I will restart the associated part of the CI"},{"author":"thery","date":"2021-06-09T12:27:41Z","comment":"@CohenCyril  70 successful checks!! impressive not very green though"},{"author":"CohenCyril","date":"2021-06-09T15:52:13Z","comment":"> @CohenCyril 70 successful checks!! impressive not very green though\r\n\r\nIt's greener than gitlab because it will never recompile a package that has been already compiled."}],"tags":[{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"thery","number":748,"state":"closed","open_date":"2021-06-07T09:50:31Z","update_date":"2021-10-25T08:57:16Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"affeldt-aist","number":747,"state":"closed","open_date":"2021-05-28T07:26:35Z","update_date":"2021-05-28T10:06:51Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"pi8027","number":745,"state":"open","open_date":"2021-05-19T04:23:57Z","update_date":"2023-01-11T09:15:04Z","discussion":[{"author":"pi8027","date":"2021-05-19T17:22:50Z","comment":"The unification trace obtained by UniCoq (see https://github.com/math-comp/math-comp/issues/701#issuecomment-843729180 for the first attempt with `Set Debug \"unification\"`):\r\nhttps://github.com/math-comp/math-comp/blob/7db7a5fbce42ff387a5750f9fbde5436a9aab1cc/mathcomp/algebra/matrix.v#L342-L343\r\n```\r\neqType =<= Type (App-FO) ERR\r\n?T =<= nat (Meta-Inst) OK\r\n_Set =<= Type (Reduce-Same) OK\r\n?T =<= nat (Meta-Inst) OK\r\n_Set =<= Type (Reduce-Same) OK\r\n(Equality.mixin_of ?sT) =<= (Equality.mixin_of 'M_(m, n)) (App-FO) ERR\r\n_Equality.mixin_of =<= Equality.mixin_of (Rigid-Same) OK\r\n_(sub_sort ?sT) =?= 'M_(m, n) (CS) ERR\r\n__(Equality.sort ?T) =?= \\{ffun 'I_?n * 'I_?n0 -> ?T0\\} (CS) ERR\r\n___?t =?= (prod_finType (ordinal_finType ?n) (ordinal_finType ?n0)) (Meta-Inst) OK\r\n____finType =<= finType (Reduce-Same) OK\r\n___(fun=> ?T0) =?= (fun x : prod_finType (ordinal_finType ?n) (ordinal_finType ?n0) => Equality.sort (?t x : eqType)) (App-FO) ERR\r\n____(fun=> ?T0) =?= (fun x : prod_finType (ordinal_finType ?n) (ordinal_finType ?n0) => Equality.sort (?t x : eqType)) (Lam-Same) ERR\r\n_____(Finite.sort (prod_finType (ordinal_finType ?n) (ordinal_finType ?n0))) =?= ('I_?n * 'I_?n0)\\%type (CS) OK\r\n______(Finite.sort ?t0) =?= 'I_?n (CS) OK\r\n_______?n1 =?= ?n (Meta-Inst) OK\r\n________nat =<= nat (Reduce-Same) OK\r\n_______?t0 =?= (ordinal_finType ?n) (Meta-Inst) OK\r\n________finType =<= finType (Reduce-Same) OK\r\n______(Finite.sort ?t0) =?= 'I_?n0 (CS) OK\r\n_______?n1 =?= ?n0 (Meta-Inst) OK\r\n________nat =<= nat (Reduce-Same) OK\r\n_______?t0 =?= (ordinal_finType ?n0) (Meta-Inst) OK\r\n________finType =<= finType (Reduce-Same) OK\r\n______(prod_finType (ordinal_finType ?n) (ordinal_finType ?n0)) =?= (prod_finType (ordinal_finType ?n) (ordinal_finType ?n0)) (App-FO) OK\r\n_______prod_finType =?= prod_finType (Rigid-Same) OK\r\n_______(ordinal_finType ?n) =?= (ordinal_finType ?n) (App-FO) OK\r\n________ordinal_finType =?= ordinal_finType (Rigid-Same) OK\r\n________?n =?= ?n (Meta-Same-Same) OK\r\n_______(ordinal_finType ?n0) =?= (ordinal_finType ?n0) (App-FO) OK\r\n________ordinal_finType =?= ordinal_finType (Rigid-Same) OK\r\n________?n0 =?= ?n0 (Meta-Same-Same) OK\r\n_____?T0 =?= (Equality.sort (?t x : eqType)) (Meta-Inst) ERR\r\n_____?T0 =?= (Equality.sort (?t x : eqType)) (Meta-Reduce) ERR\r\n______?T0 =?= (let (sort, _) := ?t x in sort) (Meta-Inst) ERR\r\n__(Equality.sort ?T) =?= \\{ffun 'I_?n * 'I_?n0 -> ?T0\\} (Cons-DeltaL) ERR\r\n_(sub_sort ?sT) =?= 'M_(m, n) (App-FO) ERR\r\n_(sub_sort ?sT) =?= 'M_(m, n) (Cons-DeltaL) ERR\r\nThe command has indeed failed with message:\r\nIn environment\r\nR : eqType\r\nm : nat\r\nn : nat\r\nThe term \"SubEqMixin ?sT\" has type \"Equality.mixin_of ?sT\" while it is expected to have type \"Equality.mixin_of 'M_(m, n)\".\r\n```\r\nI don't get why `?T0` does not get instantiated with `R`."}],"tags":[{"tag":"kind: help wanted","description":"PR for which help is requested."}],"pull_requests":[]},{"author":"CohenCyril","number":744,"state":"closed","open_date":"2021-05-17T10:47:33Z","update_date":"2021-05-18T03:54:17Z","discussion":[{"author":"CohenCyril","date":"2021-05-17T10:52:57Z","comment":"CC @pi8027 "}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":743,"state":"closed","open_date":"2021-05-13T23:00:17Z","update_date":"2021-05-26T12:26:00Z","discussion":[],"tags":[{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"pi8027","number":741,"state":"closed","open_date":"2021-05-11T15:44:15Z","update_date":"2021-10-25T08:58:03Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"pi8027","number":740,"state":"closed","open_date":"2021-05-11T01:18:26Z","update_date":"2021-06-18T05:49:53Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":739,"state":"closed","open_date":"2021-05-07T07:58:45Z","update_date":"2021-10-25T08:58:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":738,"state":"closed","open_date":"2021-05-05T07:52:11Z","update_date":"2021-10-25T08:59:25Z","discussion":[{"author":"CohenCyril","date":"2021-05-05T09:57:21Z","comment":"@proux01 thanks for your contribution, it's likely all of this will be integrated. I will come back to your PR later to help with the tidying. Just some general remarks about mathcomp style meanwhile:\r\n- do not use `{}` to focus, use the [mathcomp conventions](https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md#indentation-in-proof-scripts) about indentation and terminators instead.\r\n- do not name hypothesis `Hsomething`, as expained [here](https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md#naming-of-variables), give meaningful names based on their scope (the longer the scope the more meaningful the name)."},{"author":"CohenCyril","date":"2021-05-11T16:25:03Z","comment":"@proux01 I committed what we did together (and filled the proofs for the nth sorted lemmas)"},{"author":"pi8027","date":"2021-05-13T15:52:07Z","comment":"I will try to review order.v and path.v as well, but I think it will take some time."},{"author":"proux01","date":"2021-05-13T16:06:11Z","comment":"@pi8027 please wait a bit, I'm still tidying them."},{"author":"proux01","date":"2021-05-14T07:43:06Z","comment":"@pi8027 order.v and path.v should be cleaner now."},{"author":"CohenCyril","date":"2021-05-18T10:06:17Z","comment":"@proux01 you need to rebase as well "},{"author":"CohenCyril","date":"2021-05-19T13:14:39Z","comment":"OK, let's merge as soon as CI passes \\o/"},{"author":"proux01","date":"2021-05-19T16:44:07Z","comment":"Thanks all for your patience! I learned a lot."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":737,"state":"closed","open_date":"2021-04-26T05:17:13Z","update_date":"2021-04-28T07:17:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ybertot","number":736,"state":"closed","open_date":"2021-04-07T17:30:11Z","update_date":"2021-10-25T08:59:51Z","discussion":[{"author":"CohenCyril","date":"2021-04-07T18:08:04Z","comment":"Please push directly in branch `hierarchy-builder` no PR needed on mathcomp in the context of the porting week."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":735,"state":"closed","open_date":"2021-04-01T09:47:50Z","update_date":"2021-10-25T08:59:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ybertot","number":734,"state":"closed","open_date":"2021-03-31T15:30:03Z","update_date":"2021-10-25T09:00:14Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"gares","number":733,"state":"open","open_date":"2021-03-31T09:46:50Z","update_date":"2023-04-11T13:35:05Z","discussion":[{"author":"CohenCyril","date":"2021-03-31T13:12:16Z","comment":"- [x] foo.v finished\r\n  - [ ] :construction: foo.v taken\r\n  - [ ] :white_check_mark: foo.v compiles but needs more work\r\n"},{"author":"gares","date":"2021-06-10T09:42:32Z","comment":"Nix CI is broken:\r\n\r\n> error: value is a list while a set was expected, at /home/runner/work/math-comp/math-comp/default.nix:13:1"},{"author":"gares","date":"2021-07-22T17:30:46Z","comment":"@CohenCyril is this gitlab CI pipeline a new thing?"},{"author":"gares","date":"2021-11-15T11:44:14Z","comment":"@CohenCyril @pi8027 can you check if the recent locking in rat helps this example: https://github.com/math-comp/math-comp/pull/733/commits/5e84326f5a6759b1d227f066088988e39e8538ff\r\nI suspect it just gets slowed in this branch, but that it is already problematic."},{"author":"proux01","date":"2022-04-21T13:48:12Z","comment":"Here is a squashed and rebase branch: https://github.com/math-comp/math-comp/tree/hierarchy-builder-rebased\r\n(but I cannot force push here)"},{"author":"proux01","date":"2022-05-04T13:36:09Z","comment":"Rebase force pushed, the previous state (before squashing everything) is saved in https://github.com/math-comp/math-comp/tree/hierarchy-builder-before-rebase_2022_05_04"},{"author":"proux01","date":"2022-05-06T11:40:33Z","comment":"So, here is the state of the CI:\r\n\r\n* I dropped planB\r\n* coq-dev is borken on Nix CI (I understand that https://github.com/NixOS/nixpkgs/pull/161977 should fix it)\r\n* unfortunately coq-dev is also broken on Docker CI since the lower bound for OCaml was bumped without coordinating with the maintainer of Docker images (https://coq.zulipchat.com/#narrow/stream/237656-Coq-devs-.26-plugin-devs/topic/.3E.3D.204.2E09.20and.20opam/near/280985366) hopefully, this will be fixed soon\r\n* reverse dependencies not ported yet\r\n  * analysis\r\n  * deriving\r\n  * extructures\r\n* other reverse dependencies are working out of the box or with an overlay (c.f. list of overlays at bottom of top PR description):\r\n  * abel\r\n  * addition-chains\r\n  * autosubst\r\n  * bigenough\r\n  * category-theory\r\n  * coqeal\r\n  * coq-bits\r\n  * coquelicot\r\n  * finmap\r\n  * fourcolor\r\n  * gaia\r\n  * graph-theory\r\n  * interval\r\n  * mczify\r\n  * multinomials\r\n  * odd-order\r\n  * QuickChick\r\n  * real-closed\r\n  * reglang\r\n  * verdi"},{"author":"ejgallego","date":"2022-05-19T09:04:20Z","comment":"Out of curiosity, how are compilation times affected?"},{"author":"proux01","date":"2022-05-19T09:13:05Z","comment":"Last figure I remember was nearly a factor two but @gares would know better."},{"author":"proux01","date":"2022-05-24T09:37:42Z","comment":"So, here is the state of the CI:\r\n* Coq master seems fine thanks to @CohenCyril 's branch (https://github.com/NixOS/nixpkgs/pull/173112)\r\n* only remaining broken reverse dependencies are:\r\n  * analysis\r\n  * deriving which uses universe polymorphism (c.f. https://github.com/proux01/deriving/blob/48f613b98bfe8d130431c00bac4fefa1e54576be/theories/base.v#L980-L982 ) not yet implemented in coq-elpi\r\n  * extructures which requires deriving"},{"author":"ejgallego","date":"2022-06-14T15:11:07Z","comment":"> Last figure I remember was nearly a factor two but @gares would know better.\r\n\r\nA 2x increase in compilation time seems a bit surprising (and maybe worrying) . In particular, the amount of time spent in HB code should be just a small fraction of the compilation time.\r\n\r\nIsn't that suspicious? What is the main bottleneck here.\r\n\r\nI think that Coq really needs something like HB, but if users are gonna get a 2x slowdown from it I'm not sure it is ready until it is more optimized."},{"author":"gares","date":"2022-06-14T20:47:22Z","comment":"The difference is that structures are more regular than before, and less manual tweaks. The time spent in HB commands is negligible, or close to so. The code generated is more likely to trigger bad behavior in conversion heuristics. But so far every time I did investigate a little change here or there would change the cost of a few lines of 100x, so I'm not scared, it is just about spending time on it.\r\nAnd for now the (little) energy is in cover the whole ssrnum (not far, but not there yet)."},{"author":"proux01","date":"2022-07-22T11:09:26Z","comment":"@CohenCyril you can now delete yout [hb-ssrnum](https://github.com/CohenCyril/math-comp/tree/hb-ssrnum) branch as it is integrated here\r\n\r\nAs a consequence, we had to drop support for Coq 8.13 and 8.14, this now only works with:\r\n* Coq 8.15 with HB `master` branch\r\n* Coq 8.16+rc1 with HB `master` branch\r\n* Coq master with HB `coq-master` branch"},{"author":"gares","date":"2022-08-27T20:43:38Z","comment":"can we give planB another try? (I'm too bad at nix to bring it back)"},{"author":"proux01","date":"2022-08-29T07:37:05Z","comment":"> can we give planB another try? (I'm too bad at nix to bring it back)\r\n\r\n@CohenCyril do you remember how to set this up in Nix CI? (I probably won't have time to look at it anytime soon)"},{"author":"proux01","date":"2022-10-14T11:19:01Z","comment":"@CohenCyril no hurry, but I may need your Nix expertise with the CI here:\r\n\r\n* `reglang` fails in the CI but I'm not able to reproduce the failure locally, when I type the CI command\r\n```\r\nNIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle \"coq-8.15\" --argstr job \"reglang\"\r\n```\r\non my machine the thing compiles flawlessly\r\n\r\n* `mathcomp-classical` and `mathcomp-analysis`: this works on Analysis CI (https://github.com/math-comp/analysis/pull/698) but not here, in that case I'm able to reproduce locally and it seems Nix is downloading the source of mathcomp (and not mathcomp-analysis) for mathcomp-classical and I don't understand why (I tried adding an overlay for `mathcomp-classical` but without success)"},{"author":"proux01","date":"2022-11-04T16:28:02Z","comment":"@CohenCyril timings to compile OddOrder (`make -j1` on my laptop):\r\n* without semirings: 2074.59user 18.59system 35:21.32elapsed\r\n* with semirings: 2209.54user 13.78system 37:09.35elapsed\r\n\r\nSo, that's about 6% slower.\r\n\r\n(Note: I had to add a dozen pattern selections: https://github.com/proux01/odd-order/commit/bcca2577f882cb85830dd2816f6d80a21cac558c )"},{"author":"gares","date":"2022-11-30T10:03:34Z","comment":"@pi8027 we did review some FIXME in order.v and left some comments, please look at them and decide what to do."},{"author":"CohenCyril","date":"2022-12-01T12:13:24Z","comment":"> @pi8027 we did review some FIXME in order.v and left some comments, please look at them and decide what to do.\r\n\r\nAll of these are problems that should be fixed in HB, not mathcomp."},{"author":"proux01","date":"2023-04-07T16:48:54Z","comment":"I did a last rebase to squash a few things and check that all commits do compile. From now on, we only cherry-pick from master (or push directly here for HB changes)."}],"tags":[{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."}],"pull_requests":[]},{"author":"affeldt-aist","number":732,"state":"closed","open_date":"2021-03-29T08:16:43Z","update_date":"2021-10-25T09:00:42Z","discussion":[{"author":"pi8027","date":"2021-05-26T11:41:32Z","comment":"To make sure these lemmas are not misnamed, let's summon @CohenCyril anyway."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"chdoc","number":731,"state":"closed","open_date":"2021-03-26T13:04:56Z","update_date":"2021-08-30T14:06:05Z","discussion":[{"author":"chdoc","date":"2021-07-07T10:27:10Z","comment":"I just pushed some more simplifications (mainly the proof of `partition_pigenhole`); made use of the brand new `/[! _ ]` feature. I also chose to deprecate `bigcup_disjoint`, because it is merely one direction of the new `bigcup_disjointP` view lemma. Are such deprecations added to the CHANGELOG? If so, where? "},{"author":"chdoc","date":"2021-08-25T13:50:04Z","comment":"Fixed, and rebased/squashed. "},{"author":"chdoc","date":"2021-08-29T19:19:25Z","comment":"@affeldt-aist , @CohenCyril, is there something left to be done, or can someone press the merge button? "}],"tags":[],"pull_requests":[]},{"author":"gares","number":730,"state":"closed","open_date":"2021-03-25T17:56:44Z","update_date":"2021-10-25T09:00:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":729,"state":"closed","open_date":"2021-03-23T12:35:33Z","update_date":"2021-10-25T09:00:55Z","discussion":[],"tags":[{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."}],"pull_requests":[]},{"author":"jouvelot","number":728,"state":"closed","open_date":"2021-03-23T11:57:17Z","update_date":"2021-03-24T00:51:35Z","discussion":[],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."},{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":727,"state":"closed","open_date":"2021-03-19T12:36:45Z","update_date":"2021-05-20T17:09:42Z","discussion":[{"author":"pi8027","date":"2021-03-25T11:18:10Z","comment":"I will port some more lemmas from [coq-stablesort](https://github.com/pi8027/stablesort) which is another library dedicated to stability proofs of sort and highly optimized sorting algorithms. (It will take some more time I guess.)"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"},{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"CohenCyril","number":726,"state":"closed","open_date":"2021-03-19T02:02:58Z","update_date":"2021-10-25T09:01:06Z","discussion":[],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"CohenCyril","number":725,"state":"closed","open_date":"2021-03-17T02:42:02Z","update_date":"2021-10-25T09:01:14Z","discussion":[],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"gares","number":724,"state":"closed","open_date":"2021-03-16T14:07:49Z","update_date":"2021-10-25T09:10:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":723,"state":"closed","open_date":"2021-03-15T01:11:39Z","update_date":"2021-10-25T09:10:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":722,"state":"closed","open_date":"2021-03-14T21:28:11Z","update_date":"2021-10-25T09:10:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":721,"state":"closed","open_date":"2021-03-14T21:12:38Z","update_date":"2021-10-25T09:09:57Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"jouvelot","number":720,"state":"closed","open_date":"2021-03-14T14:15:32Z","update_date":"2021-03-14T21:05:43Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":719,"state":"closed","open_date":"2021-03-14T13:55:38Z","update_date":"2021-10-25T09:09:46Z","discussion":[],"tags":[{"tag":"kind: nix","description":""}],"pull_requests":[]},{"author":"CohenCyril","number":717,"state":"closed","open_date":"2021-03-12T18:17:00Z","update_date":"2021-10-25T09:09:38Z","discussion":[],"tags":[{"tag":"kind: nix","description":""}],"pull_requests":[]},{"author":"CohenCyril","number":716,"state":"closed","open_date":"2021-03-12T17:27:10Z","update_date":"2021-10-25T09:09:28Z","discussion":[],"tags":[{"tag":"kind: nix","description":""}],"pull_requests":[]},{"author":"CohenCyril","number":715,"state":"closed","open_date":"2021-03-12T15:47:36Z","update_date":"2021-10-25T09:09:20Z","discussion":[],"tags":[{"tag":"kind: nix","description":""}],"pull_requests":[]},{"author":"CohenCyril","number":714,"state":"closed","open_date":"2021-03-12T11:46:41Z","update_date":"2021-10-25T09:09:11Z","discussion":[],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"},{"tag":"kind: nix","description":""}],"pull_requests":[]},{"author":"CohenCyril","number":713,"state":"closed","open_date":"2021-03-12T09:20:04Z","update_date":"2021-03-30T18:46:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":712,"state":"closed","open_date":"2021-03-09T13:33:07Z","update_date":"2021-06-11T17:21:04Z","discussion":[{"author":"CohenCyril","date":"2021-03-09T13:34:16Z","comment":"@thery almost there... would you mind reviewing this one too?"},{"author":"CohenCyril","date":"2021-03-11T14:31:46Z","comment":"@thery\r\n> Maybe the stuff about triangularisation could be postpone to a latter commit where there are more stuff about it.\r\n> Also I have been disturbed by the convention you use in your definitions.\r\n> It uses a large spectrum `A` `B` `C` `W` `P` ...., dometimes it is upper case sometimes it is lower case. Maybe you should add your conventions in the header of `mxred` to help the reader guessing the type of the arguments of a function\r\n\r\nThanks for your review, I will come back to you when I have the time to do some bound variable renaming, but maybe also renaming the similar `similar` to `mxsimilar_by` ... and defining `mxsimilar A B := exists P, mxsimilar_by P A B`..."},{"author":"thery","date":"2021-06-09T13:04:26Z","comment":"@CohenCyril is it ready to be reviewed again?"},{"author":"CohenCyril","date":"2021-06-09T15:11:21Z","comment":"> @CohenCyril is it ready to be reviewed again?\r\n\r\nyes it is"},{"author":"CohenCyril","date":"2021-06-09T15:12:07Z","comment":"Ah I need one rebase I guess but the code won't change"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":711,"state":"closed","open_date":"2021-03-07T11:59:13Z","update_date":"2021-10-25T09:08:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":710,"state":"closed","open_date":"2021-03-07T01:44:27Z","update_date":"2021-03-07T02:59:49Z","discussion":[{"author":"thery","date":"2021-03-07T02:01:25Z","comment":"just a little remark  ```order.v```  is the largest file of mathcomp...."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":709,"state":"open","open_date":"2021-03-05T14:13:04Z","update_date":"2023-01-11T10:03:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":708,"state":"closed","open_date":"2021-03-04T21:58:41Z","update_date":"2021-03-11T23:07:05Z","discussion":[{"author":"CohenCyril","date":"2021-03-05T12:05:38Z","comment":"@gares I think you followed this on the Coq side. Is that the right solution for now?"},{"author":"gares","date":"2021-03-05T13:23:23Z","comment":"I'm afraid so, be we should put this problem in some milestone and signal we can't yet put the attribute because of backward compat"}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."},{"tag":"kind: warning","description":"Issue or PR about a warning raised by Coq"}],"pull_requests":[]},{"author":"CohenCyril","number":707,"state":"closed","open_date":"2021-03-04T21:45:56Z","update_date":"2021-03-18T00:26:51Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."},{"tag":"kind: warning","description":"Issue or PR about a warning raised by Coq"}],"pull_requests":[]},{"author":"CohenCyril","number":706,"state":"closed","open_date":"2021-03-04T20:51:34Z","update_date":"2022-06-08T07:46:34Z","discussion":[{"author":"CohenCyril","date":"2021-03-04T21:01:59Z","comment":"@erikmd the CI does not show-up anymore on mathcomp PR, do you understand why?"},{"author":"erikmd","date":"2021-03-04T21:22:26Z","comment":"Hi @CohenCyril, I first took a look at https://gitlab.com/math-comp/math-comp/-/pipelines\r\nand many pipelines were pending\r\n(which seemed to be related to these prod issues:\r\n- https://gitlab.com/gitlab-com/gl-infra/production/-/issues/3857\r\n- https://gitlab.com/gitlab-com/gl-infra/production/-/issues/3858\r\n\r\n) but, these pipelines just seemed to be started in one go (a couple of seconds ago) whereas the status is still not propagated to the GitHub Check tabs.\r\nI don't have much more clues… but maybe let's wait for the completion of these pipelines, and if there's not GitHub-Checks-feedback at that point, ask Théo to take a look at the coqbot logs?"},{"author":"erikmd","date":"2021-03-05T10:20:48Z","comment":"Hi @Zimmi48,\r\nCyril noticed that since yesterday Thursday, the GitLab pipeline status is not propagated back to GitHub commit nor Checks tab…\r\nwould you have some clue / logs information or so regarding the source of this issue? FTR, the GitLab pipeline that has been successfully triggered by this PR is https://gitlab.com/math-comp/math-comp/-/pipelines/265650597"},{"author":"Zimmi48","date":"2021-03-05T17:42:51Z","comment":"Hi @erikmd, thanks for pinging me. I don't have access to the GitLab webhook logs of the math-comp repository, but I'll look into the server logs to see if I detect anything wrong."},{"author":"Zimmi48","date":"2021-03-05T18:18:07Z","comment":"Unfortunately, my logs do not give me any relevant information and math-comp is the only project that I am aware of that is suffering from this issue right now. It also looks like this is not the first time that this has happened: already a couple of PRs suffered from the same symptoms on Jan 27-28.\r\n\r\nThat being said, math-comp is also the last project that I am aware of that is relying on the legacy installation (see https://github.com/coq/bot/#how-to-use-the-coqbot-instance). So that could be one explanation of why this is behaving differently.\r\n\r\nI'll try to improve my logging as soon as I get the chance. If the problem persists, you may want to give a shot at migrating to the GitHub App to see if this is related. Please let me know if the problem continues or disappears and if you know any other project suffering from it."},{"author":"erikmd","date":"2021-03-05T18:32:43Z","comment":"Hi @Zimmi48, thanks for looking into this!\r\n\r\n> math-comp is also the last project that I am aware of that is relying on the legacy installation \r\n\r\nah OK… I believed we had changed the setup to use coqbot already; so I guess what you suggest (migrating `math-comp/math-comp` to `coqbot`) would be the best fix.\r\n\r\n@CohenCyril could you do that migration?\r\n\r\nIINM, it amounts to:\r\n* Follow the instructions of https://github.com/coq/bot/#as-a-github-app \r\n* Goto https://github.com/math-comp/math-comp/settings/hooks and remove the old webhook to avoid potential duplicates…"},{"author":"CohenCyril","date":"2021-03-05T18:43:16Z","comment":"@erikmd \r\n> @CohenCyril could you do that migration?\r\n\r\nI think I did it at some point when you asked me to... I can't check in details right now, but coqbot is indeed not in the webhooks."},{"author":"Zimmi48","date":"2021-03-05T21:41:20Z","comment":"Ah OK. Sorry for the confusion, I hadn't realized it had already been the case. Then, this is something else. I'll try to investigate more."},{"author":"erikmd","date":"2021-03-07T20:34:51Z","comment":"Hi @Zimmi48, following your comments I just double-checked the page\r\nhttps://gitlab.com/math-comp/math-comp/hooks\r\nand I believe this configuration was incomplete w.r.t. what is currently specified in https://github.com/coq/bot/#as-a-github-app\r\n\r\nFTR, I saw:\r\n![2021-03-07_21-29-37_Screenshot_webhook](https://user-images.githubusercontent.com/10367254/110253761-5bf71300-7f8c-11eb-84cf-ebebf8001edb.png)\r\n\r\nI modified this, and I now see:\r\n![2021-03-07_21-38-27_Screenshot_hooks_latest](https://user-images.githubusercontent.com/10367254/110254003-7d0c3380-7f8d-11eb-848e-f8f10b1616f0.png)\r\n\r\n@CohenCyril I hope the issue you raised is now solved; so let me know if the fix is confirmed (or not…)"},{"author":"Zimmi48","date":"2021-03-08T10:35:42Z","comment":"In principle, the legacy endpoint `/pipeline` is still supported exactly as `/gitlab` but what is more surprising is that it seems Job Events and Pipeline Events were not sent if we can believe the difference of descriptions between the two. I wonder what happened.\r\n\r\nAnyway, this seems to have worked in fixing the status report to GitHub."},{"author":"CohenCyril","date":"2021-03-08T11:35:50Z","comment":"Indeed! The issue is fixed. Thank you so much @erikmd and @Zimmi48 !!"},{"author":"proux01","date":"2022-06-08T07:46:32Z","comment":"This has been fixed by https://github.com/math-comp/math-comp/pull/856"}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."},{"tag":"kind: warning","description":"Issue or PR about a warning raised by Coq"},{"tag":"drops: coq 8.11","description":""},{"tag":"drops: coq 8.12","description":""}],"pull_requests":[]},{"author":"CohenCyril","number":703,"state":"closed","open_date":"2021-03-04T19:43:10Z","update_date":"2021-10-25T09:08:20Z","discussion":[{"author":"CohenCyril","date":"2021-03-07T01:45:30Z","comment":"@thery  I did the split -> #710 "},{"author":"CohenCyril","date":"2021-03-07T01:46:27Z","comment":"I also dramatically enhanced the block matrix theory... It will be here soon."},{"author":"CohenCyril","date":"2021-03-07T12:01:09Z","comment":"@thery I ended up adding a couple lemmas, feels rather complete now."},{"author":"CohenCyril","date":"2021-03-07T13:16:22Z","comment":"@thery FYI I added a commit renaming `tagnat.val` to `tagnat.sig`: it causes less undesirable name-clashes, especially if one wants to import `tagnat`, as in [matrix.v](https://github.com/math-comp/math-comp/pull/703/files#diff-f457cb0bf11677ea475ce7d07aa9d8ce79d060ef642432808d92ceb55d6a3fc5R3743)."},{"author":"thery","date":"2021-03-07T14:30:36Z","comment":"@CohenCyril looks good. Will I have a closer look on monday."},{"author":"CohenCyril","date":"2021-03-08T19:53:11Z","comment":"@thery I addressed all your comments."},{"author":"CohenCyril","date":"2021-03-09T10:44:03Z","comment":"@thery Thanks!"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":700,"state":"closed","open_date":"2021-02-26T18:44:24Z","update_date":"2021-02-26T20:06:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":699,"state":"closed","open_date":"2021-02-17T18:17:26Z","update_date":"2021-10-25T09:08:08Z","discussion":[],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"pi8027","number":697,"state":"open","open_date":"2021-01-22T06:43:50Z","update_date":"2023-02-24T23:25:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":696,"state":"closed","open_date":"2021-01-18T19:25:39Z","update_date":"2021-01-25T10:42:09Z","discussion":[{"author":"ybertot","date":"2021-01-19T08:27:31Z","comment":"There is clever use of  view sequencing in the one-liner proof.  This could deserve some elaborated explanation in some educational material, but this file is not the right place for such a documentation.  So, as far as I am concerned, **this is good to merge**.\r\n"},{"author":"CohenCyril","date":"2021-01-19T13:48:54Z","comment":"> There is clever use of view sequencing in the one-liner proof. This could deserve some elaborated explanation in some educational material, but this file is not the right place for such a documentation. So, as far as I am concerned, **this is good to merge**.\r\n\r\nFTR the explanation is here https://stackoverflow.com/questions/61556710#answer-65779039"},{"author":"CohenCyril","date":"2021-01-22T17:45:21Z","comment":"@ybertot is something blocking?"},{"author":"ybertot","date":"2021-01-25T10:42:09Z","comment":"Thanks @CohenCyril, @anton-trunov "}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"affeldt-aist","number":695,"state":"closed","open_date":"2021-01-18T16:37:34Z","update_date":"2021-10-25T09:07:22Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"affeldt-aist","number":693,"state":"closed","open_date":"2021-01-14T04:53:42Z","update_date":"2021-01-18T15:50:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":692,"state":"closed","open_date":"2021-01-08T16:40:24Z","update_date":"2021-10-25T09:06:51Z","discussion":[],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"proux01","number":691,"state":"closed","open_date":"2021-01-08T14:04:45Z","update_date":"2021-01-26T09:54:14Z","discussion":[{"author":"CohenCyril","date":"2021-01-08T14:13:33Z","comment":"@proux01 I believe it would make sense to perform this addition/refactoring on top of #682 instead. CC @pi8027 "},{"author":"proux01","date":"2021-01-08T14:45:52Z","comment":"Indeed, I missed that PR, that would make perfect sense, let me try that."},{"author":"proux01","date":"2021-01-08T20:51:01Z","comment":"@pi8027 fell free to cherry pick my commits in #682 and close this one if it's more convenient for you."},{"author":"pi8027","date":"2021-01-26T03:09:13Z","comment":"@proux01 I decided to include your commits in #682 except for \"Add floorq and ceilq\". My plan is to modify the Archimedean mixin to have the floor (and ceil) function inside it (but we cannot do that for the next release for compatibility reasons), and then we will be able to declare the `archiNumDomainType` instance of `rat` whose floor and ceil functions are convertible with your `floorq` and `ceilq`. If you agree with this plan, I will close this PR. Thanks for your contribution!"},{"author":"proux01","date":"2021-01-26T09:53:02Z","comment":"> @proux01 I decided to include your commits in #682 except for \"Add floorq and ceilq\". My plan is to modify the Archimedean mixin to have the floor (and ceil) function inside it (but we cannot do that for the next release for compatibility reasons), and then we will be able to declare the `archiNumDomainType` instance of `rat` whose floor and ceil functions are convertible with your `floorq` and `ceilq`. If you agree with this plan, I will close this PR. Thanks for your contribution!\r\n\r\nGreat, PR closed."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":690,"state":"closed","open_date":"2021-01-04T04:58:03Z","update_date":"2021-01-05T10:46:06Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":688,"state":"closed","open_date":"2020-12-20T13:20:46Z","update_date":"2021-10-25T09:04:25Z","discussion":[{"author":"CohenCyril","date":"2021-01-08T20:04:36Z","comment":"Hi @anton-trunov, will you soon update fcsl-pcm and lemma-overloading or their opam metadata to make them compile with Coq 8.13 or should we temporarily remove the coq 8.13  from mathcomp CI?"},{"author":"pi8027","date":"2021-01-13T09:55:41Z","comment":"I commented out `ci-fcsl-pcm-8.13` and `ci-lemma-overloading-8.13` so that we can merge this."},{"author":"anton-trunov","date":"2021-01-13T10:25:16Z","comment":"Hi @pi8027! I just updated `lemma-overloading`'s meta-data to Coq 8.13: https://github.com/coq-community/lemma-overloading/pull/65 so it should work now. Sorry for the delay."},{"author":"anton-trunov","date":"2021-01-13T10:27:21Z","comment":"Pinging @clayrat for `fcsl-pcm`..."},{"author":"clayrat","date":"2021-01-14T23:59:13Z","comment":"Updated `fcsl-pcm`: https://github.com/imdea-software/fcsl-pcm/commit/4343e51d2f365ca75fd4a57cadf166b7850bdb36"},{"author":"pi8027","date":"2021-01-15T00:14:47Z","comment":"@anton-trunov @clayrat Thank you!"},{"author":"pi8027","date":"2021-01-15T12:03:08Z","comment":"Shall we merge this? @CohenCyril"}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"gares","number":687,"state":"closed","open_date":"2020-12-15T16:07:57Z","update_date":"2020-12-15T16:28:05Z","discussion":[{"author":"CohenCyril","date":"2020-12-15T16:28:04Z","comment":"in master ? :laughing: "}],"tags":[{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."}],"pull_requests":[]},{"author":"pi8027","number":686,"state":"closed","open_date":"2020-12-15T13:43:32Z","update_date":"2021-01-22T14:30:53Z","discussion":[{"author":"pi8027","date":"2020-12-16T10:10:29Z","comment":"There was a discussion about this PR. The conclusion is that we do not have to drop support for Coq 8.10, but deprecation warnings will not arise in Coq 8.10 if we switch the deprecation mechanism as this PR does."},{"author":"pi8027","date":"2020-12-16T13:29:24Z","comment":"```\r\n# File \"./ssreflect.v\", line 82, characters 0-226:\r\n# Error: This command does not support this attribute: deprecated.\r\n```\r\nSo we have to drop support for Coq 8.10 to merge this PR. @CohenCyril "},{"author":"CohenCyril","date":"2020-12-16T18:11:34Z","comment":"> So we have to drop support for Coq 8.10 to merge this PR. @CohenCyril\r\n\r\nHence I have wrong memories about this..."},{"author":"pi8027","date":"2021-01-15T15:40:12Z","comment":"Since we have reached a consensus in the last meeting and now we have Coq 8.13 in CI, this PR is ready for review."},{"author":"CohenCyril","date":"2021-01-18T15:58:23Z","comment":"Great work, thanks!\r\n"}],"tags":[{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"},{"tag":"drops: coq 8.10","description":"Addressing this issue or merging this PR requires to drop support for coq 8.10"}],"pull_requests":[]},{"author":"pi8027","number":685,"state":"closed","open_date":"2020-12-11T11:33:02Z","update_date":"2020-12-17T02:07:02Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":683,"state":"closed","open_date":"2020-12-05T13:45:37Z","update_date":"2021-10-25T09:10:52Z","discussion":[{"author":"pi8027","date":"2020-12-16T10:09:29Z","comment":"Can someone confirm and merge this PR, or is it fine to self-merge in this case?"}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"pi8027","number":682,"state":"open","open_date":"2020-12-03T22:49:58Z","update_date":"2021-05-31T09:26:08Z","discussion":[{"author":"pi8027","date":"2020-12-04T12:37:51Z","comment":"> Currently, `classfun.v` is broken since it uses `Cint`, but importing `ssrint` adds the infix `^` notation which collides with that of `group_scope`.\r\n\r\nIt seems that group notations and ring notations are mixed almost everywhere in `classfun.v`. So there is no other solution than adding `%g` whenever required. If a scope declaration for arguments of coercion to `Funclass` works, this situation probably becomes better. But this does not work in the current implementation of Coq (see https://github.com/coq/coq/issues/5527#issuecomment-568242128):\r\n```coq\r\nArguments fun_of_cfun [gT] [B] _ _%g.\r\n```"},{"author":"pi8027","date":"2020-12-04T15:43:50Z","comment":"I guess `Qint` and `Qnat` should be deprecated and superseded by `Cint` and `Cnat` respectively. Right? @CohenCyril "},{"author":"CohenCyril","date":"2020-12-04T16:33:07Z","comment":"> I guess `Qint` and `Qnat` should be deprecated and superseded by `Cint` and `Cnat` respectively. Right? @CohenCyril\r\n\r\nYes! And `Cint` and `Cnat` should both be renamed `Num.int` and `Num.nat`."},{"author":"CohenCyril","date":"2020-12-04T16:34:59Z","comment":"> > I guess `Qint` and `Qnat` should be deprecated and superseded by `Cint` and `Cnat` respectively. Right? @CohenCyril\r\n> \r\n> Yes! And `Cint` and `Cnat` should both be renamed `Num.int` and `Num.nat`.\r\n\r\nAnd they should be in the mixin, so as to make the computations for `ssrint` and `rat` faster!"},{"author":"pi8027","date":"2020-12-04T17:38:15Z","comment":"> > Yes! And `Cint` and `Cnat` should both be renamed `Num.int` and `Num.nat`.\r\n> \r\n> And they should be in the mixin, so as to make the computations for `ssrint` and `rat` faster!\r\n\r\nMake sense. Allowing the use of `Cint` without importing `ssrint` would also be nice to get a better fix for `classfun` and `inertia`. But reimplementing `Cint` theory in the absence of `ssrint` would require some more work."},{"author":"pi8027","date":"2020-12-04T23:08:12Z","comment":"@CohenCyril Could you confirm this is what you mean?\r\n```coq\r\n(* Module ArchiNumDomain. *)\r\nRecord mixin_of (R : numDomainType) := Mixin {\r\n  trunc : R -> nat;\r\n  is_nat : pred R;\r\n  is_int : pred R;\r\n  _ : forall x, 0 <= x -> (trunc x)%:R <= x < (trunc x).+1%:R;\r\n  _ : forall x, is_nat x = ((trunc x)%:R == x);\r\n  _ : forall x, is_int x = is_nat x || is_nat (- x);\r\n}.\r\n```"},{"author":"CohenCyril","date":"2020-12-05T00:11:16Z","comment":"> @CohenCyril Could you confirm this is what you mean?\r\n> \r\n> ```coq\r\n> (* Module ArchiNumDomain. *)\r\n> Record mixin_of (R : numDomainType) := Mixin {\r\n>   trunc : R -> nat;\r\n>   is_nat : pred R;\r\n>   is_int : pred R;\r\n>   _ : forall x, 0 <= x -> (trunc x)%:R <= x < (trunc x).+1%:R;\r\n>   _ : forall x, is_nat x = ((trunc x)%:R == x);\r\n>   _ : forall x, is_int x = is_nat x || is_nat (- x);\r\n> }.\r\n> ```\r\n\r\nYes roughly, except the truncation has no reason to be only for non negative numbers, I would prefer the function in the mixin to be more general, knowing that there could be a factory providing opaque `trunc`, `is_nat`, and `is_int` from a `nat` upper bound.\r\n\r\nI had planned to wait for HB to make this kind of changes... I am a bit surprised you are willing to go through so much work while we intend to trivialize all of this...\r\n"},{"author":"pi8027","date":"2020-12-05T01:00:17Z","comment":"> Yes roughly, except the truncation has no reason to be only for non negative numbers, I would prefer the function in the mixin to be more general, knowing that there could be a factory providing opaque `trunc`, `is_nat`, and `is_int` from a `nat` upper bound.\r\n\r\nThe problem is that we have to relocate the basic part of `ssrint` (`int` and `intmul` at least?) to `ssrnum` (or `ssralg`?) in order to generalize the truncation to the negative case. Since the above mixin has been proved equivalent to `Num.archimedean_axiom`, we can provide such a factory.\r\n\r\n> I had planned to wait for HB to make this kind of changes... I am a bit surprised you are willing to go through so much work while we intend to trivialize all of this...\r\n\r\nReworking an existing branch is easier to do now rather than later. Also, IMO actual difficulties appear in places other than the definitions of structures, as in the breakage of `classfun.v`."},{"author":"pi8027","date":"2020-12-10T10:44:39Z","comment":"`Cnat`, `Cint`, `truncC`, and `floorC` have been renamed to `Num.nat`, `Num.int`, `Num.trunc`, and `floorR` respectively. I guess we have to relocate `ssrint.int` (or make the dependency from `ssrint` to `ssrnum` opposite) to rename `floorR` to `Num.floor` anyway."},{"author":"pi8027","date":"2020-12-11T05:36:50Z","comment":"Almost done except that `floorR` is still not a part of the Archimedean mixin and defined in `ssrint`. I'm not sure what to do about this point."},{"author":"pi8027","date":"2020-12-12T12:03:33Z","comment":"Here is a summary of possible solutions:\r\n1. Keeping the dependency relation of libraries as is, placing `truncR`, `Rnat`, and `Rint` in `ssrnum`, and placing `floorR` in `ssrint` (the current situation):\r\n   - Pros: This solution works.\r\n   - Cons: `floorR` cannot be located in `ssrnum.Num` (we can declare another `Num` module in `ssrint` to work around this, but it seems troublesome). The `floorR` functions of `int` and `rat` cannot be as straightforward/efficient as we expect. The `archiNumDomainType` theory has to be separated into two parts (one in `ssrnum` and another in `ssrint`).\r\n2. Keeping the dependency relation of libraries as is, but relocating `int` and `intmul` from `ssrint` to `ssrnum` or before to include `floorR` and related lemmas in `ssrnum`:\r\n   I think this solution does not work, because statements and proofs of some lemmas about `floorR` require, e.g., canonical `ringType` and `orderType` instances of `int`. So we have to relocate a significant part of `ssrint` anyway.\r\n3. Changing the dependency relation of libraries to make `ssrnum` requiring `ssrint`:\r\n   This solution may work. But the canonical `numDomainType` of `int` has to be defined in `ssrnum` or later, and then some lemmas about `int` cannot be stated in `ssrint`, e.g., `abszE` which requires the norm function.\r\n4. Adding another library that requires both `ssrnum` and `ssrint`, and relocating the Archimedean structures and related lemmas to it:\r\n   I think this is the best solution among these, but requires at least two steps of transition."},{"author":"CohenCyril","date":"2020-12-12T12:23:32Z","comment":"Yet another solution: dispatching the contents of ssrint between ssralg and ssrnum."},{"author":"pi8027","date":"2020-12-12T12:30:36Z","comment":"@CohenCyril That is what I meant in solution 3 IIUC."},{"author":"CohenCyril","date":"2020-12-12T12:33:10Z","comment":"> @CohenCyril That is what I meant in solution 3 IIUC.\r\n\r\nIndeed. It was not clear to me whether you were suggesting to remove the file ssrint, which is what I suggest here."},{"author":"CohenCyril","date":"2020-12-12T12:35:43Z","comment":"Anyway, I like solution 4... it makes a lot of sense to me. How would you envision the transitiom though? Having files with new names required by files with old names?"},{"author":"pi8027","date":"2020-12-12T14:16:15Z","comment":"> Indeed. It was not clear to me whether you were suggesting to remove the file ssrint, which is what I suggest here.\r\n\r\nI did not suggest removing `ssrint.v`. So they are actually different. But, anyway...\r\n\r\n> Anyway, I like solution 4... it makes a lot of sense to me. How would you envision the transitiom though? Having files with new names required by files with old names?\r\n\r\nIn the first step, we try to relocate definitions and lemmas about the Archimedean structures as much as possible, to a new file, say `archimedean.v`. Since we have to deprecate `Znat` and related lemmas in `ssrint`, we cannot relocate some of them. So we declare them as `Local` ones in `ssrnum` or `ssrint`, provide deprecation aliases if needed, and also provide non-deprecated aliases in `archimedean.v`. I think this trick is also applicable to definitions of structures. In the second step, we remove deprecation aliases and relocate everything that depends on `archiNumDomainType` to `archimedean.v`."},{"author":"CohenCyril","date":"2020-12-15T16:32:07Z","comment":"The way I saw it was that `ssrnum.v` would be \"fake file\" `Require Export`ing `ssrnum_without_archimedean` (find a proper name e.g. just `num.v`) as well as `archimedean` so that there is no overlay to make for developments that used to depend in `ssrnum` but use archimedean structures."},{"author":"pi8027","date":"2020-12-16T01:44:05Z","comment":"Currently, ssrnum.v defines both numeric and Archimedean structures, but some notations (e.g., archiNumDomainType) are deprecated there and re-exported from archimedean.v without deprecation. I also had to re-export the canonical declarations of closure properties of Num.nat and Num.int from rat.v and algC.v to fix the breakage (Cf the last commit).\nOverlays are required to make hints working and they just insert a few simplifications. I will try to get rid of them if needed."},{"author":"CohenCyril","date":"2021-01-08T17:40:16Z","comment":"I have opened #692 to control the impact of this PR."},{"author":"proux01","date":"2021-01-08T19:33:29Z","comment":"@pi8027 the doc of floor reads\r\n\r\n> Num.floor x == for x \\in Num.real [...] else 0%Z\r\n\r\nis there a lemma stating the else part?"},{"author":"pi8027","date":"2021-01-09T05:24:27Z","comment":"@proux01 That is missing and the `floor` function has to be redefined to prove it. I will do it before the next MathComp call. Thanks!"},{"author":"pi8027","date":"2021-01-26T07:14:02Z","comment":"MathComp Analysis does not compile anymore with this change:\r\n```coq\r\n- File \"./theories/reals.v\", line 486, characters 8-39:\r\n- Error:\r\n- In environment\r\n- R : realType\r\n- x : R\r\n- The term \"- x\" has type \"GRing.Zmodule.sort R\"\r\n- while it is expected to have type \"Num.ArchiNumDomain.sort ?R\".\r\n```\r\nhttps://github.com/math-comp/analysis/blob/339401ed1e340428554fe1e9cd35e3ea5386bd85/theories/reals.v#L479-L486\r\n\r\nIt seems that there is no fix without adding an inheritance from `archiNumDomainType` to `realType`."},{"author":"CohenCyril","date":"2021-01-26T16:02:04Z","comment":"> It seems that there is no fix without adding an inheritance from `archiNumDomainType` to `realType`.\r\n\r\nIndeed, would there be a problem to do so?\r\n\r\nI believe this PR has no chance to be backward compatible unless we make the old and new codes coexist.\r\nI.e. we would keep the old mixin and the old structure as such (keeping `ssrnum.v` intact) and add distinct incompatible mixins and new structures in `archimedean.v` that would be opt-in for now. In this setting there would be a hug difference between legacy code and new code. But maybe that would be ok.\r\n\r\nWe should discuss this in a mathcomp meeting."},{"author":"pi8027","date":"2021-01-27T09:54:38Z","comment":"@CohenCyril I think trying to be backward compatible is a bit painful in this case. Anyway, I agree that we should discuss this in a meeting. Meanwhile, I would like to revise the theory part of archimedean.v. (I have some questions and comments since I did not write everything by myself.)"},{"author":"pi8027","date":"2021-02-10T17:06:33Z","comment":"BTW, why CI disappeared from the checklist here?"},{"author":"CohenCyril","date":"2021-02-12T19:05:20Z","comment":"> BTW, why CI disappeared from the checklist here?\r\n\r\nno idea, that's very strange"},{"author":"CohenCyril","date":"2021-03-08T12:34:09Z","comment":"@pi8027 \r\n> BTW, why CI disappeared from the checklist here?\r\n\r\nThis is now fixed (cf https://github.com/math-comp/math-comp/pull/706#issuecomment-792347741). In principle, if you rebased this PR for example, github would show the status of the CI. Although I believe with the ongoing stuff on HB it would not make sense to rebase it. Just so you know\r\n"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"drops: coq 8.10","description":"Addressing this issue or merging this PR requires to drop support for coq 8.10"}],"pull_requests":[]},{"author":"pi8027","number":680,"state":"closed","open_date":"2020-12-02T17:04:32Z","update_date":"2021-01-13T09:52:24Z","discussion":[{"author":"pi8027","date":"2020-12-02T17:16:49Z","comment":"Shouldn't `(sub|eq)_(path|cycle|sorted)_in` rather be renamed to `(sub|eq)_in_(path|cycle|sorted)`? (Sorry, my bad.)"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":679,"state":"closed","open_date":"2020-11-26T11:04:56Z","update_date":"2020-12-04T09:29:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":678,"state":"closed","open_date":"2020-11-26T09:14:04Z","update_date":"2020-11-26T09:39:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":677,"state":"closed","open_date":"2020-11-26T01:00:36Z","update_date":"2020-11-26T08:48:56Z","discussion":[{"author":"pi8027","date":"2020-11-26T02:22:46Z","comment":"Shouldn't we check and uniformize the use of punctuation here?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":675,"state":"closed","open_date":"2020-11-25T11:39:59Z","update_date":"2020-11-25T13:33:13Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":674,"state":"closed","open_date":"2020-11-24T22:33:52Z","update_date":"2020-11-26T08:41:24Z","discussion":[{"author":"CohenCyril","date":"2020-11-24T22:36:28Z","comment":"@gares, how do I enable checking the output of the `Check` in files `mathcomp/test_suite/imset2_finset.v` and `mathcomp/test_suite/imset2_gproduct.v` vs `mathcomp/test_suite/imset2_finset.v.out` and `mathcomp/test_suite/imset2_gproduct.v.out`?"},{"author":"CohenCyril","date":"2020-11-25T10:02:20Z","comment":"@gares this looks like a regression in coq dev..."},{"author":"CohenCyril","date":"2020-11-25T10:10:46Z","comment":"@erikmd what is the difference between coq-dev and coq-latest?"},{"author":"gares","date":"2020-11-25T10:30:07Z","comment":"@erikmd it would be nice to have a job testing v8.13 (the branch).\r\nI did merge many notation related PRs, so regressions may have happened there."},{"author":"CohenCyril","date":"2020-11-25T11:33:42Z","comment":"@gares indeed! broken in 8.12 and fixed in dev!!! good news!!"},{"author":"CohenCyril","date":"2020-11-25T11:34:49Z","comment":"Should I make a special `coq.8.12` test file that is deliberatly broken, to make the CI pass? or should we keep it broken until it is solved on Coq side?"},{"author":"CohenCyril","date":"2020-11-25T11:45:38Z","comment":"Meanwhile, I will replace the output test here not to make use of `{pred T}`, since it was not the point here, open a PR to test `{pred T}` specifically. Is it possible to do so on coq side too?\r\n\r\nFor archiving purposes, the problem was the following difference of output.\r\n- `-` was expected and is the outcome in Coq 8.10, Coq 8.11 and Coq dev (at the time of this message),\r\n- the outcome in Coq 8.12 is `+`\r\n```diff\r\n imset2Sr\r\n-     : forall (aT aT2 rT : finType) (f2 : aT -> aT2 -> rT) \r\n-         (A B : {pred aT2}) (C : {pred aT}),\r\n+     : forall (aT aT2 rT : finType) (f2 : aT -> aT2 -> rT)\r\n+         (A B : predPredType aT2) (C : predPredType aT),\r\n        A \\subset B ->\r\n        [set f2 x y | x in C, y in A] \\subset [set f2 x y | x in C, y in B]\r\n```\r\n(cf [this CI build](https://gitlab.com/math-comp/math-comp/-/jobs/871480999))"},{"author":"CohenCyril","date":"2020-11-25T13:21:25Z","comment":"@gares ready to merge if you want"},{"author":"CohenCyril","date":"2020-11-25T18:19:17Z","comment":"@gares this is the last missing piece for releasing tomorrow."}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."},{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"CohenCyril","number":672,"state":"closed","open_date":"2020-11-23T21:45:13Z","update_date":"2020-11-24T01:13:02Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":671,"state":"closed","open_date":"2020-11-23T06:46:11Z","update_date":"2020-11-25T02:24:21Z","discussion":[{"author":"pi8027","date":"2020-11-23T09:26:38Z","comment":"Should we do two-step renaming for this? But, it seems to be rather confusing. I can provide a fix for finmap in any case."},{"author":"CohenCyril","date":"2020-11-24T08:12:21Z","comment":"I don't know, I keep hesitating"},{"author":"CohenCyril","date":"2020-11-24T15:36:28Z","comment":"If there are backward compatible fixes for every library, I'm all in..."}],"tags":[{"tag":"kind: bug","description":"Issue which describe bugs"},{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":670,"state":"closed","open_date":"2020-11-21T04:22:10Z","update_date":"2020-11-25T02:24:20Z","discussion":[{"author":"pi8027","date":"2020-11-24T05:03:12Z","comment":"@chdoc @CohenCyril As written in the description of this PR, some deprecation notations for explicit application such as `@sorted_le_nth` do not let us write the first two implicit arguments `T` and `leT`. IIUC, this is a limitation of the deprecation mechanism of MathComp. I think we should rather turn them into notations without deprecation as in #640 for now. What do you think?"},{"author":"CohenCyril","date":"2020-11-24T08:08:09Z","comment":"> @chdoc @CohenCyril As written in the description of this PR, some deprecation notations for explicit application such as `@sorted_le_nth` do not let us write the first two implicit arguments `T` and `leT`. IIUC, this is a limitation of the deprecation mechanism of MathComp. I think we should rather turn them into notations without deprecation as in #640 for now. What do you think?\r\n\r\nHow about setting an intermediate notation e.g. `sorted_leq_nth_subdef` with no maximal implicit?"},{"author":"pi8027","date":"2020-11-24T08:42:05Z","comment":"@CohenCyril If we pass such `sorted_leq_nth_subdef` as the second argument of `deprecate`, the deprecation message says `use sorted_leq_nth_subdef instead`."},{"author":"pi8027","date":"2020-11-24T08:47:38Z","comment":"OK, I found a solution. This should be fine."}],"tags":[{"tag":"kind: bug","description":"Issue which describe bugs"},{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":669,"state":"closed","open_date":"2020-11-20T17:04:56Z","update_date":"2020-11-20T19:50:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":667,"state":"closed","open_date":"2020-11-20T11:12:33Z","update_date":"2020-11-23T13:58:53Z","discussion":[{"author":"gares","date":"2020-11-20T12:09:27Z","comment":"@erikmd I think you may want to review this PR ;-)"},{"author":"erikmd","date":"2020-11-22T18:47:05Z","comment":"Hi @gares and @CohenCyril ! yes, I'd be glad to have a look :)\r\n\r\nideally, when would you like to merge the PR? (I guess I'd need to review it before your next mathcomp-dev meeting on 2 Dec. ?)"},{"author":"CohenCyril","date":"2020-11-22T23:00:11Z","comment":"Hi @erikmd I don't think there is a strong need to review this PR, I guess it can be merged as such (or wait until after the release), and further script improvements can always come in later on. Moreover the release is likely to occur next week (so that we can attend the CUDW with no pressure)."},{"author":"erikmd","date":"2020-11-22T23:12:24Z","comment":"Hi @CohenCyril, sure! it can be merged as is indeed (and if I happen to have a look after the merge, I could just as well open a small additional PR!) anyway, that's great to be able to rely on `under` now :)"}],"tags":[],"pull_requests":[]},{"author":"ybertot","number":666,"state":"closed","open_date":"2020-11-20T10:29:40Z","update_date":"2020-11-26T13:24:20Z","discussion":[{"author":"CohenCyril","date":"2020-11-24T22:40:42Z","comment":"@ybertot did you submit this PR just to own the #666???\r\n... because the devil is in the details?"},{"author":"ybertot","date":"2020-11-26T12:31:40Z","comment":"Well spotted, but ... no\r\nI wish I had your talent to see funny things in daily life and make witty remarks about them."},{"author":"CohenCyril","date":"2020-11-26T13:24:19Z","comment":"Btw I just noticed the fix is wrong 😹😹😹 it should be `x`"}],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."},{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":665,"state":"closed","open_date":"2020-11-20T07:54:32Z","update_date":"2020-11-26T03:10:13Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"pi8027","number":664,"state":"closed","open_date":"2020-11-20T02:53:44Z","update_date":"2020-11-25T02:24:20Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."},{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"CohenCyril","number":663,"state":"closed","open_date":"2020-11-20T02:12:08Z","update_date":"2020-11-20T08:55:20Z","discussion":[],"tags":[{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"CohenCyril","number":661,"state":"closed","open_date":"2020-11-20T01:34:57Z","update_date":"2020-11-22T10:31:24Z","discussion":[{"author":"gares","date":"2020-11-20T13:38:18Z","comment":"Can you tell me why ! was not ok?"},{"author":"CohenCyril","date":"2020-11-20T13:52:05Z","comment":"@gares\r\n> Can you tell me why ! was not ok?\r\n\r\nAlmost all definitions (except for `eqseq`) which are involved in this tuning have at least one \"default\" case, where one argument does not need to be a constructor for a ground value to be output. e.g. in `take` if the list is `[::]`, then whatever the natural number, the output is `[::]`. The \"right\" criterion is that no match should be exposed by doing so.\r\n\r\nExcept for `mask` where there is an extra match on a boolean that we would like to expose. So I sacrificed expansion when the mask is `[::]` and not the list `s`, for the sake of still having a form of controlled expansion, which would still expose the match on the boolean.\r\n\r\nThis hints at the fact that both `!` and `nomatch` are too restrictive in different fashion. Somehow, we would like to say which `match` are allowed/forbidden instead. e.g. (wishful thinking) `Arguments mask _ !m !s : simpl nomatch`, *should* simplify iff it does not (directly) expose a match on `m` or `s`.\r\n\r\nMoreover, in the current state, `nomatch` will prevent expansion even if the appearance of the match has nothing to do with the unfolding of the constant itself. e.g.\r\n```coq\r\nDefinition mask_if mask b (x : T) m' s' :=  if b then x :: mask m' s' else mask m' s'\r\nFixpoint mask m s {struct m} :=\r\n  match m, s with\r\n  | b :: m', x :: s' => mask_if mask b x m' s'\r\n  | _, _ => [::]\r\n  end.\r\nArguments mask : simpl nomatch.\r\nArguments mask_if /.\r\n```\r\nwill still not simplify `mask (b :: m) (x :: s)` because doing one loop of the fixpoint and then expanding `mask_if` will result in a match :cry: :cry: :cry:"},{"author":"CohenCyril","date":"2020-11-20T19:51:43Z","comment":"@affeldt-aist the CI passed, I rebased once more, when it passes again, you can merge, unless @gares is opposed to this?"},{"author":"gares","date":"2020-11-22T08:13:15Z","comment":"I'm OK and aware that \"if\" is problematic with no match."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":660,"state":"open","open_date":"2020-11-20T00:51:26Z","update_date":"2023-01-11T09:16:19Z","discussion":[{"author":"CohenCyril","date":"2020-11-20T00:53:08Z","comment":"CC @gares note that `simpl never` does not have the same behavior as `nosimpl` when adding a definition on top of a `simpl never` one, we might go through the unfolding. (Hence the need to fix `pfactor` again in `prime.v`)"},{"author":"ybertot","date":"2020-11-20T11:28:19Z","comment":"I am workiing on a patch to fourcolor so that it is compatible with this change.  There are good chances that the patch will be backward compatible."},{"author":"CohenCyril","date":"2020-11-20T11:31:26Z","comment":"I will investigate `odd_order`"},{"author":"CohenCyril","date":"2020-11-20T11:38:48Z","comment":"@gares, the problem we encountered is the one I mentioned for e.g. `pfactor`, except it occurs for a local definition, (for which there is no way to control the unfolding via `Arguments`,  whereas `nosimpl` keeps working).\r\nThis seems to be an essential shortcoming of `simpl never`, which cannot cover all use cases of `nosimpl` ... :cry: "},{"author":"CohenCyril","date":"2020-11-20T11:47:22Z","comment":"@ybertot @gares, Unfortunately, I think the consequence of this exploration is that this PR cannot be merged because it introduces a regression in the behaviour of symbols that are no simplifiable... and that a bug report should be submitted on the Coq side (which I am going to do)."},{"author":"ybertot","date":"2020-11-20T12:00:44Z","comment":"I came to a similar conclusion."},{"author":"gares","date":"2020-11-20T12:13:11Z","comment":"> a bug report should be submitted on the Coq side (which I am going to do).\r\n\r\nplease do, since I can't exactly understand what the problem is from the comments here"},{"author":"ybertot","date":"2020-11-20T12:40:02Z","comment":"I have been trying to construct a minimal example, but I can't reproduce the problem in a few lines yet."},{"author":"ybertot","date":"2020-11-20T12:48:10Z","comment":"In the meantime shouldn't this PR be re-affected to milestone 1.13.0?"},{"author":"CohenCyril","date":"2020-11-20T12:52:39Z","comment":"> I have been trying to construct a minimal example, but I can't reproduce the problem in a few lines yet.\r\n\r\nI did it here https://github.com/coq/coq/issues/13428"},{"author":"CohenCyril","date":"2020-11-20T12:54:06Z","comment":"> In the meantime shouldn't this PR be re-affected to milestone 1.13.0?\r\n\r\nI am afraid way later than 1.13 since, assuming someone fixes this for Coq 8.13, we would have to wait until Coq 8.15 is out.\r\nBut we must test the feature ASAP this time :cry: "}],"tags":[{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"CohenCyril","number":659,"state":"closed","open_date":"2020-11-20T00:02:32Z","update_date":"2020-11-20T01:35:43Z","discussion":[],"tags":[{"tag":"kind: bug","description":"Issue which describe bugs"}],"pull_requests":[]},{"author":"CohenCyril","number":658,"state":"closed","open_date":"2020-11-19T19:07:13Z","update_date":"2020-11-20T03:41:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":656,"state":"closed","open_date":"2020-11-19T10:20:06Z","update_date":"2020-11-20T00:02:59Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":653,"state":"open","open_date":"2020-11-19T05:04:49Z","update_date":"2023-01-11T09:14:46Z","discussion":[{"author":"pi8027","date":"2020-12-26T21:01:22Z","comment":"> *The first obstacle is that `falgebra.v` does not compile since both `prodv` and `capv` (`Order.meet`) distributes over `addv` (`Order.join`) and so `addv_addoid` (in `falgebra.v`) is now redundant with `join_addoid` (in `order.v`).*\r\n\r\nRedefining `Monoid.add_law` as follows would probably solve this issue. But, if there is a multiplication-like operator that distributes over two different addition-like operators, it does not work. Is there any plan to extend the `bigop` hierarchy? https://github.com/math-comp/math-comp/blob/ee410eb85f36f5e366f807207a7dee8f3e1bdf3a/mathcomp/ssreflect/bigop.v#L349-L354\r\n```coq\r\n(* We have to swap its parameter (multiplication) and the first projection    *)\r\n(* (addition) so that its canonical instances can be indexed by constants of  *)\r\n(* multiplication rather than addition.                                       *)\r\nStructure mul_distr_law (add : T -> T -> T) := MulDistrLaw {\r\n  mul_distr_operator : T -> T -> T;\r\n  (* The following two axioms are part of `mul_law`. A telescope cannot be used here anymore. *)\r\n  _ : left_zero idm mul_distr_operator;\r\n  _ : right_zero idm mul_distr_operator;\r\n\r\n  _ : left_distributive mul_distr_operator add;\r\n  _ : right_distributive mul_distr_operator add\r\n}.\r\n```"},{"author":"pi8027","date":"2021-02-10T17:30:33Z","comment":"> But, if there is a multiplication-like operator that distributes over two different addition-like operators, it does not work.\r\n\r\nI self answer this: `muln` distributes over `maxn` and `addn`, and so it does not work."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"needs: fix","description":"PR that needs to be fix (generally because reviewers asked to)."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"CohenCyril","number":652,"state":"closed","open_date":"2020-11-18T01:07:34Z","update_date":"2021-06-03T10:42:57Z","discussion":[{"author":"CohenCyril","date":"2020-11-18T10:39:50Z","comment":"I forgot the deprecations :exploding_head: "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":651,"state":"closed","open_date":"2020-11-17T21:57:53Z","update_date":"2020-11-18T10:35:02Z","discussion":[{"author":"CohenCyril","date":"2020-11-17T21:58:44Z","comment":"CC @palmskog"},{"author":"palmskog","date":"2020-11-18T00:23:57Z","comment":"@CohenCyril thanks, this is very much appreciated. \r\n\r\nWhile I think I understand the decision to keep it local, and this is fine with me, I still want to make a quick case for a non-local `Remark`:\r\n- will appear in `Search` and coqdoc list of globals, so becomes more likely to find by those who might be interested why `merge_sort` is defined the way it is.\r\n- there is now a full-fledged Coq library for [reasoning about complexity](https://github.com/uds-psl/coq-library-complexity), making this a potentially interesting case study where the remark is key."},{"author":"CohenCyril","date":"2020-11-18T00:34:46Z","comment":"> While I think I understand the decision to keep it local, and this is fine with me, I still want to make a quick case for a non-local `Remark`:\r\n\r\nI'm ok with a non local remark."},{"author":"ybertot","date":"2020-11-18T08:15:05Z","comment":"The remark size_merge_sort_push is visible by any user loading all_ssreflect"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":650,"state":"closed","open_date":"2020-11-15T01:45:36Z","update_date":"2020-11-19T14:30:51Z","discussion":[{"author":"CohenCyril","date":"2020-11-18T00:39:01Z","comment":"@chdoc do you approve as well?"},{"author":"CohenCyril","date":"2020-11-18T11:58:26Z","comment":"Given the problem with ci-fscl-pcm, maybe `subseq_order_path` renaming can wait until we switch to Coq's deprecation mechanism?"},{"author":"pi8027","date":"2020-11-18T20:56:46Z","comment":"> Given the problem with ci-fscl-pcm, maybe `subseq_order_path` renaming can wait until we switch to Coq's deprecation mechanism?\r\n\r\nOne more placeholder was missing in the deprecation notation. Should be ok now."},{"author":"CohenCyril","date":"2020-11-19T09:03:03Z","comment":"@chdoc do you approve?"}],"tags":[{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"pi8027","number":649,"state":"closed","open_date":"2020-11-13T18:41:14Z","update_date":"2021-06-03T16:46:24Z","discussion":[{"author":"pi8027","date":"2020-11-27T18:18:39Z","comment":"Now I think it makes a lot of sense to wait for a major update of real-closed to see what we need here."},{"author":"pi8027","date":"2021-05-19T08:18:15Z","comment":"I will resume this PR after #727 and #738 get merged."},{"author":"pi8027","date":"2021-05-21T01:59:29Z","comment":"> `sorted_(ltn|leq)_(nth|index)` lemmas specialized for `porderType` are still missing on purpose. [#601 (comment)](https://github.com/math-comp/math-comp/pull/601#discussion_r523141733)\r\n\r\n`(lt|le)_sorted_(ltn|leq)_nth` are actually introduced in #738 but `index` ones are still missing. We should probably double-check them."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"pi8027","number":647,"state":"closed","open_date":"2020-11-13T11:38:10Z","update_date":"2020-11-13T13:58:59Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":646,"state":"closed","open_date":"2020-11-12T21:49:47Z","update_date":"2020-11-25T13:56:03Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":641,"state":"closed","open_date":"2020-11-12T08:58:55Z","update_date":"2020-11-12T16:47:59Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":640,"state":"closed","open_date":"2020-11-11T19:14:40Z","update_date":"2020-11-20T00:03:14Z","discussion":[{"author":"CohenCyril","date":"2020-11-11T19:15:15Z","comment":"CC @gares @pi8027 @herbelin"},{"author":"herbelin","date":"2020-11-11T19:34:06Z","comment":"Sorry for the confusion which probably came from the name `Iter.v` of the failing Coquelicot file."}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":637,"state":"closed","open_date":"2020-11-09T01:07:18Z","update_date":"2020-11-09T11:39:22Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":636,"state":"closed","open_date":"2020-11-09T00:07:47Z","update_date":"2020-11-16T15:54:54Z","discussion":[{"author":"chdoc","date":"2020-11-09T11:42:25Z","comment":"@CohenCyril Do I understand correctly that this is merely renaming a bunch of lemmas that are not contained in any previous release?\r\n\r\n@ybertot @thery , could you please have a look (review) and confirm that the new names are well-chosen?"},{"author":"ybertot","date":"2020-11-10T07:25:51Z","comment":"I have no confidence in judging naming policies.  I prefer to pass on this one."},{"author":"CohenCyril","date":"2020-11-11T16:39:24Z","comment":"> @CohenCyril Do I understand correctly that this is merely renaming a bunch of lemmas that are not contained in any previous release?\r\n\r\nyes that's correct!"},{"author":"chdoc","date":"2020-11-11T16:54:52Z","comment":"@thery can you merge this?"},{"author":"thery","date":"2020-11-12T13:34:16Z","comment":"@chdoc yep "},{"author":"CohenCyril","date":"2020-11-12T20:06:30Z","comment":"@thery? "},{"author":"chdoc","date":"2020-11-16T14:29:17Z","comment":"@thery please merge, I cannot."}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":633,"state":"closed","open_date":"2020-11-05T12:27:49Z","update_date":"2020-11-11T19:20:28Z","discussion":[{"author":"pi8027","date":"2020-11-06T15:29:58Z","comment":"Should we also remove or edit the corresponding CHANGELOG entry for now?"},{"author":"CohenCyril","date":"2020-11-06T15:48:11Z","comment":"> Should we also remove or edit the corresponding CHANGELOG entry for now?\r\n\r\nLet's annotate it, saying it is morally deprecated, but the warning will only come up in the next release and be removed in 1.14.0..."},{"author":"herbelin","date":"2020-11-11T10:05:00Z","comment":"Coming back to this PR, didn't you intend to also change `iota_add`, which is the deprecated constant causing the failure of Coquelicot? Maybe there are more than that to change, I can't tell though."},{"author":"CohenCyril","date":"2020-11-11T11:02:33Z","comment":"@gares @herbelin The change in this PR should have solved the problem...\r\nCan one of you tell me where to look for the current error message?"},{"author":"herbelin","date":"2020-11-11T11:26:09Z","comment":"Here is a link where to look at: https://gitlab.com/coq/coq/-/jobs/841468976"},{"author":"CohenCyril","date":"2020-11-11T16:23:43Z","comment":"Since `iter_add` is not deprecated anymore, this log is not the one of a build on top of the current master..."},{"author":"herbelin","date":"2020-11-11T17:40:53Z","comment":"Here is a log of today: https://gitlab.com/coq/coq/-/jobs/843633600\r\n\r\nIsn't there a difference between `iota_add` and `iter_add`?"},{"author":"CohenCyril","date":"2020-11-11T19:05:14Z","comment":"> Isn't there a difference between `iota_add` and `iter_add`?\r\n\r\nWoops, there is, and I have misread and so did the reviewer and assignee of this PR..."}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":632,"state":"closed","open_date":"2020-11-05T07:39:20Z","update_date":"2020-11-11T20:09:55Z","discussion":[{"author":"pi8027","date":"2020-11-06T16:20:48Z","comment":"> This already looks very solid to me. However, I wonder whether using `subseq` rather than explicit masks would simplify things. Put differently, I wonder whether there is additional complexity introduced by not requiring an `eqType`, and whether this is is justified by some application or model.\r\n\r\nIn general, I would like to make `_in` lemmas general enough to derive their specific counterparts immediately. Since `(homo|mono)_(path|cycle|sorted)` lemmas have not been derived from their `_in` counterparts, this probably does not apply to this PR. But, IMO, this is quite crucial to keep PR #601 as simple as possible, since many existing lemmas which I generalize do not require an `eqType`.\r\n\r\nAlso, I observed that `homo_sorted_in` generalized in this PR was useful to prove the following lemma (I actually managed to prove it):\r\n```coq\r\nLemma sort_map_in\r\n      (T : Type) (T' : eqType) (P : {pred T}) (f : T -> T') leT leT' :\r\n  {in P &, antisymmetric (relpre f leT')} ->\r\n  {in P & &, transitive (relpre f leT')} -> {in P &, total leT} ->\r\n  {in P &, {homo f : x y / leT x y >-> leT' x y}} ->\r\n  {in all P, forall s : seq T,\r\n        sort leT' [seq f x | x <- s] = [seq f x | x <- sort leT s]}.\r\n```"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":630,"state":"closed","open_date":"2020-11-04T13:35:23Z","update_date":"2020-11-11T13:24:48Z","discussion":[{"author":"ybertot","date":"2020-11-11T11:06:55Z","comment":"I will merge this PR once it is squashed and rebased, if need be."},{"author":"CohenCyril","date":"2020-11-11T11:49:23Z","comment":"> I will merge this PR once it is squashed and rebased, if need be.\r\n\r\ndone."},{"author":"ybertot","date":"2020-11-11T12:54:35Z","comment":"Thanks"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":629,"state":"closed","open_date":"2020-11-04T10:37:55Z","update_date":"2020-11-04T14:59:05Z","discussion":[{"author":"pi8027","date":"2020-11-04T10:38:15Z","comment":"Do we need a CHANGELOG entry for this?"},{"author":"affeldt-aist","date":"2020-11-04T10:41:35Z","comment":"> Do we need a CHANGELOG entry for this?\r\n\r\nIt won't hurt so I would say \"yes\"."},{"author":"pi8027","date":"2020-11-04T10:43:29Z","comment":"OK."}],"tags":[{"tag":"kind: clean-up","description":"This issure/PR is about cleaning up obsolete code, removing hacks, etc"}],"pull_requests":[]},{"author":"pi8027","number":627,"state":"closed","open_date":"2020-10-30T20:20:53Z","update_date":"2020-11-02T08:05:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":626,"state":"closed","open_date":"2020-10-30T18:48:51Z","update_date":"2020-11-06T15:51:35Z","discussion":[{"author":"chdoc","date":"2020-11-04T14:19:22Z","comment":"I'm a bit surprised that this change does not cause any breakage whatsoever. One reason might be that the lemma, regardless of the premise, is too weak to be of much use. I only found one use for this lemma so far, and that was to prove the following strengthening. (I'm including the comment I added when proving this 18 months ago :smile:)\r\n```coq\r\n(** TOTHINK: [#|P| <= #|aT|] would suffice, the other direction is\r\nimplied. But the same is true for [inj_card_onto]. *)\r\nLemma inj_card_onto_pred (aT rT : finType) (f : aT -> rT) (P : pred rT) : \r\n  injective f -> (forall x, f x \\in P) -> #|aT| = #|P| -> {in P, forall y, y \\in codom f}.\r\nProof.\r\nmove=> f_inj fP E y yP.\r\npose rT' := { y : rT | P y}; pose f' (x:aT) : rT' := Sub (f x) (fP x).\r\nhave/inj_card_onto f'_inj : injective f' by  move => x1 x2 []; apply: f_inj.\r\nrewrite -[#|P|]card_sig in E; have/mapP[x _ [] ->] := f'_inj E (Sub y yP). \r\nexact: codom_f. \r\nQed.\r\n```\r\nThis one I use a handful of times. I guess one could also have a predicate `A` on the argument type and weaken this to {in A&, injective f} and f a homomorphism from A to P. "},{"author":"CohenCyril","date":"2020-11-04T15:17:15Z","comment":"@chdoc note that two lemmas were generalized, and the second one `inj_card_bij`, is used slightly more often. I guess one reason no breakage occurs is that every proof solving `#|T| = #|T'|` can solve `#|T| >= #|T'|` just as easily.\r\nAs for your variation on `inj_card_onto`, I'd say it would be a nice addition indeed, in a subsequent PR.\r\nI suggest the following statements + proofs (rather than going all the way through `inj_card_onto`):\r\n```coq\r\nLemma inj_image_eq (aT rT : finType) (f : aT -> rT) \r\n    (D : {pred aT}) (P : {pred rT}) : \r\n    {in D &, injective f} -> image f D \\subset P -> #|P| <= #|D| ->\r\n  image f D =i P.\r\nProof.\r\nmove=> f_inj fP leP; apply/subset_cardP => //; apply/eqP.\r\nby rewrite eqn_leq subset_leq_card//= (leq_trans leP)// card_in_image.\r\nQed.\r\n\r\nLemma inj_codom_eq (aT rT : finType) (f : aT -> rT) (P : {pred rT}) : \r\n  injective f -> codom f \\subset P -> #|P| <= #|aT| -> codom f =i P.\r\nProof. by move=> f_inj; apply/inj_image_eq; apply: in2W. Qed.\r\n```"},{"author":"chdoc","date":"2020-11-04T20:17:48Z","comment":"> I guess one reason no breakage occurs is that every proof solving `#|T| = #|T'|` can solve `#|T| >= #|T'|` just as easily.\r\n\r\nI was a bit worried that there could be places where the the equality is shown by showing `#|T| >= #|T'|` and `#|T| <= #|T'|` separately, possibly duplicating your argument. But neither lemma is used withing mathcomp (outside of fintype), so even if this is the case, it would be of no concern to this PR. "},{"author":"chdoc","date":"2020-11-06T15:39:22Z","comment":"@pi8027 then please merge, because I cannot :smirk: "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":625,"state":"closed","open_date":"2020-10-30T18:10:55Z","update_date":"2020-10-30T19:38:23Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":624,"state":"closed","open_date":"2020-10-30T17:34:17Z","update_date":"2020-11-12T20:09:36Z","discussion":[{"author":"CohenCyril","date":"2020-11-08T00:39:22Z","comment":"@affeldt-aist @pi8027 comments taken into account, you may merge if you like."},{"author":"pi8027","date":"2020-11-08T12:36:53Z","comment":"Remark: `forall x, count_mem x s1 <= count_mem x s2` can be seen as a non-symmetric version of `perm_eq` (conversely, `perm_eq` is the symmetric closure of it). Defining a boolean relation for this and refactoring the `perm_eq` theory using it can probably be useful, but depending on its applications."},{"author":"CohenCyril","date":"2020-11-08T13:13:00Z","comment":"> Remark: `forall x, count_mem x s1 <= count_mem x s2` can be seen as a non-symmetric version of `perm_eq` (conversely, `perm_eq` is the symmetric closure of it). Defining a boolean relation for this and refactoring the `perm_eq` theory using it can probably be useful, but depending on its applications.\r\n\r\nGood remark, I think it's beyond the scope of this PR. Maybe you can open an issue to suggest this refactoring, but I'm not sure it's useful to anyone as of today: if it's not free and if there is no application yet, we can postpone it."},{"author":"CohenCyril","date":"2020-11-08T23:38:57Z","comment":"I think I'd also turn `count_maskP` and `count_subsetP` into equivalences."},{"author":"CohenCyril","date":"2020-11-09T00:37:36Z","comment":"> I think I'd also turn `count_maskP` and `count_subsetP` into equivalences.\r\n\r\n@pi8027 which I did, you may rereview."},{"author":"CohenCyril","date":"2020-11-11T22:19:42Z","comment":"Every remark has been attended!"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":618,"state":"closed","open_date":"2020-10-25T23:13:25Z","update_date":"2020-10-27T09:16:17Z","discussion":[{"author":"CohenCyril","date":"2020-10-26T16:21:39Z","comment":"@gares @ybertot @thery can one of you assign themselves this one? It should be an easy one..."},{"author":"ybertot","date":"2020-10-27T07:11:37Z","comment":"I'd rather review it than assign myself."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"erikmd","number":614,"state":"closed","open_date":"2020-10-12T11:50:04Z","update_date":"2020-11-09T17:31:36Z","discussion":[{"author":"chdoc","date":"2020-11-04T14:28:48Z","comment":"@erikmd @CohenCyril could one of you suggest an assignee? \r\n\r\n@erikmd I'm not sure I understand the (potential) impact of this change and how it is related to the \"overall aim\". Could you provide a bit more explanation/information for those on the mathcomp side who don't deal with Docker and CI pipelines all day long? (I assume I'm not speaking solely for myself here.) :man_shrugging: "},{"author":"erikmd","date":"2020-11-05T00:07:46Z","comment":"Hi @chdoc,\r\n> Could you provide a bit more explanation/information\r\n\r\nSure. Indeed the description was a bit terse… I'm going to elaborate on it soon (if it's still pending on Friday, feel free to ping me!)"},{"author":"chdoc","date":"2020-11-06T19:57:43Z","comment":"@erikmd PING! (Friday is nearing it's end)\r\n\r\n@CohenCyril @gares could one of you self-assign or suggest an assignee? This is the last PR milestoned for 1.12.0 that does not have an assignee. "},{"author":"erikmd","date":"2020-11-07T02:44:07Z","comment":"[sorry, I mis-clicked and sent my comment too early]"},{"author":"erikmd","date":"2020-11-07T03:04:05Z","comment":"Thanks @chdoc, so here is the wrap-up :)\r\n\r\n## The \"overall aim\" is two-fold:\r\n\r\n1. ensure that the mathcomp.dev image obtained by\r\n\r\n    ```\r\n    docker pull mathcomp/mathcomp-dev:coq-dev\r\n    ```\r\n    always brings **the latest coq master** (and not just the last nightly build).\r\n\r\n2. ensure that beyond this automatic deployment, math-comp's CI still runs the test-suite on coq-dev (to **detect regressions**).\r\n\r\nNote that point 2. is related to the recent CI enhancement done in @gares' PR https://github.com/math-comp/math-comp/pull/433\r\n\r\nPoint 1. is not directly performed by this PR #614, but this PR is a necessary ingredient for fully implementing the new architecture of the coq/docker-coq/docker-mathcomp CI/CD that we discussed recently with @Zimmi48, to get rid of the \"nightly-build limitation\" of docker images of coq & mathcomp.\r\n\r\n### To sum up, the old architecture was as follows:\r\n\r\n![2020-11_math-comp-before-pr614](https://user-images.githubusercontent.com/10367254/98430180-0ed16600-20ac-11eb-8977-e45c3bba8f49.png)\r\n\r\n### And the new architecture is as follows:\r\n\r\n![2020-11_math-comp-using-pr614](https://user-images.githubusercontent.com/10367254/98430202-45a77c00-20ac-11eb-91d5-080da46bd32b.png)\r\n\r\n## Regarding the positioning of this PR #614:\r\n\r\nAs shown above in the figures, a key change is that the automatically triggered pipeline in math-comp CI from coq-community CI **cannot be a scheduled pipeline**. Hence the use of a special environment variable `CRON_MODE`.\r\n\r\nThis is the core change of this PR.\r\n\r\nIt also does one refactoring and a small fix :\r\n\r\n1. Use only:refs, except:refs (no change intended, but replace old GitLab syntax with GitLab 10.0+ syntax)\r\n\r\n2. Fix (to have better clarity in the GitLab CI deployment browser) the environment deployment names related to the `deploy` stage jobs for the `master` protected branch (see the commit message for more details if need be).\r\n\r\n## Additional details\r\n\r\nFYI I've just tested the behavior of this PR on a temporary separate repo: https://gitlab.com/erikmd/math-comp-ci-preflight\r\n\r\nThe main thing that had to be checked was *whether the created stages and jobs were OK* in the following three configurations:\r\n\r\n* pr-0 (non-protected branch) → **full** build+test [(url)](https://gitlab.com/erikmd/math-comp-ci-preflight/-/pipelines/213003576)\r\n* master (protected branch), regular pipeline → **full** build+deploy+test [(url)](https://gitlab.com/erikmd/math-comp-ci-preflight/-/pipelines/213003062)\r\n* master (protected branch), regular pipeline triggered with CRON_MODE → **coq-dev** build+deploy+test [(url)](https://gitlab.com/erikmd/math-comp-ci-preflight/-/pipelines/213003632)"},{"author":"erikmd","date":"2020-11-07T23:36:41Z","comment":"@CohenCyril I've just proposed you'd be the assignee of this PR\r\n(but I was unsure if that triggered a notification, hence this comment :)"},{"author":"CohenCyril","date":"2020-11-08T00:21:31Z","comment":"Thanks @erikmd!! I'll merge on monday, in the morning, so that if a failure occur we can fix it within the day."},{"author":"erikmd","date":"2020-11-09T16:42:50Z","comment":"Hi @CohenCyril, do you believe you could merge #614 today? otherwise no worries! tomorrow morning would be very fine."},{"author":"CohenCyril","date":"2020-11-09T16:50:01Z","comment":"> Hi @CohenCyril, do you believe you could merge #614 today? otherwise no worries! tomorrow morning would be very fine.\r\n\r\nI will now!"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":612,"state":"closed","open_date":"2020-10-10T09:51:19Z","update_date":"2020-10-29T02:37:48Z","discussion":[{"author":"pi8027","date":"2020-10-10T09:55:52Z","comment":"BTW, as an alternative to `iter_addr_0`, the following lemma is slightly general and seems to be useful.\r\n```coq\r\nLemma iter_addr n (m : V) p : iter n (+%R m) p = m *+ n + p.\r\nProof. by elim: n => [|n ih]; rewrite ?add0r //= ih mulrS addrA. Qed.\r\n```"},{"author":"CohenCyril","date":"2020-10-22T10:04:49Z","comment":"> BTW, as an alternative to `iter_addr_0`, the following lemma is slightly general and seems to be useful.\r\n> \r\n> ```coq\r\n> Lemma iter_addr n (m : V) p : iter n (+%R m) p = m *+ n + p.\r\n> Proof. by elim: n => [|n ih]; rewrite ?add0r //= ih mulrS addrA. Qed.\r\n> ```\r\n\r\nSure, we should have both as for `iter_addn`. BTW, while you're at it, would you mind adding the same for `mul` both in `ssrnat.v` and `ssralg.v`?"},{"author":"pi8027","date":"2020-10-23T05:17:33Z","comment":"> BTW, while you're at it, would you mind adding the same for `mul` both in `ssrnat.v` and `ssralg.v`?\r\n\r\nWill do, but we already have ones for `muln`. https://github.com/math-comp/math-comp/blob/2b97a257956d307e7cb9ad7d4920fb5db969b69b/mathcomp/ssreflect/ssrnat.v#L1143-L1147\r\n"},{"author":"pi8027","date":"2020-10-23T08:35:25Z","comment":"Done."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":611,"state":"closed","open_date":"2020-10-09T17:38:12Z","update_date":"2020-10-10T17:10:32Z","discussion":[{"author":"pi8027","date":"2020-10-10T13:30:08Z","comment":"I will squash my suggestions and merge when CI passes."},{"author":"pi8027","date":"2020-10-10T15:41:54Z","comment":"Sorry I made a mistake on the merging process but this has been merged (not closed) actually.😔"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":610,"state":"closed","open_date":"2020-10-09T17:13:08Z","update_date":"2020-10-30T18:47:54Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":607,"state":"closed","open_date":"2020-10-08T15:29:11Z","update_date":"2020-11-01T13:01:01Z","discussion":[{"author":"pi8027","date":"2020-10-09T08:41:39Z","comment":"https://github.com/math-comp/math-comp/blob/9bfc9834b46c1e492aaaf257cfa811d1e5e39065/mathcomp/ssreflect/div.v#L950-L963\r\nThe latter two should probably be `coprimeX(l|r)` but I'm not sure about the former two. Should they be `coprime_pX(l|r)` or is it too much to do?"},{"author":"pi8027","date":"2020-10-12T11:10:39Z","comment":"Done. Ready for review except CHANGELOG."},{"author":"CohenCyril","date":"2020-10-25T12:32:46Z","comment":"~~I'm wondering whether lemmas such as `mulnDl`, `mulnDr` and the like should be renamed using \"positional suffixes\" (e.g. `mulDn` for left and `mulnD` for right) instead of `l` and `r`... Or would it be too much of a change...~~\r\nThis is actually a distinct issue that I posted independently in #617."},{"author":"pi8027","date":"2020-10-29T06:54:49Z","comment":"Done."},{"author":"CohenCyril","date":"2020-10-29T11:30:47Z","comment":"> The latter two should probably be `coprimeX(l|r)` but I'm not sure about the former two. Should they be `coprime_pX(l|r)` or is it too much to do?\r\n\r\nI think it is too much indeed, let's keep it (as you did)."},{"author":"herbelin","date":"2020-11-01T09:19:58Z","comment":"For the record, it seems that the change around `iota_add` -> `iotaD` breaks the compilation of Coquelicot on Coq CI (e.g. [here](https://gitlab.com/coq/coq/-/jobs/822996322)). Something related to `hide` not propagating the scopes of `iota_add`. In particular, `(ssreflect.Deprecation.hide (fun iota_add iotaD => _) iotaD (m - n) n)` interprets `m - n` in the ambiant stack of scopes (thus in `R_scope` in the case of Coquelicot) while it is expected to be interpreted in `nat_scope`."},{"author":"CohenCyril","date":"2020-11-01T13:01:01Z","comment":"Thanks @herbelin !"}],"tags":[{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"thery","number":605,"state":"closed","open_date":"2020-10-04T12:48:16Z","update_date":"2020-10-31T11:08:36Z","discussion":[{"author":"pi8027","date":"2020-10-30T00:57:08Z","comment":"Please open an issue to address the remaining TODO."}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":604,"state":"closed","open_date":"2020-10-01T16:17:52Z","update_date":"2020-11-11T21:20:52Z","discussion":[{"author":"CohenCyril","date":"2020-10-30T17:14:18Z","comment":"> @CohenCyril I chose `_pivot` for the `s1 ++ x :: s2` pattern, but I am open to suggestions. I would favor this pattern over `rcons s1 x ++ s2`, because the former arises naturally when using `rot_to_arc` (`x` being the beginning of the second arc).\r\n\r\nAll right, I never noticed this before, this is a bit unfortunate since `splitP` chooses the other pattern :disappointed: "},{"author":"chdoc","date":"2020-10-30T19:08:44Z","comment":"Well, just ran a count on my graph-theory development and I have about the same number of uses of `path.splitP` (if one imports `all_ssreflect`, `splitP` ends up being the one for ordinals) and of `splitPr`. The former is more useful when dealing with paths, where one usually cares about the last element, so `splitP` allows rewriting with `last_rcons`. The latter is more useful when dealing with arcs, where the \"end\" of the arc is actually part of the other arc (i.e, `arc s x y` contains `x` but not `y`). "},{"author":"chdoc","date":"2020-11-04T19:45:04Z","comment":"@CohenCyril , I rebased, but I kept the changes following your review in a separate commit. Please ping me before merging, even if you are okay with my alternative choice of names, so that I can squash the commits. "},{"author":"chdoc","date":"2020-11-06T19:51:05Z","comment":"@CohenCyril I committed your suggestions and added a fixup commit to make it compile and update the change log. Who would be a good second reviewer? "},{"author":"CohenCyril","date":"2020-11-07T23:18:59Z","comment":"I guess it's time to summon @pi8027..."},{"author":"chdoc","date":"2020-11-11T19:40:37Z","comment":"And another rebase to resolve the conflicts with the other recent additions to `seq.v`..."},{"author":"CohenCyril","date":"2020-11-11T19:43:44Z","comment":"> And another rebase to resolve the conflicts with the other recent additions to `seq.v`...\r\n\r\nIt might very well have been the last one though."}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":603,"state":"closed","open_date":"2020-10-01T15:23:06Z","update_date":"2020-11-03T15:26:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":601,"state":"closed","open_date":"2020-09-30T11:19:29Z","update_date":"2020-11-26T17:53:48Z","discussion":[{"author":"pi8027","date":"2020-10-07T16:20:22Z","comment":"There are naming inconsistencies in `eq_(path|sorted)(_in)` lemmas. :(\r\n```coq\r\neq_path\r\n     : forall (T : Type) (e e' : T -> T -> bool), e =2 e' -> path e =2 path e'\r\n\r\neq_path_in\r\n     : forall (T : eqType) (e e' : rel T) (x : T) (s : seq T),\r\n       {in x :: s &, e =2 e'} -> path e x s = path e' x s\r\n\r\neq_sorted\r\n     : forall (T : eqType) (leT : rel T),\r\n       transitive leT ->\r\n       antisymmetric leT ->\r\n       forall s1 s2 : seq T,\r\n       sorted leT s1 -> sorted leT s2 -> perm_eq s1 s2 -> s1 = s2\r\n\r\neq_sorted_in\r\n     : forall (T : eqType) (leT : rel T) (s1 : seq_predType T) (s2 : seq T),\r\n       {in s1 & &, transitive leT} ->\r\n       {in s1 &, antisymmetric leT} ->\r\n       sorted leT s1 -> sorted leT s2 -> perm_eq s1 s2 -> s1 = s2\r\n```"},{"author":"pi8027","date":"2020-10-07T17:12:38Z","comment":"~Also `path`, `cycle`, and `sorted` share some similar properties but many of them are actually missing as lemmas, e.g., the `cycle` variant of `eq_path_in` and `(homo|mono)_path(_in)`, and the `sorted` variants of `eq_path(_in)`. I guess it would be nice to move `sorted` right after the definition of `cycle` to get a better view.~ Done."},{"author":"pi8027","date":"2020-10-10T08:08:06Z","comment":"I don't think I can make more progress without some feedback. May I have some comment on the above points (naming inconsistencies, a possible generalization of `sub_path_in`, and its naming convention)?"},{"author":"CohenCyril","date":"2020-10-30T19:49:36Z","comment":"> There are naming inconsistencies in `eq_(path|sorted)(_in)` lemmas. :(\r\n\r\nNevermind, yes there is an inconsistency... I guess  `eq_sorted` should be renamed `sorted_eq` then..."},{"author":"pi8027","date":"2020-10-30T19:56:37Z","comment":"> Nevermind, yes there is an inconsistency... I guess `eq_sorted` should be renamed `sorted_eq` then...\r\n\r\nSure. So we will be able to add `eq_sorted(_in)` consistent with `eq_path(_in)` in 1.13."},{"author":"pi8027","date":"2020-10-31T12:11:27Z","comment":"FTR, deprecating `eq_sorted_irr` breaks fcsl-pcm and lemma-overloading because the deprecation facility does not support the `(ident := term)` syntax for explicit applications. https://github.com/imdea-software/fcsl-pcm/blob/1d5b78248fb1d5bec3553d64f92656e973f2b6de/pcm/unionmap.v#L3573 https://github.com/coq-community/lemma-overloading/blob/05a9f467049822eb14b3784ddaa21ddc0252c92a/theories/heaps.v#L1199"},{"author":"pi8027","date":"2020-11-04T07:05:57Z","comment":"I will write CHANGELOG entries later today. This PR is ready for review except for that."},{"author":"pi8027","date":"2020-11-04T14:51:19Z","comment":"> I will write CHANGELOG entries later today. This PR is ready for review except for that.\r\n\r\nDone."},{"author":"pi8027","date":"2020-11-05T07:44:26Z","comment":"> Moreover, it looks to me that this PR changes (much) more than just generalize the sorting lemmas. I would advocate for splitting this PR into more focused (and hence smaller) PRs, so that each part can be given proper consideration.\r\n\r\n@chdoc Sure. I separated off the first part of this PR as #632."},{"author":"chdoc","date":"2020-11-12T15:00:32Z","comment":"@pi8027 , is this PR ready for review now?"},{"author":"pi8027","date":"2020-11-12T16:41:34Z","comment":"> @pi8027 , is this PR ready for review now?\r\n\r\n@chdoc Yes."},{"author":"pi8027","date":"2020-11-12T18:54:40Z","comment":"Now I think `perm_iota_sort` is not convenient enough to perform the `mkseq` technique for `sort`. I actually rather use `mkseq_nth` often. Let me investigate before review."},{"author":"CohenCyril","date":"2020-11-12T20:07:44Z","comment":"There are two ways to add the `_in` variants,\r\n- one way is exactly what you did: prove the `_in` versions first, and then apply them to the not `_in` counterparts.\r\n- the other one is to keep the original code as such and extend it to the `_in` variants, by applying the original lemmas to `sig P` and using parametricity results (such as `path_map`, `sorted_map`, `sort_map`, etc)\r\n\r\nI wonder if the second approach wouldn't be more compact, maybe at the cost of some reusable machinery... (like `inW` etc), @pi8027 did you try it?"},{"author":"pi8027","date":"2020-11-12T21:13:27Z","comment":"@CohenCyril I thought about the second possibility but did not try it yet. Let me try. Also, I intend to separate off the renaming of `eq_sorted` lemmas as another PR to make it easy to compare these two approaches."},{"author":"pi8027","date":"2020-11-12T21:53:40Z","comment":"CI fails since coq.inria.fr is down🤦‍♂️"},{"author":"pi8027","date":"2020-11-13T15:34:18Z","comment":"Progress report: before working on another approach to add the `_in` lemmas suggested by @CohenCyril, I'm discovering some possible simplifications and generalizations of existing proofs (namely the first commit of this PR). I will probably open it as another PR."},{"author":"pi8027","date":"2020-11-19T09:48:17Z","comment":">  the other one is to keep the original code as such and extend it to the `_in` variants, by applying the original lemmas to `sig P` and using parametricity results (such as `path_map`, `sorted_map`, `sort_map`, etc)\r\n\r\nThis one seems quite successful (see https://github.com/pi8027/math-comp/commit/4c794d28703abe14c60fce540374a8ad7a5808af). Since these lemmas will not likely to be used frequently and their proofs are reasonably short, we probably don't have to add them in `path.v`. But, at least, I would like to document this proof technique somewhere. Would `sort_map(_in)` be a good example?"},{"author":"CohenCyril","date":"2020-11-19T09:55:07Z","comment":"> This one seems quite successful (see [pi8027@4c794d2](https://github.com/pi8027/math-comp/commit/4c794d28703abe14c60fce540374a8ad7a5808af)). Since these lemmas will not likely to be used frequently and their proofs are reasonably short, we probably don't have to add them in `path.v`. But, at least, I would like to document this proof technique somewhere. Would `sort_map(_in)` be a good example?\r\n\r\nActually, I think the best documentation would come from factoring out the proofs that transitivity, totality, reflexivity, irreflexivity, antisymmetry (and the ones I maybe forgot) \"in\" `P`, propagate to `sig P` and documenting the proof technique there and pointing to `sort_map(_in)` for an example of usage.\r\n\r\n(e.g. in https://github.com/pi8027/math-comp/commit/4c794d28703abe14c60fce540374a8ad7a5808af#diff-6905d3e9b2a18e19466feaed83bec790025fdc134ccc5ebba787bf9d63653544R891 and https://github.com/pi8027/math-comp/commit/4c794d28703abe14c60fce540374a8ad7a5808af#diff-6905d3e9b2a18e19466feaed83bec790025fdc134ccc5ebba787bf9d63653544R1103 the end of the line is the same and could be factored using a lemma `in_sig3 : {in A & B & C, P T1 T2 T3} -> P (sig A) (sig B) (sig C)` or something like that)"},{"author":"CohenCyril","date":"2020-11-19T17:04:19Z","comment":"cf https://github.com/CohenCyril/math-comp/commit/12ead9c5db6694d75db8a123f5a6c600cc58be99\r\n"},{"author":"CohenCyril","date":"2020-11-20T10:05:48Z","comment":"My impression is that in previous versions of this, you had many more `_in` variants. I cannot find the previous changelog anymore to compare, but is that right?"},{"author":"pi8027","date":"2020-11-20T10:22:41Z","comment":"> My impression is that in previous versions of this, you had many more `_in` variants. I cannot find the previous changelog anymore to compare, but is that right?\r\n\r\nRight. Here I have a previous version: https://github.com/pi8027/math-comp/commit/024cb1b6455fa40ea7cb902909a311033fb30108. I will put some of them back, but I'm not sure if we need all of them."},{"author":"CohenCyril","date":"2020-11-24T16:49:30Z","comment":"@chdoc I'm happy with the current state of this PR, if you are too, I will merge."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"pi8027","number":600,"state":"closed","open_date":"2020-09-29T06:12:37Z","update_date":"2020-09-29T11:11:29Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":599,"state":"closed","open_date":"2020-09-27T13:35:01Z","update_date":"2020-11-18T11:56:55Z","discussion":[{"author":"gares","date":"2020-10-21T08:19:21Z","comment":"Please open the corresponding PR in Coq"},{"author":"gares","date":"2020-11-04T09:43:24Z","comment":"Please open the corresponding PR in Coq and rebase"},{"author":"gares","date":"2020-11-06T09:08:21Z","comment":"Apparently this PR got some appreciation here: https://coq.zulipchat.com/#narrow/stream/237977-Coq-users/topic/ssr.20views\r\n@CohenCyril can you open the PR on Coq and rebase so that we can merge this?\r\nCoq is freezing very soon!"},{"author":"gares","date":"2020-11-16T20:06:03Z","comment":"I guess we shall wait the next call to discuss the 8.9 drop business."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"drops: coq 8.9","description":"Addressing this issue or merging this PR requires to drop support for coq 8.9"}],"pull_requests":[]},{"author":"CohenCyril","number":598,"state":"closed","open_date":"2020-09-24T15:08:17Z","update_date":"2020-09-28T06:41:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":597,"state":"closed","open_date":"2020-09-24T15:03:47Z","update_date":"2020-09-28T14:04:48Z","discussion":[{"author":"affeldt-aist","date":"2020-09-28T01:29:01Z","comment":"Lemmas `raddf_inj` and `raddf_eq0` look like they could be merged in a single lemma stated with an equivalence but i suspect that it would make it less practical, is that correct? "},{"author":"CohenCyril","date":"2020-09-28T08:20:17Z","comment":"> Lemmas `raddf_inj` and `raddf_eq0` look like they could be merged in a single lemma stated with an equivalence but i suspect that it would make it less practical, is that correct?\r\n\r\nYes indeed. From injectivity one may want to rewrite, but to prove it, one would rather prove a single implication."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":596,"state":"closed","open_date":"2020-09-24T14:07:16Z","update_date":"2020-10-13T16:55:46Z","discussion":[{"author":"chdoc","date":"2020-09-29T09:29:23Z","comment":"This looks a bit bespoke to me, what's the motivation or where is this useful? "},{"author":"CohenCyril","date":"2020-09-29T10:43:56Z","comment":"https://github.com/CohenCyril/signdet/blob/master/signdet.v#L318, ideally that would be `mulrn x` is injective, but that's true only if the characteristic of the ring is `0`. With `b` it's always true. Morever `x *+ b` is a shorthand for `if b then x else 0`, and this boolean might be a membership or an equality, so the injectivity allows to traceback the truthvalue of the said boolean proposition, according to whether the result was zero or not. Thus, I think it can be of general interest."},{"author":"chdoc","date":"2020-09-29T11:30:27Z","comment":"@CohenCyril I can't merge this, so what should I do now? Who, apart from you, is most familiar with that part of the library?"},{"author":"CohenCyril","date":"2020-09-29T11:37:10Z","comment":"woops, I think @thery, @gares, @pi8027, @strub might all be good candidates"},{"author":"thery","date":"2020-09-29T20:14:15Z","comment":"@CohenCyril sorry too cryptic for me, don't see how this could be a reusable theorem.\r\n"},{"author":"CohenCyril","date":"2020-09-30T12:06:59Z","comment":"> @CohenCyril sorry too cryptic for me, don't see how this could be a reusable theorem.\r\n\r\nWell I do think it is reusable. Let me try to explain it another way.\r\n\r\nThe construction `x *+ b` is `x` if `b` otherwise `0`, it is frequently used in combination with membership (e.g. `x \\in G`) or Kronecker symbol (`i == j`), the latter gives a \"Dirac\" function `fun j => x *+ (i == j)` which is thus injective through `mulrIb`.\r\nThis is used pervasively in the representation of diagonal matrices `\\matrix_(i, j) (d 0 i *+ (i == j))`, and this lemma helps identifying nonzero values of the matrix with elements of the diagonal.\r\n\r\nIn other words again, this lemma, explains these \"Dirac/weight function\" are injective on  `b` as long as `x` is nonzero, which allows to infer the validity of `b` (i.e.  `i == j`, or `i \\in G`, depending on the use cases) from the nullity of `x`."},{"author":"thery","date":"2020-09-30T13:42:34Z","comment":"@CohenCyril I've understood what it is your use case, but I just doubt it will be reused in other places."},{"author":"CohenCyril","date":"2020-10-01T10:06:35Z","comment":"What is the conclusion?"},{"author":"thery","date":"2020-10-01T11:23:02Z","comment":"not a fan\r\n"},{"author":"chdoc","date":"2020-10-13T09:30:05Z","comment":"@thery @CohenCyril As the assignee for this PR, I would be happy if we could make progress towards either merging or closing this PR. Personally, I don't think this one-liner will hurt, so I would be in favor of merging it, even if it may be slightly bespoke. \r\n\r\n@CohenCyril How often is this lemma used in your developments?"},{"author":"thery","date":"2020-10-13T09:58:41Z","comment":"@chdoc as I said I am not a big fan, but it will not keep me from sleeping at night if it is merged. My only point if If it is a general construction it should at least be documented. \r\nAs a naive user I would  have missed the theorem, as I would have coded the gard as\r\n`(b%:R * e)` as I feel more at ease manipulating `*` than `*+`\r\n "},{"author":"CohenCyril","date":"2020-10-13T16:48:20Z","comment":"I use it only once so far. Let's close it, I will reopen it if another occurence pops up"}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":594,"state":"closed","open_date":"2020-09-16T10:10:43Z","update_date":"2020-09-28T14:05:19Z","discussion":[{"author":"CohenCyril","date":"2020-09-16T10:35:46Z","comment":"To be merged as soon as CI passes."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":593,"state":"closed","open_date":"2020-09-12T08:04:22Z","update_date":"2020-10-25T15:02:23Z","discussion":[{"author":"CohenCyril","date":"2020-09-15T15:22:43Z","comment":"I think a similar result should appear in `order.v` for comparable elements."},{"author":"affeldt-aist","date":"2020-09-15T16:44:40Z","comment":"> I think a similar result should appear in `order.v` for comparable elements.\r\n\r\nI guess that's not what you want, I'll investigate more tomorrow."},{"author":"CohenCyril","date":"2020-09-15T17:24:15Z","comment":"> > I think a similar result should appear in `order.v` for comparable elements.\r\n> \r\n> I guess that's not what you want, I'll investigate more tomorrow.\r\n\r\nnot at all indeed ... It should look like:\r\n```coq\r\n{in P, forall x, x >=< x0} -> {in P &, forall i j, f x >=< f y} ->\r\nall (>=< \\big[max/x0]_(i <- s | P i) f i) (x :: s).\r\n```\r\nWith perhaps a particular case for `x` and for `s` when `I` is an `eqType`."},{"author":"CohenCyril","date":"2020-09-17T11:11:41Z","comment":"Subsidiary question: shouldn't we have a generic `comparable_big` which generalizes both `comparable_bigmax` and  `comparable_bigmin` under the assumption that the iterated operation preserves comparability?"},{"author":"affeldt-aist","date":"2020-09-17T14:48:38Z","comment":"> Subsidiary question: shouldn't we have a generic `comparable_big` which generalizes both `comparable_bigmax` and `comparable_bigmin` under the assumption that the iterated operation preserves comparability?\r\n\r\nIndeed. But with the new `comparable_big`, the old `comparable_bigmax`\r\nis not exactly `comparable_big comparable_maxl` because of the order of arguments of `comparable_maxl`.\r\n(BTW, I changed the notation `>=< x` because it looked counter-intuitive to me.)\r\n"},{"author":"CohenCyril","date":"2020-09-26T20:54:20Z","comment":"> > Subsidiary question: shouldn't we have a generic `comparable_big` which generalizes both `comparable_bigmax` and `comparable_bigmin` under the assumption that the iterated operation preserves comparability?\r\n> \r\n> Indeed. But with the new `comparable_big`, the old `comparable_bigmax`\r\n> is not exactly `comparable_big comparable_maxl` because of the order of arguments of `comparable_maxl`.\r\n\r\nThen swap the arguments ;)\r\n\r\n> (BTW, I changed the notation `>=< x` because it looked counter-intuitive to me.)\r\n\r\nYou are right!\r\n\r\n"},{"author":"CohenCyril","date":"2020-09-26T21:58:20Z","comment":"BTW, making `comparable_minl` and `comparable_maxl` hints make `rewrite comparable_big//` simplify side conditions automatically if one rephrases them. I took the liberty to patch your PR, ~but I cannot seem to push in your branch, did you authorize pushs from maintainers?~ (my mistake)"},{"author":"CohenCyril","date":"2020-09-26T22:06:56Z","comment":"and ... rebased"},{"author":"CohenCyril","date":"2020-10-09T11:40:03Z","comment":"> The definition of `>=< y` in ssrnum should also be changed.\r\n\r\n@affeldt-aist do you think you can do it?"},{"author":"affeldt-aist","date":"2020-10-09T12:11:42Z","comment":"> > The definition of `>=< y` in ssrnum should also be changed.\r\n> \r\n> @affeldt-aist do you think you can do it?\r\n\r\nI'll try to by monday.\r\n"},{"author":"pi8027","date":"2020-10-22T02:21:31Z","comment":"@CohenCyril Can you confirm the last commit and merge this PR?"}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":592,"state":"closed","open_date":"2020-09-10T17:01:40Z","update_date":"2020-09-29T11:24:58Z","discussion":[{"author":"chdoc","date":"2020-09-16T10:13:54Z","comment":"@CohenCyril @gares can I get an assignee? "},{"author":"CohenCyril","date":"2020-09-16T10:30:16Z","comment":"@ggonthier @thery could you review this PR?"},{"author":"thery","date":"2020-09-29T07:02:01Z","comment":"@chdoc if you change the wording as sugested by @gares I think we can merge this PR"},{"author":"chdoc","date":"2020-09-29T09:15:18Z","comment":"Reworded and rebased. "},{"author":"CohenCyril","date":"2020-09-29T10:51:16Z","comment":"@thery waiting for your \"green tick\"  :heavy_check_mark:  :wink:"},{"author":"thery","date":"2020-09-29T10:53:14Z","comment":":heavy_check_mark:\r\n"},{"author":"CohenCyril","date":"2020-09-29T11:23:10Z","comment":"... I meant \"Approve PR\" and stuff, but that works for me too."}],"tags":[{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"pi8027","number":591,"state":"closed","open_date":"2020-09-10T12:29:19Z","update_date":"2020-10-10T16:58:56Z","discussion":[{"author":"CohenCyril","date":"2020-09-10T12:37:49Z","comment":"I am curious about the new performances..."},{"author":"pi8027","date":"2020-09-10T12:44:48Z","comment":"Yes. It will be nice to have benchmarks, including this commented out proof: https://github.com/math-comp/math-comp/blob/c2e7bad5c95a11f42f9f6d282ee2e5d84e27cbed/mathcomp/field/fieldext.v#L1584-L1592"},{"author":"pi8027","date":"2020-09-10T13:09:02Z","comment":"The source of CI failure seems to be coq/coq#9508 which has been fixed in coq/coq#9509. I see there is a possible fix, but since we are about to drop compatibility with Coq (< 8.10), I would rather stop supporting Coq 8.7 and 8.8."},{"author":"pi8027","date":"2020-09-17T08:47:29Z","comment":"Here are some benchmarking results using Coq 8.12.0:\r\n- MathComp `master` (c2e7bad)\r\n  ```\r\n  make test-suite  1072.06s user 20.45s system 99% cpu 18:19.47 total\r\n  ```\r\n- MathComp `primitive-class-records` (a4cb449)\r\n  ```\r\n  make test-suite  1004.05s user 21.26s system 99% cpu 17:12.96 total\r\n  ```\r\n- Odd order (689f07b) with MathComp `master`\r\n  ```\r\n  make  1323.96s user 11.20s system 99% cpu 22:24.46 total\r\n  ```\r\n- Odd order with MathComp `primitive-class-records`\r\n  ```\r\n  make  1318.69s user 11.22s system 99% cpu 22:18.43 total\r\n  ```\r\n\r\nSo it seems that this PR improves the performance of conversion and/or inference regarding packed classes."},{"author":"CohenCyril","date":"2020-09-17T13:59:10Z","comment":"> Here are some benchmarking results using Coq 8.12.0:\r\n> \r\n> * MathComp `master` ([c2e7bad](https://github.com/math-comp/math-comp/commit/c2e7bad5c95a11f42f9f6d282ee2e5d84e27cbed))\r\n>   ```\r\n>   make test-suite  1072.06s user 20.45s system 99% cpu 18:19.47 total\r\n>   ```\r\n> * MathComp `primitive-class-records` ([a4cb449](https://github.com/math-comp/math-comp/commit/a4cb44953aaf82a3e568e8577ef70cb38f4d9803))\r\n>   ```\r\n>   make test-suite  1004.05s user 21.26s system 99% cpu 17:12.96 total\r\n>   ```\r\n> * Odd order (689f07b) with MathComp `master`\r\n>   ```\r\n>   make  1323.96s user 11.20s system 99% cpu 22:24.46 total\r\n>   ```\r\n> * Odd order with MathComp `primitive-class-records`\r\n>   ```\r\n>   make  1318.69s user 11.22s system 99% cpu 22:18.43 total\r\n>   ```\r\n> \r\n> So it seems that this PR improves the performance of conversion and/or inference regarding packed classes.\r\n\r\nI would rather say the benchmark does not reveal significant impact.\r\nWhat about: https://github.com/math-comp/math-comp/blob/c2e7bad5c95a11f42f9f6d282ee2e5d84e27cbed/mathcomp/field/fieldext.v#L1584-L1592?"},{"author":"pi8027","date":"2020-09-23T07:38:00Z","comment":"> I would rather say the benchmark does not reveal significant impact.\r\n> What about:\r\n> \r\n> https://github.com/math-comp/math-comp/blob/c2e7bad5c95a11f42f9f6d282ee2e5d84e27cbed/mathcomp/field/fieldext.v#L1584-L1592\r\n> \r\n> ?\r\n\r\nIn Coq 8.12 and MathComp `master`, it takes 4.304 seconds. In this PR, it takes 3.284 seconds."},{"author":"CohenCyril","date":"2020-09-25T12:28:58Z","comment":"@ggonthier do you agree?"},{"author":"CohenCyril","date":"2020-09-29T11:28:36Z","comment":"Since merging this PR will make us drop support for Coq < 8.9, I think it should be approved in the next meeting before being merged. But as for me, it's all good."},{"author":"pi8027","date":"2020-10-07T15:57:41Z","comment":"Shall we merge?"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":588,"state":"closed","open_date":"2020-09-09T23:20:20Z","update_date":"2020-09-28T14:05:22Z","discussion":[{"author":"pi8027","date":"2020-09-09T23:59:38Z","comment":"Since the removal does not break compilation, I think this fix is \"indirect\" in some sense. So it is probably better to redefine these big notations using `\\big[dual_join/dual_bottom]_` and `\\big[dual_meet/dual_top]_`. BTW, why we do not have `0^d` and `1^d` notations in the `order_scope`?"},{"author":"CohenCyril","date":"2020-09-10T00:03:18Z","comment":"> Since the removal does not break compilation, I think this fix is \"indirect\" in some sense. So it is probably better to redefine these big notations using `\\big[dual_join/dual_bottom]_` and `\\big[dual_meet/dual_top]_`.\r\n\r\nI am ok with the current fix but with a comment explaining the reason for the local notations (I think I did not see the point and deleted them because of that).\r\n\r\n> BTW, why we do not have 0^d and 1^d notations in the order_scope?\r\n\r\nForgetfulness? Let's add them."},{"author":"pi8027","date":"2020-09-10T14:05:24Z","comment":"Done."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":586,"state":"closed","open_date":"2020-09-08T20:26:45Z","update_date":"2020-11-16T20:02:37Z","discussion":[{"author":"CohenCyril","date":"2020-11-12T22:14:26Z","comment":"@Boutry @thery do you think there is a chance you have the time to do a review before the release?"},{"author":"Boutry","date":"2020-11-13T14:49:23Z","comment":"> @Boutry @thery do you think there is a chance you have the time to do a review before the release?\r\n\r\nI will try and do it by Monday. Do you have examples of reviews? I checked some of the closed PR and there were few comments. So I am still a bit unclear about how a review should look like. (I looked at the checklist though.)"},{"author":"CohenCyril","date":"2020-11-13T16:33:33Z","comment":"I guess you could take example from similar PRs (some went through as they were, others required more work):\r\n- https://github.com/math-comp/math-comp/pull/618\r\n- https://github.com/math-comp/math-comp/pull/585\r\n- https://github.com/math-comp/math-comp/pull/574\r\n- https://github.com/math-comp/math-comp/pull/558"},{"author":"Boutry","date":"2020-11-16T15:48:16Z","comment":"> I guess you could take example from similar PRs (some went through as they were, others required more work):\r\n> \r\n> * #618\r\n> * #585\r\n> * #574\r\n> * #558\r\n\r\nThank you for the links. I believe line 284 in the Changelog belongs to another PR. Aside from that everything looks good to me."},{"author":"CohenCyril","date":"2020-11-16T16:20:44Z","comment":"@Boutry I attended the issue, thanks for pointing it out.\r\n\r\nPlease click on \"Files changed\" , then \"Review changes\", then type a review and click on \"Approve\", or if you changed your mind \"Comment\" or \"Request Changes\". Then ask a core developer to merge if you accepted, by tagging `@math-comp/core`."},{"author":"Boutry","date":"2020-11-16T16:29:47Z","comment":"Doesn't Laurent need to approve it as well?"},{"author":"CohenCyril","date":"2020-11-16T16:43:03Z","comment":"> Doesn't Laurent need to approve it as well?\r\n\r\nAsk @ybertot "},{"author":"Boutry","date":"2020-11-16T16:45:00Z","comment":"He just called me and seems fine with just my approval. Thank you for the help!"},{"author":"CohenCyril","date":"2020-11-16T16:50:44Z","comment":"@math-comp/core when CI passes, I guess you can merge. Grazie mille"},{"author":"Boutry","date":"2020-11-16T17:33:53Z","comment":"CI passed."},{"author":"gares","date":"2020-11-16T20:02:17Z","comment":"I don't get exactly how this merge process works, but I guess che posso premere il bottone"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":585,"state":"closed","open_date":"2020-09-08T19:54:17Z","update_date":"2020-09-29T22:59:55Z","discussion":[{"author":"CohenCyril","date":"2020-09-29T11:40:37Z","comment":"@thery are you ok with a merge?"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":584,"state":"closed","open_date":"2020-09-08T19:50:36Z","update_date":"2020-10-29T03:04:46Z","discussion":[{"author":"CohenCyril","date":"2020-10-21T13:56:26Z","comment":"I fixed the typo"},{"author":"CohenCyril","date":"2020-10-25T12:40:37Z","comment":"@gares any obstacle left to merging?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":583,"state":"closed","open_date":"2020-09-08T14:40:31Z","update_date":"2020-10-22T01:31:28Z","discussion":[{"author":"CohenCyril","date":"2020-09-09T11:58:50Z","comment":"@thery, @affeldt-aist I find `commmx` particularily unreadable because of the sequence of three `m`, I just thought I could name it `mxcomm` instead. WDYT?\r\n\r\nEDIT: however, I use e.g. `mx1` and `1mx` to specify sides, how should I fix that? `mxcommx1` vs `mxcomm1x` or `mxcomm1r` vs `mxcomm1l` or  `mxcomm1` vs `mxcom1m`? Or should I just keep `commmx`?"},{"author":"thery","date":"2020-09-09T14:28:33Z","comment":"I'd prefer `comm_mx`  to `mxcomm`"},{"author":"affeldt-aist","date":"2020-09-10T01:03:17Z","comment":"> I'd prefer comm_mx to mxcomm\r\n\r\nIt also seems to me more homogeneous because there seems to be relatively few definitions that start with the `mx` prefix (`mxvec`, `mxtrace`) and even in those cases there seems to be a tendency to put `mx` as a suffix (e.g., Lemma `trace_mx11`)."},{"author":"CohenCyril","date":"2020-09-27T12:54:46Z","comment":"fixed @affeldt-aist @thery "},{"author":"thery","date":"2020-09-28T09:17:12Z","comment":"@CohenCyril do you want to squash your commit before I merge?"},{"author":"CohenCyril","date":"2020-09-28T12:24:07Z","comment":"@thery \r\n\r\n> @CohenCyril do you want to squash your commit before I merge?\r\n\r\ndone"},{"author":"thery","date":"2020-09-29T06:55:36Z","comment":"@affeldt-aist  ok to merge?"},{"author":"affeldt-aist","date":"2020-09-29T07:06:36Z","comment":"> @affeldt-aist ok to merge?\r\n\r\nAren't `scalar_mx_comm` and `comm_mxC` the same lemmas?\r\n"},{"author":"thery","date":"2020-09-29T07:09:09Z","comment":"@affeldt-aist  ok we wait for @CohenCyril reaction"},{"author":"affeldt-aist","date":"2020-09-29T07:12:38Z","comment":"> @affeldt-aist ok we wait for @CohenCyril reaction\r\n\r\nI asked the same question yesterday and was happy with the answer but know I wonder is this answer was really an answer to my question. Anyway, the code has changed in between... Sorry for the poor follow-up. :-(\r\n\r\n"},{"author":"CohenCyril","date":"2020-09-29T10:54:46Z","comment":"> > @affeldt-aist ok we wait for @CohenCyril reaction\r\n> \r\n> I asked the same question yesterday and was happy with the answer but know I wonder is this answer was really an answer to my question. Anyway, the code has changed in between... Sorry for the poor follow-up. :-(\r\n\r\nNo you are right, I misread your question...\r\n"},{"author":"CohenCyril","date":"2020-09-29T10:56:21Z","comment":"`scalar_mx_comm` and `comm_mxC` are exactly the same now! I guess `scalar_mx_comm` should be deprecated in favor of `comm_mxC`. Let me do that, and thanks for insisting."},{"author":"thery","date":"2020-10-21T19:26:04Z","comment":"@affeldt-aist  ok for merging?"},{"author":"affeldt-aist","date":"2020-10-22T01:31:09Z","comment":"> @affeldt-aist ok for merging?\r\n\r\nYes."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":582,"state":"closed","open_date":"2020-09-08T01:59:47Z","update_date":"2020-09-29T11:37:31Z","discussion":[{"author":"CohenCyril","date":"2020-09-28T08:42:06Z","comment":"> I think `eq_map_mx_id` might be a better name, but I'm not sure. Except that, it looks good to me.\r\n\r\nThe `eq` in the name is not for the equality in the conclusion, but the equality in the hypothesis. In the same way one reads `map_mx_id` as \"`map_mx` applied to `id` is equal to something\", one should read `map_mx_eq_id` as \"`map_mx` applied to something which is equal to `id`, is equal to something\"."},{"author":"CohenCyril","date":"2020-09-28T12:32:34Z","comment":"Actually, after performing the change in `poly.v` I realized `map_poly_id` was never used, and I revised the uses of `map_mx_id` in my developments. And in fact, as I set the implicits `(map_mx_eq_id id)` does exactly the same job as `map_mx_id` which is used less often.\r\nSo ... I backtrack and I will come back with a new set of lemmas."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":578,"state":"closed","open_date":"2020-09-03T12:23:35Z","update_date":"2020-09-09T23:25:37Z","discussion":[{"author":"CohenCyril","date":"2020-09-03T12:24:14Z","comment":"@affeldt-aist would you be ok to merge it with #576 and document?"},{"author":"CohenCyril","date":"2020-09-04T15:23:48Z","comment":"LGTM except I'm an author too :laughing: "},{"author":"CohenCyril","date":"2020-09-05T10:38:57Z","comment":"> LGTM except I'm an author too\r\n\r\nI meant: I cannot review so the fact it looks good to me is irrelevant."},{"author":"CohenCyril","date":"2020-09-05T14:15:51Z","comment":"(squashed and rebased)"},{"author":"affeldt-aist","date":"2020-09-05T14:43:19Z","comment":"I am wondering whether the explanation for the naming of the contra lemmas shouldn't go also into the contributing guide at the root of the repo."},{"author":"CohenCyril","date":"2020-09-05T16:53:18Z","comment":"> I am wondering whether the explanation for the naming of the contra lemmas shouldn't go also into the contributing guide at the root of the repo.\r\n\r\nIt would be more appropriate in a general documentation of ssrnat/ssrnum I think. It can be done as a new PR though."},{"author":"CohenCyril","date":"2020-09-07T07:50:42Z","comment":"> LGTM. However, given the large number of largely boring lemmas, I wonder whether it would be possible to introduce a `contra:` tactic that automatically picks the right contra lemma, or even constructs it from the shape of the goal. However, I'm not sure how well that would work with the `comparable_*` lemmas.\r\n\r\nI see how we could do this using canonical structures / typeclasses ... but for now, let's keep it like this."},{"author":"CohenCyril","date":"2020-09-07T07:51:32Z","comment":"Please open an issue / feature request with your nice idea  :+1: "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":577,"state":"closed","open_date":"2020-09-03T11:02:32Z","update_date":"2020-09-08T09:07:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":576,"state":"closed","open_date":"2020-09-03T02:59:45Z","update_date":"2020-09-04T03:52:20Z","discussion":[{"author":"CohenCyril","date":"2020-09-03T09:34:04Z","comment":"Oh I already have that, I just did not  PR it yet...\r\nEDIT: #578"},{"author":"affeldt-aist","date":"2020-09-04T03:52:14Z","comment":"This PR will be closed because it has been merged with PR #578 "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":575,"state":"closed","open_date":"2020-09-03T02:30:11Z","update_date":"2020-09-04T10:31:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":574,"state":"closed","open_date":"2020-09-03T00:34:59Z","update_date":"2020-09-29T10:50:06Z","discussion":[{"author":"thery","date":"2020-09-28T09:48:36Z","comment":"With all these force pushed I am a bit lost here. Is there anything that prevents to merge this one?\r\n"},{"author":"CohenCyril","date":"2020-09-28T14:18:43Z","comment":"> With all these force pushed I am a bit lost here. Is there anything that prevents to merge this one?\r\n\r\nYes, many merges happened, and I keep rebasing..."},{"author":"CohenCyril","date":"2020-09-28T14:22:46Z","comment":"@thery I rebased again."},{"author":"CohenCyril","date":"2020-09-28T14:27:45Z","comment":"Now the error is that gitlab CI is saturated with jobs (@gares that would be a good enough reason for me to just drop Coq < 8.10 support :wink:)"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":573,"state":"closed","open_date":"2020-09-02T22:51:56Z","update_date":"2020-09-08T12:07:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":572,"state":"closed","open_date":"2020-09-02T21:08:43Z","update_date":"2020-09-04T10:30:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":571,"state":"closed","open_date":"2020-09-02T18:36:57Z","update_date":"2020-09-03T01:07:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":570,"state":"closed","open_date":"2020-09-02T18:12:31Z","update_date":"2020-09-03T17:51:02Z","discussion":[{"author":"affeldt-aist","date":"2020-09-03T03:05:13Z","comment":"This reminds me of this issue reported to real-closed: https://github.com/math-comp/real-closed/issues/1"},{"author":"CohenCyril","date":"2020-09-03T11:26:09Z","comment":"> This reminds me of this issue reported to real-closed: [math-comp/real-closed#1](https://github.com/math-comp/real-closed/issues/1)\r\n\r\nIndeed, cf #577 "},{"author":"thery","date":"2020-09-03T16:13:38Z","comment":"@CohenCyril  I ve meged this pull request, I was wondering if the CHANGELOG should be \r\nshould not collect the changes per files rather than being a list of changes."},{"author":"CohenCyril","date":"2020-09-03T16:40:03Z","comment":"Due to the new policy on changelogs, (cf minutes of the last meeting) what you say is discouraged. The editing process you described can be done at release time."},{"author":"thery","date":"2020-09-03T16:54:42Z","comment":"@CohenCyril  hope it will be done otherwise the CHANGELOG is unreadable "},{"author":"CohenCyril","date":"2020-09-03T17:51:02Z","comment":"> @CohenCyril hope it will be done otherwise the CHANGELOG is unreadable\r\n\r\nSure, I will add it to the HOWTO release."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":569,"state":"closed","open_date":"2020-09-02T17:48:10Z","update_date":"2020-09-03T12:01:19Z","discussion":[{"author":"CohenCyril","date":"2020-09-03T01:10:50Z","comment":"> `Merge branch 'master' into mx0`\r\n\r\nThis is suspicious..."},{"author":"affeldt-aist","date":"2020-09-03T01:12:39Z","comment":"Indeed, this is the result of using the github interface to get rid of the conflict, this is not a useful commit, maybe better to solve the conflict offline and push force..."},{"author":"CohenCyril","date":"2020-09-03T01:13:43Z","comment":"> this is the result of using the github interface to get rid of the conflict\r\n\r\nPlease do not use github interface to solve conflict...\r\nI rebased and force pushed."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":568,"state":"closed","open_date":"2020-09-02T12:30:40Z","update_date":"2020-09-28T14:05:26Z","discussion":[{"author":"ybertot","date":"2020-09-07T07:22:23Z","comment":"I don't understand what is the situation with CI, I did not see any successful checks."},{"author":"CohenCyril","date":"2020-09-07T07:28:23Z","comment":"Strange... I can see it and [it is passing](https://gitlab.com/math-comp/math-comp/-/pipelines/185778684) though.  You can merge."},{"author":"ybertot","date":"2020-09-07T07:52:35Z","comment":"Concerning CI, I was not looking at the right place.  Now, I see it."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":567,"state":"closed","open_date":"2020-09-02T12:21:43Z","update_date":"2020-09-08T05:14:03Z","discussion":[{"author":"gares","date":"2020-09-07T14:56:05Z","comment":"Please rebase"},{"author":"chdoc","date":"2020-09-07T15:04:11Z","comment":"As it happens, I actually found some use of `split_find` in my development and I noticed that it is a little inconvenient to have the `s` in the `_spec` variant types to be the first argument, because the equation for `s` is the most meaningful and the equation-generating case starts counting from the right. This leads to something like: \r\n```\r\ncase def_s : _ _ _ _ / (split_find_nth x has_p) => [/= nz s1 s2 nz_p Ns2].\r\n```\r\nOn the other hand, the existing split lemmas have the same issue."},{"author":"CohenCyril","date":"2020-09-07T16:07:37Z","comment":"@chdoc, `s` is non-discriminant because it is an index which is a variable, so putting it last would screw up the search for another index."},{"author":"CohenCyril","date":"2020-09-07T23:02:12Z","comment":"> Please rebase\r\n\r\n@gares done"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":566,"state":"closed","open_date":"2020-09-01T13:18:29Z","update_date":"2020-09-08T18:14:58Z","discussion":[{"author":"thery","date":"2020-09-08T15:24:53Z","comment":"@CohenCyril @ybertot as soon the check is green I'll merge the PR\r\n"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":565,"state":"closed","open_date":"2020-09-01T13:07:21Z","update_date":"2020-09-03T13:39:47Z","discussion":[{"author":"CohenCyril","date":"2020-09-01T13:08:04Z","comment":"@amahboubi @LaurenceRideau @gares can one of you assign themself?"},{"author":"CohenCyril","date":"2020-09-02T10:06:34Z","comment":"@thery I removed the theorems with unintuitive names. If one finds them useful, we can think of a better name and add them back later on."},{"author":"CohenCyril","date":"2020-09-03T13:10:58Z","comment":"@gares, @thery merge?"},{"author":"thery","date":"2020-09-03T13:33:47Z","comment":"@CohenCyril fine with me"},{"author":"CohenCyril","date":"2020-09-03T13:36:57Z","comment":"> @CohenCyril fine with me\r\n\r\nYou are not the author, you can merge ;)"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":564,"state":"closed","open_date":"2020-09-01T12:53:01Z","update_date":"2020-09-03T12:55:15Z","discussion":[{"author":"CohenCyril","date":"2020-09-01T12:53:39Z","comment":"@thery @amahboubi @strub can one of you assign themself?"},{"author":"thery","date":"2020-09-03T11:14:49Z","comment":"@CohenCyril  what has changed since @ybertot  review?"},{"author":"CohenCyril","date":"2020-09-03T11:20:01Z","comment":"> @CohenCyril what has changed since @ybertot review?\r\n\r\nJust a rebase"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":563,"state":"closed","open_date":"2020-09-01T12:37:29Z","update_date":"2020-09-03T16:16:27Z","discussion":[{"author":"CohenCyril","date":"2020-09-01T12:38:19Z","comment":"@LaurenceRideau @strub @amahboubi could one of you assign themself?"},{"author":"CohenCyril","date":"2020-09-03T13:10:45Z","comment":"@thery merge?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":562,"state":"closed","open_date":"2020-09-01T12:25:56Z","update_date":"2020-09-07T19:53:04Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":561,"state":"closed","open_date":"2020-09-01T12:22:17Z","update_date":"2020-09-01T12:22:30Z","discussion":[{"author":"CohenCyril","date":"2020-09-01T12:22:29Z","comment":"Mistake"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":560,"state":"closed","open_date":"2020-09-01T12:10:54Z","update_date":"2020-09-03T11:24:22Z","discussion":[{"author":"CohenCyril","date":"2020-09-01T12:13:06Z","comment":"@thery @gares @LaurenceRideau can one of you assign themself?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":559,"state":"closed","open_date":"2020-09-01T12:06:58Z","update_date":"2020-09-01T21:19:23Z","discussion":[{"author":"CohenCyril","date":"2020-09-01T12:08:53Z","comment":"@pi8027 @thery @affeldt-aist can one of you assign themself?"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":558,"state":"closed","open_date":"2020-09-01T11:20:43Z","update_date":"2020-09-03T13:55:06Z","discussion":[{"author":"CohenCyril","date":"2020-09-01T11:22:12Z","comment":"@gares, @pi8027, @strub can one of you assign themselves?"},{"author":"gares","date":"2020-09-01T11:51:39Z","comment":"It looks ok to me, but I'm not in love with the `are_` part of the name. Is it similar to something already existing?"},{"author":"chdoc","date":"2020-09-01T12:37:24Z","comment":"Also, is it useful to have `T : nonPropType` rather than `T : eqType` while requiring `r : rel T` to be a boolean relation? I mean, the proof of `are_allpairs_cons` is nifty, but I would have expected a simpler proof based in `are_allpairsP`. "},{"author":"CohenCyril","date":"2020-09-01T12:43:31Z","comment":"> Also, is it useful to have `T : nonPropType` rather than `T : eqType` while requiring `r : rel T` to be a boolean relation? I mean, the proof of `are_allpairs_cons` is nifty, but I would have expected a simpler proof based in `are_allpairsP`.\r\n\r\nIt may happen that a relation is decidable even on some non discrete types (e.g. a pair of an ordered type with a no discrete type), and I would like to preserve the full generality of the theorem on such occurences."},{"author":"CohenCyril","date":"2020-09-01T12:45:32Z","comment":"> It looks ok to me, but I'm not in love with the `are_` part of the name. Is it similar to something already existing?\r\n\r\nI went back and forth a lot in the naming: the working name was the ugly `all11` (hence the 80 character overflow caused by sed)...\r\nI am open to suggestions on the naming but I was pretty happy with this one being meaningful (\"Are all pairs satisfying r on s?\") and exposing the implementation using `allpairs` in the name itself.."},{"author":"CohenCyril","date":"2020-09-01T12:46:47Z","comment":"Actually I would have gone for `is` except `are` is grammatically more accurate (since it is about a relation, not a predicate)."},{"author":"chdoc","date":"2020-09-01T13:06:19Z","comment":"Well, the predicate states that \"all pairs of `s` are _in_ the relation `r`\" (using the usual mathematical speak of relations as sets/predicates). So how about `allpairs_in r s`? For this one even the partial application `allpairs_in r` seems reasonable to me. Unfortunately `in` is used differently elsewhere. "},{"author":"chdoc","date":"2020-09-01T13:58:46Z","comment":"In any event, `are_allpairs r s` is a proposition not a question. So even `allpairs_are r s` (\"all pairs _are_ r(-related)\") seems preferable to me."},{"author":"gares","date":"2020-09-01T14:07:38Z","comment":"> So even `allpairs_are r s` (\"all pairs _are_ r(-related)\") seems preferable to me.\r\n\r\n+1\r\n\r\nTo me the thing is messy because `allpairs` does not really build pairs but steals the name. If we had a `pairs` thing that builds the sequence of all pairs, we could use allpairs for your new concept, eg `allpairs r xs := all (fixup r) (pairs xs xs)`."},{"author":"chdoc","date":"2020-09-01T14:27:59Z","comment":"> To me the thing is messy because `allpairs` does not really build pairs but steals the name.\r\n\r\nWhile the string \"allpairs\" appears in a considerable number of of lemmas, the definition `allpairs` seems to be virtually unused, because `allpairs` is (almost) always inlined. The only lemma about `allpairs` in `ssreflect` and `algebra` appears to be `allpairs_tupleP`. :thinking: "},{"author":"CohenCyril","date":"2020-09-01T21:28:55Z","comment":"> > To me the thing is messy because `allpairs` does not really build pairs but steals the name.\r\n> \r\n> While the string \"allpairs\" appears in a considerable number of of lemmas, the definition `allpairs` seems to be virtually unused, because `allpairs` is (almost) always inlined. The only lemma about `allpairs` in `ssreflect` and `algebra` appears to be `allpairs_tupleP`.\r\n\r\n`allpairs` actually immediately unfolds to the idiom `[seq f x y | x <- s, y <- t x]` which gives its name to the lemmas, and it is a rather historic convention (the self-expanding definition is newer as far as I remember). Moreover it indeed does not form pairs but applies a function symbol `f` to them (and this function symbol can be dependent), sometimes it's a `pair`, sometimes a `sigT` and sometimes something else, so it makes it more flexible to let `f` variable.\r\n\r\nI'm all in favor of `allpairs_are`anyway!\r\n\r\n"},{"author":"gares","date":"2020-09-02T07:51:10Z","comment":"I saw that, allpairs maps a function overs all the pairs, which could be named, to me, map_allpairs. Anyway, I'm OK with the renaming proposed by @chdoc "},{"author":"CohenCyril","date":"2020-09-02T10:07:39Z","comment":"I fixed the names, made the proof shorter and more readable and introduced the `mkseqP` idiom."},{"author":"CohenCyril","date":"2020-09-02T11:48:13Z","comment":"I have a new name suggestion: how about `allrel`?\r\nPros:\r\n- stands for \"all related\"\r\n- has `rel` and `all` in the name (and no more)\r\n- shorter\r\n"},{"author":"chdoc","date":"2020-09-02T11:50:41Z","comment":"> I have a new name suggestion: how about `allrel`?\r\n\r\nI approve, in particular because it avoids the `_`, leading to nicer lemma names. "},{"author":"CohenCyril","date":"2020-09-03T13:13:21Z","comment":"@gares all good?"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":557,"state":"closed","open_date":"2020-08-28T22:35:15Z","update_date":"2020-09-07T17:22:31Z","discussion":[],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"CohenCyril","number":556,"state":"closed","open_date":"2020-08-25T12:52:28Z","update_date":"2020-08-28T14:17:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"chdoc","number":555,"state":"closed","open_date":"2020-08-20T09:01:02Z","update_date":"2020-10-10T16:59:22Z","discussion":[{"author":"CohenCyril","date":"2020-09-27T13:49:12Z","comment":"Please rebase"},{"author":"CohenCyril","date":"2020-09-27T14:06:24Z","comment":"@chdoc I will merge after the CI passes. After than could you open an issue for 1.13.0 to remove the deprecated symbol?"}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":553,"state":"closed","open_date":"2020-08-11T14:12:46Z","update_date":"2020-08-19T14:35:00Z","discussion":[{"author":"chdoc","date":"2020-08-13T09:00:46Z","comment":"@CohenCyril I just realized that this PR subsumes #527 . I needed to add some more instanced of `(only parsing)` though, to get rid of all warnings. "},{"author":"CohenCyril","date":"2020-08-13T14:51:44Z","comment":"I do not think it subsumes #527 which also added a scope to the notations..."},{"author":"chdoc","date":"2020-08-13T15:09:20Z","comment":"> I do not think it subsumes #527 which also added a scope to the notations...\r\n\r\nIndeed, I overlooked the scope annotations. Still, there are more than just the three notations modified in #527 that cause warnings. Feel free to adapt as you see fit. "},{"author":"CohenCyril","date":"2020-08-13T15:19:03Z","comment":"@chdoc I will merge this one, and we can adapt #527 later (there was an issue with the rescoping)"}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":552,"state":"closed","open_date":"2020-08-11T12:37:08Z","update_date":"2020-08-13T15:20:43Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":551,"state":"closed","open_date":"2020-08-11T01:56:07Z","update_date":"2020-09-03T12:30:07Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"jashug","number":550,"state":"closed","open_date":"2020-07-29T17:40:14Z","update_date":"2020-08-20T15:43:43Z","discussion":[{"author":"CohenCyril","date":"2020-08-13T15:15:15Z","comment":"@jashug, thanks for your contribution! Would you mind rebasing it?"},{"author":"CohenCyril","date":"2020-08-13T15:28:37Z","comment":"Thanks @jashug "},{"author":"jashug","date":"2020-08-19T17:08:56Z","comment":"This and math-comp/odd-order#25 are ready to go."},{"author":"maximedenes","date":"2020-08-20T14:31:03Z","comment":"@CohenCyril @gares do you mind merging this? Thanks!"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":548,"state":"open","open_date":"2020-07-16T05:07:41Z","update_date":"2021-10-07T10:40:08Z","discussion":[{"author":"CohenCyril","date":"2020-08-13T15:11:49Z","comment":"@pi8027 I'm a bit hesitant about that one, it should be discussed at the MC meeting and go hand in hand with an improvement of Coq search tool to index the delta-expansion of certain statments..."},{"author":"pi8027","date":"2020-08-13T15:37:30Z","comment":"@CohenCyril I agree. This PR also breaks odd-order by changing argument scopes of some lemmas, but putting all the scope information back by `Arguments` command seems too much to do."},{"author":"pi8027","date":"2020-09-23T10:30:43Z","comment":"For the record, there was a discussion about this PR in [the last MC call](https://github.com/math-comp/math-comp/wiki/Minutes-September-23-2020)."},{"author":"pi8027","date":"2021-05-11T01:27:14Z","comment":"Should I consider cherry-picking non-problematic and useful changes from this PR, to include in 1.13.0?"}],"tags":[{"tag":"needs: fix","description":"PR that needs to be fix (generally because reviewers asked to)."}],"pull_requests":[]},{"author":"pi8027","number":547,"state":"closed","open_date":"2020-07-14T04:38:27Z","update_date":"2020-08-20T08:35:10Z","discussion":[{"author":"CohenCyril","date":"2020-08-13T15:17:54Z","comment":"@pi8027 can you rebase?"},{"author":"pi8027","date":"2020-08-13T15:18:53Z","comment":"@CohenCyril Yes. I will also write a changelog entry."},{"author":"pi8027","date":"2020-08-13T15:32:50Z","comment":"Done. Ready for review."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":546,"state":"closed","open_date":"2020-07-09T21:29:26Z","update_date":"2020-10-13T20:11:00Z","discussion":[{"author":"pi8027","date":"2020-07-10T20:55:20Z","comment":"I think we have observed another similar issue in https://github.com/math-comp/analysis/pull/205#discussion_r453067372. If `class_of` objects are primitive records (or if we use the flat variant of packed classes), this is not the case anymore. See also: https://github.com/math-comp/math-comp/pull/462#issuecomment-598130155."},{"author":"pi8027","date":"2020-07-12T20:45:36Z","comment":"Now this PR also fixes the conversion issue of regular instances but is a bit painful to merge as it is. I guess it is better to turn all the `class_of` objects into primitive records."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":545,"state":"closed","open_date":"2020-07-08T22:09:29Z","update_date":"2020-08-13T15:25:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"chdoc","number":542,"state":"closed","open_date":"2020-06-26T10:56:33Z","update_date":"2020-08-11T01:57:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"chdoc","number":541,"state":"closed","open_date":"2020-06-26T09:26:38Z","update_date":"2020-08-11T00:49:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"thery","number":540,"state":"closed","open_date":"2020-06-24T15:30:11Z","update_date":"2023-01-13T14:02:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"thery","number":539,"state":"closed","open_date":"2020-06-24T14:05:52Z","update_date":"2023-01-13T14:07:19Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":537,"state":"closed","open_date":"2020-06-16T21:47:22Z","update_date":"2020-09-15T06:57:58Z","discussion":[{"author":"CohenCyril","date":"2020-06-17T13:06:03Z","comment":"@thery I cannot review this one as I am a coauthor. Can you review it?"},{"author":"thery","date":"2020-06-17T13:13:20Z","comment":"> @thery I cannot review this one as I am a coauthor. Can you review it?\r\n\r\nno problem"},{"author":"thery","date":"2020-06-24T15:13:11Z","comment":":+1: if you clean the history, I merge"},{"author":"CohenCyril","date":"2020-06-24T16:10:28Z","comment":">  if you clean the history, I merge\r\n\r\n~~You can \"Squash and merge\", to clear the history using github's functionality~~\r\n\r\nI squashed"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":536,"state":"closed","open_date":"2020-06-15T17:26:19Z","update_date":"2020-08-25T16:38:01Z","discussion":[{"author":"CohenCyril","date":"2020-06-15T18:22:24Z","comment":"@pi8027 thanks for addressing these issues!\r\n\r\n> * the `build` prerequisite of `test_suite/test_hierarchy_all.v` should be order only (right?),\r\n\r\nI did not understand this sentence, what do you mean by *order only*?\r\n"},{"author":"CohenCyril","date":"2020-07-08T14:36:51Z","comment":"@pi8027 is this PR ready for reviews?"},{"author":"pi8027","date":"2020-07-08T14:38:36Z","comment":"@CohenCyril Yes."},{"author":"CohenCyril","date":"2020-07-08T14:39:21Z","comment":"@maximedenes could you have a look or would you prefer me to ask another review?"},{"author":"maximedenes","date":"2020-08-25T16:38:00Z","comment":"> could you have a look or would you prefer me to ask another review?\r\n\r\n@CohenCyril Sorry, this went completely below my radar."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":535,"state":"closed","open_date":"2020-06-10T13:38:04Z","update_date":"2020-06-10T13:38:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":534,"state":"closed","open_date":"2020-06-09T13:50:52Z","update_date":"2020-06-09T13:54:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":533,"state":"closed","open_date":"2020-06-09T13:01:38Z","update_date":"2020-09-15T06:59:43Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":532,"state":"closed","open_date":"2020-06-08T23:17:59Z","update_date":"2020-06-09T04:27:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":531,"state":"closed","open_date":"2020-06-08T15:31:03Z","update_date":"2020-06-08T20:02:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":530,"state":"closed","open_date":"2020-06-08T14:48:23Z","update_date":"2020-09-27T10:43:47Z","discussion":[{"author":"pi8027","date":"2020-06-16T11:46:39Z","comment":"What about fcsl-pcm?"},{"author":"anton-trunov","date":"2020-06-16T12:18:49Z","comment":"FWIW, coq-fcsl-pcm is fully compatible with Coq 8.12"},{"author":"pi8027","date":"2020-09-10T14:32:06Z","comment":"I hope the issue has been disappeared thanks to math-comp/finmap#71. @CohenCyril Could you rebase to refresh CI?"},{"author":"pi8027","date":"2020-09-27T02:28:20Z","comment":"Since there is no response here, let me commit my above suggestion to see if it works."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":528,"state":"closed","open_date":"2020-06-08T13:17:43Z","update_date":"2020-06-08T14:48:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":527,"state":"open","open_date":"2020-06-08T13:06:38Z","update_date":"2020-09-27T13:49:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":525,"state":"closed","open_date":"2020-06-08T12:12:08Z","update_date":"2020-06-08T12:47:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"erikmd","number":524,"state":"closed","open_date":"2020-06-07T19:25:55Z","update_date":"2020-06-08T10:27:02Z","discussion":[{"author":"erikmd","date":"2020-06-07T20:47:08Z","comment":"Note to @anton-trunov: in addition to the deploy jobs I had included a `ci-lemma-overloading-8.12` test job which failed just because the opam file in lemma-overloading must be updated.\r\nSo I'm going to open a PR (from the templates) in the lemma-overloading repo to support `8.12`, but before that one needs to wait that https://github.com/coq/opam-coq-archive/pull/1279 is merged."},{"author":"erikmd","date":"2020-06-07T21:38:28Z","comment":"(closing and reopening to relaunch the CI)"},{"author":"erikmd","date":"2020-06-07T23:01:07Z","comment":"the CI is green now :heavy_check_mark:"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":522,"state":"closed","open_date":"2020-06-05T23:30:28Z","update_date":"2020-09-15T06:58:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":521,"state":"closed","open_date":"2020-06-04T15:12:54Z","update_date":"2020-11-20T02:36:10Z","discussion":[{"author":"pi8027","date":"2020-11-20T02:34:21Z","comment":"@CohenCyril Did you PR this one to Coq? If you didn't, I will do that."},{"author":"CohenCyril","date":"2020-11-20T02:36:10Z","comment":"I did not..."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":520,"state":"closed","open_date":"2020-06-02T17:25:16Z","update_date":"2020-06-03T14:56:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":519,"state":"closed","open_date":"2020-06-02T13:55:02Z","update_date":"2020-06-08T13:10:19Z","discussion":[{"author":"ybertot","date":"2020-06-04T13:45:26Z","comment":"It ssems to me that nothing needs to be done concerning documentation to add in the headers? @CohenCyril do you confirm?\r\nBackporting should be coq/theories/ssr/ssrbool.v should be the subject of a separate issue, not necessarily tagged with the 1.11 milestone.  Do you agree?"},{"author":"CohenCyril","date":"2020-06-04T13:51:02Z","comment":"~~@ybertot a Changelog is still needed, I did not have time to do it so far.~~\r\nOh you did it @affeldt-aist, thanks!"},{"author":"CohenCyril","date":"2020-06-04T13:51:13Z","comment":"Otherwise, your statements are correct."},{"author":"CohenCyril","date":"2020-06-04T13:53:45Z","comment":"@affeldt-aist the changelog must be fixed: `homoRL_in`, `homoLR_in`, `homo_mono_in`, `monoLR_in`, `monoRL_in`, and   `can_mono_in` were not added but changed."},{"author":"CohenCyril","date":"2020-06-04T13:54:20Z","comment":"(one cannot witness it easily unless one takes a look at `coq/theories/ssr/ssrbool.v`)"},{"author":"affeldt-aist","date":"2020-06-07T11:03:06Z","comment":"What about the following backport ?\r\n\r\nhttps://github.com/affeldt-aist/coq/blob/ssrbool_backpart_MathComp1.11/theories/ssr/ssrbool.v\r\n\r\n(Branch: https://github.com/affeldt-aist/coq/tree/ssrbool_backpart_MathComp1.11)\r\n\r\n- I haven't copy-pasted the following part of the documentation:\r\n```\r\n(* --> These will become part of the core SSReflect library with Coq 8.11.    *)\r\n(* This file also anticipates a v8.11 change in the definition of simpl_pred  *)\r\n(* to T -> simpl_pred T. This change ensures that inE expands the definition  *)\r\n(* of r : simpl_rel along with the \\in, when rewriting in y \\in r x.          *)\r\n```\r\n- I changed the name of the constructor of `predType` to avoid a clash.\r\n- I could compile Coq, MathComp's master, and Analysis' maxr branch\r\n  + I observed that a few Grab Existential Variables are not need anymore\r\n\r\nSill, I haven't tested Analysis' ereal_pseudometric branch, that would be a better test but requires a merge with Analysis' maxr branch.\r\n"},{"author":"CohenCyril","date":"2020-06-07T16:57:22Z","comment":"@affeldt-aist please do not touch anything else than what is added in this PR.\r\nIn particular the `predType` stuff you can find in `math-comp/mathcomp/ssreflect/ssrbool.v` is a backward compatibility machinery for older versions of Coq and it is thus not necessary to copy to the Coq repo.\r\nIf there really is a bug, please do it in a separate commit."},{"author":"affeldt-aist","date":"2020-06-07T18:13:52Z","comment":"(Update of previous comment.) (Updated to include `Section HomoMonoMorphismFlip` and to fix a typo in the branch name.)\r\n\r\nhttps://github.com/affeldt-aist/coq/blob/ssrbool_backport_MathComp1.11/theories/ssr/ssrbool.v\r\n\r\n(Branch: https://github.com/affeldt-aist/coq/tree/ssrbool_backport_MathComp1.11)\r\n\r\nContains:\r\n- `Section CancelOn.` coming from this PR\r\n- `Section inj_can_sym_in_on.` coming from this PR\r\n- `Section MonoHomoMorphismTheory_in.` that comes from this PR (and that updates the homonymous section that was already in Coq's `ssrbool.v`)\r\n- `Section HomoMonoMorphismFlip.` that comes from MathComp's master\r\n\r\nIt does not contain:\r\n- the documentation updates\r\n- the code about `pred` and `rel` that shall stay in MathComp's master\r\n\r\nAs a matter of test, I could compile Coq, MathComp's master, and Analysis' maxr branch.\r\nI observed that a few Grab Existential Variables are not need anymore.\r\nSill, I haven't tested Analysis' ereal_pseudometric branch, that would be a better test but requires a merge with Analysis' maxr branch."},{"author":"CohenCyril","date":"2020-06-07T19:14:57Z","comment":"> * `Section HomoMonoMorphismFlip.` that is in MathComp's master\r\n\r\nI forgot about this, I guess it could be included too actually..."},{"author":"affeldt-aist","date":"2020-06-08T11:59:21Z","comment":"@CohenCyril is ok to merge this PR (so that we can do the release) and to PR (today?) to Coq with https://github.com/affeldt-aist/coq/tree/ssrbool_backport_MathComp1.11 "},{"author":"CohenCyril","date":"2020-06-08T12:02:57Z","comment":"As for #513 the PR to Coq is not so urgent."},{"author":"CohenCyril","date":"2020-06-08T12:03:38Z","comment":"We can open an issue as soon as this is merged, to backport both #513 and this."},{"author":"CohenCyril","date":"2020-06-08T12:13:48Z","comment":"> As a matter of test, I could compile Coq, MathComp's master, and Analysis' maxr branch.\r\n\r\nBTW I do not know how you tested but the proper test would be to compile (Coq with fixes) + (Mathcomp removing fixes) + stuff"}],"tags":[],"pull_requests":[]},{"author":"thery","number":517,"state":"closed","open_date":"2020-05-31T14:42:14Z","update_date":"2023-01-13T14:02:55Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":516,"state":"closed","open_date":"2020-05-30T03:47:51Z","update_date":"2020-06-06T08:09:24Z","discussion":[{"author":"CohenCyril","date":"2020-05-30T03:48:02Z","comment":"@affeldt-aist see the TODO"},{"author":"pi8027","date":"2020-06-04T06:02:39Z","comment":"I hope I will give a detailed review next week if it is not too late for 1.11.0."},{"author":"affeldt-aist","date":"2020-06-04T13:29:04Z","comment":"@CohenCyril @pi8027 Are we confident that the bugfix is ok? (We saw that it was tested with real-closed at least). Since we are late for the release, we would like to merge. Is it ok to defer further reviews to later?"},{"author":"CohenCyril","date":"2020-06-04T13:31:26Z","comment":"@affeldt-aist the bugfix is not okay until I finish porting math-comp/analysis, which is almost done."},{"author":"CohenCyril","date":"2020-06-04T22:57:31Z","comment":"@ybertot @affeldt-aist tested on analysis, this ready."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":514,"state":"closed","open_date":"2020-05-21T14:39:17Z","update_date":"2020-09-15T07:00:35Z","discussion":[{"author":"affeldt-aist","date":"2020-06-04T13:14:01Z","comment":"@CohenCyril Is the last change ok?"},{"author":"CohenCyril","date":"2020-06-04T15:35:56Z","comment":"@affeldt-aist `C` should qualify `dist` not `add` or `sub`"},{"author":"ybertot","date":"2020-06-05T06:54:47Z","comment":"Thanks to authors and reviewers!"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":513,"state":"closed","open_date":"2020-05-20T18:53:53Z","update_date":"2020-06-04T15:43:25Z","discussion":[{"author":"affeldt-aist","date":"2020-06-04T13:15:44Z","comment":"@CohenCyril Is it ok to merge or do you want to squash it before?"},{"author":"CohenCyril","date":"2020-06-04T15:33:44Z","comment":"you can hit the squash a merge button"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":511,"state":"closed","open_date":"2020-05-15T01:26:30Z","update_date":"2020-05-28T14:40:17Z","discussion":[{"author":"affeldt-aist","date":"2020-05-15T07:40:12Z","comment":"@CohenCyril what about adding it to the 1.11.0 milestone? (This is a low-risk PR.)"},{"author":"ybertot","date":"2020-05-15T07:42:34Z","comment":"Putting it in releases early will improve chances of collecting feedback from other users of nix (which are rare in the core math-comp dev team).\r\n"}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":509,"state":"closed","open_date":"2020-05-14T18:11:59Z","update_date":"2020-06-30T11:43:52Z","discussion":[{"author":"chdoc","date":"2020-05-26T10:14:05Z","comment":"I tried to incorporate the feedback from @CohenCyril , and I found two more lemmas `fcard_gt0P` and `fcard_gt1P`. The proof of the latter naturally makes use of `card_gt1P`. These are adapted/simplified from the `fourcolor` development, where one can find a specific instance for each of them (`fcard0P` and `fcard1P`)."},{"author":"chdoc","date":"2020-06-17T12:21:23Z","comment":"I wasn't sure about this, because the line already had 82 characters, now it gained another 6. And yes, I want a linter, too. :smile: "},{"author":"CohenCyril","date":"2020-06-17T12:25:43Z","comment":"> I wasn't sure about this, because the line already had 82 characters, now it gained another 6. And yes, I want a linter, too.\r\n\r\nOh ok, I should really checkout locally.\r\nIn the core mathcomp repo there is a strict rule about the 80 characters per line limit. So this line should be split anyway."},{"author":"chdoc","date":"2020-06-17T12:31:18Z","comment":"Well, running a `grep -n '.\\{81\\}' ssreflect/*.v` made me believe that the rule is not _that_ strict."},{"author":"CohenCyril","date":"2020-06-17T12:33:42Z","comment":"> Well, running a `grep -n '.\\{81\\}' ssreflect/*.v` made me believe that the rule is not _that_ strict.\r\n\r\nIt used to be, this is outrageous :wink:\r\nI will revive #163 ASAP."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"pi8027","number":507,"state":"closed","open_date":"2020-05-13T14:31:27Z","update_date":"2020-08-11T15:37:12Z","discussion":[{"author":"pi8027","date":"2020-06-16T13:48:36Z","comment":"Since I do not find a way to test the above 6 functions and think there is no reasonable test, this PR is ready for review."},{"author":"pi8027","date":"2020-08-11T04:39:43Z","comment":"Shall we merge this?"}],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":506,"state":"closed","open_date":"2020-05-13T14:26:45Z","update_date":"2020-09-29T18:44:06Z","discussion":[{"author":"CohenCyril","date":"2020-09-27T14:22:19Z","comment":"Thanks @anton-trunov and sorry for the delay.\r\n\r\n> * `subnA`: the name was suggested by @CohenCyril in [this comment](https://github.com/math-comp/math-comp/issues/212#issuecomment-420657654);\r\n\r\nI still agree with this naming\r\n\r\n> * `addnCAC`: I call this \"central commutativity\", hence the name, but I'm happy to change it to anything else (this applies to any name in this PR);\r\n\r\nI'm not fond of the name, but I cannot find better now.\r\n\r\n> * `addnAl`: \"left cyclic associativity\" (right cyclic associativity is just commutativity in this case);\r\n\r\nThe fact suffix `C` is not present disturbs me, how about `addnACl` or `addCnA`?\r\n\r\n> * `addnCB`\r\n\r\nSince a variable is repeated, how about `addnBn`?\r\n\r\n> I find `addnCAC` and `addnAl` sometimes convenient because having them in the library might save several rewrites once in a while.\r\n\r\nSure, I am all in favor of having these little helper lemmas.\r\n\r\n"},{"author":"anton-trunov","date":"2020-09-28T08:38:53Z","comment":"@CohenCyril Thank you very much for your suggestions, I applied them in a separate commit. I also rebased and resolved conflicts in `CHANGELOG_UNRELEASED.md`."},{"author":"anton-trunov","date":"2020-09-29T10:54:15Z","comment":"CI is green now! @CohenCyril thanks for catching the CHANGELOG bug :)"},{"author":"CohenCyril","date":"2020-09-29T11:25:32Z","comment":"Woops @anton-trunov one more rebase and we're good to go."},{"author":"anton-trunov","date":"2020-09-29T17:15:41Z","comment":"@CohenCyril Rebased, CI is green :)"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":504,"state":"closed","open_date":"2020-05-13T04:39:52Z","update_date":"2020-06-05T15:33:45Z","discussion":[{"author":"CohenCyril","date":"2020-05-13T12:57:16Z","comment":"Great! Thanks. I personally vouch for integration in 1.11.0"}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":503,"state":"open","open_date":"2020-05-11T13:03:52Z","update_date":"2021-06-16T08:22:39Z","discussion":[{"author":"CohenCyril","date":"2020-10-09T11:41:50Z","comment":"@thery, @ggonthier does not seem to be available, would you mind reviewing this PR?"},{"author":"chdoc","date":"2020-11-04T10:48:01Z","comment":"I still didn't get around to to checking how big the impact on this change would be for `fourcolor`. My fear is that the impact would be significant. Hence, I'm not sure it's reasonable to milestone this for 1.12.0. "},{"author":"CohenCyril","date":"2021-06-02T09:07:42Z","comment":"Let's see the impact on fourcolor before we take a decision\r\n"},{"author":"CohenCyril","date":"2021-06-08T14:40:59Z","comment":"Nix CI did not fail this time because I had forgotten to add fourcolor. Once you rebase this is fixed. \r\nHowever, you do **not** need to rebase to test it via the command `nix-shell --argstr job fourcolor` it should anyway (otherwise, rebase)."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":502,"state":"open","open_date":"2020-05-08T22:50:20Z","update_date":"2020-11-12T20:23:54Z","discussion":[],"tags":[{"tag":"drops: coq 8.9","description":"Addressing this issue or merging this PR requires to drop support for coq 8.9"}],"pull_requests":[]},{"author":"CohenCyril","number":501,"state":"closed","open_date":"2020-05-08T22:20:23Z","update_date":"2021-07-07T09:19:26Z","discussion":[{"author":"gares","date":"2020-05-09T07:12:54Z","comment":"doc is incomplete, the RHS is always the same"},{"author":"chdoc","date":"2020-05-09T09:25:00Z","comment":"I'm a bit skeptical as it comes to the chosen syntax. Is `/[ ... ]` currently a valid intro pattern? If it is not, why not use:\r\n\r\n- `=> /[rules]` : perform `rewrite rules` (where `rules` may include `!`, `?`, and  `-` as usual?)\r\n\r\nAlso, what's the expected behavior if there is a lemma or local assumption called `apply`, `dup`, or `swap`. Can one still use them as views?"},{"author":"CohenCyril","date":"2020-05-09T19:45:33Z","comment":"@gares\r\n> doc is incomplete, the RHS is always the same\r\n\r\nI do not understand. What do you want to add to the doc?\r\n\r\n\r\n@chdoc for now I will send you [here](https://github.com/math-comp/math-comp/pull/372#issuecomment-513786319), and on monday we could talk.\r\n"},{"author":"gares","date":"2020-05-09T20:48:42Z","comment":"In the top post you say \"foo does bar\" but bar is always the same. It is clear what you mean, I was just warning to not copy that doc as is "},{"author":"CohenCyril","date":"2020-05-09T21:52:32Z","comment":"> In the top post you say \"foo does bar\" but bar is always the same. It is clear what you mean, I was just warning to not copy that doc as is\r\n\r\nAh sh** I updated the commit but forgot the PR OP..."},{"author":"soraros","date":"2020-05-11T00:36:58Z","comment":"Maybe /apply etc. should be capitalized since they have predefined magical meaning?"},{"author":"gares","date":"2020-05-11T07:54:47Z","comment":"I think such a change should be discussed at a meeting. I'm supportive but the notation design can only benefit from multiple scrutiny. For example the `/[1rule]` thing with no space and no `!` is kind of odd.\r\n\r\nI'd like to see a few tests added to the test suite (and later backported to Coq), for example to test the rewrite notation with inlined multi-rules."},{"author":"CohenCyril","date":"2020-05-11T12:10:32Z","comment":"> For example the `/[1rule]` thing with no space and no `!` is kind of odd.\r\n\r\nI agree we could have `/[1!rule]` instead, it would indeed look nicer!\r\n(moreover, the largest use is `!rule`, and just sometimes, it needs to be done only once...)"},{"author":"chdoc","date":"2021-06-03T09:20:37Z","comment":"After a cursory look, I'm not entirely convinced that replacing every occurrence of `; rewrite inE` with `=> /[1!inE]` is really that big an improvement, in particular when replacing `by apply: foo; rewrite inE` with `by apply: foo => /[1!inE]` (found some instances in `action.v`, but there are probably many others). IMHO, the `/[!inE]` pattern should mainly be used if it becomes part of another into pattern (or when necessary to stay within the 80 characters limit). \r\n\r\n@CohenCyril , what's your opinion or rationale for this?"},{"author":"CohenCyril","date":"2021-07-06T15:39:48Z","comment":"@chdoc finally updated :)"},{"author":"gares","date":"2021-07-07T09:18:44Z","comment":"OK, I'm merging this one.\r\nI wonder if the notation could be improved further to allow for `[!inE, other, ..]` since the `()` serve really little purpose (syntactically). But that would be for another PR."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"drops: coq 8.9","description":"Addressing this issue or merging this PR requires to drop support for coq 8.9"}],"pull_requests":[]},{"author":"chdoc","number":499,"state":"closed","open_date":"2020-05-04T16:19:55Z","update_date":"2020-06-30T11:43:43Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"chdoc","number":498,"state":"closed","open_date":"2020-05-04T13:53:44Z","update_date":"2021-10-25T09:11:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":495,"state":"closed","open_date":"2020-05-04T08:43:01Z","update_date":"2020-05-06T11:38:55Z","discussion":[{"author":"gares","date":"2020-05-04T09:21:36Z","comment":"As per WG this need an update (instead of removing the entry, write how to migrate)"},{"author":"pi8027","date":"2020-05-05T20:12:02Z","comment":"Done."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":494,"state":"closed","open_date":"2020-05-04T03:10:41Z","update_date":"2020-08-13T15:24:57Z","discussion":[{"author":"pi8027","date":"2020-05-04T10:08:11Z","comment":"@CohenCyril Could you assign yourself? Also, this one should target 1.12.0."},{"author":"pi8027","date":"2020-06-27T04:32:54Z","comment":"Since I finished the documentation work, this PR is ready for review."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":493,"state":"closed","open_date":"2020-05-04T02:58:44Z","update_date":"2020-05-04T12:18:19Z","discussion":[{"author":"gares","date":"2020-05-04T09:24:08Z","comment":"WG: seems safe to merge, easy to fix if you adopt these lemmas since the beta (just import tuples)"},{"author":"pi8027","date":"2020-05-04T10:08:25Z","comment":"@CohenCyril Could you assign yourself?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":492,"state":"closed","open_date":"2020-05-01T17:52:09Z","update_date":"2020-09-09T23:58:51Z","discussion":[{"author":"pi8027","date":"2020-09-09T23:41:31Z","comment":"@CohenCyril Could you take care of the remaining TODO? If you are happy with the current status, I will merge."},{"author":"CohenCyril","date":"2020-09-09T23:48:24Z","comment":"> @CohenCyril Could you take care of the remaining TODO? If you are happy with the current status, I will merge.\r\n\r\nIt's a todo \"after merge\" ;)"},{"author":"CohenCyril","date":"2020-09-09T23:48:46Z","comment":"> It's a todo \"after merge\" ;)\r\n\r\nonce you merge, I do it"},{"author":"pi8027","date":"2020-09-09T23:49:54Z","comment":"@CohenCyril Thanks!"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":490,"state":"closed","open_date":"2020-04-20T17:01:22Z","update_date":"2020-05-04T12:18:19Z","discussion":[{"author":"pi8027","date":"2020-04-20T17:03:23Z","comment":"~`dual_finOrderType` seems also to be broken. Let me check.~ OK now it is correct.\r\n```coq\r\ndual_finOrderType: forall d : unit, finOrderType d -> finOrderType d\r\n```"},{"author":"CohenCyril","date":"2020-05-01T08:49:42Z","comment":"Here is an alternative for displays: instead of unit, we use\r\n```coq \r\nInductive display := Simple of unit | Dual of display.\r\n```\r\n\r\nThen displays are `Simple u` for opaque elements of `u` of type `unit`, except for\r\n```coq\r\nDefinition dual_display d := if d is Dual d' then d' else Dual d.\r\nArguments dual_display d /.\r\n```\r\n\r\nThat way,\r\n- `dual_display d ` is still not convertible to d\r\n- `dual_display (dual_display d)` reduces (through simpl) to `d`"},{"author":"pi8027","date":"2020-05-01T09:16:20Z","comment":"@CohenCyril This does not work:\r\n```coq\r\nCheck (fun d : display => erefl d : d = dual_display (dual_display d)).\r\n```"},{"author":"CohenCyril","date":"2020-05-01T09:18:53Z","comment":"A variant\r\n\r\n```coq\r\nInductive display := Simple of unit | Dual of unit.\r\n\r\nNotation dual_display :=\r\n  (fun d => match d with Simple u => Dual u | Dual u => Simple u end).\r\n\r\nDefinition x of display := unit.\r\n\r\nCheck (fun u => erefl (Simple u) : Simple u = dual_display (dual_display (Simple u))).\r\n\r\nNotation simple_unit := (x (Simple tt)). \r\nNotation dual_unit := (x (dual_display (Simple tt))).\r\nGoal x (dual_display (dual_display (Simple tt))) = unit.\r\nsimpl.\r\nAbort.\r\n````"},{"author":"pi8027","date":"2020-05-01T09:30:50Z","comment":"BTW, the PR about definitionally involutive duals is #464, not this one. This PR is just a small bug fix for 1.11.0..."},{"author":"pi8027","date":"2020-05-04T10:08:36Z","comment":"@CohenCyril Could you assign yourself?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":487,"state":"closed","open_date":"2020-04-15T14:00:32Z","update_date":"2020-04-17T15:03:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":485,"state":"closed","open_date":"2020-04-15T09:40:59Z","update_date":"2020-04-17T15:03:39Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":484,"state":"closed","open_date":"2020-04-10T10:01:51Z","update_date":"2020-09-28T10:13:42Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":483,"state":"closed","open_date":"2020-04-10T09:59:29Z","update_date":"2020-11-02T15:50:55Z","discussion":[{"author":"CohenCyril","date":"2020-09-28T08:22:18Z","comment":"@affeldt-aist I thought I authored this one, did I screw up a rebase and attributed a commit that belongs to me, to you?"},{"author":"affeldt-aist","date":"2020-09-28T13:55:30Z","comment":"> @affeldt-aist I thought I authored this one, did I screw up a rebase and attributed a commit that belongs to me, to you?\r\n\r\nI have not contributed to this PR (PR #483 ).\r\nMaybe it comes from the fact that I committed to PR #221 and you squashed parts of it? "},{"author":"pi8027","date":"2020-11-02T08:01:42Z","comment":"Is there any obstacle to merging this PR other than the conflict in CHANGELOG?"},{"author":"thery","date":"2020-11-02T14:06:58Z","comment":"@CohenCyril  as soon as it is rebased I merge"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":482,"state":"closed","open_date":"2020-04-10T09:49:18Z","update_date":"2020-04-13T13:50:18Z","discussion":[{"author":"CohenCyril","date":"2020-04-10T09:50:10Z","comment":"@affeldt-aist and @ybertot this PR should be merge right after #221 is merged, I am not adding it directy to #221 not to disrupt the CI status while Assia is potentially reviewing it."},{"author":"CohenCyril","date":"2020-04-13T13:50:15Z","comment":"> @affeldt-aist and @ybertot this PR should be merge right after #221 is merged, I am not adding it directy to #221 not to disrupt the CI status while Assia is potentially reviewing it.\r\n\r\nI changer my mind. The change is small enough I pushed directly to #221."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":479,"state":"closed","open_date":"2020-04-09T15:12:10Z","update_date":"2020-04-10T09:51:33Z","discussion":[],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"needs: merge of dependencies","description":"PR that depends on another. Documented in the original post of the PR. Review only the increment."}],"pull_requests":[]},{"author":"affeldt-aist","number":477,"state":"closed","open_date":"2020-04-09T07:53:43Z","update_date":"2020-04-17T15:03:45Z","discussion":[{"author":"affeldt-aist","date":"2020-04-09T07:55:00Z","comment":"@CohenCyril I'll update the wiki accordingly if we merge"}],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."}],"pull_requests":[]},{"author":"CohenCyril","number":475,"state":"closed","open_date":"2020-04-08T17:01:11Z","update_date":"2020-04-15T08:41:45Z","discussion":[{"author":"CohenCyril","date":"2020-04-08T17:01:19Z","comment":"@affeldt-aist "},{"author":"gares","date":"2020-04-08T21:56:19Z","comment":"Please open an issue about removing deprecated aliases mentioning this commit hash and put it the 1.12 milestone.\r\n\r\nWe should probably make this a policy."},{"author":"affeldt-aist","date":"2020-04-08T23:21:30Z","comment":"Done as issue #476."},{"author":"CohenCyril","date":"2020-04-09T15:52:50Z","comment":"@ybertot  I failed with my rebase, but it should be fixed now."},{"author":"CohenCyril","date":"2020-04-14T16:11:34Z","comment":"ping @ybertot"}],"tags":[],"pull_requests":[]},{"author":"llelf","number":474,"state":"closed","open_date":"2020-04-07T21:35:25Z","update_date":"2020-04-09T13:58:42Z","discussion":[{"author":"affeldt-aist","date":"2020-04-08T15:45:01Z","comment":"For me, this PR can be merged as it is. (Thanks @llelf .)"},{"author":"ybertot","date":"2020-04-09T13:58:42Z","comment":"Thanks a lot @llelf, it was great working with you on this pull request."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":473,"state":"closed","open_date":"2020-04-07T15:50:14Z","update_date":"2020-04-17T15:03:58Z","discussion":[{"author":"CohenCyril","date":"2020-04-07T16:54:06Z","comment":"@affeldt-aist looks like fourcolour needs an overlay"},{"author":"pi8027","date":"2020-04-08T04:21:58Z","comment":"Hello. Shouldn't we use the deprecation facility rather than having overlays? https://github.com/math-comp/math-comp/blob/5d7bd2ea2a0a28fb275da8ba2e2c0dc5a33d1034/mathcomp/ssreflect/ssreflect.v#L15-L28"},{"author":"affeldt-aist","date":"2020-04-08T14:20:57Z","comment":"> Hello. Shouldn't we use the deprecation facility rather than having overlays? \r\n\r\nIndeed. Will do."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":472,"state":"closed","open_date":"2020-04-05T23:23:24Z","update_date":"2020-04-17T15:04:23Z","discussion":[],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."}],"pull_requests":[]},{"author":"CohenCyril","number":471,"state":"closed","open_date":"2020-04-05T23:03:53Z","update_date":"2020-04-10T13:36:58Z","discussion":[{"author":"pi8027","date":"2020-04-09T01:05:06Z","comment":"It would be nice to have a comment about the guard condition not to revert this change later, but this may be more general and placed somewhere else. I think what we should say here, in general, is that we should try to factor out function arguments of higher-order, polymorphic, recursive functions. For example, can we reproduce the same issue with the `map` function?"},{"author":"pi8027","date":"2020-04-09T01:36:34Z","comment":"> For example, can we reproduce the same issue with the `map` function?\r\n\r\nI self-answer this question. It is possible:\r\n```coq\r\nFrom mathcomp Require Import all_ssreflect.\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nInductive tree (A : Type) := singleton of A | branch of list (tree A).\r\n\r\nModule Bad.\r\n\r\nFixpoint map (A B : Type) (f : A -> B) (xs : list A) : list B :=\r\n  if xs is x :: xs then f x :: map f xs else [::].\r\n\r\nFail Fixpoint tmap (A B : Type) (f : A -> B) (t : tree A) : tree B :=\r\n  match t with\r\n    | singleton x => singleton (f x)\r\n    | branch ts => branch (map (tmap f) ts)\r\n  end.\r\n\r\nEnd Bad.\r\n\r\nModule Good.\r\n\r\nDefinition map (A B : Type) (f : A -> B) :=\r\n  fix map' (xs : list A) := if xs is x :: xs then f x :: map' xs else [::].\r\n\r\nDefinition tmap (A B : Type) (f : A -> B) := fix tmap' (t : tree A) : tree B :=\r\n  match t with\r\n    | singleton x => singleton (f x)\r\n    | branch ts => branch (map tmap' ts)\r\n  end.\r\n\r\nEnd Good.\r\n```\r\n\r\nTo conclude, if this is not a commonly known technique to write terminating functions, it would worth documenting it somewhere."},{"author":"affeldt-aist","date":"2020-04-09T07:31:45Z","comment":"> To conclude, if this is not a commonly known technique to write terminating functions, it would worth\r\n> documenting it somewhere.\r\n\r\nI would say https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md."},{"author":"pi8027","date":"2020-04-09T12:21:55Z","comment":"@affeldt-aist Sure. Also, we can do that in a separate PR."},{"author":"CohenCyril","date":"2020-04-09T12:52:07Z","comment":"> ```coq\r\n> Definition tmap (A B : Type) (f : A -> B) := fix tmap' (t : tree A) : tree B :=\r\n>   match t with\r\n>     | singleton x => singleton (f x)\r\n>     | branch ts => branch (map tmap' ts)\r\n>   end.\r\n> ```\r\n> \r\n> To conclude, if this is not a commonly known technique to write terminating functions, it would worth documenting it somewhere.\r\n\r\nI think such code should be added to the test-suite, in order to detect possible reverts..."},{"author":"pi8027","date":"2020-04-09T13:14:50Z","comment":"@CohenCyril \r\n> I think such code should be added to the test-suite, in order to detect possible reverts...\r\n\r\nSo true. Could you add a test case for `all2`? I will add more test cases later."},{"author":"CohenCyril","date":"2020-04-10T09:02:26Z","comment":"> Looks good to me, modulo a test case. Since we can add it later, it should not block the release.\r\n\r\nI added the test case.\r\n"},{"author":"CohenCyril","date":"2020-04-10T13:30:13Z","comment":"@affeldt-aist we reached consensus, you can merge"}],"tags":[],"pull_requests":[]},{"author":"ybertot","number":468,"state":"closed","open_date":"2020-03-31T15:59:19Z","update_date":"2020-04-02T10:14:13Z","discussion":[{"author":"gares","date":"2020-04-01T07:29:06Z","comment":"@CohenCyril what do you think about the failure of finmap? I know we are close to integrate finmap in MC (1.12) but for MC 1.11 there seem not to be any working version. Do you want to make a release."},{"author":"ybertot","date":"2020-04-01T11:11:11Z","comment":"Failure of the ci-fourcolour-dev job is due to computation taking more than 1 hour, but recompilation on a dedicated machine succeeded."},{"author":"gares","date":"2020-04-01T11:33:45Z","comment":"Let me restart the job, since it usually takes 45 minutes"},{"author":"gares","date":"2020-04-01T11:35:25Z","comment":"@CohenCyril  told me that he shall make a pass on finmap & co to remove the use of deprecated aliases.\r\n\r\n@CohenCyril could you write here what to do with this PR? Are you planning to update finmap soonish?"},{"author":"ybertot","date":"2020-04-01T13:35:08Z","comment":"@CohenCyril For your information, I tried testing quickly with the following process to replace the offending lemmas, but this does not compile, apparently for a reason independent from the change in this PR.\r\n\r\n    git clone git@github.com:math-comp/finmap.git\r\n    cd finmap\r\n    for i in $(find . -name '*.v') ; do perl -npi.bak -e 's/eq_big_perm/permP/;' \\\r\n     -e 's/perm_eq_mem/perm_mem/; s/perm_eqP/permP/; s/perm_eq_size/perm_size/;' \\\r\n     -e 's/perm_eq_small/perm_small_eq/; s/perm_eq_sym/perm_sym/;' \\\r\n     -e 's/perm_eq_trans/perm_trans/; s/perm_eq_uniq/perm_uniq/;' \\\r\n     -e 's/uniq_perm_eq/uniq_perm/' $i ; done\r\nThe offending line is at 2277 in finmap.v\r\n"},{"author":"CohenCyril","date":"2020-04-01T22:23:40Z","comment":"The culprit is\r\n>  `s/eq_big_perm/permP/`\r\n\r\nwhich should be `s/eq_big_perm/perm_big/`\r\n\r\n"},{"author":"CohenCyril","date":"2020-04-01T23:07:38Z","comment":"> @CohenCyril told me that he shall make a pass on finmap & co to remove the use of deprecated aliases.\r\n> \r\n> @CohenCyril could you write here what to do with this PR? Are you planning to update finmap soonish?\r\n\r\ndone, all lights are green now\r\n"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":465,"state":"closed","open_date":"2020-03-08T15:53:36Z","update_date":"2020-03-12T10:54:55Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":464,"state":"open","open_date":"2020-03-04T06:50:07Z","update_date":"2023-02-24T23:25:14Z","discussion":[{"author":"spitters","date":"2020-04-26T16:50:55Z","comment":"Did you consider also join semilattices? Perhaps as an meet semilattice on the opposite order."},{"author":"pi8027","date":"2020-04-26T18:52:17Z","comment":"@spitters We did not consider adding a structure of join semilattices because the canonical `meetSemilatticeType` instance of `T^d` should work as the canonical join semilattice of `T` where `^d` stands for dual. But, actually, I see that making this design choice work requires some more work, and I do not fully understand how to do that yet."},{"author":"spitters","date":"2020-04-27T17:00:43Z","comment":"It's done using duality in Corn.\nThe HoTT library has duality for categories.\n\nWhat are the issues in math-comp?\n\nOn Sun, Apr 26, 2020 at 8:52 PM Kazuhiko Sakaguchi <notifications@github.com>\nwrote:\n\n> @spitters <https://github.com/spitters> We did not consider adding a\n> structure of join semilattices because the canonical meetSemilatticeType\n> instance of T^d should work as the canonical join semilattice of T where\n> ^d stands for dual. But, actually, I see that making this design choice\n> work requires some more work, and I do not fully understand how to do that\n> yet.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/math-comp/math-comp/pull/464#issuecomment-619604982>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTU5JCSNCKHDD5CTDMDROR7G3ANCNFSM4LA5HSLQ>\n> .\n>\n"},{"author":"pi8027","date":"2020-04-28T08:59:10Z","comment":"The first issue is that the class record of `latticeType` should include two semilattice mixins to implement proper inheritance from join semilattices to lattices, but now actually it does not. In packed classes, inheritance should be implemented by inclusion rather than construction. See our IJCAR '20 papers for details:\r\n- [Competing inheritance paths in dependent type theory: a case study in functional analysis](https://hal.inria.fr/hal-02463336),\r\n- [Validating Mathematical Structures](https://arxiv.org/abs/2002.00620).\r\n\r\nThe second issue is that I do not see how to implement structure inference of join semilattices and lattices without having the actual interface for join semilattices. We probably should have the join semilattice structure to implement complete duality between meet/join semilattices, but it is still unclear to me.\r\n\r\nAlso, since this PR now features several new improvements from immediately useful ones to experimental and incomplete ones, I would rather split this PR into some fragments and merge a preliminary part before working on the complete implementation of duality."},{"author":"pi8027","date":"2020-05-01T09:37:05Z","comment":"Thinking about definitionally involutive duals, I also believe that `[latticeType of (A *p B)^d]` and `[latticeType of A^d *p B^d]` should be convertible."},{"author":"CohenCyril","date":"2020-05-01T09:44:27Z","comment":"Suggestion: (follow-up of comments wrongly placed in #490)\r\n```coq\r\nFrom Coq Require Import ssreflect ssrfun ssrbool.\r\n\r\nInductive display := Simple of unit | Dual of display.\r\nNotation dual_display d := (if d is Dual d then d else Dual d).\r\n\r\nRecord pt (d : display) := PT {sort :> Type; elt1 : sort; elt2 : sort}.\r\nArguments elt1 {d} : simpl never.\r\nArguments elt2 {d} : simpl never.\r\n\r\nNotation tt_display := (Simple tt).\r\nNotation default_display := (Simple _).\r\nFact prod_key : unit. Proof. exact: tt. Qed.\r\nNotation prod_display := (Simple prod_key).\r\n\r\nDefinition dual {d} (T : pt d) : pt (dual_display d) := @PT _ T (elt2 T) (elt1 T).\r\nDefinition dprod {d1 d2} (T1 : pt d1) (T2 : pt d2) : pt prod_display :=\r\n @PT _ (T1 * T2) (elt1 T1, elt1 T2) (elt2 T1, elt2 T2).\r\n\r\nDefinition pt_bool : pt tt_display := @PT _ bool false true.\r\nNotation simple_elt1 := (@elt1 default_display). \r\nNotation dual_elt1 := (@elt1 (Dual default_display)). \r\nNotation simple_elt2 := (@elt2 default_display). \r\nNotation dual_elt2 := (@elt2 (Dual default_display)). \r\n\r\nGoal dual (dual (pt_bool)) = pt_bool.\r\nreflexivity.\r\nQed.\r\n\r\nGoal elt1 (dual (dual pt_bool)) = elt2 (dual pt_bool).\r\nreflexivity.\r\nQed.\r\n\r\nGoal elt1 (dprod pt_bool (dual pt_bool)) = elt2 (dual (dprod (dual pt_bool) pt_bool)).\r\nFail reflexivity. (* it is not supposed to work at all *)\r\nAbort.\r\n```"},{"author":"pi8027","date":"2020-05-01T09:51:17Z","comment":"`dual (dual T) = T` holds for some particular instances, but in general, it does not.\r\n```coq\r\nGoal forall d (T : pt d), dual (dual T) = T.\r\nreflexivity.\r\nQed.\r\n```"},{"author":"CohenCyril","date":"2020-05-01T10:03:18Z","comment":"```coq\r\nFrom Coq Require Import ssreflect ssrfun ssrbool.\r\n\r\nSet Primitive Projections.\r\nRecord display := Display { is_dual : bool; disp : unit }.\r\nUnset Primitive Projections.\r\nArguments is_dual _ /.\r\n\r\nNotation dual_display d := (let: Display n u := d in @Display (~~ n) u).\r\n\r\nRecord pt (d : display) := PT {sort :> Type; elt1 : sort; elt2 : sort}.\r\nArguments elt1 {d} : simpl never.\r\nArguments elt2 {d} : simpl never.\r\n\r\nNotation tt_display := (Display false tt).\r\n\r\nFact prod_key : unit. Proof. exact: tt. Qed.\r\nNotation prod_display := (Display false prod_key).\r\n\r\nDefinition dual {d} (T : pt d) : pt (dual_display d) := @PT _ T (elt2 T) (elt1 T).\r\nDefinition dprod {d1 d2} (T1 : pt d1) (T2 : pt d2) : pt prod_display :=\r\n @PT _ (T1 * T2) (elt1 T1, elt1 T2) (elt2 T1, elt2 T2).\r\n\r\nDefinition pt_bool : pt tt_display := @PT _ bool false true.\r\nNotation simple_elt1 := (@elt1 (Display false _)). \r\nNotation dual_elt1 := (@elt1 (Display true _)). \r\nNotation simple_elt2 := (@elt2 (Display false _)). \r\nNotation dual_elt2 := (@elt2 (Display true _)). \r\n\r\nGoal dual (dual (pt_bool)) = pt_bool.\r\nreflexivity.\r\nQed.\r\n\r\nGoal elt1 (pt_bool) = elt2 (dual pt_bool).\r\nsimpl.\r\nreflexivity.\r\nQed.\r\n\r\nGoal elt1 (dual (dual pt_bool)) = elt2 (dual pt_bool).\r\nsimpl.\r\nreflexivity.\r\nQed.\r\n\r\nGoal elt1 (dprod pt_bool (dual pt_bool)) = elt2 (dual (dprod (dual pt_bool) pt_bool)).\r\nsimpl.\r\nFail reflexivity. (* products are not primitive records, so this does not work *)\r\nAbort.\r\n\r\nFail Goal forall d (T : pt d), dual (dual T) = T.\r\n(* Would work with definitional ~~ (~~ b) = b *)\r\n```"},{"author":"CohenCyril","date":"2020-05-01T10:08:34Z","comment":"> `dual (dual T) = T` holds for some particular instances, but in general, it does not.\r\n\r\nThis theorem will hold for every concrete instance."},{"author":"pi8027","date":"2020-10-16T10:50:09Z","comment":"I have attempted to implement a complete duality of structures without having some dual structures, but my conclusion is that it seems impossible. For example, we have `porderType`, `bPorderType`, and `tbPorderType`, then `bPorderType (dual_display disp)` can be seen as `tPorderType disp`, and we can define `1%O` as the dual of `0%O`. When we write `(0 = 1)%O`, we expect a `tbPorderType` to be inferred as the type of `0` and `1`, but it can never happen in this setting. So we have to declare all the dual structures anyway. Does this make sense?"},{"author":"pi8027","date":"2020-10-20T10:04:15Z","comment":"I have added join-semilattice structures and some order structures with a top but without a bottom anyway. I hope this will be helpful to implement the order structures and definitionally involutive duals using Hierarchy Builder even if we will not merge this as it is. It seems that it also simplifies the theory part of order.v by accident."},{"author":"pi8027","date":"2020-10-29T07:02:40Z","comment":"Documentation is not done yet and finmap has to be fixed. Except that, this PR is ready for review. But we have an option not to merge this PR and rather reimplement it using HB."},{"author":"pi8027","date":"2020-11-04T10:59:49Z","comment":"@CohenCyril Would you like to review and merge this PR soon? I'm not requesting to include this in 1.12. But I would like to know whether it is reasonable to rework #281 after merging this, or I should not wait for that."},{"author":"CohenCyril","date":"2020-11-04T15:28:07Z","comment":"> @CohenCyril Would you like to review and merge this PR soon? I'm not requesting to include this in 1.12. But I would like to know whether it is reasonable to rework #281 after merging this, or I should not wait for that.\r\n\r\nDear @pi8027, I am afraid I will not have the time to review this PR this month since it is a pretty big one, and I would need the changelog as a guideline to read the diff... I think we should reschedule it to 1.13..."},{"author":"CohenCyril","date":"2020-11-04T15:30:34Z","comment":"BTW, I came across a problem recently: I could not make `'I_n` a `finOrderType` for any `n` (not manifestly positive), because our phrasing of `finOrderType` inherits structures with bottom and top. I remember making this choice consciously in your office last year, but nowadays I think we should backtrack on that. Are you doing it in this PR?"},{"author":"pi8027","date":"2020-11-04T15:38:52Z","comment":"> Dear @pi8027, I am afraid I will not have the time to review this PR this month since it is a pretty big one, and I would need the changelog as a guideline to read the diff... I think we should reschedule it to 1.13...\r\n\r\n@CohenCyril Sure. So I will finish the documentation work first anyway.\r\n\r\n> BTW, I came across a problem recently: I could not make `'I_n` a `finOrderType` for any `n` (not manifestly positive), because our phrasing of `finOrderType` inherits structures with bottom and top. I remember making this choice consciously in your office last year, but nowadays I think we should backtrack on that. Are you doing it in this PR?\r\n\r\nThis choice has been made because a nonempty finite lattice always has the top and the bottom, but I think what you say makes sense. This PR currently does not do that, but I can do it."},{"author":"pi8027","date":"2020-11-16T04:29:13Z","comment":"> > BTW, I came across a problem recently: I could not make `'I_n` a `finOrderType` for any `n` (not manifestly positive), because our phrasing of `finOrderType` inherits structures with bottom and top. I remember making this choice consciously in your office last year, but nowadays I think we should backtrack on that. Are you doing it in this PR?\r\n> \r\n> This choice has been made because a nonempty finite lattice always has the top and the bottom, but I think what you say makes sense. This PR currently does not do that, but I can do it.\r\n\r\nDone. The diagram of the new hierarchy is attached. I still have to do the documentation work.\r\n\r\n![hierarchy_ssreflect](https://user-images.githubusercontent.com/111003/99212893-94bd8180-280f-11eb-84c6-7703f3828156.png)\r\n"},{"author":"pi8027","date":"2020-12-07T00:57:58Z","comment":"I finished documentation and this PR is ready for review. But, we probably have to separate the finite counterparts off as `finorder.v` since `order.v` became too large (approx. 12k lines)."},{"author":"pi8027","date":"2021-01-15T16:05:06Z","comment":"Since `(meet|join)Semilattice` is too long, I'm thinking about replacing them with `(meet|join)Order`, e.g., `meetOrderType`. Any opinion?"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"pi8027","number":463,"state":"closed","open_date":"2020-03-01T21:40:42Z","update_date":"2020-03-19T08:55:44Z","discussion":[{"author":"pi8027","date":"2020-03-18T08:33:49Z","comment":"@gares Hello. Could you assign yourself to this PR?"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":462,"state":"closed","open_date":"2020-03-01T17:35:18Z","update_date":"2020-09-09T11:37:14Z","discussion":[{"author":"ggonthier","date":"2020-03-12T11:09:31Z","comment":"  This PR is meant to demonstrate that `Canonical Structures` can work with primitive records.\r\nThe demonstration is only partial because the `#[canonical(false)]` pragmas are syntax errors in all released versions of Coq - this could be easily remedied as these are non-essential optimisation of the `Canonical Projections` table. Also, this PR does not implement the intended application of the switch to primitive records - convertibility between order structures and their bidual.\r\n  Looking deeper into the matter, it seems that this works because the current version of Coq only partially implements eta-conversion for primitive records; it may not be prudent to sort relying on this.\r\n  Specifically, Coq implements eta-convertibility `p ~ (fst p, snd p)`, eta-expansion during unification (reduce `p ~ (a, b)` to `fst p ~ a`, `snd p ~ b`) but not pattern unification for records\r\n(solve `fst ?p ~ a` with `?p := (a, ?s)`). It's the latter that is at odds with `Canonical Structure` inference, since it is tantamount to _always_ resolving structures, as one would by declaring a default instance (as with, e.g., `Canonical Pack.`). This can result in unnatural behaviour and poor diagnostics for erroneous inputs, which are not tested by recompiling (error-free) libraries. It would also break more elaborate uses of `Canonical Structures` that rely on the failure of structure inference to force the expansion of tags or insert coercions (e.g., for `predType`).\r\n  Perhaps we can get some assurance that Coq will never implement unification patterns for records, but this seems unlikely. For one thing, this makes unification sensitive to eta-expansion: `?p ~ (0, 1)` succeeds, but `(fst ?p, snd ?p) ~ (0, 1)` reduces to `fst ?p ~ 0`, `snd ?p ~ 1`, which fail...\r\n  There are also differences in reduction strategy between classical and primitive records, namely that explicit `match` on records are iota-reduces eagerly, whereas primitive projections are not. The `xclass` idiom in packed classes relies on this to mitigate the exponential complexity of term comparison (the details are in the extensive log entry of the commit that introduces that idiom, but that's in the `CoqFinitGroup` svn repository, which has disappeared from `forge` - hopefully @gares still has a copy). The good news is that that particular idiom may no longer be needed if `class_of` objects are primitive records, because the type parameter of `class_of`, which is the cause of the divergent complexity, would be implicit.\r\n  Finally, the intended application does not seem all that compelling. In any concrete use of the order interface, the order structures will be explicit records that will be convertible to their bidual in all cases. This, the change would only improve facilitate writing library code for abstract orders. Further, there is a workaround even for this case, namely using primitive records for classes and some mixins, and parametrising the development that needs bidual convertibility on a manifest `Pack` of `Type` and `class_of` parameters, e.g.,\r\n  ``Context typeT classT (T := @Pack typeT classT).``\r\n  To summarize, perhaps the best course of action would be to switch to primitive records for `class_of` records only, _if_ this removes the need for `xclass`, but keep classical records for `Structures`, and use the idiom above if eta convertibility is needed.\r\n"},{"author":"pi8027","date":"2020-04-22T08:39:32Z","comment":"@ggonthier Thank you for the feedback. I finished what I planned here (`L^d^d = L`) in #464 by following your suggestions. I think that your comments are useful alongside my diff to understand the inference mechanism, in particular, the `xclass` idiom. So I close this PR and keep it for a record."},{"author":"CohenCyril","date":"2020-09-09T11:24:24Z","comment":"BTW, here is the designated commit log message:\r\n\r\n> Author: gonthier <gonthier@305884b8-be16-0410-aa53-a3be2363cef1>  2012-03-19 22:21:11\r\n>\r\n>     This revision was meant to be a local improvement to falgbra <-> galois, but\r\n>     it uncovered a major inefficiency of the processing of packed class declarations\r\n>     by the Coq kernel, which could only be mitigated by adjusting the packed class\r\n>     idiom.\r\n>       The problem arises from the interference of several questionable design\r\n>     choices in the Coq kernel, in particular the blind maximal sharing of\r\n>     \"reductions\" (which turn out to be full expansions here). The diagnosis was\r\n>     prompted by the anomalous behaviour of line 302 of galois.v, which took over 3\r\n>     minutes of user time to execute. This line attempts to use an eqP view on an\r\n>     assumption of the form root p x. This is convertible to p.[x] == 0, but the\r\n>     unfolding heuristic of Coq causes it to unfold the definition of (_ == _) in\r\n>     the eqP statement instead, only turning to Hy once it has reached a head normal\r\n>     form for the (_ == _), and thus having to unfold root p x to head normal form as\r\n>     well. Though unnecessary, by itself this should not be a problem, even though we\r\n>     are 9 levels deep in the hierarchy (eqType >-> fieldExtType). Things break down\r\n>     because the kernel cannot manage to compare the structurally identical terms\r\n>     that result from this expansion. These have the form\r\n>        let: Equality.Mixin op _ :=\r\n>          let: Choice.Class bc _ :=\r\n>            ....\r\n>            let: FieldExt.Class feb _ _ _ :=\r\n>              let: FieldExt.Pack _ fec _ := L return FieldExt.class_of L in fec\r\n>            in feb\r\n>            ...\r\n>          in bc\r\n>        in op.\r\n>     so the problem is not immediately obvious... until one recalls that\r\n>     non-dependent matches also carry explicit return type annotations. Thus the\r\n>     term is in fact\r\n>        let: Equality.Mixin op _  :=\r\n>          let: Choice.Class bc _\r\n>            ....\r\n>            let: FieldExt.Class feb _ _ _ :=\r\n>              let: FieldExt.Pack _ fec _ := L return FieldExt.class_of L in fec\r\n>            return Falgebra.class_of F0 (Phant F0) (FieldExt.sort L)\r\n>            in feb\r\n>            ...\r\n>          return Equality.class_of (Equality.sort Feq)) :=\r\n>          in bc\r\n>          return rel (Equality.sort Feq)\r\n>        in op.\r\n>     where Feq is the eqType structure that was passed explicitly to eq_op.\r\n>     Feq is the result of several type inference refinements, so is is not\r\n>     obtained directly as FieldExt.eqType F0 L, but rather as a composite\r\n>        Zmodule.eqType (Ring.zmodType\r\n>          (Lalgebra.ringType (Falgebra.vect_lalgType (FieldExt.FalgType L))))\r\n>     that evaluates ot the same normal form as FieldExt.eqType F0 L.\r\n>       If the comparison was based on this (slightly complicated) version of Feq\r\n>     there would be no problem. However, to arrive at the chain of lets above the\r\n>     Coq kernel has had to expand the definition of Feq -- and it then proceeds to\r\n>     share this expansion maximally across the entire expression. Feq is thus\r\n>     now a fairly large graph, where each of  Zmodule.eqType, Ring.zmodType, etc\r\n>     have been expanded, and the \"base\" coercions have been expanded: the class\r\n>     components are subterms of the top \"let:\" chain, e.g., the class component\r\n>     of Feq is the let: Choice.class ... subterm. As the kernel \"optimizes\" the\r\n>     comparison of Equality.sort (Equality.Pack <monster record>)\r\n>                    =  Equality.sort (Equality.Pack <monster record>)\r\n>     by not evaluating the projection and comparing all the <monster record>\r\n>     rather that just the sort field, does so by expanding the (shared) term graph\r\n>     into an (unshared) tree, and these type constraints occur everywhere inside the\r\n>     let: chain (including in the invisible lambda binders of the predicates and\r\n>     branch subterms), the diverging behavior is unsurprising.\r\n>       Note that it is the kernel that diverges here: evarconv unification has\r\n>     absolutely no problem here, because it uses a different heuristic which does\r\n>     not allow sharing to interfere with comparison; indeed, it backtracks over\r\n>     the reduction of the argument of a blocked match, effectively allowing the\r\n>     expansion to \"align\" on the topmost match, without having to expose the others.\r\n>       Our partial workaround to this conundrum is to replace, as much as possible,\r\n>     unexpanded projections like Equality.sort with exposed matches. This causes the\r\n>     kernel to evaluate the projection when it propagates an expanded value for the\r\n>     record, rather than going into the op-described tailspin. The workaround is\r\n>     only partial because some explicit constants must remain to let unification find\r\n>     canonical instances, e.g., the Choice.sort field of Choice.eqType, though\r\n>     fortunately (in this case) evaluation makes most of these vanish. Alas, the\r\n>     largest instance (the Equality.sort _)cannot be made to simplify in this way:\r\n>     it is needed for Canonical Structure unification of, say (x \\in pred1 y) with\r\n>     x and y in a finType, with ?x == ?y. The problem here is that evarconv unifies\r\n>     left to right in the Coq v5-7 term order, where the predicate came before the\r\n>     match (the called \"case\") statement, so it has to infer the eqType for ?x and ?y\r\n>     on the basis of the let: return type.\r\n>       In practice, this means that the packed class idiom gets two extra lines\r\n>      Let xT := let: Pack T _ _ := cT in T.\r\n>      Notation xclass := (class : class_of xT).\r\n>     and that the various canonical \"inheritance\" instances should now use\r\n>     an explicit cT value for the sort, xclass for the class, and xT for the tag,\r\n>     e.g.,\r\n>       Definition zmodType := @Zmodule.Pack cT xclass xT.\r\n>     The fix seems reasonably effective in spite of these shrotcomings: time for\r\n>     line 302 in galois drops from 167s to 1s user time, which is more acceptable\r\n>     (but still 2 to 3 orders of magnitude too slow!).\r\n>     \r\n>     Other changes in this revision:\r\n>       - \"Lagrange\" spelling corrected\r\n>       - the Falgebra interface now contains the UnitRing interface (as an Falgebra\r\n>         always has a unitRingType structure -- there is a lemma proving this).\r\n>       - based fieldExtType on Falgebra rather than Field, as this allows all mixins\r\n>         to be in Prop.\r\n>       - added construction of simple field extension from an irreducible polynomial,\r\n>         used it to remove the separability condition in the proof that splitting\r\n>         fields are normal.\r\n>     \r\n>     \r\n>     \r\n>     git-svn-id: svn+ssh://scm.gforge.inria.fr/svn/coqfinitgroup/trunk@3751 305884b8-be16-0410-aa53-a3be2363cef1"},{"author":"CohenCyril","date":"2020-09-09T11:37:14Z","comment":"https://gist.github.com/CohenCyril/c2c7d87c9677ea757a5b67d56a985fb8#file-this-revision-was-meant-to-be-a-local-improvement-to.patch"}],"tags":[],"pull_requests":[]},{"author":"gares","number":461,"state":"open","open_date":"2020-02-21T17:00:38Z","update_date":"2020-02-21T17:01:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":460,"state":"closed","open_date":"2020-02-17T22:28:02Z","update_date":"2020-04-17T15:04:25Z","discussion":[{"author":"pi8027","date":"2020-03-15T05:14:45Z","comment":"@affeldt-aist Could you rebase to fix CI failures?"},{"author":"affeldt-aist","date":"2020-03-15T08:59:37Z","comment":"> Could you rebase to fix CI failures?\r\n\r\nDone.\r\n"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":459,"state":"closed","open_date":"2020-01-31T10:05:37Z","update_date":"2020-06-07T02:20:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":458,"state":"closed","open_date":"2020-01-30T10:29:13Z","update_date":"2020-09-29T06:57:36Z","discussion":[{"author":"pi8027","date":"2020-08-28T08:48:14Z","comment":"@CohenCyril This PR is ready for review."},{"author":"CohenCyril","date":"2020-08-28T14:02:19Z","comment":"Looks great! I will try to review it next week!"},{"author":"pi8027","date":"2020-09-23T07:03:13Z","comment":"I removed `bound_ltLb`, `bound_ltbR`, `ltr_in_itv`, `ler_in_itv`, and `itv_gte` for now, added `in_itv`, and confirmed that it is not so hard to port real-closed (see math-comp/real-closed#28). (I prefer to discuss addition of more lemmas separately if needed.)\r\n\r\nI will update the compatibility layer and the CHANGELOG entries later today."},{"author":"pi8027","date":"2020-09-25T03:05:58Z","comment":"Done."},{"author":"pi8027","date":"2020-09-26T09:05:27Z","comment":"I fixed a few glitches in CHANGELOG and header documentation. It may worth to double-check."},{"author":"CohenCyril","date":"2020-09-28T08:19:17Z","comment":"I think we are close to a merge! Can you rebase?"},{"author":"pi8027","date":"2020-09-28T08:22:22Z","comment":"> I think we are close to a merge! Can you rebase?\r\n\r\nDone."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":457,"state":"closed","open_date":"2020-01-28T16:54:14Z","update_date":"2020-03-31T12:42:24Z","discussion":[{"author":"thery","date":"2020-03-26T10:53:11Z","comment":"Just one littlle remark, I am not a big fan of using ```N``` as a separator (```hasNfind``` and ```memNindex```) I think I find ```hasN_find``` and ```memN_index``` like in ```ifN_eq``` more legible"},{"author":"CohenCyril","date":"2020-03-26T15:05:00Z","comment":"> Just one littlle remark, I am not a big fan of using `N` as a separator (`hasNfind` and `memNindex`) I think I find `hasN_find` and `memN_index` like in `ifN_eq` more legible\r\n\r\nI guess that is a matter of taste, and mine is I like it better in the current way. Furthermore, it seems that the most wide spread convention is to use it as a separator as in `gtnNdvd`, `ltnNge`, `gtNdvdp` and at least 8 other occurrences of this kind... (cf `grep -e \"[a-z0-9]N[a-z0-9]\" **/*.v | grep \"Lemma\"` filtering out the numerous examples where  `N` is not a separtor) while the example you cite has exactly two occurences `ifN_eq` and `ifN_eqC`."},{"author":"thery","date":"2020-03-26T15:14:04Z","comment":"as there are so few occurrences we can still go either ways :smile:\r\nMaybe we can merge this pull request and leave the N as an issue for later\r\n"},{"author":"ybertot","date":"2020-03-31T12:42:24Z","comment":"Thanks @CohenCyril and @thery "}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":455,"state":"closed","open_date":"2020-01-17T15:28:11Z","update_date":"2020-03-12T10:54:50Z","discussion":[{"author":"erikmd","date":"2020-03-08T15:59:11Z","comment":"Hi @CohenCyril I took the opportunity to add 2 commits in this CI-related PR, which is now threefold:\r\n\r\n* Restore the `opam clean -c` option which now works with opam 2.0.6\r\n* Simplify the 2 Dockerfiles a bit\r\n* Remove the 2 jobs ci-lemma-overloading-{8.8,8.9} (coq-lemma-overloading now requires 8.10+)\r\n\r\nRegarding the failure of the ci-finmap-dev job, this would be an upstream issue at first sight:\r\nhttps://github.com/math-comp/finmap/issues/62"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":454,"state":"closed","open_date":"2020-01-10T02:41:11Z","update_date":"2020-01-14T15:28:47Z","discussion":[{"author":"hivert","date":"2020-01-10T11:11:48Z","comment":"Excellent ! While you are at it, I'd like to be able to write something like:\r\n```\r\nVariable (u : unit) (Ord : orderType u).\r\nLet OrdC := [orderType of Ord^c].\r\n```\r\nHowever the notation `Ord^c` is not defined.\r\n\r\n[edit]I was using an old version of the file but even with the new one:\r\n```\r\nFrom mathcomp Require Import all_ssreflect.\r\nFrom mathcomp Require Import boolp.\r\n\r\nRequire Import order.\r\n\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nImport Order.Syntax.\r\nImport Order.TTheory.\r\nOpen Scope order_scope.\r\n\r\nSection Dual.\r\n\r\nVariable (u : unit) (Ord : orderType u).\r\n\r\nLet OrdC := [orderType of Ord^c].\r\n```\r\ngives: \r\n```\r\nError: The reference c was not found in the current environment.\r\n```\r\nIt seems to be defined only locally. Or is there a problem with my install ?\r\n"},{"author":"CohenCyril","date":"2020-01-10T12:23:41Z","comment":"`^c` was renamed to `^d`"},{"author":"hivert","date":"2020-01-10T12:48:35Z","comment":"> `^c` was renamed to `^d`\r\n\r\nIt doesn't work for me with the updated version.\r\n\r\n```\r\nFrom mathcomp Require Import all_ssreflect.\r\nFrom mathcomp Require Import boolp.\r\n\r\nRequire Import order.\r\n\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nImport Order.Syntax.\r\nImport Order.TTheory.\r\nOpen Scope order_scope.\r\n\r\nSection Dual.\r\n\r\nVariable (u : unit) (Ord : orderType u).\r\n\r\nLet OrdC := [orderType of Ord^d].\r\n```\r\nGives:\r\n```\r\nError: The reference d was not found in the current environment.\r\n```\r\nMaybe I didn't export the right module or the right scope. See my precise example above..."},{"author":"hivert","date":"2020-01-10T12:50:17Z","comment":"It seems that it is only defined as a local notation:\r\n```\r\nLocal Notation \"T ^d\" := (dual T) (at level 2, format \"T ^d\") : type_scope.\r\n```"},{"author":"CohenCyril","date":"2020-01-10T13:08:33Z","comment":"> It seems that it is only defined as a local notation:\r\n\r\noh, right, should be fixed now"},{"author":"hivert","date":"2020-01-10T23:00:38Z","comment":"Excellent ! These missing canonicals seem to fix all my issues ! Thanks for the extremely quick fix."}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":453,"state":"closed","open_date":"2020-01-09T07:16:53Z","update_date":"2020-01-30T09:57:41Z","discussion":[{"author":"pi8027","date":"2020-01-09T08:58:28Z","comment":"@strub Can you be the assignee?"},{"author":"strub","date":"2020-01-09T12:31:42Z","comment":"Sure"},{"author":"strub","date":"2020-01-13T06:11:58Z","comment":"Can somebody assigned me?"},{"author":"pi8027","date":"2020-01-14T06:01:25Z","comment":"@strub @CohenCyril Thank you."},{"author":"strub","date":"2020-01-27T14:12:12Z","comment":"I don't think I have that much to say about this PR. I am now using it for 1 month without any problem and the diff seems fine by me.\r\n\r\nIMO, it is ready for merge."},{"author":"pi8027","date":"2020-01-29T06:45:58Z","comment":"@strub Yes, I will do that. Since #270 has not been released yet, it can be a small change. But I also should make the header consistent with implementation."},{"author":"pi8027","date":"2020-01-29T08:44:01Z","comment":"Done. I think this should be OK, but I can wait for more feedback."}],"tags":[],"pull_requests":[]},{"author":"SimonBoulier","number":452,"state":"closed","open_date":"2020-01-08T11:00:11Z","update_date":"2020-01-21T06:49:43Z","discussion":[{"author":"herbelin","date":"2020-01-19T18:18:53Z","comment":"This backward-compatible PR can be merged. Actually, #11368 being now merged to Coq, it would be better to merge it without too much delay if possible in order to remain synchronous with Coq CI. Thanks in advance."},{"author":"ejgallego","date":"2020-01-20T17:01:58Z","comment":"Ping math-comp devs."},{"author":"ppedrot","date":"2020-01-21T05:57:34Z","comment":"Maybe a named ping to @gares is more efficient?"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":451,"state":"closed","open_date":"2019-12-15T00:25:44Z","update_date":"2019-12-17T11:40:35Z","discussion":[{"author":"erikmd","date":"2019-12-16T18:51:10Z","comment":"Hi @CohenCyril, could you be the assignee of this PR?"},{"author":"erikmd","date":"2019-12-17T11:40:35Z","comment":"Thanks @CohenCyril ! so I've just updated the wiki accordingly:\r\nhttps://github.com/math-comp/math-comp/wiki/How-to-add-overlays-for-PRs"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":450,"state":"closed","open_date":"2019-12-12T13:37:30Z","update_date":"2019-12-28T10:32:00Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ybertot","number":447,"state":"closed","open_date":"2019-12-04T12:03:46Z","update_date":"2020-06-08T14:48:07Z","discussion":[{"author":"pi8027","date":"2020-01-09T07:39:38Z","comment":"By the way, what about turning treated deprecation warnings to errors by adding `-arg -w -arg +...` so that we do not introduce the use of deprecated features, e.g., #438?"},{"author":"CohenCyril","date":"2020-06-08T12:20:46Z","comment":"@ybertot sorry this PR went completely under my radar for a while... @affeldt-aist why is this for 1.12.0 rather than 1.11.0 ?"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":446,"state":"closed","open_date":"2019-12-03T14:20:49Z","update_date":"2019-12-11T16:28:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ybertot","number":445,"state":"closed","open_date":"2019-12-02T13:01:12Z","update_date":"2019-12-11T17:24:18Z","discussion":[{"author":"gares","date":"2019-12-11T17:24:18Z","comment":"I don't think we want a changelog entry for this fix, so I'm merging as is."}],"tags":[{"tag":"kind: tool","description":"Issue or PR about a tool. (e.g. packager or hierarchy_diagram)"}],"pull_requests":[]},{"author":"pi8027","number":444,"state":"closed","open_date":"2019-11-29T03:53:36Z","update_date":"2019-11-29T12:30:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":443,"state":"closed","open_date":"2019-11-28T16:39:48Z","update_date":"2020-01-03T14:58:54Z","discussion":[{"author":"pi8027","date":"2019-12-02T11:59:09Z","comment":"I have discovered many different kinds of redundancies mainly in `polydiv` so reduced them. I marked this PR as a draft just to do not merge before #270 so that we do not introduce new conflicts in #270."},{"author":"CohenCyril","date":"2019-12-26T12:01:11Z","comment":"@pi8027 thanks, I think this is overall a great improvement. However I have a small doubt on the style of `have stuff : ... := ...`, and I will ask others about it...\r\n\r\n@ggonthier @gares @amahboubi  is there an (unwritten?) invariant of the ssreflect tactic language stating that the intro pattern occurring right after the `have` keyword must/should only consume elements of the stack introduced by the statement occuring after `:`. Or is it ok to also introduce (or case or use a forward view on, etc) hypothesis that were there before the `have`, as in https://github.com/math-comp/math-comp/pull/443/files#diff-dd7d7be19aa85c8361134ccf162dca93R1177."},{"author":"gares","date":"2019-12-26T13:07:29Z","comment":"Apparently the invariant is not enforced. It makes sense to me, but I have no idea if the lack of enforcement was widely exploited or if there are good use cases. Correct me if I'm wrong, but in this PR it is a bit borderline.\r\n\r\nWhat I think is enforced is that you do one case split, no more, but then nothing prevents you to introduce more than what comes from the case in each branch..."},{"author":"pi8027","date":"2019-12-27T18:28:51Z","comment":"Since I probably need to rebase some patches on top of this, I would like to revert that kind of use of `have` so that we can merge this PR without more discussion on that point."},{"author":"pi8027","date":"2019-12-28T08:47:45Z","comment":"> Since I probably need to rebase some patches on top of this, I would like to revert that kind of use of `have` so that we can merge this PR without more discussion on that point.\r\n\r\nDone. @CohenCyril "}],"tags":[{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"ggonthier","number":441,"state":"closed","open_date":"2019-11-26T16:30:19Z","update_date":"2020-10-13T10:37:36Z","discussion":[{"author":"ggonthier","date":"2019-11-27T15:07:13Z","comment":"I've implemented the documentation and deprecation improvements, and rebased."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":439,"state":"closed","open_date":"2019-11-25T14:32:35Z","update_date":"2019-11-28T14:50:17Z","discussion":[{"author":"CohenCyril","date":"2019-11-27T02:26:48Z","comment":"fixed by #261 "}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":438,"state":"closed","open_date":"2019-11-24T15:59:48Z","update_date":"2019-11-27T17:56:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":437,"state":"closed","open_date":"2019-11-23T02:56:57Z","update_date":"2019-11-27T17:56:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":435,"state":"closed","open_date":"2019-11-21T09:53:18Z","update_date":"2020-01-09T09:09:13Z","discussion":[{"author":"pi8027","date":"2020-01-07T04:51:32Z","comment":"@anton-trunov Could you rebase this, so that PR #429 can benefit from this? Or, can we merge this now? cc: @CohenCyril "},{"author":"anton-trunov","date":"2020-01-07T10:12:08Z","comment":"I'd be very much in favor of just merging it as it is -- the change seems to be pretty trivial and `fcsl-pcm` builds in about 35-40 seconds on my machine, so it wouldn't make much impact on the build times for Mathcomp's CI."},{"author":"CohenCyril","date":"2020-01-07T17:59:05Z","comment":"Hi, I do think we have a policy yet on what to integrate to mathcomp CI, I am fine with integrating fcsl-pcm to the CI, but I would like that it is discussed during the math-comp.\r\nAlso I prefer this is rebased just before merging to check that the current version of fcsl-pcm is indeed compatible with the latest dev version of mathcomp."},{"author":"anton-trunov","date":"2020-01-07T18:44:15Z","comment":"Hi Cyril,\r\nOh, you just wanted to restart the CI (I was confused by the fact that there was no merge conflicts).\r\nDone."},{"author":"CohenCyril","date":"2020-01-07T19:33:31Z","comment":"> Oh, you just wanted to restart the CI (I was confused by the fact that there was no merge conflicts).\r\n\r\nI wanted to restart the CI on the latest codebase (hence the need to rebase on master first)."},{"author":"pi8027","date":"2020-01-08T01:12:05Z","comment":"Thanks anyway. Now I see PR #429 doesn't break FCSL-PCM."},{"author":"anton-trunov","date":"2020-01-08T07:52:26Z","comment":"> I wanted to restart the CI on the latest codebase (hence the need to rebase on master first).\r\n\r\nIndeed, that's very reasonable (I just forgot to mention that I recently tested against the latest Mathcomp version in FCSL-PCM's own CI)\r\n\r\n> Thanks anyway. Now I see PR #429 doesn't break FCSL-PCM.\r\n\r\nAwesome! Thank you."}],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":434,"state":"closed","open_date":"2019-11-20T15:53:46Z","update_date":"2020-10-13T10:37:34Z","discussion":[{"author":"gares","date":"2019-11-22T13:12:52Z","comment":"I arrive a bit late, but my suggestion can be applied a posteriori.\r\n\r\nI believe the *diff* of this PR is very relevant for the user willing to port his files. It may be nice to have a pointer to this PR or this commit in the changelog, eg \"This commit ports math-comp to the new idiom: <link>\".\r\n\r\n"}],"tags":[],"pull_requests":[]},{"author":"gares","number":433,"state":"closed","open_date":"2019-11-18T17:02:08Z","update_date":"2020-09-17T20:20:44Z","discussion":[{"author":"gares","date":"2019-11-18T17:11:33Z","comment":"For the reviewers:\r\n- please suggest other lemmas to be printed and scopes to be opened"},{"author":"gares","date":"2019-11-18T17:38:27Z","comment":"CI should test if coq/coq#11090 (that I used as the reference output) agrees with Coq 8.9.\r\nCoq 8.10 prints coercions, so there it will fail."},{"author":"pi8027","date":"2019-11-19T02:33:17Z","comment":"Also `mathcomp/Make.test-suite` have to be changed. Currently, the test-suite facility is invoked only from `make-coq-latest` and not invoked from `coq-8.9` and `coq-8.10` in CI. (see `Dockerfile.make` and `.gitlab-ci.yml`.)"},{"author":"ybertot","date":"2020-03-25T14:30:00Z","comment":"@gares, do you confirm that this PR should be in release 1.11"},{"author":"gares","date":"2020-03-26T16:04:18Z","comment":"We don't really care since it is not for the final user, it is for us and for the coq devs.\r\n\r\nBut I completely forgot about this PR, thanks for the heads up"},{"author":"CohenCyril","date":"2020-08-25T12:11:20Z","comment":"@gares I think this PR is of extreme importance to prevent Coq regressions going under the radar.\r\n@maximedenes can I assign you to \"torture\" @gares?"},{"author":"maximedenes","date":"2020-08-25T16:24:14Z","comment":"> can I assign you to \"torture\" @gares?\r\n\r\nSure, sounds like something I could do ;)"},{"author":"ejgallego","date":"2020-08-26T14:12:58Z","comment":"Note that if #316 is merged, dune does provide some built-in support for this "},{"author":"gares","date":"2020-09-07T14:39:57Z","comment":"I've revived this. It would be nice to have a second round of review on CI & Docker since I'm really not an expert there."},{"author":"CohenCyril","date":"2020-09-07T14:47:21Z","comment":"@erikmd would you mind taking a look?"},{"author":"erikmd","date":"2020-09-09T11:28:16Z","comment":"@CohenCyril yes, I plan to have a look today (otherwise ping me!)"},{"author":"gares","date":"2020-09-09T13:19:39Z","comment":"It requires some fixes. In particular you can provide a different output reference depending on the version of Coq (plus a default one). I must have messed things up, so the reference for 8.12 is OK, the default one is wrong (my intent was to have it for < 8.12) and the 8.13 reference is wrong as well. Anyway, fixing the reference files should be orthogonal to the infrastructure."},{"author":"erikmd","date":"2020-09-10T13:53:31Z","comment":"BTW, a related question:\r\nare you interested in keeping the generated files `test_suite/output.v.out.new` as build artifacts? (e.g., with an expiration of 1 month)"},{"author":"gares","date":"2020-09-10T14:07:01Z","comment":"the diff in the log is enough I guess, but why not.\r\n"},{"author":"erikmd","date":"2020-09-10T16:24:08Z","comment":"@gares\r\n\r\n> the diff in the log is enough I guess, but why not.\r\n\r\nOK so maybe it is unnecessary (otherwise you might want to add an `artifacts` spec after these `script` lines below)\r\n\r\n```yaml\r\n  script:\r\n    - cd mathcomp\r\n    - make test-suite \r\n  artifacts:\r\n    name: \"output-test_$CI_JOB_NAME\"\r\n    when: always\r\n    paths:\r\n      - mathcomp/test_suite/*.v.out.new\r\n    expire_in: 1 month\r\n```\r\n\r\nAnyway, don't forget to remove the line\r\n```\r\n- docker run --mount \"type=bind,source=$(pwd),target=/home/coq/mathcomp\" -w /home/coq/mathcomp -t \"${IMAGE}\" /bin/bash --login -c \"set -x; cd mathcomp; make test-suite\"\r\n```\r\n(which is subsumed by the `test-*` jobs)"},{"author":"erikmd","date":"2020-09-11T11:13:33Z","comment":"It seems there are two remaining issues:\r\n\r\n1. `make test-suite` rebuilds the whole mathcomp (instead of relying on the installed `.vo`s): https://gitlab.com/math-comp/math-comp/-/jobs/732817696#L188 (this is somewhat related to the (incomplete) change https://github.com/math-comp/math-comp/pull/433/commits/ff61778018f5eff362a50e48e5b3fd30dec962d2); I guess it might be desirable that an **environment variable** commands whether `make test-suite` behaves like this by default (rebuilding/testing the local `.v`s), or does not recompile the files and assume that e.g. `make install` has already be done (?)\r\n2. for some reason, the `diff` is performed with `test_suite/output.v.out` instead of `test_suite/output.v.out.8.9` (?): https://gitlab.com/math-comp/math-comp/-/jobs/732817696#L327"},{"author":"gares","date":"2020-09-11T12:04:06Z","comment":"For 1. I miss there the dependency is. Do you know? I'm fine with the env variable thing, but I could not find where to use it."},{"author":"gares","date":"2020-09-11T14:35:50Z","comment":"I think I found it. Let's see how CI goes"},{"author":"erikmd","date":"2020-09-11T20:26:43Z","comment":"Hi @gares,\r\n\r\nthe pipeline failed (so I cancelled it to avoid running the remaining jobs needlessly)\r\nbecause IIUC, the `all.vo` file is not installed by opam install.\r\n\r\ncf. https://gitlab.com/math-comp/math-comp/-/jobs/734043221\r\n```\r\n$ make test-suite TEST_SKIP_BUILD=1\r\nCOQBIN=/home/coq/.opam/4.07.1+flambda/bin/ ocaml ../etc/utils/hierarchy.ml -verify -R . mathcomp -lib all.all > test_suite/test_hierarchy_all.v\r\n/home/coq/.opam/4.07.1+flambda/bin/coq_makefile  -f Make.test-suite -o Makefile.test-suite.coq\r\nmake -f Makefile.test-suite.coq VDFILE=\".coqdeps.test-suite\" --no-print-directory\r\nCOQDEP VFILES\r\nmake[2]: *** No rule to make target 'all/all.vo', needed by 'test_suite/test_hierarchy_all.vo'.  Stop.\r\nmake[1]: *** [Makefile.test-suite.coq:339: all] Error 2\r\nmake: *** [Makefile.common:96: this-test-suite] Error 2\r\nERROR: Job failed: exit code 1\r\n```\r\n\r\nHopefully just reverting this commit https://github.com/math-comp/math-comp/commit/ff61778018f5eff362a50e48e5b3fd30dec962d2\r\n(and keeping your other change dealing with `TEST_SKIP_BUILD=1`) would be OK, to compile `all.vo` and *just* `all.vo`(?)"},{"author":"pi8027","date":"2020-09-11T21:24:39Z","comment":"I think it is acceptable to replace this `-lib all.all` with `-lib all_ssreflect -lib all_algebra ... -lib all_character` to avoid the issue with `all.vo`.\r\nhttps://github.com/math-comp/math-comp/blob/c2e7bad5c95a11f42f9f6d282ee2e5d84e27cbed/mathcomp/Makefile.common#L60"},{"author":"gares","date":"2020-09-12T15:36:50Z","comment":"I guess I need to remove the -R as well"},{"author":"pi8027","date":"2020-09-13T04:50:50Z","comment":"> I guess I need to remove the -R as well\r\n\r\n@gares Removing `-R . mathcomp` breaks the `test-suite` target (without installation). Should we rather pass the `COQLIBS` variable of `Makefile.test-suite.coq` to `hierarchy.ml` and use it to locate libraries?"},{"author":"gares","date":"2020-09-14T11:49:20Z","comment":"I've the impression that the `Make.test-suite` is not designed work in both local and system wide modes.\r\n\r\nWhat one could do is to have the file contain no `-R` and, depending on the mode (a variable), invoke `coq_makefile -f Make.test-suite -R . mathcomp` or `coq_makefile -f Make.test-suite -R test_suite mathcomp.test_suite`.\r\n\r\nIs what you propose simpler/cleaner? (I'm not sure I get it)"},{"author":"gares","date":"2020-09-14T18:17:41Z","comment":"This looks finally ready for squash+merge!"},{"author":"erikmd","date":"2020-09-14T20:31:12Z","comment":":+1:\r\nand the night after the squash+merge, we'll just need to check that the new job `test-coq-dev` is properly triggered in the scheduled [pipeline](https://gitlab.com/math-comp/math-comp/-/pipelines)."},{"author":"CohenCyril","date":"2020-09-15T13:39:16Z","comment":"Before merge I have few questions : how many tests should we perform? Would it be possible to test intermediate statements? (i.e. after application of a few tactics).\r\n"},{"author":"gares","date":"2020-09-15T15:09:01Z","comment":"> Before merge I have few questions : how many tests should we perform? Would it be possible to test intermediate statements? (i.e. after application of a few tactics).\r\n\r\nHow many I don't know, the only limit is about maintenance, if the statement changes or Coq changes (while staying correct) then the test reference output may need an update.\r\n\r\nYes, just start a proof and write `Show.` when you feel like the goal is interesting."},{"author":"gares","date":"2020-09-15T15:13:46Z","comment":"As a start it would help to have some tests covering rings, polynomials, lattices and matrices for example, since the statement I picked covers many group stuff, some set and seq stuff as well, but not much more. But not in this PR ;-)"},{"author":"gares","date":"2020-09-16T08:35:59Z","comment":"ping @maximedenes "},{"author":"CohenCyril","date":"2020-09-17T15:46:02Z","comment":"OK! I'm taking the lead and merging."}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"CohenCyril","number":432,"state":"closed","open_date":"2019-11-18T15:35:33Z","update_date":"2019-11-22T10:07:29Z","discussion":[{"author":"ybertot","date":"2019-11-20T08:41:59Z","comment":"LGTM"},{"author":"amahboubi","date":"2019-11-22T09:04:51Z","comment":"@ybertot should we merge this PR or do you want a real freeze before the upcoming release?"},{"author":"ybertot","date":"2019-11-22T09:09:40Z","comment":"My incompetence shines here.  I thought I had already merged this (and that I had made a mistake by not squashing the commits together).  If the merge is still in order, I think we should do it with a squash of the commits together.  In my opinion, this PR is perfectly fine for this release.  This why I tagged it for the milestone."}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":431,"state":"closed","open_date":"2019-11-17T12:28:42Z","update_date":"2020-04-09T12:11:53Z","discussion":[{"author":"CohenCyril","date":"2019-11-19T16:21:17Z","comment":"I am a bit nervous about this ... `Let` declarations pollute the goal display, and in this case for theorems that are `Hint Resolve`, hence meant to be transparent to the user. Is there a new \"invisible `Let`\" feature that I am not aware of?"},{"author":"ppedrot","date":"2019-11-19T16:57:28Z","comment":"@CohenCyril Alternatively we can define them inside the section if you prefer. Nonetheless, it seems that let-definitions are used pervasively in the mathcomp library."},{"author":"affeldt-aist","date":"2020-03-25T14:41:53Z","comment":"It seems to the release managers that this PR could make it to the upcoming release. Can you complete it?"},{"author":"affeldt-aist","date":"2020-04-08T13:42:28Z","comment":"We are thinking about merging this PR by tomorrow if nobody disagrees."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":429,"state":"closed","open_date":"2019-11-15T23:37:50Z","update_date":"2020-04-08T03:58:08Z","discussion":[{"author":"pi8027","date":"2020-01-30T10:17:10Z","comment":"I just changed the title and resolved a conflict with #453. Since `order.v` has not been released yet, I'm still not sure how it should be recorded in CHANGELOG."},{"author":"pi8027","date":"2020-03-18T07:20:59Z","comment":"Hello @ggonthier, @CohenCyril, can we merge this before the next beta release? Thanks."},{"author":"ybertot","date":"2020-03-25T14:05:54Z","comment":"There remains a tag \"Needs:documentation\" that is confusing for release managers.  Can you please clarify, complete the work if needed, and merge?  @CohenCyril @ggonthier "},{"author":"CohenCyril","date":"2020-03-25T15:22:26Z","comment":"> There remains a tag \"Needs:documentation\" that is confusing for release managers. Can you please clarify, complete the work if needed, and merge? @CohenCyril @ggonthier\r\n\r\nI was a bit worried about the backward compatibility issues triggered by this PR, but after @pi8027's experiments, it does not not look so bad. I also thought @ggonthier could be opposed to it for the same reasons (or others?). I think we can merge for the beta and backtrack if this causes more trouble than relief to our users (in the former case, we could have distinct spec lemmas for the enhanced cased analysis instead of overloading `leqP`...)."},{"author":"ybertot","date":"2020-04-01T11:21:15Z","comment":"Thanks @pi8027 @CohenCyril "}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":428,"state":"closed","open_date":"2019-11-15T18:30:41Z","update_date":"2019-11-29T03:48:27Z","discussion":[{"author":"gares","date":"2019-11-25T14:27:44Z","comment":"Pending PR: https://github.com/maximedenes/math-comp/pull/2"},{"author":"maximedenes","date":"2019-11-25T15:22:07Z","comment":"I'll rebase to make the history simpler."},{"author":"maximedenes","date":"2019-11-25T15:23:40Z","comment":"done"},{"author":"CohenCyril","date":"2019-11-25T17:05:56Z","comment":"@ybertot can you review this PR since you are going to use it?"},{"author":"CohenCyril","date":"2019-11-25T17:07:28Z","comment":"PS: I guess the only review that we need would be a successful generation of the doc..."},{"author":"gares","date":"2019-11-25T17:35:08Z","comment":"Yves told me he did try locally.\r\nAt some point we should decide to run this in CI, or at least some parts of it, so that it down not bitrot."},{"author":"ybertot","date":"2019-11-26T07:17:00Z","comment":"I did the review, checked it works with several versions of Coq (8.9, 8.10, and master), and proposed corrections to @mdenes, integrated above.  I am now checking the aspect of the produced documentation.\r\n\r\nI vote against a CI test for the makefile entry to produce the documentation, because it will duplicate math-comp compilation and still not provide the actual verification that the produced files are correct."},{"author":"CohenCyril","date":"2019-11-26T13:39:38Z","comment":"@ybertot did you check the end result?"},{"author":"CohenCyril","date":"2019-11-26T13:40:02Z","comment":"(PS: if so, please approve the PR.)"},{"author":"ybertot","date":"2019-11-26T14:11:14Z","comment":"There is some strange results with new \"active\" links for some symbols which actually do not point correctly where they should.  I try to understand where they come from (our own stuff or coqdoc)."},{"author":"CohenCyril","date":"2019-11-27T11:50:08Z","comment":"@ybertot great! For further reference, here is the issue you posted https://github.com/coq/coq/issues/11194"},{"author":"pi8027","date":"2019-11-29T03:48:27Z","comment":"`make clean` fails if the doc has not been generated.\r\n```\r\n$ make clean\r\nCLEAN\r\nCLEAN *.aux *.timing\r\nCLEAN\r\nCLEAN *.aux *.timing\r\nrm -r _build_doc/\r\nrm: cannot remove '_build_doc/': No such file or directory\r\nmake: *** [Makefile.common:149: doc-clean] Error 1\r\n```"}],"tags":[],"pull_requests":[]},{"author":"hivert","number":427,"state":"closed","open_date":"2019-11-15T07:25:01Z","update_date":"2019-11-27T17:56:36Z","discussion":[{"author":"hivert","date":"2019-11-15T07:26:17Z","comment":"Duplicate of https://github.com/math-comp/math-comp/pull/413 "}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":426,"state":"closed","open_date":"2019-11-14T23:53:11Z","update_date":"2019-11-22T10:35:35Z","discussion":[{"author":"pi8027","date":"2019-11-22T09:09:29Z","comment":"(Since my use case of this PR also requires #270 and #388, I'm totally fine to target 1.11.0 here.)"},{"author":"amahboubi","date":"2019-11-22T09:09:58Z","comment":"@ybertot should we merge this one now or after releasing?"},{"author":"ybertot","date":"2019-11-22T09:23:34Z","comment":"As I see, this PR is already approved, so it can be integrated (same treatment as #432)."}],"tags":[],"pull_requests":[]},{"author":"thery","number":423,"state":"closed","open_date":"2019-11-14T16:23:34Z","update_date":"2020-05-31T15:03:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":421,"state":"closed","open_date":"2019-11-14T16:14:28Z","update_date":"2019-12-26T11:41:25Z","discussion":[{"author":"pi8027","date":"2019-11-14T16:21:20Z","comment":"Since we regularly forget to put things to `GRing.Theory`, it's probably good to check the whole diff of ssralg after the latest release to find this kind of mistake before the next release."},{"author":"pi8027","date":"2019-11-14T16:27:04Z","comment":"Actually `regular_comAlgType` and `regular_comUnitAlgType` have not been exported yet. (#406)"},{"author":"CohenCyril","date":"2019-11-15T13:27:34Z","comment":"This is a dumb fix I will self-merge now."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":420,"state":"closed","open_date":"2019-11-14T16:10:53Z","update_date":"2019-11-27T17:56:43Z","discussion":[{"author":"pi8027","date":"2019-11-18T23:50:42Z","comment":"@CohenCyril Thank you!"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":419,"state":"closed","open_date":"2019-11-14T12:49:13Z","update_date":"2019-11-14T14:32:55Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":417,"state":"closed","open_date":"2019-11-13T11:17:44Z","update_date":"2019-11-25T14:34:20Z","discussion":[{"author":"affeldt-aist","date":"2019-11-13T11:26:28Z","comment":"A first version appeared in PR #416 from which it has been removed. "},{"author":"affeldt-aist","date":"2019-11-14T01:21:46Z","comment":"@pi8027 Thanks. I hope to be able to address all comments by tomorrow."},{"author":"pi8027","date":"2019-11-14T02:45:00Z","comment":"The type of non-negative numbers may allow us to use the bigop theory to reason about bigmaxr in mathcomp-analysis. This requires some more work."},{"author":"affeldt-aist","date":"2019-11-14T08:03:01Z","comment":"> The type of non-negative numbers may allow us to use the bigop theory to reason about bigmaxr in mathcomp-analysis. \r\n\r\nIt is already used in mathcomp-analysis to define a norm on matrices (see https://github.com/math-comp/analysis/tree/analysis_270, WIP).\r\n"},{"author":"pi8027","date":"2019-11-14T08:04:46Z","comment":"@affeldt-aist Great! I hope that will be integrated into mathcomp."},{"author":"affeldt-aist","date":"2019-11-14T11:40:01Z","comment":"I organize a migration of this PR to mathcomp-analysis, so that in the end it will simply turn into a removal of ProdNormedZmodule."},{"author":"CohenCyril","date":"2019-11-25T14:28:18Z","comment":"@affeldt-aist can this PR be closed?"},{"author":"affeldt-aist","date":"2019-11-25T14:34:19Z","comment":"PR closed. Contents moves to PR #270."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":416,"state":"closed","open_date":"2019-11-11T17:13:29Z","update_date":"2019-11-14T11:49:45Z","discussion":[{"author":"pi8027","date":"2019-11-13T04:56:14Z","comment":"@affeldt-aist `416` (the number of this PR) should be added to the following line and the other three occurrences to pass CI.\r\nhttps://github.com/math-comp/math-comp/blob/287585bd52f4d7d4e85b515d9b213d35c9f6863c/.gitlab-ci.yml#L148\r\n\r\nThe generalized `ProdNormedZmodule` and `nonnegnum_of` still seem to be draft. Can't we remove them temporally to merge #270 soon? cc: @CohenCyril \r\n\r\n"},{"author":"affeldt-aist","date":"2019-11-13T07:37:53Z","comment":"> 416 (the number of this PR) should be added ... to pass CI.\r\n\r\nThanks.\r\n"},{"author":"pi8027","date":"2019-11-13T07:57:15Z","comment":"> BTW, this generalization is motivated by analysis.\r\n\r\n@affeldt-aist I think you can move the draft part of this PR including `ProdNormedZmodule` to the analysis repository to continue your work, and port them to mathcomp later. (Just to clarify, I'm proposing to remove `ProdNormedZmodule` including the non-generalized one and to do not provide the `normedZmodType` instance of prod in mathcomp for now.)"},{"author":"affeldt-aist","date":"2019-11-13T11:19:59Z","comment":"> @pi8027 The generalized ProdNormedZmodule and nonnegnum_of still seem to be draft. Can't we remove them temporally to merge #270 soon? cc: @CohenCyril\r\n\r\nThe generalized ProdNormedZmodule and nonnegnum_of have been moved to PR #417 "},{"author":"affeldt-aist","date":"2019-11-13T11:26:14Z","comment":"> Just to clarify, I'm proposing ... to do not provide the normedZmodType instance of prod in mathcomp for now.\r\n\r\nI am not sure whether other developments (besides mathcomp-analysis) depend on it :-/."},{"author":"pi8027","date":"2019-11-13T22:48:42Z","comment":"> I am not sure whether other developments (besides mathcomp-analysis) depend on it :-/.\r\n\r\nAFAIK, no project other than mathcomp-analysis depends on `ProdNormedZmodule`. Since it has been introduced in #270, I think there is no problem to remove it."},{"author":"CohenCyril","date":"2019-11-14T10:05:49Z","comment":"Yes, I think `ProdNormedZmodule` should be removed all together (in its generalized and non generalized forms)."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":415,"state":"closed","open_date":"2019-11-11T16:42:44Z","update_date":"2019-11-14T10:02:27Z","discussion":[{"author":"amahboubi","date":"2019-11-14T09:39:20Z","comment":"Thanks, this is very useful!"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":414,"state":"closed","open_date":"2019-11-11T16:02:08Z","update_date":"2019-11-11T16:51:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"hivert","number":413,"state":"closed","open_date":"2019-11-10T09:45:29Z","update_date":"2021-07-03T22:45:10Z","discussion":[{"author":"hivert","date":"2019-11-11T20:38:08Z","comment":"@CohenCyril Done your changes."},{"author":"amahboubi","date":"2019-11-14T09:37:24Z","comment":"@CohenCyril is this ready to merge?"},{"author":"pi8027","date":"2019-11-14T15:36:21Z","comment":"Shouldn't those lemmas be exported from the `GRing.Theory` module?"},{"author":"CohenCyril","date":"2019-11-14T16:15:07Z","comment":"> Shouldn't those lemmas be exported from the `GRing.Theory` module?\r\n\r\nwell spotted @pi8027 "}],"tags":[],"pull_requests":[]},{"author":"thery","number":412,"state":"closed","open_date":"2019-11-08T10:40:53Z","update_date":"2019-11-14T16:21:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"GTaumaturgo","number":411,"state":"closed","open_date":"2019-11-07T03:02:21Z","update_date":"2019-11-14T10:02:08Z","discussion":[{"author":"amahboubi","date":"2019-11-14T09:49:15Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"GTaumaturgo","number":410,"state":"closed","open_date":"2019-11-04T17:47:20Z","update_date":"2019-11-06T14:55:25Z","discussion":[{"author":"CohenCyril","date":"2019-11-06T14:55:25Z","comment":"@GTaumaturgo thanks"}],"tags":[],"pull_requests":[]},{"author":"chdoc","number":408,"state":"closed","open_date":"2019-11-04T10:25:35Z","update_date":"2019-11-14T10:01:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"hivert","number":406,"state":"closed","open_date":"2019-11-01T15:25:28Z","update_date":"2019-11-06T20:18:03Z","discussion":[{"author":"hivert","date":"2019-11-01T15:25:54Z","comment":"This pull request is currently not ready to merge : I'd like to add commutative unitary algebras too. I'm currently having some difficulties with the diamond inheritance, I'll commit the change when I'm done solving those problems. If you prefer, I can add them in another PR."},{"author":"hivert","date":"2019-11-01T16:27:45Z","comment":"Actually, even with ComAlgType I've some problems with where pointed out by travisCI..."},{"author":"pi8027","date":"2019-11-01T20:03:48Z","comment":"@hivert Hello. I think you should make `fieldExtType` inheriting `comAlgType` (and `comUnitAlgType`). I can write a patch if you need."},{"author":"hivert","date":"2019-11-02T20:39:09Z","comment":"@pi8027 Thanks for the review. As I said, the PR is not yet ready for integration. I was trying to find and resolve all these problems... Anyway, a big thanks for the help ! I think I'm starting to understand the inheritance mechanism !"},{"author":"hivert","date":"2019-11-03T00:39:06Z","comment":"It should be ok now. sorry for the mess. I still need to update the changelog (will do tomorrow)."},{"author":"hivert","date":"2019-11-03T09:28:52Z","comment":"The PR is now ready for review. "},{"author":"pi8027","date":"2019-11-05T13:37:43Z","comment":"All the issues I discovered have been addressed. cc: @CohenCyril @amahboubi "},{"author":"hivert","date":"2019-11-05T17:37:00Z","comment":"Excellent ! Thanks for the help understanding the hierarchy !"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":405,"state":"closed","open_date":"2019-10-31T12:18:22Z","update_date":"2019-10-31T15:42:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":403,"state":"closed","open_date":"2019-10-30T21:38:30Z","update_date":"2019-11-14T14:58:42Z","discussion":[{"author":"amahboubi","date":"2019-11-14T10:01:29Z","comment":"Good catch!"},{"author":"amahboubi","date":"2019-11-14T10:05:21Z","comment":"Unfortunately, with the recent merge of other PR, the change log now has a silly conflict. Could you resolve it ? I will then merge right away. Thanks and sorry for the inconvenience."},{"author":"anton-trunov","date":"2019-11-14T12:25:27Z","comment":"@amahboubi No worries :) I rebased on top of `master`. Should be good to go."},{"author":"amahboubi","date":"2019-11-14T14:58:13Z","comment":"Thanks @anton-trunov !"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":402,"state":"closed","open_date":"2019-10-30T13:49:48Z","update_date":"2019-10-30T17:28:59Z","discussion":[{"author":"CohenCyril","date":"2019-10-30T13:51:25Z","comment":"@pi8027 great! However I am afraid you will have to patch all the dependencies :cry: "},{"author":"pi8027","date":"2019-10-30T13:52:24Z","comment":"@CohenCyril I think I need to patch only real-closed."},{"author":"pi8027","date":"2019-10-30T14:38:50Z","comment":"> I think I need to patch only real-closed.\r\n\r\nFixed in math-comp/real-closed#16."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":400,"state":"closed","open_date":"2019-10-26T14:37:04Z","update_date":"2019-10-31T22:52:36Z","discussion":[{"author":"ejgallego","date":"2019-10-30T18:35:48Z","comment":"Hi folks,\r\n\r\nthis PR seems to have broken GeoCoq:\r\n```\r\nFile \"./Meta_theory/Models/POF_to_Tarski.v\", line 432, characters 0-61:\r\nError: The RHS of scalerBr\r\n    (_ *: _ - _ *: _)\r\ndoes not match any subterm of the goal\r\n```\r\nwhere the code is:\r\nhttps://github.com/GeoCoq/GeoCoq/blob/ae5b7aecd1ab587e2c039904a20b55610f136753/Meta_theory/Models/POF_to_Tarski.v#L425-L434\r\n```coq\r\nLemma extension_contraction x y z k:\r\n  k != 0 -> extension x y k == z = (contraction x z k == y).\r\nProof.\r\nmove=> k_neq0; rewrite /extension /contraction.\r\nsuffices: (k*:(k^-1 *: (y - x) + x) == k*:z) = (k^-1 *: (y - x) + x == z).\r\n  move<-; rewrite scalerDr scalerA divff // scale1r eq_sym -subr_eq.\r\n  by rewrite -subr_eq opprK -scalerBr.\r\nrewrite -subr_eq0 -[X in _ = X]subr_eq0 -scalerBr scaler_eq0. (* <- bad line *)\r\nby move/negPf: k_neq0 ->; rewrite orFb.\r\nQed.\r\n```\r\nGoal in the broken state is:\r\n```\r\n  (k *: (k^-1 *: (y - x) + x) == k *: z) = (k^-1 *: (y - x) + x == z)\r\n```\r\nIn particular now `-subr_eq0` doesn't match the first `k *: _ == _` as it did before. I wonder what's going on, the fix upstream is easy, just letting you know.\r\n\r\nFixed tactic:\r\n```\r\nrewrite -[k *: _ == _]subr_eq0 -[X in _ = X]subr_eq0 -scalerBr scaler_eq0.\r\n```"},{"author":"pi8027","date":"2019-10-31T22:52:36Z","comment":"Dear @ejgallego, thank you so much for fixing the issue I exposed. This is a variant of the subterm selection problem: #289. `rewrite -[LHS]subr_eq0 -[RHS]subr_eq0 -scalerBr scaler_eq0` might be a smart fix, but anyway, currently we have no solution other than giving patterns explicitly to indicate which subterm to rewrite."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":399,"state":"closed","open_date":"2019-10-25T18:32:49Z","update_date":"2019-11-20T15:19:26Z","discussion":[{"author":"CohenCyril","date":"2019-11-14T15:07:10Z","comment":"@ybertot this PR is now ready for review"},{"author":"CohenCyril","date":"2019-11-15T15:28:56Z","comment":"@ybertot fixed.\r\nI would like to get @ggonthier's opinion on the renaming though..."},{"author":"ggonthier","date":"2019-11-15T16:25:51Z","comment":"@CohenCyril I have to disagree with the naming convention you use. `l` and `r` are used to refer to the sides of a binary operators; for a relation `L` and `R` are used, though often omitted when the side is unambiguous. For inequalities we also use `ge` of `gt` to indicate the operation is on the small (left-hand) side of a comparison, so a more reasonable renaming would be `leq_subr -> geq_subr`. But given how disruptive renaming with allocation of such a widely used lemma is, I'm fairly reluctant - the new lemma will be nowhere nearly as useful, so it can have a somewhat less natural name."},{"author":"ggonthier","date":"2019-11-15T16:31:49Z","comment":"A technical point: `<`, `<=`, and `=` are all at level 70, which is in principle non-associative. Though camlp5 does not implement this (equating it to left associative), you should not take advantage of this, and parenthesise the left-hand side of equations of the form `(m < m - n) = false`."},{"author":"CohenCyril","date":"2019-11-18T14:43:11Z","comment":"@ybertot @ggonthier I took @ggonthier into account and documented https://github.com/math-comp/math-comp/pull/399#issuecomment-554429326 in the CONTRIBUTING.md"},{"author":"ybertot","date":"2019-11-20T08:33:02Z","comment":"@ggonthier Can you confirm you approve the new naming scheme?"},{"author":"ggonthier","date":"2019-11-20T09:44:29Z","comment":"@ybertot @CohenCyril The new naming looks good to me."},{"author":"ybertot","date":"2019-11-20T15:19:26Z","comment":"Thanks"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":397,"state":"closed","open_date":"2019-10-25T17:10:30Z","update_date":"2019-10-30T14:08:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":396,"state":"closed","open_date":"2019-10-25T00:01:58Z","update_date":"2020-03-25T15:49:30Z","discussion":[{"author":"amahboubi","date":"2019-10-25T07:50:36Z","comment":"I am about to be mostly offline for one week and I have no time to check this today. But I expect this one to be easy. @thery can you have a look?"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":395,"state":"closed","open_date":"2019-10-24T16:18:23Z","update_date":"2019-10-25T07:24:53Z","discussion":[{"author":"amahboubi","date":"2019-10-24T17:01:46Z","comment":"@pi8027 Could you explain this PR?"},{"author":"pi8027","date":"2019-10-24T18:39:05Z","comment":"@amahboubi Yes. This PR partially addresses TODOs listed in https://github.com/math-comp/math-comp/pull/270#issuecomment-545343995.\r\n\r\n> TODO list on order.v:\r\n> \r\n> * header:  remove misleading sentences, list the notations and definitions introduced by the library\r\n> * header: improve the documentation of what you get by importing selected of sub-modules\r\n\r\nDone by @affeldt-aist. The `Order.Def` is removed and the `Order.Syntax` is exported from `ssreflect.order` so I think we don't need to explain them.\r\n\r\n> * header: document better the tagging mechanism allowing to work with different order structures on a same type. This could be in the header and/or in later in the file\r\n\r\nNot done yet. This will be addressed by explaining \"instances for division on nat\".\r\n\r\n> * remove the no-op last Import\r\n> * BTW do we need Order.Def?\r\n\r\nDone. `Def` modules (`Order.Def`, `Order.POrderDef`, ...) are removed so that definitions should be accessed by using their qualified names (`Order.le`, `Order.lt`, ...).\r\n\r\n> * What about importing Order.Syntax in all of the subsequent Order.LTheory, Order.TTheory, etc. Note: a Syntax module is only useful to solve potential grammar conflicts. Which does not seem to be the case here.\r\n\r\nNow `Order.Syntax` is exported by default.\r\n\r\n> * ensure all notations do have a scope\r\n\r\nDone.\r\n\r\n> * declare instances for division on nat inside this file, and use this as a documentation/template\r\n\r\nThat `porderType` instance is provided but not explained yet. I have a problem with proving `left_distributive gcdn lcmn` so there is no `latticeType` instance for this now."},{"author":"CohenCyril","date":"2019-10-24T19:05:16Z","comment":"@amahboubi \r\n> @pi8027 Could you explain this PR?\r\n\r\nThis is a PR on top of https://github.com/math-comp/math-comp/tree/experiment/order to amend it. If @pi8027 had commit rights to mathcomp he would commit directly there. Hence IMO, the only explanation this commit should have is: \"Contribution to PR #270: @CohenCyril have a look and add it to #270 unless you see something obviously wrong.\""},{"author":"amahboubi","date":"2019-10-25T07:04:50Z","comment":"@pi8027 Many thanks for the detailed explanation, I really appreciate.\r\n@CohenCyril \r\n> Hence IMO, the only explanation this commit should have is: ...\r\n\r\nWhatever level of explanation, it's important for others to have a line of comment describing its role/status. This one had none.\r\n"},{"author":"CohenCyril","date":"2019-10-25T07:24:53Z","comment":"> Whatever level of explanation, it's important for others to have a line of comment describing its role/status. This one had none.\r\n\r\nYes, I agreed."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":394,"state":"closed","open_date":"2019-10-22T19:22:37Z","update_date":"2019-10-24T12:16:24Z","discussion":[{"author":"CohenCyril","date":"2019-10-23T17:51:50Z","comment":"Ready to merge?"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"arthuraa","number":393,"state":"closed","open_date":"2019-10-19T19:58:26Z","update_date":"2019-10-30T14:08:58Z","discussion":[{"author":"amahboubi","date":"2019-10-21T07:47:58Z","comment":"Hi @arthuraa, thanks for your contribution! Regarding your question:\r\n> The notation is defined in ssrfun. Since most of this file lives in the Coq source now, I did not add a corresponding entry there. Would it make sense to do so?\r\n\r\nI think you should add a header to mathcomp's ssrfun, since you introduced the notation here. This is what happens, e.g., in file [ssreflect.v](https://github.com/math-comp/math-comp/blob/5c4328261edace427e7cad73fdca288f6d73b87d/mathcomp/ssreflect/ssreflect.v#L9). I will merge as soon as you add this documentation."},{"author":"arthuraa","date":"2019-10-21T14:24:22Z","comment":"@amahboubi Sounds good! How does this look?"},{"author":"amahboubi","date":"2019-10-21T14:32:07Z","comment":"It looks great."},{"author":"CohenCyril","date":"2019-10-21T15:46:23Z","comment":"Oh, but if you add something to the local `ssrfun` you should also add it to Coq's... did you? If not, could you do it?"},{"author":"arthuraa","date":"2019-10-22T14:03:33Z","comment":"@CohenCyril Just did: https://github.com/coq/coq/pull/10932."},{"author":"amahboubi","date":"2019-10-24T12:15:52Z","comment":"@CohenCyril, the PR has been merged in Coq. Anything else you would like @arthuraa to do before we merge?"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":392,"state":"closed","open_date":"2019-10-15T09:09:32Z","update_date":"2019-10-16T08:26:36Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"erikmd","number":391,"state":"closed","open_date":"2019-10-15T06:53:45Z","update_date":"2019-10-18T11:05:45Z","discussion":[{"author":"erikmd","date":"2019-10-17T21:46:19Z","comment":"Hi @CohenCyril, do you agree to merge this PR (or do you have some changes to suggest)?\r\nKind regards."},{"author":"CohenCyril","date":"2019-10-18T09:33:27Z","comment":"We did not get the chance to discuss compatibility dropping at the last dev meeting, we should put it on the agenda of the next one. Meanwhile let's not drop any Coq."}],"tags":[],"pull_requests":[]},{"author":"thery","number":390,"state":"closed","open_date":"2019-10-14T16:08:48Z","update_date":"2019-10-15T10:36:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":389,"state":"closed","open_date":"2019-10-08T09:15:14Z","update_date":"2019-10-08T11:05:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":388,"state":"closed","open_date":"2019-10-07T12:32:39Z","update_date":"2019-12-12T21:57:03Z","discussion":[{"author":"amahboubi","date":"2019-10-24T12:44:12Z","comment":"This PR needs an assignee : @CohenCyril ? @strub ?"},{"author":"strub","date":"2019-10-24T12:45:19Z","comment":"Since I'd like to build on top, I am ok to take the role."},{"author":"amahboubi","date":"2019-10-24T12:48:37Z","comment":"Cool, thanks @strub ! I am marking you as such."},{"author":"CohenCyril","date":"2019-10-24T19:02:23Z","comment":"@amahboubi @strub this PR is a draft, I do not think it should have assignee (or that the assignee should be taking actions) before @pi8027 decides it's ready..."},{"author":"pi8027","date":"2019-10-25T11:58:02Z","comment":"I hope I will make this PR ready to merge soon. So it's good to have an assignee. Thank you @strub!"},{"author":"pi8027","date":"2019-12-12T21:57:01Z","comment":"Since I did not find how to change the target branch of an existing PR, I close this PR and open another one to retarget `math-comp:master`."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":387,"state":"closed","open_date":"2019-10-03T10:55:43Z","update_date":"2019-10-07T10:33:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":386,"state":"closed","open_date":"2019-09-30T15:41:36Z","update_date":"2019-10-01T21:40:50Z","discussion":[{"author":"CohenCyril","date":"2019-09-30T16:12:58Z","comment":"LGTM, merge when CI passes."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"llelf","number":385,"state":"closed","open_date":"2019-09-28T19:40:29Z","update_date":"2019-09-30T16:14:13Z","discussion":[{"author":"amahboubi","date":"2019-09-28T20:34:40Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":384,"state":"closed","open_date":"2019-09-26T08:09:45Z","update_date":"2019-10-07T10:33:01Z","discussion":[{"author":"erikmd","date":"2019-10-01T11:20:09Z","comment":"Hi @pi8027 \r\n[sorry for late reply]\r\n\r\n> Should we add CI support for the test suite? (Currently I don't see how to do it.)\r\n\r\nYes, sounds good:\r\n\r\nyou just need to: add one (or several) job(s) that trigger the proper `make` command, or extend an existing job (such as **`make-coq-latest:`**, i.e. MathComp with the latest stable release of Coq) to do this.\r\n\r\nIf you choose that last option, you'd just need to add the following in the end of file `Dockerfile.make` (not tested though, I assume `make test-suite` is the relevant line to add here):\r\n\r\n```bash\r\n  …\r\n  && cd mathcomp \\\r\n  && make Makefile.coq \\\r\n  && make -f Makefile.coq -j ${NJOBS} all \\\r\n  && make -f Makefile.coq install \\\r\n  && make test-suite\"]\r\n```\r\n\r\nand the GitLab CI job `make-coq-latest:` will essentially do this:\r\n\r\n`docker build -f Dockerfile.make --pull --build-arg=coq_image=\"coqorg/coq:latest\" --build-arg=compiler=\"edge\" -t \"mathcomp-dev:make_coq-latest\" .`"},{"author":"pi8027","date":"2019-10-01T17:33:56Z","comment":"Hi @erikmd, thank you for the answer. I changed `Dockerfile.make` as you said. Let see how it runs."},{"author":"pi8027","date":"2019-10-01T18:28:07Z","comment":"```\r\n+ make test-suite\r\n/home/coq/.opam/4.07.1+flambda/bin/coq_makefile  -f Make -o Makefile.coq\r\nmake -f Makefile.coq --no-print-directory\r\nmake[2]: Nothing to be done for 'real-all'.\r\nCOQBIN=/home/coq/.opam/4.07.1+flambda/bin/ ocaml ../etc/utils/hierarchy.ml -verify -R . mathcomp -lib all.all > test_suite/hierarchy_test.v\r\nCannot find file ../etc/utils/hierarchy.ml.\r\nmake: *** [Makefile.common:60: test_suite/hierarchy_test.v] Error 2\r\n```\r\nHmm... How can I call my utility in `etc` from `make` in this setting? I guess I need to declare a new variable in `Makefile.common` for the path of `hierarchy.ml` then use it to specify that path from `Dockerfile.make`."},{"author":"erikmd","date":"2019-10-01T18:40:24Z","comment":"Hi, very probably the issue is that the path ../etc/... was ignored by the .dockerignore file (which is mandatory to have so that the so-called Docker build context contains exactly the source code files... but not the .git folder and so on)\n\nLe 1 octobre 2019 20:28:08 GMT+02:00, Kazuhiko Sakaguchi <notifications@github.com> a écrit :\n>```\n>+ make test-suite\n>/home/coq/.opam/4.07.1+flambda/bin/coq_makefile  -f Make -o\n>Makefile.coq\n>make -f Makefile.coq --no-print-directory\n>make[2]: Nothing to be done for 'real-all'.\n>COQBIN=/home/coq/.opam/4.07.1+flambda/bin/ ocaml\n>../etc/utils/hierarchy.ml -verify -R . mathcomp -lib all.all >\n>test_suite/hierarchy_test.v\n>Cannot find file ../etc/utils/hierarchy.ml.\n>make: *** [Makefile.common:60: test_suite/hierarchy_test.v] Error 2\n>```\n>Hmm... How can I call my utility in `etc` from `make` in this setting?\n>I guess I need to declare a new variable in `Makefile.common` for the\n>path of `hierarchy.ml` then use it to specify that path from\n>`Dockerfile.make`.\n"},{"author":"erikmd","date":"2019-10-01T20:08:18Z","comment":"The CI is now green, but there is a [warning](https://gitlab.com/math-comp/math-comp/-/jobs/309186276):\r\n\r\n*/home/coq/.opam/4.07.1+flambda/bin/coq_makefile  -f Make -o Makefile.coqmake -f Makefile.coq --no-print-directorymake[2]: Nothing to be done for 'real-all'.COQBIN=/home/coq/.opam/4.07.1+flambda/bin/ ocaml ../etc/utils/hierarchy.ml -verify -R . mathcomp -lib all.all > test_suite/hierarchy_test.vcd test_suite; /home/coq/.opam/4.07.1+flambda/bin/coq_makefile  -f Make -o Makefile.coq **Warning: .. (used in -R or -Q) is not a subdirectory of the current directory***\r\n\r\nDo you think these lines should be refactored to avoid `..`? or is it a benign issue.\r\nhttps://github.com/math-comp/math-comp/blob/a4594c56cce42d4f3a110e0958cbecb851076d10/mathcomp/test_suite/Make#L3-L4"},{"author":"pi8027","date":"2019-10-02T09:01:35Z","comment":"@erikmd I moved `test_suite/Make` and `test_suite/Makefile.coq` to `Make.test-suite` and ~`Makefile.test-suite`~ `Makefile.test-suite.coq` respectively to avoid that warning. If I place more than two `Makefile`s generated by the `coq_makefile` utility in the same directory, the name of their dependency file `.coqdep.d` will conflict. But this name can be given from outside like this:\r\nhttps://github.com/math-comp/math-comp/pull/384/files#diff-9c0cdc05f486cab3d6cace8379825a57R34"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":383,"state":"closed","open_date":"2019-09-24T12:21:13Z","update_date":"2019-10-07T08:28:20Z","discussion":[{"author":"pi8027","date":"2019-09-24T14:52:28Z","comment":"Passed CI. ping: @CohenCyril "}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":382,"state":"closed","open_date":"2019-09-06T11:08:00Z","update_date":"2019-09-09T14:37:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"hivert","number":381,"state":"closed","open_date":"2019-09-03T21:11:27Z","update_date":"2019-11-18T09:22:31Z","discussion":[{"author":"amahboubi","date":"2019-10-24T12:37:07Z","comment":"@hivert , thanks for contributing! @pi8027 @anton-trunov thanks for your comments! Are we ready to merge?\r\n"},{"author":"amahboubi","date":"2019-10-24T12:38:28Z","comment":"If so,  @hivert could you add a line to the change log listing the names of the lemmas added by this PR?"},{"author":"CohenCyril","date":"2019-10-24T19:42:30Z","comment":"@hivert thanks for contributing, I asked a few more script changes. Although I did them without Coq, I feel pretty confident. If one (or several) of my suggestions fails, 1. sorry for the inconvenience, 2. Tell me and I will take the time to download and try my changes."},{"author":"hivert","date":"2019-10-27T08:48:13Z","comment":"@CohenCyril I closed the change you requested that I manage to apply I commented the two remaining one. Since they are just minor comment I think I've taken care of all your requests. Please resolve the remaining conversations if you agree. I'm now  updating the changelog as asked by @amahboubi and resubmitting my PR. Thanks for the comments and the tips."},{"author":"CohenCyril","date":"2019-11-06T14:57:11Z","comment":"@hivert thanks for your update. I missed your update of the changelog, I am afraid you have to rebase and solve the conflict in the changelog now, sorry."},{"author":"hivert","date":"2019-11-06T20:21:46Z","comment":"This is a first time I resolve a conflict with the github interface. I hope this is Ok. \r\n\r\nBy the way, do you need me to squash all the change in a unique commit ?"},{"author":"CohenCyril","date":"2019-11-14T11:51:45Z","comment":"@hivert \r\n> This is a first time I resolve a conflict with the github interface. I hope this is Ok.\r\n\r\nAs with any git subtle manipulation done through the github interface, the result is not ok. (indeed it created a merge commit inside the branch). Can you please rebase this branch on top of master instead?\r\n\r\nThanks for your patience."},{"author":"CohenCyril","date":"2019-11-14T11:52:18Z","comment":"> By the way, do you need me to squash all the change in a unique commit ?\r\n\r\nAlso, yes, please squash. :smile: \r\n\r\n"},{"author":"ybertot","date":"2019-11-18T08:54:54Z","comment":"Thanks"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":380,"state":"closed","open_date":"2019-09-03T14:46:53Z","update_date":"2019-09-30T16:14:22Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":378,"state":"closed","open_date":"2019-08-30T11:34:43Z","update_date":"2019-10-31T19:43:00Z","discussion":[{"author":"pi8027","date":"2019-09-02T13:39:36Z","comment":"I think we can continue some discussion about the following [Cyril's remark](https://github.com/math-comp/math-comp/pull/270#issuecomment-503000130) here, if needed.\r\n\r\n> But, @ggonthier, @amahboubi, @thery, @gares, @LaurenceRideau, @pi8027 there is an issue for which I cannot take a light decision: `ltgtP` and `ltrgtP` do not follow the same structure as the `ltngtP` lemma from ssrnat:\r\n> in `ltgtP` (and `ltrgtP`) lemma, the operators come in the following order `==`, `<=`, `<` while in `ltngtP` it is `<=`, `<` and `==`. For consistency they should be ordered in the same way, and thus there are now two options:\r\n> \r\n> 1. For (more) backward compatibility they should be in the order  [`<=`, `<`, `==`] (as in `ltngtP`),\r\n> 2. but for the sake of intuition as noted by @thery and @gares in #233 it should rather be [`==`, `<=`, `<`] everywhere (as in `ltgtP`) because the last item is matched first. I think I a missing a part of the history of the lemma in order to take a decision.\r\n> \r\n> Which of 1. and 2. would be best?\r\n> \r\n> Also, in `leqP`, `leP` ..., operators are in the order `<=` first, and `<` while the same intuition as in the paragraph above would lead to think it should be the converse.\r\n\r\nActually this PR fixes `compare_nat` and `ltngtP` as option 2 indicated. As a result, I also needed to patch fourcolor: math-comp/fourcolor#18. Any other libraries haven't been broken in CI."},{"author":"CohenCyril","date":"2019-09-02T14:05:42Z","comment":"I'm fine with your changes"},{"author":"pi8027","date":"2019-09-04T13:47:52Z","comment":"BTW, having `minn` and `maxn` in the arguments of `leqP`, `ltnP`, and `ltngtP` could be nice. But we need to reorder definitions and lemmas in ssrnat. (In this case, how should we order their arguments?)"},{"author":"amahboubi","date":"2019-09-28T20:37:38Z","comment":"Hi. I did not review this PR. What is blocking the merge here?"},{"author":"pi8027","date":"2019-09-30T14:22:33Z","comment":"@amahboubi This is a compatibility breaking change. There was a discussion on this change in #233, but it has never realized before. So we probably should have more discussion before merging. (But personally I'm fine with this change as it is.)"},{"author":"amahboubi","date":"2019-09-30T14:26:07Z","comment":"@pi8027 Thanks for the answer. Could you please add this item to the agenda of the next dev meeting?"},{"author":"pi8027","date":"2019-09-30T14:27:43Z","comment":"@amahboubi Yes, I will do that."},{"author":"pi8027","date":"2019-10-31T15:13:22Z","comment":"I will remove CI overlay before merging."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":377,"state":"closed","open_date":"2019-08-27T17:08:34Z","update_date":"2019-09-05T13:57:34Z","discussion":[{"author":"pi8027","date":"2019-09-05T11:51:06Z","comment":"@CohenCyril Could you please merge this one?"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":376,"state":"closed","open_date":"2019-08-10T12:55:58Z","update_date":"2019-09-30T16:14:45Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"thery","number":375,"state":"closed","open_date":"2019-08-02T19:49:19Z","update_date":"2020-05-31T15:01:40Z","discussion":[{"author":"amahboubi","date":"2019-09-28T20:40:34Z","comment":"@thery @pi8027 Is this PR ready for merging? From the outside it seems so."},{"author":"pi8027","date":"2019-09-30T10:41:08Z","comment":"@amahboubi @thery This looks good to me."}],"tags":[],"pull_requests":[]},{"author":"thery","number":374,"state":"closed","open_date":"2019-08-02T18:53:39Z","update_date":"2020-05-31T15:02:39Z","discussion":[{"author":"amahboubi","date":"2019-09-28T20:44:59Z","comment":"@thery  your change log is now in conflict. I will merge as soon as you resolve it."},{"author":"thery","date":"2019-09-29T12:39:05Z","comment":":sweat:"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":373,"state":"closed","open_date":"2019-07-30T19:48:51Z","update_date":"2019-09-30T16:32:18Z","discussion":[{"author":"erikmd","date":"2019-07-30T20:00:19Z","comment":"FYI I also added a section `Related links` in the docker-coq wiki:\r\nhttps://github.com/coq-community/docker-coq/wiki/CI-setup#related-links\r\n(as the availability of the [`mathcomp`](https://hub.docker.com/u/mathcomp/) specific images was not described beforehand in docker-coq)\r\n\r\nCc @Zimmi48 @anton-trunov @palmskog @ejgallego"},{"author":"erikmd","date":"2019-08-02T09:41:40Z","comment":"@CohenCyril friendly ping"},{"author":"erikmd","date":"2019-08-02T13:40:17Z","comment":"FYI @CohenCyril I've just configured a so-called *scheduled pipeline* here:\r\nhttps://gitlab.com/math-comp/math-comp/pipeline_schedules (every night at ~03:15 Paris time)\r\nand I've successfully tested it: its first run triggerred the following pipeline with the 2 wished jobs:\r\nhttps://gitlab.com/math-comp/math-comp/pipelines/74413621\r\n\r\nAs a result, even if no math-comp PR is merged for a while, `mathcomp/mathcomp-dev:coq-dev` will stay in sync with `coqorg/coq:dev` (itself rebuilt every night at ~00:15 Paris time)."},{"author":"CohenCyril","date":"2019-08-02T15:48:50Z","comment":"> FYI @CohenCyril I've just configured a so-called _scheduled pipeline_ here:\r\n> https://gitlab.com/math-comp/math-comp/pipeline_schedules (every night at ~03:15 Paris time)\r\n\r\n~~https://gitlab.com/math-comp/math-comp/pipeline_schedules~~\r\n~~Error 404 page not found...~~\r\nNever mind, I logged in and problem solved :laughing: "},{"author":"CohenCyril","date":"2019-08-02T15:50:33Z","comment":"Thanks again for your work on CI and docker @erikmd "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":372,"state":"closed","open_date":"2019-07-18T16:40:37Z","update_date":"2020-06-04T15:15:07Z","discussion":[{"author":"gares","date":"2019-07-18T18:00:37Z","comment":"Can't you just say that `/[x]` stands for \"rewrite ! x\" and that `->` is special in that context and means `{}top in *`? It is just that `/!inE` is not much shorter than `/[inE]` and the latter is a bit more future proof, eg you may need to apply the rewrite rule to specialize it, or write a multi rule (assuming you can define a notation for `[x,y,..,z]` in there)."},{"author":"CohenCyril","date":"2019-07-22T13:15:44Z","comment":"> Can't you just say that `/[x]` stands for \"rewrite ! x\" and that `->` is special in that context and means `{}top in *`? It is just that `/!inE` is not much shorter than `/[inE]` and the latter is a bit more future proof, eg you may need to apply the rewrite rule to specialize it, or write a multi rule (assuming you can define a notation for `[x,y,..,z]` in there).\r\n\r\nSometimes it is with `!` sometimes it is without, moreover a general design pattern of mathcomp is that bracketed notations start with a keyword/symbol as in `[&& ..]`, `[:: ...]`, `[seq ...]`, `[tuple ...]`, `[eqType ...]` ... so using `[ rule ]` for rewriting breaks this pattern. At the very least it should be `[! rule]` (for bang) `[1 rule]` for once... and maybe it is alright... let me see."},{"author":"CohenCyril","date":"2019-07-24T08:03:16Z","comment":"@gares \r\n> `[->]` means `rewrite {}top in *`\r\n\r\nIt's more like `elim: _ / top in *` except I found no stable enough way of reverting all the local context (with exceptions or renamings for section hyps) and introducing everything back consistently  :disappointed:\r\n\r\nSee my commit: the current version seems to work but is a bit broken for hypothesis that depend on others, where I have to default to Coq's less powerful `fold` tactic with a `in` and potentially screwing up section hypothesis... moreover it does not handle multi-rules and quantified rules...\r\n\r\nI have tried more clever versions since then... and my last attempt, which is supposed to handle everything is:\r\n```coq\r\nLtac discharge_all_but x := do ![match goal with \r\n  H : _ |- _ => (* discharges a let in which is not x *)\r\n                (move: x @H => x)\r\n                 (* otherwise discharges a n assumption which is not x *)\r\n                || (move: x H => x);\r\n                (* tests whether H is still there, which means it is a section hypothesis *)\r\n                tryif move: H => _\r\n                then fail else idtac\r\n  end].\r\n\r\nLemma lock_goal A : locked A -> A.\r\nProof. by rewrite -lock. Qed.\r\nLemma unlock_goal A : A -> locked A.\r\nProof. by rewrite -lock. Qed.\r\n\r\n(* implementation of `/[<-]` *)\r\nLtac subst_eq :=\r\n  let top_eq := fresh \"_top_eq_\" in move=> top_eq;\r\n  apply: lock_goal; discharge_all_but top_eq;\r\n  (* try dependent elim, otherwise (if it's a multirule) rewriting *)\r\n  ((elim: _ / top_eq) || (rewrite -!{}top_eq));\r\n  (* the `intros` here assumes that `move:` discharged hyps with\r\n  the names they used to have, which seems like a decent invariant\r\n  unfortunately, it seems to break with hyps introduced by `=> +` *)\r\n  intros; apply: unlock_goal.\r\n```\r\nwhich works very well, except in the presence of `=> +` (see comment)\r\n\r\n"},{"author":"gares","date":"2019-07-24T08:40:26Z","comment":"I thought you were calling the primitive `subst` tactic for `/[->]`.\r\nTo my knowledge, any context manipulation in ltac1 is very hard to write, so I would not even try."},{"author":"amahboubi","date":"2019-10-24T12:49:49Z","comment":"This PR needs an assignee. @gares ?"},{"author":"gares","date":"2019-10-24T13:22:15Z","comment":"The more I think about this, the more I've the impression that you try to be too generic.\r\n\r\nEg many of the use cases that seem very legit could be also covered by `=> /mxE /inE`, that is ad hoc calls to `rewrite ! lemma` (and at some extent they are unfolding lemmas, so `/e` reminds me that, but maybe it's too confusing for a newcomer). What do you think about this? It's a baby step but still useful I believe.\r\n\r\nThe `subst` thing seems ahead of time: with Ltac2 (or anything else than ltac1) you can surely code something sensible, if the already existing `subst` does not behave as you like. I'm not sure we want that ltac code around."},{"author":"affeldt-aist","date":"2020-03-25T14:46:39Z","comment":"The relaease managers propose to put this PR in the 1.12.0 miletone. Are you ok?"},{"author":"CohenCyril","date":"2020-03-25T15:25:57Z","comment":"> The relaease managers propose to put this PR in the 1.12.0 miletone. Are you ok?\r\n\r\nI agree"},{"author":"CohenCyril","date":"2020-03-25T15:26:54Z","comment":"As a side note, it was discussed in a math-comp meeting that substitution should mention the context hypotheses  explicitly anyway."},{"author":"CohenCyril","date":"2020-05-08T22:42:05Z","comment":"I splitted this PR in bits. The first bit is available as #501, the second as #502."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"needs: discussion","description":"Issue or PR that needs discussion. Please come in a give your opinion."}],"pull_requests":[]},{"author":"thery","number":369,"state":"closed","open_date":"2019-07-09T15:14:35Z","update_date":"2020-05-31T15:01:28Z","discussion":[{"author":"CohenCyril","date":"2019-07-10T07:26:43Z","comment":"@thery please mention it in CHANGELOG_UNRELEASED and we are good to go."},{"author":"thery","date":"2019-07-10T13:16:05Z","comment":"@CohenCyril done"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"thery","number":368,"state":"closed","open_date":"2019-07-09T13:53:57Z","update_date":"2019-09-30T16:32:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":365,"state":"closed","open_date":"2019-07-02T20:53:28Z","update_date":"2019-12-26T11:41:30Z","discussion":[{"author":"maximedenes","date":"2019-10-16T09:22:28Z","comment":"Please remove other pages than `index.html`, otherwise outdated information will still be visible.\r\n\r\nAlternatively, you can also make a redirection for each page, but that's more work."},{"author":"maximedenes","date":"2019-10-17T14:19:08Z","comment":"The failure looks spurious, but I don't have the rights to restart the job, it seems. Who can I ask?"},{"author":"maximedenes","date":"2019-10-17T14:20:23Z","comment":"It seems you have enough permissions to add me to the gitlab mathcomp organization, @CohenCyril."},{"author":"maximedenes","date":"2019-10-17T14:20:47Z","comment":"It would be better to add all mathcomp developers, btw, restarting builds is very useful."},{"author":"amahboubi","date":"2019-10-17T14:24:32Z","comment":"@maximedenes do you really mean gitlab? BTW you are member of math-comp core, what permission do you need exactly?"},{"author":"CohenCyril","date":"2019-10-17T14:29:55Z","comment":"> @maximedenes do you really mean gitlab? BTW you are member of math-comp core, what permission do you need exactly?\r\n\r\nyes he really means gitlab for the CI"},{"author":"amahboubi","date":"2019-10-17T14:31:05Z","comment":"Ah ok, sorry for the noise. So I let you handle this."},{"author":"CohenCyril","date":"2019-10-17T14:31:28Z","comment":"> It seems you have enough permissions to add me to the gitlab mathcomp organization, @CohenCyril.\r\n\r\ndone"},{"author":"CohenCyril","date":"2019-10-17T14:32:11Z","comment":"> It would be better to add all mathcomp developers, btw, restarting builds is very useful.\r\n\r\nnot all mathcomp dev have a gitlab account :-/"},{"author":"maximedenes","date":"2019-10-17T14:34:49Z","comment":"> done\r\n\r\nThanks!\r\n\r\n> not all mathcomp dev have a gitlab account :-/\r\n\r\nCould be worth sending a reminder on mathcomp-dev, I guess."},{"author":"amahboubi","date":"2019-10-17T14:45:15Z","comment":"> not all mathcomp dev have a gitlab account :-/\r\n\r\nI think we were never prompted to create one. Should we? Is it a gitlab or gitlab.inria account which is needed?"},{"author":"maximedenes","date":"2019-10-17T14:46:32Z","comment":"> I think we were never prompted to create one. Should we? Is it a gitlab or gitlab.inria account which is needed?\r\n\r\nIt's a gitlab.com account. I think it is likely to be useful for all developers, at least of you want to be able to launch / restart CI builds."},{"author":"amahboubi","date":"2019-10-17T14:50:30Z","comment":"Done for me. @CohenCyril can you grant me access ?"},{"author":"amahboubi","date":"2019-10-18T08:52:27Z","comment":"Ping @CohenCyril . Can you add me to the gitlab organization?"},{"author":"CohenCyril","date":"2019-10-18T09:31:08Z","comment":"> Ping @CohenCyril . Can you add me to the gitlab organization?\r\n\r\ndone\r\n"},{"author":"CohenCyril","date":"2019-10-21T12:00:18Z","comment":"@maximedenes is there a reason not to merge this anymore?"},{"author":"maximedenes","date":"2019-10-21T13:49:06Z","comment":"> is there a reason not to merge this anymore?\r\n\r\nNot that I know of :)"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":364,"state":"closed","open_date":"2019-06-25T23:00:45Z","update_date":"2019-06-26T22:11:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"erikmd","number":363,"state":"closed","open_date":"2019-06-25T22:38:41Z","update_date":"2019-09-30T16:32:30Z","discussion":[{"author":"erikmd","date":"2019-07-05T12:39:14Z","comment":"One of the CI jobs in `master` (for [coq 8.7](https://gitlab.com/math-comp/math-comp/-/jobs/246126645)) failed (in a spurious way at first sight) so I restarted it."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":358,"state":"closed","open_date":"2019-06-13T09:15:57Z","update_date":"2020-09-28T04:56:32Z","discussion":[{"author":"CohenCyril","date":"2019-06-13T16:58:15Z","comment":"@pi8027 great PR! which I do not fully read yet... Just one bureaucratic comment so far:\r\n\r\n> * [ ]  merge dependency: #328\r\n\r\nSince #328 is not going to be merged without #358, I prefer that this PR substitutes #328 completely.\r\nPlease add \"closes #328\" to the original post and rebase all the commits on master (without caring about #328)."},{"author":"pi8027","date":"2019-06-14T12:26:19Z","comment":"@CohenCyril OK. I did it. I may need help on diffs coming from #328."},{"author":"pi8027","date":"2019-06-16T13:25:33Z","comment":"I have proved the following lemmas. `mask_sort'` and `subseq_sort'` can be derived as their corollaries.\r\n```coq\r\nsorted_sort\r\n     : forall (T : Type) (leT : rel T),\r\n       transitive leT -> forall s : seq T, sorted leT s -> sort leT s = s\r\nmask_sort\r\n     : forall (T : Type) (leT : rel T), total leT -> transitive leT ->\r\n       forall (s : seq T) (m : bitseq),\r\n       {m_s : bitseq | mask m_s (sort leT s) = sort leT (mask m s)}\r\nsubseq_sort\r\n     : forall (T : eqType) (leT : rel T),\r\n       total leT -> transitive leT -> {homo sort leT : t s / subseq t s}\r\n```"},{"author":"pi8027","date":"2019-06-19T11:21:41Z","comment":"I have finished all the improvements I could do now except for documentation."},{"author":"amahboubi","date":"2019-07-10T08:17:21Z","comment":"Hi @pi8027 , @CohenCyril, could you clarify the status of this PR today? Thanks in advance!"},{"author":"pi8027","date":"2019-07-10T12:56:20Z","comment":"@amahboubi @CohenCyril Currently, `sort_map_in` is not general enough and some hypothesis of it could be dropped; however, a generalized version seems to be difficult to prove. (see: https://github.com/math-comp/math-comp/pull/358#discussion_r294975535)\r\nSo I'd like to drop `sort_map_in` from this PR and add it later, if @CohenCyril cannot generalize it before long."},{"author":"amahboubi","date":"2019-07-10T13:02:06Z","comment":"Hello @pi8027, thanks for the feedback. Your plan looks sensible, please go ahead. However, it seems to me that your remark is orthogonal to CI failure, isn't it?"},{"author":"pi8027","date":"2019-07-10T19:18:14Z","comment":"Hello @amahboubi, I have removed `sort_map_in` and updated documentation. There is no CI failure now. So this PR is ready for review."},{"author":"pi8027","date":"2019-07-11T17:04:54Z","comment":"Lemmas `mask_sort'` and `subseq_sort'` could have better names."},{"author":"amahboubi","date":"2019-10-24T12:42:47Z","comment":"@pi8027 sorry for the lag: in the end do you want to change the names of  `mask_sort'` and `subseq_sort'` before we merge? @CohenCyril @anton-trunov @ggonthier do you see anything blocking the merge of this PR?"},{"author":"pi8027","date":"2019-10-24T13:42:35Z","comment":"@amahboubi I think `sorted_mask_sort` and `sorted_subseq_sort` would be better (but a bit redundant) because they are corollaries of `mask_sort` and `subseq_sort` where the case of masked sequence and subsequence are sorted. If no other names are suggested, I will rename them and rebase again."},{"author":"pi8027","date":"2019-10-24T21:26:07Z","comment":"Renamed & ready to merge."}],"tags":[],"pull_requests":[]},{"author":"lucienRakotomalala","number":357,"state":"closed","open_date":"2019-06-07T09:29:43Z","update_date":"2020-08-31T15:39:19Z","discussion":[{"author":"amahboubi","date":"2019-07-05T11:26:33Z","comment":"Dear @lucienRakotomalala, many thanks for submitting this PR! This work is really nice and looks definitely interesting. However, I think that, at least for now, it would be more relevant to have it as an independent library. Indeed, this is not just an addition to an existing component but rather a proposal for a new component. We would need thus need to evaluate and discuss the relevance of the inclusion first. This is the standard procedure, even for our own (= dev's) contribution. See e.g. the `finmap` project in the organization."},{"author":"amahboubi","date":"2019-07-05T11:33:27Z","comment":"I have nonetheless written a short review with a few style comments on your code. Do not hesitate to ask more questions here, or on [gitter](https://gitter.im/math-comp) or [Discourse](https://coq.discourse.group/).\r\n\r\nFor instance, the two questions you have in the header would fit well in Discourse I think. \r\n\r\n @hivert, main author of the [Coq-Combi](https://github.com/hivert/Coq-Combi) project, might also give feedback about this topic.\r\n\r\n"},{"author":"hivert","date":"2019-07-05T20:46:51Z","comment":"@amahboubi, I'm not sure I've that much to say here. It would be worth to have semi-ring inserted in the algebraic hierarchy if it does not impact performance. Then, part of the matrix theory could be generalized to semirings (everything which doesn't use the minus sign...). \r\n\r\nOn the other hand I'm not familiar with the dioid theory, but a lot of Kleene's result seems be some higher level abstraction of the corresponding result in language theory.   @lucienRakotomalala could your formalized result be applied/reused for some language and automata theory ?\r\n\r\nAnyway: congratulation for the substantial work with a lot of new algebraic structures. This is for me a place where mathcomp is not so easy to extend ! "},{"author":"pi8027","date":"2019-07-24T08:54:16Z","comment":"Hello @lucienRakotomalala,\r\n\r\n> rings are semirings, should we formalize it?\r\n\r\nI would say yes (if we merge this PR to MathComp). So I think that `ringType` should be redefined to inherit `semiRingType`, and moreover, `dioidType` should inherit `porderType` of #270; however, this change makes the join of `porderType` and `semiRingType` ambiguous: `dioidType` or `numDomainType`. So we need to introduce an intermediate structure of \"partially-ordered semirings\" to disambiguate it, but this kind of changes could introduce new performance issues...\r\nAnyway, if you need some help to do those changes, I would like to provide it. But I'm not sure when I can do it."},{"author":"proux01","date":"2019-07-26T15:07:51Z","comment":"@amahboubi thanks for your answer and the detailed comments, @lucienRakotomalala is looking at them.\r\n\r\n> I think that, at least for now, it would be more relevant to have it as an independent library. Indeed, this is not just an addition to an existing component but rather a proposal for a new component. We would need thus need to evaluate and discuss the relevance of the inclusion first. This is the standard procedure, even for our own (= dev's) contribution. See e.g. the finmap project in the organization.\r\n\r\nSure, how would you recommend to proceed in practice ? Close this PR and put the code somewhere else ?\r\n\r\n> Do not hesitate to ask more questions here, or on gitter or Discourse.\r\nFor instance, the two questions you have in the header would fit well in Discourse I think.\r\n\r\nThanks for the advice, we should indeed launch these discussions there.\r\n\r\n@hivert thanks for your answer\r\n> It would be worth to have semi-ring inserted in the algebraic hierarchy if it does not impact performance. Then, part of the matrix theory could be generalized to semirings (everything which doesn't use the minus sign...).\r\n\r\nI guess the only way to know is to try. Do you have an idea of what could be a good benchmark to test the performance impact ? just compiling mathcomp-algebra ?\r\n\r\n> could your formalized result be applied/reused for some language and automata theory ?\r\n\r\nI guess so, although the user would have to assume an eqType/choiceType over (possibly infinite) languages.\r\n\r\n> Anyway: congratulation for the substantial work with a lot of new algebraic structures. This is for me a place where mathcomp is not so easy to extend !\r\n\r\nThe mathcomp book was of great help, as well as this lesson from @CohenCyril http://www-sop.inria.fr/teams/marelle/advanced-coq-16-17/exercise5.html\r\n\r\n@pi8027 \r\n> if you need some help to do those changes, I would like to provide it. But I'm not sure when I can do it.\r\n\r\nThanks for the offer. I'd like to prototype that first. I'll then ask you if I have questions. But don't expect anything before at least next month.\r\n"},{"author":"affeldt-aist","date":"2020-03-25T14:58:02Z","comment":"The release managers for release 1.11.0 are thinking about closing this PR but would like to make sure that the code is still available, e.g., as a opam package. Can you confirm? @proux01 @lucienRakotomalala "},{"author":"thery","date":"2020-08-26T10:26:05Z","comment":"@proux01 @lucienRakotomalala  we have discussed this pull request at the \r\nlast math-comp meeting https://github.com/math-comp/math-comp/wiki/Minutes-August-25-2020\r\nUnfortunately we are not in a situation where we can merge this pull request in the main library\r\neasily. So we are going to close this pull request. We are really sorry about that. \r\nIf you have any question how to turn your code into an external library, don't hesitate to contact us.\r\n"},{"author":"proux01","date":"2020-08-27T14:38:33Z","comment":"Sorry for not responding. I agree this is not mergeable and had to be closed.\r\n\r\nThe main obstacles seem to be:\r\n* addressing above comments (should be easy)\r\n* lack of semirings in `ssralg` (they seem to be a common example for [Hierarchy Builder](https://github.com/math-comp/hierarchy-builder), what are the plans here wrt Mathcomp?)\r\n* lack of complete lattices (since 1.11 we have lattices (binary meet and joins) in `order` which is great but complete lattices (meet and joins over arbitrary sets) would need to be added)\r\n\r\nI also agree this should be distributed separately, hence these two questions:\r\n* how should it be named: `coq-dioids` or `coq-mathcomp-dioids` (@CohenCyril may have an opinion here)\r\n* where should it be hosted: in the [math-comp](https://github.com/math-comp) github organization? anywhere else?\r\n"},{"author":"CohenCyril","date":"2020-08-27T16:30:33Z","comment":"> Sorry for not responding. I agree this is not mergeable and had to be closed.\r\n> \r\n> The main obstacles seem to be:\r\n> \r\n> * addressing above comments (should be easy)\r\n> * lack of semirings in `ssralg` (they seem to be a common example for [Hierarchy Builder](https://github.com/math-comp/hierarchy-builder), what are the plans here wrt Mathcomp?)\r\n\r\nAbout HB and mathcomp, there are long terms plans that must not be blocking any contribution, since for the time being we cannot predict if and when math-comp would rely on HB.\r\n\r\nHowever meanwhile, the addition of an intermediate structure between `eqType` and `fieldExtType` might critically impact the compiltation type of some files (or at least I believe this was the case in the past). One could put that to the test in recent versions of Coq though...\r\n\r\n> * lack of complete lattices (since 1.11 we have lattices (binary meet and joins) in `order` which is great but complete lattices (meet and joins over arbitrary sets) would need to be added)\r\n> \r\n> I also agree this should be distributed separately, hence these two questions:\r\n> \r\n> * how should it be named: `coq-dioids` or `coq-mathcomp-dioids` (@CohenCyril may have an opinion here)\r\n\r\nWe [discussed this in June](https://github.com/math-comp/math-comp/wiki/Minutes-June-16-2020) and there was no consensus. The objective criterion that made it to the minutes is the hosting by the `math-comp` organization (cf next bullet). In my own opinion, every library that depends on mathcomp and brings a library component in mathcomp style should be prefixed by `mathcomp`.\r\n\r\n> * where should it be hosted: in the [math-comp](https://github.com/math-comp) github organization? anywhere else?\r\n\r\nSure we would be glad to open a new repository in the mathcomp organization, we actually made that clearer in [the last meeting actually](https://github.com/math-comp/math-comp/wiki/Minutes-August-25-2020).\r\n\r\n"},{"author":"pi8027","date":"2020-08-27T17:13:55Z","comment":"> However meanwhile, the addition of an intermediate structure between `eqType` and `fieldExtType` might critically impact the compiltation type of some files (or at least I believe this was the case in the past). One could put that to the test in recent versions of Coq though...\r\n\r\nThis issue has been observed in https://github.com/math-comp/math-comp/pull/270#issuecomment-482152101."},{"author":"proux01","date":"2020-08-28T11:44:08Z","comment":"Thanks for the detailed explanations!\r\n\r\n> Sure we would be glad to open a new repository in the mathcomp organization, we actually made that clearer in the last meeting actually.\r\n\r\nGoing this way would be fine for me, I can then maintain it and publish opam packages.\r\n"},{"author":"CohenCyril","date":"2020-08-28T13:56:01Z","comment":"I can open it and name it with the name of your choice (`diod` and make you maintainer)"},{"author":"CohenCyril","date":"2020-08-28T13:57:29Z","comment":"Would you be ok to try to keep it as close as possible to math-comp coding conventions?"},{"author":"proux01","date":"2020-08-28T14:02:10Z","comment":"`dioid` is fine. I'll address Assia's comments above and try to do my best t adhere the coding conventions but feel free to criticize, I'm not perfectly used to them."},{"author":"CohenCyril","date":"2020-08-28T14:07:04Z","comment":"It would be a great opportunity for us to improve https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md"},{"author":"CohenCyril","date":"2020-08-28T14:11:25Z","comment":"https://github.com/math-comp/dioid @proux01 you are admin of this repository now."},{"author":"proux01","date":"2020-08-31T15:39:19Z","comment":"Thanks!\r\n* code imported\r\n* I revised all proofs for coding conventions, according to comments above and the contribution guide\r\n(there may still remain some strange things though, feel free to point them)\r\n* CI set up\r\n* OPAM packages published (`coq-mathcomp-dioid.0.1` and `coq-mathcomp-dioid.dev`)\r\n\r\nI still have to make dioids a `porderType` as pointed above by @pi8027 "}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":356,"state":"closed","open_date":"2019-06-04T12:58:05Z","update_date":"2019-06-04T15:13:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":354,"state":"open","open_date":"2019-05-29T17:17:28Z","update_date":"2021-05-19T08:18:15Z","discussion":[{"author":"affeldt-aist","date":"2020-03-25T15:04:06Z","comment":"The release managers for 1.11.0 think that the status of this PR is not clear. It looks that it depends on PR#259. Should it be postponed to milestone 1.12.0?"},{"author":"CohenCyril","date":"2020-03-25T15:27:32Z","comment":"> The release managers for 1.11.0 think that the status of this PR is not clear. It looks that it depends on PR#259. Should it be postponed to milestone 1.12.0?\r\n\r\nyes, absolutely"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"needs: merge of dependencies","description":"PR that depends on another. Documented in the original post of the PR. Review only the increment."},{"tag":"needs: assignee","description":"Issue or PR that needs an assignee. Please volunteer."}],"pull_requests":[]},{"author":"anton-trunov","number":353,"state":"closed","open_date":"2019-05-29T16:42:07Z","update_date":"2019-05-29T17:21:31Z","discussion":[{"author":"CohenCyril","date":"2019-05-29T16:45:31Z","comment":"Dear @anton-trunov the failure in #351 was legitimate, and we do not use travis anymore (but gitlab-ci synced with coqbot), so you might as well remove `.travis.yml` altogether."},{"author":"anton-trunov","date":"2019-05-29T16:47:45Z","comment":"> Dear @anton-trunov the failure in #351 was legitimate\r\n\r\nDear @CohenCyril, I agree that the last one was legitimate due to finmap relying on `sumbool` type for `eqVneq`, I meant some failures before that.\r\n\r\n> we do not use travis anymore (but gitlab-ci synced with coqbot), so you might as well remove .travis.yml altogether.\r\n\r\nI wasn't aware of that, will remove it."},{"author":"anton-trunov","date":"2019-05-29T16:50:27Z","comment":"Yesterday I got a bunch of emails from Travis, saying that the build was failing for Coq 8.6. It would feel nice not to get those :)"},{"author":"CohenCyril","date":"2019-05-29T17:11:57Z","comment":"> Yesterday I got a bunch of emails from Travis, saying that the build was failing for Coq 8.6. It would feel nice not to get those :)\r\n\r\nI think it is your personal travis running. I agree let's get rid of it."},{"author":"anton-trunov","date":"2019-05-29T17:12:48Z","comment":"Oh, I see now. Thanks."}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"CohenCyril","number":352,"state":"closed","open_date":"2019-05-29T12:41:04Z","update_date":"2019-05-29T13:46:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":351,"state":"closed","open_date":"2019-05-28T20:04:56Z","update_date":"2019-10-14T10:45:34Z","discussion":[{"author":"CohenCyril","date":"2019-05-29T08:16:32Z","comment":"I am in favor of adding this lemma, as it looks useful. But given how many times it is used I would prefer a longer name, that contains the word `sym` rather than just `s`, as in `eqPsym` (which I prefer) or `eq_symP`."},{"author":"anton-trunov","date":"2019-05-29T08:39:10Z","comment":"Thank you @CohenCyril. I'm happy to change names to anything that make more sense than the current preliminary naming.\r\nI've always thought that `P` should be the last character for views. Are there any exceptions in mathcomp?\r\n"},{"author":"CohenCyril","date":"2019-05-29T09:36:12Z","comment":"> I've always thought that `P` should be the last character for views. Are there any exceptions in mathcomp?\r\n\r\nYes, suffixes `Pl` (for left), `Pr` (for right), `Pn` (for neg), and more recently `Pdep`"},{"author":"thery","date":"2019-05-29T09:38:49Z","comment":"we should use machine learning to automatically generate names :smiley:"},{"author":"CohenCyril","date":"2019-05-29T11:34:56Z","comment":"> there is already an eqVneq lemma stating the x=y / x!=y alternative, so replacing that lemma would be preferable.\r\n\r\nI agree, I think it would be great to rename `eqPsym` to `eqVneq` and remove the old `eqVneq` lemma\r\n(and same for `eqsVneq`).\r\n"},{"author":"anton-trunov","date":"2019-05-29T12:18:28Z","comment":"Great suggestions, thank you @ggonthier and @CohenCyril. Please take a look if I missed anything."},{"author":"CohenCyril","date":"2019-05-29T13:31:10Z","comment":"I will squash and merge."},{"author":"anton-trunov","date":"2019-05-29T13:32:07Z","comment":"Great! Thanks to everyone for your time, patience and the great suggestions!"}],"tags":[],"pull_requests":[]},{"author":"gares","number":350,"state":"closed","open_date":"2019-05-26T19:22:04Z","update_date":"2019-12-26T11:41:44Z","discussion":[{"author":"CohenCyril","date":"2019-05-29T17:23:05Z","comment":"@gares we should add `--ignore-constraints-on` in the CI file for coq-dev."},{"author":"gares","date":"2019-05-29T20:22:10Z","comment":"yup, you are right"},{"author":"CohenCyril","date":"2019-11-05T16:39:49Z","comment":"@gares can you revive this PR? (Rebase + required fix for coq-dev?)"},{"author":"gares","date":"2019-11-14T21:19:45Z","comment":"I've rebased it and it turned out to be a no-op (in some way the changes are already in master).\r\nHence github thinks the PR was merged, since it's tip is contained in master (it is actually master).\r\nwell..."}],"tags":[{"tag":"needs: fix","description":"PR that needs to be fix (generally because reviewers asked to)."}],"pull_requests":[]},{"author":"pi8027","number":348,"state":"closed","open_date":"2019-05-22T09:38:18Z","update_date":"2019-05-29T08:06:22Z","discussion":[],"tags":[{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."}],"pull_requests":[]},{"author":"palmskog","number":346,"state":"closed","open_date":"2019-05-10T17:31:43Z","update_date":"2020-11-18T10:34:51Z","discussion":[{"author":"ggonthier","date":"2019-05-21T10:31:48Z","comment":"My main issue with this PR is that it introduces a fair amount of material for a result that is ultimately only useful as documentation of the algorithm (as MathComp does not provide facilities for reasoning about algorithmic complexity), while still not providing any actual natural language of the algorithm it purports to document.\r\n  At the very least there needs to be an explanatory comment describing the algorithm (along the lines of what Hugo wrote in the Coq standard library implementation of the very same), and the proof itself should be clearly marked as a documentary result and be self-contained -- see my suggestion above.\r\n   I'd actually written this review last week, but somehow failed to post it... sorry."},{"author":"ybertot","date":"2020-04-01T14:29:10Z","comment":"Dear @palmskog , we are currently looking at this PR for potential inclusion in the next release.  I just performed a rebase locally and we would mostly need to add the documentation that @ggonthier mentioned.  Will you have time to work on this on the next few days?"},{"author":"ybertot","date":"2020-04-01T14:47:54Z","comment":"For the record, the result of the rebase is visible at https://github.com/ybertot/math-comp/tree/merge-sort-push-invariant\r\nWe could work together on adding the right comment to document the behavior of `merge_sort_push` that is illustrated by your added lemma."},{"author":"CohenCyril","date":"2020-04-10T09:55:45Z","comment":"> For the record, the result of the rebase is visible at https://github.com/ybertot/math-comp/tree/merge-sort-push-invariant\r\n\r\nI think this `Remark` by @ggonthier should be merged, regardless of which other additions are planned."}],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":345,"state":"closed","open_date":"2019-05-07T00:27:23Z","update_date":"2019-05-29T08:09:57Z","discussion":[{"author":"ggonthier","date":"2019-05-08T22:34:36Z","comment":"For the record: the latest (and hopefully last) CI failure appears to have a similar cause to the one discussed in #342, namely incomplete processing of unification constraints by the SSReflect plugin code; thus the problem may still be present in the current version of the code. Here it was solved by changing the `eq_big_perm` legacy notation from\r\n```\r\nNotation eq_big_perm :=\r\n  ((fun P F r2 => @perm_big _ _ _ _ _ r2 P F) _ _) (only parsing).\r\n```\r\nto\r\n```\r\nNotation eq_big_perm :=\r\n  ((fun R idx op I r1 P F r2 => @perm_big R idx op r1 r2 P F)\r\n           _    _   _   _  _ _ _) (only parsing).\r\n```\r\nwhich are nearly identical: the one difference is that the evars for the holes inside the `fun ... => ...` expression in the first version have additional `(P := nil)` and `(F := nil)` in their context, and\r\nperhaps this causes the unification algorithm to delay some constraints.\r\n"}],"tags":[],"pull_requests":[]},{"author":"soraros","number":344,"state":"closed","open_date":"2019-05-06T19:01:13Z","update_date":"2019-08-01T12:01:42Z","discussion":[{"author":"soraros","date":"2019-05-06T20:22:46Z","comment":"> By \"check\" I just meant trying to see how much of rest of the library compiles with your Remove Hints command, but we can leave that experiment for another PR.\r\n\r\n@ggonthier this is easier than I thought"},{"author":"soraros","date":"2019-05-08T08:17:26Z","comment":"@ggonthier Thank you for your guidance!"},{"author":"RalfJung","date":"2019-08-01T12:00:47Z","comment":"This affects all proofs using `auto`/`eauto` as well in any development where ssreflect is (transitively) imported, right? So, e.g. anything using Iris now will also not have these hints in the `core` database any more?\r\n\r\nOr does this only affect developments using the parts of ssreflect that are not shipped with Coq?\r\n\r\nIt would be good if such global side-effects of ssreflect could at least be documented, similar to [what std++ does](https://gitlab.mpi-sws.org/iris/stdpp/#side-effects)."}],"tags":[],"pull_requests":[]},{"author":"soraros","number":343,"state":"closed","open_date":"2019-05-05T18:49:59Z","update_date":"2019-05-06T19:08:37Z","discussion":[{"author":"ggonthier","date":"2019-05-06T07:17:18Z","comment":"Good catch! The `finmap-dev` failure is actually a `finmap` bug, now corrected by math-comp/finmap#38; unfortunately GitLab doesn't let you rerun checks manually.\r\nIdeally, we also should try to remove the `plus_n_Sm` hint, to see if it's being accidentally used elsewhere."},{"author":"soraros","date":"2019-05-06T08:08:56Z","comment":"It is used elsewhere. \r\nI removed the hints by adding the following line to ssrnat (these are the ones in `core` that I think maybe troublesome, others are just definition unfolding and things)\r\n```coq\r\nRemove Hints\r\n       n_Sn O_S\r\n       not_eq_S not_eq_sym\r\n       plus_n_O plus_n_Sm\r\n       mult_n_O mult_n_Sm\r\n       eq_add_S\r\n       f_equal_nat f_equal2_mult\r\n  : core.\r\n```\r\nhere are other dependences I found in `ssrnat`(they are picked up by `by ...`, so maybe we need to re-add some of their ssr counterparts):\r\n\r\n- `iter_succn` -> `plus_n_O`, `plus_n_Sm`\r\n- `nat_of_add_bin` -> `plus_n_O`\r\n- `nat_of_mul_bin` -> `mult_n_O`\r\n\r\nAlso, this might be useful:\r\n```coq\r\nCheck n_Sn : forall n : nat, n <> S n.\r\nCheck O_S : forall n : nat, 0 <> S n.\r\n\r\nCheck not_eq_S : forall n m : nat, n <> m -> S n <> S m.\r\nCheck not_eq_sym : forall (A : Type) (x y : A), x <> y -> y <> x.\r\n\r\nCheck plus_n_O : forall n : nat, n = n + 0.\r\nCheck plus_n_Sm : forall n m : nat, S (n + m) = n + S m.\r\nCheck mult_n_Sm : forall n m : nat, n * m + n = n * S m.\r\nCheck mult_n_O : forall n : nat, 0 = n * 0.\r\n\r\nCheck eq_add_S : forall n m : nat, S n = S m -> n = m.\r\nCheck f_equal_nat : forall (B : Type) (f : nat -> B) (x y : nat), x = y -> f x = f y.\r\nCheck f_equal2_mult : forall x1 y1 x2 y2 : nat, x1 = y1 -> x2 = y2 -> x1 * x2 = y1 * y2.\r\n```"},{"author":"soraros","date":"2019-05-06T08:12:38Z","comment":"The output of `Print HintDb core.`\r\n```\r\nNon-discriminated database\r\nUnfoldable variable definitions: none\r\nUnfoldable constant definitions: none\r\nCut: emp\r\nFor any goal ->   \r\nFor CompSpec ->   unfold CompSpec(level 4, id 0) \r\nFor CompSpecT ->   unfold CompSpecT(level 4, id 0) \r\nFor ge ->   unfold ge(level 4, id 0) \r\nFor gt ->   unfold gt(level 4, id 0) \r\nFor lt ->   unfold lt(level 4, id 0) \r\nFor not ->   simple apply n_Sn(level 0, pattern ?META105 <> S ?META105, id 0)\r\n             simple apply O_S(level 0, pattern 0 <> S ?META103, id 0)\r\n             simple apply not_eq_S(level 1, pattern S ?META97 <> S ?META98, id 0)\r\n             simple apply not_eq_sym ; trivial(level 1, pattern \r\n             ?META51 <> ?META50 :> ?META49, id 0) unfold not(level 4, id 0) \r\nFor notT ->   simple apply not_identity_sym ; trivial(level 1, pattern \r\n              notT (identity ?META87 ?META86), id 0) \r\nFor BoolSpec ->   simple apply BoolSpecF(level 1, pattern \r\n                  BoolSpec ?META48 ?META49 false, id 0)\r\n                  simple apply BoolSpecT(level 1, pattern \r\n                  BoolSpec ?META45 ?META46 true, id 0) \r\nFor CompareSpec ->   simple apply CompGt(level 1, pattern \r\n                     CompareSpec ?META85 ?META86 ?META87 Gt, id 0)\r\n                     simple apply CompLt(level 1, pattern \r\n                     CompareSpec ?META81 ?META82 ?META83 Lt, id 0)\r\n                     simple apply CompEq(level 1, pattern \r\n                     CompareSpec ?META77 ?META78 ?META79 Eq, id 0) \r\nFor CompareSpecT ->   simple apply CompGtT(level 1, pattern \r\n                      CompareSpecT ?META109 ?META110 ?META111 Gt, id 0)\r\n                      simple apply CompLtT(level 1, pattern \r\n                      CompareSpecT ?META105 ?META106 ?META107 Lt, id 0)\r\n                      simple apply CompEqT(level 1, pattern \r\n                      CompareSpecT ?META101 ?META102 ?META103 Eq, id 0) \r\nFor True ->   exact I(level 0, pattern True, id 0) \r\nFor and ->   simple apply conj(level 2, pattern ?META1 /\\ ?META2, id 0) \r\nFor eq ->   simple apply mult_n_Sm(level 0, pattern ?META147 * ?META148 + ?META147 =\r\n                                                    ?META147 * S ?META148, id 0)\r\n            simple apply mult_n_O(level 0, pattern 0 = ?META145 * 0, id 0)\r\n            simple apply plus_n_Sm(level 0, pattern S (?META129 + ?META130) =\r\n                                                    ?META129 + S ?META130, id 0)\r\n            simple apply @eq_refl(level 0, pattern ?META125 = ?META125 :> ?META124, id 0)\r\n            simple apply plus_n_O(level 0, pattern ?META123 = ?META123 + 0, id 0)\r\n            simple apply eq_add_S ; trivial(level 1, pattern \r\n            ?META91 = ?META92, id 0)\r\n            simple apply f_equal_nat(level 1, pattern ?META82 ?META83 =\r\n                                                      ?META82 ?META84 :> \r\n                                                      ?META81, id 0)\r\n            simple apply eq_sym ; trivial(level 1, pattern \r\n            ?META47 = ?META46 :> ?META45, id 0)\r\n            simple apply f_equal2_mult(level 2, pattern ?META133 * ?META135 =\r\n                                                        ?META134 * ?META136, id 0)\r\n            simple apply f_equal2_nat(level 2, pattern ?META108 ?META109 ?META111 =\r\n                                                       ?META108 ?META110 ?META112 :>\r\n                                                       ?META107, id 0) \r\nFor ex ->   simple eapply ex_intro(level 2, pattern ex ?META26, id 0) \r\nFor ex2 ->   simple eapply ex_intro2(level 3, pattern exists2 x : \r\n                                                      ?META29, \r\n                                                      ?META30 x & ?META31 x, id 0) \r\nFor identity ->   simple apply identity_refl(level 0, pattern \r\n                  identity ?META126 ?META126, id 0)\r\n                  simple apply identity_sym ; trivial(level 1, pattern \r\n                  identity ?META83 ?META82, id 0) \r\nFor inhabited ->   simple apply inhabits(level 1, pattern inhabited ?META61, id 0) \r\nFor le ->   simple apply le_n(level 0, pattern ?META151 <= ?META151, id 0)\r\n            simple apply le_S(level 1, pattern ?META152 <= S ?META153, id 0) \r\nFor or ->   simple apply or_intror(level 1, pattern ?META8 \\/ ?META9, id 0)\r\n            simple apply or_introl(level 1, pattern ?META5 \\/ ?META6, id 0) \r\nFor prod ->   simple apply @pair(level 2, pattern (?META57 * ?META58)%type, id 0) \r\nFor sig ->   simple eapply exist(level 2, pattern {x : ?META105 | ?META106 x}, id 0) \r\nFor sig2 ->   simple eapply exist2(level 3, pattern {x : ?META109 | \r\n                                                    ?META110 x & \r\n                                                    ?META111 x}, id 0) \r\nFor sigT ->   simple eapply existT(level 2, pattern {x : ?META115 & ?META116 x}, id 0) \r\nFor sigT2 ->   simple eapply existT2(level 3, pattern {x : \r\n                                                      ?META119 & \r\n                                                      ?META120 x & \r\n                                                      ?META121 x}, id 0) \r\nFor sum ->   simple apply @inr(level 1, pattern (?META64 + ?META65)%type, id 0)\r\n             simple apply @inl(level 1, pattern (?META61 + ?META62)%type, id 0) \r\nFor sumbool ->   simple apply @right(level 1, pattern {?META84} + {?META85}, id 0)\r\n                 simple apply @left(level 1, pattern {?META81} + {?META82}, id 0) \r\nFor sumor ->   simple apply @inright(level 1, pattern ?META90 + {?META91}, id 0)\r\n               simple apply @inleft(level 1, pattern ?META87 + {?META88}, id 0) \r\n```"},{"author":"ggonthier","date":"2019-05-06T14:55:46Z","comment":"@soraros, thanks for taking a closer look; the only hints we should be concerned with are `plus_n_0`, `plus_n_Sm`, `mult_n_0` and `mult_n_Sm`. The others are irrelevant to `by ...` because they are either at level > 0 and thus not used by `trivial`, and/or otherwise covered by the default `done` (for example, via `discriminate` or `split`).\r\n  We should certainly get rid of them within `ssrnat.v`, and it would be useful to check whether we can do so for the rest of MathComp, or if we should add some of `addn0`, `addnS`, `muln0` and `mulnS` to replace them, perhaps as `Extern` hints that warn against their use."},{"author":"soraros","date":"2019-05-06T15:40:57Z","comment":"@ggonthier, thank you for clarifying. However, I'm quite new to ssr and coq so I'm afraid I'm incompetent to do any of the things you suggested properly.\r\nSo, shall I close this PR?"},{"author":"ggonthier","date":"2019-05-06T16:23:37Z","comment":"@soraros, I'm fine with you just completing this PR by removing all other uses of `Arith` lemmas from `ssrnat`. By \"check\" I just meant trying to see how much of rest of the library compiles with your `Remove Hints` command, but we can leave that experiment for another PR."},{"author":"soraros","date":"2019-05-06T19:08:37Z","comment":"Sorry, I accidentally close the PR (changed the branch name and the pr got closed).\r\nAnyway, I created a new one at [#344](https://github.com/math-comp/math-comp/pull/344)."}],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":342,"state":"closed","open_date":"2019-05-05T16:33:14Z","update_date":"2019-05-29T08:09:56Z","discussion":[{"author":"ggonthier","date":"2019-05-06T07:23:52Z","comment":"@gares: will try, but as this is a Coq < 8.9 only error it may be a diminishing return effort. I suspect it has to do with the ssr view abstraction code not purging delayed unification constraints before reabstracting evars, and Coq delaying the `return` predicate constraints for all `match`es in those old versions. It'll take me a while to check, as I'm not set up right now to debug with Coq 8.7.\r\n"},{"author":"gares","date":"2019-05-06T07:41:18Z","comment":"Oh, btw the code dealing with views was mostly rewritten in the new tactic monad in 8.9 to support the new intro patterns including the tactic one, so it may be the case that it changed behavior in a subtle way. If you say the new behavior is better or even just ok, then It may not be worth spending much time on it (8.10beta is to be released this week)."},{"author":"ggonthier","date":"2019-05-06T13:31:15Z","comment":"Ok, @gares, I somewhat tracked down the issue. It is specific to coq v8.7, so on the one hand it could go away as we drop 8.7 support. On the other hand, it's _not_ something that was fixed by the SSReflect view code refactoring as that was only in 8.9, and the characteristics of the issue are fairly alarming, so it might still be worth looking into, to make sure the root cause has indeed been fixed.\r\n```\r\nRequire Import ssreflect.\r\nLemma foo U (l1 l2 : list U) : l1 = nil -> (l1 = nil -> l2 = nil) -> True. Proof. split. Qed.\r\nLemma bar T (t S : list T) : (t = nil -> S = nil) -> True.\r\nmove/(fun s1_0 ss21 => foo _ _ _ s1_0 ss21).\r\n```\r\ngenerates\r\n```\r\nError:\r\nLtac call to \"move (ssrmovearg) (ssrclauses)\" failed.\r\nIllegal application: \r\nThe term\r\n \"fun (s1_0 : t = nil) (ss21 : t = nil -> l = nil) => foo T t l s1_0 ss21\"\r\nof type \"t = nil -> (t = nil -> l = nil) -> True\"\r\ncannot be applied to the terms\r\n \"e\" : \"t = nil\"\r\n \"_top_assumption_\" : \"t = nil -> S = nil\"\r\nThe 2nd term has type \"t = nil -> S = nil\" which should be coercible to\r\n \"t = nil -> l = nil\".\r\n```\r\nThe most alarming is that this bug is _name-sensitive_; the error does not occur unless the name of the third parameter of `bar` _starts with an_ `S` !!! Also, replacing the abstract `T` with any fixed type makes the issue disappear. I'm quite at a loss as to what might cause such mischief.\r\nI've not raised an issue Coq-side because of this being tied to both an old Coq version and to an SSReflect feature, but you may want to do so if the bug turns out to be on the Coq side."},{"author":"ggonthier","date":"2019-05-06T15:49:51Z","comment":"Unless someone objects, I'll merge this as soon as CI completes, as this PR is holding up a more substantial revision of the `perm_eq` lemmas. It was split off to allow reusing the (misnamed, and little used) `perm_uniq` lemma name without requiring an overlay for `fourcolor`: the plan is to first deprecate (here) the old `perm_uniq`, then update `fourcolor`, submit the main `perm_eq` PR, and finally update all clients to the new lemma names."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":341,"state":"closed","open_date":"2019-05-02T15:34:41Z","update_date":"2019-05-15T09:44:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":340,"state":"closed","open_date":"2019-04-30T13:26:41Z","update_date":"2019-09-05T13:55:36Z","discussion":[{"author":"pi8027","date":"2019-04-30T13:38:04Z","comment":"Hmm. I may need to remove `test_suite/hierarchy_test.v` from `Make` to generate `.coqdeps.d`..."},{"author":"CohenCyril","date":"2019-05-02T10:24:46Z","comment":"Hi, wouldn't it better/possible to use Coq API rather than `coqtop` + string processing to generate the graph?"},{"author":"pi8027","date":"2019-05-02T19:09:38Z","comment":"@CohenCyril Yes, I think so. I would have time to attempt it in June or July."},{"author":"CohenCyril","date":"2019-05-06T10:37:57Z","comment":"@gares do you think it is a good idea?"},{"author":"gares","date":"2019-05-06T11:14:15Z","comment":"Yes, it is doable but it is not so trivial. I see two options:\r\n- make a plugin defining a new command and then compiler a script that says\r\n  ```coq\r\n  Declare ML Module \"my_plugin\".\r\n  Require Import all.v.\r\n  MyCommand.\r\n  ```\r\n- build a new toplevel by linking coq (as a library). Initializing Coq is not trivial either (and you need to initialize it and require all .vo files). Something like serapi (we may even use it directly, but we may need to extend it with the queryes we want).\r\n\r\nSo for now I'd use this code and live with the text based interaction with Coq."}],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":339,"state":"closed","open_date":"2019-04-30T11:18:58Z","update_date":"2019-05-29T08:09:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":338,"state":"closed","open_date":"2019-04-29T21:21:17Z","update_date":"2019-05-29T08:09:56Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"ggonthier","number":337,"state":"closed","open_date":"2019-04-28T22:52:22Z","update_date":"2019-05-29T08:09:56Z","discussion":[{"author":"ggonthier","date":"2019-04-29T15:27:28Z","comment":"@CohenCyril : failure of `finmap` seem to be due to the latter inlining the low-level representation of `predType` to construct a series of undocumented sub- packed classes, and directly using the low-level `predType` constructor. This is incompatible with coq/coq#9995, which changes that representation. I'm going to submit a patch for `finmap`, but in the meantime, unless you object, I'm going to forge ahead and merge this PR, as it it holding up the final commit in coq/coq#9995."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":336,"state":"closed","open_date":"2019-04-26T12:19:17Z","update_date":"2019-04-28T10:25:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":335,"state":"closed","open_date":"2019-04-24T21:17:15Z","update_date":"2019-05-29T08:09:56Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":334,"state":"closed","open_date":"2019-04-23T09:29:36Z","update_date":"2019-04-23T15:56:10Z","discussion":[],"tags":[{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."}],"pull_requests":[]},{"author":"pi8027","number":332,"state":"closed","open_date":"2019-04-18T13:38:16Z","update_date":"2019-04-26T11:21:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":331,"state":"closed","open_date":"2019-04-17T20:47:52Z","update_date":"2019-04-26T11:21:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":330,"state":"closed","open_date":"2019-04-17T17:15:07Z","update_date":"2019-04-18T08:38:38Z","discussion":[{"author":"CohenCyril","date":"2019-04-18T08:38:28Z","comment":"I forced-push in math-comp experiment/order in order to trigger the CI."}],"tags":[],"pull_requests":[]},{"author":"ybertot","number":328,"state":"closed","open_date":"2019-04-12T15:10:08Z","update_date":"2019-10-25T07:48:53Z","discussion":[{"author":"CohenCyril","date":"2019-04-16T11:12:42Z","comment":"@ybertot can you squash everything in one single commit and force push.\r\nAlso, the CI was not triggered I am wondering why... perhaps force-pushing will trigger it again?"},{"author":"CohenCyril","date":"2019-04-16T11:55:59Z","comment":"The CI is runnnig on gitlab, but there is no display here... @erikmd would you know why?"},{"author":"ggonthier","date":"2019-04-16T12:50:34Z","comment":"I'm not sure I agree entirely with the basic motivation for this PR: there's little sense in a formal proof library, in providing algorithms stripped of their definitional properties, i.e., in this case providing a function that purports to sort a sequence but leave the user of the library to his own devices when it comes to show that the sorted sequence contains the same items as the initial one, and is not some arbitrary sorted sequence of the same length. The only plausible use case I can come up for this is reflection decision procedures, where sorting is used for performance or the result is checked after interpretation; I have a hard time believing that this would be useful for parametricity and extraction, in this particular case, because the quaint sorting algorithm defined here is hardly high-performance...\r\n   Thus because permutation is quite unwieldy to characterise without the `perm_eq` predicate and its theory, I'd just given up on defining sorting on non-`eqType` sequences. That said, there is a decent way out of this through parametricity: on can and _should_ prove the \"free\" parametric lemmas\r\n```\r\nmerge_map f s1 s2 : merge leT (map f s1) (map f s2) = map f (merge leTf s1 s2)\r\nsort_map f s : sort leT (map f s) = map f (sort leTf s)\r\nsorted_map f s : sorted leT (map f s) = sorted leTf s\r\n```\r\nwhere `leTf := [rel x y | leT (f x) (f y)].`\r\n   Then permutation can be characterised via the `mkseq_nth` lemma:\r\n```\r\nperm_iota_sort x0 leT s : {i_s | perm_eq i_s (iota 0 (size s)) & sort leT s = map (nth x0 s) i_s}\r\n```\r\nwhich is proved by taking `i_s := sort [rel i j | leT (nth x0 s i) (nth x0 s j)]`. This lemma can also be used\r\nto derive `size_sort` rather than prove it from scratch.\r\n"},{"author":"ggonthier","date":"2019-04-16T13:07:40Z","comment":"   While you are looking into `sort`, perhaps you could try to address stability. If you look closely you might notice that `merge` shuffles in a somewhat strange order, so as to ensure that `sort` is actually stable. It would make sense to exchange the arguments of `merge` to get a more natural definition, and actually _prove_ stability properties. I've put a plural because I can think of four ways of characterising stability, and think perhaps we should provide all:\r\n```\r\nHypothesis leT_tr : transitive leT.\r\nmem2_sort s x y : mem2 s x y -> leT x y -> mem2 (sort leT s) x y\r\nsubseq_sort t s : subseq t s -> sorted leT t -> subseq t (sort leT s).\r\nmask_sort m s : sorted leT (mask m s) -> {m_s | mask m_s (sort leT s) = mask m s}.\r\nsort_stable leT1 s : sorted leT1 s -> sorted [rel x y | leT x y && (leT y x ==> leT1 x y)] (sort leT s).\r\n```\r\nDo note that the first two require an `eqType` to be stated. I'd lean towards showing the second one first, then deriving the three others as either special cases and/or parametricity.\r\nAddendum: showing `sort_stable` requires `leT` being total (as it implies sort_sorted!), and `leT1` being transitive."},{"author":"CohenCyril","date":"2019-04-16T13:36:13Z","comment":"> I have a hard time believing that this would be useful for parametricity\r\n\r\nThe automatic parametricity translation of `sort` involves translations of `eqType`, making its statement very involved. The initial motivation of @ybertot was to make sure the algorithm does not rely on unnecessary structures. After I asked to extend the theory too, to some extent. That said, I see your point now.\r\n\r\nIf I understand correctly, you would be ok with the algorithms relying on `Type` but the theorems should all require a `eqType` and the user who wants to be on a bare `Type` would use `perm_iota_sort`...\r\n(PS: And we provide the same ones that I asked @ybertot to generalize, but using your trick when it gets ugly. BTW except for `size_sort` the generalizations were rather trivial...)\r\n\r\nBesides stability, I had also the intention to provide these:\r\n```coq\r\n(* on Type *)\r\nLemma homo_sorted f s : {homo f : x y / leT x y >-> leT' x y} ->\r\n  sorted leT s -> sorted leT' [seq f x | x <- s].\r\n\r\n(* on Type *)\r\nLemma mono_sorted f s : {mono f : x y / leT x y >-> leT' x y} ->\r\n  sorted leT' [seq f x | x <- s] = sorted leT s.\r\n\r\n(* on eqType *)\r\nLemma homo_sorted_in f s : {in s &, {homo f : x y / leT x y >-> leT' x y}} ->\r\n  sorted leT s -> sorted leT' [seq f x | x <- s].\r\n\r\n(* on eqType *)\r\nLemma mono_sorted_in f s : {in s &, {mono f : x y / leT x y >-> leT' x y}} ->\r\n  sorted leT' [seq f x | x <- s] = sorted leT s.\r\n\r\n(* on eqType *)\r\nLemma homo_sort_map_in f s : {in s &, {homo f : x y / leT x y >-> leT' x y}} ->\r\n  sort leT' [seq f x | x <- s] = [seq f x | x <- sort leT s].\r\n```\r\nafter @ybertot has finished. (And I believe the last one would indeed require stability to reduce the number of hypothesis, and your trick to get it on `Type` without the `in`)"},{"author":"CohenCyril","date":"2019-04-16T13:46:01Z","comment":"@ybertot please tell me if you want to go through with @ggonthier's recommendations or if you prefer that I do it. "},{"author":"ybertot","date":"2019-04-16T14:37:37Z","comment":"Sorry, I was in a meeting all afternoon."},{"author":"ybertot","date":"2019-04-16T18:45:23Z","comment":"I think sorted_map is not provable with this statement: counter example: `f x = 0`, `leT = leq`"},{"author":"ybertot","date":"2019-04-16T18:46:40Z","comment":"Sorry, not a counterexample."},{"author":"ybertot","date":"2019-04-17T06:15:09Z","comment":"This comment follows commit https://github.com/math-comp/math-comp/pull/328/commits/73dd3cae8098dc38be0dc999b067aab1a3fecffd\r\n\r\nThere is one unsatisfactory feature:  the definition leTf, which I took directly from @ggonthier's post (like all the rest) but should probably have a better name.\r\nI don't plan to work on the stability lemmas."},{"author":"CohenCyril","date":"2019-04-17T07:13:40Z","comment":"> There is one unsatisfactory feature: the definition leTf, which I took directly from @ggonthier's post (like all the rest) but should probably have a better name.\r\n\r\nI believe @ggonthier intended this definition to be local (i.e. either as a `Let` or as a `let`, or even a `leTf := ...` in the local context before `:` in the statement).\r\n\r\nI guess my reply was not clear, I would personally prefer `leT` and `leT'` together with `{homo f : x y / leT x y >-> leT' x y}` and the variant with `{mono f : x y / leT x y >-> leT' x y}` which cover the case of `leTf`...  and I need these general parmetricity theorem for some other development I am currently doing (e.g. to prove `[seq - x | x <- s]` is reverse sorted because `GRing.opp` is decreasing).\r\n\r\n\r\n\r\n> I don't plan to work on the stability lemmas.\r\n\r\nI can do it after this PR is merged"},{"author":"ggonthier","date":"2019-04-17T09:00:32Z","comment":"Short remarks:\r\n  - I indended leTf to be a `Let`, not a `Definition`, hence the short name (and no documentation requirement). If it were a definition it would have to be in `ssrbool` (relation preimage, alongside predicate preimage), but the latter is no longer part of MathComp.\r\n  - `order_path_min` should really have `x` and `s` as maximal implicits, as should most lemmas that can be used as views and have totally polymorphic arguments.\r\n  - The precondition for `path_min_sorted` could be stated with `all` rather than `{in ...}`; this would make it possible to prove the lemma in the non-`eqType` section, alongside `order_path_min`. You'll have to insert an instance of `apply/allP` where it is used however (once, in `intdiv`).\r\n  - @CohenCyril, you can add your homomorphism lemmas later, but I don't think they're a substitute  for `sort_map` and `sorted_map`, as they can't be used casually as rewrite rules."},{"author":"CohenCyril","date":"2019-04-17T09:11:03Z","comment":"> * @CohenCyril, you can add your homomorphism lemmas later, but I don't think they're a substitute  for `sort_map` and `sorted_map`, as they can't be used casually as rewrite rules.\r\n\r\nI agree that they cannot be a substitute, but from them one can deduce `sort_map` and `sorted_map` as special cases (of the `{mono ...}` lemmas).\r\n\r\n~EDIT: or vice versa... I guess~"},{"author":"CohenCyril","date":"2019-04-17T09:13:48Z","comment":"> * The precondition for `path_min_sorted` could be stated with `all` rather than `{in ...}`; this would make it possible to prove the lemma in the non-`eqType` section, alongside `order_path_min`. You'll have to insert an instance of `apply/allP` where it is used however (once, in `intdiv`).\r\n\r\n@ggonthier This would make the patch non backward compatible but desirable... should we have this theorem under a new name, or should we target 1.9.0 instead?"},{"author":"ggonthier","date":"2019-04-17T09:20:06Z","comment":"I suggest `path_min_sorted` and `order_path_min` should be kept together. Just generalising the latter is going to be backward incompatible (this PR has a patch in `abelian`!), but in a minor way. I thought this was for 1.9 anyway (it's not patching any bugs, right?)"},{"author":"CohenCyril","date":"2019-04-17T09:30:12Z","comment":"@ggonthier 1.8.1 may contain backward compatible addition...\r\nI did not notice that it broke `abelian.v` anyway!\r\nSo yes let's go nuts, do the full changes and target 1.9.0 instead.\r\nWas there a reason why `size_merge`'s RHS was `size (s1 ++ s2)` rather than `size s1 + size s2` or could we change that as well?"},{"author":"ggonthier","date":"2019-04-17T09:39:09Z","comment":"`lemma_overloading` seems broken as well... (though giving `path_order_min` maximal implicit may solve this.\r\nI'm not sure why I preferred not to simplify the RHS of `size_merge`, other than consistency with `perm_merge` and `merge_uniq`. One reason, though, would be to avoid unwanted simplification if `s2` is an explicit cons, and make it easier to use `map_cat` and similar."},{"author":"pi8027","date":"2019-04-23T12:19:41Z","comment":"@ybertot @CohenCyril \r\n\r\n>> I don't plan to work on the stability lemmas.\r\n>\r\n> I can do it after this PR is merged\r\n\r\nI can provide the stability lemmas too if needed because I did it for a more complicated sorting algorithm based on push/pop mechanism. I guess that stability proofs for this algorithm are relatively easy."},{"author":"CohenCyril","date":"2019-04-23T15:49:50Z","comment":"Just for the record, I wish the following lemmas to be integrated in 1.9.0 whether in this PR or another:\r\n```coq\r\nSection HomoSortSeq.\r\nVariables (T T' : Type) (leT : rel T) (leT' : rel T') (f : T -> T').\r\n\r\nLemma homo_sorted : {homo f : x y / leT x y >-> leT' x y} ->\r\n  {homo map f : s / sorted leT s >-> sorted leT' s}.\r\nProof. by move=> /homo_path f_path [|//= x s]. Qed.\r\n\r\nSection Mono.\r\nHypothesis f_mono : {mono f : x y / leT x y >-> leT' x y}.\r\n\r\nLemma mono_sorted : {mono map f : s / sorted leT s >-> sorted leT' s}.\r\nProof. by case=> //= x s; rewrite (mono_path f_mono). Qed.\r\n\r\nLemma map_merge : {morph map f : s1 s2 / merge leT s1 s2 >-> merge leT' s1 s2}.\r\nProof.\r\nelim=> //= x s1 IHs1; elim => [|y s2 IHs2] //=; rewrite f_mono.\r\nby case: leT; rewrite /= ?IHs1 ?IHs2.\r\nQed.\r\n\r\nLemma map_sort : {morph map f : s1 / sort leT s1 >-> sort leT' s1}.\r\nProof.\r\nhave map_pop s1 ss : map f (merge_sort_pop leT s1 ss) =\r\n                     merge_sort_pop leT' (map f s1) (map (map f) ss).\r\n  by elim: ss s1 => //= x ss IHss s1; rewrite IHss map_merge.\r\nhave map_push s1 ss : map (map f) (merge_sort_push leT s1 ss) =\r\n                     merge_sort_push leT' (map f s1) (map (map f) ss).\r\n  by elim: ss s1 => [|[|y s2] ss IHss s1]//=; rewrite IHss map_merge.\r\nmove=> s; rewrite /sort -[[::] in RHS]/(map (map f) [::]).\r\nelim: {s}_.+1 {-2}s [::] (ltnSn (size s)) => // n IHn s ss.\r\ncase: s => [|x [|y s]]/=; rewrite ?map_pop//=.\r\nby move=> /ltnW s_small; rewrite IHn ?map_push// f_mono//; case: leT.\r\nQed.\r\n\r\nEnd Mono.\r\n\r\nEnd HomoSortSeq.\r\n\r\nArguments homo_sorted {T T' leT leT'}.\r\nArguments mono_sorted {T T' leT leT'}.\r\nArguments map_merge {T T' leT leT'}.\r\nArguments map_sort {T T' leT leT'}.\r\n```"},{"author":"ybertot","date":"2019-05-29T13:41:35Z","comment":"I have no time to work on this PR currently, please proceed without me."},{"author":"CohenCyril","date":"2019-05-29T13:42:53Z","comment":"> I have no time to work on this PR currently, please proceed without me.\r\n\r\nI will take ownership of this PR and do the some changes so that it gets integrated. Further changes can come later."},{"author":"CohenCyril","date":"2019-05-29T17:41:48Z","comment":"I will let @pi8027 prove stability (cf https://github.com/math-comp/math-comp/pull/328#issuecomment-485778757) in another PR."},{"author":"CohenCyril","date":"2019-05-31T13:25:17Z","comment":"@ggonthier could we merge this one and let @pi8027 do the stability proofs in a subsequent PR?"},{"author":"pi8027","date":"2019-06-11T09:01:26Z","comment":"I have proved the stability lemmas. https://github.com/pi8027/math-comp/tree/more-abstract-sort-april-19"},{"author":"CohenCyril","date":"2019-06-12T17:19:42Z","comment":"> I have proved the stability lemmas. https://github.com/pi8027/math-comp/tree/more-abstract-sort-april-19\r\n\r\n@pi8027 please open a new PR."},{"author":"amahboubi","date":"2019-10-24T12:47:24Z","comment":"@CohenCyril @pi8027 It would be great to write a comment here clarifying the status of this PR with respect to #358 "},{"author":"CohenCyril","date":"2019-10-25T07:48:53Z","comment":"> @CohenCyril @pi8027 It would be great to write a comment here clarifying the status of this PR with respect to #358\r\n\r\nThis PR was subsumed by #358, so it is now closed."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":325,"state":"closed","open_date":"2019-04-08T16:02:25Z","update_date":"2019-05-29T08:09:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":324,"state":"closed","open_date":"2019-04-04T14:52:21Z","update_date":"2019-05-07T19:06:47Z","discussion":[{"author":"CohenCyril","date":"2019-04-04T15:54:20Z","comment":"@ggonthier I have a squashed and rebased version with resolved conflicts + cleansed spurious whitespaces. It compiles on my computer with coq 8.8. May I force-push?"},{"author":"ggonthier","date":"2019-04-04T15:56:21Z","comment":"Did you also rebase wrt the ChangeLog upheaval? Otherwise it would make sense to squash wrt that before..."},{"author":"CohenCyril","date":"2019-04-04T15:57:37Z","comment":"> Did you also rebase wrt the ChangeLog upheaval? Otherwise it would make sense to squash wrt that before...\r\n\r\nYes I did"},{"author":"CohenCyril","date":"2019-04-04T16:08:13Z","comment":"@ggonthier the result it here: https://github.com/CohenCyril/math-comp/commits/seq-permutations-allpairs"},{"author":"CohenCyril","date":"2019-04-04T16:11:34Z","comment":"I realize some comments of the commit log do not make sense anymore now it is squashed... so I am taking the liberty to rephrase slightly"},{"author":"ggonthier","date":"2019-04-04T16:11:45Z","comment":"Looks great - good to merge, I'd say; thanks!"},{"author":"CohenCyril","date":"2019-04-04T20:11:14Z","comment":"@erikmd I tried to follow your tutorial #293 but I must have missed something. Could you have a look?"},{"author":"erikmd","date":"2019-04-04T23:29:18Z","comment":"@CohenCyril I just took a look and it seems:\r\n* that your implementation of #293 was very fine: in particular:\r\n    * in https://gitlab.com/math-comp/math-comp/pipelines/55269045 there is the good number of jobs\r\n    * in https://gitlab.com/math-comp/math-comp/-/jobs/190933399 I indeed see\r\n        `$ git rev-parse --verify HEAD`  \r\n        `6fe341242be1d4e55ac23fa6f022e6d115b89bf1`\r\n* that **coqbot** reporting was imprecise because it aggregated failures from different pipelines (this is maybe a very minor issue, but I Cc @Zimmi48 just in case)\r\n* that your patch in the external branch is maybe incomplete: at first sight it should at least modify this line: https://github.com/math-comp/fourcolor/blob/master/theories/configurations.v#L2078"},{"author":"CohenCyril","date":"2019-04-05T10:10:43Z","comment":"Failures are spurious now, one can merge."},{"author":"ggonthier","date":"2019-04-05T10:18:12Z","comment":"Shouldn't we remove the patch commit before merging?"},{"author":"CohenCyril","date":"2019-04-05T10:26:29Z","comment":"> Shouldn't we remove the patch commit before merging?\r\n\r\nWe do not have to, but let's do the cleanup right now indeed."},{"author":"CohenCyril","date":"2019-04-05T12:05:16Z","comment":"Dear @ggonthier, I do not understand what happened here. Did you commit to this pr by accident?"},{"author":"ggonthier","date":"2019-04-05T12:13:02Z","comment":"Yes, and then no: my local sync didn't react too well to all those forced pushes, and then I decided to tweak the RHS of `mem_permutations` while I was at it. I'm looking into another refactoring bit (consistency renaming or `perm` lemmas) which we should do while we're at it. I'll signal when you can straighten things out again..."},{"author":"CohenCyril","date":"2019-04-05T16:01:44Z","comment":"Checks have passed. I will rebase and merge later. (After @ggonthier signals me)"},{"author":"Zimmi48","date":"2019-04-08T12:48:22Z","comment":"@erikmd Cyril pushed the branch `seq-permutations-allpairs` manually on GitLab. Thus, it ran without the overlays (since they are supposed to run only for the branch named `pr-324`). Because the recommendation is to use alternative names for building math-comp, the reported status from the CI run triggered by @coqbot did not override the status reported for the branch. Overall my recommendation is to just not push to GitLab directly unless you have a good reason to."},{"author":"CohenCyril","date":"2019-04-08T16:14:24Z","comment":"@Zimmi48 I do not even know how to push directly on gitlab, so I did not do it, or not on purpose... or at all?"},{"author":"erikmd","date":"2019-04-08T22:47:41Z","comment":"@Zimmi48 thanks for your reply!\r\n\r\nI guess the behavior is the same whether one directly push a branch to GitLab, or to GitHub because branches are mirrored to GitLab… so are you suggesting that all PRs should be opened from forks, rather than from internal, upstream branches on GitHub?\r\n(this PR #324 was indeed in the latter case, as `seq-permutations-allpairs` is an upstream branch)"},{"author":"Zimmi48","date":"2019-04-09T09:06:30Z","comment":"Thanks for the clarification. I did not realize that this branch was mirrored automatically. @erikmd You could modify your instructions in #293 to test for the branch name `pr-xxx` and also the GitHub branch name (similar to what we do in Coq's user overlays https://github.com/coq/coq/tree/master/dev/ci/user-overlays)."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":323,"state":"closed","open_date":"2019-04-04T14:10:10Z","update_date":"2019-04-04T18:14:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gares","number":322,"state":"closed","open_date":"2019-04-04T12:48:48Z","update_date":"2019-04-04T15:38:08Z","discussion":[{"author":"gares","date":"2019-04-04T13:29:46Z","comment":"I think I'm happy with the status quo.\r\nFor reviewing: https://github.com/math-comp/math-comp/blob/188c6e0c66b4b147c7fcb05aec6c3cc8d2e2bb3c/CHANGELOG.md"}],"tags":[],"pull_requests":[]},{"author":"gares","number":321,"state":"closed","open_date":"2019-04-04T09:48:38Z","update_date":"2019-04-04T14:18:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gares","number":320,"state":"closed","open_date":"2019-04-03T13:58:46Z","update_date":"2019-04-04T15:39:58Z","discussion":[{"author":"maximedenes","date":"2019-04-03T20:56:55Z","comment":"How's that the proper fix?! What's wrong with the name \"test-suite\"?"},{"author":"gares","date":"2019-04-03T21:42:22Z","comment":"What is the real issue?"},{"author":"maximedenes","date":"2019-04-03T21:43:25Z","comment":"> What is the real issue?\r\n\r\nWell, that was my question :)"},{"author":"maximedenes","date":"2019-04-03T21:43:49Z","comment":"Is the name `test-suite` forbidden? If not, why this patch?"},{"author":"gares","date":"2019-04-04T06:33:49Z","comment":"It cannot translate to a logical path"},{"author":"vbgl","date":"2019-04-04T08:37:19Z","comment":"Will merging this make Coq CI work again? If so please do merge and investigate the root cause later. Thanks."},{"author":"gares","date":"2019-04-04T09:30:26Z","comment":"I guess so. IIRC the makefiles generated by Coq makefile ask Coq to resolve paths to logical paths for the installation in user-constribs/. Unfortunately I see no message in the log, but this directory is the only thing that changed."},{"author":"vbgl","date":"2019-04-04T10:09:16Z","comment":"Coq CI still fails:\r\n\r\n> install: cannot stat 'test_suite/hierarchy_test.glob': No such file or directory\r\nMakefile.coq:471: recipe for target 'install' failed\r\nmake[1]: *** [install] Error 1\r\nmake[1]: Leaving directory '/builds/coq/coq/_build_ci/mathcomp/mathcomp'\r\nMakefile.ci:69: recipe for target 'ci-coquelicot' failed"},{"author":"gares","date":"2019-04-04T10:45:35Z","comment":"ok, I'll at it closely then"},{"author":"gares","date":"2019-04-04T11:18:05Z","comment":"We found the culprit, @maximedenes is preparing a PR (on Coq)"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":318,"state":"closed","open_date":"2019-04-03T11:50:24Z","update_date":"2019-04-08T12:18:04Z","discussion":[{"author":"pi8027","date":"2019-04-05T17:20:10Z","comment":"I hope that I have fixed this and found some bugs. Failures on `FinGroup.type` might be false positives.\r\nhttps://github.com/pi8027/math-comp/tree/hierarchy_test\r\n```coq\r\nFail check_join Choice.type FinGroup.type FinGroup.type.\r\nFail check_join GRing.ComRing.type CountRing.UnitRing.type CountRing.ComUnitRing.type.\r\nFail check_join Finite.type FinGroup.type FinGroup.type.\r\nFail check_join GRing.Ring.type GRing.Lmodule.type GRing.Lalgebra.type.\r\nFail check_join CountRing.ComRing.type GRing.UnitRing.type CountRing.ComUnitRing.type.\r\nFail check_join GRing.UnitRing.type CountRing.ComRing.type CountRing.ComUnitRing.type.\r\nFail check_join Countable.type FinGroup.type FinGroup.type.\r\nFail check_join CountRing.UnitRing.type GRing.ComRing.type CountRing.ComUnitRing.type.\r\nFail check_join Equality.type FinGroup.type FinGroup.type.\r\n```"},{"author":"pi8027","date":"2019-04-05T21:43:39Z","comment":"Rebased and fixed again. This one is still wrong:\r\nhttps://github.com/math-comp/math-comp/blob/6e0a9a6ad6d5022e1214a4f38348e3a8f82d45a2/mathcomp/solvable/extremal.v#L1536\r\n```\r\nCountable.sort <- Finite.sort ( extremal_group_finType )\r\n```"},{"author":"pi8027","date":"2019-04-08T08:33:30Z","comment":"@CohenCyril I think I have solved all the problems in this PR. So could you fetch my `hierarchy_test` branch and force-push here, and change the milestone to 1.8.0?"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":317,"state":"open","open_date":"2019-04-01T15:18:18Z","update_date":"2020-11-26T05:40:48Z","discussion":[{"author":"CohenCyril","date":"2019-04-01T15:59:07Z","comment":"I suggested @pi8027 makes this PR of the current state of his variant of `finType` and uses this thread to follow-up on @ggonthier's remark https://github.com/math-comp/math-comp/pull/294#issuecomment-476617841 here."},{"author":"pi8027","date":"2019-04-02T11:17:05Z","comment":"@CohenCyril Thank you for the explanation.\r\n\r\n@ggonthier \r\n> I think that there are better ways of doing this that what you've experimented with,\r\n\r\nI have fixed an incompatibility issue of this. So it is better than the previous one. Do you still see any possible improvements?\r\n\r\n> however, and also that we should put some thought in making the transport reduce, if we want this to be useful for computing directly with matrices.\r\n\r\n- I don't understand \"making the transport reduce\" in this sentence.\r\n- It is experimentally confirmed that the multiplication of n×n matrices of integers can be optimized and its execution time has been improved from O(n^5) to O(n^3) in extracted code. But we would have no improvements on computations inside Coq. (CoqEAL is a better way to do it.)"}],"tags":[{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."},{"tag":"needs: assignee","description":"Issue or PR that needs an assignee. Please volunteer."}],"pull_requests":[]},{"author":"ejgallego","number":316,"state":"open","open_date":"2019-03-30T17:15:52Z","update_date":"2023-01-11T09:19:38Z","discussion":[{"author":"CohenCyril","date":"2019-04-04T17:18:46Z","comment":"@ejgallego and @gares should this be in 1.8.0 ?"},{"author":"ejgallego","date":"2019-04-04T17:34:57Z","comment":"This is experimental so people interested in the Dune build can run it, I don't think it affects the regular workflow otherwise yet."},{"author":"gares","date":"2019-04-04T17:51:34Z","comment":"This is mostly fine to me (we could merge it) but for the latter opam file. I think know why it is there, but that opam package corresponds to no real opam package. Couldn't we use the real opam packages instead (and use dune's compositional build stuff?)."},{"author":"ejgallego","date":"2019-04-04T17:57:32Z","comment":"> Couldn't we use the real opam packages instead (and use dune's compositional build stuff?).\r\n\r\nYes, in a few days, the compositional stuff is undergoing testing as we speak; so indeed I am fine to wait until I update this PR with the split package support.\r\n"},{"author":"CohenCyril","date":"2019-04-04T18:07:29Z","comment":"Let's target 1.8.1 then! Thanks"},{"author":"CohenCyril","date":"2019-05-21T09:38:18Z","comment":"Hi @ejgallego, could you please write some comments to document the build files, add tests to the CI, and maybe explain how it changes the development process (with coqide? proofgeneral?...)"},{"author":"ejgallego","date":"2019-05-21T13:11:04Z","comment":"Noted, will do @CohenCyril ."},{"author":"gares","date":"2019-11-14T10:19:26Z","comment":"ping. Also, I think that the `synopsis` field should be more precise than that."},{"author":"ejgallego","date":"2019-11-14T11:56:16Z","comment":"This is still waiting on a new Dune release for composition support."},{"author":"ejgallego","date":"2020-03-07T04:50:18Z","comment":"Ok, this is finally working, but needs an unreleased version of dune, hopefully we do a dune release soon.\r\n\r\nNote the large amount of warnings that we have to disable in order to get a clean build. A missing feature for the Coq mode is to support build profiles [that would allow a common set of flags, but I'm unsure we want it here instead of per-lib. A warning cleanup would be nice tho.\r\n\r\n> Hi @ejgallego, could you please write some comments to document the build files, add tests to the CI, and maybe explain how it changes the development process (with coqide? proofgeneral?...)\r\n\r\nI will add a CI build as soon as we get a release version of dune, I'm unsure what to write about the documentation of the build files, as far as I know these are standard and covered properly in both the Coq and dune manual.\r\n\r\nWe will add support to CoqIDE / PG very soon, that will be mostly automatic."},{"author":"affeldt-aist","date":"2020-03-25T15:17:22Z","comment":"The release managers for mathcomp 1.11.0 think that, given the fact that it depends on an unreleased version of dune (as of March 7), this PR could be postponed to milestone 1.12.0. Agreed?"},{"author":"ejgallego","date":"2020-03-25T20:54:05Z","comment":"Hi @affeldt-aist , sure, this is not urgent. Note that this PR just adds support for the dune build, I think there is still a long way before it could be considered to be the default."},{"author":"CohenCyril","date":"2020-08-25T12:09:06Z","comment":"@gares @ejgallego I do not understand the pros and cons. Do you think we could converge towards either a milestone or closure until we have a milestone?"},{"author":"ejgallego","date":"2020-08-25T12:22:31Z","comment":"No particular opinion, I guess that's a matter of preference."},{"author":"CohenCyril","date":"2020-08-26T12:49:21Z","comment":"Then I guess the switch to dune should be discussed at the next mathcomp meeting, and then possibly scheduled for some release. What do you think @ejgallego, @maximedenes, @gares, @erikmd?"},{"author":"ejgallego","date":"2020-08-26T14:16:56Z","comment":"Ok, I've updated the PR. @corwin-of-amber did some testing and found some bugs in Dune, but in principle things should work fine.\r\n\r\nPending stuff here is meta-data for the opam file generation, and reorg / cleanup of files if desired."},{"author":"gares","date":"2020-11-15T17:08:17Z","comment":"As per https://github.com/coq/ceps/pull/48#issuecomment-727585541 this PR is blocked by ocaml/dune#3210 IMO\r\nThere is also the test suite folder which does not seem to be compiled."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":314,"state":"closed","open_date":"2019-03-27T12:39:13Z","update_date":"2019-04-08T12:53:25Z","discussion":[{"author":"pi8027","date":"2019-04-03T14:02:53Z","comment":"@CohenCyril If you need to fix and merge this PR asap, I'd like to give you ownership of it. I may not be able to work on this in this week."},{"author":"CohenCyril","date":"2019-04-04T08:21:47Z","comment":"> @CohenCyril If you need to fix and merge this PR asap, I'd like to give you ownership of it. I may not be able to work on this in this week.\r\n\r\nok taking ownership now"},{"author":"ggonthier","date":"2019-04-04T08:28:22Z","comment":"Actually, I've been working on a bit of refactoring of `seq` while looking into implementing some of @MrSet's suggestions #299, which has uncovered a few loose threads in `seq`: missing implicits and documentation. I've also got @pi8027 's `allpairs` extension in, so perhaps I can do the hijacking (leaving out the `permutations` development, which requires a bit more work)."},{"author":"CohenCyril","date":"2019-04-04T11:14:55Z","comment":"> Actually, I've been working on a bit of refactoring of `seq` while looking into implementing some of @MrSet's suggestions #299, which has uncovered a few loose threads in `seq`: missing implicits and documentation. I've also got @pi8027 's `allpairs` extension in, so perhaps I can do the hijacking (leaving out the `permutations` development, which requires a bit more work).\r\n\r\nDo you think it will be ready soon? with @gares we planned to release this afternoon..."},{"author":"CohenCyril","date":"2019-04-04T11:16:37Z","comment":"PS: I did not see your comment, so I did this: https://github.com/CohenCyril/math-comp/blob/allpairs-lemma/mathcomp/ssreflect/seq.v"},{"author":"ggonthier","date":"2019-04-04T11:34:03Z","comment":"I've been working on a separate branch, which I've just published (sew-permutations-allpairs). I'm just checking the MC compile, then you can either push it here or turn it into a PR that replaces this one.\r\n"},{"author":"ggonthier","date":"2019-04-04T11:37:58Z","comment":"There are still improvements I want to explore with `permutations`, but that can become a later PR."},{"author":"CohenCyril","date":"2019-04-04T12:04:23Z","comment":"> I'm just checking the MC compile\r\n\r\nIt does not compile.\r\nCould you please submit a PR rebased on master?"},{"author":"ggonthier","date":"2019-04-04T12:10:35Z","comment":"I did notice, and I'm digging into it because I am merged with master, and things break in an unrelated file."},{"author":"ggonthier","date":"2019-04-04T12:46:19Z","comment":"Fine, @CohenCyril, it's rebased and compiles. Not sure what happened in `primitive_action`; could be an issue with `trivial` rather than `intro`.\r\n   On a separate issue, would it be possible for `hierarchy_test` _NOT_ to dump tons of diagnostics on successful compilations?"},{"author":"CohenCyril","date":"2019-04-04T12:51:59Z","comment":"> On a separate issue, would it be possible for `hierarchy_test` _NOT_ to dump tons of diagnostics on successful compilations?\r\n\r\nyes!"},{"author":"CohenCyril","date":"2019-04-04T13:42:21Z","comment":"Dear @ggonthier, the branch https://github.com/math-comp/math-comp/compare/seq-permutations-allpairs looks like it is *merged* with master and not *rebased* on it.\r\nAdditionally it is failing because of the use of the new ssreflect clear behavior, which was not yet available in 8.7 and 8.8 (we are dropping support for 8.6 in PR #321)."},{"author":"CohenCyril","date":"2019-04-04T14:10:55Z","comment":"> > On a separate issue, would it be possible for `hierarchy_test` _NOT_ to dump tons of diagnostics on successful compilations?\r\n> \r\n> yes!\r\n\r\nI addressed it in #323 "},{"author":"ggonthier","date":"2019-04-04T15:05:00Z","comment":"I've rebased (turns out git had inserted a no-op back merge of the remote, which threw off any further rebasing) and turned a branch into a PR, so I can tell where the offending clear is...\r\nI'll probably en up using the auto squash, since my git -i install on macOS is broken (sic)."},{"author":"CohenCyril","date":"2019-04-04T15:10:40Z","comment":"> I'll probably en up using the auto squash, since my git -i install on macOS is broken (sic).\r\n\r\nI can squash it for you. (I will also chase spurious spaces (some remained in your previous commits))\r\n\r\nAlso, I think you did not take into account my last remark:\r\n\r\n> Additionally it is failing because of the use of the new ssreflect clear behavior, which was not yet available in 8.7 and 8.8 (we are dropping support for 8.6 in PR #321).\r\n\r\nso the CI will fail again on 8.7 and 8.8..."},{"author":"ggonthier","date":"2019-04-04T15:12:35Z","comment":"I did - I'm waiting for the CI to fail so I know what to fix."},{"author":"CohenCyril","date":"2019-04-04T15:14:34Z","comment":"> I did - I'm waiting for the CI to fail so I know what to fix.\r\n\r\nI know what to fix:\r\n\r\n```coq\r\n-elim: s => //= x s IHs /andP[s'x {}/IHs-IHs]; rewrite factS -IHs mulnC.\r\n+elim: s => //= x s IHs /andP[s'x /IHs-{IHs}IHs]; rewrite factS -IHs mulnC.\r\n```\r\n \r\n```coq\r\n-  by move=> m n /subnK<-; elim: {n}(n - m) => // n IHn {}/IHn; apply: PsS.\r\n+  by move=> m n /subnK<-; elim: {n}(n - m) => // n IHn /IHn; apply: PsS.\r\n```"},{"author":"CohenCyril","date":"2019-04-04T15:15:54Z","comment":"maybe you want to fix it in a slightly different way so that no *duplication of clear* warnings are triggered on Coq 8.9 :laughing: "},{"author":"ggonthier","date":"2019-04-04T15:22:40Z","comment":"Ok, fixed (blindly)."},{"author":"ggonthier","date":"2019-04-04T15:58:43Z","comment":"Please do go ahead, then, by all means."}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":307,"state":"closed","open_date":"2019-03-22T03:58:08Z","update_date":"2019-04-26T11:21:02Z","discussion":[{"author":"erikmd","date":"2019-03-22T12:05:32Z","comment":"Rebased on #306"},{"author":"CohenCyril","date":"2019-04-17T11:18:50Z","comment":"Waiting for #306's merge into master to be green..."},{"author":"erikmd","date":"2019-04-17T13:18:34Z","comment":"@CohenCyril\r\n> Waiting for #306's merge into master to be green...\r\n\r\nThanks Cyril ! this is indeed the case:\r\nhttps://gitlab.com/math-comp/math-comp/pipelines/57204553\r\nand the images have been successfully pushed to https://hub.docker.com/r/mathcomp/mathcomp-dev/tags"},{"author":"CohenCyril","date":"2019-04-17T13:32:01Z","comment":"@erikmd done! thank you for all of this :+1: "}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":306,"state":"closed","open_date":"2019-03-22T03:52:54Z","update_date":"2019-04-26T11:21:02Z","discussion":[{"author":"ejgallego","date":"2019-03-22T04:08:43Z","comment":"I'd say it looks really good, congrats!\r\n\r\nAbout testing, I'm ccing @vbgl and @SkySkimmer who are experts here and may know a bit better how they do test."},{"author":"SkySkimmer","date":"2019-03-22T08:22:26Z","comment":">the semantics of the CI is slightly changed as mathcomp-dev for coq-(8.6, 8.7, 8.8, 8.9, dev) will be pushed to Docker Hub only if the build stage and the test stage were both successful. This is the breaking change of the PR, but I put it in the Pros list as it seems something desirable (?)\r\n\r\nIf you end up considering it a con you should be able to change it by using `when: always` https://docs.gitlab.com/ee/ci/yaml/#when\r\n\r\nI have no expertise in deploy/environment."},{"author":"erikmd","date":"2019-03-22T12:04:16Z","comment":"@SkySkimmer \r\n> If you end up considering it a con you should be able to change it by using `when: always`\r\n\r\nThanks! this could be a useful work-around, but on the other hand, if a job from `build` with a given version of Coq fails:\r\n* all other images would be pushed, which might be unwanted,\r\n* and 2 jobs would be failing (e.g. coq-8.7 and mathcomp-dev:coq-8.7), which would clutter a bit coqbot's report.\r\n\r\nSo I end up implementing another solution (swapping the `deploy` and `test` stages) that should address these two drawbacks…"},{"author":"erikmd","date":"2019-04-02T15:43:15Z","comment":"@CohenCyril I've noted that #307 now has a conflict so FYI I first rebased #306 on master and took the opportunity to improve details (removing unnecessary `=` in echo commands) and push a clone of the repo in a temporary public gitlab repo to test the new deployment procedure (temporarily to https://hub.docker.com/r/erikmd/math-comp-env-1). If this works I'll rebase #307 on #306 this evening and you'll be able to merge both PRs..."},{"author":"erikmd","date":"2019-04-02T23:54:42Z","comment":"@CohenCyril it was a good idea to test the new deployment procedure, because it seems it didn't work out of the box :)\r\nI identified two small issues (one regarding a spurious quote character, and one regarding the procedure itself, following @ejgallego's advice to rely on a deployment `environment`)\r\nI fixed the first issue but I'll need more time to finish this on tomorrow; anyway this approach indeed seems promising.\r\nSee you, Erik"},{"author":"CohenCyril","date":"2019-04-03T07:46:40Z","comment":"Thanks a lot @erikmd, waiting for your next input."},{"author":"CohenCyril","date":"2019-04-08T10:53:29Z","comment":"Hi! @erikmd any news?"},{"author":"erikmd","date":"2019-04-08T22:07:35Z","comment":"Hi @CohenCyril ! sorry, I've not had enough time to debug/finalize the new CI deployment setup…\r\nBut this task is in my todo list for this week."},{"author":"erikmd","date":"2019-04-16T14:01:01Z","comment":"Hi @CohenCyril, I've finished upgrading the `coqorg/coq` images so they now rely on opam 2.0.4:\r\n- https://hub.docker.com/r/coqorg/base\r\n- https://hub.docker.com/r/coqorg/coq\r\n\r\nand the `coqorg/coq:dev` images now contain some metadata labels to know more easily what is the underlying git commit hash of coq: https://microbadger.com/images/coqorg/coq:dev\r\n\r\nThen I pursued my experiments on #306 and #307 and the deploy configuration seems very fine now…\r\ni've rebased on `master` (to take into account the removal of `coq-8.6` jobs) and force-pushed so these two CI pipelines are now pending:\r\n- https://gitlab.com/math-comp/math-comp/pipelines/57070048 (for #306)\r\n- https://gitlab.com/math-comp/math-comp/pipelines/57070300 (for #307)\r\n\r\nFYI I've switched again the protected variables related to Docker Hub to *scoped protected variable*s w.r.t. the deployment environment, which implies this PR should be merged in `master` **before** other PRs (so that upcoming merges can benefit from the deploy to <https://hub.docker.com/r/mathcomp/mathcomp-dev>).\r\n\r\nI propose that you merge #306 then #307 when the corresponding pipelines will be green…\r\n\r\nKind regards, Erik"},{"author":"CohenCyril","date":"2019-04-16T14:09:35Z","comment":"@erikmd CI status are not displayed in PRs anymore... (they did this morning AFAIK) would you know why?"},{"author":"erikmd","date":"2019-04-16T14:16:12Z","comment":"@CohenCyril indeed, I don't know why…\r\nI checked the items from [this checklist](https://github.com/coq/bot#rely-on-coqbot-to-synchronize-your-github-prs-with-your-gitlab-project) (for the GitLab side) and saw nothing special…\r\n\r\n@Zimmi48 do you have an idea of what could cause that lack of CI status reporting?"},{"author":"Zimmi48","date":"2019-04-16T14:58:53Z","comment":"Sorry I didn't see the issue. Can you link me to a PR where there is a problem?"},{"author":"CohenCyril","date":"2019-04-16T15:03:11Z","comment":"> Sorry I didn't see the issue. Can you link me to a PR where there is a problem?\r\n\r\n@Zimmi48 The problem lasted the whole afternoon, but now it seems solved: I cannot find a PR with this problem anymore..."},{"author":"Zimmi48","date":"2019-04-16T15:18:25Z","comment":"I had a look at the log. It looks like GitLab didn't send any webhooks during the afternoon, until 16:30 when a lot of delayed webhooks were emitted. Confirmed this is was a general GitLab problem: https://twitter.com/gitlabstatus/status/1118076245688737793"},{"author":"erikmd","date":"2019-04-16T16:21:32Z","comment":":+1: The CI for this first PR was green :)"},{"author":"erikmd","date":"2019-04-16T17:01:37Z","comment":"And that of #307 was green as well; so I guess both PRs are ready.\r\nCc @CohenCyril "},{"author":"CohenCyril","date":"2019-04-17T09:19:17Z","comment":"Thanks @erikmd !!\r\nDo you know how to configure github to alert users that changes to this file might leak a secret variable and should hence be handled very carefully?"},{"author":"ejgallego","date":"2019-04-17T09:38:05Z","comment":"@CohenCyril you can use a codeowners file so every commit touching gitlab-ci.yml requires a review; other than there is not further check.\r\n\r\nMaybe a worthwhile feature request for gitlab would be to require a signed gitlab-ci.yml file"},{"author":"erikmd","date":"2019-04-17T09:41:54Z","comment":">Do you know how to configure github to alert users that changes to this file might leak a secret variable and should hence be handled very carefully?\r\n\r\nBeyond Emilio's very relevant suggestion on codeowners, there are now three restrictions to prevent something like `echo $HUB_TOKEN` to be effective in an external PR or in `master`:\r\n\r\n- `$HUB_TOKEN` is only available in the protected branch `master` (so, after the review+merge);\r\n- it is only available in jobs at the end of the file, which contain the `environment: …` key;\r\n- and finally I enabled a recently implemented protection in GitLab to mask the corresponding value if ever it were printed in the log:\r\n    - https://gitlab.com/gitlab-org/gitlab-ce/issues/13784\r\n    - https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/25476\r\n    - https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/26751"},{"author":"ejgallego","date":"2019-04-17T09:44:27Z","comment":"Yes so indeed as @erikmd points out, the main purpose of the PR is that now the change leaking information would have to reach master, thus indeed committers to the main branch should be careful of course with changes to the CI setup."},{"author":"CohenCyril","date":"2019-04-17T11:17:17Z","comment":"@ejgallego \r\n> indeed committers to the main branch should be careful of course with changes to the CI setup.\r\n\r\nthis was my point\r\n\r\n@erikmd \r\n\r\n\r\n> and finally I enabled a recently implemented protection in GitLab to mask the corresponding value if ever it were printed in the log:\r\n\r\nwow ok, I did not know about this... very useful (but I guess it would only prevent mistakes, not deliberate hacking attempts, which could encore the token so that gitlab does not filter it out?)"},{"author":"Zimmi48","date":"2019-04-17T12:14:40Z","comment":"Cool new feature indeed! Unfortunately, we can't use it for our secret variables in the Coq project because they don't respect the acceptable format. So we'll have to continue relying on protected + environment restricted + being careful about not printing the environment in deployment jobs."},{"author":"erikmd","date":"2019-04-17T15:25:37Z","comment":"Just to complement @ejgallego's comment:\r\n> the main purpose of the PR is that now the change leaking information would have to reach master\r\n\r\nthis was already the case thanks to the protected variables, but now only privileged `deploy` jobs can read  that variable in `master` builds.\r\n\r\nAlso, another useful change is brought by #306: the deployment of `mathcomp/mathcomp-dev:coq-{8.7,8.8,8.9,dev}` will occur only if the `build` stage of math-comp succeeds for these 4 versions of Coq, so this ensures that the version of math-comp available in the 4 Docker images stays consistent anytime. But of course, this deployment condition does not require that the `test` stage succeeds.\r\n\r\n@CohenCyril \r\n> (but I guess it would only prevent mistakes, not deliberate hacking attempts, which could encore the token so that gitlab does not filter it out?)\r\n\r\nIndeed, but these hacking attempts should anyway be implemented by adding code in the deploy jobs of the `.gitlab-ci.yml` file… so this would be noticeable for the person that merges the PR."},{"author":"CohenCyril","date":"2019-04-17T15:56:37Z","comment":"> Indeed, but these hacking attempts should anyway be implemented by adding code in the deploy jobs of the `.gitlab-ci.yml` file… so this would be noticeable for the person that merges the PR\r\n\r\n@erikmd this assumes that anyone with merge rights is aware of this security breach... and it is not the case yet."},{"author":"ejgallego","date":"2019-04-17T16:02:09Z","comment":"@CohenCyril well people with merge rights should certainly refuse to merge if they don't understand what a change in gitlab-ci.yml is doing, right?"},{"author":"CohenCyril","date":"2019-04-17T16:06:27Z","comment":"> @CohenCyril well people with merge rights should certain refuse to merge if they don't understand what a change in gitlab-ci.yml is doing, right?\r\n\r\nright!"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":305,"state":"closed","open_date":"2019-03-21T00:07:59Z","update_date":"2019-04-04T15:40:05Z","discussion":[{"author":"CohenCyril","date":"2019-03-21T08:09:30Z","comment":"I think `sumnE : sumn r = \\sum_(i <- r) i` is missing."},{"author":"ggonthier","date":"2019-03-21T14:10:52Z","comment":"I'd say `sumnE` is the only addition that can really be justified; its proof is `rewrite unlock`. The other lemmas can be readily derived from it, perhaps with a specialisation of `big_map` to `F := id` to help with rewriting in the right-to-left direction. In the same vein we could provide a lemma to rewrite a `foldr` into a `bigop`.\r\n  Unless there's a strong use case I'm missing, it hardly seems reasonable to specialise `sumnE` to every kind of list comprehension notation under the sun. On the subject of comprehensions, the current library is missing lemmas for the `image` seq comprehension, though `finset` does have some for `imset`, so perhaps we should provide those."},{"author":"CohenCyril","date":"2019-03-21T18:08:39Z","comment":"@ggonthier I updated the PR to reflect your comment, and I agree with you about not multiplying specializations. I also added elimination of `foldr`, and also of `foldl` for completeness."},{"author":"CohenCyril","date":"2019-03-26T08:54:55Z","comment":"@ggonthier happy with the current result?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":304,"state":"closed","open_date":"2019-03-21T00:07:14Z","update_date":"2019-04-04T15:40:09Z","discussion":[{"author":"CohenCyril","date":"2019-03-22T21:38:06Z","comment":"@ggonthier I advocate for leaving the duplications for `allpairs` for backward compatibility purposes."},{"author":"ggonthier","date":"2019-03-23T17:06:10Z","comment":"You have a point, but since the theory no longer concerns the actual `allpairs` constant, perhaps a better solution would be to repurpose it as the general tag for lemmas about the two-variable comprehension notation, using a '_dep' suffix to identify lemmas that cover the dependent case when there is a specific lemma for the non-dependent case, consistent with the rest of MathComp. That means `allsigs` would not be used, so you'll have to rename the PR..."},{"author":"CohenCyril","date":"2019-03-26T11:54:15Z","comment":"@ggonthier happy with the result?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":303,"state":"closed","open_date":"2019-03-21T00:04:38Z","update_date":"2019-03-26T11:53:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":302,"state":"closed","open_date":"2019-03-21T00:04:33Z","update_date":"2019-06-11T08:28:24Z","discussion":[{"author":"CohenCyril","date":"2019-06-04T11:29:25Z","comment":"@ggonthier let's merge?"},{"author":"ggonthier","date":"2019-06-04T12:08:43Z","comment":"@CohenCyril almost there, see last comment..."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":301,"state":"closed","open_date":"2019-03-21T00:04:22Z","update_date":"2019-03-26T11:53:38Z","discussion":[{"author":"amahboubi","date":"2019-03-21T06:35:59Z","comment":"Fine with me."},{"author":"gares","date":"2019-03-22T13:22:26Z","comment":"@amahboubi you happen to be the assignee, please merge at your convenience"},{"author":"CohenCyril","date":"2019-03-26T10:33:58Z","comment":"@gares ok now?"}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":300,"state":"closed","open_date":"2019-03-19T23:34:53Z","update_date":"2019-03-22T13:30:54Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":298,"state":"closed","open_date":"2019-03-18T11:50:16Z","update_date":"2019-03-22T13:26:46Z","discussion":[{"author":"ggonthier","date":"2019-03-18T13:52:21Z","comment":"@CohenCyril, has something gone awry with the CI scripting? Viz. above, multiple opam failures and inconsistent outcome of the CI pipeline and individual version tests..."},{"author":"ppedrot","date":"2019-03-18T19:09:02Z","comment":"FTR, mathcomp + change of case node seem fine with this single fix, see https://gitlab.com/coq/coq/-/jobs/179538578. It's probably fine to merge thus."},{"author":"erikmd","date":"2019-03-18T19:27:08Z","comment":"@ggonthier @CohenCyril it seems there was some spurious network error, cf. this line in [coq-8.7](https://gitlab.com/math-comp/math-comp/-/jobs/179465268) job:\r\n\r\n> <><> Updating package repositories ><><><><><><><><><><><><><><><><><><><><><><>\r\n> [coq-core-dev] no changes from https://coq.inria.fr/opam/core-dev\r\n> [coq-extra-dev] no changes from https://coq.inria.fr/opam/extra-dev\r\n> [coq-released] synchronised from https://coq.inria.fr/opam/released\r\n> **[ERROR] Could not update repository \"default\": OpamDownload.Download_fail(_, \"Curl failed: \\\"/usr/bin/curl --write-out %{http_code}\\\\\\\\n --retry 3 --retry-delay 2 --user-agent opam/2.0.2 -L -o /tmp/opam-52-d2d111/index.tar.gz.part https://opam.ocaml.org/index.tar.gz\\\" exited with code 7\")**\r\n\r\nI've just relaunched the two math-comp jobs at stake, but as pointed out by @ppedrot it could be fine as well to merge this PR from now on."},{"author":"erikmd","date":"2019-03-18T20:55:09Z","comment":"> as pointed out by @ppedrot it could be fine as well to merge this PR from now on.\r\n\r\nIndeed − the final CI status is green."}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":296,"state":"closed","open_date":"2019-03-06T17:24:55Z","update_date":"2019-05-29T08:09:56Z","discussion":[{"author":"pi8027","date":"2019-03-06T17:49:06Z","comment":"I discovered a very clever technique to infer instances of nested join structures without declaring canonical projections in algebraics_fundamentals.v. This method should be documented for someone who need to change this file..."},{"author":"pi8027","date":"2019-03-14T21:59:28Z","comment":"@CohenCyril This one is ready to merge and I have no more things to do on #270 now. CI failure of lemma-overloading seems to be unrelated."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":295,"state":"closed","open_date":"2019-03-05T16:14:54Z","update_date":"2019-03-22T13:25:43Z","discussion":[{"author":"pi8027","date":"2019-03-06T17:33:35Z","comment":"> Declaring all the lemmas in GRing.Theory first and exporting them in GRing would be a better way to do this. But I haven't tried yet.\r\n\r\n`GRing.*` lemmas should be used in the qualified form. So the `Export` command wouldn't work in this case. The `Include` command may work but a little bit scary."},{"author":"pi8027","date":"2019-03-11T13:27:39Z","comment":"@CohenCyril This one might require your review."}],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":294,"state":"closed","open_date":"2019-03-04T14:38:46Z","update_date":"2019-05-07T19:06:50Z","discussion":[{"author":"ggonthier","date":"2019-03-05T08:24:28Z","comment":"There may be a problem with the way the CI pipeline is set up, since math-comp/odd-order#11, which fixes the Miller-pattern issue in odd-order, does not seem to be taken into account by the CI pipeline, even though it was merged five hours before the pipeline was restarted."},{"author":"ejgallego","date":"2019-03-05T08:42:12Z","comment":"With the current setup things are a hard to debug, I'd suggest we improve two things in the pipeline:\r\n- output configuration variables `printenv -0 | sort -z | tr '\\0' '\\n'`\r\n- output the commit hash of the contrib after checkout."},{"author":"erikmd","date":"2019-03-05T11:35:18Z","comment":"@ejgallego \r\n\r\n> output the commit hash of the contrib after checkout.\r\n\r\nIndeed! @ggonthier could you add a commit in this PR with the following change?\r\n\r\nAdding the line `- git rev-parse --verify HEAD` after that line:\r\nhttps://github.com/math-comp/math-comp/blob/e5ff94165ab722bfb77d4437a58d49aacc81683d/.gitlab-ci.yml#L112\r\n\r\nHowever I'd vote against the other suggestion by Emilio:\r\n\r\n> output configuration variables `printenv -0 | sort -z | tr '\\0' '\\n'`\r\n\r\nbecause there is some sensitive information (e.g. private tokens) among the environment variables of the build.\r\n\r\nHowever, we could of course add something like this:\r\n\r\n```\r\n- echo COQ_VERSION=${COQ_VERSION}\r\n- echo CONTRIB_URL=${CONTRIB_URL}\r\n- echo CONTRIB_VERSION=${CONTRIB_VERSION}  \r\n```"},{"author":"ejgallego","date":"2019-03-05T11:42:13Z","comment":"> there is some sensitive information (e.g. private tokens) among the environment variables of the build.\r\n\r\nOh indeed, we had this problem in the Coq setup, however note that you are somehow vulnerable if regular users can run code [which is the case here]\r\n\r\nWhat we do now in Coq is to have specific deploy jobs with a restricted `environment`, so deploy will only run in under very controlled conditions. I do indeed suggest that jobs which run \"user code\" should never ever run under an environment with protected variables."},{"author":"erikmd","date":"2019-03-05T11:47:26Z","comment":"Hi, I was not enough specific in my previous comment, yes the math-comp CI setup relies on protected variables, so if some user specifically opens a PR with `printenv`, no private info will be disclosed (unless the PR is merged in master of course)\n\nLe 5 mars 2019 12:42:14 GMT+01:00, \"Emilio Jesús Gallego Arias\" <notifications@github.com> a écrit :\n>> there is some sensitive information (e.g. private tokens) among the\n>environment variables of the build.\n>\n>Oh indeed, we had this problem in the Coq setup, however note that you\n>are somehow vulnerable if regular users can trigger that.\n>\n>What we do now in Coq is to have specific deploy jobs with a restricted\n>`environment`, so deploy will only run in under very controlled\n>conditions. I do indeed suggest that jobs which run \"user code\" should\n>never ever run under an environment with protected variables.\n>\n>-- \n>You are receiving this because you commented.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/math-comp/math-comp/pull/294#issuecomment-469649603\n\n-- \nEnvoyé de mon appareil Android avec K-9 Mail. Veuillez excuser ma brièveté."},{"author":"ejgallego","date":"2019-03-05T12:01:26Z","comment":"Hi @erikmd ,\r\n\r\n> unless the PR is merged in master of course\r\n\r\nindeed I was aware of this part of the setup, but even so, if jobs inheriting from `.ci` do have private variables this is still a big security risk as they are running external code.\r\n\r\nFor example I could take over lemmas overloading and dump the vars from there.\r\n\r\nSo I suggest indeed you do restrict the private variables using `environment` and then adding `printenv` to `.ci` jobs should not be a problem. Jobs that run in the protected env should never ever run any user code [only push artifacts]."},{"author":"erikmd","date":"2019-03-05T12:05:47Z","comment":"Makes sense indeed, thanks @ejgallego! The math-comp CI jobs that clone external repos need not deploying anything...\n\nLe 5 mars 2019 13:01:28 GMT+01:00, \"Emilio Jesús Gallego Arias\" <notifications@github.com> a écrit :\n>Hi @erikmd ,\n>\n>> unless the PR is merged in master of course\n>\n>indeed I was aware of this part of the setup, but even so, if jobs\n>inheriting from `.ci` do have private variables this is still a big\n>security risk as they are running external code.\n>\n>For example I could take over lemmas overloading and dump the vars from\n>there.\n>\n>So I suggest indeed you do restrict the private variables using\n>`environment` and then adding `printenv` to `.ci` jobs should not be a\n>problem. Jobs that run in the protected env should never ever run any\n>user code [only push artifacts].\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/math-comp/math-comp/pull/294#issuecomment-469654667\n\n-- \nEnvoyé de mon appareil Android avec K-9 Mail. Veuillez excuser ma brièveté."},{"author":"ejgallego","date":"2019-03-05T12:12:52Z","comment":"Cool! Let us know if you need help with that, in Coq we had great problems with the secret variables but I think we got the setup right finally.\r\n\r\nThe main invariant is that jobs that declare `enviroment` must be treated as trusted code, and thus need careful review. In jobs that don't set the restricted environment up, people can add whatever they want."},{"author":"CohenCyril","date":"2019-03-21T00:15:12Z","comment":"@ggonthier I plan to finish the review by March 29th."},{"author":"pi8027","date":"2019-03-25T21:17:35Z","comment":"Note: my modification of fintype and finfun have been successfully rebased on top of this PR without losing positivity and structurally decreasing property. So I can use finfuns as arrays whose type of elements depends on indices. https://github.com/pi8027/math-comp/tree/modified-fintype-experimental\r\n> Georges : the proposed modification may not be compatible with the way the new version of finfun works now."},{"author":"ggonthier","date":"2019-03-26T13:01:27Z","comment":"@pi8027 : you are correct, there will be a way to combine this implementation with constant-time indexing of `finTypes`. I think that there are better ways of doing this that what you've experimented with, however, and also that we should put some thought in making the transport reduce, if we want this to be useful for computing directly with matrices. All in all, that change should be a different PR."},{"author":"CohenCyril","date":"2019-03-29T12:09:51Z","comment":"Dear @ggonthier could you please rebase this branch on top of master?"},{"author":"CohenCyril","date":"2019-03-30T20:17:46Z","comment":"Dear @ggonthier there are unresolved merge remaining in the PR hence the failure...\r\nAlso, the best practice is to rebase, I did it with my own copy and resolved the conflict: I can push it if you want. Rebasing was made harder because successive commits of this PR rewrite the same piece of code... I believe this would be a justification to squash them, unless there is a specific reason why you would keep them separate?"},{"author":"ggonthier","date":"2019-03-30T22:42:22Z","comment":"@CohenCyril I've corrected the merge - I'd somehow missed the spurious conflicts in `finfun` for the one in `ChangeLog`. I do plan to squash and merge, but since several of the commits either explore different options, or work around Coq issues, it seemed preferable to keep them distinct during the discussion, and for future reference when the Coq issues are settled and we move to eliminate the work arounds."},{"author":"CohenCyril","date":"2019-04-01T14:54:29Z","comment":"@ggonthier I finally read it completely. I believe the final result would be good to merge.\r\n\r\nOne should:\r\n- [ ] open an issue on mathcomp to remind ourselves that once https://github.com/coq/coq/pull/9690 reaches two released versions of Coq, we should remove the duplication between `dffun` and `ffun`.\r\n- [ ] open an issue or a PR about generalizing `_ =1 _` to the dependent case.\r\n- [x] at least squash 162cb3f67c20d4587a2e57738ffb5b3dbb63565c with the previous commit.\r\n\r\nBut ideally:\r\n- [x] squash/fixup at least 00cadb6aad408447739cddb86dddaf1d98e7b1be, 47254118ac8a28eb1108bcf85cca9c1a1bfa9571 and 6e853635171990d48bed1f129423019860ac3102\r\n- [x] and rebase so that the history looks like (roughly, with more squashable things inside brackets) :\r\n850862dc6475bd48524a294651400df4b5b7ecf3 (master) -- df346ace8c0b5eb61f44b09abcebc193d8a0d6ac -- [ a9edbe27928858540c375c972d709df094c65d69 -- 1296cbd3d39ae04ab1ade2383f2396febb934c13 -- e64978dea1b796df8c4d827bca0fae0279b63724 ] -- 80846bf9d528e378fc2e6d809273aae676ecf964 -- cac497b28f88e8f95a42ee60e3593defcc196bad.\r\n(if so 162cb3f67c20d4587a2e57738ffb5b3dbb63565c should be dealt with during the rebase)\r\n\r\nPlease tell me if you think this is too much..."},{"author":"CohenCyril","date":"2019-04-01T15:28:43Z","comment":"@ggonthier I rebased and did the squashing I mentionned in the last part of my comment. Please tell me if you are ok with it: https://github.com/CohenCyril/math-comp/tree/dependent-positive-finfun (the git diff is empty except for some spurious spaces and one typo)\r\nIf you agree I will force-push it here and merge.\r\n\r\n~~PS: I also noticed I \"stole\" a commit (3099ccafa9c93ebdbdf653edca811f644070903b) from you... I will fix that ASAP.~~"},{"author":"ggonthier","date":"2019-04-01T15:39:04Z","comment":"   @CohenCyril everything looks fine to me now; you're clear to push, and merge after CI passes."},{"author":"ejgallego","date":"2019-04-01T19:26:38Z","comment":"That seems to have created havoc in at least fcsl-pcm https://gitlab.com/coq/coq/-/jobs/188314263"},{"author":"ggonthier","date":"2019-04-01T22:39:41Z","comment":"@ejgallego this is a documented incompatibility: due to the change of representation `fgraph` is no longer be a field accessor, nor a `subType` projector. The failing lemma at the end of `heap.v` can no longer be proved by brute force `destruct`, nor as an instance of `val_inj` (as would have been the proper way to prove it). It can now easily be proved as `can_inj fgraphK`, but if one a proof compatible with all versions, this should be used:\r\n```\r\nby move=> eq_r12; apply/ffunP=> x; rewrite -[x]enum_rankK -!tnth_fgraph eq_r12.\r\n```\r\n@anton-trunov would either be acceptable? Alternatively, we could reinstate the `fgraph` `subType` structure on non-dependent finfuns, so `val_inj` could be used throughout. This would have to be deprecated, though, as the `eqType` structure will not be compatible."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"erikmd","number":292,"state":"closed","open_date":"2019-02-27T17:29:28Z","update_date":"2019-04-16T00:04:43Z","discussion":[{"author":"erikmd","date":"2019-03-19T22:54:30Z","comment":"@CohenCyril thanks for your remark! I've edited the two `Arguments` lines as you suggested (and I also edited the line for `eq_mx` as it also seemed better for consistency).\r\nI force-pushed a new commit (after rebasing on `master` even if it wasn't strictly necessary…)"},{"author":"erikmd","date":"2019-03-29T10:57:10Z","comment":"Hi @CohenCyril! as you had not tagged this PR with the 1.8.0 milestone, I wanted to ask whether you think this could be shipped with the next MC release?"},{"author":"CohenCyril","date":"2019-03-29T12:07:48Z","comment":"@erikmd this answers your question"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":291,"state":"closed","open_date":"2019-02-27T09:00:20Z","update_date":"2020-01-01T11:08:13Z","discussion":[{"author":"CohenCyril","date":"2019-02-28T13:29:07Z","comment":"This is blocking for the next release, @CohenCyril  when do you think you will have time to look at it?"},{"author":"CohenCyril","date":"2019-03-14T15:19:56Z","comment":"@pi8027 I will review this 1st of April."},{"author":"pi8027","date":"2019-04-02T15:40:03Z","comment":"@CohenCyril Fortunately, the first 2 cases seem to be fixed in #270."},{"author":"pi8027","date":"2019-04-02T18:56:16Z","comment":"@CohenCyril I have fixed all the other inheritances you indicated. I prefer to merge this without fixing ssrnum, rebase #270 on top of it, and see which inheritances are broken."},{"author":"CohenCyril","date":"2019-04-02T22:24:27Z","comment":"Dear @pi8027, PR #270 will probably not make it to 1.8.0 but rather 1.9.0... so I would rather see the two joins in ssrnum fixed in this PR (#291) so that we can merge and release 1.8.0 asap."},{"author":"pi8027","date":"2019-04-03T08:08:03Z","comment":"@CohenCyril Fixed. I made a commit separately to make it easy to revert 7ab5c99 and rebase #270 later."},{"author":"CohenCyril","date":"2019-04-03T08:48:57Z","comment":"> @CohenCyril Fixed. I made a commit separately to make it easy to revert [7ab5c99](https://github.com/math-comp/math-comp/commit/7ab5c99ab4c2ecfd55702a4279392f067652e357) and rebase #270 later.\r\n\r\nvery good idea!"}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"pi8027","number":290,"state":"closed","open_date":"2019-02-22T14:38:27Z","update_date":"2019-03-22T13:25:35Z","discussion":[{"author":"pi8027","date":"2019-02-22T16:47:25Z","comment":"I have reimplemented this by using the information of coercion paths between `<module>.type` types. This one works fine.\r\n\r\nOutput: [hierarchy.pdf](https://github.com/math-comp/math-comp/files/2894903/hierarchy.pdf)\r\n"},{"author":"pi8027","date":"2019-02-22T17:01:50Z","comment":"I found that some inheritances are missing (e.g., ~~`FinGroup` -> `Finite`,~~ `FinRing.Zmodule` -> `CountRing.Zmodule`), or... did I misunderstand something?"},{"author":"pi8027","date":"2019-02-25T13:17:34Z","comment":"The edge from `FinGroup` to `Finite` was removed because of my mistake. I found a way to generate a similar diagram from canonical projections. So I will try to improve this as a checking tool detecting missing coercions and canonical projections. @CohenCyril "},{"author":"pi8027","date":"2019-02-25T15:42:34Z","comment":"Red and blue edges are coercions and canonical projections respectively. Canonical projections of join and indirect inheritances are eliminated. Output: [hierarchy.pdf](https://github.com/math-comp/math-comp/files/2901208/hierarchy.pdf)\r\n\r\nThe red edge from `FinRing.Field` to `GRing.DecidableField` seems to be not an inheritance. So checking exhaustiveness of coercions and canonical projections of join by using canonical projections of inheritances would be the right way to implement a checking tool."},{"author":"amahboubi","date":"2019-02-28T14:13:16Z","comment":"This is a great tool, thanks a lot! I guess a short documentation would be useful (e.g. your initial comment). But I do not know what is the appropriate place for this. May be a README.dev ? Or a wiki pages for the tools in the util directory? This is more a question for us I guess, @gares ? @CohenCyril ?"},{"author":"gares","date":"2019-03-04T13:31:42Z","comment":"I agree with @amahboubi it needs some doc.\r\nIMHO you could put a `usage { cat <<EOT .... EOT }` function at the beginning of the file, and if one passes `-h|--help` call this function and exit. The body of the function could contain the PR header, roughly. In this way the doc is on top of the file, if you open it with an editor, and also printed if you pass `-h`."},{"author":"pi8027","date":"2019-03-07T11:38:06Z","comment":"I have resumed this work today. Are there any desirable command line options to control output, e.g., direction, color, disabling coercion edges, libraries to `Require Import`?"},{"author":"amahboubi","date":"2019-03-07T11:57:30Z","comment":"I would say that control of the list of imported libraries would be an important feature. How would you be able to filter coercion edges? by full name? name pattern? type?"},{"author":"pi8027","date":"2019-03-07T12:06:58Z","comment":"@amahboubi I have no good idea on how to filter out some structures and edges. But an option to specify libraries instead of `all.all` can be easily implemented."},{"author":"amahboubi","date":"2019-03-07T12:20:19Z","comment":"That would be great! It would also make the tool of a more general interest than just Mathcomp."},{"author":"pi8027","date":"2019-03-07T16:20:13Z","comment":"I finished to put doc and some options to control output. I changed the direction of edges to make them the same as Fig. 3 of \"Packaging Mathematical Structures\". Examples:\r\n\r\n<pre>\r\n$ ./etc/utils/hierarchy-diagram -canonicals blue -coercions off -R mathcomp mathcomp \\\r\n    -lib ssreflect.all_ssreflect -lib fingroup.all_fingroup -lib algebra.all_algebra \\\r\n  | dot -Tpdf -o <a href=\"https://github.com/math-comp/math-comp/files/2942171/algebra-hierarchy.pdf\">algebra-hierarchy.pdf</a>\r\n$ ./etc/utils/hierarchy-diagram -canonicals blue -coercions red -R mathcomp mathcomp \\\r\n  | dot -Tpdf -o <a href=\"https://github.com/math-comp/math-comp/files/2942172/all-hierarchy.pdf\">all-hierarchy.pdf</a>\r\n</pre>\r\n\r\nI did some ad-hoc things on this utility by assuming some conventions to package mathematical structures in MathComp. Outputs might be easily broken by misimplementation of new structures. A better implementation may be obtained as a plugin. But this is useful enough as it is."},{"author":"CohenCyril","date":"2019-03-19T09:41:06Z","comment":"@gares and @amahboubi happy with the current state?"},{"author":"amahboubi","date":"2019-03-19T09:44:31Z","comment":"I will not have time to review this thoroughly before next week. But I think that merging as is will not hurt so I am fine with it. "}],"tags":[{"tag":"kind: tool","description":"Issue or PR about a tool. (e.g. packager or hierarchy_diagram)"}],"pull_requests":[]},{"author":"pi8027","number":288,"state":"closed","open_date":"2019-02-19T10:07:39Z","update_date":"2019-02-28T10:04:40Z","discussion":[{"author":"pi8027","date":"2019-02-21T16:07:10Z","comment":"I found some fields of the above mixins are not necessary."},{"author":"pi8027","date":"2019-02-21T16:47:01Z","comment":"I have removed the unnecessary fields and added `min`/`max` notations."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":287,"state":"closed","open_date":"2019-02-14T15:54:36Z","update_date":"2019-02-14T21:04:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":286,"state":"closed","open_date":"2019-02-14T15:23:46Z","update_date":"2019-02-15T13:41:06Z","discussion":[{"author":"pi8027","date":"2019-02-14T15:51:54Z","comment":"I think that CI will fail but wait for the result..."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":285,"state":"closed","open_date":"2019-02-14T09:59:59Z","update_date":"2019-02-14T11:54:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":283,"state":"closed","open_date":"2019-02-11T12:49:39Z","update_date":"2019-02-12T17:22:54Z","discussion":[{"author":"pi8027","date":"2019-02-12T14:04:50Z","comment":"@CohenCyril This is ready to merge. Maybe I made algC.v slower than the original one."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":282,"state":"closed","open_date":"2019-02-08T09:52:12Z","update_date":"2019-02-08T15:06:34Z","discussion":[{"author":"pi8027","date":"2019-02-08T10:03:15Z","comment":"Oh, I made more conflicts but some of them seem to have no difference... I don't understand what happened. :("},{"author":"pi8027","date":"2019-02-08T10:10:04Z","comment":"I reverted the last commit that fixes interval.v. The conflicts have decreased to one. I know how to resolve this."},{"author":"pi8027","date":"2019-02-08T10:23:46Z","comment":"I made a merge commit when I try to resolve this conflict on the web interface... So can you simply check out `pi8027:experiment/order` and `push --force` it to `math-comp:experiment/order`, or can you try to rebase `math-comp:experiment/order` on top of `math-comp:master` by resolving the conflict as follows? @CohenCyril\r\n\r\n```\r\nLemma ltr_add2l x : {mono +%R x : y z / y < z}.\r\nProof. by move=> y z /=; rewrite (leW_mono (ler_add2l _)). Qed.\r\n\r\nLemma ltr_add2r x : {mono +%R^~ x : y z / y < z}.\r\nProof. by move=> y z /=; rewrite (leW_mono (ler_add2r _)). Qed.\r\n```"},{"author":"pi8027","date":"2019-02-08T15:06:34Z","comment":"Thank you!"}],"tags":[{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."}],"pull_requests":[]},{"author":"Sobernard","number":281,"state":"open","open_date":"2019-02-07T14:34:09Z","update_date":"2021-05-19T08:20:59Z","discussion":[{"author":"CohenCyril","date":"2019-02-07T14:44:18Z","comment":"Can you add TODO boxes ([ ]) and include a ChangeLog entry (or a TODO for it)"},{"author":"amahboubi","date":"2019-07-10T11:40:05Z","comment":"@CohenCyril, @gares I do not understand the output of CI here. Can someone explain?"},{"author":"gares","date":"2019-07-10T19:47:05Z","comment":"Looks like this pr is based on a broken ssrnum, or it introduces a notation that breaks the parser for ssrnum. I don't have time to check the details but the failure is not spurious to me."},{"author":"pi8027","date":"2019-09-30T13:55:05Z","comment":"@Sobernard @CohenCyril @amahboubi Hello. I found this PR is useful for my study on intervals and QE. If you don't plan to rebase and fix this, may I rebase this on top of #270? (I intend to do it in November or December.)"},{"author":"amahboubi","date":"2019-09-30T14:03:56Z","comment":"Hi @pi8027 . I personally have no plans to fix / modify this. I guess @Sobernard, the original author, is the one to contact. @Sobernard , if we do not hear from you before the end of October, we will take ownership of the PR. But feel free to tell us so if you want to work on it, and need more time!"},{"author":"pi8027","date":"2020-11-04T09:41:43Z","comment":"Just not to forget to rework this PR, I assign myself."},{"author":"pi8027","date":"2020-12-03T19:25:42Z","comment":"Now I'm reworking this PR. I guess one of `NumArchiClosedField` and `RealClosedArchiField` should be renamed (`ArchiClosed` or `ClosedArchi`?). *EDIT: these \"closed\" stand for different notions of closedness so probably OK. But then, this difference should be made clear in the header. I'm not sure if \"Archimedean closed field\" means \"algebraically closed field with \r\nthe Archimedean axiom\" in the usual mathematical convention. Also, \"Archimedean ... with an order and a norm\" does not make much sense to me since the Archimedean property requires an underlying order.*\r\nAlso putting `Archi` somewhere between `RealClosedField` is a bit unfortunate since it does not allow us to abbreviate it as `rcf`."},{"author":"CohenCyril","date":"2020-12-03T20:34:37Z","comment":"I guess it should be `ArchiNumClosedField` and `ArchiRealClosedField` (the abbrev could be `archiRcf`)"},{"author":"CohenCyril","date":"2020-12-03T20:39:43Z","comment":"Although these are two \"distinct notion of closeness\" they are very related, indeed `is_real_closed R <-> is_algebraically_closed R[i]` (the left to right direction is proven in `complex.v` and the other direction must be trivial). And conversely I believe `is_algebraically_closed C <-> is_real_closed {x : C | x \\is a Num.real}` should be straightforward if one shows `C` and `{x : C | x \\is a Num.real}[i]` is a `numField` isomorphism..."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":280,"state":"closed","open_date":"2019-02-07T10:23:32Z","update_date":"2019-02-07T19:49:36Z","discussion":[{"author":"pi8027","date":"2019-02-07T13:37:26Z","comment":"I also reactivated the ordering notations in `ring_scope` to solve some technical issues."},{"author":"CohenCyril","date":"2019-02-07T15:34:54Z","comment":"should I merge into #270 now?"},{"author":"pi8027","date":"2019-02-07T15:58:38Z","comment":"@CohenCyril The problem of subterm selections in `rewrite` isn't solved yet. If it is acceptable, please merge."},{"author":"CohenCyril","date":"2019-02-07T16:02:54Z","comment":"> @CohenCyril The problem of subterm selections in `rewrite` isn't solved yet. If it is acceptable, please merge.\r\n\r\nok, then please use a pattern `[X in X && _]` instead of names."},{"author":"pi8027","date":"2019-02-07T16:22:32Z","comment":"@CohenCyril I did. The problem appears the above 3 places."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":278,"state":"closed","open_date":"2019-02-05T14:07:16Z","update_date":"2019-02-05T14:38:39Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"MrSet","number":277,"state":"closed","open_date":"2019-02-05T14:04:44Z","update_date":"2019-03-22T13:24:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gares","number":275,"state":"closed","open_date":"2019-01-30T17:03:01Z","update_date":"2019-03-22T13:23:47Z","discussion":[{"author":"gares","date":"2019-01-31T10:06:37Z","comment":"I don't know what went wrong in CI and I don't have the rights to restart jobs. (can I get these)?"},{"author":"CohenCyril","date":"2019-02-01T01:10:35Z","comment":"@gares what is you gitlab.com username?"},{"author":"gares","date":"2019-02-01T07:27:15Z","comment":"Gares-gl iirc"},{"author":"erikmd","date":"2019-02-02T17:49:45Z","comment":"@gares, indeed the `make-coq-latest` job had failed and it seems a spurious failure as the \"main\" jobs `coq-{8.6,8.7,8.8,8.9,dev}` were ok.\r\n@CohenCyril will add you to the gitlab, and in the meantime I have re-triggered the pipeline from the page https://gitlab.com/math-comp/math-comp/pipelines (hopefully this will not only retry the failing job but also the second stage of the pipeline)"}],"tags":[],"pull_requests":[]},{"author":"gares","number":274,"state":"closed","open_date":"2019-01-30T15:22:49Z","update_date":"2019-03-22T13:23:41Z","discussion":[{"author":"gares","date":"2019-01-30T16:35:49Z","comment":"done, dot added (I guess it should be squashed when merged, so that only 1 commit is visible)"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":273,"state":"closed","open_date":"2019-01-29T12:56:18Z","update_date":"2019-03-22T13:23:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"erikmd","number":272,"state":"closed","open_date":"2019-01-28T17:34:47Z","update_date":"2019-03-22T13:23:29Z","discussion":[{"author":"erikmd","date":"2019-01-28T18:46:31Z","comment":"Hi @Zimmi48, it seems that **coqbot**'s report is working only for the pipeline itself, not for the individual jobs: IINM the report of the jobs should appear only if there is a job failing (?) and as soon as a job has failed; [which is the case](https://gitlab.com/math-comp/math-comp/-/jobs/152381492) − because I have forgotten the code below in the `.yml`:\r\n```\r\ncoq-8.9:\r\n  extends: .opam-build\r\n```\r\n\r\nThis jobs-reporting feature was working in #270 however… do you have an idea of the source of that issue?\r\nFYI here is a screenshot of the webhooks integration config:\r\n\r\n![2019-01-28_19-17-04_screenshot_webhooks](https://user-images.githubusercontent.com/10367254/51858448-0c69a600-2335-11e9-9440-ef707d1e42a8.png)\r\n\r\n…I don't know if this a known bug, or if I should just remove the job webhook, and add it again?"},{"author":"Zimmi48","date":"2019-01-28T21:12:30Z","comment":"@erikmd There are a few exceptions to the failures that are reported. Docker image not found is among them because it often corresponds to an outdated job whose image has been deleted. If you find this problematic, I could change that..."},{"author":"erikmd","date":"2019-01-28T21:33:58Z","comment":"@Zimmi48 OK thanks for your reply! I was not aware that **coqbot** was filtering-out the job reports depending on the failures' type.\r\n\r\nOn the one hand, I find it very convenient that individual job successes don't lead to a report (in order to avoid cluttering the PR summary) but indeed on the other hand, the fact that only `script` failures are reported is not that intuitive IMHO: adding a report for all job failures could be handy to always have a nice *shortcut* to the corresponding log… (if it's not too much work for implementing this).\r\n\r\nAnyway, if you think that changing this would have a negative impact on the workflow you are relying on in `coq` CI, forget about it!"},{"author":"Zimmi48","date":"2019-01-29T08:04:20Z","comment":">if it's not too much work for implementing this\r\n\r\nIt's not. In fact, it's more work to do the filtering. The issue, as shown by the message of the commit which introduced it, was rather to avoid creating noise (https://github.com/coq/bot/commit/e09800677c99cd15417a31d8fb19b8ab36faefe0). But there is no reason why this should impact you negatively. I've just made this condition specific to Coq (https://github.com/coq/bot/commit/488385c4172771ba5ac27296e33b2725649b844e)."},{"author":"erikmd","date":"2019-01-29T15:00:57Z","comment":"> there is no reason why this should impact you negatively. I've just made this condition specific to Coq.\r\n\r\nGreat! Thank you @Zimmi48! and thanks @CohenCyril for the merge."}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":271,"state":"closed","open_date":"2019-01-21T15:16:50Z","update_date":"2019-03-22T13:23:23Z","discussion":[{"author":"CohenCyril","date":"2019-01-29T12:36:09Z","comment":"@pi8027 please first squash your PR, then rebase on top of master."},{"author":"pi8027","date":"2019-01-29T14:25:46Z","comment":"@CohenCyril I did."},{"author":"pi8027","date":"2019-02-07T09:43:28Z","comment":"@CohenCyril I fixed this as you requested. Could you please check this and merge today if there is no problem? I also need to fix interval.v in #270 and such the changes would conflict with this one..."},{"author":"pi8027","date":"2019-02-07T15:46:17Z","comment":"@CohenCyril Thank you for the response. I tried to fix as you requested but didn't get satisfactory results on the following lemmas. I need to do some trial and error and think that the first one can be elegantly proved if `orderType` instances for `itv_bound` are provided. So may I contribute them as another PR after we finished #270?\r\n\r\n```\r\nLemma itv_intersectionE (x : R) (i1 i2 : interval R) :\r\n  x \\in itv_intersection i1 i2 = (x \\in i1) && (x \\in i2).\r\n\r\nLemma itv_intersection3E (i1 i2 i3 : interval R) :\r\n  exists x y, pred3 i1 i2 i3 x /\\ pred3 i1 i2 i3 y /\\\r\n              itv_intersection i1 (itv_intersection i2 i3) =\r\n              itv_intersection x y.\r\n```\r\n\r\nYour comment on the statement of `itv_intersection3E` looks good to me. I'd like to try that. :)"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":270,"state":"closed","open_date":"2019-01-18T17:08:16Z","update_date":"2020-08-27T17:12:03Z","discussion":[{"author":"Zimmi48","date":"2019-01-18T19:11:23Z","comment":"@erikmd or @CohenCyril to avoid the duplicate status checks, you can disable the GitHub integration in \"Settings\" / \"Integration\" in the GitLab repo."},{"author":"erikmd","date":"2019-01-18T19:13:02Z","comment":"Hi @Zimmi48, indeed I realized a couple of minutes ago that I had forgotten to disable the \"native GitLab/GitHub integration\" for branches reporting as it is now unnecessary given @coqbot's help. This is now done.\r\nThanks!"},{"author":"erikmd","date":"2019-01-18T19:34:35Z","comment":"Finally regarding Travis, [the script run by Travis CI](https://github.com/math-comp/math-comp/blob/b0ef24be9fe47abbcc2c82e668091d4b32283c8b/.travis.yml#L41-L43) is very similar as [the one](https://github.com/math-comp/math-comp/blob/b0ef24be9fe47abbcc2c82e668091d4b32283c8b/Dockerfile.make#L26-L29) run by [this GitLab CI job](https://github.com/math-comp/math-comp/blob/b0ef24be9fe47abbcc2c82e668091d4b32283c8b/.gitlab-ci.yml#L85), so maybe it's not worth it to also rely on Travis for each CI build?  @CohenCyril what do you think?\r\n− I guess the URL to configure this is [that one](https://travis-ci.org/math-comp/math-comp/settings).\r\nKind regards, Erik"},{"author":"pi8027","date":"2019-01-22T18:05:04Z","comment":"Hi @CohenCyril, I had some progress on this PR. I need your help to fix `realDomainType`. Is `real_axiom` equivalent to the totality of `ler` for any `numDomainType`? If it is, should `realDomainType` be coercible to `orderType`? https://github.com/math-comp/math-comp/compare/experiment/order...pi8027:b7ff2ca"},{"author":"CohenCyril","date":"2019-01-23T10:19:13Z","comment":"Hi @pi8027, yes, this is equivalent to totality of the order relation. So there is a bit of restructuring to do.\r\nSo the class of `realDomainType` should include a mixin of totality from `order.v`. And the axiom `real_axiom` should not, but there should be a coercion from real_axiom to totality (which might require a repackaging of totality in its own record)."},{"author":"pi8027","date":"2019-01-24T15:48:53Z","comment":"Progress report: I have fixed all the structures in `ssrnum` and added all the missing coercions and canonical projections if my understanding is correct. I haven't ported `normedModType` and `NumDomain.pack` is still broken. https://github.com/math-comp/math-comp/compare/experiment/order...pi8027:978f25a"},{"author":"pi8027","date":"2019-01-31T16:15:48Z","comment":"@CohenCyril I finished to port `normedModType` but the following statement doesn't seem to be held.\r\n```\r\nLemma normr0 (R : numDomainType) (V : normedModType R) : `|0 : V| = 0.\r\n```\r\n\r\nA change for the 3rd axiom of `NormedModule.mixin_of` as follows would be needed. How do you think? https://github.com/math-comp/math-comp/compare/experiment/order...70250a5\r\n\r\n```\r\n  _ : forall x : T, (norm x == 0) = (x == 0)}.\r\n```"},{"author":"CohenCyril","date":"2019-02-01T01:09:40Z","comment":"@pi8027 no, unless I'm mistaken, since `0 <= 0`, we have that `'|0 : R| = 0` (by the last axiom of `numDomainType`) and then `'|0 : V| = '|0 *: 0| = '|0 : R| * '|0 : V|` using the 2nd axiom of `normedModType` and you should be done."},{"author":"pi8027","date":"2019-02-01T09:46:37Z","comment":"@CohenCyril I did it. Thank you!"},{"author":"pi8027","date":"2019-02-02T22:08:07Z","comment":"@CohenCyril I have a problem with canonical structures. I think that `F : numFieldType` should be coercible to `normedModType F` but it isn't. So `rewrite normr_eq0` and `rewrite (@normr_eq0 F F)` fail for `numFieldType`s. https://github.com/pi8027/math-comp/blob/ecb6dc515f9e0def5d541738270c1ba0c79d0afb/mathcomp/algebra/ssrnum.v#L3453\r\n\r\nI might have made a mistake on the definition of the canonical `normedModtype` instance of `numDomainType`. https://github.com/pi8027/math-comp/blob/ecb6dc515f9e0def5d541738270c1ba0c79d0afb/mathcomp/algebra/ssrnum.v#L1071"},{"author":"CohenCyril","date":"2019-02-04T10:18:48Z","comment":"@pi8027 In fact, there should be both coercions and canonical structures for each of the following structures: `numDomainType`, `numFieldType`, `realDomainType`, `realFieldType`, `archiRealType`, `rcfType` and `numClosedFieldType`."},{"author":"pi8027","date":"2019-02-06T17:02:26Z","comment":"I have written a compatibility module for `ssrnum` and attempted to fix `ssrint` with use of that module, but failed at [here](https://github.com/pi8027/math-comp/blob/1a89b19fd8ba5719c8a0563c616f32d5b08b89f4/mathcomp/algebra/ssrint.v#L1556) with the following error message:\r\n```\r\nError:\r\nIn nested Ltac calls to \"by (ssrhintarg)\", \"case (ssrcasearg) (ssrclauses)\" and\r\n\"(normrN m)\", last term evaluation failed.\r\nIn environment\r\nm : int\r\nThe term \"m\" has type \"int\" while it is expected to have type \"Num.NormedModule.sort ?V\".\r\n```\r\n\r\nThe type of `normrN` is:\r\n```\r\nnormrN\r\n     : forall (R : numDomainType) (V : normedModType R) (v : V), `|- v|%R = `|v|%R\r\n```\r\n\r\nIs this kind of rewriting by `normedModType` related lemmas for concrete instances succeed in the analysis library? I didn't find examples..."},{"author":"thery","date":"2019-02-06T17:39:09Z","comment":"@pi8027  \r\nLooks like the canonical mechanism is not able to lift an int into a Num.NormedModule.sort\r\nIf you  do \r\nPrint Canonical Projections.\r\ncan you see your int_normedModType?"},{"author":"pi8027","date":"2019-02-06T18:49:21Z","comment":"@thery You seem to be right. I saw the following line in the result of `Print Canonical Projections`. There is no other line including `int_normedModType`.\r\n```\r\nNum.NumDomain.sort <- Num.NormedModule.sort ( int_normedModType )\r\n```\r\n\r\nI have not understood how to fix this yet."},{"author":"CohenCyril","date":"2019-02-07T00:27:57Z","comment":"@pi8027 you need to use the `NormedModType` packager with explicit argument `int`, otherwise you won't get the right head symbol for the projection `Num.NormedModule.sort`. (Btw you need canonicals for `normedType` and `lmodType` as well)"},{"author":"thery","date":"2019-02-07T08:12:30Z","comment":"@pi8027 canonical structures are some kind of black magic. It would be nice to automate in some way all this boilerplate."},{"author":"pi8027","date":"2019-02-07T08:12:53Z","comment":"@CohenCyril Thank you. It was solved!"},{"author":"pi8027","date":"2019-02-07T09:34:23Z","comment":"@thery Yes, indeed. I need such the mechanism. :D"},{"author":"pi8027","date":"2019-02-11T14:39:53Z","comment":"I found the following problem:\r\n\r\nThe lemma `normr_ge0` is added to the hint database `core`. But it was sometimes not applied by `done` tactic when I need it because the goal doesn't syntactically match to the conclusion of the hint. This has appeared in #283.\r\n```\r\nnormr_ge0 : forall (R : numDomainType) (V : normedModType R) (v : V), 0 <= `|v|\r\n```\r\n"},{"author":"CohenCyril","date":"2019-02-12T17:23:33Z","comment":"> The lemma `normr_ge0` is added to the hint database `core`. But it was sometimes not applied by `done` tactic when I need it because the goal doesn't syntactically match to the conclusion of the hint. This has appeared in #283.\r\n\r\nHi! do you still have this problem?"},{"author":"pi8027","date":"2019-02-12T18:12:41Z","comment":"@CohenCyril Yes. Sometimes I need to put `?normr_ge0` before `//` in rewrite tactic."},{"author":"CohenCyril","date":"2019-02-14T09:59:10Z","comment":"> @CohenCyril Yes. Sometimes I need to put `?normr_ge0` before `//` in rewrite tactic.\r\n\r\nTry `Hint Extern 0 (is_true (0%R <= _)%O) => now (apply: normr_ge0) : core`"},{"author":"pi8027","date":"2019-02-14T10:33:54Z","comment":"@CohenCyril It does work well. Thank you!"},{"author":"CohenCyril","date":"2019-02-14T14:53:27Z","comment":"Could you export the compatibility module, just to check whether it suffices to make fourcolor and odd-order compile?"},{"author":"pi8027","date":"2019-02-14T15:45:37Z","comment":"@CohenCyril OK. I'm checking it in #286."},{"author":"pi8027","date":"2019-02-14T17:03:41Z","comment":"We have almost finished this PR and so is it time to check some missing things and TODOs? My concern is as follows:\r\n- `min` and `max` notations for `orderType`s would be needed (`meet` and `join` is a bit confusing in this case...),\r\n- naming of the following lemmas needs review: `(le|lt|lte)(xI|Ix|xU|Ux)`, `leIx_total`, and `lexU_total` in order.v,\r\n- the subterm selection problem in rewriting (see also #280),\r\n- I haven't understood the intents of some comments in ssrnum."},{"author":"CohenCyril","date":"2019-02-15T14:49:40Z","comment":"> * `min` and `max` notations for `orderType`s would be needed (`meet` and `join` is a bit confusing in this case...),\r\n\r\nI totally agree! Let us put them both in the `total_display` (to be defined)\r\n\r\n> * naming of the following lemmas needs review: `(le|lt|lte)(xI|Ix|xU|Ux)`, `leIx_total`, and `lexU_total` in order.v,\r\n\r\nI suggest:\r\n```coq\r\nLemma gel_leIx x y z : y <= x -> y `&` z <= x.\r\nLemma ger_leIx x y z : z <= x -> y `&` z <= x.\r\nLemma ge_leIx x y z : (y <= x) || (z <= x) -> y `&` z <= x.\r\nLemma leIx x y z : (y `&` z <= x) = (y <= x) || (z <= x).\r\n```\r\nand the \"same\" for `U`\r\n\r\n"},{"author":"CohenCyril","date":"2019-02-15T14:50:58Z","comment":"> I suggest:\r\n> \r\n> ```coq\r\n> Lemma gel_leIx x y z : y <= x -> y `&` z <= x.\r\n> Lemma ger_leIx x y z : z <= x -> y `&` z <= x.\r\n> Lemma ge_leIx x y z : (y <= x) || (z <= x) -> y `&` z <= x.\r\n> ```\r\n\r\nor maybe \r\n\r\n```coq\r\nLemma leIxl x y z : y <= x -> y `&` z <= x.\r\nLemma leIxr x y z : z <= x -> y `&` z <= x.\r\nLemma leIx2 x y z : (y <= x) || (z <= x) -> y `&` z <= x.\r\n```\r\n\r\n"},{"author":"pi8027","date":"2019-02-15T14:53:36Z","comment":"@CohenCyril I prefer `leIx(l|r|2)`. Thanks!"},{"author":"pi8027","date":"2019-02-15T16:18:28Z","comment":"@CohenCyril `fin*Type`s in order.v are undocumented. Should `finLatticeType`s have canonical `tblatticeType` instances? (top = join of all the elements, bottom = meet of all the elements. I'm not sure.)"},{"author":"pi8027","date":"2019-02-19T10:16:43Z","comment":"The remaining work would be only min and max notations if PR #288 is successfully merged."},{"author":"pi8027","date":"2019-02-25T17:42:22Z","comment":"The problem mentioned in the above review breaks my tool for drawing the hierarchy diagram (#290). But somehow I succeed to generate the correct hierarchy diagram. This diagram would be useful to make this development comprehensible: [hierarchy.pdf](https://github.com/math-comp/math-comp/files/2904785/hierarchy.pdf) (updated on Feb. 26).\r\n\r\n"},{"author":"pi8027","date":"2019-03-06T11:36:31Z","comment":"I'm trying to update the documentation of order and ssrnum. Why `NumClosedField` appears twice in the documentation of ssrnum? Which one is correct?"},{"author":"CohenCyril","date":"2019-03-06T14:48:12Z","comment":"> I'm trying to update the documentation of order and ssrnum. Why `NumClosedField` appears twice in the documentation of ssrnum? Which one is correct?\r\n\r\n:laughing: the one line 31 is incorrect."},{"author":"pi8027","date":"2019-03-18T14:53:48Z","comment":"I have no more things to do on this PR now; it is ready for review. CI failure of lemma-overloading seems irrelevant."},{"author":"pi8027","date":"2019-04-08T16:18:38Z","comment":"I will rebase this tomorrow. Some inheritance bugs might be found. (see #318)"},{"author":"pi8027","date":"2019-04-11T15:03:15Z","comment":"I have attempted to add an inheritance from `numDomainType` to `unitAlgType` by following some discussions with @CohenCyril . Now `algC.v` has a performance problem (compilation is very slow), and the join of `algType` and `comRingType` isn't unique: `numDomainType` and `fieldExtType`. [hierarchy.pdf](https://github.com/math-comp/math-comp/files/3069257/hierarchy.pdf)\r\n\r\nRedefining `idomainType` as the join of `comUnitRing` and `unitAlgType` might solve the second issue."},{"author":"CohenCyril","date":"2019-04-11T15:15:17Z","comment":"> Redefining `idomainType` as the join of `comUnitRing` and `unitAlgType` might solve the second issue.\r\n\r\nthis is option is not desirable"},{"author":"ggonthier","date":"2019-04-11T15:33:50Z","comment":"None of these are desirable; there's a reason the regular module structure on rings is only inferred for a specific tag, and the linear structure does _not_ require a module structure on its codomain."},{"author":"CohenCyril","date":"2019-04-12T18:28:44Z","comment":"@ggonthier \r\n> None of these are desirable; there's a reason the regular module structure on rings is only inferred for a specific tag, and the linear structure does _not_ require a module structure on its codomain.\r\n\r\nYes, yes, we decided to backtrack on that, and @pi8027 is now removing the inheritance of Lmodules everywhere. The common superstructure of `numDomainType` and `normedModule` (required in `math-comp/analysis`, but not anymore in `math-comp/math-comp`) will be a `NormedDomain`.\r\n\r\nBtw @pi8027, I believe that with `NormedDomain` there is no more need for the axiomless `Norm` structure, so you may remove it."},{"author":"CohenCyril","date":"2019-04-12T18:35:13Z","comment":"@thery \r\n> @pi8027 canonical structures are some kind of black magic. It would be nice to automate in some way all this boilerplate.\r\n\r\nwe are on it, and we have some ideas to make sure our users are less impacted by hierarchy refactorings than before, by providing systematic higher level blocks (factories, independent of the hierarchy, **public**) that are independent of basic blocks (mixins, dependent on the specific way the hierarchy is generated, **private**)."},{"author":"pi8027","date":"2019-04-16T13:38:38Z","comment":"Removing the `norm_scale` axiom from `NormedDomain` breaks some properties (e.g., `normr0`, `normrN`, `normr_id`). The following axioms might be needed.\r\n```\r\n  _ : forall n x, norm (x *+ n) = norm x *+ n;\r\n  _ : forall x, norm (- x) = norm x;\r\n```"},{"author":"CohenCyril","date":"2019-04-16T14:04:09Z","comment":"> Removing the `norm_scale` axiom from `NormedDomain` breaks some properties (e.g., `normr0`, `normrN`, `normr_id`). The following axioms might be needed.\r\n> \r\n> ```\r\n>   _ : forall n x, norm (x *+ n) = norm x *+ n;\r\n>   _ : forall x, norm (- x) = norm x;\r\n> ```\r\n\r\nyes!"},{"author":"pi8027","date":"2019-04-23T11:40:11Z","comment":"Remarks:\r\n- Now `[arg min_( i < n | P ) F]` and `[arg max_( i < n | P ) F]` notations are duplicated in `fintype.v` and `order.v`. We would need to make `fintype.v` and `bigop.v` depend on `order.v` and reshuffle some definitions and theorems to solve this duplication. This probably should be done in a separate PR.\r\n- Applying order related theorems (including `arg_minP` and `arg_maxP`) for `nat` requires rewriting by `leEnat` and `ltEnat`. Using overloaded ordering relation everywhere would solve this, but this may cause another difficulty because many proofs depend on that `(_ <= _)%N` and `(_ < _)%N` have the same head symbol `leq`...\r\n  ```coq\r\n  Lemma leEnat: le = leq.\r\n  Lemma ltEnat (n m : nat): (n < m) = (n < m)%N.\r\n  ```\r\n  I prefer to keep this as it is and to use `leEnat` and `ltEnat`."},{"author":"CohenCyril","date":"2019-04-23T15:59:28Z","comment":"> Remarks:\r\n> \r\n> * Now `[arg min_( i < n | P ) F]` and `[arg max_( i < n | P ) F]` notations are duplicated in `fintype.v` and `order.v`. We would need to make `fintype.v` and `bigop.v` depend on `order.v` and reshuffle some definitions and theorems to solve this duplication. This probably should be done in a separate PR.\r\n> * Applying order related theorems (including `arg_minP` and `arg_maxP`) for `nat` requires rewriting by `leEnat` and `ltEnat`. Using overloaded ordering relation everywhere would solve this, but this may cause another difficulty because many proofs depend on that `(_ <= _)%N` and `(_ < _)%N` have the same head symbol `leq`...\r\n>   ```coq\r\n>   Lemma leEnat: le = leq.\r\n>   Lemma ltEnat (n m : nat): (n < m) = (n < m)%N.\r\n>   ```\r\n>   \r\n>   \r\n>   I prefer to keep this as it is and to use `leEnat` and `ltEnat`.\r\n\r\n@pi8027 I think the theories of generic order on one side and `leq` on the other should be kept separate anyway. Hence we should/must have all the necessary duplicates, in the right scopes so as never to obtain a generic `le` or `lt` instead of a `leq` or `_ < _` by using the appropriate theorem in the library."},{"author":"pi8027","date":"2019-04-23T16:16:51Z","comment":"@CohenCyril Both polymorphic and monomorphic `arg_min`/`arg_max` notations should be defined in the `form_scope` (isn't it?). So it's not possible to use both notations selectively unless defining them with different keywords."},{"author":"pi8027","date":"2019-04-24T09:17:36Z","comment":"Using the polymorphic definitions and notations of `arg_min`/`arg_max` in both cases, deprecating monomorphic ones, and using the following lemmas in the case of `nat` might be a satisfactory solution.\r\n\r\n```coq\r\narg_minnP\r\n     : forall (I : finType) (i0 : I) (P : pred I) (F : I -> nat),\r\n       P i0 -> extremum_spec leq P F [arg min_(i < i0 | P i) F i]\r\narg_maxnP\r\n     : forall (I : finType) (i0 : I) (P : pred I) (F : I -> nat),\r\n       P i0 -> extremum_spec geq P F [arg max_(i > i0 | P i) F i]\r\n```"},{"author":"CohenCyril","date":"2019-05-15T08:54:51Z","comment":"@ggonthier do you see any objection for us to put `[arg min_(i < i0 | P i) F i]` both in the `nat_scope` and `order_scope` (depending on whether it is a `leq` or generic `le`), rather than only once in `form_scope`? The alternative is to rename the one for nat like this: `[arg minn_(i < i0 | P i) F i]`."},{"author":"ggonthier","date":"2019-05-15T10:02:51Z","comment":"No objections, @CohenCyril  - that seems a fairly natural overloading."},{"author":"pi8027","date":"2019-05-16T09:06:52Z","comment":"OK. So I will put `[arg (min|max)_...]` notations in `nat_scope`, `order_scope`, and `ring_scope`."},{"author":"pi8027","date":"2019-05-16T10:00:31Z","comment":"@CohenCyril Is this change fine? If it is, I will rebase and squash this and make use of `deprecate` notation in the compatibility module. https://github.com/pi8027/math-comp/commit/68c697174082268bbfe9c81d7bcdc9752c5fd088"},{"author":"CohenCyril","date":"2019-05-16T12:16:14Z","comment":"> @CohenCyril Is this change fine? If it is, I will rebase and squash this and make use of `deprecate` notation in the compatibility module. [pi8027@68c6971](https://github.com/pi8027/math-comp/commit/68c697174082268bbfe9c81d7bcdc9752c5fd088)\r\n\r\nLooks good to me."},{"author":"CohenCyril","date":"2019-06-13T17:19:14Z","comment":"@amahboubi @ggonthier @gares this PR is ready for review."},{"author":"CohenCyril","date":"2019-06-17T13:02:08Z","comment":"@amahboubi @ggonthier @gares I am currently fixing several issues in `order`, it should be finished by tomorrow."},{"author":"CohenCyril","date":"2019-06-18T08:20:28Z","comment":"Ok I fixed almost everything I spotted.\r\n\r\nBut, @ggonthier, @amahboubi, @thery, @gares, @LaurenceRideau, @pi8027  there is an issue for which I cannot take a light decision: `ltgtP` and `ltrgtP` do not follow the same structure as the `ltngtP` lemma from ssrnat:\r\nin `ltgtP` (and `ltrgtP`) lemma, the operators come in the following order `==`, `<=`, `<` while in `ltngtP` it is `<=`, `<` and `==`. For consistency they should be ordered in the same way, and thus there are now two options:\r\n1. For (more) backward compatibility they should be in the order  [`<=`, `<`, `==`] (as in `ltngtP`),\r\n2. but for the sake of intuition as noted by @thery and @gares in #233 it should rather be [`==`, `<=`, `<`] everywhere (as in `ltgtP`) because the last item is matched first. I think I a missing a part of the history of the lemma in order to take a decision.\r\n\r\nWhich of 1. and 2. would be best?\r\n\r\nAlso, in `leqP`, `leP` ..., operators are in the order `<=` first, and `<` while the same intuition as in the paragraph above would lead to think it should be the converse."},{"author":"gares","date":"2019-06-18T08:26:34Z","comment":"IMO 2 is best"},{"author":"pi8027","date":"2019-06-18T19:35:40Z","comment":"@CohenCyril It's worth trying the option 2."},{"author":"pi8027","date":"2019-08-28T08:48:27Z","comment":"I found that option 2 (reordering the type arguments of `ltngtP` to `[==, <=, <]`) doesn't break any libraries in CI other than fourcolor. We can provide a compatibility module so this is not so hard thing to do. (see #378)"},{"author":"pi8027","date":"2019-09-09T18:40:02Z","comment":"@amahboubi @ggonthier @gares @CohenCyril I think all the problems we found have been addressed. I have also patched fourcolor (math-comp/fourcolor#19), odd-order (math-comp/odd-order#17), and real-closed (math-comp/real-closed#16) without any use of the compatibility module. CI checks with these overlays have passed. So this PR is ready for review."},{"author":"CohenCyril","date":"2019-09-10T08:51:01Z","comment":"@amahboubi @ggonthier @gares @thery @LaurenceRideau @strub because of the size of the PR, the time it took to develop and the potential impact on the analysis library and other users, I would suggest of all mathcomp PR we give this one the highest priority for reviewing and integration. What do you think? If you have any question on how to proceed, you can tag, mail or call me to discuss it.\r\nBest wishes!"},{"author":"amahboubi","date":"2019-09-10T08:56:20Z","comment":"Hi @CohenCyril @pi8027! It is great to see this PR converging. In order to ease review and subsequent usage/documentation of the library, I suggest to have this PR as an item of our first mathcomp dev meeting of the year (I will send the message+poll today). It would be great to have a short presentation summarizing the previous issues and the solutions."},{"author":"amahboubi","date":"2019-09-16T08:50:29Z","comment":"@CohenCyril, I have unassigned you this PR, as it's no good practice to be at the same time main author and assignee."},{"author":"pi8027","date":"2019-09-25T11:52:09Z","comment":"There are two name conflicts of lemmas in `order.v`.\r\n```coq\r\nLocate lexUl.\r\nLocate lexUr.\r\n```\r\n```\r\nConstant mathcomp.ssreflect.order.Order.BLatticeTheory.lexUl\r\nConstant mathcomp.ssreflect.order.Order.LatticeTheoryJoin.lexUl\r\n  (shorter name to refer to it in current context is Order.LatticeTheoryJoin.lexUl)\r\n\r\nConstant mathcomp.ssreflect.order.Order.BLatticeTheory.lexUr\r\nConstant mathcomp.ssreflect.order.Order.LatticeTheoryJoin.lexUr\r\n  (shorter name to refer to it in current context is Order.LatticeTheoryJoin.lexUr)\r\n```\r\n~Symmetric ones of `Order.LatticeTheoryJoin.lexU(l|r)` are named `leIx(l|r)` so we probably should rename them to `leUx(l|r)`.~ Lemmas `Order.TBLatticeTheory.lexI(l|r)` are also wrongly named and should be `leIx(l|r)` by following the naming convention. But this change will introduce two more name conflicts. I think that lemmas `Order.BLatticeTheory.lexU(l|r)` and `Order.TBLatticeTheory.lexI(l|r)` should be renamed. I also wish to have a Coq plugin to detect name conflicts of imported unqualified names."},{"author":"affeldt-aist","date":"2019-10-02T12:22:05Z","comment":"TODO: in minr_l, minr_r, maxr_r, maxr_l (ssrnum.v), introduce lemmas to avoid (elimT ???) definitions"},{"author":"pi8027","date":"2019-10-04T15:31:00Z","comment":"[Note] I will do the following renamings to avoid the name conflicts of https://github.com/math-comp/math-comp/pull/270#issuecomment-534985132:\r\n- `Order.BLatticeTheory.lexUl` -> `disjoint_lexUl`,\r\n- `Order.BLatticeTheory.lexUr` -> `disjoint_lexUr`,\r\n- `Order.TBLatticeTheory.lexIl` -> `cover_leIxl`,\r\n- `Order.TBLatticeTheory.lexIr` -> `cover_leIxr`.\r\n\r\nIn a discussion happened today, I discovered that it would be nice to have the canonical `fin(C?)latticeType` instance of finsets ~(or fsets?)~. The above lemmas are lacking in `finset.v`. `set.v` seems to already implemented in this way, but I don't understand entirely yet."},{"author":"pi8027","date":"2019-10-16T08:43:11Z","comment":"> Hi @CohenCyril @pi8027! It is great to see this PR converging. In order to ease review and subsequent usage/documentation of the library, I suggest to have this PR as an item of our first mathcomp dev meeting of the year (I will send the message+poll today). It would be great to have a short presentation summarizing the previous issues and the solutions.\r\n\r\nHere is a summary of issues on the user side:\r\n- The subterm selection problem (typically in rewriting).\r\n  - Currently, we sometimes need to write patterns explicitly.\r\n- Since the type of norm function is now `forall (R : numDomainType) (V : normedZmodType R), V -> R`,\r\n  sometimes the type `V` cannot be inferred from context, e.g., `|0| = 0 :> R`.\r\n  - We need to put type annotations differently, e.g., `|0 : R| = 0`.\r\n\r\nIssues on the library side:\r\n- Hierarchy related issues\r\n  - Nonempty finite lattices always have bottom and top.\r\n    So we equated `fin(C)LatticeType`, `fin(C)BLatticeType`, and `fin(C)TBLatticeType`.\r\n  - Defining `normedModType` to inherit `lmodType` introduces an ambiguous join.\r\n    Now we redefined it as `normedZmodType` that inherit `zmodType` and is parameterized by `numDomainType`.\r\n    We cannot state some interactions between the norm and scale functions on that structure.\r\n  - Other several inheritance issues are solved by `hierarchy.ml`, which is now a part of CI.\r\n- Arguments ordering problem of comparison predicates, e.g., `ltngtP`.\r\n  - Will be separately addressed by #378.\r\n- `Hint Resolve` doesn't work to declare `normr_ge0` as a hint.\r\n  - Use `Hint Extern` instead.\r\n- Defining factories sometimes requires explicit record-eta expansion.\r\n\r\n(EDIT Oct 17)"},{"author":"CohenCyril","date":"2019-10-16T13:49:17Z","comment":"In addition, I edited the orignal post to try and input more high level explanations."},{"author":"amahboubi","date":"2019-10-16T14:16:46Z","comment":"@CohenCyril @pi8027 Thanks a lot, I think that what you added is very useful. "},{"author":"amahboubi","date":"2019-10-16T14:19:03Z","comment":"Can you elaborate on what\r\n> (which could be avoided by importing the compatibility module ssrnum.mc_1_9).\r\n\r\nmeans? Where is this compatibility module?"},{"author":"CohenCyril","date":"2019-10-16T14:27:17Z","comment":"> means? Where is this compatibility module?\r\n\r\nThe compatibility module is in `ssrnum.v` and may be used to recover part of an old set of  theorems, in order to facilitate migrations. The compatiblity module is not complete (especially wrt canonical instances) because it is technically impossible to my knowledge."},{"author":"amahboubi","date":"2019-10-18T09:04:46Z","comment":"> This work started by @CohenCyril and continued by @pi8027.\r\n\r\nI suggest removing this line. This is not fair to the other contributors, in locs or in discussions. E.g. the finmap math-comp repo acknowledges several influences, and in that repo, a file like [order.v](https://github.com/math-comp/finmap/blob/master/order.v) has received commits from more contributors."},{"author":"CohenCyril","date":"2019-10-18T09:28:26Z","comment":"> I suggest removing this line. This is not fair to the other contributors, in locs or in discussions. E.g. the finmap math-comp repo acknowledges several influences, and in that repo, a file like [order.v](https://github.com/math-comp/finmap/blob/master/order.v) has received commits from more contributors.\r\n\r\ndone"},{"author":"affeldt-aist","date":"2019-10-19T17:29:03Z","comment":"For information, it was possible to use this PR to rebase mathcomp-analysis on top of it, which means essentially to use the norm provided by ssrnum.v to subsume the several notions of norms that were used in the current version of mathcomp-analysis. This went well except for problems that have been reported and could be quickly fixed. This rebasing led to substantial simplifications in mathcomp-analysis. See https://github.com/math-comp/analysis/tree/analysis_270."},{"author":"amahboubi","date":"2019-10-23T09:00:26Z","comment":"TODO list on order.v:\r\n- header:  remove misleading sentences, list the notations and definitions introduced by the library\r\n- header: document better the tagging mechanism allowing to work with different order structures on a same type. This could be in the header and/or in later in the file\r\n- remove the no-op last Import\r\n- header: improve the documentation of what you get by importing selected of sub-modules \r\n- BTW do we need Order.Def?\r\n- What about importing Order.Syntax in all of the subsequent Order.LTheory, Order.TTheory, etc. Note: a Syntax module is only useful to solve potential grammar conflicts. Which does not seem to be the case here.\r\n- ensure all notations do have a scope\r\n- declare instances for division on nat inside this file, and use this as a documentation/template \r\n"},{"author":"amahboubi","date":"2019-10-23T09:25:16Z","comment":"Timline:\r\n- TODO list addressed for Oct. 25th\r\n- Merge <= Oct. 31st."},{"author":"pi8027","date":"2019-10-23T17:52:20Z","comment":"I found one more TODO. Factories in `ssrnum` are undocumented."},{"author":"pi8027","date":"2019-10-23T20:16:10Z","comment":"> * BTW do we need Order.Def?\r\n\r\nI think `Order.Def` is used only for this kind of explicit application: https://github.com/math-comp/math-comp/blob/8c8a9225479b72bc00252ca24eb4338bd06e9751/mathcomp/algebra/ssrnum.v#L371-L394 Having only *qualified* names such as `Order.le`, `Order.lt`, `Order.ge`, `Order.gt` might be enough for this.\r\n\r\n> * What about importing Order.Syntax in all of the subsequent Order.LTheory, Order.TTheory, etc. Note: a Syntax module is only useful to solve potential grammar conflicts. Which does not seem to be the case here.\r\n\r\nSince `Num.Syntax` is exported by default, doing the same for `Order.Syntax` might be better. Actually it works."},{"author":"CohenCyril","date":"2019-10-24T07:41:55Z","comment":"> I think `Order.Def` is used only for this kind of explicit application:\r\n\r\nThis can be done using scopes rather than modules and it should...\r\nAll of these notations should be in ring_scope."},{"author":"CohenCyril","date":"2019-10-24T07:47:22Z","comment":"> > I think `Order.Def` is used only for this kind of explicit application:\r\n> \r\n> This can be done using scopes rather than modules and it should...\r\n> All of these notations should be in ring_scope.\r\n\r\nOh no, it cannot... but simple notations are prefixed with their module and we maybe can \"hack\" the other ones to include it `\"@ 'Num.le' R\"` "},{"author":"pi8027","date":"2019-10-24T11:33:07Z","comment":"> Oh no, it cannot... but simple notations are prefixed with their module and we maybe can \"hack\" the other ones to include it `\"@ 'Num.le' R\"`\r\n\r\nAnyway, we need to make symbols like `Order.Def.lt` qualified or disambiguated with a suffix. Just making them qualified can be done by turning `Def` modules such as `Order.POrderDef` to sections and removing the `Order.Def` module. In this way, we don't need that hack."},{"author":"amahboubi","date":"2019-10-24T12:33:17Z","comment":"Naive question : what is this block of notation without a scope?"},{"author":"pi8027","date":"2019-10-24T13:30:55Z","comment":"@amahboubi `Num.Def.(ler|ltr|...)` were `Definition`s before this change. We need to redefine them to make the new `ssrnum` library compatible to a degree with the old one.\r\nhttps://github.com/math-comp/math-comp/blob/3ad8a9418dc5d39ef553033f5c8f581525a3aae3/mathcomp/algebra/ssrnum.v#L241-L263 In order to use order theories to reason about num structures, `<=%R` (`Num.Def.ler`) should have the same head symbol as `<=%O` without any reduction; thus, `Num.Def.(ler|ltr|...)` should be redefined as notations rather than definitions. Indeed `Notation ler := ...` things cannot be defined in a specific scope. `Notation \"@ 'ler' R\" := ...` things are declared for explicit application but their displays are fixed to `ring_display` (see https://github.com/math-comp/math-comp/pull/270#discussion_r259755442)."},{"author":"hivert","date":"2019-10-29T22:38:39Z","comment":"@CohenCyril asked me offline to comment here the naming convention. Currently `latticeType` are actually distributive lattice. It would be very uncommon in my community (combinatorics) to assume that all lattice are distributive.  So I'd rather have them called `distrLatticeType` or maybe `dlatticeType`. Note: since it's not something you'll write every line, my vote goes for the long name."},{"author":"pi8027","date":"2019-10-30T09:18:12Z","comment":"@hivert Could you confirm this renaming? Currently we don't have complemented non-distributive lattice structures in #388 and I'm not sure how interesting they are and that we should add them later.\r\n```\r\n(*           porderType == the type of partially ordered types                *)\r\n(*     distrLatticeType == the type of distributive lattices                  *)\r\n(*    bDistrLatticeType == distrLatticeType with a bottom element             *)\r\n(*   tbDistrLatticeType == distrLatticeType with both a top and a bottom      *)\r\n(*   cbDistrLatticeType == the type of sectionally complemented distributive  *)\r\n(*                         lattices                                           *)\r\n(*                         (lattices with bottom and a difference operation)  *)\r\n(*  ctbDistrLatticeType == the type of complemented distributive lattices     *)\r\n(*                         (lattices with top, bottom, difference, complement)*)\r\n(*            orderType == the type of totally ordered types                  *)\r\n(*        finPOrderType == the type of partially ordered finite types         *)\r\n(*  finDistrLatticeType == the type of nonempty finite distributive lattices  *)\r\n(* finCDistrLatticeType == the type of nonempty finite complemented           *)\r\n(*                         distributive lattices                              *)\r\n(*         finOrderType == the type of nonempty totally ordered finite types  *)\r\n```"},{"author":"hivert","date":"2019-10-30T10:41:15Z","comment":"That would be indeed my favorite naming convention. Note that I'm note sure that `sectionally complemented lattice` is a standard name. It looks that it the same as `relatively complemented distributive lattice` according to wikipedia. It moreover mention that \"A distributive lattice is complemented if and only if it is bounded and relatively complemented.\"..."},{"author":"pi8027","date":"2019-10-30T12:48:17Z","comment":"@hivert Sure. But currently, we don't have the relative complement operation \"the complement of `x` in the interval `[y, z]`\" in the library, which can easily be constructed from the sectional complement operation \"the complement of `x` in the interval `[0, y]`\"."},{"author":"pi8027","date":"2019-10-31T20:26:11Z","comment":"@CohenCyril I think you lost my last commit during the last rebasing: https://github.com/pi8027/math-comp/commit/1a2998ff78007bb508d216024864559d9882fc32. I rebased math-comp/fourcolor#19 so the CI failure on fourcolor will be disappeared."},{"author":"pi8027","date":"2019-11-04T13:05:40Z","comment":"I think we fixed all the problems discovered recently. I hope we can merge this after the next MathComp meeting!"},{"author":"amahboubi","date":"2019-11-14T09:53:00Z","comment":"This had been written long ago, but somehow I forgot to publish my review, sorry..."},{"author":"CohenCyril","date":"2019-11-27T13:25:16Z","comment":"@amahboubi are you happy with the rephrasings?"},{"author":"CohenCyril","date":"2019-12-11T13:28:37Z","comment":"@amahboubi I straightened the history. You can merge using \"Create a merge commit\" after the CI passes."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"pi8027","number":269,"state":"closed","open_date":"2019-01-16T17:05:25Z","update_date":"2019-03-22T13:23:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gares","number":268,"state":"closed","open_date":"2019-01-16T15:52:33Z","update_date":"2019-01-18T20:04:44Z","discussion":[{"author":"erikmd","date":"2019-01-16T16:41:04Z","comment":"BTW the GitLab CI report is not yet available since the steps mentioned in [https://github.com/coq/bot#…](https://github.com/coq/bot#rely-on-coqbot-to-synchronize-your-github-prs-with-your-gitlab-project) have to be performed beforehand.\r\nFYI I was just able to do the required steps on the GitLab CI side (adding @coqbot as Developer and add two webhooks in GitLab CI).\r\nCould one owner of https://github.com/math-comp/math-comp do the other steps required on the GitHub side?\r\n\r\n> * go to \"Settings\" / \"Collaborators & teams\" to add @coqbot as a collaborator (so that it can push status checks).\r\n> * go to \"Settings\" / \"Webhooks\" and add one webhook with URL https://coqbot.herokuapp.com/pull_request that will only be triggered by pull request events. Make sure you change the \"content/type\" value to \"application/json\".\r\n \r\nFinally, you could also disable Travis CI builds…\r\nCc @CohenCyril @gares"},{"author":"erikmd","date":"2019-01-18T19:46:13Z","comment":"GitLab CI is now enabled and I believe it would suffice to close and reopen this PR to (re)trigger the build."},{"author":"gares","date":"2019-01-18T20:04:38Z","comment":"After a discussion with @ggonthier I'm refining the semantics of `{x..}y` so that these failures don't occur. Hence I'm closing this PR."}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":266,"state":"closed","open_date":"2018-12-20T18:47:34Z","update_date":"2019-03-22T13:23:11Z","discussion":[{"author":"erikmd","date":"2018-12-20T19:04:08Z","comment":"Sorry I just noticed a big typo crept in the .yml; I'll fix this in 1-2h max (currently on my phone without Git client...)"},{"author":"erikmd","date":"2018-12-20T20:06:03Z","comment":"Done.\r\nBTW I've changed the suggested manip to test this PR, see the **\"ToDo\"** paragraph of https://github.com/math-comp/math-comp/pull/266#issue-240267329\r\n\r\nCc @CohenCyril "},{"author":"erikmd","date":"2018-12-21T11:20:56Z","comment":"Hi @CohenCyril, there was a small bug for Coq 8.6 due to the exit code of `[ -n \"$sw\" ] && opam switch remove -y \"${sw}\"`, so I've replaced this with some regular `if-then-fi`. I also tweaked a few details (including the addition of a markdown badge).\r\n\r\nCyril, could you start a new branch build in the same way? (a force-push will certainly be required though)"},{"author":"Zimmi48","date":"2018-12-21T12:32:37Z","comment":"Regarding support for GitHub PR from forks, cf. coq/bot#23."},{"author":"erikmd","date":"2018-12-21T15:13:30Z","comment":"Hi @CohenCyril, the pipeline build was OK, cf. https://gitlab.com/math-comp/math-comp/pipelines/40996606;\r\nI guess you can now merge this PR in master? so we'll be able to check the additional `docker push` of the four mathcomp-master images to https://hub.docker.com/r/mathcomp/mathcomp-dev works as well…"},{"author":"erikmd","date":"2018-12-21T19:39:55Z","comment":"FYI I've just pushed a slight change for the GitLab Docker images naming convention:\r\n`registry.gitlab.com/math-comp/math-comp/branch-slug:iid_coq-version`, e.g.\r\n`registry.gitlab.com/math-comp/math-comp/master:3_coq-8.6`\r\n\r\n(Indeed GitLab CI basically [accepts](https://gitlab.com/math-comp/math-comp/container_registry) \"2 more slashes\" than Docker Hub images, e.g. `registry.gitlab.com/math-comp/math-comp/optional-name/optional-image-name:tag` would be OK)"},{"author":"erikmd","date":"2018-12-21T21:30:09Z","comment":"Hi, sorry I finally backtracked and removed my additional commit 64e0a090937694482a6dac1cf0e8e8b40f87aebc that was changing the GitLab images naming convention, as even if it would have facilitated the manual removing of images (requiring fewer clicks, only one per \"sub-repository\"), it would have removed the possibility to remove programmatically these \"sub-repositories\", given the endpoints provided in the [Docker Registry HTTP API](https://github.com/docker/distribution/blob/master/docs/spec/api.md) implemented in GitLab CI."},{"author":"erikmd","date":"2019-01-14T21:49:28Z","comment":"Hi @CohenCyril! do you agree to merge this?\r\n\r\nFYI the automatic deletion feature of the `registry.gitlab.com/math-comp/math-comp:1_master_coq-…` Docker images that I was mentioning earlier is not really necessary per se (it is rather something useful for GitLab CI servers themselves to scale more). Anyway, this feature is not directly available in GitLab CI API currently (there is an [open issue in gitlab-ce](https://gitlab.com/gitlab-org/gitlab-ce/issues/21608), so it could only be implemented using a kind of workaround for the time being).\r\n\r\nFor the record, after merging #266, you should also take care of:\r\n* configuring coqbot to automatically push PR branches to GitLab CI\r\n  (cf. the nice documentation prepared by @Zimmi48 in [this readme](https://github.com/coq/bot#rely-on-coqbot-to-synchronize-your-github-prs-with-your-gitlab-project))\r\n* and maybe disable Travis CI builds to avoid unnecessary redundancy… \r\n\r\nBest wishes for the new year! Erik"},{"author":"CohenCyril","date":"2019-01-15T09:43:16Z","comment":"Thanks Erik! Happy new year to you too."}],"tags":[],"pull_requests":[]},{"author":"ggonthier","number":265,"state":"closed","open_date":"2018-12-18T22:07:44Z","update_date":"2019-05-07T19:06:55Z","discussion":[{"author":"CohenCyril","date":"2018-12-19T15:27:21Z","comment":"@ggonthier was there a regression of Coq, and, anyway, do you think this restriction is justified?"},{"author":"ggonthier","date":"2018-12-19T15:32:44Z","comment":"I'm debating this with @herbelin in coq/coq#9180 right now. This is a longstanding issue that may eventually get fixed, but this PR should permanently  settle the issue for `mingnroup` and `maxgroup`. I only realised recently that there was some partial support for externing notation with mixed free/bound variables."}],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"ggonthier","number":264,"state":"closed","open_date":"2018-12-14T16:43:52Z","update_date":"2019-05-07T19:06:58Z","discussion":[],"tags":[{"tag":"kind: documentation","description":"Issue or PR about documentation mistakes, deficiencies, enhancements, ..."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"ggonthier","number":262,"state":"closed","open_date":"2018-12-11T14:25:01Z","update_date":"2019-03-22T13:22:51Z","discussion":[{"author":"CohenCyril","date":"2018-12-11T16:29:49Z","comment":"Hi @ggonthier thanks, that's a change I had in mind for a while.\r\nI am a bit surprised not to see any line with `canLR` (or similar) in this PR, do you reserve it for the next one?\r\nAlso, can you squash and rebase on top of master, please?\r\n\r\n(Indeed, it is preferred to rebase on top of master rather than to merge master into a branch, for the sake of cleaning the history and not confusing github)"},{"author":"anton-trunov","date":"2018-12-12T10:17:28Z","comment":"Would it make sense to add an entry to ChangeLog in this PR to fix #258? Or should I open a new one?\r\nI guess the proposed entry \r\n```\r\n\t* Documented argument names for functions and lemmas. Renamed some\r\n\t  of the arguments for consistency reasons. Changed implicit status from\r\n\t  non-maximal to maximal for a number of arguments.\r\n```\r\nshould be changed anyways."},{"author":"ggonthier","date":"2018-12-12T10:31:52Z","comment":"@anton-trunov , yes, one entry should suffice to cover both PRs, and it should be a little more precise than the on proposed. I'm working on extending slightly the PR to cover uses of the lemmas  as suggested by @CohenCyril, and also to include partial function cancellation lemmas."},{"author":"ggonthier","date":"2018-12-13T12:21:24Z","comment":"Added usage, partial function cancel (`pcancel` / `ocancel`), and some residual `injective` / `cancel` lemmas.\r\nRebased, documented (in Changes, also covering #255), and squashed."},{"author":"gares","date":"2018-12-13T18:09:55Z","comment":"odd order is now part of Coq's CI and runs on each PR, so breaking it is not nice.\r\n\r\nWhat I do for elpi is to have Coq CI track a branch other than master that I synchronize with master when I'm sure (it is called coq-master).\r\n\r\nWe could also improve CI here, so that we test odd-order too before merging."},{"author":"ggonthier","date":"2018-12-14T16:59:38Z","comment":"I've corrected the issue in odd-order,  and also submitted #264 to correct related issues in `mxrepresentation.v`."}],"tags":[{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"CohenCyril","number":261,"state":"closed","open_date":"2018-12-11T10:05:25Z","update_date":"2019-11-29T09:46:43Z","discussion":[{"author":"CohenCyril","date":"2019-02-05T14:47:33Z","comment":"@ybertot do you plan to work on it in the coming weeks?"},{"author":"ybertot","date":"2019-02-08T16:02:52Z","comment":"I won't be able to work on this in the next two weeks."},{"author":"CohenCyril","date":"2019-02-28T13:40:13Z","comment":"I will address this."},{"author":"amahboubi","date":"2019-10-24T12:57:03Z","comment":"This PR has stalled for long... @ybertot @CohenCyril  what is the status of this one? We need an assignee here. @thery ? @LaurenceRideau ?"},{"author":"amahboubi","date":"2019-10-25T07:51:48Z","comment":"Ping @ybertot @CohenCyril @thery @LaurenceRideau ."},{"author":"CohenCyril","date":"2019-10-25T08:04:28Z","comment":"@amahboubi I will get this PR ready ASAP, there is not much to do. The main part missing is the changelog."},{"author":"amahboubi","date":"2019-10-25T08:16:27Z","comment":"Thanks @CohenCyril . When do you think you will work on this?\r\n"},{"author":"CohenCyril","date":"2019-10-25T08:24:09Z","comment":"Before Thursday Oct 31st"},{"author":"amahboubi","date":"2019-11-14T10:19:35Z","comment":"@CohenCyril what is your updated deadline for this PR?"},{"author":"CohenCyril","date":"2019-11-14T10:27:26Z","comment":"Sorry about that, my updated deadline is November 15th."},{"author":"amahboubi","date":"2019-11-14T10:32:22Z","comment":"Tomorrow?"},{"author":"CohenCyril","date":"2019-11-14T11:43:06Z","comment":"> Tomorrow?\r\n\r\nyes"},{"author":"CohenCyril","date":"2019-11-15T15:07:14Z","comment":"update, I cannot do it for today :disappointed: \r\nNew estimate:  November 19."},{"author":"CohenCyril","date":"2019-11-19T11:37:14Z","comment":"@amahboubi ready for re-reviewing."},{"author":"amahboubi","date":"2019-11-25T16:06:00Z","comment":" This PR is a milestone for Dec. 1st. There are indeed two options:\r\n1) merge as is, be part of the release, and open an issue to fix @pi8027 's remark\r\n2) delay the merge after the release.\r\n\r\n@pi8027 do you agree with 1)?"},{"author":"pi8027","date":"2019-11-25T16:14:28Z","comment":"@amahboubi @CohenCyril I agree with option 1."},{"author":"amahboubi","date":"2019-11-26T15:25:50Z","comment":"This is great, but please keep in mind that the next milestone is due Dec. 1st."},{"author":"CohenCyril","date":"2019-11-27T00:07:12Z","comment":"@pi8027 @amahboubi I did the generalizations that arose from @pi8027 comments."},{"author":"CohenCyril","date":"2019-11-27T14:17:06Z","comment":"@amahboubi @pi8027 comments taken into account except for https://github.com/math-comp/math-comp/pull/261#discussion_r351115595 and squashed my commits (cannot squash further without losing ownership)"},{"author":"amahboubi","date":"2019-11-27T14:19:05Z","comment":"@pi8027 can you open an issue for the remaining comment not addressed by the PR? I will then do the merge."},{"author":"CohenCyril","date":"2019-11-27T14:36:37Z","comment":"I am a bit puzzled by the absence of CI on my latest force pushes...\r\n(Fixed manually)"},{"author":"pi8027","date":"2019-11-27T15:46:42Z","comment":"@amahboubi @CohenCyril I opened a dedicated issue #442 for the remaining comment."},{"author":"CohenCyril","date":"2019-11-28T11:47:50Z","comment":"gitlab CI is down... https://status.gitlab.com/"},{"author":"ybertot","date":"2019-11-29T09:00:56Z","comment":"@amahboubi, @CohenCyril, @pi8027 thank you all for the great work.  Should I understand that the PR is now ready for merge.  I wish to prepare the release today."},{"author":"pi8027","date":"2019-11-29T09:16:18Z","comment":"@ybertot IMO, this PR is good enough to merge as it is. However, since I contributed the second commit of this PR, I am probably not in a position to approve this PR."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"CohenCyril","number":260,"state":"closed","open_date":"2018-12-11T10:02:06Z","update_date":"2019-03-22T13:21:59Z","discussion":[],"tags":[{"tag":"kind: fix","description":"PR that fixes a bug. Please refer to the appropriate issue(s) if relevant."}],"pull_requests":[]},{"author":"CohenCyril","number":259,"state":"open","open_date":"2018-12-10T08:18:16Z","update_date":"2021-05-19T08:17:42Z","discussion":[{"author":"amahboubi","date":"2019-06-03T11:21:25Z","comment":"@CohenCyril , it's great to see progress on this front! Could you update the header comment so as to make the roadmap clearer? In particular, it seems that fixpoints-related material have now been actually moved. Are the dependencies now swapped? "},{"author":"CohenCyril","date":"2019-06-03T11:26:06Z","comment":"> In particular, it seems that fixpoints-related material have now been actually moved. Are the dependencies now swapped?\r\n\r\nNo they have not been swapped yet, but I can do it now if you want me to."},{"author":"amahboubi","date":"2019-06-03T11:28:37Z","comment":"I am trying to understand the roadmap for this PR. How do you see it?"},{"author":"CohenCyril","date":"2019-06-03T11:35:10Z","comment":"> I am trying to understand the roadmap for this PR. How do you see it?\r\n\r\nI just updated the orignial post for that purpose.\r\n"},{"author":"amahboubi","date":"2019-06-03T12:14:12Z","comment":"Thanks. However, the post still mentions that only `finmap.v` should be reviewed. Could you confirm, and if so mention explicitly in the post,  that PR #302 includes all the other changes ?"},{"author":"CohenCyril","date":"2019-06-03T12:43:55Z","comment":"> No they have not been swapped yet, but I can do it now if you want me to.\r\n\r\nSince #302 was reviewed and will be integrated very shortly, I will not swap, but expect a rebase that will *not* affect `finmap.v`"},{"author":"CohenCyril","date":"2019-06-13T17:26:32Z","comment":"@amahboubi the dependency in #302 is gone, you may review this PR without interference."},{"author":"amahboubi","date":"2019-07-05T10:49:24Z","comment":"Is finmap supposed to eventually subsume the finset library currently in mathcomp? If not what is the watershed?"},{"author":"ggonthier","date":"2019-07-05T12:02:04Z","comment":"> Is finmap supposed to eventually subsume the finset library currently in mathcomp? If not what is the watershed?\r\n\r\nIt should. But there are technical difficulties in crafting a notion of generic finite predicate that would extend gracefully the notion of generic predicate (on a finite type) that is currently used in `fintype` and `finset` for the `card`, `enum`, `pick`, `image` and `imset` operators. The definition proposed in `finmap` isn't adequate for this purpose (and indeed misuses the `ssrbool` interface).\r\n   I've gotten many of the issues figured out these last days; I'll propose something soon, when I've figured out the last sticking point (namely, display in subgoals). "},{"author":"amahboubi","date":"2019-07-05T12:35:00Z","comment":"Many thanks for the feedback @ggonthier ! And very good news that most issues are now resolved. About the remaining display issue you mention, is it easy enough to provide a quick description of the problem? "},{"author":"ggonthier","date":"2019-07-08T09:52:48Z","comment":"> About the remaining display issue you mention, is it easy enough to provide a quick description of the problem?\r\n  Briefly, the issue is that because finite predicates need to be implemented by a _value_ class, the class object will show up in subgoals produced by applying of rewriting with a generic finite predicate lemma, as happens with instances of `Monoid.law`, `{linear ..}`, etc. The latter are tolerable because they occur during rewriting, where the manifest classes may facilitate further rewriting and are easy to remove with `/=`.\r\n    I'm less comfortable with leaving visible manifest instances in subgoals produced by `apply` or `case`, which is why I set up a \"keyed predicate\" interface for algebraic predicates, which make it possible to display the actual predicate rather than the class object encapsulating its algebraic closure properties. I'm not sure I can use these for finite predicates, however, so I'm trying other solutions.\r\n   In the meantime I've uncovered another issue, which is not easily resolved. Another effect of using value classes is that the parameters of the predicate appear _at least twice_ after type inference: in the expression of the predicate for which a finite class is inferred, and in the expression of that class. In particular, `A` will appear (at least) twice in `#|A|`, and that breaks the common idiom for induction on the order of a set:\r\n```\r\nelim: {A}_.+1 {-2}A (ltnSn #|A|) => // n IHn A leAn.\r\n```\r\nWe'll probably have to phase it out, in favour of more specialised set induction principles or better behaved versions of the idiom that do not rely on counting occurrences. So this PR should require merging a preliminary compatibility PR that does this, as well as other necessary adjustments (in particular, not expecting `enum A` to be _convertible_ to `[seq x in Finite.enum _ | x \\in A]`)."},{"author":"gares","date":"2019-09-24T20:12:13Z","comment":"FTR: https://gitter.im/coq/coq?at=5d8a7140c77f285fb1d7fbf6 "},{"author":"CohenCyril","date":"2019-10-17T14:11:09Z","comment":"Hi @ggonthier if my understanding is correct you are currently rewriting part of this pull request. Could you confirm? If so do you have an estimated date/time for publishing what you did?"},{"author":"amahboubi","date":"2019-10-24T12:59:55Z","comment":"@CohenCyril , if I understand correctly  @ggonthier and you had some written discussion outside from github on the status and possible evolution of the status of (finite) sets in mathcomp. If so, @CohenCyril could you disclose the relevant (parts of) emails as posts here?"},{"author":"CohenCyril","date":"2019-10-24T19:48:27Z","comment":"> @CohenCyril , if I understand correctly @ggonthier and you had some written discussion outside from github on the status and possible evolution of the status of (finite) sets in mathcomp. If so, @CohenCyril could you disclose the relevant (parts of) emails as posts here?\r\n\r\nIt's much less that it looks: I asked for a short update about what @ggonthier was doing on this PR during the summer. I am not sure the mail I got from Georges is still relevant (depending on the progress made since then), but I could publish it here anyway if he agrees."},{"author":"amahboubi","date":"2019-11-14T10:22:04Z","comment":"@CohenCyril @gonthier, we discussed about a missing code snippet this morning. Would it be possible to share it e.g. with a gist? This would surely help preparing our forthcoming meeting on the topic."},{"author":"CohenCyril","date":"2019-11-14T11:47:13Z","comment":"@amahboubi \r\nhere is the code snippet that @ggonthier sent me\r\nhttps://gist.github.com/CohenCyril/7318e91f5b400f00b707baad579f51d2"},{"author":"amahboubi","date":"2019-12-11T15:51:36Z","comment":"@CohenCyril is this PR ready for review?\r\n"},{"author":"CohenCyril","date":"2019-12-11T17:33:54Z","comment":"> @CohenCyril is this PR ready for review?\r\n\r\nIt is not"},{"author":"ybertot","date":"2020-03-25T15:22:08Z","comment":"Now that we plan to work on release 1.11, what is the status of this PR? is it better to move it to 1.12."},{"author":"CohenCyril","date":"2020-03-25T15:29:02Z","comment":"> Now that we plan to work on release 1.11, what is the status of this PR? is it better to move it to 1.12.\r\n\r\nYes, and as said in the last mathcomp meeting @ggonthier is reworking it anyway, I expect this one to be closed when he submits his."},{"author":"CohenCyril","date":"2020-07-08T13:03:20Z","comment":"@ggonthier any news on that front?"},{"author":"gares","date":"2020-11-04T09:50:29Z","comment":"@ggonthier we are planning a release soonish. Shall we consider this PR or you are actively working on a different/alternative one?"},{"author":"chdoc","date":"2020-11-04T10:08:46Z","comment":"@gares would you be willing to self-assign?"},{"author":"CohenCyril","date":"2020-12-07T00:00:50Z","comment":"@pi8027 I forgot to mark this PR as a draft, sorry about that!"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"CohenCyril","number":257,"state":"closed","open_date":"2018-12-05T14:52:41Z","update_date":"2019-03-22T13:20:51Z","discussion":[{"author":"CohenCyril","date":"2018-12-11T09:45:57Z","comment":"@ggonthier I think this is ready for merge"}],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":256,"state":"closed","open_date":"2018-12-04T21:04:13Z","update_date":"2018-12-20T18:54:37Z","discussion":[{"author":"ejgallego","date":"2018-12-04T21:20:59Z","comment":"See the docs at https://docs.travis-ci.com/user/build-stages/share-docker-image/\r\n\r\nI am not sure if this would work for pull requests tho, I forgot how the permission model works for this."},{"author":"ejgallego","date":"2018-12-04T21:24:20Z","comment":"Yup indeed this won't work for pull requests :S I got used to gitlab where we workaround that."},{"author":"erikmd","date":"2018-12-05T00:20:32Z","comment":"@anton-trunov thanks for working on this.\r\nSo to sum up, the plan of this PR and #245 is to make Travis build at the same time math-comp/math-comp and most math-comp libs, to have some regression testing feedback within the main repo, like Coq's main repo.\r\n\r\n(Afterwards, this could be complemented with some distribution of math-comp stable docker images for which I gave some suggestions in #243, but of course these two things are a bit orthogonal. Also I believe @CohenCyril was also interested in experimenting this stuff)\r\n\r\nAs suggested by @ejgallego you should definitely use some build stages to implement this, cf. https://docs.travis-ci.com/user/build-stages, and indeed Travis CI does not have a Docker registry per se, so you could try to push to Docker Hub or so, but it also seems to me this wouldn't be possible for fork branches, due to the need for (encrypted) private tokens to login into the registry, which can only be decrypted from upstream branches builds, not fork builds.\r\n\r\nHowever I think this is not blocking to achieve what we want: you could have 2 stages \"build\" and \"test\":\r\n- a stage \"build\" obtained by turning the `docker run + docker exec (first part)` command into a single `docker build --pull -t mathcomp:dev .` command, relying on a Dockerfile similar to that of [docker-coq-travis-ci-demo-2](https://github.com/erikmd/docker-coq-travis-ci-demo-2)\r\n- a stage \"test\" obtained by turning the `docker exec (second part)` command into `docker run -d -i --init --name=OddOrder (…) mathcomp:dev` then `docker exec OddOrder /bin/bash --login -c \"(…)\"` (and likewise for other libs to test-build).\r\n\r\nThen, it is one of two things:\r\n1. either the two jobs benefit from Docker's cache and the `mathcomp:dev` image will be available\r\n2. or the `docker run (…)` says `Unable to find image 'mathcomp:dev' locally`, so you should adapt the configuration to manually enable caching without using a Docker registry, relying for example on the commands `docker save` and `docker load`.\r\n\r\nFYI there are some references on the net documenting ways to address point 2. above:\r\n- https://stackoverflow.com/a/41975912/9164010\r\n- https://stackoverflow.com/a/35374332/9164010\r\n- http://rundef.com/fast-travis-ci-docker-build\r\n- https://giorgos.sealabs.net/docker-cache-on-travis-and-docker-112.html\r\n- https://medium.com/mobileforgood/patterns-for-continuous-integration-with-docker-on-travis-ci-71857fff14c5 (but this latter reference uses `docker build --pull --cache-from \"$IMAGE_NAME\" --tag \"$IMAGE_NAME\" .` and `docker push \"${IMAGE_NAME}:${version}\"` so it requires a Docker registry)"},{"author":"erikmd","date":"2018-12-05T00:28:44Z","comment":"@ejgallego I guess one of your suggestions (copied below) was dealing with the naming convention of the \"mathcomp:dev\" image (if it is pushed on Docker Hub at some point) but just to be sure could you give a small example of what you meant here by \"bash array indexed by Coq version\"?\r\n> once done we could study how to factor the versioning. For now you could use a bash array indexed by Coq version if you need version-specific pins."},{"author":"ejgallego","date":"2018-12-05T01:08:42Z","comment":"@erikmd thanks a lot for the links! Oh indeed using the cache could be great! It has to be done with care as to trigger the proper rebuild when it is needed, but indeed could work very well in the end.\r\n\r\nWhat I meant about the array is that for example imagine project `odd-order` that requires a different version for Coq 8.8 and Coq 8.9, then, indeed we could tweak the variables of the matrix to denote Coq version and store the git ref in an array."},{"author":"Zimmi48","date":"2018-12-05T12:35:05Z","comment":"@ejgallego @erikmd If you really want to use stages and push a docker image for math-comp in the first stage, then I strongly encouraged ditching Travis here and using GitLab CI instead. The experience with Coq has been very positive."},{"author":"anton-trunov","date":"2018-12-05T12:52:16Z","comment":"> I strongly encouraged ditching Travis here and using GitLab CI instead\r\n\r\n@Zimmi48 Does one need a Gitlab organization for this?"},{"author":"erikmd","date":"2018-12-05T13:02:14Z","comment":"@Zimmi48 thanks for your feedback! actually I guess the plan consists in both:\r\n\r\n1. building a Docker image of **math-comp master** only once for each master commit, then publish it on Docker Hub or so, and reuse it for subsequent jobs;\r\n2. building a Docker image of **each math-comp PR branch**, then reuse it for subsequent jobs.\r\n\r\nas point 2. doesn't require to push the first Docker image somewhere (the cache could be used to communicate inter-stages) this approach could be feasible using Travis.\r\n\r\nHowever it's true that GitLab CI's Docker support is excellent (the configuration file obtained in the end would certainly be simpler than with Travis, and point 2. above regarding PRs could also be extended with a `docker push` or so to keep somewhere the Docker image that passed tests, improving reproducibility in case of failed or successful build), so it could indeed be a fruitful move!"},{"author":"erikmd","date":"2018-12-05T13:06:39Z","comment":"Hi @ejgallego! you said about the approach of using staged builds with several docker images:\r\n> this won't work for pull requests :S I got used to gitlab where we workaround that.\r\n\r\nbut out of curiosity, do you rely on some dedicated tool for that (related maybe to coqbot), or do you just use a standard GitLab CI feature mentioned in its documentation?"},{"author":"anton-trunov","date":"2018-12-05T13:08:08Z","comment":"Ok, the [docs](https://docs.gitlab.com/ee/ci/ci_cd_for_external_repos/github_integration.html) say that as the first step one should do the following:\r\n> In GitLab create a CI/CD for external repo project and select GitHub.\r\n\r\nWhere do we do this? I guess (@CohenCyril or @gares or @amahboubi) could create a new GitLab organization for this? Or is there some generic org for Coq-related project? Any pointers would be much appreciated."},{"author":"CohenCyril","date":"2018-12-05T15:00:45Z","comment":"> Where do we do this? I guess (@CohenCyril or @gares or @amahboubi) could create a new GitLab organization for this? Or is there some generic org for Coq-related project? Any pointers would be much appreciated.\r\n\r\n@erikmd @anton-trunov @amahboubi @gares Should I create a `math-comp` **group** on http://gitlab.inria.fr?"},{"author":"erikmd","date":"2018-12-05T15:36:18Z","comment":"> Should I create a math-comp group on http://gitlab.inria.fr?\r\n\r\n@CohenCyril I don't know for sure, but it seemed to me that @Zimmi48's suggestion was to create that group on https://gitlab.com/ to benefit from its GitLab CI runners? (like https://gitlab.com/coq/coq)"},{"author":"erikmd","date":"2018-12-05T15:45:59Z","comment":"BTW (in anticipation of #243) you could create a `mathcomp` organization on Docker Hub as well?\r\n(indeed hyphens are not allowed there… but it seems https://hub.docker.com/u/mathcomp is still available)"},{"author":"Zimmi48","date":"2018-12-05T16:14:43Z","comment":"Indeed, I had not thought of the possibility of using the cache of Travis. In the old days when we started using Travis (almost 2 years ago), it was not possible to share the cache between stages."},{"author":"erikmd","date":"2018-12-05T16:32:52Z","comment":"Hi @Zimmi48\r\n> Indeed, I had not thought of the possibility of using the cache of Travis. In the old days when we started using Travis (almost 2 years ago), it was not possible to share the cache between stages.\r\n\r\nOK! Note anyway that I did not experimented the references mentioned in [my comment](https://github.com/math-comp/math-comp/pull/256#issuecomment-444310161) and in particular if this approach would now be applicable between different stages of the same Travis build.\r\n(And Travis' doc doesn't seem to indicate whether this is the case or not…)\r\n\r\nIn any case, relying on gitlab.com CI seems a good choice.\r\n\r\nBTW @Zimmi48 @ejgallego are you aware of specific limitations regarding the CI time of standard runners on gitlab.com CI?"},{"author":"ejgallego","date":"2018-12-05T16:59:23Z","comment":"> BTW @Zimmi48 @ejgallego are you aware of specific limitations regarding the CI time of standard runners on gitlab.com CI?\r\n\r\nNo time limitations that should be relevant for math-comp.\r\n\r\nIndeed I am not sure how caches do work wrt stages."},{"author":"ejgallego","date":"2018-12-06T01:28:14Z","comment":"Caches do seem to work well with stages; another note: gitlab's CI registry allows to get a deploy-only token for read-only access."},{"author":"CohenCyril","date":"2018-12-06T10:07:43Z","comment":"> @CohenCyril I don't know for sure, but it seemed to me that @Zimmi48's suggestion was to create that group on https://gitlab.com/ to benefit from its GitLab CI runners? (like https://gitlab.com/coq/coq)\r\n\r\nDone: https://gitlab.inria.fr/math-comp\r\n\r\nEDIT: Sorry! I did not read carefully. Mistake corrected"},{"author":"erikmd","date":"2018-12-10T08:27:22Z","comment":"Regarding Emilio's answer to my question about GitLab CI time limitations\r\n> No time limitations that should be relevant for math-comp.\r\n\r\nI've looked at https://about.gitlab.com/solutions/github/ and https://about.gitlab.com/pricing/#gitlab-com and it's not clear for me if we'd benefit from 2,000 CI pipeline minutes or 50,000 CI pipeline minutes…\r\n\r\nOut of curiosity, could @Zimmi48 or @ejgallego take a look at the following page to see if that info would be available for https://gitlab.com/coq/coq ?\r\nhttps://gitlab.com/groups/coq/-/pipeline_quota"},{"author":"ejgallego","date":"2018-12-10T08:36:26Z","comment":"Open source projects have no limitations but no guaranteed shared runners either. In practice it works very well as the on-demand approach means that backlog is caught up quickly.\r\n\r\nAlso it is fairly easy to add your own runners, in Coq we have a machine that helps in times of reduced worker availability."},{"author":"erikmd","date":"2018-12-11T00:59:33Z","comment":"Just not to forget and to follow-up the discussion at the visio meeting, you may want to create an organization at https://gitlab.com/math-comp as well.\r\n\r\n(see also that docs link mentioned by @anton-trunov:  \r\nhttps://docs.gitlab.com/ee/ci/ci_cd_for_external_repos/github_integration.html)\r\n\r\nCc @CohenCyril "},{"author":"Zimmi48","date":"2018-12-11T09:26:29Z","comment":"Indeed, as explained by @erikmd the proposal was to create the organization on gitlab.com not on Inria's GitLab."},{"author":"CohenCyril","date":"2018-12-11T10:07:59Z","comment":"@erikmd @Zimmi48  done"},{"author":"erikmd","date":"2018-12-14T15:00:27Z","comment":"Hi @anton-trunov! did you perform more experiments regarding the migration/setup of mathcomp's CI on GitLab? otherwise I can propose to look at this tonight (relying on the [GitLab CI config example](https://gitlab.com/erikmd/docker-coq-gitlab-ci-demo-2/) that I recently simplified to avoid the `sed` hack). However, I am not sure I could add additional commits to this PR #256, so maybe it's better to create another PR(?)"},{"author":"anton-trunov","date":"2018-12-14T15:38:07Z","comment":"@erikmd I was intermittently reading the docs and experimenting with CI on IMDEA's internal Gitlab, since I have the necessary rights there, but I haven't finished yet. Feel free to take over this PR any time, though."},{"author":"erikmd","date":"2018-12-15T16:35:00Z","comment":"Thanks @anton-trunov! so I resumed my experiments as well, diving in GitLab's doc and in some examples of CI setup including that of Coq.\r\nCyril gave me access to the CI-dedicated org https://gitlab.com/math-comp and I expect to have a working configuration for branch builds soon, but I think we'll need Théo and Emilio's help to fully configure the builds for GitHub PRs... I'll let you informed ASAP."},{"author":"Zimmi48","date":"2018-12-17T15:49:39Z","comment":"OK, I might not be very reactive though, but I'll try to help if I can."},{"author":"anton-trunov","date":"2018-12-20T18:54:37Z","comment":"Superseded by #266"}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"pull_requests":[]},{"author":"anton-trunov","number":253,"state":"closed","open_date":"2018-11-27T15:42:09Z","update_date":"2019-03-22T13:20:45Z","discussion":[{"author":"ggonthier","date":"2018-11-29T14:35:59Z","comment":"I agree with @CohenCyril; I’ve actually prepared a full review addressing these and other issues, but I can’t upload it as I’m out of office this afternoon. I’ll do it tonight.\n   Best,\nGeorges \n\nEnvoyé de mon iPhone\n\n> Le 29 nov. 2018 à 15:14, Cyril Cohen <notifications@github.com> a écrit :\n> \n> @CohenCyril commented on this pull request.\n> \n> In mathcomp/algebra/poly.v:\n> \n> > @@ -146,9 +146,9 @@ End Polynomial.\n>  (* directives take effect.                                         *)\n>  Bind Scope ring_scope with poly_of.\n>  Bind Scope ring_scope with polynomial.\n> -Arguments polyseq _ _%R.\n> -Arguments poly_inj _ _%R _%R _.\n> -Arguments coefp_head _ _ _%N _%R.\n> +Arguments polyseq [R] p%R.\n> +Arguments poly_inj [R x1%R x2%R] _.\n> rename x1, x2 to p and q.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"},{"author":"anton-trunov","date":"2018-11-30T11:39:56Z","comment":"@ggonthier Thank you very much for the through review and all the explanations! I pushed two new commits trying to address your suggestions. Some of the maximal implicit declarations make us add `@` annotations. If this is not intended, I will revert the newest commit and amend the previous one."},{"author":"anton-trunov","date":"2018-11-30T12:11:34Z","comment":"Great! Should I squash all the commits then?"},{"author":"ggonthier","date":"2018-11-30T12:13:47Z","comment":"  Certainly, do go ahead. And thank you for contributing!\n\n> Le 30 nov. 2018 à 13:11, Anton Trunov <notifications@github.com> a écrit :\n> \n> Great! Should I squash all the commits then?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/math-comp/math-comp/pull/253#issuecomment-443185801>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AOhrHb775xXYfQ8VbXWZImYhHlORbyI6ks5u0SB3gaJpZM4Y1wxv>.\n> \n\n"},{"author":"anton-trunov","date":"2018-11-30T12:52:15Z","comment":"Done!"},{"author":"anton-trunov","date":"2018-12-04T12:25:26Z","comment":"I force-pushed the last fixes and this should be good to go!"},{"author":"ggonthier","date":"2018-12-04T12:30:02Z","comment":"Merged - thanks! I've also closed most conversations, keeping open those we may want to refer to in future improvements (e.g., the `_head` idiom and named extra arguments)."},{"author":"anton-trunov","date":"2018-12-04T13:04:03Z","comment":"@ggonthier Thank you for merging and for your patience!"},{"author":"ejgallego","date":"2018-12-04T15:44:04Z","comment":"It looks like this may have broken the compilation of `odd-order` [still verifying as it will take some time] see https://gitlab.com/coq/coq/-/jobs/129581232\r\n\r\nWhile I confirm the exact bug, IMHO math-comp's CI system should be improved, it makes little sense to perform changes to the library and don't test that `odd-order` is still OK."},{"author":"anton-trunov","date":"2018-12-04T16:01:05Z","comment":"@ejgallego I pushed a quick fix for this: https://github.com/anton-trunov/odd-order/commit/5750b0e6d7fe89a6e85eeebabad63b86dc758636.\r\nIt might be not what would be intended by @ggonthier, though."},{"author":"ejgallego","date":"2018-12-04T16:06:17Z","comment":"Thanks @anton-trunov , indeed I have confirmed the problem and your fix allows the compilation to continue. Please submit a PR, thanks!"},{"author":"anton-trunov","date":"2018-12-04T16:08:54Z","comment":"@ejgallego Done. https://github.com/math-comp/odd-order/pull/7"},{"author":"ejgallego","date":"2018-12-04T16:12:04Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":252,"state":"closed","open_date":"2018-11-26T13:52:34Z","update_date":"2019-03-22T13:20:41Z","discussion":[{"author":"anton-trunov","date":"2018-12-11T11:42:07Z","comment":"Rebased. CI is green."},{"author":"CohenCyril","date":"2018-12-11T12:36:47Z","comment":"@anton-trunov Thanks"},{"author":"anton-trunov","date":"2018-12-11T13:47:44Z","comment":"@CohenCyril Thanks for merging :)"}],"tags":[{"tag":"kind: build","description":"Issue or PR about the build system/ (Makefile, Dune, ...)"}],"pull_requests":[]},{"author":"gares","number":250,"state":"closed","open_date":"2018-11-22T15:58:31Z","update_date":"2018-12-04T09:01:06Z","discussion":[{"author":"gares","date":"2018-11-22T16:47:08Z","comment":"Unfortunately the fix you propose does not work, since you would keep `s2` but the equation would be `_s_ = ...` not `s2 = ...`. The current script is one line longer, but is way more pedestrian."},{"author":"CohenCyril","date":"2018-11-23T09:25:54Z","comment":"> Unfortunately the fix you propose does not work, since you would keep `s2` but the equation would be `_s_ = ...` not `s2 = ...`. The current script is one line longer, but is way more pedestrian.\r\n\r\nIsn't this another bug? Indeed `elim e : (term) => [...]` should give you an equation between the term you mention and its \"destructs\"..."},{"author":"gares","date":"2018-11-23T15:29:45Z","comment":"Yes, I'll look into that. As I explained to you in person the code is now split into two files, so it may not be trivial to implement correctly. If I manage the right fix could be to just put parentheses in `elim Ds2: (s2)`.\r\n\r\nIf I don't manage, is this PR an acceptable fix? (but for the detail below)"},{"author":"gares","date":"2018-12-03T10:18:50Z","comment":"It looks all green now."},{"author":"gares","date":"2018-12-03T10:40:10Z","comment":"Oh, given that the fix is backward compatible I'd like it to be merged before coq/coq#6705 so that I can remove the overlay file from that PR."},{"author":"ggonthier","date":"2018-12-03T10:56:32Z","comment":"Could one of you clarify what the fix is about? The code that is being changed relies only on the standard behaviour of equation generation for `elim:`, which is to generate an abbreviation for the principal term of the elimination, reusing the name of that term if it has just been cleared by the `:` pseudo-tactical (and defaulting to a generated hidden name if that was not the case).\r\n  I don't recall an exception for non-dependent `elim`, though there might have been one to accommodate `elim`s that behave more like `case`, specifically those that use a view. At any rate, this would not apply here, and the rationale is clearly wrong, because `s2` _is cleared_ here, before being reused.\r\n  If the idea is to align the specific equation-generation behaviour of `elim` to that of `case`, then I would like to object. While it's not used very much in the final library scripts, it is a very useful _debugging_ tool and has been used extensively in producing the scripts in the first place. It's also more useful when doing small-scale reflection style program correctness proofs; there aren't many in MathComp per se, but I recall there are more in the 4-color proof."},{"author":"ggonthier","date":"2018-12-03T11:38:34Z","comment":"  Partly answering myself now (a sure sign of senility) I do recall one feature of `elim` equation generation that may have sparked the confusion: if the cleared eliminated name has somehow been reused before the equation is introduced, then the introduction is done with a generated name. The rationale is that because this is primarily intended as a debugging feature, it should avoid introducing failures of its own.\r\n  I still don't see how the new intro patterns should prevent this from working - it's exactly as if the user had introduced the name again at the point where the equation is introduced."},{"author":"gares","date":"2018-12-03T17:18:02Z","comment":"What I'd like to get rid of is the \"if\" in the code doing \"if the name is not used later on in the intro pattern then reuse the name (when it is a name and not a general term) else pick a fresh name\" since the \"if\" is not very meaningful now that the intro pattern can mention a \"prefix/suffix\" of the actual name.\r\n\r\nI see 3 options:\r\n- never reuse the name: always pick a fresh id for the LHS. This is obviously the simplest, and the one currently implemented in the PR\r\n- always reuse the name (when it is a name, and not a general term): could break scripts and force naming such as `s2'` as in the current proof script.\r\n- reuse the name (when it is a name, and not a general term) if the user did put `()` around it (requesting it not to be cleared). This is what Cyril suggested.\r\n\r\nI'm afraid all options could break scripts. I've no strong opinions.\r\n\r\nI think the choice is about what status to give to elim+equation. If it is a debugging only thing, then I think option 1 is best. If it is a legit proof step, options 2 and 3 are fine but we should also fix the manual (that presents it as a debugging feature)."},{"author":"ggonthier","date":"2018-12-03T17:51:56Z","comment":"As I see it there is no \"used later in the intro pattern\" behaviour that is required. The equation is introduced after the first intro pattern - so the most important question is whether the name has been reused at that very point, not whether it is being reused at some later point, in essence acting as if, after the first intro pattern, one pushes `forall _x_, _x_ = t -> ` on the goal (where `t` is the eliminated term), then insert `x Dx` in the intro pattern, where `x` is the (cleared) original name of the elimination target, and `Dx` the name of the equation. Should this fail because `x` was reused in the meantime, then `_x_` is used instead to avoid a secondary failure.\r\n   It seems to me this should be fairly easy to implement. Yes, it does allow for different behaviour in different branches of the elimination (if the fallback behaviour is only triggered in some branches), as well as some secondary failures (if the elimination name is reused later in the pattern), but I feel these are acceptable limitations.\r\n   I can even imagine ways of avoiding these without static prediction of the names used in an intro pattern, such as creating the equation with a generated name, then renaming it at the end of the intro pattern if no conflict has appeared in any of the branches, similar to how delayed clears are handled. I don't feel it's necessary to go there, however, as the behaviour I outlined above does cover all intended use cases well enough."},{"author":"gares","date":"2018-12-03T21:47:52Z","comment":"Oh, I see. The implementation you suggest is clearly simpler than the previous one and requires no lookahead. Thanks."},{"author":"gares","date":"2018-12-04T09:01:05Z","comment":"coq/coq#6705 updated, there is no need for this anymore"}],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":249,"state":"closed","open_date":"2018-11-21T14:41:01Z","update_date":"2019-03-22T13:20:34Z","discussion":[{"author":"anton-trunov","date":"2018-11-22T09:36:18Z","comment":"@CohenCyril Thank you, it's my pleasure."},{"author":"anton-trunov","date":"2018-11-23T14:15:09Z","comment":"@ggonthier Sure, I'll try to address this in a separate PR.\r\n\r\nJust to be on the safe side, could you give an example of what you'd like to have?"},{"author":"anton-trunov","date":"2018-11-24T16:59:59Z","comment":"@CohenCyril Thanks!"}],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":248,"state":"closed","open_date":"2018-11-20T15:12:16Z","update_date":"2019-03-22T13:20:28Z","discussion":[{"author":"anton-trunov","date":"2018-11-22T09:36:35Z","comment":"@CohenCyril Thank you!"},{"author":"thery","date":"2018-11-22T14:54:41Z","comment":"@anton-trunov is this speed-up for the compilation of the library or for Feit-Thompson?"},{"author":"ejgallego","date":"2018-11-22T15:02:42Z","comment":"I am not sure if this is related, just in case: https://github.com/coq/coq/pull/396"},{"author":"gares","date":"2018-11-22T16:20:32Z","comment":"CC @maximedenes @ppedrot \r\n\r\nIIRC these copies of the first argument (replicated at the end of the record) were there to make the term comparison (of the kernel) fail early (since it goes right-to-left).\r\n\r\nMaybe it is never the case that the records touched by this PR needs to be compared as different by the kernel. Is there a way we can check this assertion? Is there a way to keep the parameter still there but ignore it at term comparison time (to be sure this is the place were we gain speed)?"},{"author":"anton-trunov","date":"2018-11-22T17:20:11Z","comment":"> @anton-trunov is this speed-up for the compilation of the library or for Feit-Thompson?\r\n\r\n@thery This is speedup for the compilation of all the packages in *this* repository, I didn't test `odd-order` repository.\r\nI also tested the speedups for each individual package, please see the updated initial message."},{"author":"ppedrot","date":"2018-11-22T18:25:08Z","comment":"The speedup profile looks similar to what was gained with coq/coq#8824, which was dropping useless conversion in match branches. Your patch is probably reducing the number of such conversions, hence the speedup. I'd be curious to see how this PR fares atop of a recent master containing the aforementioned tweak."},{"author":"anton-trunov","date":"2018-11-22T22:34:19Z","comment":">  I'd be curious to see how this PR fares atop of a recent master containing the aforementioned tweak.\r\n\r\n@ppedrot I updated the initial message (see updated table 1 and a new table 3).\r\n\r\nAmazing job the Coq devs did! Congrats!"},{"author":"gares","date":"2018-11-23T07:57:35Z","comment":"So this pr is a 10% speedup on top of the 100% speedup given by the coq patch recently merged, on the field component.\r\n\r\nI believe that it would be relevant to apply this pr, even if it was gaining nothing on the performance side, since it cleans up the structures. 10% is the cherry on top."},{"author":"CohenCyril","date":"2018-11-23T09:31:37Z","comment":"So before merging, I would like to\r\n1. have a benchmark on odd-order too, and\r\n2. have a regression test on failure cases for kernel comparison that used to be too slow... @ggonthier, @gares did you keep such examples somewhere?"},{"author":"anton-trunov","date":"2018-11-23T11:39:40Z","comment":"> have a benchmark on odd-order too\r\n\r\nIt turns out `odd-order` needs a 4-character fix, see [here](https://github.com/anton-trunov/odd-order/commit/10f523ff7d8ed1f52184dd61a56f35410ed18977)) before it can be compiled with this PR.\r\n\r\nWith that fix, I did a benchmark on the aforementioned laptop with Coq 8.10+alpha (coq/coq@8fb01564fba587142c2471708ff18219f1c64903).\r\n- Old: math-comp/odd-order@10f523ff7d8ed1f52184dd61a56f35410ed18977, mathcomp (967088a6f87405a93ce21971392c58996df8c99f)\r\n`make  906,10s user 13,57s system 99% cpu 15:23,02 total`\r\n\r\n- New: math-comp/odd-order@10f523ff7d8ed1f52184dd61a56f35410ed18977, mathcomp (27e3e35be9a6805e126df5b44a9bb5db9a561f5a)\r\n`make  889,57s user 13,55s system 99% cpu 15:06,49 total`\r\n\r\nResulting in 1.86% speedup (probably just noise).\r\n\r\nI hope this helps."},{"author":"ggonthier","date":"2018-11-23T15:27:20Z","comment":"As @gares pointed out, the sentinel repeated type is meant as a safeguard against potential divergence of the kernel comparison heuristic, when trying to compare _different_ structures based on _different_ types. The reason is that the heuristic compares right-to-left, so it would compare the classes before the carrier sort, and the classes of sorts that differ only in parameters (say, arrays of different sizes) will have deeply nested near-identical definitions, on which the heuristic performs very poorly. An example of this occurs in `field ext` where classes with the same sort but different parameters (the scalar field) are compared.\r\n  That said, as this kind of comparison has to fail, it is unlikely to occur during kernel checks, which always succeed. Failing comparisons are more common during matching in tactic interpretation, but that uses a left-to-right order, although it used to call the kernel on ground terms. If it no longer does so this extra precaution would indeed no longer be needed.\r\n  Your experiment seems to show this is the case, in which case this PR would be a welcome simplification.\r\n   That said, the performance figures are surprising and should concern the Coq developers. Since the redundant type also occurs earlier in the structure record, and is likely repeated many times inside the class sub record, it seems unlikely that removing it would result in any measurable performance gain on successful comparisons. It's perhaps the case that, contrary to my expectations, class comparisons can fail more efficiently than that of the corresponding sorts, but it seems more likely that some side-effect of the call-by-need evaluation is playing havoc with the successful comparisons, or else that the universe level assignment is acting out.\r\n  It should be worth checking out what's going on in the files in `field` and `character` where there are observable changes.\r\n  "},{"author":"anton-trunov","date":"2018-12-04T13:32:30Z","comment":"Rebased to fix a conflict with 03ad994dfee48e1a7b2b7091c45dfdcf4402f826"},{"author":"CohenCyril","date":"2018-12-06T10:19:42Z","comment":"Please also add a ChangeLog entry"},{"author":"anton-trunov","date":"2018-12-06T17:02:06Z","comment":"> Please also add a ChangeLog entry\r\n\r\n@CohenCyril Updated. Please let me know if you'd like to expand the entry."}],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":246,"state":"closed","open_date":"2018-11-15T11:16:41Z","update_date":"2019-03-22T13:20:13Z","discussion":[{"author":"anton-trunov","date":"2018-11-15T12:00:45Z","comment":"@CohenCyril Thanks for merging!"}],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":242,"state":"closed","open_date":"2018-11-12T08:45:39Z","update_date":"2019-03-22T13:20:08Z","discussion":[{"author":"amahboubi","date":"2018-11-12T08:53:40Z","comment":"Hi @anton-trunov, thanks for this PR. Yet before merging, I would like to wait for @ggonthier's feedback, since I believe he was the author of these `Canonical` declarations."},{"author":"anton-trunov","date":"2018-11-12T08:55:06Z","comment":"@amahboubi Sure thing! I would also love to learn from his input! Thanks."},{"author":"ggonthier","date":"2018-11-12T12:00:40Z","comment":"Making a mixin `Canonical` does serve a purpose: it lets type inference extrapolate the mixin and hence the corresponding packed class (when the mixing is also a class) from one of its value projections, just as one does for value projections of packed classes, such as `topred` in `predType`, or `val` and `Sub` in `subType`.\r\n  In the MathComp library this is only really implemented for `eqType`. The idea is that this makes it possible to rewrite right-to-left with lemma `eqE`, to fold back recursive comparisons after using partial evaluation to simplify a comparison on concrete instances.\r\n   The generic way to do this would be`rewrite eqE /= -!eqE`.\r\nThe reason one may need to fold back is that we need to give the full computational rule for recursive datatypes such as `nat` or `seq` _before_ we can declare a mixin, and thus it is not possible to use eq_op to do the recursive comparison.\r\n  This feature isn't used in the MathComp library, which favours using more precise specialisations of `-eqE`, such as `eqbE` or `eqseqE`, or even helpful corollaries like `eqSS` or `eqseq_cons`.\r\n   Despite this I still believe having a generic reversible `eqE` is useful, so I'd rather we let the `Canonical` declarations stand - perhaps while documenting it above `eqE` in the text, with a pointer in the `eqtype` file header.\r\n   We should point out that such `Canonical` declarations remove the need for specific inverses to `eqE` for new recursive , but can only be used for manifest mixing with a bespoke comparison function, and so is incompatible with `PcanEqMixin` and the like - this is why the `tree_eqMixin` for `GenTree.tree` in library `choice` is not declared `Canonical`."},{"author":"ggonthier","date":"2018-11-12T12:11:28Z","comment":"There is nevertheless one instance, in library `tuple`, of a `Canonical` `finMixin`. This could, in principle, make it possible to similarly fold the `Finite.enum` of a finite `tuple` type... but in practice will not work because the `mixin_enum` projector has been berried under an opaque alias, to avoid some nasty performance issues during type inference. Thus in that case you _have_ spotted an outdated `Canonical` declaration that has slipped by, and should indeed be changed to `Definition`.\r\n   Well done!"},{"author":"anton-trunov","date":"2018-11-12T17:32:09Z","comment":"@ggonthier Thank you very much for the explanation! Things are much clearer now.\r\n\r\n**(1)** I will restore the `Canonical` declarations and add some documenting comments.\r\n\r\n**(2)** If I understand correctly, declaring the mixins of *non-recursive* types as `Canonical` is still desirable if one wants to be less precise with rewriting context, e.g.`do ! [rewrite !eqE /= -!eqE].`\r\nBut this will break down for non-symmetrical equality operators such as `opt_eq` for `option` type, e.g.\r\n```coq\r\nLemma foo (b : bool) (o : option nat) :\r\n  (Some 42 == o) && (o == Some 42) && (b == false) && (false == b).\r\nProof.\r\ndo !rewrite !eqE /= -!eqE.\r\n\r\n(* the goal at this point is\r\n  oapp (fun n : nat => match n with\r\n                       | 42 => true\r\n                       | _ => false\r\n                       end) false o && (o == Some 42) && (b == false) && (false == b)\r\n*)\r\nAbort.\r\n```\r\nShould I try and fix this behavior?\r\n\r\n**(3)** It seems that `lfun_eqMixin` should *not* be declared as `Canonical`, as\r\n```coq\r\nCanonical lfun_eqMixin := Eval hnf in [eqMixin of 'Hom(aT, rT) by <:].\r\n```\r\nproduces\r\n```\r\nWarning: Projection value has no head constant: fun x y : 'Hom(aT, rT) => f2mx x == f2mx y in canonical instance lfun_eqMixin of Equality.op, ignoring\r\nit. [projection-no-head-constant,typechecker]\r\n```\r\n\r\n"},{"author":"ggonthier","date":"2018-11-12T17:42:54Z","comment":"Well observed, again!\r\n  Quick answers for (2) and (3): The fix for (2) would be to use an `Arguments` declaration to require both arguments be constructors for simplification to take place. That feature did not yet exist when the math comp library was written. Do note however that you suggested command is likely to diverge, as, if I recall correctly, `do ![tactic]` does not check for progress (perhaps it should?).\r\n   Finally, you are correct regarding `lfun` - well spotted, again."},{"author":"anton-trunov","date":"2018-11-13T09:13:28Z","comment":"> The fix for (2) would be to use an `Arguments` declaration to require both arguments be constructors for simplification to take place. \r\n\r\nThank you, `Arguments opt_eq [T] !_ !_.` seems to work fine.\r\n\r\n> if I recall correctly, `do ![tactic]` does not check for progress (perhaps it should?)\r\n\r\nMy experiments seem to show `do` does check for progress, but I could not find this in the docs. The manual says \"`!` the step tactic is repeated as many times as possible, and done at least once.\" Perhaps, @gares could clarify this a bit. If `do` really checks for progress, we could fix this behavior in Coq's test suite and add it to the manual."},{"author":"anton-trunov","date":"2018-11-13T09:48:05Z","comment":"I just pushed an updated version with more documenting commentaries. I'd be happy to add any improvements or clarifications!"},{"author":"anton-trunov","date":"2018-11-13T17:44:49Z","comment":"@ggonthier I tried to address some of your suggestions in two separate commits (I'll squash all three of the new commits afterwards). I hope I didn't miss any explicit comparison functions."},{"author":"anton-trunov","date":"2018-11-14T17:34:34Z","comment":"@ggonthier I squashed the commits, removed the redundant `eqE` description from the header and incorporated your suggestion for `pair_eq` as a `rel (T1 * T2)`."}],"tags":[],"pull_requests":[]},{"author":"ybertot","number":241,"state":"closed","open_date":"2018-11-05T15:53:26Z","update_date":"2019-03-22T13:20:03Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":239,"state":"closed","open_date":"2018-10-31T13:31:31Z","update_date":"2019-03-22T13:19:56Z","discussion":[{"author":"gares","date":"2018-10-31T14:44:57Z","comment":"It works for us, lets see if it works for Coq's CI too"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":236,"state":"closed","open_date":"2018-10-29T12:21:07Z","update_date":"2019-03-22T13:18:48Z","discussion":[{"author":"amahboubi","date":"2018-10-29T12:31:49Z","comment":"Could you also revert the aforementioned merge of @ppedrot 's hotfix?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":235,"state":"closed","open_date":"2018-10-26T08:20:24Z","update_date":"2019-03-22T13:18:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":234,"state":"closed","open_date":"2018-10-25T16:46:01Z","update_date":"2019-03-22T13:18:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":232,"state":"closed","open_date":"2018-10-03T10:16:28Z","update_date":"2019-03-22T13:18:07Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":230,"state":"closed","open_date":"2018-09-12T13:37:04Z","update_date":"2018-10-26T11:38:35Z","discussion":[{"author":"gares","date":"2018-10-25T15:07:13Z","comment":"Discussion at the meeting: keep `Lemma bool_irrelevance b (H1 H2 : is_true b) : H1 = H2.`"},{"author":"anton-trunov","date":"2018-10-25T18:14:57Z","comment":"@gares Thanks for sharing this. I am very interested in the Mathcomp contribution policy. Are there any plans of sharing it?\r\n\r\nI guess the policy would shed some light on the motivation for this particular decision. Was it backward compatibility or some other considerations as well?"},{"author":"gares","date":"2018-10-25T19:42:07Z","comment":"The statement up there is different, so it is not about backward compatibility. I guess the old statement was a but wrong, while this one states a property that is relevant to math comp, even if the lemma is not strictly necessary in this form. At least, this was my understanding of the discussion."}],"tags":[{"tag":"kind: wontfix","description":"Issue that might never be attended."}],"pull_requests":[]},{"author":"hivert","number":228,"state":"closed","open_date":"2018-09-11T17:39:23Z","update_date":"2019-03-22T13:18:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ybertot","number":226,"state":"closed","open_date":"2018-09-11T13:47:35Z","update_date":"2018-12-11T09:53:31Z","discussion":[{"author":"pi8027","date":"2018-09-11T14:53:50Z","comment":"Hello. I have used `fconnect` and related lemmas to reason about union-find. My situation is a bit different but this would be nice!\r\n\r\nI found that `fconnect_step_cycle_orbit` and `fconnect_step` can be a bit generalized like this:\r\n\r\n```coq\r\nLemma fconnect_step_cycle_orbit x : fconnect f (f x) x = fcycle f (orbit x).\r\nProof.\r\napply/idP/idP.\r\n- move => c; move: (c); rewrite fconnect_orbit; case/trajectP => k Hk kq.\r\n  have oeq : order x = order (f x).\r\n    apply: eq_card=> y; rewrite !inE; apply/idP/idP; apply/connect_trans => //.\r\n    by apply/fconnect1.\r\n  suff ko : k.+1 = order x.\r\n    rewrite /orbit -orderSpred /= rcons_path /= fpath_traject andTb.\r\n    by rewrite last_traject -ko -iterS iterSr -kq eqxx.\r\n  move: Hk (orbit_uniq x); rewrite -oeq leq_eqVlt => /predU1P [-> // |].\r\n  rewrite /orbit -orderSpred ltnS /= => Hk /andP [] /negP [].\r\n  by apply/trajectP; exists k.\r\n- move: (fconnect1 x); rewrite !fconnect_orbit => H cyco.\r\n  apply/trajectP; rewrite (cycle_orbit_order_eq cyco H) {H}.\r\n  rewrite -orderSpred; exists (order x).-1 => //.\r\n  by rewrite -iterSr orderSpred cycle_orbit_iter_order.\r\nQed.\r\n\r\nLemma fconnect_step x y : fconnect f x y = (x == y) || fconnect f (f x) y.\r\nProof.\r\napply/idP/idP => [/iter_findex <- | /predU1P [<- |] //].\r\n- by case: (findex x y) => [| i]; rewrite ?eqxx // iterSr fconnect_iter orbT.\r\n- by apply/connect_trans/fconnect1.\r\nQed.\r\n```"},{"author":"pi8027","date":"2018-09-12T05:36:07Z","comment":"The proof of `order_step` can be simplified as follows by using above `fconnect_step`:\r\n\r\n```coq\r\nLemma order_step x :\r\n  order x = order (f x) /\\ iter (order x) f x = x \\/\r\n  order x = (order (f x)).+1.\r\nProof.\r\nhave [| /negP noc] := boolP (fconnect f (f x) x); last first.\r\n  right; rewrite /order; set M := fconnect f (f x); set N := pred1 x.\r\n  have ->: #|fconnect f x| = #|[predU N & M]|\r\n    by apply: eq_card=> z; rewrite !inE fconnect_step eq_sym.\r\n  rewrite -[LHS]addn0 -add1n -(card1 x) -cardUI; congr addn.\r\n  by rewrite eq_card0 // => z; rewrite !inE; apply/negP => /andP [/eqP ->].\r\nrewrite fconnect_step_cycle_orbit.\r\nleft; split; last by apply: cycle_orbit_iter_order.\r\nby apply/esym/cycle_orbit_order_eq; rewrite // -fconnect_orbit fconnect1.\r\nQed.\r\n```"},{"author":"ybertot","date":"2018-09-12T12:26:57Z","comment":"@pi8027, can you package your two suggestions in a pull request to branch fingraph-complements of ybertot/math-comp?   This way your contribution will be attributed to you."},{"author":"pi8027","date":"2018-09-13T14:46:20Z","comment":"@ybertot Thanks for merging. I think that `fcycle f (orbit f x)` ---more intuitively, `x` is in the cyclic part of the \"lasso\" or not--- is a fundamental condition of vertices in the finite graphs generated by `frel`, and there are more useful equivalent conditions and theorems around it. But I have no time to write out and reorganize them now..."},{"author":"CohenCyril","date":"2018-10-31T16:26:14Z","comment":"@ybertot please rebase on top of master."},{"author":"CohenCyril","date":"2018-11-20T12:00:22Z","comment":"@ybertot do you have any plans on progressing on this PR in the near future?"},{"author":"ybertot","date":"2018-11-20T12:10:17Z","comment":"Expect an action by Nov. 28."},{"author":"CohenCyril","date":"2018-12-11T09:53:31Z","comment":"Accidentally closed"}],"tags":[],"pull_requests":[]},{"author":"strub","number":224,"state":"closed","open_date":"2018-09-03T13:35:49Z","update_date":"2019-03-22T13:17:48Z","discussion":[{"author":"CohenCyril","date":"2018-09-05T08:05:47Z","comment":"@strub thanks! \r\n@bgregoir what are the lemmas you usually have about `all2`?"},{"author":"bgregoir","date":"2018-09-05T13:37:19Z","comment":"I think that the lemma all2P (of the pull request) is the only one needed.\nMost of the time, proof is done by induction and the only important part is the fact that all2 simplify.\nB\n\n> Le 5 sept. 2018 à 10:05, Cyril Cohen <notifications@github.com> a écrit :\n> \n> @strib <https://github.com/strib> thanks!\n> @bgregoir <https://github.com/bgregoir> what are the lemmas you usually have about all2?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/math-comp/math-comp/pull/224#issuecomment-418638243>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAoZ7II4j9qKhz-xlGkydCBBZCiqirKVks5uX4XdgaJpZM4WXofI>.\n> \n\n"},{"author":"gares","date":"2018-09-06T07:11:38Z","comment":"I imagine we also want `Arguments all2 {T U} p !s1 !s2.` so that it unfolds only when *both* lists are concrete."},{"author":"amahboubi","date":"2018-09-10T13:21:34Z","comment":"Hi, I do not understand why we need the fixpoint at all. I would have defined `all2` as the right hand-side of `all2E`."},{"author":"bgregoir","date":"2018-09-10T13:22:58Z","comment":"\n\n> Le 10 sept. 2018 à 15:21, Assia Mahboubi <notifications@github.com> a écrit :\n> \n> Hi, I do not understand why we need the fixpoint at all. I would have defined all2 as the right hand-side of all2E.\n> \n> \n    The computation behaviour of the  right hand-side is not very good.\nB\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/math-comp/math-comp/pull/224#issuecomment-419909587>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAoZ7OWXclfcDC_MyjmknXN1lLxfZshUks5uZmdfgaJpZM4WXofI>.\n> \n\n"},{"author":"strub","date":"2018-09-10T13:22:58Z","comment":"Because the right hand side of allE has a bad behaviour w.r.t. reduction. @bgregoir may have more insights about this."},{"author":"amahboubi","date":"2018-09-10T13:30:48Z","comment":"@bgregoir, can you give an example of behaviour you do not like?"},{"author":"bgregoir","date":"2018-09-10T14:05:50Z","comment":"Reduction of all2 f (a::b) (c::d) —> f a c && all2 f b d\n\n> Le 10 sept. 2018 à 15:31, Assia Mahboubi <notifications@github.com> a écrit :\n> \n> @bgregoir <https://github.com/bgregoir>, can you give an example of behaviour you do not like?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/math-comp/math-comp/pull/224#issuecomment-419912584>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAoZ7KAggIzenMuRQArQHObKCojT8Cynks5uZmmegaJpZM4WXofI>.\n> \n\n"},{"author":"bgregoir","date":"2018-09-10T14:34:10Z","comment":"Maybe my last email is not very clear.\n\n> Reduction of all2 f (a::b) (c::d) —> f a c && all2 f b d\n\nThis is a reduction that I like that we do not have using zip and length.\nWe can add the rewriting rule, but it will not be reduction.\nB \n\n\n> Le 10 sept. 2018 à 16:05, bgregoir <benjamin.gregoire@inria.fr> a écrit :\n> \n> Reduction of all2 f (a::b) (c::d) —> f a c && all2 f b d\n> \n>> Le 10 sept. 2018 à 15:31, Assia Mahboubi <notifications@github.com <mailto:notifications@github.com>> a écrit :\n>> \n>> @bgregoir <https://github.com/bgregoir>, can you give an example of behaviour you do not like?\n>> \n>> —\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub <https://github.com/math-comp/math-comp/pull/224#issuecomment-419912584>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAoZ7KAggIzenMuRQArQHObKCojT8Cynks5uZmmegaJpZM4WXofI>.\n>> \n> \n\n"},{"author":"amahboubi","date":"2018-09-10T15:06:57Z","comment":"Sure, this is where the two definitions differ. You certainly know best, as you have been the one using it. However, I guess that we should consider including a minimal theory, if we include this definition in `seq`. At least fixpoint equations, but may be also connections with `allpairs`, `cat`, `subseq`,etc. I do not want to block the merge though."},{"author":"amahboubi","date":"2018-09-24T13:34:29Z","comment":"I do not know what to do here:\r\n- github tells me this PR now has conflicts\r\n- I do not think the change is worth 7 commits.\r\n\r\nCan you at least squash?"},{"author":"strub","date":"2018-09-24T13:35:35Z","comment":"I can resolve the conflicts. If I understand well, this is then up to you to squash the commit by choosing the correct merge option."},{"author":"amahboubi","date":"2018-09-24T13:40:46Z","comment":"It seems it's a global option of the repo:\r\nhttps://help.github.com/articles/about-pull-request-merges/\r\nwhich is apparently not set for math-comp."},{"author":"amahboubi","date":"2018-09-24T13:43:07Z","comment":"Yes, it is set, sorry: I just did not realize I had access to a menu for merging pull requests. I will merge as soon as travis is ok with it."},{"author":"CohenCyril","date":"2018-09-24T15:10:00Z","comment":"@strub \r\n> this is then up to you to squash the commit by choosing the correct merge option.\r\n\r\nThe problem is: github has no option for squashing and creating a merge commit :disappointed: "},{"author":"amahboubi","date":"2018-09-24T15:17:32Z","comment":"Isn't it what I just did?"},{"author":"CohenCyril","date":"2018-09-24T15:25:33Z","comment":"> Isn't it what I just did?\r\n\r\nNo, there is no merge commit, just commit 5f8d45b54aa98732ec3de43d91814459d5a2f2e4 as you can see in https://github.com/math-comp/math-comp/commits/master\r\n\r\n"},{"author":"strub","date":"2018-09-24T15:27:52Z","comment":"On the other end, what the point of having a merge commit when you squash the development into one commit?"}],"tags":[],"pull_requests":[]},{"author":"gares","number":223,"state":"closed","open_date":"2018-09-03T13:03:32Z","update_date":"2019-12-26T11:43:24Z","discussion":[{"author":"gares","date":"2018-09-03T16:27:26Z","comment":"I've no clue why, but it seems to break 8.8 and 8.7, while work on 8.6 and master. Ideas?"},{"author":"Zimmi48","date":"2018-09-04T08:05:21Z","comment":"The error is:\r\n```\r\nFile \"./ssreflect/ssrfun.v\", line 2, characters 29-41:\r\nError:\r\nCannot find a physical path bound to logical path matching suffix\r\n<> and prefix mathcomp.\r\n```\r\nI cannot see how this could possibly be connected to this PR, but if it is, it must be a bug in coq_makefile or how it is used in math-comp. Have you tried testing only the changes in the `.v` files? That would be enough for now."},{"author":"Zimmi48","date":"2018-09-04T13:50:32Z","comment":"The push check passed. The pr check started later but it should give the same result."},{"author":"gares","date":"2018-09-04T14:25:16Z","comment":"I think it is ready for merge now."},{"author":"Zimmi48","date":"2018-09-06T08:57:33Z","comment":"@gares or @amahboubi Can you merge? This is needed to know what other projects depending on math-comp are requiring fixes."}],"tags":[],"pull_requests":[]},{"author":"hivert","number":221,"state":"closed","open_date":"2018-08-26T14:51:36Z","update_date":"2021-07-03T22:07:55Z","discussion":[{"author":"ggonthier","date":"2018-12-10T08:35:24Z","comment":"This contribution addresses an important gap in the finite group library, namely the lack of support for the symmetry groups `Sym(X)`. This is a historical accident: permutations were initially implemented to support matrix operations (mainly, determinants), then support for group automorphism `Aut(X)` was developed, skipping over `Sym(X)` as this was not required for the Odd Order proof. The study of `Alt(X)` was primarily intended as an application, and thus never fully integrated in the library.\r\nThis is too important a topic to be handled piecewise; I suggest we work on a comprehensive PR that fully addresses it, and is consistent with the rest of the library. This means including your results on the decomposition in cycles, as well as support for cycle notation and structure, and n-transitivity. Some work will have to go in renaming: `perm_ong` should really be called `Sym`, `pcycle` in `perm.v` should really be called `porbit`, for instance."},{"author":"hivert","date":"2018-12-10T17:22:13Z","comment":"Dear Georges, \r\n\r\nI'm quite happy that you consider this part of the development worthwhile being included in MathComp. Right now my main question is how to proceed further. I considered the few lemma proposed here as a requirement for the inclusion (in whatever form) of the cycle.v file. "},{"author":"CohenCyril","date":"2018-12-11T10:40:39Z","comment":"Hi @hivert, if I am right, @ggonthier suggests you put all of your contributions to the symmetric group in one single PR (you may amend this one), so as to review and extend it globally rather than bits by bits."},{"author":"ggonthier","date":"2018-12-11T16:03:44Z","comment":"Dear Florian, @CohenCyril is right. Peaking at `Coq-combi`, I think we'll need a few more results (see above) in order to do the topic justice. The finite group library mostly follows Aschbacher's Finite Group Theory textbook, so I'd like to use chapter 5 as a source for results and notation.\r\n  It's clear that some notation from both `perm.v` and your own `cycle.v` will need to be changed. I must confess I didn't put enough thought into names in `perm.v` because I viewed `perm_on`, `pcycle` and `cycles` as mere stepping stones to get to `Aut` and `odd_perm`.\r\n   Reviewing the textbook, a \"cycle\" is a permutation (not its support), so I should have used 'Sym', 'porbit' and 'porbits'. The text uses Fix(A) and Mov(A) to describe the fixed and moved points of a set of permutations, but we could also use `psupport s` for the moved points of a single permutation\r\n(`support s` would conflict with an `ssralg` definition that is used for characters). We should also avoid `cyclic`, which is heavily used for groups; luckily it seems the more modern term is `circular`, which doesn't conflict with anything.\r\n  Finally, I'd like to unify as much as possible the group isomorphism construction, and generalise the one given in `automorphism.v` rather than creating a new one from scratch. We can still have a variety of isomorphism lemmas; my experience is that these are more useful in practice, because it\r\nis usually more efficient to use `isogP` to get a new isomorphism constant than to mess around with explicit instances of a generic construction."},{"author":"amahboubi","date":"2019-02-28T17:19:33Z","comment":"Hi @hivert! We discussed your PR at the MathcompDev meeting today. How\r\ncan we help this PR progress? For instance, would an explicit todo list\r\nhelp? Also, it's absolutely fine if you have no more time left to devote\r\nto this particular PR, in which case we (the devs) could also take over\r\nthe finalization of the work entirely."},{"author":"amahboubi","date":"2019-05-21T09:28:05Z","comment":"Hi @hivert ! @ybertot told us today that the two of you discussed in person, and that you agreed to let us take over this PR. Many thanks!"},{"author":"hivert","date":"2019-05-21T11:49:28Z","comment":"@amahboubi  Sure ! Please take what you want from my code. Sorry, I forgot to reply... "},{"author":"amahboubi","date":"2019-05-21T12:05:14Z","comment":"No worries, once again, thanks for your contribution."},{"author":"affeldt-aist","date":"2020-04-05T18:08:04Z","comment":"I tried to address in a minimal way comments about this PR.\r\n- @amahboubi suggested a simplification of card_Sn, which requires an\r\n  intermediate lemma, relying on a generalization of subsetT (for all\r\n  pred instead of all set) but this generalization requires the\r\n  addition of pred_of_set here and there in the library\r\n- @ggonthier suggested to work on a comprehensive PR to address the\r\n  lack of support for the symmetry group Sym(X). See his comments for\r\n  details. In a nutshell:\r\n  + source for results and notations: Aschbacher's Finite Group Theory Chap. 5\r\n  + use `psupport s` for the moved points of a single permutation\r\n  + use `circular` instead of `cyclic`\r\n  + generalize the group isomorphism construction from `automorphism.v`\r\n"},{"author":"affeldt-aist","date":"2020-04-06T10:02:59Z","comment":"Regarding the suggestion by @ggonthier to work on a comprehensive PR, we would like to reproduce part of the discussion that happened here as a new issue to keep track and eventually trigger a PR."},{"author":"affeldt-aist","date":"2020-04-07T16:36:03Z","comment":"I have updated `CHANGELOG_UNRELEASED` @CohenCyril "},{"author":"affeldt-aist","date":"2020-04-07T19:57:28Z","comment":"> can you doublecheck my suggestions?\r\n\r\ndone"},{"author":"ybertot","date":"2020-04-09T12:26:36Z","comment":"@CohenCyril, can we conclude?"},{"author":"CohenCyril","date":"2020-04-09T13:04:49Z","comment":"> @CohenCyril, can we conclude?\r\n\r\nSome proofs are not in the mathcomp ssreflect style, please merge first and I will quickly submit a PR to fix them."},{"author":"affeldt-aist","date":"2020-04-09T13:14:21Z","comment":"I have recorded the suggestion by @ggonthier as issue #478 for the sake of visibility."},{"author":"amahboubi","date":"2020-04-15T09:31:23Z","comment":"@affeldt-aist @ybertot: you have both recently contacted me offline but I would prefer to discuss here. What are you expecting from my side concerning this PR?\r\n"},{"author":"affeldt-aist","date":"2020-04-15T10:17:56Z","comment":"> @affeldt-aist @ybertot: you have both recently contacted me offline but I would prefer to discuss here. What are you expecting from my side concerning this PR?\r\n\r\nWe did address several of your comments but not all of them.\r\nWe wanted to tell you and make sure whether you think it is reasonable.\r\n\r\nHere are details:\r\nYou suggested a simplification of `card_Sn`, which requires an\r\nintermediate lemma, relying on a generalization of `subsetT` (for all\r\n`pred`s instead of all `set`s) but this generalization requires the\r\naddition of `pred_of_set` here and there in the library so we did not implement it.\r\n(We addressed your other comments about documentation and renamings.)\r\n\r\nRegarding the suggestion by @ggonthier we decided not to address it in this\r\nPR and to record it as an issue for later:\r\nhttps://github.com/math-comp/math-comp/issues/478\r\n(However, we did address the comments about renamings and moved lemmas around\r\nfollowing new suggestions by @CohenCyril .)\r\n"},{"author":"amahboubi","date":"2020-04-15T10:53:30Z","comment":"@affeldt-aist thanks for clarifying. Is there a reason why not creating an issue for my unaddresed suggestion as well? In case no, I just created one using github's facility. \r\nI do not have enough time to allocate to this right now and this should not block the release process."},{"author":"amahboubi","date":"2020-04-15T10:54:49Z","comment":"Note that the link automatically created does not work properly, does anyone know how to properly point to the entire conversation?"},{"author":"CohenCyril","date":"2020-04-15T11:04:51Z","comment":"> Note that the link automatically created does not work properly, does anyone know how to properly point to the entire conversation?\r\n\r\nI did it. (You can click on the \"...\" symbol and then \"copy link\" to get the permalink to any comment in any thread)"},{"author":"affeldt-aist","date":"2020-04-15T11:10:33Z","comment":"> Is there a reason why not creating an issue for my unaddresed suggestion as well?\r\n> In case no, I just created one using github's facility.\r\n\r\nI did not create an issue right away because I was hoping that a solution might have emerged out of this discussion. At this point, recording the issue is the right thing to do imho.\r\n"},{"author":"amahboubi","date":"2020-04-15T12:18:00Z","comment":"> > Note that the link automatically created does not work properly, does anyone know how to properly point to the entire conversation?\r\n> \r\n> I did it. (You can click on the \"...\" symbol and then \"copy link\" to get the permalink to any comment in any thread)\r\n\r\nThanks, and thanks for the tip!"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":219,"state":"closed","open_date":"2018-08-08T15:20:41Z","update_date":"2019-03-22T13:17:32Z","discussion":[{"author":"amahboubi","date":"2018-09-24T13:51:10Z","comment":"I do not know what to do with this PR. I am unable to review without at least a small description of the pb.\r\n@gares may be more relevant as a reviewer?"},{"author":"gares","date":"2018-09-24T18:38:41Z","comment":"I'd be happy if the code could call\r\n```\r\n$ ~/COQ/coq/bin/coqtop -print-version\r\n8.9+alpha 4.06.0\r\n```\r\nand \"parse\" that string, that was made easier to parse (the second version is the ocaml compiler)"},{"author":"CohenCyril","date":"2018-10-26T08:15:14Z","comment":"@gares actually `-print-version` seems to be unavailable for coq 8.6, so the modification you suggest actually implies dropping support..."},{"author":"CohenCyril","date":"2018-10-26T08:56:25Z","comment":"@gares I'd rather push this fix first, and later make another PR taking your remark into account and drop 8.6 when there is a consensus. I left a comment in the `Makefile.common` with the instructions."},{"author":"gares","date":"2018-10-26T09:02:53Z","comment":"I guess I added --print-version on 8.6, and then the more standard -print-version was also added. Could you try that? (I don't have a 8.6 around)"},{"author":"CohenCyril","date":"2018-10-26T09:43:58Z","comment":"> I guess I added --print-version on 8.6, and then the more standard -print-version was also added. Could you try that? (I don't have a 8.6 around)\r\n\r\nWith nix, coq 8.6 was around in a few seconds :heart: "},{"author":"gares","date":"2018-10-26T18:08:24Z","comment":"I'm a bit lost. Is the change I propose doable on 8 6 too or not? If not I shall merge as is. Else I should wait for a fix."},{"author":"CohenCyril","date":"2018-10-26T18:37:27Z","comment":"@gares the fix was made (unless there is more to fix than I thought) and it passed."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":218,"state":"closed","open_date":"2018-08-07T17:27:31Z","update_date":"2019-03-22T13:17:07Z","discussion":[{"author":"gares","date":"2018-08-11T10:51:35Z","comment":"I think the changes should mention this (maybe someone is using this directly and forgot to import ssrfun)."},{"author":"CohenCyril","date":"2018-09-12T13:45:21Z","comment":"Should it be delayed to release 1.8.0 then?"}],"tags":[{"tag":"kind: bug","description":"Issue which describe bugs"},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"pull_requests":[]},{"author":"CohenCyril","number":217,"state":"closed","open_date":"2018-08-07T17:11:13Z","update_date":"2019-03-22T13:16:46Z","discussion":[{"author":"thery","date":"2018-10-25T07:38:58Z","comment":"merging before the meeting "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":216,"state":"closed","open_date":"2018-08-07T16:05:54Z","update_date":"2019-03-22T13:16:34Z","discussion":[{"author":"CohenCyril","date":"2018-08-07T16:07:00Z","comment":"Depends on #201, please review only commit 0d41046cff37af7b85da0e771e3d25a4c640edbf"},{"author":"CohenCyril","date":"2018-08-12T20:38:11Z","comment":"@gares I could swear I saw a review from you in my notifications about this PR, however I cannot find it here... was I dreaming?"},{"author":"amahboubi","date":"2018-09-03T09:25:25Z","comment":"Hi @CohenCyril. This PR has more content than the title suggests. I see several independent natures of things: 1) lemmas in seq and (yet other) variants of contraposition with equalities 2) homo-mono-morphisms 3) generalization of extremas 4) infrastructures for chains of equivalences. I would agree to approve 1) and also may be 3) right away. I have a few questions about 2) and 4)."},{"author":"CohenCyril","date":"2018-09-03T12:18:49Z","comment":"> Hi @CohenCyril. This PR has more content than the title suggests. I see several independent natures of things: 1) lemmas in seq and (yet other) variants of contraposition with equalities 2) homo-mono-morphisms 3) generalization of extremas 4) infrastructures for chains of equivalences. I would agree to approve 1) and also may be 3) right away. I have a few questions about 2) and 4).\r\n\r\nHi @amahboubi, this is a dependent PR, you can post your comments about 1)2)3) in #201, only comments about 4) may go here.\r\n\r\n"},{"author":"CohenCyril","date":"2018-09-05T08:30:24Z","comment":"Hi @amahboubi, thanks for your comments.\r\nAn example is here: https://github.com/math-comp/finmap/blob/various_improvements/finmap.v#L2964-L2996"},{"author":"CohenCyril","date":"2018-09-10T13:11:20Z","comment":"> I think this is ok, but I would like to see an example of instance before merging. For now, it is a lone piece of infrastructure.\r\n\r\nDo you want to see examples inside the mathcomp library? Or is my finmap example enough?"},{"author":"amahboubi","date":"2018-09-11T16:21:48Z","comment":"Thanks for the pointer, @CohenCyril no I think this one is enough. I guess it is clear enough that the literature features \"the following are equivalent\"-style statements (hence the TFAE acronym naming of the aforementioned thread). May be would it be worth having this exact wording in a comment."},{"author":"CohenCyril","date":"2018-09-12T09:41:03Z","comment":"> May be would it be worth having this exact wording in a comment.\r\n\r\nOK"},{"author":"CohenCyril","date":"2018-09-12T09:43:06Z","comment":"BTW, when I have the time, I also want to contribute an extension of this where, when you want to prove the TFAE, you provide a graph, that can be computationally checked is strongly connected (by dfs, or Tarjan (e.g. https://github.com/CohenCyril/tarjan) :)) and we generate the implications to prove from the arrows of the graph."},{"author":"amahboubi","date":"2018-09-12T09:45:16Z","comment":"I am wondering: is it the appropriate workflow? I would like both to merge this (once you've implemented the 2 minor changes I requested) and to continue the discussion. It probably depend on when you want this to be merged."},{"author":"CohenCyril","date":"2018-09-12T09:51:07Z","comment":"When this pull request is merged, we should move the discussion to an issue we create to continue the discussion and start by refering to this PR for the record. Note also that we must not merge this pull request yet since it depends on PR #201"},{"author":"amahboubi","date":"2018-09-12T09:55:09Z","comment":">  Note also that we must not merge this pull request yet since it depends on PR #201\r\n\r\nBut the code for the \"circular implications\" stuff is in fact independent isn't it?"},{"author":"CohenCyril","date":"2018-09-12T10:39:16Z","comment":"> But the \"circular implication\" code is in fact independent isn't it?\r\n\r\nNo, it relies on `homo_ltn`"},{"author":"amahboubi","date":"2018-09-13T09:37:49Z","comment":"This dependency is blocking an easier merge. Are your sure this is not overkill? \r\nIn my opinion the dependency is not essential: without the machinery introduced by #201, `homo_ltn` is an easy 2-liner:\r\n\r\n```\r\nLemma homo_ltn T (f : nat -> T) (r : T -> T -> Prop) :    \r\n  (forall y x z, r x y -> r y z -> r x z) ->    \r\n  (forall i, r (f i) (f i.+1)) -> {homo f : i j / i < j >-> r i j}.    \r\nProof.    \r\nmove=> rtrans rfS x y; elim: y x => // y ihy x; rewrite ltnS leq_eqVlt.\r\ncase/orP=> [/eqP-> // | ltxy]; apply: rtrans (rfS _); exact: ihy.\r\nQed.\r\n```"},{"author":"CohenCyril","date":"2018-09-13T11:36:33Z","comment":"> This dependency is blocking an easier merge. Are your sure this is not overkill?\r\n\r\nI would not say \"overkill\" is the word (because #201 is way more useful to me than this one in my other developments), but it can be made temporarily independent, yes. I rebased, if you are happy with the modifications, you can merge. I'll fix the proof again in €201."},{"author":"amahboubi","date":"2018-09-13T12:00:34Z","comment":"Agreed, my \"overkill\" referred to the dependency. Now the PR is much cleaner I think, thanks!\r\n"},{"author":"amahboubi","date":"2018-09-13T12:00:50Z","comment":"Last question before merging (once checks have all completed). I am wondering about how to formalize best the fact that proving any item of a TFAE is proving the conjunction of statements. But if you prefer, I can merge first and ask this question again in an issue."},{"author":"CohenCyril","date":"2018-09-13T14:04:09Z","comment":"> But if you prefer, I can merge first and ask this question again in an issue.\r\n\r\nyes please"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":214,"state":"closed","open_date":"2018-08-01T11:29:39Z","update_date":"2019-03-22T13:15:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":213,"state":"closed","open_date":"2018-07-31T09:01:47Z","update_date":"2019-03-22T13:13:57Z","discussion":[{"author":"CohenCyril","date":"2018-07-31T15:26:57Z","comment":"@gares I updated my pull request, what do you think now?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":211,"state":"closed","open_date":"2018-07-29T14:27:09Z","update_date":"2020-04-08T09:30:06Z","discussion":[{"author":"CohenCyril","date":"2018-07-30T21:17:13Z","comment":"Hi @pi8027! I have had this small dev pending for a while, and after listening to your talk I revived it.\r\nThe difference with you work is the fact that the shapes of the terms have to be provided by hand, and the comparison function is not using a merge sort but some kind of spaghetti sort instead.\r\nThere would be some ltac plumbery to do to compute the shapes from `LHS` and `RHS` in ltac and `apply: (AC shape_lhs shape_rhs).`"},{"author":"pi8027","date":"2018-07-31T05:15:51Z","comment":"@CohenCyril I discovered many clever techniques in your code! I am especially surprised that your \"spaghetti sort\" can be done in O(n log n). Thanks for sharing your work.\r\n\r\nHere I point out an issue I found (but I don't know how can we solve it...):\r\n- https://github.com/CohenCyril/math-comp/blob/aab7a3be907430c131f51c844686c56de24c8bcf/mathcomp/ssrtest/test_ssrAC.v#L5,\r\n  https://github.com/CohenCyril/math-comp/blob/aab7a3be907430c131f51c844686c56de24c8bcf/mathcomp/ssrtest/test_ssrAC.v#L9\r\n  Some `orb_comoid`s and `addn_comoid`s are left in the goal after rewriting."},{"author":"pi8027","date":"2018-07-31T05:45:57Z","comment":"- https://github.com/CohenCyril/math-comp/blob/aab7a3be907430c131f51c844686c56de24c8bcf/mathcomp/ssreflect/ssrAC.v#L210\r\n  `have: pat' = ord by reflexivity` can be replaced with `unify pat' ord` or `unify pat ord`. It would be a smarter way to invoke the convertibility test.\r\n- https://github.com/CohenCyril/math-comp/blob/aab7a3be907430c131f51c844686c56de24c8bcf/mathcomp/ssreflect/ssrAC.v#L213\r\n  In this context, `vm_compute; reflexivity` seems to be equivalent to `reflexivity`. (I don't know which one is efficient.)"},{"author":"CohenCyril","date":"2018-07-31T07:18:58Z","comment":"@pi8027 Thank you for your positive feedback! I am glad you found it interesting.\r\n\r\n> I am especially surprised that your \"spaghetti sort\" can be done in O(n log n). Thanks for sharing your work.\r\n\r\nI did not take the time to check (did you?) but I believe it is indeed O(n log n) in time and a call stack of size O(log n).\r\n\r\n> Some orb_comoids and addn_comoids are left in the goal after rewriting.\r\n\r\nThis is unavoidable when the rule is quantified over a monoid law, (indeed lemmas `Monoid.mulm1` ... leave similar overhead). The goal can be simplified using `/=`, and if you really do not want this, you may use the `op.[AC p s]` rule instead.\r\n\r\n> have: pat' = ord by reflexivity can be replaced with unify pat' ord or unify pat ord. It would be a smarter way to invoke the convertibility test.\r\n\r\nAFAIK, `unify x y` invokes unification, which in this case is not necessary because the terms must be ground, and it might be less efficient (wouldn't it?)\r\n\r\n> In this context, vm_compute; reflexivity seems to be equivalent to reflexivity. (I don't know which one is efficient.)\r\n\r\n`vm_compute; reflexivity` inserts a vm cast to make the computation using the VM instead of the abstract machine, so should be more efficient. I guess this whole `ltac: ()` notation could be replaced by `(isT <: _)`, but it would prevent me from producing a nice error message."},{"author":"CohenCyril","date":"2018-07-31T07:22:06Z","comment":"@maximedenes this is how I encountered the issue https://github.com/coq/coq/issues/8190"},{"author":"pi8027","date":"2018-08-01T03:13:37Z","comment":"@CohenCyril\r\n\r\n> I did not take the time to check (did you?) but I believe it is indeed O(n log n) in time and a call stack of size O(log n).\r\n\r\nProof. Let us suppose that a reordering `s: syntax` consists of m leaves and the largest leaf in `s` is n. It is easy to check that the height of `acc: env N` is always less than or equal to (log_2 n + 1) during the execution of `content s`. Each `set_pos 0%num Nsucc acc n` does only two things: [part 1: O(log n)] reconstructs a path in `acc` from the root to the node of position `n` and [part 2: O(log m)] increments the node value of position `n`. The whole sorting process `content s` repeats `set_pos ...` m times and can be done in O(m log(nm)). In this usage, well-formed reordering syntax holds the equation n = m (right?). So the sorting can be done in O(n log n) time complexity. ■\r\n\r\nHowever, `content` may consume the call stack linearly. I think that it can't be solved.\r\n\r\n> This is unavoidable when the rule is quantified over a monoid law, (indeed lemmas Monoid.mulm1 ... leave similar overhead). The goal can be simplified using /=, and if you really do not want this, you may use the op.[AC p s] rule instead.\r\n\r\nI understood it. Thank you.\r\n\r\n> vm_compute; reflexivity inserts a vm cast to make the computation using the VM instead of the abstract machine, so should be more efficient. I guess this whole ltac: () notation could be replaced by (isT <: _), but it would prevent me from producing a nice error message.\r\n\r\nI compared `reflexivity` and `vm_compute; reflexivity` in some examples. You were right!\r\n\r\n> AFAIK, unify x y invokes unification, which in this case is not necessary because the terms must be ground, and it might be less efficient (wouldn't it?)\r\n\r\nI compared two normalized ground terms by `unify` and `reflexivity`. The following example seems to indicate that the `unify` tactic is slightly better on efficiency.\r\n\r\n```\r\nRequire Import ssreflect Arith ZArith.\r\n\r\nGoal False.\r\nProof.\r\nlet x := constr: ((1000 ^ 2000)%Z) in\r\nlet y := constr: ((1000000 ^ 1000)%Z) in\r\nlet x' := eval vm_compute in x in\r\nlet y' := eval vm_compute in y in\r\n(time unify x' y');\r\n(time let _ := constr: (eq_refl _ : x' = y') in idtac);\r\n(time have _: x' = y' by reflexivity).\r\n(*\r\nTactic call ran for 0.007 secs (0.007u,0.s) (success)\r\nTactic call ran for 0.02 secs (0.019u,0.s) (success)\r\nTactic call ran for 0.179 secs (0.18u,0.s) (success)\r\n*)\r\nAbort.\r\n```"},{"author":"CohenCyril","date":"2018-08-01T08:02:01Z","comment":"@pi8027 \r\n> Proof [...] ■\r\n\r\nYeah I'm convinced by your proof.\r\n\r\n> However, `content` may consume the call stack linearly. I think that it can't be solved.\r\n\r\nI'd say both `content` and `set_pos` occupy O(log n) of the stack each, because there is one non tail recursive call in each.\r\nI replaced `set_pos` by a tail recursive alternative `set_pos_trec` (using Huet's zipper), so that only the non tail recursive calls of `content` consume the stack, and I think that is the best I can do.\r\n\r\n> I compared two normalized ground terms by `unify` and `reflexivity`. The following example seems to indicate that the `unify` tactic is slightly better on efficiency.\r\n\r\nI am surprised...\r\n"},{"author":"CohenCyril","date":"2018-08-01T08:31:25Z","comment":"> I'd say both content and set_pos occupy O(log n) of the stack each, because there is one non tail recursive call in each.\r\n\r\noh, but each continuation contains a tree of half of the size of the argument..."},{"author":"pi8027","date":"2018-08-01T09:52:13Z","comment":"@CohenCyril\r\n\r\n> I am surprised...\r\n\r\nIt is easy to check that `reflexivity` may instantiate existential variables like as `unify`. So I guess that `have _: x = y by reflexivity` and `unify x y` have the same behavior for any `x` and `y`. However, the former one does some additional tasks: trying to instantiate the goal and type checking of `erefl: x = y` (that includes convertibility test `x =? y`). Your neighbors would know whether my understanding is correct or not, and more details. :)"},{"author":"gares","date":"2018-08-01T13:51:38Z","comment":"The only comment I have right now is that, as for under, there is quite some ltac code.\r\n\r\nI think it is good to make a prototype and let people play with it, but at some point things should be rewritten in ML, so that one can just call `whd_all` rather than going trough notations and tactics-in-terms to perform some reduction on the given term."},{"author":"amahboubi","date":"2018-08-29T15:47:03Z","comment":"Hi, I think that it is great to have this code available, but I also think that it is not ready (yet) for merge. The roadmap is probably something to be discussed in the next dev working group. By the way, could you document the (names of the) constants that are the user's environment after a `Require Import ssr_AC`?"},{"author":"CohenCyril","date":"2018-09-05T08:44:29Z","comment":"Hi @amahboubi right now the following notations are exported:\r\n* `AC_check_pattern`, `AC_strategy`, `opACof law p s`, `opAC op p s`, `opACl op s` which are internal (but outside of the module `AC` for technical reason (namely too agressive name substitution in ltac in notation (not sure this is a bug though...)))\r\n* `op .[ 'ACof' p s ]`, `op .[ 'AC' p s ]`, `op .[ 'ACl' s ]`, `ACof p s`, `AC p s` and `ACl s` which are documented in the header (I realize now a scope is missing for non simple notations, this must be fixed).\r\n* `1` and `x * y` in scope `AC_scope` (shortened with `%AC` which is bound to the right arguments of the previous notations, so no explicit `%AC` is required). Also documented in the header (except for the scope).\r\n\r\nAnd all the exported constants are prefixed with module `AC`.\r\n\r\nDo you want me to add this to the header?"},{"author":"CohenCyril","date":"2019-11-27T18:01:03Z","comment":"This PR needs an assignee..."},{"author":"affeldt-aist","date":"2020-03-25T15:40:00Z","comment":"From the release managers for 1.11: does this PR really need propagation? Could it be merged as is and an issue be opened to propagate?"},{"author":"CohenCyril","date":"2020-03-25T15:52:03Z","comment":"I would be happy that this merged, but it has not been reviewed and it had no assignee... and I guess it is difficult to assess. It should at least be rebased, let me do that first..."},{"author":"CohenCyril","date":"2020-03-26T15:42:11Z","comment":"I rewrote some proof scripts using ssrAC, just for the example. Two are significantly shorter but were badly written in the first place.\r\nIt is very likely that this tool will essentially help during proof development, but that final refactoring of proofs will hopefully get rid of it... but I guess it is a useful  tool for that purpose.\r\n\r\nAs such, I will remove the \"needs: propagation\" label. If we change our minds we can reestablish it. I am also in favor of having this part of the beta, and withdraw it in the final release if necessary (as I said in my previous post)"},{"author":"gares","date":"2020-03-26T16:22:51Z","comment":"Some versions of Coq fail with message `The term \"2\" has type \"nat\" while it is expected to have type\r\n \"GRing.Ring.sort ?R1\"`.\r\n\r\nI personally don't care about 8.7..8.9 much, but if this PR is the *only* reason to drop compatibility with them, then I'm not in favor of merging it \"as it is\"."},{"author":"CohenCyril","date":"2020-03-26T17:34:17Z","comment":"> Some versions of Coq fail with message `The term \"2\" has type \"nat\" while it is expected to have type \"GRing.Ring.sort ?R1\"`.\r\n> \r\n> I personally don't care about 8.7..8.9 much, but if this PR is the _only_ reason to drop compatibility with them, then I'm not in favor of merging it \"as it is\".\r\n\r\nYou are right, we should not lose compatibility and the tests and the main file used to passe.\r\nI tried to rewrite some parts of the libraries but it seems I messed with scopes somehow, I will look into it by tomorrow noon."},{"author":"CohenCyril","date":"2020-04-06T10:26:27Z","comment":"@gares @affeldt-aist @ybertot should we integrate it?"},{"author":"ybertot","date":"2020-04-06T12:20:48Z","comment":"ping @gares"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":210,"state":"open","open_date":"2018-07-28T22:42:44Z","update_date":"2021-05-19T08:20:49Z","discussion":[{"author":"CohenCyril","date":"2018-07-28T22:43:13Z","comment":"depends on #209 "},{"author":"thery","date":"2018-10-09T16:23:04Z","comment":"polyn should be added to all the Make (?) and all_algebra.v"},{"author":"CohenCyril","date":"2019-11-27T18:01:23Z","comment":"This PR needs an assignee"},{"author":"chdoc","date":"2020-11-04T10:16:35Z","comment":"@CohenCyril , has there been progress since last year, is there a clear roadmap, or should this be downgraded to a draft and de-milestoned? \r\n@ybertot would you be willing to self-assign, or can someone suggest another assignee?"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"needs: fix","description":"PR that needs to be fix (generally because reviewers asked to)."}],"pull_requests":[]},{"author":"CohenCyril","number":209,"state":"closed","open_date":"2018-07-28T22:38:14Z","update_date":"2019-03-22T13:13:51Z","discussion":[{"author":"amahboubi","date":"2018-09-04T10:28:09Z","comment":"HI @CohenCyril. What is the status of this PR? The conflicts seem easy to solve. If I understand correctly, the scopes of the definitions and notations supporting your monadic style are limited to the ClosedFieldQE module, in library closed_field, module which is not imported, right?"},{"author":"gares","date":"2018-09-05T06:29:57Z","comment":"The monadic style seem a great improvement, I cant believe I'm writing this.\r\n\r\nPersonally I'd prefer making bind and return 2 keywords and use that in place of 'let and ret. "},{"author":"CohenCyril","date":"2018-09-05T08:03:32Z","comment":"> What is the status of this PR?\r\n\r\n@amahboubi I've been bad, this PR contains too many things. Now I told @ggonthier and you about the fintype+counttype-refactoring part.\r\n\r\n> If I understand correctly, the scopes of the definitions and notations supporting your monadic style are limited to the ClosedFieldQE module, in library closed_field, module which is not imported, right?\r\n\r\nYes\r\n\r\n> The conflicts seem easy to solve.\r\n\r\nYes, the so-called conflict are just about rebasing the ChangeLog onto the previous PR that got merged"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":208,"state":"closed","open_date":"2018-07-28T12:14:15Z","update_date":"2019-03-22T13:13:46Z","discussion":[{"author":"CohenCyril","date":"2018-08-06T14:40:48Z","comment":"@thery \r\n> Just a stupid comment:\r\n> is there a reason to define it\r\n> differently than in https://en.wikipedia.org/wiki/Companion_matrix\r\n\r\nYes there is one: the companion matrix should act on row basis vector and not column matrix vectors.\r\nAs for why just not choosing the transpose, it's a bit arbitrary.\r\nThis one has the property that\r\n```coq\r\nforall i j : 'I_(size p).-1, i <= j -> delta_mx 0 j *m companion_mx p ^ i = delta_mx 0 (j - i) \r\n```\r\n(and we should prove it and add it to the lib)\r\nwhile the traditional one can be obtained by conjugation with the matrix_perm of the reversal permutation and the property it would satisfy would be:\r\n```coq\r\nforall i j : 'I_(size p).-1, 0 < i -> i + j <= (size p) -> delta_mx 0 i *m companion_mx p ^ i = delta_mx 0 (i + j) \r\n```\r\nwhich maybe looks a bot more complicated...\r\n\r\n"},{"author":"thery","date":"2018-08-06T14:50:25Z","comment":"Is what you explain relates to the linear recurrence section in the wiki page?\r\nIn this case we should take the transpose"},{"author":"CohenCyril","date":"2018-08-06T17:35:23Z","comment":"@thery I changed it"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":207,"state":"open","open_date":"2018-07-27T18:45:28Z","update_date":"2021-05-19T08:20:54Z","discussion":[{"author":"pi8027","date":"2021-01-26T00:58:36Z","comment":"@CohenCyril Do you plan to have orthogonal complementation of vector subspaces here?"},{"author":"CohenCyril","date":"2021-01-27T09:49:08Z","comment":"> @CohenCyril Do you plan to have orthogonal complementation of vector subspaces here?\r\n\r\nThere is at matrix level, and everything should be lifted to vector spaces. So yes."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"needs: more development","description":"PR that needs to be developed further."}],"pull_requests":[]},{"author":"anton-trunov","number":205,"state":"closed","open_date":"2018-07-24T15:18:54Z","update_date":"2019-03-22T13:12:04Z","discussion":[{"author":"CohenCyril","date":"2018-07-24T17:20:36Z","comment":"Actually, I'm mistaken, ... `AC` refers to commutativity modulo associativity... and in your case, it does both associativity and commutativity... the corresponding statement should in fact be: \r\n```\r\naddnBAC m n p : n <= m -> m - n + p = m + p - n.\r\n```\r\n"},{"author":"CohenCyril","date":"2018-07-24T17:23:13Z","comment":"For completeness, I suggest to add the following three lemmas:\r\n```\r\nLemma addnBAC m n p : n <= m -> m - n + p = m + p - n.\r\nProof. by move=> le_nm; rewrite addnC addnBA // addnC. Qed.\r\n\r\nLemma addnBCA m n p : p <= m -> p <= n -> m + (n - p) = n + (m - p).\r\nProof. by move=> le_pm le_pn; rewrite !addnBA // addnC. Qed.\r\n\r\nLemma addnABC m n p : p <= m -> p <= n -> m + (n - p) = m - p + n.\r\nProof. by move=> le_pm le_pn; rewrite addnBA // addnBAC. Qed.\r\n```\r\n(I'm still unsure about the name of the last one)"},{"author":"anton-trunov","date":"2018-07-24T17:40:44Z","comment":"Thanks a lot @CohenCyril! I wasn't really sure about the name. I just force-pushed the changes you proposed."},{"author":"gares","date":"2018-07-24T21:19:59Z","comment":"I love the ABC one ;-)"},{"author":"anton-trunov","date":"2018-07-27T15:46:53Z","comment":"Thanks a lot!"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":204,"state":"closed","open_date":"2018-07-12T14:16:03Z","update_date":"2019-03-22T13:11:55Z","discussion":[{"author":"CohenCyril","date":"2018-07-13T23:07:03Z","comment":"I think this is a good idea, but AFAIK, the `Variant` vernac is available only for 8.8, so we should wait a few versions of Coq before integrating."},{"author":"pi8027","date":"2018-07-14T02:35:15Z","comment":"The `Variant` command has been available since Coq 8.5beta1 ([CHANGES](https://github.com/coq/coq/blob/V8.5beta1/CHANGES#L29)). Currently, MathComp supports only Coq 8.6, 8.7, and 8.8. This change passed CI checks. So I think there is no need to wait."},{"author":"CohenCyril","date":"2018-07-14T18:46:20Z","comment":"Oh right! My mistake"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":203,"state":"closed","open_date":"2018-07-04T15:45:00Z","update_date":"2019-10-17T09:56:33Z","discussion":[{"author":"gares","date":"2018-08-07T04:15:17Z","comment":"Lgtm. Not sure the fintype stuff is in the right place, other lemmas about the empty ft come earlier"},{"author":"CohenCyril","date":"2018-08-07T07:12:09Z","comment":"> Lgtm. Notte sure the fintype stuff is in the right place, other lemmas about the empty ft come earlier\r\n\r\nyou are right, and moving them at the right place triggered simplifications and more uniform naming, thanks"},{"author":"CohenCyril","date":"2019-02-28T13:01:05Z","comment":"@maximedenes  can you be an assignee?"},{"author":"amahboubi","date":"2019-04-10T14:29:42Z","comment":"@CohenCyril I do not have time to work on this before next dev meeting."},{"author":"CohenCyril","date":"2019-04-10T14:35:20Z","comment":"> @CohenCyril I do not have time to work on this before next dev meeting.\r\n\r\nOK, so maybe @thery or @gares could do a quick review?"},{"author":"CohenCyril","date":"2019-04-10T14:35:56Z","comment":"Or @strub ..."},{"author":"CohenCyril","date":"2019-05-23T17:22:54Z","comment":"@maximedenes Changes made, CI passes, if everyone's not unhappy, let's merge?"},{"author":"maximedenes","date":"2019-10-16T09:13:22Z","comment":"It seems to me all comments have been addressed, and this has been waiting for a long time, so I'll merge today unless reviewers object."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"CohenCyril","number":202,"state":"closed","open_date":"2018-07-04T14:29:48Z","update_date":"2019-05-24T12:04:54Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":201,"state":"closed","open_date":"2018-07-03T11:12:39Z","update_date":"2019-03-22T13:11:28Z","discussion":[{"author":"amahboubi","date":"2018-09-05T14:19:51Z","comment":"I am not sure it is the best place to discuss this but I still think that the litany of lemmas about compatibility with order in `ssrnum` is a nasty issue. For instance I rather often have to use that:\r\n``x >= 0 -> y <= z ->  y * x <= z * x``.  I have never managed to remember that the name of this lemma is ``ler_wpmul2r``, and its statement is: \r\n```Lemma ler_wpmul2r x : 0 <= x -> {homo *%R^~ x : y z / y <= z}.```\r\nwhich is brown belt ssr-style notation (mind the ``%R^~ x``), next to impossible to `Search` and quite hard to teach to a newbie.\r\nIt would be awesome to find a way to improve this..."},{"author":"amahboubi","date":"2018-09-05T14:44:47Z","comment":"Here is another difficult one, this time in `ssrint`:\r\n\r\n```About ler_piexpz2l.```\r\n\r\nwhich answers:\r\n\r\n```ler_piexpz2l :\r\nforall (R : realFieldType) (x : R),\r\n(0 < x)%R ->\r\n(x < 1)%R ->\r\n{in (>= 0)%R &, {mono exprz (R:=R) x : y x2 / (x2 <= y)%R >-> \r\n(y <= x2)%R}}\r\n\r\nExpanded type for implicit arguments\r\nler_piexpz2l :\r\nforall (R : realFieldType) (x : R),\r\n(0 < x)%R ->\r\n(x < 1)%R ->\r\nforall x2 y : int_numDomainType,\r\nx2 \\in (>= 0)%R ->\r\ny \\in (>= 0)%R ->\r\n(fun x3 : R => [eta (>= x3)%R]) (x ^ x2)%R (x ^ y)%R =\r\n(fun y0 : int => <=%R%R^~ y0) x2 y\r\n```\r\n\r\n"},{"author":"amahboubi","date":"2018-09-07T14:28:34Z","comment":"Another caveat: `{homo ... }` lemmas like the aforementionned `ler_wpml2r` should be `apply`ed, but the analogue for the strict relation, `ltr_pmul2r` is formulated as a `{mono ..}` predicate, and is a `rewrite` rule."},{"author":"CohenCyril","date":"2018-09-10T13:24:07Z","comment":"I agree with your three remarks about the difficulty to remember names of these and how exactly to use them. I see no easy way to do so for now, and I believe this is indeed off-topic here and deserves a separate issue."},{"author":"CohenCyril","date":"2018-10-31T13:47:12Z","comment":"> Another caveat: `{homo ... }` lemmas like the aforementionned `ler_wpml2r` should be `apply`ed, [...]\r\n\r\nThis is not completely true, most `{homo ...}` lemma can be rewritten with : they are rules of the form `(_ <= _) = true` with preconditions...\r\n\r\n"},{"author":"CohenCyril","date":"2018-11-19T13:15:49Z","comment":"@amahboubi I addressed your requests, should we merge?"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"needs: review","description":"PR that needs more reviews. Please review it."},{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."}],"pull_requests":[]},{"author":"gares","number":198,"state":"closed","open_date":"2018-04-24T13:11:04Z","update_date":"2019-12-26T11:43:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"amahboubi","number":197,"state":"closed","open_date":"2018-04-23T13:09:50Z","update_date":"2018-04-24T13:08:51Z","discussion":[{"author":"amahboubi","date":"2018-04-23T13:13:59Z","comment":"For now, this is only about uniformity of the existing content. Another commit will deal with the additional recent changes."},{"author":"gares","date":"2018-04-24T12:59:54Z","comment":"very good"}],"tags":[],"pull_requests":[]},{"author":"gares","number":196,"state":"closed","open_date":"2018-04-20T12:22:09Z","update_date":"2018-04-23T09:00:17Z","discussion":[{"author":"amahboubi","date":"2018-04-20T12:40:21Z","comment":"Hi Enrico, it looks great! I only have one question, if I may: about the commit moving the sources of the (skinny) mathcomp website. I initialized these pages by following blindly the github instructions. Will it still be online with the same url?"},{"author":"amahboubi","date":"2018-04-20T12:41:31Z","comment":"Ha, I received your email meanwhile."},{"author":"CohenCyril","date":"2018-04-20T12:45:43Z","comment":"Looks good indeed. I guess we should ask github to use docs/ only once this PR is merged, right?"},{"author":"gares","date":"2018-04-21T08:23:16Z","comment":"yep, all URLs should stay the same"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":195,"state":"closed","open_date":"2018-04-18T08:50:19Z","update_date":"2018-04-24T16:29:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":193,"state":"closed","open_date":"2018-04-17T17:18:34Z","update_date":"2018-04-24T16:29:08Z","discussion":[{"author":"CohenCyril","date":"2018-04-17T17:21:22Z","comment":"My bad, it is not from the \"svn-era\", here is the commit: https://github.com/math-comp/math-comp/commit/d762ebb5a8c5191d49a75aa89ec34966de00eb9b"},{"author":"amahboubi","date":"2018-04-17T19:10:37Z","comment":"I am not in favour of a compatibility module. The other instances of similar spec inductives, in ssrnum, share the same structure, with the two symmetrical versions of the equalities so I guess that your last option is just fine. However, I must confess that this change and the subsequent compat module went under my radar as well (as many things which happened in summer 2016 it seems) so I would be glad to hear other voices."}],"tags":[],"pull_requests":[]},{"author":"gares","number":192,"state":"closed","open_date":"2018-04-17T14:58:00Z","update_date":"2019-12-26T11:43:18Z","discussion":[{"author":"gares","date":"2018-04-18T08:00:52Z","comment":"It builds locally but times out on travis..."},{"author":"CohenCyril","date":"2018-04-18T16:29:24Z","comment":"Travis will not succeed because the current version of odd-order relies on the development version of math-comp, and not any released version (the same goes for real-closed). I guess we should merge the few waiting PRs and release a math-comp 1.7~beta version, so that we can test real-closed and odd-order against it."}],"tags":[],"pull_requests":[]},{"author":"gares","number":191,"state":"closed","open_date":"2018-04-16T14:28:38Z","update_date":"2019-12-26T11:43:26Z","discussion":[{"author":"amahboubi","date":"2018-04-16T14:41:11Z","comment":"The general idea sounds great to me, but there is one thing I do not understand in the change then: shouldn't it be {}/Ks?"},{"author":"amahboubi","date":"2018-04-16T14:42:51Z","comment":"Oh sorry now I understand: this commit is compatible with both and {}/Ks will only be available once your simplification is merged. Sorry for the noise."},{"author":"CohenCyril","date":"2018-04-19T08:16:24Z","comment":"It sounds okay to me to expect a variable cannot be used after it is cleared. In all of my personnal use-cases, delayed clear is used only to wait for the variable not to be used anymore"}],"tags":[],"pull_requests":[]},{"author":"gares","number":190,"state":"closed","open_date":"2018-04-12T13:09:18Z","update_date":"2018-04-12T15:14:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gares","number":189,"state":"closed","open_date":"2018-04-12T07:56:11Z","update_date":"2018-04-23T08:54:45Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":187,"state":"closed","open_date":"2018-03-21T14:57:18Z","update_date":"2018-07-04T15:21:37Z","discussion":[{"author":"anton-trunov","date":"2018-03-21T22:13:02Z","comment":"@amahboubi No problem :) I have no idea why I didn't notice this myself. Fixed."},{"author":"amahboubi","date":"2018-03-21T22:32:26Z","comment":"Many thanks @anton-trunov !"},{"author":"anton-trunov","date":"2018-03-21T23:18:20Z","comment":"@amahboubi Thank you for merging!"}],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":186,"state":"closed","open_date":"2018-03-06T11:41:16Z","update_date":"2018-07-04T15:21:48Z","discussion":[{"author":"amahboubi","date":"2018-03-06T13:35:12Z","comment":"Thanks a lot!"},{"author":"anton-trunov","date":"2018-03-06T13:51:53Z","comment":"Thank you for merging!"}],"tags":[],"pull_requests":[]},{"author":"jashug","number":185,"state":"closed","open_date":"2018-03-05T01:10:33Z","update_date":"2018-03-20T22:28:36Z","discussion":[{"author":"gares","date":"2018-03-05T10:24:11Z","comment":"> I'll also note that using the arguments command just to specify scopes doesn't change implicit argument status, so even after Arguments foo _%a _%b foo might have some implicit arguments. As documentation, that is perhaps somewhat confusing.\r\n\r\nYep I know, it is a choice I made a long ago. Since then many found it surprising, but I'm not sure the other option (unset all options that are set) would make the command more usable (I agree it will make it more \"documenting\").\r\nYou can append a `: clear implicits` if you want to signal the constant has no implicit arguments. Did you see many of these?"},{"author":"gares","date":"2018-03-05T10:25:00Z","comment":"I'm asking Assia and Cyril to review the \"odd cases\" you listed (since they know these files much better than me).\r\n\r\nBTW, many thanks for the PR!"},{"author":"jashug","date":"2018-03-05T16:40:56Z","comment":"In most cases, I didn't look at whether there were implicit arguments or not, so I'm not sure how commonly you have some/no implicit arguments."},{"author":"jashug","date":"2018-03-20T19:42:13Z","comment":"@gares @amahboubi @CohenCyril ping"},{"author":"gares","date":"2018-03-20T21:23:45Z","comment":"I think there are no reasons not to merge this now.\r\nThe list of odd cases is there, and if we find out something can be improved, we can do it later.\r\n\r\nThanks again for your patch!"}],"tags":[],"pull_requests":[]},{"author":"ybertot","number":183,"state":"closed","open_date":"2018-03-02T15:11:38Z","update_date":"2019-12-26T11:41:52Z","discussion":[{"author":"amahboubi","date":"2018-03-05T11:26:43Z","comment":"Hi Yves, good idea to have this link! I am tempted to merge this seemingly innocuous PR but  I don't understand why Travis fails here (why is Travis concerned at all with this file?). @gares, any idea?"},{"author":"gares","date":"2018-03-05T12:32:10Z","comment":"It's a random failure (it happens all the times in Coq too).\r\nTravis runs stuff like `apt-get update` or `rake` in this case... if the network is down, or God know what, everything fails. \r\n\r\nAlso, travis checks the library, not the homepage, so I'll just merge."},{"author":"ejgallego","date":"2018-03-05T12:41:23Z","comment":"The reason for the failure is that the PR is based on the `gh-pages` branch that has no `.travis.yml` file."}],"tags":[],"pull_requests":[]},{"author":"gares","number":181,"state":"closed","open_date":"2018-02-27T10:44:30Z","update_date":"2018-03-03T09:24:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"erikmd","number":180,"state":"closed","open_date":"2018-02-25T23:19:27Z","update_date":"2018-03-03T09:26:23Z","discussion":[{"author":"CohenCyril","date":"2018-02-26T10:06:11Z","comment":"@erikmd thanks for the PR, however travis failed on every single version of Coq. With which set of packages does it compile on your computer?"},{"author":"erikmd","date":"2018-02-26T12:25:19Z","comment":"@CohenCyril before pushing my commit I had successfully compiled the ssreflect package (with Coq 8.6.1 and 8.5.3) by following the commands mentioned in the opam file, basically: `git reset --hard && git clean -d -x -f` then `cd mathcomp/ssreflect && make && make install`. So indeed I'm puzzled to see that the command `make -f Makefile.coq -j ${NJOBS} all` run in the root folder by Travis CI systematically fails... maybe I forgot to update something? I'll try to investigate, but feel free to react if you've an idea where this configuration issue could come from! :)"},{"author":"erikmd","date":"2018-02-26T12:27:29Z","comment":"Actually I think I just forgot to update [the global Make file](https://github.com/math-comp/math-comp/blob/master/mathcomp/Make) ; I'll test this and keep you informed"},{"author":"erikmd","date":"2018-02-26T13:28:54Z","comment":"After fixing this, the test build passed with Coq 8.6.1 on my PC. Finally I also updated `ssreflect/plugin/v8.6/ssreflect.v` to directly rely on `ssrmatching` from Coq and thus \"avoid one indirection\".\r\n(I'll rebase and force-push just now to make Travis do more tests.)"},{"author":"erikmd","date":"2018-02-26T14:24:55Z","comment":"The Travis build passed except for 8.5, because `ssrmatching.v` was copied in the wrong folder... Now it should be OK :)"}],"tags":[],"pull_requests":[]},{"author":"jashug","number":179,"state":"closed","open_date":"2018-02-22T10:45:23Z","update_date":"2018-03-03T09:30:34Z","discussion":[{"author":"jashug","date":"2018-02-22T18:17:07Z","comment":"Something went wrong on v8.5 on Travis: https://travis-ci.org/math-comp/math-comp/jobs/344736906\r\n"},{"author":"jashug","date":"2018-02-22T21:01:03Z","comment":"The issue on v8.5 appears to be that, in that version, trailing arguments need to be included, so for a function like `Definition foo x y := t`, `Arguments foo [x]` works in 8.6- but fails in 8.5, where you need to write `Arguments foo [x] y`. I'll go through and add the trailing arguments."},{"author":"maximedenes","date":"2018-02-22T21:03:18Z","comment":"I would suggest you wait a bit before doing that. There are many incompatibilities related to `Arguments` between 8.5 and 8.6, and mathcomp developers may want to reconsider 8.5 support now what 8.8 is being released. At least, it's worth discussing."},{"author":"gares","date":"2018-02-23T10:14:03Z","comment":"Many thanks for the patch!\r\n\r\nI too agree with @maximedenes that v8.5 support is not a major concern. We already support 8.6 and 8.7, so the \"rule of the two versions\" is respected IMO.\r\n\r\nI'll give another spin for 8.6 that did timeout."},{"author":"gares","date":"2018-02-23T10:19:13Z","comment":"> I saw a lot of times when a reflect was proven, and immediately followed by an Arguments command setting all arguments implicit (which became maximal since there are no arguments to follow). It would be possible to achieve the same effect using {x} binders in the statement of the lemma.\r\n\r\nI'm not against it, but please not in this PR.\r\n\r\nActually, I don't know why `{ binder : type }` is not used in this library. Maybe it is just because it is a recent addition. @ggonthier do you recall any issue with this Coq feature?"},{"author":"ggonthier","date":"2018-02-23T10:39:21Z","comment":"Indeed, `{arg}` was too recent a feature to be used when most of the library was written. I'm somewhat reluctant to rely on it for the `reflectP`-style lemmas, because of the risk of inconsistencies: it often happens that some of the arguments to reflection lemmas are section arguments, in which case they need to be made explicitly implicit (sic) after the section. As this may change during refactoring, I think it is sound practice to always have an `Arguments` declaration for each reflection lemma. Similarly I feel an `Arguments` declaration should serve as documentation of the parameters of a constant: there should only be one such declaration in the source code, and it should list explicitly all the parameters and not merely amend the original definition."},{"author":"jashug","date":"2018-02-23T11:05:31Z","comment":"I have no intention of changing the content of this PR now that Travis is happy with 8.6.\r\n\r\nHaving the Arguments declaration act as documentation makes sense to me. My comment was really a side note, after seeing the pattern (what felt like) ~50 times, I just had to mention it.\r\n\r\nIn the spirit of acting as documentation though, when `foo` takes exactly 3 arguments, `Arguments foo [x y z].` would perhaps be better as `Arguments foo {x y z}.`, since implicits at the end automatically get promoted to maximal. That way it is clear that `foo` means `@foo _ _ _` not `@foo`, which is what `[x y z]` would normally suggest to me.\r\n(The same comment applies to the old style `Implicit Arguments foo [x y z].` vs. `Implicit Arguments foo [[x] [y] [z]].` I preserved whichever was used in this PR.)"},{"author":"ggonthier","date":"2018-02-23T11:34:16Z","comment":"An implicit declaration on a non-dependent argument is actually treated as a maximal implicit declaration, and this behaviour actually predates the implementation of maximal implicits. This was how mathcomp got around the Coq dev's initial reluctance to support maximal implicits. We just continued using the coding pattern even after maximal implicits were introduced (partly, I'll admit, because I found the `[[x] [y]]`syntax a bit clunky)."},{"author":"gares","date":"2018-03-03T09:30:05Z","comment":"I've disables travis on 8.5, I guess we are good to go"}],"tags":[],"pull_requests":[]},{"author":"thery","number":178,"state":"closed","open_date":"2018-02-16T15:16:00Z","update_date":"2018-03-06T17:44:58Z","discussion":[{"author":"CohenCyril","date":"2018-02-26T10:03:14Z","comment":"@ybertot: I think it hardly happens, but I guess it may if some induction hypothesis is generalized in your proof. I am very curious to see Laurent's use case though :)\r\n\r\nAnyway, this generalization introduces no overhead when the rewrite rule is used from left to right, a minor overhead when used from right to left, so I am in favor of merging."},{"author":"amahboubi","date":"2018-03-06T13:37:40Z","comment":"Hi @thery ! Any response to @CohenCyril, who was asking about your use case? Anyway, I am merging."},{"author":"thery","date":"2018-03-06T17:44:58Z","comment":"@amahboubi  sorry but when looking at my usage with @ybertot, we realize that the proof could be fixed and use the nth 0 version. Anyway the generalization seems natural to me."}],"tags":[],"pull_requests":[]},{"author":"gares","number":177,"state":"closed","open_date":"2018-02-06T12:53:12Z","update_date":"2018-02-21T14:10:05Z","discussion":[{"author":"gares","date":"2018-02-19T16:25:56Z","comment":"@CohenCyril it now compiles"}],"tags":[],"pull_requests":[]},{"author":"gares","number":176,"state":"closed","open_date":"2018-02-05T10:05:29Z","update_date":"2018-02-06T12:53:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"JasonGross","number":174,"state":"closed","open_date":"2017-12-18T22:08:37Z","update_date":"2018-08-01T09:48:10Z","discussion":[{"author":"CohenCyril","date":"2018-01-26T16:57:00Z","comment":"This looks useful, but I am unable to understand the implications of this pull request. @gares can you give your opinion?"},{"author":"amahboubi","date":"2018-03-23T13:16:03Z","comment":"Hi @JasonGross, could you help us assessing this pull request? I not the most qualified dev on this kind of stuff, but  I just do not understand why you need this."},{"author":"JasonGross","date":"2018-03-24T18:52:39Z","comment":"In the present state of the repo, you do `OLD_MAKEFLAGS:=$(MAKEFLAGS)`, which gets evaluated once in the global context.  Apparently, `make` does not put jobserver flags (used for parallel make) in `MAKEFLAGS` in the global context, but only when you are executing a rule, and so when you pass the makeflags on to `MAKEFLAGS=\"$(OLD_MAKEFLAGS)\" $(MAKE) -f Makefile.coq`, you lose the parallel build.  This PR uses `OLD_MAKEFLAGS=` instead of `OLD_MAKEFLAGS:=`, which means that the body of `OLD_MAKEFLAGS` gets evaluated at use-site instead of at definition site, and so the jobserver flags, which only show up in `MAKEFLAGS` in the context of executing a rule, do get picked up appropriately."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":172,"state":"closed","open_date":"2017-12-12T19:12:23Z","update_date":"2019-05-24T12:04:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":171,"state":"closed","open_date":"2017-12-12T19:02:39Z","update_date":"2019-05-24T12:04:54Z","discussion":[{"author":"CohenCyril","date":"2017-12-14T12:24:36Z","comment":"@ggonthier you are right, this looked weird. I put `F I P` in the section context. I also did a small generalization by requiring injectivity only in `P` (as in `mxdirect_sum_eigenspace`)\r\n"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":170,"state":"closed","open_date":"2017-12-12T16:36:28Z","update_date":"2019-05-24T12:04:54Z","discussion":[{"author":"ggonthier","date":"2017-12-13T11:40:31Z","comment":"I'm afraid this is too much of a generalisation of #169, which provided a backchaining lemma in the vein of `subr0_eq`. These lemmas can't be used this way: one would have to formulate explicitly the `x / y = 1` subgoal, which could be inconvenient if `x` or `y` are large. Plus, I don't see the point of the rewrite multirule formulation, since either `x` or `y` can't be inferred from the left or right hand side. Finally, switching the equation sides is unnatural (the `y = ...` conclusions).\r\n  So I'd suggest sticking to the `subr0_eq` model, with perhaps a `mulr1_eq` lemma defining the inverse of `x`; perhaps we should also add an `addr0_eq` lemma for consistency?\r\n\r\n```\r\nLemma mulr1_eq x y : x * y = 1 -> x^-1 = y.\r\nProof.\r\nby move=> xy_eq1; rewrite -[LHS]mulr1 -xy_eq1; apply/mulKr/unitrPr; exists y.\r\nQed.\r\n\r\nLemma divr1_eq x y : x / y = 1 -> x = y. Proof. by move/mulr1_eq/invr_inj. Qed.\r\n```"},{"author":"CohenCyril","date":"2017-12-14T11:11:02Z","comment":"I agree this makes much more sense for backchaining. I updated my pull request accordingly.\r\nWe can merge when Travis compiles.\r\n(My original intent was not to forget that x was a unit while using this view in a forward chain. Now the user needs to make the duplication himself if he needs to, which is ok I guess.)"}],"tags":[],"pull_requests":[]},{"author":"hivert","number":169,"state":"closed","open_date":"2017-12-12T15:31:00Z","update_date":"2017-12-12T17:56:58Z","discussion":[{"author":"CohenCyril","date":"2017-12-12T16:36:16Z","comment":"Indeed I happened to lack such a statement at some point in my life."},{"author":"CohenCyril","date":"2017-12-12T16:38:26Z","comment":"Thanks for bringing this to my attention again, I wrote a piece of code to generalize and subsume what you did."}],"tags":[],"pull_requests":[]},{"author":"hivert","number":168,"state":"closed","open_date":"2017-12-12T14:43:26Z","update_date":"2017-12-14T18:21:54Z","discussion":[{"author":"hivert","date":"2017-12-12T16:16:28Z","comment":"@CohenCyril : Adressed your change and resubmitted."}],"tags":[],"pull_requests":[]},{"author":"hivert","number":167,"state":"closed","open_date":"2017-12-12T10:58:29Z","update_date":"2017-12-14T18:18:48Z","discussion":[{"author":"CohenCyril","date":"2017-12-12T11:49:08Z","comment":"Dear Florent, can you please refactor your pull request and squash all commits into only one?"},{"author":"hivert","date":"2017-12-12T13:02:22Z","comment":"@CohenCyril: Once again, I'm in trouble with github workflow. I understood that **you** where supposed to do it when merging the pull request: https://github.com/blog/2141-squash-your-commits\r\nNow I'm not sure about what I should do. If I squash it on my computer, rewriting the history and then do a `push --force` on my PR2 branch on github, will it correctly update the pull request ? Or am I supposed to do something else ?"},{"author":"CohenCyril","date":"2017-12-12T13:38:39Z","comment":"Yes Florent, you are supposed to push --force (and that's another reason why you should always create a new branch before making a pull request)"},{"author":"maximedenes","date":"2017-12-12T13:41:32Z","comment":"> If I squash it on my computer, rewriting the history and then do a push --force on my PR2 branch on github, will it correctly update the pull request ?\r\n\r\nYes it will. PRs are just pointers to branches. When the branch is updated, so is the PR."},{"author":"hivert","date":"2017-12-12T14:34:10Z","comment":"Git is not my friend today. The squash went all wrong generating lots of conflicts. I ended up creating a brand new branch an coping by hand the file from one branch to the other. I'm starting to really dislike GH workflow... \r\n\r\nAnyway, the lemma should be here in a proper shape. I also checked that it is usable with the current statement (https://github.com/hivert/Coq-Combi/commit/d1f5e4db4182ec43423be02cee8f7a666f15028d). Finally, you may want to check if there is a simpler proof."}],"tags":[],"pull_requests":[]},{"author":"hivert","number":166,"state":"closed","open_date":"2017-12-11T11:02:40Z","update_date":"2017-12-12T18:46:09Z","discussion":[{"author":"hivert","date":"2017-12-11T11:03:54Z","comment":"There are some trivial conflicts, but since I Messed things up by trying to resolve them using github interface, I leave it to you to do the merge."},{"author":"CohenCyril","date":"2017-12-11T12:09:19Z","comment":"I'm on it"},{"author":"hivert","date":"2017-12-11T14:04:44Z","comment":"@CohenCyril: Thanks. One question: I'm ready to resubmit the removed \"reshape_index_leq\" lemma, however if I do so, you'll have all the other from this pull request too. It doesn't really makes sense to strip the code to what is needed for this single lemma. Should I wait for this pull request being integrated ?"},{"author":"hivert","date":"2017-12-12T10:46:12Z","comment":"Thanks for the merge !\r\n\r\nOne final last comment: now that I have a non trivial contribution to math-comp, I'd be glad to have my name written somewhere in a contributor section ;-) Yes I know: those reseacher/developper with their ego...\r\n"},{"author":"CohenCyril","date":"2017-12-12T11:57:56Z","comment":"Good point, until the next release your name is at least in a commit so github automatically lists you as a contributor (https://github.com/math-comp/math-comp/graphs/contributors). Now, when a tarball is made for a release, we have indeed to make sure to have contributor section."}],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":165,"state":"closed","open_date":"2017-11-29T22:53:28Z","update_date":"2017-11-30T07:48:56Z","discussion":[{"author":"ejgallego","date":"2017-11-29T22:54:15Z","comment":"Readable link https://github.com/ejgallego/math-comp/blob/readme_pass/README.md"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":164,"state":"closed","open_date":"2017-11-24T14:11:25Z","update_date":"2018-02-06T18:36:54Z","discussion":[{"author":"amahboubi","date":"2018-02-05T10:18:21Z","comment":"Hello @ggonthier and @ybertot : this PR seems to be ready for merging, but since it has been open for long, I am checking: any objection?"},{"author":"CohenCyril","date":"2018-02-05T10:42:51Z","comment":"@amahboubi I did not do the tweaks @ggonthier asked. So it's not ready for merging."},{"author":"amahboubi","date":"2018-02-05T10:54:24Z","comment":"Yes, I can see that, but if I am not mistaken, the present PR is about the result of the linting, and only deals with .v files.  From a superficial reading, it was not clear to me whether the comments above point to spurious blanks/bullets that your script introduced, or to  wrinkles already present in the original code. But the spurious  '-' in intro patterns seem to belong to the first category... Am I correct?"},{"author":"CohenCyril","date":"2018-02-06T12:52:30Z","comment":"Hi @amahboubi, every single comment is on the diff indeed, so they all are mistakes introduced by my scripts (by simplifying a more verbose script). So in order to merge this PR, one must fix all the comments by Georges and Yves in a manual way, or change the script to fix them, ... I prefer the first option, since this PR is independent from #163 ..."},{"author":"CohenCyril","date":"2018-02-06T12:52:59Z","comment":"I am going to do it now..."},{"author":"CohenCyril","date":"2018-02-06T13:07:39Z","comment":"@amahboubi I was wrong, some of the things @ggonthier and @ybertot  spotted are already present in the original code, but on the same line as things my script changed.\r\nAnyway, I believe this should be merged now, until the next pass of a more advanced linter..."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":163,"state":"closed","open_date":"2017-11-24T14:10:41Z","update_date":"2019-05-24T12:04:54Z","discussion":[{"author":"hivert","date":"2017-12-12T15:34:28Z","comment":"I like the typo saying that the script is written in \"Qed\" instead of \"sed\" ;-) !"},{"author":"amahboubi","date":"2018-02-05T10:21:02Z","comment":"Hello @CohenCyril, what is the status of this PR?"},{"author":"CohenCyril","date":"2018-02-05T10:43:31Z","comment":"@amahboubi the scripts should be modified to make sure the problems of #164 do not happen again."}],"tags":[{"tag":"needs: discussion","description":"Issue or PR that needs discussion. Please come in a give your opinion."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"},{"tag":"kind: stand by","description":"PR that is currently stalled."}],"pull_requests":[]},{"author":"CohenCyril","number":162,"state":"closed","open_date":"2017-11-24T14:09:43Z","update_date":"2017-12-12T16:50:22Z","discussion":[{"author":"gares","date":"2017-12-11T08:39:08Z","comment":"Cyril please fix the typos and let's merge this one!"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":161,"state":"closed","open_date":"2017-11-23T19:22:30Z","update_date":"2019-05-24T12:04:53Z","discussion":[{"author":"gares","date":"2017-11-23T20:35:50Z","comment":"wow"},{"author":"CohenCyril","date":"2017-11-24T13:48:33Z","comment":"I will split this PR."},{"author":"CohenCyril","date":"2017-11-24T14:27:20Z","comment":"split in #162 #163 and #164 "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":160,"state":"closed","open_date":"2017-11-22T14:52:41Z","update_date":"2019-05-24T12:04:57Z","discussion":[{"author":"maximedenes","date":"2017-11-23T07:58:31Z","comment":"@ybertot Cyril was asking about the naming. What's your take on it?"},{"author":"ybertot","date":"2017-11-23T08:02:06Z","comment":"The naming seems reasonable to me.  There is no clash in the library (the KA combination has not been used before in lemma names) and the patterns used in the lemma come often in my own experience."},{"author":"ggonthier","date":"2017-11-27T10:12:22Z","comment":"`subrKA` could be generalised slightly by changing `- y` to `+ y` in the statement."}],"tags":[],"pull_requests":[]},{"author":"ybertot","number":157,"state":"closed","open_date":"2017-11-15T16:23:21Z","update_date":"2017-12-15T10:14:40Z","discussion":[{"author":"ggonthier","date":"2017-11-15T17:02:22Z","comment":"These should be useful generalisations. Three quick observations:\r\n  - the naming convention for relativised lemmas is an `_in` suffix, see `seq.v` or `fintype.v` for instances.\r\n  - the generic predicate parameter `S` should be declared with the `pred_class` idiom, as this can make it easier to instantiate it explicitly.\r\n  - `ssrbool.v` provides helper lemmas (`in1T` and such) to derive unbounded lemmas from relativised ones."}],"tags":[],"pull_requests":[]},{"author":"erikmd","number":155,"state":"closed","open_date":"2017-11-13T23:43:02Z","update_date":"2017-12-14T18:09:34Z","discussion":[{"author":"erikmd","date":"2017-11-14T18:11:33Z","comment":"Here is more feedback on compiling CoqEAL with MathComp for Coq 8.5:\r\n\r\nAfter pinning `coq-mathcomp-ssreflect` to use this PR, I recompiled `coq-mathcomp-field.1.6.4` and paramcoq for Coq 8.5, then prepended `From mathcomp` at line\r\nhttps://github.com/CoqEAL/CoqEAL/blob/cc2799ecf2883f1ef3e4de48e2d00e1965b3fcdb/refinements/refinements.v#L7\r\n\r\nThen FYI the compilation of CoqEAL went farther than before, but failed at line\r\nhttps://github.com/CoqEAL/CoqEAL/blob/cc2799ecf2883f1ef3e4de48e2d00e1965b3fcdb/refinements/refinements.v#L375\r\nwith the `Error: Unknown interpretation for notation \"( _ in _ )\".`, so this amounts to issue #62"},{"author":"CohenCyril","date":"2017-12-12T17:53:11Z","comment":"@gares can you do a review?"}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":154,"state":"closed","open_date":"2017-11-06T16:19:08Z","update_date":"2017-11-06T18:07:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":153,"state":"closed","open_date":"2017-10-30T13:20:43Z","update_date":"2017-10-30T14:03:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":152,"state":"closed","open_date":"2017-10-26T12:50:55Z","update_date":"2017-10-26T14:43:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":151,"state":"closed","open_date":"2017-10-26T12:42:24Z","update_date":"2017-10-26T14:41:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":150,"state":"closed","open_date":"2017-10-23T13:59:11Z","update_date":"2019-05-24T12:04:57Z","discussion":[{"author":"ejgallego","date":"2017-10-23T14:30:12Z","comment":"Coq's opam used to run some extra stuff such as the test suite so at the beginning it was unsuitable for the Travis time limits. That may have changed now."},{"author":"CohenCyril","date":"2017-10-23T15:21:08Z","comment":"You are right, it is still not suitable..."},{"author":"ejgallego","date":"2017-10-23T15:23:20Z","comment":"Note @CohenCyril that Coq will hopefully provide soon some better scripts [written in OCaml!] to manage CI testing of Coq itself and of course libraries, so indeed a sensible plan of action could be to reuse that."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":149,"state":"closed","open_date":"2017-10-23T13:55:15Z","update_date":"2019-05-24T12:04:55Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":146,"state":"closed","open_date":"2017-10-19T19:07:30Z","update_date":"2017-10-20T08:12:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":145,"state":"closed","open_date":"2017-10-19T19:00:25Z","update_date":"2019-05-24T12:04:55Z","discussion":[{"author":"CohenCyril","date":"2017-10-20T08:27:35Z","comment":"@gares any contraindication?"}],"tags":[],"pull_requests":[]},{"author":"gares","number":144,"state":"closed","open_date":"2017-10-19T14:19:56Z","update_date":"2017-10-23T11:46:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"RalfJung","number":143,"state":"closed","open_date":"2017-10-12T14:21:10Z","update_date":"2017-10-20T08:12:46Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"RalfJung","number":140,"state":"closed","open_date":"2017-10-10T11:24:16Z","update_date":"2017-10-20T08:14:21Z","discussion":[{"author":"gares","date":"2017-10-20T08:14:21Z","comment":"Thanks"}],"tags":[],"pull_requests":[]},{"author":"PatrickMassot","number":134,"state":"closed","open_date":"2017-08-13T09:21:56Z","update_date":"2017-08-13T11:53:43Z","discussion":[{"author":"gares","date":"2017-08-13T11:53:39Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"ghost","number":131,"state":"closed","open_date":"2017-06-14T09:15:33Z","update_date":"2017-06-14T12:26:52Z","discussion":[{"author":"ghost","date":"2017-06-14T10:08:53Z","comment":"@gares Can this be merged today? (We want to run some benchmarking which need this fix)"}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":130,"state":"closed","open_date":"2017-06-09T07:35:27Z","update_date":"2017-07-12T12:07:34Z","discussion":[{"author":"maximedenes","date":"2017-06-09T11:12:34Z","comment":"@gares Can you say if you plan to review it today? If not, I'll do another pass and merge. Thanks!"},{"author":"gares","date":"2017-06-09T16:40:33Z","comment":"Oh, I missed this PR and I pushed some code that is quite close to that."}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":129,"state":"closed","open_date":"2017-06-07T09:18:26Z","update_date":"2017-06-08T14:03:32Z","discussion":[{"author":"maximedenes","date":"2017-06-08T11:44:16Z","comment":"@gares Do you have a suggestion on how to restore 8.6 compatibility at the `.v` level? The current setup requires a `From Coq Require Import ssreflect`."},{"author":"ejgallego","date":"2017-06-08T12:07:33Z","comment":"@maximedenes you could play `LoadPath` tricks, but that won't be fun; otherwise I guess you would need to have a different `ssreflect.v` for 8.5/8.6 and a different one for `master`, that just exports the Coq shipped module."},{"author":"maximedenes","date":"2017-06-08T12:15:22Z","comment":"> otherwise I guess you would need to have a different ssreflect.v for 8.5/8.6 and a different one for master, that just exports the Coq shipped module.\r\n\r\nYep, sure, I was wondering if there was a way to avoid that, but maybe it is ok. The part that is a bit tricky is that mathcomp has a single Makefile that links the appropriate version of the plugin, so it should be extended for that `ssreflect.v` file."},{"author":"ejgallego","date":"2017-06-08T12:21:39Z","comment":"There is an even better option that is to revert to the `mathcomp` prefix, I cannot stress how annoying is now that all my ssreflect examples have to come in two versions..."},{"author":"maximedenes","date":"2017-06-08T12:31:56Z","comment":"> There is an even better option that is to revert to the mathcomp prefix\r\n\r\nIsn't that the same as your loadpath suggestion? I didn't change the prefix in any way, it is just the fact that we moved the files that had this side effect. To compensate for it, we should tweak the loadpath I guess."},{"author":"maximedenes","date":"2017-06-08T12:34:40Z","comment":"Btw, can a prefix be bound to several physical paths?"},{"author":"ejgallego","date":"2017-06-08T12:48:48Z","comment":"> Isn't that the same as your loadpath suggestion?\r\n\r\nThe prefix is set arbitrarily by Coq, (in fact in SerAPI/jsCoq I have to imitate that arbitrary behavior).\r\n\r\nYou could well have a rule that declares `plugins/ssr` to be under prefix `mathcomp`. It is a bit uglier, but compatible."},{"author":"ejgallego","date":"2017-06-08T12:49:56Z","comment":"> Btw, can a prefix be bound to several physical paths?\r\n\r\nit will complain with a warning, `overriding-logical-loadpath` whether it does make sense, I don't know."},{"author":"maximedenes","date":"2017-06-08T13:12:12Z","comment":"So I guess I don't understand your suggestion. You'd loose access to the `mathcomp` libraries, right?"},{"author":"ejgallego","date":"2017-06-08T13:19:13Z","comment":"Likely you would have to put the full `mathcomp.ssreflect` in Coq, the rest should fine, right?"},{"author":"maximedenes","date":"2017-06-08T13:25:59Z","comment":"I don't follow. If the `mathcomp` prefix points to `plugins/ssr`, `From mathcomp Require Import ssralg` will fail. If it points to the place where mathcomp is installed, it is `Require Import mathcomp.ssreflect` that will fail, right?"},{"author":"ejgallego","date":"2017-06-08T13:31:52Z","comment":"The `mathcomp.ssreflect` prefix would point to `plugins/ssr`, `From mathcomp Require Import ssralg` resolves to `mathcomp.algebra.ssralg` I believe.\r\n\r\n`Require Import mathcomp.ssreflect` already fails in 8.6 as far as I can see; it makes no sense with the current organization."},{"author":"ejgallego","date":"2017-06-08T13:36:08Z","comment":"Anyways the current loadpath story seems kinda bogus, the main reason duplication is not allowed is that `find_load_path` can determine the logical path a module uses in `start_library`.\r\n\r\nIMHO this is the wrong approach, as it should be the user of `start_library` who provides that and I even believe that I saw some bug / non-flexible behavior due to that.\r\n\r\nI'm afraid that the whole story with `start/declare_library` is a mess now, including real bugs such as 5556; I  am close to have a first patch ready thou to attack 5556 that in fact will properly pack together libraries with their loadpaths and other metaproperties that are set in an inconsistent way today. This will be done by enriching `Stm.init` so in fact the STM becomes in full control of the notion of \"document/compilation unit\".\r\n\r\nLets see where we arrive."},{"author":"maximedenes","date":"2017-06-08T13:50:17Z","comment":"> The mathcomp.ssreflect prefix would point to plugins/ssr\r\n\r\nOk, now I understand. There will still be an incompatibility for, e.g. `Require Import mathcomp.ssreflect.finfun` and all other files there. But it was recommended to do `From mathcomp Require Import finfun`, and that should still work.\r\n\r\nWhere do you think I should add this binding? Just as an ad-hoc thing in `coqinit.ml`, like it is done for the `Coq` prefix?"},{"author":"ejgallego","date":"2017-06-08T13:56:04Z","comment":"> But it was recommended to do From mathcomp Require Import finfun, and that should still work.\r\n\r\nHow would that work now?"},{"author":"maximedenes","date":"2017-06-08T13:57:03Z","comment":"I thought your suggestion was to bind the `mathcomp.ssreflect` prefix, but not the `mathcomp` one."},{"author":"ejgallego","date":"2017-06-08T14:03:32Z","comment":"Unfortunately my suggestion does require moving the whole of `ssreflect` into Coq with the current state of affairs, what would you bind `mathcomp` to?\r\n\r\nSo I thought indeed the original plan here was to provide a different version of `ssreflect.v` for 8.6/8.7 . IMHO that would be fine, even if we have the pain to have users to install mathcomp even for just the tactics. Well, now you'll have to provide also different versions of `ssrbool` etc... Pity we still don't have cpp support in coq_makefile.\r\n\r\nThe only other alternative I see is to move the full `ssreflect` prefix into `plugins/ssr`; this was my original idea so people could just use the thing without any extra effort in a compatible way.\r\n\r\nI think other alternatives will require rework of the loadpath mode, or adding cpp support to coq_makefile."}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":128,"state":"closed","open_date":"2017-06-06T15:11:41Z","update_date":"2017-06-06T15:29:41Z","discussion":[{"author":"ejgallego","date":"2017-06-06T15:19:28Z","comment":"I guess it would have been more time-effective to have merged ssr first and then avoid the need of all those overlays as the changes can be folded in the PRs themselves, but YMMV."},{"author":"maximedenes","date":"2017-06-06T15:28:03Z","comment":"> I guess it would have been more time-effective to have merged ssr first and then avoid the need of all those overlays as the changes can be folded in the PRs themselves, but YMMV.\r\n\r\nI see your point but:\r\n1. I tried to be nice to everyone, so I scheduled my PRs (and the API, that I'll help fixing) after the ones conflicting with them. so only the Sigma removal could have been done after the ssr merge.\r\n2. These overlays were often created before we agreed on the ssr merge.\r\n3. Adapting the overlays one by one to the code that we merge (which is significantly different from the one in the ssr repo) is probably more costly than fixing it once and for all.\r\n\r\nBut indeed, I wasn't sure about which way was best. Anyway, I think I made it as smooth as I could for everyone except Matej and I."}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":127,"state":"closed","open_date":"2017-06-06T07:07:32Z","update_date":"2017-06-06T07:09:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":126,"state":"closed","open_date":"2017-05-28T20:06:58Z","update_date":"2017-05-29T00:35:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":125,"state":"closed","open_date":"2017-05-25T10:50:38Z","update_date":"2017-05-25T12:57:06Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":124,"state":"closed","open_date":"2017-05-25T09:12:43Z","update_date":"2017-05-25T12:57:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":123,"state":"closed","open_date":"2017-05-17T16:03:17Z","update_date":"2017-06-05T20:33:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"SkySkimmer","number":120,"state":"closed","open_date":"2017-04-17T13:06:12Z","update_date":"2017-04-17T19:03:13Z","discussion":[{"author":"gares","date":"2017-04-17T18:55:21Z","comment":"Thanks"},{"author":"SkySkimmer","date":"2017-04-17T18:57:44Z","comment":"I should probably have made this explicit, but until the Coq PR is merged this makes ssreflect incompatible with Coq trunk. (pre coq/coq#565 query_command doesn't include the dot at the end of a `Check foo.`)"},{"author":"gares","date":"2017-04-17T19:03:13Z","comment":"I see.  But I think no user of ssr trunk writes `- Check foo`. So I thought it would just make ssr \"forward compatible\"."}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":119,"state":"closed","open_date":"2017-04-11T15:45:20Z","update_date":"2017-04-12T14:25:03Z","discussion":[{"author":"gares","date":"2017-04-11T19:17:44Z","comment":"Looks OK.  Half of the calls to Unsafe are for pp purposes, a big chunk if just to call constr constructors, maybe there is a corresponding econstr one.\r\n\r\nThe `refine_with` and `unfold` usage of Unsafe have to be checked."}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":118,"state":"closed","open_date":"2017-04-03T11:23:46Z","update_date":"2017-04-03T13:17:57Z","discussion":[{"author":"gares","date":"2017-04-03T12:31:10Z","comment":"I've the impression mkCLetIn is dead code :-/\r\nSaid that it looks good to me.  \r\n\r\nJust in case @ggonthier has a minute to look at the patch: Coq's constr_expr for LetIn just got a place for the type of the expression being named. My understanding is that BFdef needs no more a boolean argument (lines 5328 , 5384 are the places where the change seem to benefit SSR).\r\n\r\n"},{"author":"gares","date":"2017-04-03T13:17:57Z","comment":"Merging now, the PR for Coq is going to be merged now..."}],"tags":[],"pull_requests":[]},{"author":"strub","number":117,"state":"closed","open_date":"2017-03-17T08:39:34Z","update_date":"2017-03-17T10:08:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"strub","number":116,"state":"closed","open_date":"2017-03-16T15:51:02Z","update_date":"2018-09-07T12:08:54Z","discussion":[{"author":"strub","date":"2017-03-16T15:52:04Z","comment":"I've several development  depending on this module. It's location is currently quite artificial and force projects to pull a lot of dependencies."},{"author":"gares","date":"2017-03-16T16:19:13Z","comment":"also ssreflect/Make should be updated"},{"author":"gares","date":"2017-03-16T19:51:56Z","comment":"> Shoudn't this file be .gitignored ?\r\n\r\nI think you are right..."},{"author":"gares","date":"2017-07-12T12:08:10Z","comment":"ping @CohenCyril "},{"author":"CohenCyril","date":"2017-09-07T15:08:59Z","comment":"I am in favor, @ggonthier what do you think?"},{"author":"thery","date":"2017-11-21T18:11:18Z","comment":"waiting for @CohenCyril 's comment before merging"},{"author":"CohenCyril","date":"2017-11-22T16:44:08Z","comment":"Since we decided to have a staging/unstable area, I guess this file would be better there."},{"author":"CohenCyril","date":"2018-01-26T16:58:37Z","comment":"Actually, the ```near``` tactic from mathcomp-analysis, looks more promising than bigenough.\r\nhttps://github.com/math-comp/analysis/blob/master/topology.v#L413"},{"author":"gares","date":"2018-03-22T10:29:34Z","comment":"@CohenCyril Do we close this one?"},{"author":"CohenCyril","date":"2018-09-07T12:08:54Z","comment":"Waiting for `near`, `big_enough` has now its own repository https://github.com/math-comp/bigenough."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"strub","number":115,"state":"closed","open_date":"2017-03-13T11:53:12Z","update_date":"2017-12-11T19:13:38Z","discussion":[{"author":"CohenCyril","date":"2017-09-07T15:11:47Z","comment":"I'm ok with that, @ggonthier, @amahboubi what do you think?"},{"author":"herbelin","date":"2017-09-07T16:30:55Z","comment":"Hi, sorry for intervene. Do you know if @ggonthier's alias is working? I could not see a comment from him on github and his main page there seems to not have been updated since his move. So, I wonder whether the email address bound to his github account is still valid, and reaches him."},{"author":"CohenCyril","date":"2017-09-08T07:09:58Z","comment":"Thanks Hugo, @maximedenes and @gares suspect the same thing, I sent a mail to Georges' inria address to check with him."},{"author":"strub","date":"2017-11-21T14:59:59Z","comment":"Aren't you doing things in reverse order (merging, commenting code-style, writing a code-style). It seems that you're at step 2 :)"},{"author":"CohenCyril","date":"2017-12-11T19:13:00Z","comment":"Changing in favour of uniqPn from #166 (and uniqP is a short consequence of uniqPn)"}],"tags":[],"pull_requests":[]},{"author":"strub","number":114,"state":"closed","open_date":"2017-03-13T11:50:57Z","update_date":"2017-03-17T10:08:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":113,"state":"closed","open_date":"2017-03-10T13:00:31Z","update_date":"2017-05-25T12:57:20Z","discussion":[{"author":"gares","date":"2017-03-10T14:52:08Z","comment":"\\o/\r\n\r\nThanks"}],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":111,"state":"closed","open_date":"2017-02-23T21:18:41Z","update_date":"2017-03-21T14:37:39Z","discussion":[{"author":"gares","date":"2017-02-24T06:53:24Z","comment":"Also @maximedenes is interested, since such code is in his ssr/quill branch"},{"author":"ejgallego","date":"2017-03-21T14:28:50Z","comment":"Overlay removed as this is being merged upstream, previous build at: https://travis-ci.org/ejgallego/math-comp/builds/204768299"},{"author":"ejgallego","date":"2017-03-21T14:37:36Z","comment":"Thanks!!!"}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":110,"state":"closed","open_date":"2017-02-21T08:57:14Z","update_date":"2017-02-21T09:08:19Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":108,"state":"closed","open_date":"2017-02-09T17:40:13Z","update_date":"2017-03-25T16:08:55Z","discussion":[{"author":"ejgallego","date":"2017-03-14T11:04:56Z","comment":"pinging"}],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":107,"state":"closed","open_date":"2017-02-07T12:54:58Z","update_date":"2017-03-25T16:08:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"akr","number":106,"state":"closed","open_date":"2017-02-07T12:00:23Z","update_date":"2017-09-07T15:14:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":105,"state":"closed","open_date":"2017-02-07T01:18:38Z","update_date":"2017-03-25T16:08:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":104,"state":"closed","open_date":"2017-02-06T21:30:22Z","update_date":"2017-02-09T14:40:28Z","discussion":[{"author":"ejgallego","date":"2017-02-06T21:37:05Z","comment":"Note the interaction of '.opam' caching vs installing a coq `.dev` version.\r\nIndeed, to get fully correct builds, you may need to disable caching.\r\n\r\nWe chose to cache `.opam` as we were really tight on timing and were installing a complete, heavy toolchain there. However, for this kind of setup, `.opam` caching is indeed more of an historical artifact."},{"author":"ejgallego","date":"2017-02-06T21:40:18Z","comment":"I would also personally test 8.6 vs 8.6.dev, but of course that is a matter of preferences. Also, note that we have two different coq packages in opam, the one in the official repos and the one in coq-dev, @maximedenes , what is going on here?"},{"author":"CohenCyril","date":"2017-02-06T21:51:19Z","comment":"@ejgallego would an opam upgrade be sufficient to trigger the rebuild of coq dev ?"},{"author":"ejgallego","date":"2017-02-06T21:59:55Z","comment":"@CohenCyril that seems like a great thing to try, I am not expert in opam but I think it should work."},{"author":"ejgallego","date":"2017-02-06T22:01:54Z","comment":"Something to take into account is that caching is far from free in Travis; indeed the download/unpacking + packing/upload time does count for the build. So it could be well the case that we end up losing net time if we download a fully cached Coq version just to rebuild it."},{"author":"CohenCyril","date":"2017-02-06T22:05:17Z","comment":"Do you have an idea of how much time it takes to use a the cache?\r\nDo you know if it possible to reuse cached data from a Travis build of Coq, so that we decorelate building Coq from building math-comp?"},{"author":"ejgallego","date":"2017-02-06T22:14:15Z","comment":"For a full coq building environment, the cache takes 8 seconds to download an unpack. Then, it takes 30 seconds to reupload it, but this should be surely skipped as the reload is caused by opam adding some unnecessary logging information in `.opam/log`. See: https://travis-ci.org/coq/coq/builds/198948812 for an example.\r\n\r\n> Do you know if it possible to reuse cached data from a Travis build of Coq, so that we decorelate building Coq from building math-comp?\r\n\r\nNot from the Coq travis run unless we setup something special, I think it is not a good idea. If you want binary packages you'll have to use apt for them."},{"author":"ejgallego","date":"2017-02-06T22:16:31Z","comment":"From a testing point of view, I think it is a bad idea to decorrelate Coq and Math-comp, IMHO you want to be sure they run well together with the respective tips of the branches, otherwise you delay detection of problems.\r\n\r\nMore complex CI setups force a rebuild of math-comp whenever Coq changes, however I think we don't have the manpower to do that kind of integration so Coq will take care of its own test and math-comp can use any policy they steem convenient."},{"author":"ejgallego","date":"2017-02-06T22:39:49Z","comment":"The main reason I am a bit wary of caching coq is that it makes the build process too non-deterministic for my taste; build times may go well when the cache is hit, then a cache invalidation may make things to timeout. And note that the cache is generated at the end of the build."},{"author":"CohenCyril","date":"2017-02-06T23:51:09Z","comment":"OK, maybe this is not a good idea after all."},{"author":"ejgallego","date":"2017-02-07T01:24:25Z","comment":"Just to be clear in case I sounded too negative, I don't think that using opam is a bad idea, in fact it seems great to me, however I don't know how to integrate it well with the way Travis learns about dependencies."},{"author":"CohenCyril","date":"2017-02-08T00:39:58Z","comment":"I think it is technically possible to (automatically) build docker images for each version of Coq we want to test against (8.5.3, 8.6, and latest **compiling** 8.6.dev and dev versions), and reuse these images in our math-comp build, so that each job time is \"time to download the appropriate Coq docker image\" + \"compilation time of mathcomp\"... Given there is a docker integration to github, which someone already made work for Coq (cf https://hub.docker.com/r/skippa/coq/builds/), this sounds feasible and not very hard. Actually it could even be part of the travis build (https://sebest.github.io/post/using-travis-ci-to-build-docker-images/, https://docs.travis-ci.com/user/docker/)\r\n\r\nAnd if odd-order is still too long, we could put it in an independent repository, store the build of mathcomp in a docker and use this docker to build odd-order.\r\n\r\nWhat do you think @ejgallego ?"},{"author":"ejgallego","date":"2017-02-08T01:01:50Z","comment":"I am not familiar with Docker so I need to read the links first, but it sounds great!\r\n\r\nOne question thou is how the docker build would interact with the Travis job which is launched at commit time. How do we make the Travis odd_order wait for the math-comp docker image to be ready?\r\n\r\nI was also thinking of using the `deploy` capabilities of Travis to indeed build some kind of caching, this should work well for the Coq case without adding too much complexity to the scripts, (the first job will just upload a `tar.gz` of coq for the rest of ci jobs), however I am not sure mathcomp can really benefit from it."},{"author":"ejgallego","date":"2017-02-08T01:04:11Z","comment":"For instance, could we teach Coq's Travis build to deploy a Coq docker image at every Coq commit ?\r\n"},{"author":"CohenCyril","date":"2017-02-09T12:32:24Z","comment":"yes we can (https://docs.travis-ci.com/user/docker/#Branch-Based-Registry-Pushes)"},{"author":"ejgallego","date":"2017-02-09T14:40:28Z","comment":"That looks great. I could will try to add a docker push to Coq's travis , but it won't happen in February I'm afraid."}],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":103,"state":"closed","open_date":"2017-02-06T18:27:27Z","update_date":"2017-02-06T22:42:23Z","discussion":[{"author":"ejgallego","date":"2017-02-06T18:28:41Z","comment":"example build : https://travis-ci.org/ejgallego/math-comp/builds/198934792"},{"author":"CohenCyril","date":"2017-02-06T19:11:59Z","comment":"I was doing something similar, but this looks cooler"},{"author":"ejgallego","date":"2017-02-06T19:19:30Z","comment":"We could cache Coq more aggressively, but unfortunately it still doesn't give us enough time to test odd_order :S "},{"author":"gares","date":"2017-02-06T19:21:32Z","comment":"Cool.  8.5 fails because of a timeout :-/\r\nMerging it, and waiting for the line to be added to README.md in order to see the status on the \"homepage\" ;-)"},{"author":"gares","date":"2017-02-06T19:25:35Z","comment":"BTW, the Makefile is broken and does not pass -j to submakes.\r\nA quick workaround is `make -f Makefile.coq -j2 all`."},{"author":"gares","date":"2017-02-06T19:26:21Z","comment":"see #88 "},{"author":"ejgallego","date":"2017-02-06T20:05:14Z","comment":"Oh I thought the `-j n` builds worked for me in the past; feel free to adjust as you see fit, the good thing is that if you submit a PR with the change, you will immediately see the speed difference."},{"author":"ejgallego","date":"2017-02-06T20:29:29Z","comment":"> waiting for the line to be added to README.md\r\n\r\nYou need to enable the math-comp repos at the Travis math-comp organization, then, you'll get the proper link to insert."},{"author":"ejgallego","date":"2017-02-06T20:35:24Z","comment":"@gares testing your suggestion at https://travis-ci.org/ejgallego/math-comp/builds/198974374"},{"author":"gares","date":"2017-02-06T20:37:35Z","comment":"@CohenCyril @assia I'd like you to enable travis (I don't have the admin right): https://github.com/mbonaci/mbo-storm/wiki/Integrate-Travis-CI-with-your-GitHub-repo"},{"author":"maximedenes","date":"2017-02-06T20:41:19Z","comment":"Wouldn't it make sense to give the release manager (@gares) admin rights? :)"},{"author":"CohenCyril","date":"2017-02-06T21:22:28Z","comment":"I enabled travis."},{"author":"CohenCyril","date":"2017-02-06T21:47:03Z","comment":"The build of the master branch was not triggered because travis is waiting for a commit.\r\nI submitted pull request simplifying @ejgallego install script using opam as he suggested himself.\r\nWhen they are ready, a pull request will successfully trigger the first build of math-comp#master.\r\nhttps://travis-ci.org/math-comp/math-comp/pull_requests"},{"author":"ejgallego","date":"2017-02-06T21:53:07Z","comment":"Ok, so -j2 as Enrico suggested seems to save 6 minutes[1], it may be worth trying to build at least the first part of the theorem, will push an experiment. Let's see if opam makes the build any slower thou.\r\n\r\n[1] https://travis-ci.org/ejgallego/math-comp/builds/198974374"},{"author":"ejgallego","date":"2017-02-06T21:58:37Z","comment":"Also note that the build in 8.5 is broken (revealed by the parallel build) as the primitive projection test seems to fail."},{"author":"ejgallego","date":"2017-02-06T22:42:23Z","comment":"Ok the first part of the theorem seems to work well under my scheme, trying the full development! It is gonna be tight:\r\n\r\n- https://travis-ci.org/ejgallego/math-comp/builds/199001333 [only BG]\r\n- https://travis-ci.org/ejgallego/math-comp/builds/199015709 [full]"}],"tags":[],"pull_requests":[]},{"author":"ybertot","number":87,"state":"closed","open_date":"2016-12-20T14:35:02Z","update_date":"2016-12-20T14:44:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"hivert","number":82,"state":"closed","open_date":"2016-11-17T00:48:02Z","update_date":"2016-11-17T12:09:51Z","discussion":[{"author":"gares","date":"2016-11-17T12:09:51Z","comment":"thanks\n"}],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":79,"state":"closed","open_date":"2016-11-04T17:47:28Z","update_date":"2016-11-23T10:44:18Z","discussion":[{"author":"gares","date":"2016-11-04T20:03:06Z","comment":"@maximedenes what was the magic trick to get coq-club indexed?\n"},{"author":"amahboubi","date":"2016-11-05T08:44:57Z","comment":"Ciao @gares , I opened a ticket for this 2 days ago. The IT guys did the same trick as for coq-club : let's wait for a couple of days to see if it works.\n"},{"author":"ejgallego","date":"2016-11-05T12:26:30Z","comment":"Indeed @gares that should be set, a direct link to the archives was missing for google to pick them up, as robots.txt still forbids accesing the mailing list information page.\n\nNow that I think of it, @amahboubi , it could make sense to request the INRIA ops to allow access to the info page too. Now if you google \"ssreflect mailing list\" you'll go directly to the archives.\n"},{"author":"ejgallego","date":"2016-11-05T12:27:55Z","comment":"@maximedenes the same applies to coq-club, if you google \"coq club mailing list\" you land into the archives.\n\n[Generally the whole Disallow: / of sympa's robots seems a bit strange IMVVHO]\n"},{"author":"amahboubi","date":"2016-11-15T11:21:40Z","comment":"@ejgallego : can you confirm that \"your\" google finds the archive with this query? I do not manage to reproduce this success...\n"},{"author":"ejgallego","date":"2016-11-15T14:15:43Z","comment":"@amahboubi indeed the list seems poorly indexed still, I was hoping that this trick would improve matters but so far it hasn't.\n\nCurrently I need to google for the title of the page, thus \"ssreflect discussion list\" ; what is weird is that discussions doesn't seem to be followed by google yet.\n"},{"author":"ejgallego","date":"2016-11-22T15:54:51Z","comment":"@amahboubi It seems that google has picked up with the archives and the situation has improved a bit, example: https://www.google.com/#q=ssreflect+tensor+product gets me to the right place now."},{"author":"amahboubi","date":"2016-11-23T10:21:46Z","comment":"Thanks for reporting @ejgallego. Actually I got a message yesterday  from  the Inria sysadmins  about this issue. May be they found the right incantation to be placed in robot.txt. I'll keep you posted here once I get feedback from them."},{"author":"amahboubi","date":"2016-11-23T10:44:18Z","comment":"Indeed, this issue seems to be solved. @maximedenes : they applied the same trick for coq-club :)."}],"tags":[],"pull_requests":[]},{"author":"falcondai","number":78,"state":"closed","open_date":"2016-10-25T22:06:54Z","update_date":"2017-01-18T14:46:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ghost","number":76,"state":"closed","open_date":"2016-10-12T13:42:00Z","update_date":"2016-10-12T13:44:22Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"erikmd","number":73,"state":"closed","open_date":"2016-09-27T14:56:10Z","update_date":"2019-04-25T13:15:30Z","discussion":[{"author":"gares","date":"2016-09-27T22:13:19Z","comment":"Looks fine to me\n"},{"author":"erikmd","date":"2016-09-28T09:01:47Z","comment":"Thanks!\n"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":72,"state":"closed","open_date":"2016-09-24T11:36:19Z","update_date":"2016-09-26T07:51:42Z","discussion":[{"author":"gares","date":"2016-09-26T07:51:42Z","comment":"thanks\n"}],"tags":[],"pull_requests":[]},{"author":"ghost","number":71,"state":"closed","open_date":"2016-09-23T13:21:17Z","update_date":"2016-09-23T13:25:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ghost","number":70,"state":"closed","open_date":"2016-09-22T07:10:39Z","update_date":"2016-09-22T08:22:00Z","discussion":[{"author":"gares","date":"2016-09-22T08:22:00Z","comment":"thanks\n"}],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":69,"state":"closed","open_date":"2016-09-20T11:13:59Z","update_date":"2017-03-25T16:08:43Z","discussion":[{"author":"ejgallego","date":"2016-09-28T08:51:46Z","comment":"Thanks!!!\n"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":68,"state":"closed","open_date":"2016-09-19T13:43:37Z","update_date":"2016-09-24T11:30:58Z","discussion":[{"author":"gares","date":"2016-09-19T18:42:15Z","comment":"I think the change to Make is wrong, isn't the Makefile adding that line (on some versions of Coq)?\n"},{"author":"ppedrot","date":"2016-09-19T19:13:23Z","comment":"Oh, you're right. I tend to use `git commit -a` too easily. I'll push a fixup.\n"},{"author":"gares","date":"2016-09-19T19:16:28Z","comment":"I could not find a better hack, patching Make is ugly, but only 8.6+ wants the mlpack file...\n"},{"author":"ppedrot","date":"2016-09-19T19:21:46Z","comment":"Couldn't you that using some form of conditional inclusion in the makefile?\n"},{"author":"ejgallego","date":"2016-09-20T08:26:29Z","comment":"@gares, note that the makefile patching mess things for me in the following way:\n- after a make the git checkout won't be clean.\n- repeated copies of `ssreflect_plugin.mlpack` get added every time make is run.\n"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":67,"state":"closed","open_date":"2016-09-16T08:50:02Z","update_date":"2016-09-19T03:39:25Z","discussion":[{"author":"gares","date":"2016-09-19T03:39:25Z","comment":"thanks\n"}],"tags":[],"pull_requests":[]},{"author":"thery","number":66,"state":"closed","open_date":"2016-09-15T16:07:30Z","update_date":"2016-10-13T12:18:48Z","discussion":[{"author":"ggonthier","date":"2016-09-15T18:57:45Z","comment":"  Both `mul_binSn` and `mul_binnS` are good additions, and the name change to `mul_binSS` is certainly an improvement. I would have been happy with the Pascal-triangle naming scheme as well, as long as it was documented in a comment.\n  I do have an objection to the parameter naming: `'C(n, m)` is documented with parameters in that order, so it would be best if all lemmas followed that convention, which is almost the case now. Would you mind changing the statements accordingly, and setting right the other three outliers in `binomial` (`bin_gt0`, `leq_bin2l` and `bin_fact`)?\n  As I've noted on the mailing list, it might be worthwhile to generalize and simplify `mul_binSn` and `mul_binSS` by using `n.-1` instead of `n.+1` - the identities `n * 'C(n.-1, m) = m.+1 * 'C(n, m.+1)` and\n`n * 'C(n.-1, m) = (n - m) * 'C(n, m)` are valid for `n = 0` (sadly, this doesn't hold for `m` in the former).\n   I'm not sure how to handle this in your naming scheme, or in your example use; perhaps the Pascal-triangle inspired names are better after all (provided they're documented).\n  Concerning the proofs: there's no need to derive `mul_binSn` and `mul_binnS` from first principles, as the first follows from `mul_binSS` and `bin_sub`, while the second is a chaining of the first with `mul_binSS` (plus the `n=0` case, except if we go for the predecessor variants above).\n  Finally, there's a hidden defect in the `mul_binSS` proof in that it relies on the `mult_n_0` hint in the Coq prelude, thanks to stronger unification in the `trivial` tactic. We should correct this.\n  Here's my suggested code for the revised proofs using the Pasal names (for lack of a better idea) : \n\n```\nLemma bin_gt0 n m : (0 < 'C(n, m)) = (m <= n).\nProof.\nby elim: n m => [|n IHn] [|m] //; rewrite addn_gt0 !IHn orbC ltn_neqAle andKb.\nQed.\n\nLemma leq_bin2l n1 n2 m : n1 <= n2 -> 'C(n1, m) <= 'C(n2, m).\nProof.\nby elim: n1 n2 m => [|n1 IHn] [|n2] [|m] le_n12 //; rewrite leq_add ?IHn.\nQed.\n\nLemma bin_small n m : n < m -> 'C(n, m) = 0.\nProof. by rewrite ltnNge -bin_gt0; case: posnP. Qed.\n\nLemma binn n : 'C(n, n) = 1.\nProof. by elim: n => [|n IHn] //; rewrite binS bin_small. Qed.\n\n(* Multiply to move diagonally down and right in the Pascal triangle. *)\nLemma mul_bin_diag n m : n * 'C(n.-1, m) = m.+1 * 'C(n, m.+1).\nProof.\nrewrite [RHS]mulnC; elim: n m => [|[|n] IHn] [|m] //=; first by rewrite bin1.\nby rewrite mulSn [in _ * _]binS mulnDr addnCA !IHn -mulnS -mulnDl -binS.\nQed.\n\nLemma bin_fact n m : m <= n -> 'C(n, m) * (m`! * (n - m)`!) = n`!.\nProof.\nelim: n m => [|n IHn] [|m] // le_m_n; first by rewrite bin0 !mul1n.\nby rewrite !factS -!mulnA mulnCA mulnA -mul_bin_diag -mulnA IHn.\nQed.\n\n(* In fact the only exception for bin_factd is n = 0 and m = 1 *)\nLemma bin_factd n m : 0 < n -> 'C(n, m) = n`! %/ (m`! * (n - m)`!).\nProof.\nhave [/bin_fact<-|*] := leqP m n; first by rewrite mulnK ?muln_gt0 ?fact_gt0.\nby rewrite divnMA bin_small ?divn_small ?fact_gt0 ?fact_smonotone.\nQed.\n\nLemma bin_ffact n m : 'C(n, m) * m`! = n ^_ m.\nProof.\nhave [lt_n_m | le_m_n] := ltnP n m; first by rewrite bin_small ?ffact_small.\nby rewrite ffact_factd // -(bin_fact le_m_n) mulnA mulnK ?fact_gt0.\nQed.\n\nLemma bin_ffactd n m : 'C(n, m) = n ^_ m %/ m`!.\nProof. by rewrite -bin_ffact mulnK ?fact_gt0. Qed.\n\nLemma bin_sub n m : m <= n -> 'C(n, n - m) = 'C(n, m).\nProof.\nby move=> le_m_n; rewrite !bin_ffactd !ffact_factd ?leq_subr // divnAC subKn.\nQed.\n\n(* Multiply to move down in the Pascal triangle. *)\nLemma mul_bin_down n m : n * 'C(n.-1, m) = (n - m) * 'C(n, m).\nProof.\ncase: n => //= n; have [lt_n_m | le_m_n] := ltnP n m.\n  by rewrite (eqnP lt_n_m) mulnC bin_small.\nby rewrite -!['C(_, m)]bin_sub ?leqW ?subSn ?mul_bin_diag.\nQed.\n\n(* Multiply to move left in the Pascal triangle. *)\nLemma mul_bin_left n m : m.+1 * 'C(n, m.+1) = (n - m) * 'C(n, m).\nProof. by rewrite -mul_bin_diag mul_bin_down. Qed.\n\nLemma binSn n : 'C(n.+1, n) = n.+1.\nProof. by rewrite -bin_sub ?leqnSn // subSnn bin1. Qed.\n\nLemma bin2 n : 'C(n, 2) = (n * n.-1)./2.\nProof. by rewrite -[n.-1]bin1 mul_bin_diag -divn2 mulKn. Qed.\n\nLemma bin2odd n : odd n -> 'C(n, 2) = n * n.-1./2.\nProof. by case: n => // n oddn; rewrite bin2 -!divn2 muln_divA ?dvdn2. Qed.\n\nLemma prime_dvd_bin k p : prime p -> 0 < k < p -> p %| 'C(p, k).\nProof.\nmove=> p_pr /andP[k_gt0 lt_k_p].\nsuffices /Gauss_dvdr<-: coprime p (p - k) by rewrite -mul_bin_down dvdn_mulr.\nby rewrite prime_coprime // dvdn_subr 1?ltnW // gtnNdvd.\nQed.\n```\n"}],"tags":[],"pull_requests":[]},{"author":"gares","number":65,"state":"closed","open_date":"2016-09-07T16:02:42Z","update_date":"2016-10-13T12:20:30Z","discussion":[{"author":"amahboubi","date":"2016-10-05T09:35:54Z","comment":"I like this one and actually used a similar device in my own proof scripts. Any reason why it's not merged yet?\n"}],"tags":[],"pull_requests":[]},{"author":"ghost","number":60,"state":"closed","open_date":"2016-08-26T17:40:05Z","update_date":"2016-08-28T07:24:55Z","discussion":[{"author":"gares","date":"2016-08-28T07:24:55Z","comment":"Thanks!\n"}],"tags":[],"pull_requests":[]},{"author":"ghost","number":59,"state":"closed","open_date":"2016-08-25T15:43:57Z","update_date":"2016-08-25T15:59:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ghost","number":58,"state":"closed","open_date":"2016-08-24T09:18:51Z","update_date":"2016-08-24T20:50:48Z","discussion":[{"author":"gares","date":"2016-08-24T12:47:18Z","comment":"Thanks for the PR!\n"},{"author":"ghost","date":"2016-08-24T15:31:52Z","comment":"I've added a commit  https://github.com/math-comp/math-comp/pull/58/commits/6bc53af07a100aad305393edb14c4a3d73b3e3b7 which addresses the code duplication that you pointed out.\n\nConsequences:\n\n**(1)**\n\nThis:\n\n``` Ocaml\nbo <> None\n```\n\nwas replaced with:\n\n``` Ocaml\nNamedDecl.is_local_def decl\n```\n\nThe first version works flawlessly.\n\nThe second version likewise, but there is an additional bonus;\n(for those ones who read the code, not for those ones who have written it) :\nit is obvious what that condition actually means.\n\n**(2)**\n\nThis:\n\n``` Ocaml\nlet _, bo, ty = Named.Declaration.to_tuple (pf_get_hyp gl x) in\nmkProd_or_LetIn (mk_reldecl (Name (f x)) bo ty) (subst_var x c)\n```\n\nwas replaced with:\n\n``` Ocaml\nlet decl = pf_get_hyp gl x in\nmkProd_or_LetIn (decl |> NamedDecl.to_rel |> RelDecl.set_name (Name (f x)))\n                (subst_var x c)\n```\n\nThe only point here is that we drop conversion `to_tuple`.\nSo, instead of converting named-declaration to tuple which was then converted to rel-declaration,\nwe convert named-declaration directly to rel-declaration.\n"},{"author":"gares","date":"2016-08-24T20:50:48Z","comment":"thanks\n"}],"tags":[],"pull_requests":[]},{"author":"ghost","number":57,"state":"closed","open_date":"2016-08-12T09:20:50Z","update_date":"2016-08-16T07:56:55Z","discussion":[{"author":"gares","date":"2016-08-16T07:56:55Z","comment":"Thanks\n"}],"tags":[],"pull_requests":[]},{"author":"ghost","number":49,"state":"closed","open_date":"2016-06-03T15:10:35Z","update_date":"2016-06-03T15:11:14Z","discussion":[{"author":"gares","date":"2016-06-03T15:11:10Z","comment":"Thanks!\n"}],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":48,"state":"closed","open_date":"2016-05-31T13:04:17Z","update_date":"2017-03-25T16:08:34Z","discussion":[{"author":"gares","date":"2016-06-01T12:41:45Z","comment":"Thanks!\n"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":46,"state":"closed","open_date":"2016-05-18T09:48:37Z","update_date":"2016-05-18T11:38:57Z","discussion":[{"author":"gares","date":"2016-05-18T11:38:57Z","comment":"thanks\n"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":44,"state":"closed","open_date":"2016-05-16T13:34:39Z","update_date":"2016-05-16T19:55:03Z","discussion":[{"author":"gares","date":"2016-05-16T19:55:00Z","comment":"thanks!\n"}],"tags":[],"pull_requests":[]},{"author":"hivert","number":43,"state":"closed","open_date":"2016-05-12T13:35:49Z","update_date":"2016-05-12T13:39:39Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":42,"state":"closed","open_date":"2016-05-09T13:05:05Z","update_date":"2016-05-09T14:25:04Z","discussion":[{"author":"gares","date":"2016-05-09T13:58:51Z","comment":"Thanks!\n"}],"tags":[],"pull_requests":[]},{"author":"hivert","number":41,"state":"closed","open_date":"2016-05-05T22:37:18Z","update_date":"2017-12-11T22:44:01Z","discussion":[{"author":"hivert","date":"2016-05-05T23:50:05Z","comment":"Thanks for rereading my proofs. It's certainly a good way for me to improve my Coq/SSReflect skills. I Implemented your suggestions and pushed.\n"},{"author":"hivert","date":"2016-05-06T07:35:09Z","comment":"Updated pull request according to your comment.\n"},{"author":"hivert","date":"2016-05-10T15:24:47Z","comment":"Dear Georges,\n\nThanks for the careful rereading of my pull request ! I'll soon propose a new patch taking care of all your remarks.\n\nFlorent\n"},{"author":"hivert","date":"2016-11-17T00:32:06Z","comment":"First of all, I'm sorry that I took me so long to answer your suggestions. I should have addressed all of them including the remark on the reshape/flatten index theory  up there (the one with 5 comments). It a pity there is no numbering on the comment in Github, becaus there is no way to point so some comment. \n"},{"author":"hivert","date":"2017-12-04T00:03:10Z","comment":"Why github is still complaining about the conflict which is resolved in my branch ?"},{"author":"hivert","date":"2017-12-04T20:09:04Z","comment":"On Mon, Dec 04, 2017 at 04:36:17AM -0800, Cyril Cohen wrote:\n> The best practice would have been to open a new branch on your side to prepare the pull request, and then change the content of this branch each time you update your pull request, or each time you rebase your branch on top of master.\n> \n> Since you did not do it, you will have to force your branch master : I think you should remove your merge commit, then add a new commit on your master branch and rebase it on top of our master. Then github will update your pull request accordingly and state it has no conflicts. Does what I say make sense?\n\nIt's very strange, since I did only use github web interface. I haven't been\ndoing any Coq for a few months so that I need to update it together with\nMathcomp. Since It takes some times I tried to do everything online. I what\nyou said is true, I don't understand why they gives all these cliquodrome\nstuff online. Anyway, Sorry for the mess.\n\nA++\n\nFlorent\n"},{"author":"CohenCyril","date":"2017-12-11T10:20:37Z","comment":"Hi Florent, I agree it's a bit annoying that github allows you to click in ways that makes it enter an inconsistent state... Do you want me do handle this for you? If you are ok with it, I may rework your existing pull request to make it consistent with github and then merge."},{"author":"amahboubi","date":"2017-12-11T10:32:18Z","comment":"Indeed, it's a pain. BTW I think it would be good, to add something about the expected shape of history in ready-to-merge PRs in the [checklist](https://github.com/math-comp/math-comp/wiki/checklist-pr). Any wording suggestion @maximedenes ?\r\n"},{"author":"amahboubi","date":"2017-12-11T10:35:19Z","comment":"@CohenCyril, you self-assigned the review: what's the status of your review here as of today? Is it only a matter of cleaning the commits or is there anything more semantic to be done?"},{"author":"CohenCyril","date":"2017-12-11T10:40:29Z","comment":"@amahboubi, I guess now it should be ok with regard to the extensive review @ggonthier did a while ago. However, now, with the inconsitent state in github, it is very difficult to make a last review before merging, because github won't show me the correct diff!"},{"author":"hivert","date":"2017-12-11T10:41:54Z","comment":"      Dear Cyril,\n\nOn Mon, Dec 11, 2017 at 10:20:38AM +0000, Cyril Cohen wrote:\n> Hi Florent, I agree it's a bit annoying that github allows you to click in\n> ways that makes it enter an inconsistent state... Do you want me do handle\n> this for you? If you are ok with it, I may rework your existing pull request\n> to make it consistent with github and then merge.\n\nPlease do ! My fork is public <https://github.com/hivert/math-comp> so don't\nhesitate to refork it and finish the merge. Thanks !\n\nFlorent\n\n"},{"author":"hivert","date":"2017-12-11T10:49:59Z","comment":"On Mon, Dec 11, 2017 at 02:40:30AM -0800, Cyril Cohen wrote:\n> However, now, with the inconsitent state in github, it is very difficult to\n> make a last review before merging, because github won't show me the correct\n> diff!\n\nSorry for the mess ! I've been doing code review for years (mostly in the\nSagemath project), but it's the first time I'm using github interface for\nit. I didn't expect thing to go west that way in a few click. It scares me a\nlittle about github interface.\n\nBest,\n\nFlorent\n"},{"author":"hivert","date":"2017-12-11T11:02:02Z","comment":"@CohenCyril: I actually had a repo ready to be forked, So I made a new branch and resubmitted a new PR See https://github.com/math-comp/math-comp/pull/166"},{"author":"CohenCyril","date":"2017-12-11T22:43:23Z","comment":"merged as #166 "}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":40,"state":"closed","open_date":"2016-05-02T09:39:59Z","update_date":"2016-05-04T12:15:05Z","discussion":[{"author":"gares","date":"2016-05-04T12:15:05Z","comment":"Thanks\n"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":39,"state":"closed","open_date":"2016-04-08T13:28:36Z","update_date":"2016-04-15T13:30:45Z","discussion":[{"author":"ppedrot","date":"2016-04-12T15:25:32Z","comment":"Up.\n"},{"author":"gares","date":"2016-04-12T18:47:00Z","comment":"Many thanks, but I had no time to look at it.  It is small, but I quite don't get why \"Local\" and what/how it fixes.  Tomorrow I'll have some time, but an explanation may help.\n"},{"author":"ppedrot","date":"2016-04-12T18:54:55Z","comment":"The merge introduced a new notation scope for functions, so that some notations that used a syntaxical parameter in two different scopes (e.g. as an argument vs. as a function) would fail. There were two places where it broke, so that I added the Argument directive to remove the %function scope for the problematic arguments. As this only affects the notation below, I made it local so as not to interfere with the remainder of the files, even though I think it would not have changed anything in practice.\n"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":38,"state":"closed","open_date":"2016-03-27T12:08:17Z","update_date":"2016-03-31T07:45:11Z","discussion":[{"author":"ppedrot","date":"2016-03-28T14:18:10Z","comment":"The assertion issue was fixed by Hugo in 111e5edf.\n"},{"author":"gares","date":"2016-03-31T07:45:11Z","comment":"Thanks!\n"}],"tags":[],"pull_requests":[]},{"author":"strub","number":34,"state":"closed","open_date":"2016-03-15T11:25:07Z","update_date":"2016-03-15T20:52:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":33,"state":"closed","open_date":"2016-03-03T16:09:07Z","update_date":"2017-03-25T16:08:35Z","discussion":[{"author":"gares","date":"2016-03-03T21:06:44Z","comment":"thanks\n"},{"author":"ejgallego","date":"2016-03-03T21:14:54Z","comment":"thanks Enrico!\n"},{"author":"thery","date":"2016-03-04T08:51:55Z","comment":"Hi,\n\nDoes this solve the problem of the search that was not working properly \nin jsCoq?\n\nOn 03/03/2016 10:14 PM, Emilio Jesús Gallego Arias wrote:\n\n> thanks Enrico!\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/math-comp/math-comp/pull/33#issuecomment-191967213.\n"},{"author":"ejgallego","date":"2016-03-04T10:15:48Z","comment":"@thery there have been many improvements to the search support, both in the Coq version we ship and in jsCoq itself; IMHO search works much better now.\n\nHowever, large searches still generate `StackOverflows`, I think I have a possible intuition about what the problem is and won't be easy to fix; for now I suggest to workarounds:\n- use `Search ... in module`.\n- start chrome with a larger stack size: `--js-flags=\"--stack-size=65536\"`\n\nIn fact, I've missed this problem as I usually test with a large stack size.\n"},{"author":"ejgallego","date":"2016-03-04T18:59:02Z","comment":"Just for reference @thery, I think I have fully nailed the search issue, see: ejgallego/jscoq#13 \n"},{"author":"gmalecha","date":"2016-04-24T20:50:01Z","comment":"@ejgallego What are the largest searches that you've done?\n"},{"author":"thery","date":"2016-04-24T21:23:43Z","comment":"I guess a search that returns more than 1000 results is useless\n\nOn 04/24/2016 10:50 PM, Gregory Malecha wrote:\n\n> @ejgallego https://github.com/ejgallego What are the largest searches\n> that you've done?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/math-comp/math-comp/pull/33#issuecomment-214032772\n"},{"author":"ejgallego","date":"2016-04-25T17:22:56Z","comment":"@gmalecha searching with Mathcomp loades easily goes throu filtering ten-of-thousands of entries (as @thery points out, not all of them should be returned thou).\n"},{"author":"ejgallego","date":"2016-05-02T14:58:35Z","comment":"Hi @thery , recent improvements to the Chrome recursion optimizer means that large searches seem to work OK now. Do you have a concrete test case? Thanks.\n\n[BTW, I won't spam this issue anymore, people interested in Search performance can follow ejgallego/jscoq#13 ]\n"}],"tags":[],"pull_requests":[]},{"author":"hivert","number":32,"state":"closed","open_date":"2016-03-02T10:48:04Z","update_date":"2016-03-02T11:17:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":25,"state":"closed","open_date":"2016-02-15T12:22:22Z","update_date":"2016-02-15T14:11:15Z","discussion":[{"author":"gares","date":"2016-02-15T14:09:45Z","comment":"Thanks!\n"},{"author":"ppedrot","date":"2016-02-15T14:11:15Z","comment":"I'm still pushing some patches that are going to break the ML compilation. I'll propose another pull-request when I'm done for today.\n"}],"tags":[],"pull_requests":[]},{"author":"ejgallego","number":24,"state":"closed","open_date":"2016-02-09T16:05:44Z","update_date":"2017-03-25T16:08:37Z","discussion":[{"author":"amahboubi","date":"2016-02-09T16:38:07Z","comment":"Hi Emilio, \n\nthis lemma already exists in [prime.v](https://github.com/math-comp/math-comp/blob/master/mathcomp/ssreflect/prime.v#L593), under the same name (and with the same proof).\n\nBut I agree it looks misplaced, so we could indeed move it to div. Any objection?\n"},{"author":"ejgallego","date":"2016-02-09T16:47:01Z","comment":"Hi Assia,\n\nUps! Sorry for the noise, I had this on my TODO from mathcomp 1.5 times I guess and forgot to double check. Please close.\n\nIndeed it would make more sense to have it in `div`, the lemma seems to be added in 1.6 so I guess not a lot of users should be impacted by the change. I've updated the PR just in case.\n"},{"author":"amahboubi","date":"2016-02-09T16:51:29Z","comment":"Many thanks for the PR update!\n"},{"author":"ejgallego","date":"2016-02-09T16:56:25Z","comment":"Thanks Assia !\n"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"pull_requests":[]},{"author":"ppedrot","number":20,"state":"closed","open_date":"2016-01-31T18:35:10Z","update_date":"2016-02-01T09:56:25Z","discussion":[{"author":"gares","date":"2016-02-01T09:19:00Z","comment":"Many thanks PMP!\n\nI've a question.  Clearly having a value escape the monad via an assignment is not very elegant.  Is what we do in ssr completely unsupported by the new API, or I should \"just\" rewrite everything in that monad?\n"},{"author":"ppedrot","date":"2016-02-01T09:56:25Z","comment":"This is clearly a hack, but at the same time the proper API to escape the Ftactic monad into non-unit Proofview.tactic is unclear. Note that the same problem arises for the Proofview.tactic monad, because Proofview.V82.of_tactic does lose information and is, as such, a hack. It would be indeed more reasonable to put the code of ssreflect into the (various) monads.\n"}],"tags":[],"pull_requests":[]},{"author":"strub","number":13,"state":"closed","open_date":"2016-01-06T06:20:08Z","update_date":"2016-01-06T19:46:03Z","discussion":[{"author":"gares","date":"2016-01-06T19:45:44Z","comment":"Thanks\n"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":12,"state":"closed","open_date":"2015-12-03T16:05:27Z","update_date":"2015-12-03T18:53:23Z","discussion":[{"author":"gares","date":"2015-12-03T18:53:23Z","comment":"thanks\n"}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":10,"state":"closed","open_date":"2015-11-23T18:24:23Z","update_date":"2015-12-03T18:53:50Z","discussion":[{"author":"gares","date":"2015-11-23T18:58:16Z","comment":"Thanks for the patch!\nBut I guess I'd prefer a single function adapting the new API to the old one... most of the patch seems to repeat the very same pattern over and over.\n"},{"author":"ppedrot","date":"2015-11-24T00:15:31Z","comment":"Well, I think ssreflect would gain a lot by switching to the new (unfinished) API, as it would allow for a static expression of relative timing between evarmaps. The current patch is compatible with a gradual typing of extensibility constraints...\n"},{"author":"gares","date":"2015-11-24T07:36:31Z","comment":"Sorry but I'm not following.  I'm OK for the new API, but this can be done only when the API is final.  Your pull request seem to wrap the new API into a compatibility function, but that function is not defined, it is just inlined.  What do you mean by \"compatible with gradual...\"? An why this is not possible if one defines a wrapper once an forall?  Best.\n"},{"author":"ppedrot","date":"2015-11-24T08:30:40Z","comment":"I mean that under the assumption that in ssreflect you want to use the new API rather than just port the code to it (i.e. making explicit constraints in the type of ssreflect functions), this is going to require a non negligible amount of work. Therefore, you'll have to do it on several passes, and you'll end up needing several variants of the wrapper, according to the types of its arguments and returned value (depending of what part of the code around you upgraded). The advantage of the current patch is that you can remove the compatibility lines one by one on a per-use basis.\n"},{"author":"gares","date":"2015-12-03T18:53:50Z","comment":"merged\n"}],"tags":[],"pull_requests":[]},{"author":"mattam82","number":1,"state":"closed","open_date":"2015-04-03T06:48:01Z","update_date":"2015-04-03T08:03:05Z","discussion":[],"tags":[],"pull_requests":[]}]