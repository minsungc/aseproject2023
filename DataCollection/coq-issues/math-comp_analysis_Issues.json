[{"author":"affeldt-aist","number":894,"state":"open","open_date":"2023-04-11T14:15:52Z","update_date":"2023-04-11T14:15:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":893,"state":"open","open_date":"2023-04-11T04:21:17Z","update_date":"2023-04-11T04:21:21Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"},{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"proux01","number":892,"state":"closed","open_date":"2023-04-09T09:57:25Z","update_date":"2023-04-09T12:31:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":891,"state":"closed","open_date":"2023-04-06T11:39:00Z","update_date":"2023-04-10T06:44:28Z","discussion":[],"tags":[{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"affeldt-aist","number":890,"state":"open","open_date":"2023-04-06T01:37:29Z","update_date":"2023-04-06T01:37:30Z","discussion":[],"tags":[{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"affeldt-aist","number":889,"state":"closed","open_date":"2023-04-05T04:33:12Z","update_date":"2023-04-05T05:37:31Z","discussion":[],"tags":[{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"zstone1","number":888,"state":"closed","open_date":"2023-03-29T04:07:17Z","update_date":"2023-03-29T15:19:16Z","discussion":[{"author":"proux01","date":"2023-03-29T15:19:04Z","comment":"CI green (we only support 8.16 and 8.17 on HB branch), let's merge.\r\nThanks a lot!"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":887,"state":"closed","open_date":"2023-03-28T16:28:14Z","update_date":"2023-04-07T06:38:27Z","discussion":[{"author":"affeldt-aist","date":"2023-03-28T16:31:24Z","comment":"Note that `sqrte` is also defined in [PR #790](https://github.com/math-comp/analysis/pull/790/) @hoheinzollern "},{"author":"proux01","date":"2023-04-06T11:42:26Z","comment":"Sorry, I should have undrafted that long ago."}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":886,"state":"open","open_date":"2023-03-28T03:42:27Z","update_date":"2023-03-28T03:44:35Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"},{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"zstone1","number":885,"state":"open","open_date":"2023-03-27T04:28:27Z","update_date":"2023-03-27T04:39:54Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"},{"tag":"experiment :test_tube:","description":"This issue/PR is very experimental"}],"pull_requests":[]},{"author":"affeldt-aist","number":884,"state":"closed","open_date":"2023-03-27T01:24:27Z","update_date":"2023-03-31T09:38:38Z","discussion":[],"tags":[{"tag":"packaging/releasing","description":"Issue/PR about packaging or realising."}],"pull_requests":[]},{"author":"affeldt-aist","number":883,"state":"closed","open_date":"2023-03-19T18:26:09Z","update_date":"2023-04-10T06:44:29Z","discussion":[],"tags":[{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":882,"state":"open","open_date":"2023-03-17T06:50:23Z","update_date":"2023-03-17T06:50:31Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":881,"state":"closed","open_date":"2023-03-16T05:52:37Z","update_date":"2023-03-16T09:38:47Z","discussion":[{"author":"affeldt-aist","date":"2023-03-16T05:55:54Z","comment":"This looks uncontroversial, almost a bug fix, so as long as there is no objection wrt naming, I will merge soon."},{"author":"CohenCyril","date":"2023-03-16T08:39:38Z","comment":"I disagree... If you are going to refactor, let's make ae a filter and use filter lemmas rather than duplicating the theory of filters."},{"author":"affeldt-aist","date":"2023-03-16T09:36:00Z","comment":"That would be better indeed. What about we merge this and issue about the generalization and I open a new PR for it ASAP?"}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":880,"state":"open","open_date":"2023-03-15T15:31:21Z","update_date":"2023-03-17T00:11:15Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"},{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"}],"pull_requests":[]},{"author":"affeldt-aist","number":879,"state":"open","open_date":"2023-03-15T15:29:57Z","update_date":"2023-03-15T15:29:57Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":878,"state":"open","open_date":"2023-03-15T15:28:25Z","update_date":"2023-03-15T15:28:26Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":877,"state":"closed","open_date":"2023-03-15T03:54:57Z","update_date":"2023-03-18T23:56:40Z","discussion":[{"author":"affeldt-aist","date":"2023-03-15T16:10:49Z","comment":"Thanks for taking a look. Indeed, the proof mimics a paper proof presented like equational reasoning, see page 16 of http://www.cs.ox.ac.uk/people/samuel.staton/papers/esop2017.pdf."},{"author":"affeldt-aist","date":"2023-03-15T16:25:51Z","comment":"> Inspired by agda's equational reasoning stuff, I made a little notation to for formalize it in a different library.\r\n> See https://github.com/zstone1/coq-complex/blob/master/src/helpers.v around line 170.\r\n> It has the benefit of being able to `_` away unchanged terms. I'd love to have something like this in mathcomp.\r\n> Also it's generalized to any transitive reflexive relation, including `<` and `<=`.\r\n\r\nExample of use:\r\nhttps://github.com/zstone1/coq-complex/blob/9ee101eb5b34c30d2e136dd2c080613096c593a1/src/complex_core.v#L485-L495\r\n\r\nIndeed, I believe that there are situations where an approach which highlights what's changing improves maintainability despite the extra verbosity. "},{"author":"affeldt-aist","date":"2023-03-18T02:06:21Z","comment":"> I'd love to have something like this in mathcomp.\r\n\r\nDo you want to record this as a wish issue before merging?\r\n"}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":876,"state":"closed","open_date":"2023-03-14T14:36:30Z","update_date":"2023-03-31T11:09:43Z","discussion":[{"author":"affeldt-aist","date":"2023-03-22T08:06:23Z","comment":"@thery Allow me to ping you in case this slipped under your radar"},{"author":"proux01","date":"2023-03-30T13:02:16Z","comment":"I'll merge tomorrow if there is no more comment"},{"author":"hoheinzollern","date":"2023-03-31T04:51:35Z","comment":"LGTM "},{"author":"affeldt-aist","date":"2023-03-31T10:35:33Z","comment":"Many thanks for the reviews!"}],"tags":[{"tag":"\"bug\" :bug:","description":"This issue (resp. PR) describes (resp. fixes) a \"bug\""},{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"affeldt-aist","number":875,"state":"open","open_date":"2023-03-14T05:15:58Z","update_date":"2023-04-07T05:22:38Z","discussion":[{"author":"affeldt-aist","date":"2023-03-15T16:01:01Z","comment":"Since this renaming was part of a discussion with @CohenCyril @ybertot @t6s I guess we can merge in the interest of time (it is used in PR #873 ). "},{"author":"affeldt-aist","date":"2023-03-29T07:32:34Z","comment":"It was brought to my attention that `line_path` might be a bit long after all.\r\nI am not sure but anyway since PR #873 is underway we will have the occasion pretty soon to discuss the naming again if necessary."}],"tags":[{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"},{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"affeldt-aist","number":874,"state":"closed","open_date":"2023-03-14T03:04:29Z","update_date":"2023-03-27T15:53:04Z","discussion":[{"author":"affeldt-aist","date":"2023-03-15T03:56:42Z","comment":"To rename the fields `axX`, I just reuse the name of the lemmas that are proved directly by these axioms, so the naming should be uncontroversial."}],"tags":[{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"},{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"},{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"affeldt-aist","number":873,"state":"open","open_date":"2023-03-13T17:16:07Z","update_date":"2023-04-10T10:34:24Z","discussion":[{"author":"affeldt-aist","date":"2023-03-13T17:23:00Z","comment":"[NB: review comment by @zstone1 copied verbatim from PR https://github.com/math-comp/analysis/pull/794 ]\r\n\r\nNice results. I've made comments about a couple generalizations, one regarding annoying endpoint issues, the other regarding generalizing to vector space ranges. I care more about the endpoints one mostly because it's much harder to fix later. Happy to work with you on that if that'd be helpful."},{"author":"hoheinzollern","date":"2023-03-17T16:35:30Z","comment":"On top of being helpful for the exponential function, definitions about convexity are also necessary for the formalization of Hoelder's inequality and the special case of Cauchy Schwarz's inequality from PR #790."},{"author":"affeldt-aist","date":"2023-04-10T04:18:06Z","comment":"Many thanks for the review!"}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"},{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"proux01","number":872,"state":"closed","open_date":"2023-03-10T09:32:42Z","update_date":"2023-03-10T10:03:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":871,"state":"open","open_date":"2023-03-08T23:34:27Z","update_date":"2023-03-27T16:01:48Z","discussion":[],"tags":[{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"proux01","number":870,"state":"closed","open_date":"2023-03-06T10:06:41Z","update_date":"2023-03-06T10:27:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":869,"state":"closed","open_date":"2023-03-04T19:53:14Z","update_date":"2023-03-15T15:53:01Z","discussion":[{"author":"proux01","date":"2023-03-14T16:14:37Z","comment":"> Class `infer`, lemma `inferP`, class `unify`, `unify'`, instance `unify'P` already appear in `signed.v` which is Require Imported, so maybe they can be removed (maybe they were duplicated to make the file self-contained?).\r\n\r\nYes, since the hint and instances are `#[global]`, the `Require Import` is enough and they can be removed.\r\n\r\n> The identifiers `top_typ_subproof` and `top_typ` appear in both `signed.v` and `itv.v`, maybe they can be distinguished? (Similar comment for lemmas `bottom`, `gt0`, `le0F`, `lt0`, `ge0F`, `ge0`, `lt0F`, `le0`, `gt0F`.)\r\n\r\nIf we may import both (which seems likely), they indeed should be distinguished, maybe just prefix them with `itv_`?"},{"author":"affeldt-aist","date":"2023-03-15T13:28:24Z","comment":"We could maybe issue about these two comments when merging:\r\n> The multiplication only works for realDomainType (and not for numDomainType), for relatively bad reasons.\r\n> The proof of the multiplication could probably be improved using wlog.\r\nAnd maybe also issue about the future removal of the trailing tests."}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":868,"state":"closed","open_date":"2023-03-03T14:18:29Z","update_date":"2023-03-27T15:53:08Z","discussion":[],"tags":[{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":867,"state":"closed","open_date":"2023-03-03T14:17:09Z","update_date":"2023-03-27T15:53:07Z","discussion":[],"tags":[{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":866,"state":"closed","open_date":"2023-03-03T14:14:29Z","update_date":"2023-03-27T15:53:05Z","discussion":[{"author":"affeldt-aist","date":"2023-03-11T17:23:07Z","comment":"ax1 -> nbhs_pfilter\nax3 -> openE\nax2 -> nbhsE \n"}],"tags":[{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":865,"state":"closed","open_date":"2023-03-03T14:02:32Z","update_date":"2023-03-27T15:53:08Z","discussion":[],"tags":[{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":864,"state":"closed","open_date":"2023-03-03T13:37:57Z","update_date":"2023-03-27T15:53:09Z","discussion":[{"author":"affeldt-aist","date":"2023-03-03T13:39:47Z","comment":"actually it is in the form of the {ptws, _ ---> _} notation"}],"tags":[{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"}],"pull_requests":[]},{"author":"t6s","number":863,"state":"closed","open_date":"2023-03-01T17:03:48Z","update_date":"2023-03-15T15:21:17Z","discussion":[{"author":"t6s","date":"2023-03-02T09:57:50Z","comment":"squashed and rebased"},{"author":"thery","date":"2023-03-02T10:07:54Z","comment":"are these theorems not already backported in mathcomp?"},{"author":"t6s","date":"2023-03-02T10:16:46Z","comment":"> are these theorems not already backported in mathcomp?\r\n\r\nIndeed.. https://github.com/math-comp/math-comp/blob/568633c91a3d3ba4b5f012b677b90707ac24b056/mathcomp/ssreflect/order.v#L4448"},{"author":"thery","date":"2023-03-02T10:31:24Z","comment":"so there should be a PR there too\r\n"},{"author":"t6s","date":"2023-03-02T11:44:59Z","comment":"> so there should be a PR there too\r\n\r\nYes: https://github.com/math-comp/math-comp/pull/974"}],"tags":[{"tag":"\"bug\" :bug:","description":"This issue (resp. PR) describes (resp. fixes) a \"bug\""}],"pull_requests":[]},{"author":"affeldt-aist","number":862,"state":"closed","open_date":"2023-03-01T14:51:49Z","update_date":"2023-03-27T15:53:10Z","discussion":[],"tags":[{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"}],"pull_requests":[]},{"author":"MSoegtropIMC","number":861,"state":"closed","open_date":"2023-03-01T08:24:07Z","update_date":"2023-04-03T10:40:46Z","discussion":[{"author":"MSoegtropIMC","date":"2023-03-31T12:54:50Z","comment":"@affeldt-aist @CohenCyril : can you please close this issue in case coq-mathcomp-analysis.0.6.1 is fine for Coq Platform 2023.03?"},{"author":"MSoegtropIMC","date":"2023-04-03T10:13:43Z","comment":"@affeldt-aist : one note on this: reviewing this I found that this depends on `coq-mathcomp-classical.0.6.1`. I am still having a local patched opam file for this, which relaxes the Coq version restrictions:\r\n\r\nhttps://github.com/coq/platform/blob/main/opam/opam-coq-archive/released/packages/coq-mathcomp-classical/coq-mathcomp-classical.0.6.1/opam\r\n\r\nShall I just push this upstream?\r\n\r\nAlso should `coq-mathcomp-classical` be added to Coq Platform \"in its own right\" or remain to be pulled in as dependency? This affects e.g. how it is listed in package lists. As dependency it appears only in the \"fine print\". I have no issue to change this right away. Please reopen this ticket if you wish me to do so."},{"author":"affeldt-aist","date":"2023-04-03T10:40:46Z","comment":"> I am still having a local patched opam file for this, which relaxes the Coq version restrictions:\r\n> \r\n> https://github.com/coq/platform/blob/main/opam/opam-coq-archive/released/packages/coq-mathcomp-classical/coq-mathcomp-classical.0.6.1/opam\r\n> \r\n> Shall I just push this upstream?\r\n\r\nThe difference that I see is that Coq 1.17.X is allowed in your patch.\r\nI guess one of us will soon update the opam files of MathComp-Analysis\r\nto allow for it so there is not need for you to take the trouble of pushing\r\nupstream. \r\n\r\n> Also should `coq-mathcomp-classical` be added to Coq Platform\r\n> \"in its own right\" or remain to be pulled in as dependency?\r\n\r\nI think it deserves to appear \"in its own right\".\r\n\r\n> Please reopen this ticket if you wish me to do so.\r\n\r\nWill do."}],"tags":[{"tag":"packaging/releasing","description":"Issue/PR about packaging or realising."}],"pull_requests":[]},{"author":"affeldt-aist","number":860,"state":"open","open_date":"2023-02-28T15:05:33Z","update_date":"2023-04-10T05:12:45Z","discussion":[{"author":"t6s","date":"2023-02-28T15:07:22Z","comment":"We could also try to incorporate a quaternary definition of the convex combination operator as in (Stone, 1949).\r\n\r\nThe factory for this structure would look like this:\r\n```\r\nHB.factory Record isConvexSpace (T : Type) := {\r\n  convexspacechoiceclass : Choice.class_of T ;\r\n  conv : Rpos -> Rpos -> T -> T -> T ;\r\n  conv0 : forall p a b, conv p 0%:pr a b = a ;\r\n  convmm : forall p a, conv p p a a = a ;\r\n  convA : forall (p q r : prob) (a b c : T),\r\n     conv (p+q) r (conv p q a b) c = conv (q+r) p (conv r q c b) a ;\r\n\r\n  unscale lambda p q a b : conv (lambda*p) (lambda*q) a b = conv p q a b ;\r\n}\r\n```\r\n\r\nThe basic mixin of convex spaces would then have both ternary and quaternary operators and an equality axiom between the two.\r\n\r\n(Should we further include the n-ary operator in the mixin?)"},{"author":"affeldt-aist","date":"2023-04-10T05:12:44Z","comment":"Partly addressed by #875 "}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"},{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":859,"state":"closed","open_date":"2023-02-27T13:07:03Z","update_date":"2023-02-28T08:23:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":858,"state":"closed","open_date":"2023-02-25T10:40:57Z","update_date":"2023-03-10T08:22:25Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"zstone1","number":857,"state":"open","open_date":"2023-02-24T16:59:10Z","update_date":"2023-03-27T16:01:42Z","discussion":[],"tags":[{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"affeldt-aist","number":856,"state":"open","open_date":"2023-02-24T08:05:38Z","update_date":"2023-02-24T08:36:28Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":855,"state":"closed","open_date":"2023-02-24T08:03:24Z","update_date":"2023-02-24T08:37:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":854,"state":"closed","open_date":"2023-02-23T12:50:43Z","update_date":"2023-02-23T13:25:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":853,"state":"closed","open_date":"2023-02-23T07:15:03Z","update_date":"2023-02-23T13:24:59Z","discussion":[],"tags":[{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"}],"pull_requests":[]},{"author":"affeldt-aist","number":852,"state":"closed","open_date":"2023-02-22T14:53:06Z","update_date":"2023-02-23T13:46:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":851,"state":"closed","open_date":"2023-02-22T08:38:15Z","update_date":"2023-02-23T13:46:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":850,"state":"closed","open_date":"2023-02-17T05:34:19Z","update_date":"2023-02-22T19:15:01Z","discussion":[{"author":"zstone1","date":"2023-02-22T19:14:52Z","comment":"> \r\n\r\nSounds good, that hypo doesn't need a name. "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":849,"state":"closed","open_date":"2023-02-17T04:59:30Z","update_date":"2023-02-17T05:08:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":848,"state":"closed","open_date":"2023-02-17T04:34:02Z","update_date":"2023-02-18T10:32:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":847,"state":"closed","open_date":"2023-02-17T02:26:17Z","update_date":"2023-02-17T04:35:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":846,"state":"closed","open_date":"2023-02-15T14:16:00Z","update_date":"2023-02-18T10:32:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":845,"state":"closed","open_date":"2023-02-15T09:19:08Z","update_date":"2023-02-18T10:32:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":844,"state":"closed","open_date":"2023-02-11T10:24:06Z","update_date":"2023-02-13T09:58:12Z","discussion":[{"author":"proux01","date":"2023-02-11T11:09:48Z","comment":"@affeldt-aist this should update the CI (`.nix/config.nix` and `.github/workflows/docker-action.yml`, but I'm afraid that won't work until we get HB for 8.17).\r\n\r\nMaybe we could do this in two steps:\r\n* first support MC 1.16 on Coq <= 8.16\r\n* then support Coq 8.17"},{"author":"affeldt-aist","date":"2023-02-11T13:06:05Z","comment":"You are right. Let us make another release for Coq 8.17."},{"author":"affeldt-aist","date":"2023-02-11T13:08:54Z","comment":"We should maybe keep somewhere the information on how to bump the version:\r\n1. update opam files for `classical` and `analysis`\r\n2. update `.nix/config.nix`\r\n3. update `.github/workflows/docker-action.yml`"},{"author":"proux01","date":"2023-02-11T13:10:52Z","comment":"Maybe (I often forget point 1. ;-) )"},{"author":"affeldt-aist","date":"2023-02-12T09:36:11Z","comment":"I added a small wiki page https://github.com/math-comp/analysis/wiki/How-to-bump"},{"author":"proux01","date":"2023-02-13T09:57:43Z","comment":"CI green, let's merge"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":843,"state":"closed","open_date":"2023-02-11T10:02:08Z","update_date":"2023-02-24T07:14:53Z","discussion":[{"author":"affeldt-aist","date":"2023-02-23T06:46:12Z","comment":"I'll maybe merge this one by the end of the day to release 0.6.1."}],"tags":[],"pull_requests":[]},{"author":"clayrat","number":842,"state":"closed","open_date":"2023-02-10T18:57:47Z","update_date":"2023-02-14T00:20:26Z","discussion":[{"author":"proux01","date":"2023-02-13T12:08:19Z","comment":"@clayrat OPAM packages updated: https://github.com/coq/opam-coq-archive/pull/2467"},{"author":"affeldt-aist","date":"2023-02-14T00:20:25Z","comment":"Thanks @proux01 !"}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":841,"state":"closed","open_date":"2023-02-07T23:21:01Z","update_date":"2023-03-27T16:03:00Z","discussion":[],"tags":[{"tag":"\"bug\" :bug:","description":"This issue (resp. PR) describes (resp. fixes) a \"bug\""},{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"zstone1","number":840,"state":"closed","open_date":"2023-02-07T22:51:29Z","update_date":"2023-02-13T04:29:27Z","discussion":[{"author":"affeldt-aist","date":"2023-02-11T10:29:48Z","comment":"The only CI error is elpi compilation with coq-dev so maybe it is not relevant and this PR can be merged."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":839,"state":"closed","open_date":"2023-02-07T09:28:29Z","update_date":"2023-03-27T16:03:04Z","discussion":[],"tags":[{"tag":"\"bug\" :bug:","description":"This issue (resp. PR) describes (resp. fixes) a \"bug\""}],"pull_requests":[]},{"author":"affeldt-aist","number":838,"state":"closed","open_date":"2023-02-07T03:40:01Z","update_date":"2023-02-24T07:14:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":837,"state":"closed","open_date":"2023-02-07T00:00:00Z","update_date":"2023-02-07T00:01:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":836,"state":"closed","open_date":"2023-02-06T01:21:28Z","update_date":"2023-02-24T07:44:56Z","discussion":[{"author":"affeldt-aist","date":"2023-02-06T11:43:58Z","comment":"> it is also required to rebase PR #749\r\n\r\nit looks like rebasing will require a bit more thinking\r\n\r\n"},{"author":"hoheinzollern","date":"2023-02-09T10:33:37Z","comment":"This PR is interesting for PR #790, since we need finite measures to prove $L_2 \\subset L_1$, which only holds in the case the measure is finite, like with probabilities. See for example [here](https://ocw.mit.edu/courses/18-125-measure-and-integration-fall-2003/6f21af6c40de1eccd70349bd3a3b0095_18125_lec17.pdf)."},{"author":"affeldt-aist","date":"2023-02-21T00:20:47Z","comment":"Is it ok to keep both definitions `finite_measure` and `fin_num_fun` or should I try to get rid of the former for the latter?"},{"author":"affeldt-aist","date":"2023-02-22T08:01:30Z","comment":"> Is it ok to keep both definitions `finite_measure` and `fin_num_fun` or should I try to get rid of the former for the latter?\r\n\r\nIt seems clearer to get rid of `finite_measure` and keep `fin_num_fun` only, see the las commit https://github.com/math-comp/analysis/pull/836/commits/af15a0c7c0e1f1db037afee1496a318b1fc398b7\r\n\r\nNB: pr #749 , pr #777 , pr #849 rebase fine so that maybe an ok change"},{"author":"affeldt-aist","date":"2023-02-23T06:42:32Z","comment":"I have applied a few more comments that I received offline except one requesting a set parameter to `fin_num_fun`. Is it ok if I issue about it and take care of it later?"},{"author":"zstone1","date":"2023-02-23T16:57:23Z","comment":"If you're asking me, I think that's fine. It doesn't sound like a big burden to do later, and I'd rather get you unblocked now. "},{"author":"CohenCyril","date":"2023-02-23T17:16:45Z","comment":"> If you're asking me, I think that's fine. It doesn't sound like a big burden to do later, and I'd rather get you unblocked now.\r\n\r\nI agree"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":835,"state":"closed","open_date":"2023-02-03T19:59:24Z","update_date":"2023-02-24T07:14:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":834,"state":"open","open_date":"2023-02-03T04:15:08Z","update_date":"2023-03-27T16:03:10Z","discussion":[],"tags":[{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"affeldt-aist","number":833,"state":"open","open_date":"2023-02-02T08:26:51Z","update_date":"2023-03-27T16:03:56Z","discussion":[],"tags":[{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"},{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"affeldt-aist","number":832,"state":"closed","open_date":"2023-01-31T14:00:54Z","update_date":"2023-02-07T02:41:09Z","discussion":[{"author":"affeldt-aist","date":"2023-01-31T14:15:38Z","comment":"Quote from issue #658:\r\n> The name suggests that it is pinpointing a (finite) subcover of some cover, but there is no such original cover in the definition.\r\n\r\nIndeed.\r\nAt first I thought of renaming to `finite_subset_cover` so that it sounds more like we take the subset of some set but this might look like it points to the definition of `cover` in `classical_sets.v` that we do not use here.\r\nHence this minima change.\r\n\r\n\r\n"},{"author":"affeldt-aist","date":"2023-01-31T14:38:24Z","comment":"Or maybe we can try to use `cover`: https://github.com/math-comp/analysis/pull/832/commits/62440d95726d44b43016b334fdb84ce7520b7e88\r\n\r\nAnd then the `finite_subset_cover` makes more sense."},{"author":"affeldt-aist","date":"2023-02-01T14:36:36Z","comment":"@zstone1 do you think that this is a reasonable change?"},{"author":"affeldt-aist","date":"2023-02-05T23:59:02Z","comment":"@t6s do you think this PR fixes your issue?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":831,"state":"closed","open_date":"2023-01-27T14:00:17Z","update_date":"2023-01-27T14:00:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":830,"state":"closed","open_date":"2023-01-26T18:23:37Z","update_date":"2023-01-27T15:22:44Z","discussion":[{"author":"CohenCyril","date":"2023-01-27T12:48:30Z","comment":"I do not see  `countable_bijP` in the diff... is that an oversight?\r\n"},{"author":"affeldt-aist","date":"2023-01-27T13:53:38Z","comment":"> I do not see `countable_bijP` in the diff... is that an oversight?\r\n\r\nYes, sorry about that. It is fixed now."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":829,"state":"closed","open_date":"2023-01-26T10:02:39Z","update_date":"2023-01-27T01:01:07Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":828,"state":"closed","open_date":"2023-01-25T07:39:15Z","update_date":"2023-02-24T07:14:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":827,"state":"closed","open_date":"2023-01-24T09:30:05Z","update_date":"2023-01-25T13:34:17Z","discussion":[{"author":"zstone1","date":"2023-01-24T13:26:57Z","comment":"My bad. Thanks for catching this. "}],"tags":[{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"}],"pull_requests":[]},{"author":"affeldt-aist","number":826,"state":"closed","open_date":"2023-01-21T16:30:03Z","update_date":"2023-01-21T19:30:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":825,"state":"closed","open_date":"2023-01-21T14:38:03Z","update_date":"2023-01-21T19:30:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":824,"state":"closed","open_date":"2023-01-20T20:05:09Z","update_date":"2023-01-21T16:52:55Z","discussion":[{"author":"affeldt-aist","date":"2023-01-21T14:46:20Z","comment":"ok to merge?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":823,"state":"closed","open_date":"2023-01-16T21:43:28Z","update_date":"2023-01-20T15:12:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":822,"state":"closed","open_date":"2023-01-12T14:53:59Z","update_date":"2023-01-12T14:54:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":821,"state":"closed","open_date":"2023-01-09T04:11:16Z","update_date":"2023-01-11T04:29:26Z","discussion":[{"author":"affeldt-aist","date":"2023-01-11T03:08:28Z","comment":"@proux01 Thanks for your review!"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":820,"state":"closed","open_date":"2023-01-09T03:29:08Z","update_date":"2023-01-11T04:28:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":819,"state":"closed","open_date":"2023-01-07T15:29:51Z","update_date":"2023-01-21T19:30:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":818,"state":"open","open_date":"2023-01-03T14:10:05Z","update_date":"2023-04-10T09:51:35Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"},{"tag":"TODO: HB port","description":"This PR should be ported to the HB branch as well. Remove this label when an issue or PR is created."}],"pull_requests":[]},{"author":"Tragicus","number":817,"state":"closed","open_date":"2023-01-01T17:06:40Z","update_date":"2023-01-04T12:44:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":816,"state":"closed","open_date":"2022-12-28T15:48:42Z","update_date":"2022-12-29T13:28:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":815,"state":"closed","open_date":"2022-12-28T15:20:48Z","update_date":"2023-02-05T23:51:18Z","discussion":[{"author":"affeldt-aist","date":"2023-01-18T19:09:54Z","comment":"Is it ok if we have `adde_def_oppeD` and `oppeD` with `fin_num` as hypothesis? Same for `oppeB`.\r\nIf it is ok, we can add the versions for `doppeD` and `doppeB` and we are done.\r\nThere is certainly something more systematic and significant to be done about `adde_def`\r\nbut that can maybe be the purpose of another PR."},{"author":"affeldt-aist","date":"2023-02-02T10:14:32Z","comment":"> Is it ok if we have `adde_def_oppeD` and `oppeD` with `fin_num` as hypothesis? Same for `oppeB`. If it is ok, we can add the versions for `doppeD` and `doppeB` and we are done. There is certainly something more systematic and significant to be done about `adde_def` but that can maybe be the purpose of another PR.\r\n\r\n\"Something more systematic\" might go through the introduction of a more generic notation allowing to write\r\n`?( x + y)`. @CohenCyril \r\n\r\nI gave it a try with the following reserved notation:\r\n```coq\r\nReserved Notation \"'?(' x '+' y ')'\" (at level 0, x, y at level 1,\r\n  format \"'?(' x  +  y ')'\").\r\n```\r\nOne needs then at add parenteses here and there (e.g., `?( (- x) + y)`)\r\nand it conflicts with SSReflect tactics such as `rewrite ?(f x)`.\r\n\r\nThere is certainly a better way to declare this notation.\r\n\r\nShall we issue about that and care later?\r\n"},{"author":"CohenCyril","date":"2023-02-03T09:26:24Z","comment":"The question of the notation `?(x + y)` is orthogonal, this PR should proceed independently.\r\n(It's ok to introduce and preserve an alias `x +? y := ?(x+ y)` later on.\r\n\r\nHowever, for this PR, I advocate that the primary lemmas should be the ones with hypothesis `x +? y` rather than finitude, and hence have `oppeD x  y : x +? y -> - (x + y) = - x - y`.\r\n\r\nFor the summations, it's the same, the first and primary lemma should be `sumeN` and use `{in P &, forall i j, x i +? x j}` instead as usual for summation on general indices."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":814,"state":"closed","open_date":"2022-12-22T14:06:45Z","update_date":"2023-01-16T20:49:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":813,"state":"closed","open_date":"2022-12-21T14:48:37Z","update_date":"2022-12-28T01:56:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"yoshihiro503","number":812,"state":"closed","open_date":"2022-12-16T05:32:26Z","update_date":"2023-01-06T04:09:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":811,"state":"closed","open_date":"2022-12-14T07:22:33Z","update_date":"2022-12-14T13:25:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"hoheinzollern","number":810,"state":"closed","open_date":"2022-12-09T14:59:43Z","update_date":"2023-01-12T13:53:47Z","discussion":[{"author":"affeldt-aist","date":"2023-01-12T13:53:46Z","comment":"I have merged in PR #516 using cherry-pick so I close."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":809,"state":"closed","open_date":"2022-12-08T13:08:07Z","update_date":"2022-12-09T15:35:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":808,"state":"closed","open_date":"2022-12-08T09:40:21Z","update_date":"2022-12-09T15:35:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":807,"state":"closed","open_date":"2022-12-08T09:35:28Z","update_date":"2023-01-21T16:26:35Z","discussion":[{"author":"affeldt-aist","date":"2023-01-21T16:26:34Z","comment":"This has been addressed."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":806,"state":"closed","open_date":"2022-12-08T09:32:27Z","update_date":"2023-01-13T12:57:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":805,"state":"closed","open_date":"2022-11-25T18:11:27Z","update_date":"2023-01-24T04:51:23Z","discussion":[{"author":"zstone1","date":"2023-01-05T04:32:36Z","comment":"Need to make things more friendly for working with subsets. "},{"author":"CohenCyril","date":"2023-01-22T17:27:09Z","comment":"@zstone1 I think this can be merged as such and completed later on."}],"tags":[],"pull_requests":[]},{"author":"SkySkimmer","number":804,"state":"closed","open_date":"2022-11-24T16:38:28Z","update_date":"2023-01-18T14:26:38Z","discussion":[{"author":"SkySkimmer","date":"2022-11-24T16:39:13Z","comment":"(if you think making this warning error by default this is the right time to say so, the right place is the coq side PR)"},{"author":"CohenCyril","date":"2022-11-25T12:58:23Z","comment":"I'm not so happy about them..."},{"author":"affeldt-aist","date":"2022-11-25T13:18:50Z","comment":"Do you mean that you are unhappy with the fact that they are ineffective?"},{"author":"CohenCyril","date":"2022-11-25T13:24:04Z","comment":"No I'm unhappy about the verbosity"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":803,"state":"closed","open_date":"2022-11-22T18:17:57Z","update_date":"2023-01-21T16:59:07Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"hoheinzollern","number":802,"state":"closed","open_date":"2022-11-19T10:22:01Z","update_date":"2022-11-22T08:25:25Z","discussion":[{"author":"affeldt-aist","date":"2022-11-22T01:58:02Z","comment":"This looks like a duplicate of PR #781 (I might be responsible for the confusion)."},{"author":"hoheinzollern","date":"2022-11-22T08:25:24Z","comment":"Yes indeed."}],"tags":[],"pull_requests":[]},{"author":"hoheinzollern","number":801,"state":"closed","open_date":"2022-11-17T13:34:41Z","update_date":"2022-11-24T05:58:45Z","discussion":[{"author":"affeldt-aist","date":"2022-11-21T07:03:52Z","comment":"`emeasurable_fun_bool` can be generalized from `\\bar R` to any measurable type."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":800,"state":"closed","open_date":"2022-11-16T04:35:40Z","update_date":"2022-11-17T03:14:39Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":799,"state":"closed","open_date":"2022-11-13T22:39:58Z","update_date":"2022-11-24T16:45:11Z","discussion":[{"author":"zstone1","date":"2022-11-23T22:13:33Z","comment":"Updated to use the more general `proj` and `dfwith`. The only lingering detail is the annoyance of explicitly declaring the type in `continuous (proj i : PK -> K i)`. This should resolve itself once the HB stuff is done, though. And there's already comment to this effect in the code. I am happy with the rest of it. "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":798,"state":"closed","open_date":"2022-11-13T08:35:00Z","update_date":"2022-11-23T17:55:15Z","discussion":[{"author":"affeldt-aist","date":"2022-11-17T10:18:39Z","comment":"Requested changes have been performed (hopefully)."}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":797,"state":"closed","open_date":"2022-11-12T04:42:33Z","update_date":"2023-02-07T22:52:54Z","discussion":[{"author":"affeldt-aist","date":"2022-11-22T08:23:21Z","comment":"Would it be better to have a definition of `second_countable` made of \"smaller\" definitions such as:\r\n```coq\r\nDefinition local_base (T : topologicalType) (x : T) (B : set (set T)) :=\r\n  B `<=` nbhs x /\\ (forall V, nbhs x V -> exists2 A, B A & A `<=` V).\r\n\r\nDefinition topological_base (T : topologicalType) (B : set (set T)) :=\r\n  B `<=` open /\\ forall x, exists2 C, C `<=` B & local_base x C.\r\n\r\nDefinition second_countable' (T : topologicalType) := exists2 B : set (set T),\r\n  countable B & topological_base B.\r\n\r\nLemma second_countableP (T : topologicalType) :\r\n  second_countable T <-> second_countable' T.\r\nProof.\r\nsplit=> [[B [cB Bopen h]]|].\r\n  exists B => //; split => // x.\r\n  have {}h := h x.\r\n  have @h' : forall V : {V : set T & nbhs x V}, {A : set T | [/\\ B A, nbhs x A & A `<=` projT1 V]}.\r\n    move=> [V Vx]; apply: cid.\r\n    by move: (h V Vx) => [W [BW xW WV]]; exists W.\r\n  exists [set V | exists W (xW : nbhs x W), sval (h' (existT _ _ xW)) = V].\r\n    by move=> _ /= [W [xW /=]] <-; case: cid => // ? [].\r\n  split.\r\n    by move=> _ /= [W [xW] <-]; case: cid => ? [].\r\n  move=> V xV; exists (projT1 (h' (existT _ _ xV))).\r\n    by exists V, xV.\r\n  by move=> y/=; rewrite /sval/=; case: cid => W [BW xW WV Wy]; exact: WV.\r\nmove=> [B cB [Bopen h]]; exists B; split => // x V xV.\r\nhave [C CB [Cx h']] := h x.\r\nhave [A CA AV] := h' _ xV.\r\nby exists A; split => //; [exact: CB|exact: Cx].\r\nQed.\r\n```\r\n"},{"author":"zstone1","date":"2023-01-05T04:33:10Z","comment":"Need to make things more friendly for working with subsets."},{"author":"zstone1","date":"2023-02-07T22:52:50Z","comment":"I will treat all the 2nd countability stuff mentioned here in a separate diff.\r\n\r\nIn the meanwhile, stuff on clopen and connectedness is simpler, and now presented without the 2nd countability stuff in #840 "}],"tags":[],"pull_requests":[]},{"author":"shinya-katsumata","number":796,"state":"open","open_date":"2022-11-10T17:43:14Z","update_date":"2023-03-15T14:49:23Z","discussion":[{"author":"CohenCyril","date":"2022-11-15T14:33:09Z","comment":"Dear Shin-ya Katsumata, you are completely right this definition alters the categorical properties of measurable spaces as types. This choice was made to have (partial) inverses for functions `M -> T` where `M` is a measurable type, indeed if `M` was not guaranteed to be non empty this would forbid having a generic inverse function.\r\nOn the other side, I believe types are not necessary the right pick for the carrier of objects in a category even in type theory, and that the empty measurable space could be represented by having an explicit \"total set / domain predicate\" field (in a distant future) so that by picking the empty set as the domain would add (infinitely many, albeit isomorphic, copies) of the empty measurable space..."},{"author":"affeldt-aist","date":"2022-11-17T10:50:31Z","comment":"NB: If one change pointed to choice in `measure.v`, all `measure.v` but one lemma and all `measure_lebesgue.v` go through.\r\n`lebesgue_integral.v` fails at https://github.com/math-comp/analysis/blob/f42137704caa1d97eff6a1670e7a664a548c98c2/theories/lebesgue_integral.v#L262 where pointed it needed to have the structure of ring (1 != 0).\r\n"},{"author":"CohenCyril","date":"2022-11-22T15:40:06Z","comment":"Ha! This is really funny, because :`1 != 0` also happens to be a anti-categorical oddity"},{"author":"affeldt-aist","date":"2022-11-25T04:35:07Z","comment":"Why does the `1 != 0` property belong to  the mixin of rings?"},{"author":"affeldt-aist","date":"2022-12-02T08:35:12Z","comment":"Observation by @t6s : it should be easy to insert an intermediate mixin for non-necessarily not-trivial rings once MathComp 2.0 is available."},{"author":"CohenCyril","date":"2022-12-02T08:44:08Z","comment":"Sorry I forgot to answer. Guillaume Cano added the intermediate structure in mathcomp 1, ten years ago, but it was never merged because of the huge impact it had on the library. Adding this structure is actually one of the reasons of existence of HB and mathcomp 2."}],"tags":[{"tag":"wish :pray:","description":"Request for a specific mathematical result"}],"pull_requests":[]},{"author":"affeldt-aist","number":795,"state":"open","open_date":"2022-11-10T09:37:10Z","update_date":"2023-03-15T14:48:55Z","discussion":[{"author":"t6s","date":"2022-11-10T11:08:40Z","comment":"Is it difficult to modify the notation on the LHS to `[_, +oo[ to be consistent?"},{"author":"CohenCyril","date":"2022-11-10T12:53:16Z","comment":"I suggest you overload notations in ereal scope and print `` `[x, +oo[%O`` for ereals differently."},{"author":"CohenCyril","date":"2022-11-22T13:43:43Z","comment":"Or one could implement a `latticeWithNoTop` in the same way as\r\nhttps://github.com/coq/coq/blob/master/theories/ssr/ssreflect.v#L30-L34"}],"tags":[{"tag":"\"bug\" :bug:","description":"This issue (resp. PR) describes (resp. fixes) a \"bug\""},{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":761,"state":"closed","open_date":"2022-10-06T23:30:51Z","update_date":"2022-10-07T10:44:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":760,"state":"closed","open_date":"2022-10-04T14:33:17Z","update_date":"2022-10-17T07:20:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":757,"state":"closed","open_date":"2022-10-02T23:48:44Z","update_date":"2022-10-04T14:03:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":756,"state":"closed","open_date":"2022-10-02T21:51:58Z","update_date":"2022-10-04T08:25:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":755,"state":"closed","open_date":"2022-10-01T23:48:16Z","update_date":"2022-10-02T23:24:23Z","discussion":[{"author":"zstone1","date":"2022-10-02T22:24:45Z","comment":"Neat, thanks. These are much cleaner. Just updated the changelog, and squash-merging now. "}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":754,"state":"closed","open_date":"2022-09-30T15:46:28Z","update_date":"2022-10-07T00:35:55Z","discussion":[{"author":"affeldt-aist","date":"2022-10-06T09:24:56Z","comment":"I removed an entry in the changelog that was not corresponding to a lemma in the code (set_composeA).\r\n"},{"author":"affeldt-aist","date":"2022-10-06T09:25:59Z","comment":"Should the notation for relation be `\\o` with a different scope? (Rather than, say, `\\@` or `\\O` in the scope of classical sets?)"},{"author":"affeldt-aist","date":"2022-10-06T11:52:59Z","comment":"> Should the notation for relation be `\\o` with a different scope? (Rather than, say, `\\@` or `\\O` in the scope of classical sets?)\r\n\r\nThe right notation would rather by `\\;` for relations.\r\n\r\n(ref to issue #759 )"},{"author":"zstone1","date":"2022-10-06T13:27:31Z","comment":"A good question about the notation. I think I'm happiest with `\\;` because the `@` sign is used pretty heavily already. "},{"author":"CohenCyril","date":"2022-10-06T14:05:48Z","comment":"Btw `\\;` is also particularly appropriate because it's the dedicated notation for function composition in diagramatic order in ssr (scope fun_scope)."},{"author":"zstone1","date":"2022-10-06T15:53:48Z","comment":"Thanks for the update. This is looking much better than before. Anything else we should do before merge? "}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":753,"state":"closed","open_date":"2022-09-26T19:49:17Z","update_date":"2022-10-02T22:05:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":752,"state":"closed","open_date":"2022-09-23T20:27:31Z","update_date":"2022-10-06T23:56:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":751,"state":"closed","open_date":"2022-09-23T08:55:53Z","update_date":"2022-09-28T15:16:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":749,"state":"open","open_date":"2022-09-21T13:32:30Z","update_date":"2023-03-19T00:38:44Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"zstone1","number":748,"state":"closed","open_date":"2022-09-19T18:30:25Z","update_date":"2022-09-23T03:45:12Z","discussion":[{"author":"affeldt-aist","date":"2022-09-23T01:56:31Z","comment":"Maybe squash before merge."}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":747,"state":"closed","open_date":"2022-09-17T02:19:15Z","update_date":"2022-09-25T01:37:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":744,"state":"closed","open_date":"2022-09-12T07:10:07Z","update_date":"2022-09-26T12:48:11Z","discussion":[{"author":"affeldt-aist","date":"2022-09-23T12:35:56Z","comment":"I have a new commit:\r\nhttps://github.com/affeldt-aist/analysis/commit/faa597fd761589cbef43aa4311b87df7bfb1d55d\r\nbut I can't rebase it on top of this PR without having to edit nix related files.\r\nCould you try to cherry-pick it on your side?\r\n"},{"author":"proux01","date":"2022-09-23T12:41:21Z","comment":"done"},{"author":"proux01","date":"2022-09-23T13:28:53Z","comment":"@CohenCyril sorry, I may need your help here with the Nix CI: the `nix/config.nix` file asks for real-closed master in bundle master but the CI still builds 1.1.3:\r\n```\r\nbuilding '/nix/store/dk1wnxyhscz06hj3avjkdqd3x4y9k4pp-coqdev-mathcompdev-real-closed-1.1.3.drv'...\r\n```\r\n(c.f. failing job)\r\nWould you have any idea of what I made wrong?"},{"author":"proux01","date":"2022-09-23T13:31:28Z","comment":"BTW: why is analysis dependening on real-closed in Nix but not in OPAM?"},{"author":"proux01","date":"2022-09-26T12:48:03Z","comment":"Let's merge as is and fix CI in another PR."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":743,"state":"closed","open_date":"2022-09-06T07:23:16Z","update_date":"2022-10-16T06:42:06Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":742,"state":"closed","open_date":"2022-09-05T13:47:41Z","update_date":"2022-09-07T02:21:32Z","discussion":[{"author":"affeldt-aist","date":"2022-09-06T13:43:44Z","comment":"@proux01 do you understand the errors in the CI about Coq 8.14?"},{"author":"proux01","date":"2022-09-06T15:24:32Z","comment":"@affeldt-aist thats because of the bound\r\n```\r\n  \"coq-hierarchy-builder\" { (>= \"1.3.0\") }\r\n```\r\nHB 1.3.0 requires coq-elpi >= 1.14 and coq-elpi.1.14.0 requires Coq >= 8.15.\r\nSo if we want to support Coq 8.14, we need to keep HB 1.2.0."},{"author":"affeldt-aist","date":"2022-09-06T23:36:54Z","comment":"> So if we want to support Coq 8.14, we need to keep HB 1.2.0.\r\n\r\nThank you!\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":741,"state":"closed","open_date":"2022-09-05T00:12:15Z","update_date":"2022-09-06T00:40:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":739,"state":"closed","open_date":"2022-09-03T04:04:42Z","update_date":"2022-09-15T02:57:57Z","discussion":[{"author":"zstone1","date":"2022-09-15T02:42:02Z","comment":"Yup, makes sense. I've updated the names, and I'll merge shortly. "},{"author":"affeldt-aist","date":"2022-09-15T02:50:23Z","comment":"> I'll merge shortly.\r\n\r\n\"Squash and merge\" may be appropriate since there are many commits. \r\n\r\n"},{"author":"zstone1","date":"2022-09-15T02:51:43Z","comment":"Yes, I'll be sure to do that. "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":738,"state":"closed","open_date":"2022-09-02T02:57:48Z","update_date":"2022-09-04T23:29:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":737,"state":"open","open_date":"2022-09-01T18:33:51Z","update_date":"2022-10-28T14:25:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":736,"state":"closed","open_date":"2022-08-30T09:43:38Z","update_date":"2023-01-21T16:59:19Z","discussion":[{"author":"affeldt-aist","date":"2022-08-31T07:10:18Z","comment":"> Looks good to me. Mostly just surprised this didn't already exist. There must be some proofs we can refactor with this. Although that's surely a problem for another day.\r\n\r\nI might have spot a few easy ones, give me some time.\r\n"},{"author":"affeldt-aist","date":"2022-08-31T08:44:04Z","comment":"> > Looks good to me. Mostly just surprised this didn't already exist. There must be some proofs we can refactor with this. Although that's surely a problem for another day.\r\n\r\nIndeed, the new lemma could be applied at a few places in `derive.v` but this called for some sectioning of the big `Derive` section. I maybe did more than what was strictly needed but imo that improves reading a bit."}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":735,"state":"closed","open_date":"2022-08-27T05:05:07Z","update_date":"2022-09-01T09:59:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":734,"state":"closed","open_date":"2022-08-26T02:43:46Z","update_date":"2022-09-01T09:59:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":733,"state":"closed","open_date":"2022-08-24T13:25:56Z","update_date":"2022-09-01T09:59:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":732,"state":"closed","open_date":"2022-08-22T14:16:42Z","update_date":"2022-09-01T09:58:14Z","discussion":[{"author":"affeldt-aist","date":"2022-08-26T05:30:25Z","comment":"Perfect! I was reluctant to PR because I didn't know how to generalize. :-)"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":731,"state":"closed","open_date":"2022-08-19T12:44:54Z","update_date":"2022-08-22T14:29:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":730,"state":"closed","open_date":"2022-08-19T07:12:27Z","update_date":"2022-09-01T09:59:46Z","discussion":[{"author":"affeldt-aist","date":"2022-08-19T12:34:38Z","comment":"Thank you for the review."},{"author":"proux01","date":"2022-08-19T12:37:26Z","comment":"You're welcome.\r\nBTW, looks like the `Co-authored-by` information was not matched to a Github account, don't know if this is intentional."},{"author":"affeldt-aist","date":"2022-08-19T12:44:02Z","comment":"That was not intentional. It should be fixed now."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":729,"state":"closed","open_date":"2022-08-15T05:50:23Z","update_date":"2022-08-23T09:28:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":726,"state":"closed","open_date":"2022-08-12T02:42:01Z","update_date":"2022-08-23T00:37:45Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":724,"state":"closed","open_date":"2022-08-09T23:55:39Z","update_date":"2022-08-21T13:09:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":723,"state":"closed","open_date":"2022-08-04T10:05:55Z","update_date":"2022-08-04T13:25:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":721,"state":"closed","open_date":"2022-08-03T05:02:16Z","update_date":"2022-08-05T14:42:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":720,"state":"closed","open_date":"2022-08-03T03:26:11Z","update_date":"2022-08-03T04:13:39Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"IshiguroYoshihiro","number":719,"state":"closed","open_date":"2022-08-02T11:25:53Z","update_date":"2022-08-04T18:13:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":718,"state":"closed","open_date":"2022-08-01T22:25:29Z","update_date":"2022-08-20T03:07:47Z","discussion":[{"author":"affeldt-aist","date":"2022-08-02T05:45:53Z","comment":"I would be tempted to write:\r\n```\r\nDefinition contraction (q : {nonneg R}) (f : {fun U >-> V}) :=\r\n  ((q%:num < 1) * q%:num.-lipschitz_U f)%type.\r\n```\r\nso that at least one can rewrite with an hypothesis h : contraction q f\r\nto prove q%:num < 1 (i.e., without needing to do a case analysis on h),\r\nbut I am not sure.\r\n"},{"author":"zstone1","date":"2022-08-03T01:34:21Z","comment":"Interesting. I have not seen this trick before. Although, I can't find an example of it elsewhere in mathcomp analysis. For what it's worth, in the proof I have I need to case on the hypothesis to grab the lipschitz clause anyway.  "},{"author":"affeldt-aist","date":"2022-08-12T02:07:06Z","comment":"> For what it's worth, in the proof I have I need to case on the hypothesis to grab the lipschitz clause anyway.\r\n\r\nYes, of course. I believe that there is a better definition but I do not see how to improve it in the current state of affairs. Sorry for delaying merging with unfruitful thinking."}],"tags":[],"pull_requests":[]},{"author":"IshiguroYoshihiro","number":717,"state":"closed","open_date":"2022-07-29T08:13:44Z","update_date":"2022-08-02T11:27:30Z","discussion":[{"author":"proux01","date":"2022-08-02T08:56:53Z","comment":"@IshiguroYoshihiro thanks for the pull request but I only see a line added to the changelog file, not the lemma itself?"},{"author":"IshiguroYoshihiro","date":"2022-08-02T11:13:08Z","comment":"> @IshiguroYoshihiro thanks for the pull request but I only see a line added to the changelog file, not the lemma itself?\r\n\r\nThere was a mistake on a commiting. Sorry."},{"author":"proux01","date":"2022-08-02T11:27:30Z","comment":"No worries. You could have updated this pull request rather than opening #719 , but this is fine too."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":716,"state":"closed","open_date":"2022-07-29T03:07:48Z","update_date":"2022-08-02T05:28:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":715,"state":"closed","open_date":"2022-07-29T00:51:54Z","update_date":"2022-08-23T16:03:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":713,"state":"closed","open_date":"2022-07-28T09:57:19Z","update_date":"2022-08-02T08:39:06Z","discussion":[{"author":"affeldt-aist","date":"2022-08-02T08:34:19Z","comment":"I chose no-deamon for the default choice because @proux01 mentioned during the last meeting that he couldn't get the aternative to work and I myself used no-deamon successfully. Any way, there is now a link to the nix documentation."},{"author":"proux01","date":"2022-08-02T08:38:59Z","comment":"Let's merge"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":712,"state":"closed","open_date":"2022-07-28T05:56:23Z","update_date":"2022-08-02T08:52:07Z","discussion":[{"author":"proux01","date":"2022-08-01T13:44:35Z","comment":"@affeldt-aist I've opened a first backporting PR on MathComp: https://github.com/math-comp/math-comp/pull/910 (and adapted the current PR)"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":710,"state":"closed","open_date":"2022-07-26T09:56:51Z","update_date":"2022-08-30T07:56:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":709,"state":"closed","open_date":"2022-07-26T04:16:47Z","update_date":"2022-07-26T06:47:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":706,"state":"closed","open_date":"2022-07-22T14:11:17Z","update_date":"2022-07-28T10:10:53Z","discussion":[{"author":"CohenCyril","date":"2022-07-27T12:59:20Z","comment":"Rebase and merge"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":705,"state":"closed","open_date":"2022-07-22T13:18:55Z","update_date":"2022-08-30T06:57:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":704,"state":"closed","open_date":"2022-07-22T11:26:31Z","update_date":"2022-07-22T12:57:37Z","discussion":[{"author":"affeldt-aist","date":"2022-07-22T11:28:45Z","comment":"Is it ok that this PR also modifies `config.nix`?"},{"author":"CohenCyril","date":"2022-07-22T11:45:08Z","comment":"> Is it ok that this PR also modifies `config.nix`?\r\n\r\nIt's a fix to local setup for nix users, maybe I should separate the PR.... I dunno"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":702,"state":"closed","open_date":"2022-07-22T10:45:45Z","update_date":"2022-07-22T14:47:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":700,"state":"closed","open_date":"2022-07-22T09:45:02Z","update_date":"2022-07-22T11:00:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":698,"state":"open","open_date":"2022-07-13T13:52:49Z","update_date":"2023-04-10T05:10:39Z","discussion":[{"author":"proux01","date":"2022-07-13T15:19:07Z","comment":"I needed to add a Nix overlay to let Nix know about the mathcomp -> HB dependency, then\r\n```\r\nnix-shell --argstr bundle \"8.15\" --argstr job \"mathcomp-analysis\"  \r\n```\r\nshould work"},{"author":"CohenCyril","date":"2022-07-13T15:41:03Z","comment":"> I needed to add a Nix overlay to let Nix know about the mathcomp -> HB dependency, then\r\n> \r\n> ```\r\n> nix-shell --argstr bundle \"8.15\" --argstr job \"mathcomp-analysis\"  \r\n> ```\r\n> \r\n> \r\n\r\nOh did I forget to commit something?"},{"author":"proux01","date":"2022-07-19T14:54:11Z","comment":"@CohenCyril I'll need your help here, this is stuck on a `HB.instance` failing with message\r\n```\r\nHB: cannot inhabit mixin Order_POrder_IsLattice on set T\r\n```\r\nwhich I don't understand (c.f. last `FIXME` in classical_sets.v)"},{"author":"proux01","date":"2022-07-20T16:34:18Z","comment":"Fixed, there was a missing instance. I wonder whether this should be considered a bug of HB though?\r\n```Coq\r\n(* works *)\r\nCheck [the choiceType of set T].\r\n\r\n(* works (no evar) *)\r\nCheck Order.IsMeetJoinDistrLattice.Build set_display (set T)\r\n    le_def lt_def (@setIC _) (@setUC _) (@setIA _) (@setUA _)\r\n    joinKI meetKU (@setIUl _) setIid.\r\n\r\n(* fails: \"Error: HB: cannot inhabit mixin Order_POrder_IsLattice on set T\" *)\r\nFail #[export]\r\nHB.instance Definition _ :=\r\n  Order.IsMeetJoinDistrLattice.Build set_display (set T)\r\n    le_def lt_def (@setIC _) (@setUC _) (@setIA _) (@setUA _)\r\n    joinKI meetKU (@setIUl _) setIid.\r\n\r\n#[export]\r\nHB.instance Definition _ : Choice (set T) := Choice.copy _ (set T).\r\n\r\n(* now works *)\r\n#[export]\r\nHB.instance Definition _ :=\r\n  Order.IsMeetJoinDistrLattice.Build set_display (set T)\r\n    le_def lt_def (@setIC _) (@setUC _) (@setIA _) (@setUA _)\r\n    joinKI meetKU (@setIUl _) setIid.\r\n```\r\n\r\nMore generally: shouldn't an `HB.instance` that doesn't instantiate any structure be an error? (I often do the mistake and then fail to realize I forgot to instantiante a previous structure)."},{"author":"CohenCyril","date":"2022-07-22T14:21:49Z","comment":"> More generally: shouldn't an `HB.instance` that doesn't instantiate any structure be an error? (I often do the mistake and then fail to realize I forgot to instantiante a previous structure).\r\n\r\nNo, it should not, since adding new structures in the middle of the hierarchy might make some `HB.instance` redundant (hence no new instance is created) for which we do not want to raise error for backward compatibility reasons.\r\nWe could raise a warning though, to bring some attention, either to the user who ports a library to a new hierarchy, or for your usecase."},{"author":"affeldt-aist","date":"2022-07-26T04:03:16Z","comment":"Just for information.\r\nCompilation fails on my side at `FilteredEntourage_IsUniform` [1]\r\nwhile it looks like it should be going a bit further.\r\nIt is actually the second time that I observe such a discrepancy.\r\nI thought that using `nix-shell` would guarantee exactly the same environment.\r\nIs it wrong?\r\n\r\n--\r\n[1]\r\n```\r\nError:\r\nHB: cannot infer some information in \r\nParameterM : Type\r\nParameterlocal_mixin_choice_HasChoice : HasChoice.axioms_ elpi_ctx_entry_0_\r\nParameterlocal_mixin_eqtype_HasDecEq : Equality.mixin_of elpi_ctx_entry_0_\r\nParameterlocal_mixin_classical_sets_IsPointed : IsPointed.axioms_ elpi_ctx_entry_0_ elpi_ctx_entry_1_ elpi_ctx_entry_2_\r\nParameterlocal_mixin_topology_IsFiltered : IsFiltered.axioms_ elpi_ctx_entry_0_ elpi_ctx_entry_0_\r\nParameterlocal_mixin_topology_HasEntourage : HasEntourage.axioms_ elpi_ctx_entry_0_\r\naxioms_ : Type := Axioms_ {\r\n  uniform_ax1 : Filter entourage;\r\n  uniform_ax2 : forall A : ?elpi_evar * ?elpi_evar -> Prop,\r\nentourage A -> [set xy | xy.1 = xy.2] `<=` A;\r\n  uniform_ax3 : forall A : ?elpi_evar0 * ?elpi_evar0 -> Prop,\r\nentourage A -> entourage (A^-1)%classic;\r\n  uniform_ax4 : forall A : ?elpi_evar1 * ?elpi_evar1 -> Prop,\r\nentourage A ->\r\nexists2 B : ?elpi_evar1 * ?elpi_evar1 -> Prop, entourage B & B \\o B `<=` A;\r\n  uniform_ax5 : nbhs = nbhs_ entourage;\r\n}\r\n```"},{"author":"proux01","date":"2022-07-26T06:42:58Z","comment":"@affeldt-aist no, that's also what I'm experiencing with\r\n```\r\nnix-shell --arg withEmacs true --argstr bundle \"8.16\" --argstr job \"mathcomp-analysis\"\r\n```\r\nI indeed got further but realized I made something slightly wrong an went back \"fixing\" it. That's when I encoutered this issue and stopped there. Sorry, I should have put an explanatory comment."},{"author":"proux01","date":"2022-07-26T11:41:29Z","comment":"@CohenCyril @affeldt-aist I put a list of files currently needing porting / with someone working on them in the description of the PR on top, please edit as files become available / check boxes when you are working on one"},{"author":"CohenCyril","date":"2022-07-26T11:43:35Z","comment":"I would also put the name of the person working on it on the side."},{"author":"affeldt-aist","date":"2022-07-27T07:42:18Z","comment":"I haven't figured out weak_topologicalTypeMixin but maybe at least nbhs_of_open that will be used ought better be outisde of a builders section to stay accessible."},{"author":"proux01","date":"2022-07-27T07:45:51Z","comment":"It seems that often, the complicated `Definition foo_mixin` without a `Canonical foo_type := FooType foo_mixin` just after should become HB factories and builders (but that's sometimes easier to say than to do)."},{"author":"CohenCyril","date":"2022-07-27T07:47:05Z","comment":"> I haven't figured out weak_topologicalTypeMixin b\r\n\r\nI have, I will post it soon or I can show you."},{"author":"CohenCyril","date":"2022-07-27T09:35:22Z","comment":"@affeldt-aist @proux01 in order to fix the `product_topology` bit I need to have the canonical pointed type on a dependent product, so I committed only the weak and sup topology and I will investigate or workaround the issue on dependent products."},{"author":"proux01","date":"2022-07-27T16:20:09Z","comment":"`measure.v` was fairly easy to port.\r\nBut I encountered some `Qed` failures, apparently when using `congr (lim _)`, I should investigate."},{"author":"proux01","date":"2022-07-29T12:19:39Z","comment":"Rebased and force pushed to trigger the CI.\r\n"},{"author":"proux01","date":"2022-08-01T07:27:34Z","comment":"FYI, CI is green on 8.15, 8.16 and master (of course, there are still a few things commented out in topology.v)."},{"author":"zstone1","date":"2023-02-08T18:35:49Z","comment":"FYI, I've merged several results (metrics for supremums and quotients) in the last few days that involve some mixins. Just a heads up to \r\nA) Expect the rebase of topology.v to _not_ build correctly the first time\r\nB) Reach out to me if you run into any issues porting these changes\r\nI'm happy to do whatever is helpful. I just want to make ensure I'm not duplicating or interfering with your work. "},{"author":"proux01","date":"2023-02-09T07:43:19Z","comment":"Thanks for the head up @zstone1 ! As @CohenCyril said, the HB port shouldn't hinder further development in the main branch, so your changes are fine. Of course, if at some point you want to help completing the HB port (you are probably the best expert of the part of the code that remains to port), that would be welcome, but certainly not an obligation."},{"author":"zstone1","date":"2023-02-28T19:55:52Z","comment":"I'd be happy to make an attempt at porting the rest. I have some free time coming up, so I should be able to make some progress.  What would help me a lot:\r\n1. Any blockers? For example, things that we know need corresponding updates in HB itself. \r\n2. Any changes to the math? For example, do you expect any definitions to change in edge cases? \r\n3. Any areas I shouldn't touch?\r\n4. In terms of git management, my plan is to duplicate this branch in my fork, and then make PRs against this branch (rather than master) is that the right approach? \r\n\r\nI think the first step is a rebase, which might be challenging in its own right."},{"author":"CohenCyril","date":"2023-03-01T08:58:51Z","comment":"@affeldt-aist and I suggest we have a meeting about this port, I'm stuck in the middle of a problem of topology and I could use your advice @zstone1. Let's try to find a date.\r\n(@affeldt-aist do you want to try to do this while you're still in the french timezone?)"},{"author":"affeldt-aist","date":"2023-03-01T12:03:42Z","comment":"(@affeldt-aist do you want to try to do this while you're still in the french timezone?)\r\n\r\nThis is a good idea.\r\n\r\n"},{"author":"zstone1","date":"2023-03-01T15:51:37Z","comment":"Yeah, I'd love to help here. A couple things\r\n- Let me know what day works. I'm taking the next couple weeks off work anyway, so I'm pretty free.\r\n- I tried to build this branch, but discovered I'm the only one using vscoq. I can use the nix-shell to `make` just fine. But vscoq doesn't use the right nix artifacts. I'll figure something out."}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"},{"tag":"experiment :test_tube:","description":"This issue/PR is very experimental"}],"pull_requests":[]},{"author":"affeldt-aist","number":697,"state":"closed","open_date":"2022-07-13T10:02:22Z","update_date":"2022-07-22T09:27:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":695,"state":"closed","open_date":"2022-07-13T00:09:45Z","update_date":"2022-07-13T00:35:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":694,"state":"closed","open_date":"2022-07-12T15:33:28Z","update_date":"2022-07-12T17:46:45Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":693,"state":"closed","open_date":"2022-07-12T09:12:06Z","update_date":"2022-07-12T12:44:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mrhaandi","number":692,"state":"closed","open_date":"2022-07-12T08:39:50Z","update_date":"2022-07-22T13:57:03Z","discussion":[{"author":"mrhaandi","date":"2022-07-22T13:40:26Z","comment":"@affeldt-aist is there anything required from my side?"},{"author":"affeldt-aist","date":"2022-07-22T13:45:17Z","comment":"> @affeldt-aist is there anything required from my side?\r\n\r\nNo. I'll merge as soon as the failing checks have been rerun. Thank you for pinging!"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":691,"state":"closed","open_date":"2022-07-11T10:07:38Z","update_date":"2022-07-13T00:10:50Z","discussion":[{"author":"proux01","date":"2022-07-12T15:18:10Z","comment":"@affeldt-aist I added the corresponding dual addition lemmas, I guess we can postpone the real -> num Domain thing so I'll merge once CI is green (enough)"},{"author":"affeldt-aist","date":"2022-07-12T23:36:00Z","comment":"> @affeldt-aist I added the corresponding dual addition lemmas, I guess we can postpone the real -> num Domain thing so I'll merge once CI is green (enough)\r\n\r\nI agree. Maybe we can issue not to forget."}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":690,"state":"closed","open_date":"2022-07-10T20:03:38Z","update_date":"2022-07-27T12:57:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":689,"state":"closed","open_date":"2022-07-09T09:26:05Z","update_date":"2022-10-26T14:21:36Z","discussion":[{"author":"proux01","date":"2022-10-26T14:21:36Z","comment":"I guess this is now outdated and superseded by more recent updates, let's close."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":688,"state":"closed","open_date":"2022-07-08T21:30:20Z","update_date":"2022-07-22T13:57:46Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":687,"state":"closed","open_date":"2022-07-08T09:49:55Z","update_date":"2022-07-22T13:57:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":686,"state":"closed","open_date":"2022-07-07T16:32:57Z","update_date":"2022-07-08T09:13:01Z","discussion":[{"author":"CohenCyril","date":"2022-07-07T18:31:02Z","comment":"Great, except former lemmas should stay or be deprecated (e.g. `0 < pi / 2 < 2`), I even wonder why the new one is not a `Let`, since the individual (binary) inequalities are more likely yo be used than the ternary one."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":685,"state":"closed","open_date":"2022-07-05T14:06:19Z","update_date":"2022-07-09T17:26:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":684,"state":"closed","open_date":"2022-07-01T16:32:21Z","update_date":"2022-07-03T08:30:06Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":682,"state":"closed","open_date":"2022-06-28T07:52:44Z","update_date":"2022-07-08T21:41:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":681,"state":"closed","open_date":"2022-06-23T07:02:09Z","update_date":"2022-07-08T21:41:26Z","discussion":[{"author":"proux01","date":"2022-06-23T08:18:49Z","comment":"Thanks, this is a trivial one, let's merge now."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":680,"state":"closed","open_date":"2022-06-22T08:50:05Z","update_date":"2022-07-08T21:41:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":679,"state":"closed","open_date":"2022-06-22T02:52:11Z","update_date":"2022-07-08T16:57:18Z","discussion":[{"author":"affeldt-aist","date":"2022-07-03T08:49:14Z","comment":"I will maybe merge this one soon because it is small and looks fine to me."},{"author":"proux01","date":"2022-07-04T06:57:02Z","comment":"@affeldt-aist according to the CI, there is an issue on Coq 8.13"},{"author":"affeldt-aist","date":"2022-07-04T07:05:53Z","comment":"> @affeldt-aist according to the CI, there is an issue on Coq 8.13\r\n\r\nIndeed. It looks like a notation problem. Aren't we suppose to drop 8.13 soon? (When 8.16 is available?)."},{"author":"proux01","date":"2022-07-04T13:19:43Z","comment":"I'm perfectly fine with dropping 8.13."}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":678,"state":"closed","open_date":"2022-06-19T04:17:00Z","update_date":"2022-08-23T04:05:56Z","discussion":[{"author":"zstone1","date":"2022-06-19T21:00:29Z","comment":"On further reflection, something is wrong with the ~~current~~ previous formulation. Most applications of this theorem carve out a subset `U` of `X`, which is invariant under `f`, and where it's a contraction. This won't work work for us, (even if we used pseudoMetrc instead of normed) without making the domain a the dependent pair subtype. Using our definition of subspace won't work, because it includes all the extra points, and `f` won't be a contraction. We could introduce a set into the definition of contraction, but I wish there were a way to define things to make subspace work. \r\n\r\nEdit: Thankfully `functions.v` lets me write `f : {fun U >-> U}`. Is this the cleanest way to get what I want? We will probably want a proof that if `U` is a subset of `X`, `U` is closed, and `X` is complete, then so is `{subspace U}` when working with subspaces anyway. "},{"author":"affeldt-aist","date":"2022-06-21T06:54:39Z","comment":"In another setting, we've been discussing with @proux01 a way to introduce a type for real numbers r between 0 and 1 so that 1 - r can be ruled out automatically as non-negative. It would help here too, wouldn't it? "},{"author":"zstone1","date":"2022-06-21T14:11:34Z","comment":"Yes, support for a \"between 0 and 1\" real would definitely simplify things for this proof. There are some details regarding strictness of the inequalities. I defined contractions here as `0 <= q  < 1`. But the `0 = q` case is rather degenerate: it's a constant function (which of course has a unique fixed point). Redefining things to be `0 < q < 1` would lose almost nothing. However, the strictness of `q < 1` is critical (translations have no fixed points in R, and have q=1). The machinery in `signed.v` is precise enough to handle the strictness, so as long as you're reusing that, it should work out well. "},{"author":"affeldt-aist","date":"2022-08-22T03:53:15Z","comment":"I think that in other situations similar needs to work with `1 - q` and `1- q ^ n` expressions will occur (we have been using such expressions a lot with probabilities and convexity) so I have been trying to come up with a way to make your mechanism to take advantage of `signed.v` available from outside of the section. What do you think about this commit https://github.com/affeldt-aist/analysis/commit/3b08c0e8788f56ec2b46f9427598867e6bd36942 ? It introduces a definition and a small theory for `1 - q` expressions so that automation can be made available in (imho) a bit more principled way. (Though obviously this cannot be a definitive solution.)"},{"author":"zstone1","date":"2022-08-22T04:32:29Z","comment":"It's definitely an improvement. Factoring out the reusable bits from that giant algebra rewrite block is great. This look like a good halfway to building some canonical automation. I have a two thoughts:\r\n\r\n1. Is `onemN` necessary? It seems to break the abstraction by producing an actually negative number. I also see you end up using it in the proofs. As far as submitting this improvement, it's not a blocker. But it does seem like a point where the automation is likely to hit a dead end.\r\n2. The `r.~` notation surprised me at first. It's not what I would have expected in this context. But the more I think about that's likely because I'm missing some deeper connection between this result and something in probability theory. I'm now quite curious to see where this line of inquiry will take us."},{"author":"affeldt-aist","date":"2022-08-22T07:02:57Z","comment":">     1. Is `onemN` necessary? It seems to break the abstraction by producing an actually negative number. I also see you end up using it in the proofs. As far as submitting this improvement, it's not a blocker. But it does seem like a point where the automation is likely to hit a dead end.\r\n\r\nI tried to do without `onemN`: https://github.com/affeldt-aist/analysis/commit/63f6eca7d38195cc680ff7a19e086d25fd1cf90d\r\n\r\n>     2. The `r.~` notation surprised me at first. It's not what I would have expected in this context. But the more I think about that's likely because I'm missing some deeper connection between this result and something in probability theory. I'm now quite curious to see where this line of inquiry will take us.\r\n\r\n(I changed the notation to `1.-r`.)\r\nThis comes from paper like e.g. https://arxiv.org/pdf/0903.5522.pdf where in section 2 the author use `\\bar{r}` notations and a bit of theory that we found useful when doing formalization with no automation in other work.\r\n\r\n"},{"author":"proux01","date":"2022-08-22T08:06:12Z","comment":"I once took inspiration of `signed.v` to infer intervals: https://github.com/math-comp/analysis/commit/3b2bcc1207eae2b89182d55fb6e519cbc86429db This could probably extend `signed.v` to the use case needed here (without even needing any specific notation for `1 - x`). This requires a bit more work (in particular to see whether it can replace `signed.v` or has to live beside it and how) that I probably won't be able to do before next month. Meanwhile the current situation here is probably fine and this shouldn't block merging this PR."},{"author":"zstone1","date":"2022-08-22T14:59:45Z","comment":"Yeah, this looks good. That theory should probably move elsewhere, but otherwise I'm quite happy to see this improvement. "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":677,"state":"open","open_date":"2022-06-09T10:48:56Z","update_date":"2023-04-10T09:51:19Z","discussion":[{"author":"zstone1","date":"2022-06-24T23:12:36Z","comment":"I've just checked out the lemma statements (not the proofs), and it looks pretty neat. The existing `hlength_measure` canonical instance provides a reasonably nice interface for it. And `Hahn_ext_measure`. One thing that makes me particularly happy about this is I _think_ I can use this to state \"spectral theorem\". But I'm not 100% sure if it's general enough. That's something I'll look into shortly. In the meanwhile, I have only one question about this work. You carry around the `(ndf : {homo f : x y / (x <= y)%R}) (rcf : right_continuous f` conditions a lot. Which is fine while writing the proofs, but I can imagine this generating a lot of annoying side conditions when using them. Is there a nice way to package that up? Would a canonical structure for this make sense? Perhaps it's too cumbersome.\r\n"}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":676,"state":"closed","open_date":"2022-06-08T14:53:23Z","update_date":"2022-07-09T17:26:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":675,"state":"closed","open_date":"2022-06-08T04:09:48Z","update_date":"2022-06-15T04:03:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":674,"state":"closed","open_date":"2022-06-06T04:43:07Z","update_date":"2022-09-26T14:39:02Z","discussion":[{"author":"CohenCyril","date":"2022-09-26T09:04:33Z","comment":"Looks Ok... I would prefer an alias that carries both the canonical structures of weak topologies and weak uniform spaces (as it should be in the HB version anyway), but meanwhile we can live with this version."},{"author":"zstone1","date":"2022-09-26T14:36:56Z","comment":"Yeah, I don't want to add extra complexity to this file while the HB port in in progress. I will be happy to go back and clean this up once that PR is landed. "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":673,"state":"closed","open_date":"2022-06-03T17:01:04Z","update_date":"2022-06-06T09:07:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":672,"state":"open","open_date":"2022-06-03T12:33:03Z","update_date":"2023-03-15T14:43:57Z","discussion":[{"author":"CohenCyril","date":"2022-07-07T20:08:41Z","comment":"@affeldt-aist I tried something... "}],"tags":[{"tag":"help :sos:","description":"This author/reviewer of this issue/PR needs external help"}],"pull_requests":[]},{"author":"affeldt-aist","number":671,"state":"closed","open_date":"2022-06-02T08:29:45Z","update_date":"2022-06-23T06:59:22Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":670,"state":"closed","open_date":"2022-06-02T08:25:47Z","update_date":"2022-06-02T08:28:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":669,"state":"closed","open_date":"2022-06-02T04:40:59Z","update_date":"2022-06-06T09:07:00Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":668,"state":"closed","open_date":"2022-06-02T04:32:07Z","update_date":"2022-06-04T17:48:49Z","discussion":[{"author":"affeldt-aist","date":"2022-06-03T14:49:44Z","comment":"Maybe rebase and/or squash because there are several disgracious commits (such as merge branch commits). "}],"tags":[],"pull_requests":[]},{"author":"proux01","number":666,"state":"closed","open_date":"2022-05-30T12:14:35Z","update_date":"2022-06-08T11:13:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":665,"state":"closed","open_date":"2022-05-26T13:36:58Z","update_date":"2022-06-03T15:21:32Z","discussion":[{"author":"proux01","date":"2022-05-31T11:44:28Z","comment":"I'll merge by the end of the week if there is no further comment."},{"author":"t6s","date":"2022-06-03T06:42:21Z","comment":"I left a minor comment on the source code but I do not intend to block merging."},{"author":"proux01","date":"2022-06-03T14:11:52Z","comment":"@affeldt-aist do you prefer to handle the above `bigcup_oppr` point in the current PR or in a further one?"},{"author":"affeldt-aist","date":"2022-06-03T14:15:30Z","comment":"~~Maybe in a future PR.~~ done by the last commit \r\n\r\n"}],"tags":[],"pull_requests":[]},{"author":"Alizter","number":663,"state":"closed","open_date":"2022-05-26T01:24:55Z","update_date":"2022-05-26T02:17:36Z","discussion":[{"author":"affeldt-aist","date":"2022-05-26T01:31:49Z","comment":"Thanks.\r\n\r\nfixes #651 (that was going to be taken care of by PR #574)"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":656,"state":"closed","open_date":"2022-04-26T09:12:21Z","update_date":"2022-04-26T09:43:45Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":655,"state":"closed","open_date":"2022-04-19T23:58:54Z","update_date":"2022-04-22T13:58:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":654,"state":"closed","open_date":"2022-04-19T14:40:23Z","update_date":"2022-04-20T00:03:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":653,"state":"closed","open_date":"2022-04-19T05:28:49Z","update_date":"2022-07-09T17:26:29Z","discussion":[{"author":"affeldt-aist","date":"2022-07-02T16:05:01Z","comment":"It has been rebased, we may consider merging it. @CohenCyril "},{"author":"CohenCyril","date":"2022-07-07T12:53:42Z","comment":"I'm the initial author of this code. I should not be the one merging it. I let you decide what to do with it @affeldt-aist "},{"author":"affeldt-aist","date":"2022-07-07T16:44:29Z","comment":"> I'm the initial author of this code. I should not be the one merging it. I let you decide what to do with it @affeldt-aist\r\n\r\nok, then maybe I can count myself as a reviewer and merge because the regular rebasings of this PR have not been much fun :-(\r\n\r\n  is it ok with you @pi8027 ?\r\n\r\n@CohenCyril note that this is this PR that renames `g_measurableType` (I was wrongly telling you sooner today that this was in master) \r\n\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":652,"state":"closed","open_date":"2022-04-18T07:28:39Z","update_date":"2022-05-02T14:55:43Z","discussion":[{"author":"affeldt-aist","date":"2022-04-30T02:11:09Z","comment":"@CohenCyril ping?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":649,"state":"closed","open_date":"2022-04-18T02:47:20Z","update_date":"2022-04-18T03:31:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":647,"state":"closed","open_date":"2022-04-18T02:37:07Z","update_date":"2022-04-18T03:02:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":646,"state":"closed","open_date":"2022-04-18T02:19:32Z","update_date":"2022-07-09T17:26:51Z","discussion":[{"author":"affeldt-aist","date":"2022-06-06T10:00:02Z","comment":"After rebasing, I get this error message:\r\n```coq\r\nLet lebesgue_measure_itvoc (a b : R) :\r\n  (lebesgue_measure `]a, b] = hlength `]a, b])%classic.\r\nError: Stack overflow.\r\n```\r\nWhat could cause this error? Any hint is welcomed.\r\nBy the way, I can avoid the error by writing `]a, b] : set R`.\r\n(I put enough type constraints so that this branch compile.)"},{"author":"affeldt-aist","date":"2022-06-22T17:18:23Z","comment":"In the section below [1], we haved added a type constraint `: set R` around\r\nintervals to avoid a Stack Overflow. I do not remember what change caused that\r\nand if I already told you but since this PR uses an experimental(?) feature of HB I thought you might\r\nwant to know @gares @CohenCyril .\r\n\r\n[1] https://github.com/math-comp/analysis/blob/fixes_642/theories/lebesgue_measure.v#L826-L978"},{"author":"gares","date":"2022-06-22T20:02:31Z","comment":"I'm a bit out of context, but if you tell me how to reproduce the stack overflow I'll look at it."},{"author":"affeldt-aist","date":"2022-06-23T03:03:50Z","comment":"> I'm a bit out of context, but if you tell me how to reproduce the stack overflow I'll look at it.\r\n\r\nYou can just remote the type constraint here\r\nhttps://github.com/math-comp/analysis/blob/fixes_642/theories/lebesgue_measure.v#L830\r\nand compile.\r\n"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":645,"state":"closed","open_date":"2022-04-15T14:00:23Z","update_date":"2022-08-02T09:30:50Z","discussion":[{"author":"proux01","date":"2022-07-29T15:16:33Z","comment":"@affeldt-aist CI \"green\", this can be merged as discussed during the last meeting (the `constructive_ereal.v` file should further be merged with `table.v` from real-closed (c.f. https://github.com/math-comp/real-closed/pull/29 ) and integrated into mathcomp proper)."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":644,"state":"closed","open_date":"2022-04-14T06:34:28Z","update_date":"2022-05-16T13:31:15Z","discussion":[{"author":"CohenCyril","date":"2022-04-14T09:43:08Z","comment":"@mkerjean what do you think of the new vs the old notation. Cf [new notation scheme for integrals, closer to mathcomp's ASCII](https://github.com/math-comp/analysis/wiki/2022-04-12-Meeting)"},{"author":"affeldt-aist","date":"2022-04-21T00:28:38Z","comment":"I just rebased so that it is ready-to-merge.\r\n\r\n@mkerjean You can observe that the new notation makes it for shorter expressions compared to the previous one."}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":641,"state":"closed","open_date":"2022-04-12T14:21:27Z","update_date":"2022-06-04T03:15:20Z","discussion":[{"author":"affeldt-aist","date":"2022-04-29T10:00:48Z","comment":"> It looks like the notation `{ptws, F --> f}` is not displayed as it should.\r\n\r\nThe last commit fixes the problem with my setting.\r\n"},{"author":"affeldt-aist","date":"2022-04-29T10:30:21Z","comment":"> One small detail is that compact_equicontinuous is a necessary step to prove precompact_equicontinuous.\r\n> But the latter is strictly stronger. Perhaps this could be compressed into a single proof with a WLOG to split the cases?\r\n\r\nAt least, we can maybe let `compact_equicontinuous` out of the interface like in\r\nd9029b30fd94dfcbe838ab509adc8d2b3ab829d5 ?\r\n\r\n"},{"author":"affeldt-aist","date":"2022-04-29T10:36:34Z","comment":"Maybe it is more in line with MathComp to write `Theorem Ascoli` instead of `Lemma ascoli_theorem`.\r\n\r\nIt might also be better to pick a different name for `ascoli_forward`, a name made up from the identifiers\r\nused in the statement, like `ptws_precompact_equicontinuous`.\r\n\r\n\r\n"},{"author":"affeldt-aist","date":"2022-04-29T10:45:23Z","comment":"One last comment about naming. I could spot a mix of \"pointwise\" and \"ptws\" in the name of lemmas. Maybe you want to be more uniform?"},{"author":"zstone1","date":"2022-04-29T13:49:15Z","comment":"Thanks for this review. You are correct. We definitely should be more consistent with `pointwise` and `ptws`. Does math-comp style generally have a preference for one or the other? "},{"author":"affeldt-aist","date":"2022-04-30T03:30:35Z","comment":"> We definitely should be more consistent with `pointwise` and `ptws`. Does math-comp style generally have a preference for one or the other?\r\n\r\nI am not sure about the convention. I would rather go with `pointwise` for identifiers here. One reason is that I cannot think of a shortening scheme that would also apply to `piecewise`.\r\n\r\n"},{"author":"zstone1","date":"2022-04-30T04:13:24Z","comment":"Yeah, seems reasonable. I've pushed an update to fix the `ptws` names in identifiers. I've left the `{ptws F --> F}` notation alone. I can live with `ptws` in the notation. The brevity is marginally useful because the predicate appears a lot in proof contexts. But it's easy enough to change if you prefer. "},{"author":"affeldt-aist","date":"2022-04-30T07:10:45Z","comment":"I think that `ptws` is fine for the notation."},{"author":"affeldt-aist","date":"2022-06-03T14:54:39Z","comment":"This is also in need of a rebase (there are merge commits). "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":638,"state":"closed","open_date":"2022-04-12T10:34:48Z","update_date":"2022-05-17T05:41:39Z","discussion":[{"author":"affeldt-aist","date":"2022-05-14T00:04:56Z","comment":"I'll merge this one, it looks harmless."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":636,"state":"closed","open_date":"2022-04-12T09:22:01Z","update_date":"2022-07-28T11:09:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":635,"state":"closed","open_date":"2022-04-12T09:02:44Z","update_date":"2022-04-13T08:06:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":634,"state":"closed","open_date":"2022-04-12T02:57:03Z","update_date":"2022-05-17T06:04:43Z","discussion":[{"author":"affeldt-aist","date":"2022-05-14T00:07:41Z","comment":"I'll merge this one, among others because PR #644 looks promising."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":633,"state":"closed","open_date":"2022-04-10T13:33:09Z","update_date":"2022-06-06T09:54:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":632,"state":"closed","open_date":"2022-04-05T15:20:02Z","update_date":"2022-07-09T17:26:36Z","discussion":[{"author":"affeldt-aist","date":"2022-07-03T08:27:13Z","comment":"This is now axiom-free thanks to the merge of `integral_count`."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":631,"state":"closed","open_date":"2022-04-05T09:45:46Z","update_date":"2022-04-05T22:27:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":628,"state":"closed","open_date":"2022-04-04T10:58:19Z","update_date":"2022-07-09T17:26:38Z","discussion":[{"author":"affeldt-aist","date":"2022-06-14T01:49:55Z","comment":"> Looks good to me\r\n\r\nIs it an approval for this PR and the PR it is based on?"},{"author":"affeldt-aist","date":"2022-06-22T16:20:43Z","comment":"We have a need for `ge0_integral_measure_series` in another project.\r\n(We were about to re-prove it. :-/)"}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":627,"state":"closed","open_date":"2022-04-04T02:56:24Z","update_date":"2022-10-10T21:08:17Z","discussion":[{"author":"affeldt-aist","date":"2022-04-04T03:19:43Z","comment":"Not a deep comment but you may want to consider the if/is/then/else syntax to write functions, e.g.:\r\n```coq\r\nFixpoint false_extend (s : seq bool) : cantor_space :=\r\n  if s is b :: s then\r\n    (fun n => if n is m.+1 then false_extend s m else b)\r\n  else\r\n    (fun=> false).\r\n\r\nFixpoint prefix_of (x : cantor_space) (n : nat) : seq bool :=\r\n  if n is m.+1 then x 0 :: prefix_of (pull x) m else nil.\r\n\r\nLocal Fixpoint prefix_helper (i : nat) (s : seq bool) :=\r\n  if s is b :: l then\r\n    prod_topo_apply i @^-1` [set b] `&` prefix_helper (S i) l\r\n  else\r\n    [set: cantor_space].\r\n```"},{"author":"zstone1","date":"2022-10-10T21:08:17Z","comment":"Bigger and better cantor stuff coming. With #763, the bulk of this work becomes redundant anyway."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":626,"state":"closed","open_date":"2022-04-02T15:05:50Z","update_date":"2022-05-03T07:06:12Z","discussion":[{"author":"CohenCyril","date":"2022-04-07T16:06:21Z","comment":"This is a gallicism, which is not totally inappropriate for Coq, but still, let's call it \"image measure\" or \"pushforward measure\" ? https://en.wikipedia.org/wiki/Pushforward_measure"},{"author":"affeldt-aist","date":"2022-04-19T23:41:28Z","comment":"Note that the presentation of the theory of this commit will certainly be changed by https://github.com/math-comp/analysis/pull/646 but not the proof so it is still relevant to review it first."},{"author":"affeldt-aist","date":"2022-04-19T23:41:28Z","comment":"Note that the presentation of the theory of this commit will certainly be changed by https://github.com/math-comp/analysis/pull/646 but not the proof so it is still relevant to review it first."},{"author":"proux01","date":"2022-04-20T07:44:03Z","comment":"Thanks for the information. I hope to have a look in the coming days."},{"author":"affeldt-aist","date":"2022-04-30T02:12:11Z","comment":"@proux01 ping?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":625,"state":"closed","open_date":"2022-04-01T15:16:19Z","update_date":"2023-01-27T14:01:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":624,"state":"closed","open_date":"2022-04-01T02:42:25Z","update_date":"2022-05-02T14:54:26Z","discussion":[{"author":"affeldt-aist","date":"2022-04-25T13:51:42Z","comment":"Since it is essentially a renaming discussed in the meeting, we may consider it as good to go?"},{"author":"affeldt-aist","date":"2022-04-30T02:12:47Z","comment":"@ybertot ping?"},{"author":"affeldt-aist","date":"2022-05-02T14:12:46Z","comment":"> This looks good to me. There are two minor problems that I think should be corrected.\r\n\r\nIndeed. Thank you!\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":623,"state":"closed","open_date":"2022-04-01T01:58:53Z","update_date":"2022-04-06T07:02:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":622,"state":"closed","open_date":"2022-03-31T15:37:36Z","update_date":"2022-04-06T09:22:22Z","discussion":[{"author":"CohenCyril","date":"2022-04-05T22:37:38Z","comment":"rebase and merge :+1: "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":620,"state":"closed","open_date":"2022-03-29T09:20:09Z","update_date":"2022-05-25T08:40:01Z","discussion":[{"author":"affeldt-aist","date":"2022-04-19T23:42:37Z","comment":"Note that the presentation of the theory of this commit will certainly be changed by https://github.com/math-comp/analysis/pull/646 but not the proof so it is still relevant to review it first."},{"author":"affeldt-aist","date":"2022-04-19T23:42:37Z","comment":"Note that the presentation of the theory of this commit will certainly be changed by https://github.com/math-comp/analysis/pull/646 but not the proof so it is still relevant to review it first."},{"author":"affeldt-aist","date":"2022-04-30T02:13:50Z","comment":"> All changes look just fine.\r\n\r\nThanks for having a look!"},{"author":"affeldt-aist","date":"2022-05-10T21:54:46Z","comment":"I guess we can merge this one?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":619,"state":"closed","open_date":"2022-03-29T07:42:55Z","update_date":"2022-03-31T13:47:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":618,"state":"closed","open_date":"2022-03-29T06:49:03Z","update_date":"2022-03-29T18:14:13Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"hoheinzollern","number":617,"state":"closed","open_date":"2022-03-28T13:27:17Z","update_date":"2022-10-11T13:32:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":616,"state":"closed","open_date":"2022-03-28T10:11:59Z","update_date":"2022-05-03T23:05:23Z","discussion":[{"author":"affeldt-aist","date":"2022-04-19T23:42:02Z","comment":"Note that the presentation of the theory of this commit will certainly be changed by https://github.com/math-comp/analysis/pull/646 but not the proof so it is still relevant to review it first."},{"author":"affeldt-aist","date":"2022-04-19T23:42:02Z","comment":"Note that the presentation of the theory of this commit will certainly be changed by https://github.com/math-comp/analysis/pull/646 but not the proof so it is still relevant to review it first."},{"author":"proux01","date":"2022-05-02T16:54:04Z","comment":"BTW, the dirac measure should probably be in `measure.v` rather than `lebesgue_integral.v` (it seems to be just a matter of requiring `numfun` to get `\\1_`)"},{"author":"affeldt-aist","date":"2022-05-03T07:02:50Z","comment":"> LGTM, sorry for those late reviews\r\n\r\nDefinitely no problem. Thank you very much!"},{"author":"proux01","date":"2022-05-03T13:29:34Z","comment":"Updated CHANGELOG, will merge once CI is green."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":615,"state":"closed","open_date":"2022-03-28T06:33:08Z","update_date":"2022-04-05T22:30:15Z","discussion":[{"author":"CohenCyril","date":"2022-03-28T21:25:51Z","comment":"> ##### Motivation for this change\r\n> fixes #597\r\n> \r\n> implements this renaming: `addeoo` -> `addepinfty` `addooe` -> `addpinftye`\r\n\r\nI agree they should be changed. But the conventions of mathcomp is that shortsuffixes (one-letter) are to be glued without `_` while long one have to be separted (either by `_` or by `N`, `E` or `P` (capital letters)).\r\n \r\n> other proposal: add_pinfty_e adde_pinfty\r\n\r\nUsually long suffixes are not alternated with a short suffix (or other suffixes) to reflect the order positionally, we use `l` and `r` instead.\r\n\r\nHence... I suggest we make up a new 1-letter suffix for infinity, looking at the letters, I guess only the `y` is unattributed and unambiguous so what about `y` for `infty` and `Ny` for negative infty (either as `-oo` or as `- +oo`, they are convertible anyway).\r\n\r\n@affeldt-aist WDYT?\r\n"},{"author":"affeldt-aist","date":"2022-03-29T03:48:36Z","comment":"I tried the one-letter convention in this commit https://github.com/math-comp/analysis/pull/615/commits/9ee776e55581e9f4e744cd322fdea49a2a50056e.\r\n\r\nThat looks fine to me."},{"author":"CohenCyril","date":"2022-03-31T12:25:37Z","comment":"I am afraid this PR has to be rebased in a non trivial way to take into account new lemmas added by #609"},{"author":"affeldt-aist","date":"2022-03-31T13:58:23Z","comment":"> I am afraid this PR has to be rebased in a non trivial way to take into account new lemmas added by #609\r\n\r\n~~Let me check.~~ It looks ok.\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":614,"state":"closed","open_date":"2022-03-28T04:46:30Z","update_date":"2022-05-25T08:40:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"hoheinzollern","number":611,"state":"closed","open_date":"2022-03-24T10:14:30Z","update_date":"2022-10-11T13:32:13Z","discussion":[{"author":"CohenCyril","date":"2022-03-24T10:25:47Z","comment":"But ... why? It's the `fun x => x ^ n` which is continuous, `f` does not have to be. Use composition. "},{"author":"hoheinzollern","date":"2022-03-24T13:40:37Z","comment":"Ok thanks for the suggestion, this actually fixes that."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":610,"state":"closed","open_date":"2022-03-24T09:43:32Z","update_date":"2022-03-29T09:41:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":609,"state":"closed","open_date":"2022-03-23T12:43:56Z","update_date":"2022-03-31T09:47:30Z","discussion":[{"author":"proux01","date":"2022-03-28T08:59:40Z","comment":"@gares ever seen those errors https://github.com/math-comp/analysis/runs/5714400270?check_suite_focus=true\r\nwhen installing elpi.1.14.3 that uses camlp5.8.00.03?"},{"author":"gares","date":"2022-03-28T09:46:35Z","comment":"Yes. If you have opam 2.1 then it should just work, otherwise one should run `opam depext camlp5` at some point in the run.\r\nThis was the star that broke the camel's back: https://github.com/LPCIC/elpi/pull/130"},{"author":"proux01","date":"2022-03-28T09:56:11Z","comment":"Thanks, @erikmd do you know how we could do that with the Docker images?"},{"author":"gares","date":"2022-03-28T14:23:13Z","comment":"Maybe [before_script](https://github.com/coq-community/docker-coq-action#before_script) [sorry, before_install]"},{"author":"proux01","date":"2022-03-28T16:03:52Z","comment":"That works thanks."},{"author":"proux01","date":"2022-03-29T10:31:54Z","comment":"@affeldt-aist your last for-push looks like a regression?"},{"author":"affeldt-aist","date":"2022-03-29T11:12:57Z","comment":"> @affeldt-aist your last for-push looks like a regression?\r\n\r\nAh, indeed I can  spot at least one change that has resurfaced..."},{"author":"proux01","date":"2022-03-31T08:58:57Z","comment":"I'll merge once squashed (and CI green)."},{"author":"affeldt-aist","date":"2022-03-31T09:22:49Z","comment":"> I'll merge once squashed (and CI green).\r\n\r\nYou'd prefer me to squash first rather than using the \"squash and merge\" github button?"},{"author":"proux01","date":"2022-03-31T09:45:18Z","comment":"Never used that button, let me try."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":608,"state":"closed","open_date":"2022-03-23T10:18:01Z","update_date":"2022-03-28T06:42:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":606,"state":"closed","open_date":"2022-03-23T04:55:51Z","update_date":"2022-03-23T05:12:19Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":605,"state":"closed","open_date":"2022-03-21T03:21:20Z","update_date":"2022-03-21T10:05:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":603,"state":"closed","open_date":"2022-03-19T10:09:42Z","update_date":"2022-03-22T14:20:43Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":601,"state":"closed","open_date":"2022-03-18T16:11:51Z","update_date":"2022-03-22T14:26:47Z","discussion":[{"author":"affeldt-aist","date":"2022-03-22T13:41:44Z","comment":"It looks like the same CI error as https://github.com/math-comp/analysis/pull/595."},{"author":"proux01","date":"2022-03-22T13:52:29Z","comment":"Yes looks like an issue with Docker images, elpi.1.14.1 builds fine on Docker image `mathcomp/mathcomp-dev:coq-dev` but fails on `mathcomp/mathcomp:1.14.0-coq-dev` (appart from mathcomp, all other packages seem to be the same).\r\n\r\nPinging @erikmd in case you have an idea\r\n\r\nAnyway, we probably shouldn't consider this blocking here."},{"author":"CohenCyril","date":"2022-03-22T14:20:55Z","comment":"Oh you merged this before I managed to express my opinion... This is a cause for a minor version bump...\r\n(We removed files!)"},{"author":"affeldt-aist","date":"2022-03-22T14:22:18Z","comment":"You mean that it justifies jumping to 0.5?"},{"author":"proux01","date":"2022-03-22T14:24:57Z","comment":"That's fundamentally right but analysis is still 0.something and there are a few breaking changes almost at every release anyway."},{"author":"affeldt-aist","date":"2022-03-22T14:26:47Z","comment":"I indeed merged in this perspective, I was rather expecting the split with mathcomp-classical to be 0.5..."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":600,"state":"closed","open_date":"2022-03-18T14:31:26Z","update_date":"2022-10-12T14:40:08Z","discussion":[{"author":"affeldt-aist","date":"2022-03-21T02:43:43Z","comment":"> we may also consider adding functions and signed there.\r\n\r\nI would maybe refrain to do so for now because we didn't have (yet?) explicit requests for them and `functions.v` requires more dependencies and this has consequences on compilation time. \r\n"},{"author":"CohenCyril","date":"2022-03-21T10:02:51Z","comment":"Actually, I would rather draw the line now, and dispatch to the new package anything that does not strictly pertain to topology/calculus/analysis, rather than adjust later and cause further changes in the dependencies of client packages."},{"author":"proux01","date":"2022-03-21T15:53:38Z","comment":"@CohenCyril  done. We thus have in classical:\r\n* boolp.v\r\n* classical_sets.v\r\n* cardinality.v\r\n* ereal.v\r\n* forms.v\r\n* fsbigop.v\r\n* functions.v\r\n* mathcomp_extra.v\r\n* nngnum.v\r\n* nsatz_realtype.v\r\n* posnum.v\r\n* prodnormedzmodule.v\r\n* reals.v\r\n* Rstruct.v\r\n* signed.v\r\n* all_classical.v\r\n\r\nand in main package:\r\n* landau.v\r\n* Rstruct.v\r\n* topology.v\r\n* normedtype.v\r\n* realfun.v\r\n* sequences.v\r\n* exp.v\r\n* trigo.v\r\n* esum.v\r\n* set_interval.v\r\n* lebesgue_measure.v\r\n* derive.v\r\n* measure.v\r\n* numfun.v\r\n* lebesgue_integral.v\r\n* summability.v\r\n* altreals/xfinmap.v\r\n* altreals/discrete.v\r\n* altreals/realseq.v\r\n* altreals/realsum.v\r\n* altreals/distr.v\r\n\r\n@affeldt-aist points are valid though:\r\n* compilation time of classical here is around 2min40s whereas boolp and classical alone only take 10s (however, that compilation time is comparable to mathcomp-algebra which is a dependency anyway, so that's probably acceptable)\r\n* this adds HB as a dependency (which will be a dependency of MC 2.0 but whose OPAM package takes some time to compile (maybe because it runs tests by default))\r\n"},{"author":"affeldt-aist","date":"2022-03-21T15:58:12Z","comment":"what about the near tactic?"},{"author":"proux01","date":"2022-03-21T16:06:43Z","comment":"It is in topology.v and seem very related to topology IINM."},{"author":"affeldt-aist","date":"2022-03-21T16:10:05Z","comment":"i think that at some point it was scheduled to replace bigenough"},{"author":"CohenCyril","date":"2022-03-22T18:53:12Z","comment":"> i think that at some point it was scheduled to replace bigenough\r\n\r\nit is, actually near is neither analysis nor classical :smile: "},{"author":"proux01","date":"2022-03-23T10:39:51Z","comment":"@affeldt-aist has a good point that mathcomp-classical may, in the current state of the PR, be larger than what @strub initially requested.\r\n\r\nWhat about cutting it in three instead?\r\n* mathcomp-classical: with boolp and classical_sets, only requiring mathcomp-ssreflect\r\n* mathcomp-reals: everything else not strictly pertaining to topology/calculus/analysis, requiring mathcomp-algebra and HB\r\n* mathcomp-analysis: topology/calculus/analysis"},{"author":"CohenCyril","date":"2022-03-23T18:04:09Z","comment":"> What about cutting it in three instead?\r\n> \r\n> * mathcomp-classical: with boolp and classical_sets, only requiring mathcomp-ssreflect\r\n> * mathcomp-reals: everything else not strictly pertaining to topology/calculus/analysis, requiring mathcomp-algebra and HB\r\n> * mathcomp-analysis: topology/calculus/analysis\r\n\r\nI disagree with this. I have no objection to merge reals and analysis, but I believe that:\r\n- `boolp.v`\r\n- `classical_sets.v`\r\n- `cardinality.v`\r\n- `fsbigop.v`\r\n- `functions.v` (not in mathcomp just because of HB + a light separation between the constructive and classical part should be done)\r\nbelong to classical.\r\n\r\nOn the other hand `forms.v` (PR in progress for a while) and `mathcomp_extra.v` (easy stuff) have to be merged in mathcomp.\r\nAlso `nngnum.v`, `posnum.v` and `signed.v` do belong to mathcomp too.\r\n\r\nEDIT:\r\nFinally, the `near` tactics do not belong to analysis nor do they belong to classical... and should thus be extracted from the repo...\r\n\r\n> @affeldt-aist has a good point that mathcomp-classical may, in the current state of the PR, be larger than what @strub initially requested.\r\n\r\nThe only reason not to make it bigger is to avoid delay. I advocate to be finer than lazy (in a CS way not a judgmental way)"},{"author":"CohenCyril","date":"2022-03-23T18:07:23Z","comment":"We should discuss this at the next mc analysis meeting"},{"author":"proux01","date":"2022-04-15T09:06:00Z","comment":"So, here is a classical package with only\r\n* `boolp.v`\r\n* `classical_sets.v`\r\n* `cardinality.v`\r\n* `fsbigop.v`\r\n* `functions.v`\r\n* the part of `set_interval.v` that doesn't depend on reals or ereal\r\n\r\nThe classical package depends on HB (because of functions) but I think it's fine as MC 2.0 will depend on it anyway.\r\n\r\nReals and ereal should probably go in another separate package but I think this belongs to a further PR.\r\nBTW, ereal should maybe be split between its classic and non classic part."},{"author":"CohenCyril","date":"2022-07-07T13:00:17Z","comment":"Sorry for the delay. This looks nice. We also need to take care of the nix packages when we do this."},{"author":"proux01","date":"2022-07-12T12:32:57Z","comment":"Rebased (hope will manage to merge this \"soon\", because those rebases are rather painful)"},{"author":"affeldt-aist","date":"2022-07-12T23:39:46Z","comment":"> Rebased (hope will manage to merge this \"soon\", because those rebases are rather painful)\r\n\r\nAgreed. We can maybe merge the easy PRs in the pipeline that touch the relevant files and then make this PR the top priority, so that it can be merged by the next meeting."},{"author":"proux01","date":"2022-08-03T09:23:12Z","comment":"CI green, this requires:\r\n* for Nix: https://github.com/NixOS/nixpkgs/pull/184961 on nixpkgs, then https://github.com/coq-community/coq-nix-toolbox/pull/117 on coq-nix-toolbox (we could then update coq-nix-toolbox here and remove the overlays)\r\n* for OPAM: a PR on extra-dev"},{"author":"CohenCyril","date":"2022-09-26T14:17:56Z","comment":"Hi @proux01 the overlays should be unnecessary (since you merged the nixpkgs pr), however this made me noticed that a `mathcomp-analysis-single` package would be convenient for dev and CI purposes (as in https://github.com/NixOS/nixpkgs/blob/2a48d5921115733b840e651b843a3c7c515db582/pkgs/development/coq-modules/mathcomp/default.nix#L54).\r\nI'm sorry this is undocumented. The purpose of this package is to be able to build everything in a single `make`"},{"author":"proux01","date":"2022-09-27T10:47:14Z","comment":"> Hi @proux01 the overlays should be unnecessary (since you merged the nixpkgs pr)\r\n\r\n@CohenCyril right, removed. Ci is as green as expected (there is still this master failure with this strange dependency to real-closed that we should fix, but that's orthogonal to the current PR).\r\n\r\n> however this made me noticed that a `mathcomp-analysis-single` package would be convenient for dev and CI purposes (as in https://github.com/NixOS/nixpkgs/blob/2a48d5921115733b840e651b843a3c7c515db582/pkgs/development/coq-modules/mathcomp/default.nix#L54). I'm sorry this is undocumented. The purpose of this package is to be able to build everything in a single `make`\r\n\r\nDone there: https://github.com/NixOS/nixpkgs/pull/193162 (and successfully tested on the coq-nix-toolbox there: https://github.com/coq-community/coq-nix-toolbox/pull/122)\r\n\r\nI'll do the OPAM packages in extra-dev once this is merged"},{"author":"proux01","date":"2022-09-28T16:09:28Z","comment":"@CohenCyril Nix CI green (the Docker CI failure seems unrelated and is likely due to this: https://github.com/math-comp/math-comp/pull/924)\r\nSo I think the current PR can be merged (I'll then update the extra-dev OPAM packages)."},{"author":"proux01","date":"2022-10-12T12:24:02Z","comment":"@CohenCyril CI \"green\" (the Docker failures are exepected due to the exhaustion of gitlab credits), including the `mathcomp-analysis-single` package."},{"author":"CohenCyril","date":"2022-10-12T12:35:40Z","comment":"Fantastique !"},{"author":"gares","date":"2022-10-12T12:52:13Z","comment":"Classy ;-)"},{"author":"proux01","date":"2022-10-12T14:40:08Z","comment":"OPAM package done, we should be all set."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":599,"state":"closed","open_date":"2022-03-16T13:50:57Z","update_date":"2022-03-22T09:10:03Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":598,"state":"closed","open_date":"2022-03-15T11:38:29Z","update_date":"2022-07-09T17:26:48Z","discussion":[{"author":"affeldt-aist","date":"2022-06-22T16:53:01Z","comment":"ping @CohenCyril @t6s "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":596,"state":"closed","open_date":"2022-03-11T10:56:53Z","update_date":"2022-07-03T09:10:23Z","discussion":[{"author":"CohenCyril","date":"2022-03-11T11:05:21Z","comment":"I think this is redundant with the integral.\r\nIndeed the new `esum` is in fact the integral on de discrete measure on nat"},{"author":"affeldt-aist","date":"2022-03-11T12:57:01Z","comment":"So the generalization of \\esum should be constructed as an instance of the theory of integral?"},{"author":"CohenCyril","date":"2022-03-11T13:00:39Z","comment":"Yes and then you even recover the cvd and fubini and cool stuff for free.\r\nActually even the current `esum` is only there for bootstrapping..."},{"author":"affeldt-aist","date":"2022-03-11T13:26:47Z","comment":"Will do."},{"author":"affeldt-aist","date":"2022-07-03T09:09:35Z","comment":"The goal of this draft PR was mainly to produce the following lemma to prove countable additivity:\r\n```coq\r\nLemma esumB D f g : esummable D f -> esummable D g ->\r\n  (forall i, D i -> 0 <= f i) -> (forall i, D i -> 0 <= g i) ->\r\n  \\esum_(i in D) (f i - g i) = \\esum_(i in D) f i - \\esum_(i in D) g i.\r\n  ```\r\nbut it was introducing sequences of arbitrary extended real numbers and developing their theory for this purpose.\r\nThe following lemma made its way into master, is equally useful, and does not require the introduction of new definition: \r\n```coq\r\nLemma esumB D f g : summable D f -> summable D g ->\r\n  (forall i, D i -> 0 <= f i) -> (forall i, D i -> 0 <= g i) ->\r\n  \\esum_(i in D) (f \\- g)^\\+ i - \\esum_(i in D) (f \\- g)^\\- i =\r\n  \\esum_(i in D) f i - \\esum_(i in D) g i.\r\n  ```\r\n  I therefore close this draft PR.\r\n  \r\n  "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":595,"state":"closed","open_date":"2022-03-11T10:19:40Z","update_date":"2022-03-23T05:09:07Z","discussion":[{"author":"affeldt-aist","date":"2022-03-22T13:34:11Z","comment":"Here is an excerpt of the only CI error:\r\n```\r\n  # CAMLC -c src/coq_elpi_HOAS.ml\r\n  # File \"src/coq_elpi_HOAS.ml\", line 616, characters 53-64:\r\n  # Error: This expression has type Sorts.t\r\n  #        but an expression was expected of type Univ.Universe.t\r\n  # make[1]: *** [Makefile.coq:736: src/coq_elpi_HOAS.cmo] Error 2\r\n  # make: *** [Makefile:38: build] Error 2\r\n  ```"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":594,"state":"closed","open_date":"2022-03-11T09:42:01Z","update_date":"2022-03-23T05:09:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":593,"state":"closed","open_date":"2022-03-10T10:57:15Z","update_date":"2022-03-23T05:09:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":591,"state":"closed","open_date":"2022-03-09T03:00:47Z","update_date":"2022-03-23T05:09:15Z","discussion":[{"author":"CohenCyril","date":"2022-03-15T09:15:27Z","comment":"#578 has not been completely addressed: a renaming is missing"},{"author":"affeldt-aist","date":"2022-03-15T09:21:23Z","comment":"> #578 has not been completely addressed: a renaming is missing\r\n\r\nI didn't see the comment but that explains the strange naming that was puzzling me.\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":590,"state":"closed","open_date":"2022-03-09T01:26:45Z","update_date":"2022-03-23T05:09:26Z","discussion":[{"author":"affeldt-aist","date":"2022-03-11T12:54:40Z","comment":"I guess this is ok to merge but I suspect that if we do so further PRs will be red."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":575,"state":"closed","open_date":"2022-03-07T16:22:48Z","update_date":"2022-03-08T11:18:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":574,"state":"closed","open_date":"2022-03-07T11:16:53Z","update_date":"2022-06-03T14:04:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":572,"state":"closed","open_date":"2022-03-07T06:47:54Z","update_date":"2022-03-07T15:26:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":571,"state":"closed","open_date":"2022-03-07T03:38:16Z","update_date":"2022-03-29T09:41:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":569,"state":"closed","open_date":"2022-03-04T19:17:03Z","update_date":"2022-03-05T17:29:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":568,"state":"closed","open_date":"2022-03-04T10:29:39Z","update_date":"2022-03-05T18:08:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":567,"state":"closed","open_date":"2022-03-04T09:33:07Z","update_date":"2022-03-05T17:33:18Z","discussion":[{"author":"proux01","date":"2022-03-04T09:36:23Z","comment":"I added entries for `'[forall x P]` and `'[exists x P]` but I don't understand what they bring compared to `asbool` used as `'[< forall x, P >]` and `'[< exists x, P >]`? This seems unused in Analysis, @amahboubi you seem to be the author of the feature, maybe you can shed some light?"},{"author":"CohenCyril","date":"2022-03-04T12:24:45Z","comment":"\r\n\r\n\r\n> I added entries for `'[forall x P]` and `'[exists x P]` but I don't understand what they bring compared to `asbool` used as `'[< forall x, P >]` and `'[< exists x, P >]`? This seems unused in Analysis, @amahboubi you seem to be the author of the feature, maybe you can shed some light?\r\n\r\nI believe that the boolean forall and exists are completely subsumed by `asbool` and should thus be removed."},{"author":"proux01","date":"2022-03-04T13:40:57Z","comment":"Ok, I'll remove them in a separate PR."}],"tags":[],"pull_requests":[]},{"author":"hoheinzollern","number":565,"state":"closed","open_date":"2022-03-03T16:24:23Z","update_date":"2022-03-28T13:28:43Z","discussion":[{"author":"CohenCyril","date":"2022-03-03T16:36:57Z","comment":"Hi, first, thank you for your contribution, it is greatly appreciated.\r\nIn order for your change to be integrated it will need to be slightly changed.\r\nThe proof should be compressed and the name should be updated to `measurable_fun_exprn`.\r\nThe proof can be done by composition with between a function and a continuous function (the lemma about the measurability of $$\\mathbb{R}$$ function is not yet in the library AFAIK)"},{"author":"CohenCyril","date":"2022-03-03T17:58:10Z","comment":"additionally, I strongly advise you *not to* PR from your fork's master branch."},{"author":"affeldt-aist","date":"2022-03-07T03:40:04Z","comment":"> (the lemma about the measurability of $$\\mathbb{R}$$ function is not yet in the library AFAIK)\r\n\r\nHere is a proposal PR #571 \r\n"}],"tags":[],"pull_requests":[]},{"author":"hoheinzollern","number":564,"state":"closed","open_date":"2022-03-03T14:47:16Z","update_date":"2022-10-11T13:31:53Z","discussion":[{"author":"affeldt-aist","date":"2022-03-03T14:54:29Z","comment":"NB: I changed the base to `probability` but maybe you want to make a PR which is based on master since what you add does not depend on `probability.v`."},{"author":"hoheinzollern","date":"2022-03-03T15:14:14Z","comment":"Ok I'll redo my pull request based on the master branch, thanks"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":563,"state":"closed","open_date":"2022-03-03T06:35:59Z","update_date":"2022-03-06T06:15:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":562,"state":"closed","open_date":"2022-03-03T05:49:03Z","update_date":"2022-06-02T04:41:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":561,"state":"closed","open_date":"2022-03-02T13:16:12Z","update_date":"2022-03-02T14:35:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":560,"state":"closed","open_date":"2022-03-01T09:50:00Z","update_date":"2022-03-07T15:52:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":559,"state":"closed","open_date":"2022-03-01T09:01:12Z","update_date":"2022-03-06T05:48:45Z","discussion":[{"author":"proux01","date":"2022-03-01T19:44:04Z","comment":"Indeed, there should be a hint in the new posnum stuff, we should try."},{"author":"affeldt-aist","date":"2022-03-02T07:12:03Z","comment":"~~Then I'll merge and issue not to forget about testing some automation.~~ on hold"},{"author":"affeldt-aist","date":"2022-03-03T15:28:24Z","comment":"> I strongly prefer to waìt until the posnum PR is merged\r\n\r\nDo you mean that it is not sure that we'll get rid of the lemmas after all?"},{"author":"CohenCyril","date":"2022-03-03T15:37:12Z","comment":"> Do you mean that it is not sure that we'll get rid of the lemmas after all?\r\n\r\nI mean that it seems to be a detour to \"merge this, open an issue, finish & merge the new posnum, then fix the issue by (hopefully) restoring the old proofs\", rather than \"finish & merge posnum, amend this PR, merge\""},{"author":"affeldt-aist","date":"2022-03-05T06:13:37Z","comment":"To use the new posnum, I needed to rebase it but it was too difficult to retain its intermediate commits. I therefore squashed it, rebased it, and then rebased this PR on top of it so as to propagate the automation it provides to the files that changed in the meantime in master. The new posnum addresses the comments by Zachary. I kept all the technical comments about the new posnum into the commit message of the squashed commits. How about we merge this?\r\n"},{"author":"proux01","date":"2022-03-05T13:42:10Z","comment":"Great, thanks! I did a finer rebase to keep a bit more history in https://github.com/math-comp/analysis/pull/511"},{"author":"affeldt-aist","date":"2022-03-05T15:49:11Z","comment":"> Great, thanks! I did a finer rebase to keep a bit more history in #511\r\n\r\nI rebased on the new #511. That addresses the pending change request."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":558,"state":"closed","open_date":"2022-02-28T11:36:20Z","update_date":"2022-03-07T15:25:32Z","discussion":[{"author":"CohenCyril","date":"2022-03-01T12:02:54Z","comment":"Great! But why are the `fct_zmodType` etc stuff in `functions` rather than `numfun`?"},{"author":"affeldt-aist","date":"2022-03-01T13:20:37Z","comment":"> Great! But why are the `fct_zmodType` etc stuff in `functions` rather than `numfun`?\r\n\r\nIt seemed to me that some files (e.g., topology.v, derive.v) didn't need most of `numfun.v`\r\nand that doing it this way is more conservative (it's easier to move things out of `functions.v`\r\nthan the other way around). \r\n\r\n"},{"author":"affeldt-aist","date":"2022-03-05T15:50:06Z","comment":"Heading for merge?"},{"author":"CohenCyril","date":"2022-03-05T16:12:51Z","comment":"I did not have time to so a full review yet... but I saw measurability results in `numfun`, I don't think it should depend on `measure`"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":557,"state":"closed","open_date":"2022-02-28T10:19:12Z","update_date":"2022-03-03T05:57:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":555,"state":"closed","open_date":"2022-02-27T12:15:46Z","update_date":"2022-02-28T09:28:57Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":554,"state":"closed","open_date":"2022-02-27T11:59:31Z","update_date":"2022-02-28T09:28:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":553,"state":"closed","open_date":"2022-02-27T11:21:59Z","update_date":"2022-02-28T09:28:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":552,"state":"closed","open_date":"2022-02-27T08:04:58Z","update_date":"2022-03-07T15:52:55Z","discussion":[{"author":"zstone1","date":"2022-02-27T18:25:58Z","comment":"I'm still seeing some `Hint locality` warnings in the Files Changed view. All of them are in `cardinality.v`. Can we add the global tag to those while in this diff, or is there are a reason to leave that file alone?"},{"author":"affeldt-aist","date":"2022-02-28T05:32:30Z","comment":"> I'm still seeing some `Hint locality` warnings in the Files Changed view. All of them are in `cardinality.v`. Can we add the global tag to those while in this diff, or is there are a reason to leave that file alone?\r\n\r\nThank you for reporting. I added them, this was a miss on my side.\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":551,"state":"closed","open_date":"2022-02-27T07:08:23Z","update_date":"2022-02-27T09:45:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":547,"state":"closed","open_date":"2022-02-24T03:03:12Z","update_date":"2022-03-05T19:48:37Z","discussion":[{"author":"CohenCyril","date":"2022-03-05T18:46:17Z","comment":"wait for CI, then  ~~squash & merge~~\r\nOh no wait the  ~~CI~~ changelog is missing the two new entries"},{"author":"zstone1","date":"2022-03-05T19:00:31Z","comment":"Do you meant the changelog is missing the entries? I've added them. "},{"author":"CohenCyril","date":"2022-03-05T19:22:09Z","comment":"> Do you meant the changelog is missing the entries? I've added them.\r\n\r\nYes, sorry I got distracted"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":546,"state":"closed","open_date":"2022-02-22T10:04:15Z","update_date":"2022-03-07T15:52:54Z","discussion":[{"author":"proux01","date":"2022-02-23T09:22:16Z","comment":"Indeed, I copy pasted those without enough thinking, they are definitely useless. Let me fix that.\r\n"},{"author":"proux01","date":"2022-02-23T16:23:37Z","comment":"@affeldt-aist thanks for your remark, I thought about this a bit more carefully and came up with a naming scheme I'm happy with for this family of lemmas: `l{t,e}e_{,d}sub{,e}{r,l}_add{r,l}` with\r\n* sub{r,l} when the subtracted var must be a fin_num\r\n* sube{r,l} when the subtracted var can be an extended value (and one of the two other vars must be a fin_num)\r\n\r\nThis is now a full cartesian product (all 32 lemmas are there)."},{"author":"proux01","date":"2022-02-23T16:25:25Z","comment":"P.S. : Here, I think I should squash the three commits before this is merged."}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":545,"state":"closed","open_date":"2022-02-19T06:21:19Z","update_date":"2022-04-12T13:37:55Z","discussion":[{"author":"CohenCyril","date":"2022-03-23T00:15:43Z","comment":"This is really nice. I'd love to see the reproduction of the problems with near that you mentioned. And yes, the no-unfolding stuff is annoying, since we piggyback on Coq evar we should introduce the unfolding in the tactic, but it needs to be smart and thus be reprogrammed in another metalanguage (e.g. ltac2 or coq-elpi), which I meant to do at some point anyways."},{"author":"zstone1","date":"2022-03-23T02:23:15Z","comment":"Thank you, I'm pretty happy with how it worked out. I still have some questions about `near_compact_covering` to think about. In particular, I'm very much hoping the converse is false, because means there's a possibility of a novel generalization of arzela-ascoli.\r\n\r\nI will post a branch with the broken `near` application once this is merged.\r\n\r\nAlso, I remember @affeldt-aist mentioned something about uniform series convergence proofs (in R or C). Once this is merged, you can use `ptws_compact_cvg` + local compactness. (I believe it'll be easier to formalize this way, rather copying textbook proofs that use Weierstrass M-test and deal with boundary conditions)."},{"author":"zstone1","date":"2022-03-23T20:34:35Z","comment":"Well, it was a nice thought. I have a proof of the converse of near_compact_covering. I'll post it separately once I clean it up."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":543,"state":"closed","open_date":"2022-02-17T15:58:29Z","update_date":"2022-03-02T16:17:22Z","discussion":[{"author":"affeldt-aist","date":"2022-02-17T16:01:32Z","comment":"That's all fine with (modulo the changelog update :-/)."},{"author":"affeldt-aist","date":"2022-02-25T17:45:24Z","comment":"The errors are syntax errors with Coq 8.13 only.\r\nI fixed some in `lebesgue_measure.v` (by adding parentheses to disambiguate the parsing of intervals) but didn't have time to fix the ones in `lebesgue_integral.v\":\r\n```\r\n# File \"./theories/lebesgue_integral.v\", line 1428, characters 53-54:\r\n# Error: Syntax error: 'nnsfun' 'of' expected after '[' (in [term]).\r\n ```\r\n"},{"author":"affeldt-aist","date":"2022-02-26T05:49:38Z","comment":"The only errors are now \"Nix CI for bundle\" errors, so they are maybe not relevant."},{"author":"CohenCyril","date":"2022-02-26T10:18:16Z","comment":"> The only errors are now \"Nix CI for bundle\" errors, so they are maybe not relevant.\r\n\r\n@affeldt-aist I fixed something in `boolp.v` doc, added some (working) nix CI, and we should be good to go."},{"author":"affeldt-aist","date":"2022-02-26T10:44:07Z","comment":"Only one failure left:\r\n```\r\nNix CI for bundle master / coq (pull_request_target)  Failing after 24s — coq\r\n\r\nChecking presence of CI target coq\r\n\r\nRun nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\r\n  nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\r\n     --argstr bundle \"master\" --argstr job \"coq\" \\\r\n     --dry-run 2>&1 > /dev/null)\r\n  echo $nb_dry_run\r\n  echo ::set-output name=status::$(echo $nb_dry_run | grep \"built:\" | sed \"s/.*/built/\")\r\n  shell: /usr/bin/bash -e {0}\r\n  env:\r\n    tested_commit: dba57a6d631d8b2b199cc308d10a53590529fdea\r\n    NIX_PATH: nixpkgs=channel:nixpkgs-unstable\r\nError: Process completed with exit code 1.\r\n```"},{"author":"CohenCyril","date":"2022-02-26T12:17:00Z","comment":"The CI errors will disapear after the merge"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":542,"state":"closed","open_date":"2022-02-15T09:24:24Z","update_date":"2022-03-07T15:52:37Z","discussion":[{"author":"affeldt-aist","date":"2022-02-28T09:36:54Z","comment":"These lemmas seem uncontroversial to me. It is ok to merge?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":541,"state":"closed","open_date":"2022-02-12T09:27:57Z","update_date":"2022-07-08T09:24:46Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":540,"state":"closed","open_date":"2022-02-10T11:11:18Z","update_date":"2022-03-07T15:53:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":539,"state":"open","open_date":"2022-02-08T15:13:23Z","update_date":"2022-06-25T15:06:30Z","discussion":[{"author":"zstone1","date":"2022-06-25T15:06:29Z","comment":"With a long-term goal of doing spectral theory, I'm looking at defining integrals for a TVS. The most straightforward choice seems to be \"weak integrals\". I can work in a normed vector space for now, but I'd love to build on your work directly. What is the state of this PR today? And is there anything I can do to help get it ready for submission?"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":537,"state":"closed","open_date":"2022-02-06T14:03:36Z","update_date":"2022-06-08T11:11:30Z","discussion":[{"author":"proux01","date":"2022-02-06T14:51:50Z","comment":"The failure for Coq master comes from https://github.com/coq/coq/pull/15220"},{"author":"CohenCyril","date":"2022-02-06T15:29:38Z","comment":"> The failure for Coq master comes from [coq/coq#15220](https://github.com/coq/coq/pull/15220)\r\n\r\n:sob:"},{"author":"proux01","date":"2022-06-03T12:13:10Z","comment":"@CohenCyril I uncommented Coq master in config.nix but we now have a Cachix error: https://github.com/math-comp/analysis/runs/6725051905?check_suite_focus=true"},{"author":"CohenCyril","date":"2022-06-03T12:25:24Z","comment":"> @CohenCyril I uncommented Coq master in config.nix but we now have a Cachix error: https://github.com/math-comp/analysis/runs/6725051905?check_suite_focus=true\r\n\r\nLooks like a cachix error... I reran it"},{"author":"proux01","date":"2022-06-03T12:37:16Z","comment":"Looks like you aren't luckyer than me :("},{"author":"CohenCyril","date":"2022-06-03T14:31:58Z","comment":"coq master looks broken for other reasons now :-/"},{"author":"proux01","date":"2022-06-03T14:42:59Z","comment":"I handled that in the HB port, let me fix it."},{"author":"proux01","date":"2022-06-03T16:55:40Z","comment":"This now works but with a few overlays. Let me backport them."},{"author":"CohenCyril","date":"2022-06-07T12:32:06Z","comment":"@proux01 great! For the record there is no need to copy meta-fetch and extra-lib anymore, cf https://github.com/math-comp/hierarchy-builder/blob/86c75aaf6e7517fcd4ddf4f7b0cdab850a06b46b/.nix/ocaml-overlays/elpi/default.nix#L7"},{"author":"proux01","date":"2022-06-08T11:11:13Z","comment":"CI for Coq master is finally back :tada: "}],"tags":[],"pull_requests":[]},{"author":"proux01","number":535,"state":"closed","open_date":"2022-01-30T13:53:00Z","update_date":"2022-02-28T11:19:26Z","discussion":[{"author":"affeldt-aist","date":"2022-02-09T15:15:27Z","comment":"You maybe want to squash the commits."},{"author":"proux01","date":"2022-02-09T15:27:19Z","comment":"I'd rather not but if you prefer, I can."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":534,"state":"closed","open_date":"2022-01-29T15:27:56Z","update_date":"2022-02-05T10:20:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"thery","number":533,"state":"closed","open_date":"2022-01-29T11:21:45Z","update_date":"2022-02-05T02:25:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":532,"state":"closed","open_date":"2022-01-29T04:03:41Z","update_date":"2022-02-10T11:13:36Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":530,"state":"closed","open_date":"2022-01-25T09:18:07Z","update_date":"2022-01-28T08:13:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":529,"state":"closed","open_date":"2022-01-24T14:35:54Z","update_date":"2022-01-24T14:54:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":528,"state":"closed","open_date":"2022-01-22T11:52:01Z","update_date":"2022-01-24T14:29:33Z","discussion":[{"author":"proux01","date":"2022-01-24T10:02:52Z","comment":"CI green here (it's a trivial one)\r\n"}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":527,"state":"closed","open_date":"2022-01-21T22:08:53Z","update_date":"2022-02-18T18:26:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":526,"state":"closed","open_date":"2022-01-21T02:12:05Z","update_date":"2022-01-21T03:20:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":525,"state":"closed","open_date":"2022-01-20T20:13:54Z","update_date":"2022-02-09T09:17:03Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":524,"state":"closed","open_date":"2022-01-20T04:03:26Z","update_date":"2022-01-21T02:01:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":520,"state":"closed","open_date":"2022-01-20T03:28:19Z","update_date":"2022-01-21T02:07:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":517,"state":"closed","open_date":"2022-01-18T15:12:12Z","update_date":"2022-01-21T02:15:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":516,"state":"open","open_date":"2022-01-17T09:33:17Z","update_date":"2023-04-10T10:01:31Z","discussion":[{"author":"zstone1","date":"2023-03-06T16:40:27Z","comment":"I'm ok with the remaining details here. Removing the specialized notations is great. Leaving LP spaces as pseudo-normed is fine (we can always quotient later. I can build the generic proofs that a quotient by `close` preserves most important structures).\r\nAnd for everything else, I have no constructive suggestions. So I'm fine to merge this, and improve incrementally. \r\n\r\nIn particular, there are a bunch of statements that will need to be generalized to be AE, but that can be done as needed. "},{"author":"affeldt-aist","date":"2023-03-10T06:40:34Z","comment":"Thank you for your comments.\r\nWe understand that some lemmas are not yet in their most general form\r\nand we will issue about it upon squash-merging.\r\n(In particular, `expectation_le` should be AE and `Lspace` should be\r\nquotiented.)\r\nWe will have the opportunity to go back to this file in the near future\r\nsince there is work in progress relying on it\r\n(https://github.com/math-comp/analysis/pull/769 and https://github.com/math-comp/analysis/pull/790).\r\n\r\n"},{"author":"affeldt-aist","date":"2023-03-17T08:42:51Z","comment":"> (In particular, `expectation_le` should be AE and `Lspace` should be quotiented.)\r\n\r\nThe last commits (kind of) address these two issues.\r\n\r\n"},{"author":"affeldt-aist","date":"2023-04-10T10:01:30Z","comment":"What is left to do with this PR is to make sure that the coercion `LfunType_of_LType` of Lp spaces works as intended. This might amount to transport correctly the `eq_quot` structure of `LspaceType` to `LType` which I haven't figured out yet. "}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":514,"state":"closed","open_date":"2022-01-17T03:44:16Z","update_date":"2022-01-21T01:14:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":513,"state":"closed","open_date":"2022-01-11T04:09:57Z","update_date":"2022-01-12T07:57:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":511,"state":"closed","open_date":"2022-01-09T18:13:04Z","update_date":"2022-03-05T17:14:25Z","discussion":[{"author":"CohenCyril","date":"2022-01-09T18:14:06Z","comment":"CC @affeldt-aist @proux01"},{"author":"proux01","date":"2022-01-11T12:31:15Z","comment":"I had a quick look, this looks great.\r\nI'd like to do a more careful review, but this will probably have to wait for a few more days."},{"author":"proux01","date":"2022-01-25T13:18:08Z","comment":"Previously, a posnum was also a nonneg thanks to that Canonical instance in posnum.v\r\n```Coq\r\nCanonical posnum_nngnum x := Nonneg.NngNum x%:num (posnum_ge0 x).\r\n```\r\nit seems we have a regression here (c.f. comments above on one and inv)."},{"author":"CohenCyril","date":"2022-01-25T14:01:04Z","comment":"Thank you for your thorough review @proux01, this is much appreciated. I will try to address all your comments.\r\nMy main objective on this pass was to be able to cover everything `posnum` and `nnegnum` were covering before, some holes are voluntary in this first past others not.\r\n\r\n> Main comment: in abstract interpretation, we would say that the abstract domain (>=0, <=0) doesn't have the property of the best abstraction, which causes a bunch of issues (should 0 be considered >=0 or <=0 ? both abstractions are not comparable), the usual fix is to add a 0 in the lattice (as (meet <=0 >=0) so that 0 now has a best abstraction). I could offer a commit with that change if you want.\r\n\r\nYes, I noticed this very late and this additional would make sense.\r\nHowever in practical cases, it is very easy to get around this tricky corner case, e.g. by using `addr0` or `mulr0` to remove `0` altogether from the guilty goal, and I guess that's why it was not a problem at all.\r\nNaturally, I'm not opposed to adding this case of course!\r\n\r\n> Comments on entire files\r\n> \r\n> * nngnum.v and posnum.v: shouldn't we just remove these files?\r\n\r\nYes, I kept these two files as a stub in order to transition smoothly between the new and old code, especially to anticipate a compat with unmerged PRs. But they should disappear in the long run.\r\n\r\n\r\n> * measure.v and normedtype.v: replace all `%:nngnum` by `%:num`?\r\n\r\nI'm not completely sure, this will show up more precisely later in my answer to detailed comments, but the rough reason is that we may not want to rely on an arbitrary signed number, as we may want to guide the resolution a little bit.\r\n"},{"author":"proux01","date":"2022-01-29T14:53:19Z","comment":"> Yes, I noticed this very late and this additional would make sense. However in practical cases, it is very easy to get around this tricky corner case, e.g. by using `addr0` or `mulr0` to remove `0` altogether from the guilty goal, and I guess that's why it was not a problem at all.\r\n\r\nI'm not worried about `0 + _` or `0 * _` but I'm less confident about things like `min 0 _` or `max 0 _`.\r\n\r\n> Naturally, I'm not opposed to adding this case of course!\r\n\r\nHere it is: https://github.com/proux01/analysis/commits/posnum_wip (this branch also adresses all my comments above we agreed upon)"},{"author":"proux01","date":"2022-02-05T12:00:06Z","comment":"I added the doc I promised, so AFAICT, the remaining TODOs are:\r\n* should notations such as `%:pos` and `%:nng` be in ring_scope? (that would allow for similar notations in `ereal_scope` in ereal.v)\r\n* discuss construction of orderType on signs (c.f., commented Section Order)\r\n* add a comment to signed_intro\r\n* fix two problems in the application of le_num (don't know which ones)\r\n* add a nonzero structure to detect that `|x| > 0 when x != 0 (not sure to grasp the details)\r\n\r\nExtended reals are handled separately in #375 \r\n"},{"author":"proux01","date":"2022-02-07T16:45:44Z","comment":"@CohenCyril I generalized (c.f. last commit) what was already done for nat to infer some sign information based on the type when no canonical instance matches the head symbol. In particular, I added a \"top\" catch-all that states that everything is in `{compare x0 & ?=0 & >?<0 }`. This enables things like `abse x` (in #375 ) or `max 0 x` to infer `>=0` even when nothing is known about `x`.\r\n\r\nThe main drawback is that canonical structure inference no longer unfolds anything (since the catch-all triggers before).\r\nThus a few more unfolding are needed. This seems an acceptable trade-off to me, but you may not share my opinion (see last commit for example of impact).\r\n\r\nApart from the few points above (and adding still more canonical instances, but that's endless), I consider this and #375 ready.\r\n"},{"author":"CohenCyril","date":"2022-02-07T20:10:58Z","comment":"> The main drawback is that canonical structure inference no longer unfolds anything (since the catch-all triggers before).\r\n> Thus a few more unfolding are needed. This seems an acceptable trade-off to me, but you may not share my opinion (see last commit for example of impact).\r\n\r\nYes indeed, I think that's a good trade-off."},{"author":"proux01","date":"2022-03-02T08:05:31Z","comment":"Thanks @affeldt-aist or the review. @CohenCyril do you agree if I rebase (and squash a bit/tidy the history) this in order to move towards merging?"},{"author":"proux01","date":"2022-03-05T13:41:21Z","comment":"Since there was no opposition, I rebased (thanks @affeldt-aist for the initial rebase!).\r\nA few points remain (c.f. initial PR description on top), but none of them is blocking.\r\nI would argue in favor of merging (and adding issues to remember those points). @CohenCyril WDYT?"},{"author":"CohenCyril","date":"2022-03-05T16:07:06Z","comment":"\"Pull request authors cannot approve their own pull request\", still I'm in favor."},{"author":"proux01","date":"2022-03-05T17:14:05Z","comment":"Looks everyone agrees, let's merge then."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":510,"state":"closed","open_date":"2022-01-07T13:37:20Z","update_date":"2022-01-18T22:54:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":509,"state":"closed","open_date":"2022-01-06T19:59:33Z","update_date":"2022-01-18T22:56:17Z","discussion":[{"author":"proux01","date":"2022-01-06T20:06:28Z","comment":"Should we also add 8.15 and master to the Docker CI?"},{"author":"proux01","date":"2022-01-07T08:50:24Z","comment":"@CohenCyril maybe using branch `coq-master` of coq-elpi could help?\r\n"},{"author":"proux01","date":"2022-01-11T12:58:00Z","comment":"@CohenCyril feel free to cherry pick the three commits in https://github.com/math-comp/analysis/pull/510\r\nAt least the Docker CI goes through for master.\r\nThe 8.15 job is failing due to a bug in 8.15+rc1 that is fixed in 8.15 branch so hopefully 8.15.0 will be ok.\r\nThe `Nix CI for bundle master / coq-elpi` job is now ok but there is still an error with the `Nix CI for bundle master / mathcomp-analysis` job I don't get (it seems a redirection to /dev/null is hidding the error)."},{"author":"CohenCyril","date":"2022-01-18T21:15:05Z","comment":"> @CohenCyril feel free to cherry pick the three commits in #510 At least the Docker CI goes through for master. The 8.15 job is failing due to a bug in 8.15+rc1 that is fixed in 8.15 branch so hopefully 8.15.0 will be ok. The `Nix CI for bundle master / coq-elpi` job is now ok but there is still an error with the `Nix CI for bundle master / mathcomp-analysis` job I don't get (it seems a redirection to /dev/null is hidding the error).\r\n\r\nThanks, cherry-picked them all and squahed.\r\n\r\n(I changed the faulty proof to one more conventional)"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":508,"state":"closed","open_date":"2022-01-04T08:30:52Z","update_date":"2022-01-21T03:15:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":506,"state":"closed","open_date":"2021-12-28T02:53:31Z","update_date":"2021-12-29T06:17:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":505,"state":"closed","open_date":"2021-12-27T21:27:36Z","update_date":"2022-02-18T17:11:19Z","discussion":[{"author":"zstone1","date":"2022-01-20T17:10:40Z","comment":"Merges are all resolved here. Build is broken, but that seems to be affecting more than just this change. Can we get this into the next release? "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":504,"state":"closed","open_date":"2021-12-27T09:13:57Z","update_date":"2022-01-14T14:55:55Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":502,"state":"closed","open_date":"2021-12-27T03:49:26Z","update_date":"2022-01-14T15:11:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":501,"state":"closed","open_date":"2021-12-27T03:17:29Z","update_date":"2021-12-27T23:56:36Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":500,"state":"closed","open_date":"2021-12-27T02:38:51Z","update_date":"2021-12-27T23:55:47Z","discussion":[{"author":"affeldt-aist","date":"2021-12-27T03:21:54Z","comment":"NB: solved\r\n\r\nCI errors are Curl errors about coq-elpi or hierarchy-builder:\r\n\r\nE.g.: mathcomp 1.13.0 / coq 8.12.\r\n```\r\nError:  The sources of the following couldn't be obtained, aborting:\r\n            - coq-elpi.1.6.0: Curl failed\r\n```\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":496,"state":"closed","open_date":"2021-12-16T03:00:13Z","update_date":"2021-12-16T15:39:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":495,"state":"closed","open_date":"2021-12-13T08:35:03Z","update_date":"2021-12-16T01:17:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":494,"state":"closed","open_date":"2021-12-10T09:51:28Z","update_date":"2021-12-16T11:30:56Z","discussion":[{"author":"proux01","date":"2021-12-10T12:10:56Z","comment":"I can't merge but this looks fine to me"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":493,"state":"closed","open_date":"2021-12-10T09:40:39Z","update_date":"2022-01-12T07:57:43Z","discussion":[{"author":"proux01","date":"2021-12-10T12:11:58Z","comment":"@affeldt-aist note that since you didn't mention #491 in the description, github did not grasp that this fixes it and won't automatically close it (c.f. \"Linked issues\" on the right)."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":492,"state":"closed","open_date":"2021-12-08T09:29:21Z","update_date":"2022-02-26T14:14:49Z","discussion":[{"author":"CohenCyril","date":"2022-01-18T15:32:22Z","comment":"@affeldt-aist I finished the PR modulo documentation and changelog"},{"author":"affeldt-aist","date":"2022-02-14T08:52:19Z","comment":"Note that changelog appears as part of PR #371 now."}],"tags":[],"pull_requests":[]},{"author":"t6s","number":490,"state":"closed","open_date":"2021-12-08T02:03:46Z","update_date":"2021-12-08T23:51:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":489,"state":"closed","open_date":"2021-12-06T13:51:37Z","update_date":"2022-06-08T09:26:59Z","discussion":[{"author":"affeldt-aist","date":"2022-05-14T00:21:50Z","comment":"Could we merge this one on the grounds that it simplifies code a bit and provides documentation?\r\n(It is my understanding that the blocking point is that lemmas in classical_sets.v could be better organized\r\nto highlight the different side-conditions. Since it take time, we can maybe issue about that.)"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":488,"state":"closed","open_date":"2021-12-06T08:57:00Z","update_date":"2021-12-06T09:15:41Z","discussion":[{"author":"CohenCyril","date":"2021-12-06T09:14:36Z","comment":"no please, no."},{"author":"CohenCyril","date":"2021-12-06T09:15:40Z","comment":"The equivalence is already dealt with by `inE`, these functions are meant to be adapter lemmas.\r\nIf you really need a `reflect` version add a new lemma called `mem_setP`"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":487,"state":"open","open_date":"2021-12-04T10:22:57Z","update_date":"2023-03-15T14:46:14Z","discussion":[{"author":"affeldt-aist","date":"2022-05-14T00:24:15Z","comment":"IIRC, the problem with this PR is that it does not bring the expected code size reduction. But there is now code size augmentation (except with one lemma). Since we all seem to agree that large inequalities fell better suited, we can maybe merge this PR for now. What do you think? "},{"author":"CohenCyril","date":"2022-05-16T20:23:15Z","comment":"I think this PR essentially exibits a lack of abstraction. We should actually understand how to make the code smaller, and I think it might not be about changing the def."}],"tags":[{"tag":"experiment :test_tube:","description":"This issue/PR is very experimental"}],"pull_requests":[]},{"author":"affeldt-aist","number":485,"state":"closed","open_date":"2021-11-30T15:15:42Z","update_date":"2021-12-10T10:05:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":484,"state":"closed","open_date":"2021-11-30T10:23:22Z","update_date":"2021-12-10T10:05:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":483,"state":"closed","open_date":"2021-11-30T09:29:08Z","update_date":"2021-12-04T05:26:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":481,"state":"closed","open_date":"2021-11-29T11:45:42Z","update_date":"2021-12-04T06:47:45Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":479,"state":"closed","open_date":"2021-11-29T11:05:17Z","update_date":"2021-12-10T10:05:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":478,"state":"closed","open_date":"2021-11-26T09:36:06Z","update_date":"2021-11-28T06:34:39Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":476,"state":"closed","open_date":"2021-11-19T13:29:35Z","update_date":"2021-12-10T10:05:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":475,"state":"closed","open_date":"2021-11-14T03:13:26Z","update_date":"2021-12-10T10:05:22Z","discussion":[{"author":"affeldt-aist","date":"2021-11-14T10:09:32Z","comment":"Here is the CI error for MathComp 1.12/Coq 8.14:\r\n```\r\n  The following dependencies couldn't be met:\r\n    - coq-mathcomp-analysis -> coq-hierarchy-builder >= 0.10.0 -> coq-elpi -> coq < 8.14~\r\n        not available because the package is pinned to version 8.14.0\r\n    - coq-mathcomp-analysis -> coq-hierarchy-builder >= 0.10.0 -> coq-elpi -> ocaml >= 4.07.0\r\n        base of this switch (use `--unlock-base' to force)\r\n```"},{"author":"pi8027","date":"2021-11-15T04:10:16Z","comment":"@affeldt-aist That's the issue I reported as math-comp/docker-mathcomp#12."},{"author":"affeldt-aist","date":"2021-11-15T13:27:01Z","comment":"@pi8027 Thank you. I was bewildered by the failing dependency chain. Is there a way to make the CI use the \"switch\"? @erikmd "}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":474,"state":"closed","open_date":"2021-11-12T22:24:38Z","update_date":"2022-01-21T01:31:31Z","discussion":[{"author":"zstone1","date":"2022-01-19T03:14:58Z","comment":"Just wanted to check if there is anything else I should update here before Thursday. "},{"author":"affeldt-aist","date":"2022-01-19T05:46:10Z","comment":"Since there is a definition, we maybe want to add documentation. I added some but you certainly have better wording. We can also maybe gain a few more lines by compressing scripts further."},{"author":"CohenCyril","date":"2022-01-19T11:57:45Z","comment":"Looks good to me, except for the name `evaluator_dep` which does not ring a bell to me (it says nothings about topology and `evaluator` is not an existing naming convention for application in the library).\r\nI'd suggest `prod_topo_apply` or something like this."},{"author":"zstone1","date":"2022-01-20T00:46:44Z","comment":"Ah, that is a dramatic simplification for the continuity proof. Thanks! And I agree your suggested name is much improved. Now updated."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":473,"state":"closed","open_date":"2021-11-12T11:33:27Z","update_date":"2021-12-27T23:54:48Z","discussion":[{"author":"affeldt-aist","date":"2021-12-27T02:28:46Z","comment":"Can we consider the proof simplifications as an approval?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":472,"state":"closed","open_date":"2021-11-12T11:15:16Z","update_date":"2021-12-21T04:39:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":471,"state":"closed","open_date":"2021-11-08T09:59:12Z","update_date":"2021-11-08T12:01:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":469,"state":"closed","open_date":"2021-11-05T00:28:19Z","update_date":"2021-11-08T07:24:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":468,"state":"closed","open_date":"2021-11-04T23:24:29Z","update_date":"2021-12-15T10:31:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":467,"state":"closed","open_date":"2021-11-04T22:49:34Z","update_date":"2021-11-05T08:38:20Z","discussion":[{"author":"affeldt-aist","date":"2021-11-04T23:54:34Z","comment":"you meant `fine` maybe"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":466,"state":"closed","open_date":"2021-11-03T15:32:52Z","update_date":"2021-11-04T09:14:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":465,"state":"closed","open_date":"2021-11-03T10:47:53Z","update_date":"2021-11-04T14:27:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":464,"state":"closed","open_date":"2021-10-30T01:59:04Z","update_date":"2021-10-31T09:43:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":463,"state":"closed","open_date":"2021-10-30T01:24:07Z","update_date":"2021-10-30T16:59:32Z","discussion":[{"author":"affeldt-aist","date":"2021-10-30T14:10:39Z","comment":"Is it possible to make some room in this PR for this lemma?\r\n```\r\nLemma bigcup_setU P F G : \\bigcup_(i in P) (F i `|` G i) =\r\n  (\\bigcup_(i in P) F i) `|` (\\bigcup_(i in P) G i).\r\nProof.\r\nrewrite predeqE => x; split=> [[i Pi [Fix|Gix]]|[[i Pi Fix]|[i Pi Gix]]];\r\n  by [left; exists i|right; exists i|exists i =>//; left|exists i =>//; right].\r\nQed.\r\n```\r\nIt is used in PR #371 and now its name clashes with one of the recent additions. "},{"author":"CohenCyril","date":"2021-10-30T14:13:39Z","comment":"> Is it possible to make some room in this PR for this lemma?\r\n> \r\n> ```\r\n> Lemma bigcup_setU P F G : \\bigcup_(i in P) (F i `|` G i) =\r\n>   (\\bigcup_(i in P) F i) `|` (\\bigcup_(i in P) G i).\r\n> Proof.\r\n> rewrite predeqE => x; split=> [[i Pi [Fix|Gix]]|[[i Pi Fix]|[i Pi Gix]]];\r\n>   by [left; exists i|right; exists i|exists i =>//; left|exists i =>//; right].\r\n> Qed.\r\n> ```\r\n> \r\n> It is used in PR #371 and now its name clashes with one of the recent additions.\r\n\r\nSure, with the new conventions, it should be `bigcupU`."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":462,"state":"closed","open_date":"2021-10-30T01:19:42Z","update_date":"2021-10-30T18:34:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":460,"state":"closed","open_date":"2021-10-25T02:42:21Z","update_date":"2021-10-30T19:39:37Z","discussion":[{"author":"CohenCyril","date":"2021-10-29T09:48:15Z","comment":"@affeldt-aist thanks for extracting this bit from the other PR it was needed indeed."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":459,"state":"closed","open_date":"2021-10-25T02:14:55Z","update_date":"2021-11-07T02:48:02Z","discussion":[{"author":"proux01","date":"2021-10-26T11:04:17Z","comment":"BTW, we could also add `mine` but distributivity of addition over it would require dual addition, so maybe defer it to #374 "},{"author":"affeldt-aist","date":"2021-10-26T11:13:05Z","comment":"> BTW, we could also add `mine` but distributivity of addition over it would require dual addition, so maybe defer it to #374\r\n\r\nI just put the definition (on my side, it is rather maxe lemmas that I need)."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":458,"state":"open","open_date":"2021-10-22T07:15:33Z","update_date":"2023-03-15T15:06:03Z","discussion":[{"author":"proux01","date":"2021-10-22T14:50:24Z","comment":"Indeed, it's terribly slow (nearly 45 minutes for topology.v), I don't know why, the file is large (4800 lines and generated HTML is 3.7 Mo) but not exceptionally huge.\r\nMaybe @cpitclaudel or @ejgallego would have an idea?"},{"author":"thery","date":"2021-10-22T15:18:57Z","comment":"Did you try --html-minification #cpitclaudel/alectryon/issues/35"},{"author":"cpitclaudel","date":"2021-10-23T19:09:50Z","comment":"I can have a look, thanks for the ping.  What commands do I need to run to compile that file?"},{"author":"ejgallego","date":"2021-10-24T18:38:53Z","comment":"> Maybe @cpitclaudel or @ejgallego would have an idea?\r\n\r\nNo idea, other than the well-known efficiency problems as of today; we are working on some workarounds that I feel should help a lot [pyCoq and coq-layout-engine], mainly the allowing tools such as Alectryon do everything in a single pass [no roundtrip] , but still not there yet."},{"author":"affeldt-aist","date":"2021-10-24T23:59:39Z","comment":"> Did you try --html-minification #[cpitclaudel/alectryon/issues/35](https://github.com/cpitclaudel/alectryon/issues/35)\r\n\r\nI just tried but it ends up with an error (`^CTraceback (most recent call last): ...`, referring to `.py` files from alectryon) this time after about 30 min.\r\n"},{"author":"affeldt-aist","date":"2021-10-25T00:01:12Z","comment":"> I can have a look, thanks for the ping. What commands do I need to run to compile that file?\r\n\r\nThanks for your time (and for the tool, the rendering is nice).\r\n`make alectryon`. This is a target in `Makefile.common`."},{"author":"affeldt-aist","date":"2021-10-25T14:54:38Z","comment":"I got a bit more feedback from @ejgallego : https://github.com/ejgallego/coq-serapi/issues/260\r\n\r\nIt looks like it is going to be difficult to use alectryon for us. :-( "},{"author":"affeldt-aist","date":"2023-02-12T10:01:56Z","comment":"I tried again today with Alectryon 1.4.0, coq-serapi 8.15.0+0.15.0, coq 8.15.2 and\r\nit seems that it could generate html versions for all files,\r\nsee https://math-comp.github.io/analysis/htmldoc_master_alectryon/.\r\n\r\nHowever there were a number of warnings (`Dynlink error... The offending chunk is deliminated by...`) and\r\na critical error (`[sertop] Critical Dynlink` critical).\r\nI guess that part of the problem is that alectryon does not find `.vo` files despite the `-R` options\r\nthat I maybe got wrong.\r\n\r\n`--html-minification` does not seem to have a visible effect.\r\n\r\nIs there a way to hide the `Proof. ... Qed.` blocks?"},{"author":"cpitclaudel","date":"2023-02-12T17:45:52Z","comment":"Great work!\r\n\r\n> Is there a way to hide the Proof. ... Qed. blocks?\r\n\r\nNot built-in; it's relatively easy to add it as a custom script, but the exact process depends on what you need.  Do you want them removed completely, or dynamically shown/hidden with a click?\r\n\r\n> However there were a number of warnings (Dynlink error... The offending chunk is deliminated by...) and\r\na critical error ([sertop] Critical Dynlink critical).\r\n\r\nHow annoying.  I didn't have time to work on Alectryon while I was at AWS, but I'm planning to resume now that I've moved.\r\nIs there a simple recipe I could try out?\r\n\r\n> `--html-minification` does not seem to have a visible effect.\r\n\r\nMaybe I can try to help with that too."},{"author":"affeldt-aist","date":"2023-02-13T00:11:10Z","comment":"> \r\n\r\n"},{"author":"affeldt-aist","date":"2023-02-13T00:15:11Z","comment":"> Do you want them removed completely, or dynamically shown/hidden with a click?\r\n\r\nDynamic would be great but we were only thinking about hiding as with coqdoc.\r\nIn fact, so far, we were mostly thinking of using alectryon as a replacement for coqdoc\r\nto generate the documentation of MathComp-Analysis as in:\r\nhttps://math-comp.github.io/analysis/\r\n\r\n> Is there a simple recipe I could try out?\r\n\r\nMaybe clone this branch https://github.com/math-comp/analysis/tree/alectryon\r\nand try `make alectryon`. This takes some time.\r\n"}],"tags":[{"tag":"experiment :test_tube:","description":"This issue/PR is very experimental"},{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"}],"pull_requests":[]},{"author":"affeldt-aist","number":457,"state":"closed","open_date":"2021-10-22T05:54:35Z","update_date":"2021-12-28T02:31:42Z","discussion":[{"author":"affeldt-aist","date":"2021-10-24T23:15:43Z","comment":"or create a subdirectory `analysis` on https://math-comp.github.io/ ?"},{"author":"affeldt-aist","date":"2021-10-25T14:57:43Z","comment":"FYI, PR #458 tried to generate the same documentation using alectryon but that won't be as immediate as coqdoc."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":455,"state":"closed","open_date":"2021-10-14T04:33:05Z","update_date":"2021-12-16T01:25:54Z","discussion":[{"author":"affeldt-aist","date":"2021-10-14T08:48:58Z","comment":"The CI seems to fail only with Coq 8.12. Here is one of the error messages for information: SOLVED\r\n```\r\n  # File \"./.coq-native/Nmathcomp_bigenough_bigenough.native\", line 169, characters 3-66:\r\n  # Error: Unbound module Nmathcomp_ssreflect_ssrnat\r\n  # File \"./bigenough.v\", line 121, characters 0-14:\r\n  # Warning: Removed file ./bigenough.vo\r\n  # Error: Native compiler exited with status 2\r\n  # \r\n  # make[2]: *** [Makefile.coq:678: bigenough.vo] Error 1\r\n  # make[1]: *** [Makefile.coq:327: all] Error 2\r\n  # make[1]: Leaving directory '/home/coq/.opam/4.05.0/.opam-switch/build/coq-mathcomp-bigenough.1.0.0'\r\n  # make: *** [Makefile.common:51: this-build] Error 2\r\n  ```"},{"author":"affeldt-aist","date":"2021-10-27T13:37:13Z","comment":"The bigenough error is no more, this is about a time out now (this is not specific to this PR): SOLVED\r\n```\r\n  Error:  Sorry, resolution of the request timed out.\r\n          Try to specify a simpler request, use a different solver, or increase the allowed time by setting OPAMSOLVERTIMEOUT to a bigger value \r\n```"},{"author":"affeldt-aist","date":"2021-10-28T03:13:24Z","comment":"It's a time out but the web interface gives the impression of an almost instantaneous failure. SOLVED"},{"author":"CohenCyril","date":"2021-12-15T12:17:49Z","comment":"@affeldt-aist did you force-push on top of my simplifications ? (https://github.com/math-comp/analysis/commit/6df74ff30a6c1ee133f0c6f983bee56ce071b46e)"},{"author":"affeldt-aist","date":"2021-12-15T13:29:48Z","comment":"> @affeldt-aist did you force-push on top of my simplifications ? ([6df74ff](https://github.com/math-comp/analysis/commit/6df74ff30a6c1ee133f0c6f983bee56ce071b46e))\r\n\r\nI am afraid that I did this mistake, sorry. :-(\r\n(should be fixed now)"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":454,"state":"closed","open_date":"2021-10-13T08:21:17Z","update_date":"2021-10-15T06:47:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":452,"state":"closed","open_date":"2021-10-04T13:36:17Z","update_date":"2021-10-07T04:27:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":451,"state":"closed","open_date":"2021-10-04T08:10:36Z","update_date":"2021-10-12T07:54:06Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":449,"state":"closed","open_date":"2021-10-04T06:54:00Z","update_date":"2021-10-21T23:11:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":447,"state":"closed","open_date":"2021-10-04T03:22:52Z","update_date":"2021-12-04T05:28:36Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":445,"state":"closed","open_date":"2021-10-04T03:02:02Z","update_date":"2021-10-05T11:12:23Z","discussion":[{"author":"CohenCyril","date":"2021-10-05T11:12:22Z","comment":"Indeed `is_cvg` is the naming convention for `cvg _` while `cvg` is for `lim _`, but I think we can make an exception for preconditions, since `lim` is not a proposition, there is no ambiguity."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":444,"state":"closed","open_date":"2021-10-04T02:48:03Z","update_date":"2021-10-12T07:54:02Z","discussion":[{"author":"proux01","date":"2021-10-04T08:24:30Z","comment":"Impressive refactoring ! (I would have feared that this would break more code)"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":440,"state":"closed","open_date":"2021-10-01T07:22:25Z","update_date":"2022-01-20T12:47:33Z","discussion":[{"author":"proux01","date":"2021-10-01T07:24:52Z","comment":"> Oups, this is actually a duplicate of #343 \r\n\r\nIt was not merged because the CI failed, we maybe have to wait until older versions become unsupported."},{"author":"proux01","date":"2021-10-01T11:29:13Z","comment":"Indeed, we'll have to drop support for Coq 8.11 and 8.12 when we'll want to support 8.15.\r\nSo closing this one."},{"author":"proux01","date":"2021-10-01T11:29:24Z","comment":"Sorry for the noise."}],"tags":[],"pull_requests":[]},{"author":"vlj","number":438,"state":"closed","open_date":"2021-09-26T21:27:54Z","update_date":"2022-01-06T13:27:10Z","discussion":[{"author":"vlj","date":"2021-09-26T21:43:51Z","comment":"Actually I used setC1E since it makes the other proof cleaner."},{"author":"affeldt-aist","date":"2021-10-13T08:10:30Z","comment":"> This PR adds T0 and T1 spaces definitions, proof that singletons in T1 space are closed, and that T1 -> T0.\r\n\r\nThank you for your contribution!\r\n\r\n> I introduced 2 lemmas in classical_sets to make easy to work with [set~ x] : setC_set1C and setC_subset_set1C.\r\n> I'm not really sure about the naming convention:\r\n\r\nFor T_0 and T_1, we should maybe go with full names like we did for `hausdorff`, otherwise it looks too much\r\nlike code identifier.\r\n\r\n>     * setC_subset_set1C is involving a subset of set1C, but I don't know how to phrase it correctly.\r\n> I'm also not sure my proof is optimal.\r\n\r\nIt can be a one-liner, I am not sure about the naming either, I would propose to name it on the model of\r\n`disjoints_subset` because it looks like a special case.\r\n"},{"author":"CohenCyril","date":"2021-12-08T23:41:33Z","comment":"FYI\r\n- removed useless `setC1E` (it is convertible and `inE` yields the same result)\r\n- removed `mem_setC_subset` which was a duplicate of `setC_subset_set1C`\r\n- generalized and renamed the latter to `subsetC1`\r\n- removed all uses of `-in_setE`"}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":436,"state":"closed","open_date":"2021-09-22T16:33:12Z","update_date":"2021-09-22T16:46:06Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":435,"state":"closed","open_date":"2021-09-22T02:46:59Z","update_date":"2022-03-02T16:17:48Z","discussion":[{"author":"CohenCyril","date":"2022-02-26T14:16:03Z","comment":"Closed by #543"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":434,"state":"closed","open_date":"2021-09-21T04:09:13Z","update_date":"2021-11-07T02:48:05Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"CohenCyril","number":433,"state":"closed","open_date":"2021-09-20T12:47:08Z","update_date":"2021-09-20T13:12:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":432,"state":"closed","open_date":"2021-09-20T10:47:33Z","update_date":"2021-09-21T08:17:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":430,"state":"closed","open_date":"2021-09-19T03:16:24Z","update_date":"2021-09-21T17:02:41Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":429,"state":"closed","open_date":"2021-09-18T08:51:39Z","update_date":"2021-09-18T10:27:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":428,"state":"closed","open_date":"2021-09-07T10:56:58Z","update_date":"2021-09-20T14:02:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":427,"state":"closed","open_date":"2021-09-03T15:17:33Z","update_date":"2021-09-20T13:56:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":425,"state":"closed","open_date":"2021-09-02T07:19:46Z","update_date":"2021-09-21T03:02:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":424,"state":"closed","open_date":"2021-08-30T09:58:45Z","update_date":"2021-09-20T13:52:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":422,"state":"closed","open_date":"2021-08-27T11:15:03Z","update_date":"2021-09-20T13:20:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":421,"state":"closed","open_date":"2021-08-26T14:50:05Z","update_date":"2021-09-20T13:30:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":420,"state":"closed","open_date":"2021-08-21T07:25:34Z","update_date":"2021-09-20T13:53:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":418,"state":"closed","open_date":"2021-08-21T07:18:08Z","update_date":"2021-09-20T13:53:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":417,"state":"closed","open_date":"2021-08-21T06:44:32Z","update_date":"2021-08-30T09:39:53Z","discussion":[{"author":"CohenCyril","date":"2021-08-21T08:41:39Z","comment":"@affeldt-aist is `seqD` still useful in the presence of `seqDU`, doesn't the latter subsume the former?"},{"author":"affeldt-aist","date":"2021-08-21T09:18:31Z","comment":"> @affeldt-aist is `seqD` still useful in the presence of `seqDU`, doesn't the latter subsume the former?\r\n\r\nThey are the same for non-decreasing sequences wrt inclusion which indeed suggest this simplification\r\nbut I could not figure out quickly how to clean seqD proofs, and since both sequences are anyway used\r\nin paper proofs I thought that for the time being it could be enough to put them in the same file, keep an eye\r\non them and come back to factorization when revising the proofs using seqDU, which should happen soon. \r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":416,"state":"closed","open_date":"2021-08-15T09:17:03Z","update_date":"2021-09-20T12:21:03Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":414,"state":"closed","open_date":"2021-08-12T05:59:14Z","update_date":"2021-09-20T13:53:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":412,"state":"closed","open_date":"2021-08-11T01:26:30Z","update_date":"2021-09-20T13:53:07Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ybertot","number":411,"state":"closed","open_date":"2021-07-29T14:08:57Z","update_date":"2021-09-28T14:31:59Z","discussion":[{"author":"CohenCyril","date":"2021-07-29T15:34:56Z","comment":"Hi @ybertot, I do not understand what 793badc are 3aa4fe5 doing here. Did I miss something?"},{"author":"ybertot","date":"2021-07-30T06:19:30Z","comment":"I don't understand either.  I did a rebase, and all of a sudden these commits were included in the branch.  Maybe I goofed one of my rebase, and then I had to do force push, but people usually have to do a force push after a rebase, so that you are really working without a safety net at this point.\r\n\r\nMaybe the solution will be to remake the branch from scratch and cherry-pick the commits.  I am not too fluent, but I may be able to repair that."},{"author":"CohenCyril","date":"2021-07-30T07:50:26Z","comment":"> I did a rebase, and all of a sudden these commits were included in the branch.\r\n\r\nWell, it looks like you rebased master on top of `is_itv` and then added a commit..."},{"author":"ybertot","date":"2021-07-30T08:18:24Z","comment":"should be fixed now."},{"author":"affeldt-aist","date":"2021-07-30T08:52:03Z","comment":"> OK, I'm 100% of the benefits of this change.\r\n> @affeldt-aist do you agree?\r\n\r\nYes, no problem."}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":410,"state":"closed","open_date":"2021-07-26T03:16:19Z","update_date":"2021-12-20T15:01:45Z","discussion":[{"author":"CohenCyril","date":"2021-07-28T10:03:42Z","comment":"This is really nice, and now you tried the ultrafilter seems like a sensible default choice, I wanted a definition where a set X could be \"open in A\" iff ``X `&` A`` is: so great! Could you expand on the problems you encountered with the subspace entourage? I am curious whether this could give insight on better ways to phrase it. (BTW a variation could be to write ``(A `*` A) xy`` instead of `A xy.1 /\\ A xy.2`.)\r\n\r\nAs for the location, I am in favor of adding it to `topology.v`."},{"author":"zstone1","date":"2021-07-28T16:32:00Z","comment":"My main complaint about `subspace_ent` is that I was hoping ` subspace_ent := within (A `*` A) entourage` would work. And that the proof of `(nbhs_  subspace_ent = subspace_nbhs)` would go smoother. What I have now is ok, but that proof was kinda nasty. Certainly not a blocking issue, but I was a little surprised how much entourage proofs were more difficult than the metric proofs. If you have an epiphany, that'd be great. Otherwise I'm ok to submit the current definition of `subspace_ent`. "},{"author":"zstone1","date":"2021-07-28T17:16:58Z","comment":"~~Oops, borked the commits. Hold on.~~ Ok, everything now moved to topology.v"},{"author":"CohenCyril","date":"2021-07-29T20:32:52Z","comment":"The name `inclusion` is too generic IMO...\r\nMaybe something like `in_subspace`?\r\nCould you also uncapitalize `Subspace`?"},{"author":"zstone1","date":"2021-11-10T23:14:49Z","comment":"Just for the record, I'm working on these style changes you suggested. I'll post a more compatible revision soon. "},{"author":"CohenCyril","date":"2021-11-18T10:17:24Z","comment":"Unless there is a particular reason for separating the commits (in which case please explain), it's a better practice to squash your commits, it makes rebasing easier."},{"author":"CohenCyril","date":"2021-12-15T18:05:20Z","comment":"@affeldt-aist I wouldn't mind one last look before merging."},{"author":"affeldt-aist","date":"2021-12-17T03:48:23Z","comment":"I found a few minor issues and propose at least to rename X : topologicalType to T : topologicalType (because we have been using R, S, T, U, ... for topologicalType mostly so far, on the other hand we have been using X : set T---yet, I do not go as far as to not use U, V for sets because in the context of topology they look like often used notations to me)."},{"author":"zstone1","date":"2021-12-17T15:41:36Z","comment":"Looks good to me. Renaming `X --> T` does improve consistency with the rest of the file.  "},{"author":"affeldt-aist","date":"2021-12-19T08:00:02Z","comment":"then let's squash and merge..."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":409,"state":"closed","open_date":"2021-07-22T08:13:52Z","update_date":"2021-07-29T10:00:00Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":407,"state":"closed","open_date":"2021-07-14T12:27:06Z","update_date":"2021-09-20T13:53:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":406,"state":"closed","open_date":"2021-07-13T02:16:25Z","update_date":"2021-07-14T01:31:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":405,"state":"closed","open_date":"2021-07-13T01:46:55Z","update_date":"2021-07-19T00:58:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":404,"state":"closed","open_date":"2021-07-12T07:08:01Z","update_date":"2022-03-07T15:53:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":403,"state":"closed","open_date":"2021-07-12T06:59:36Z","update_date":"2021-09-18T08:34:36Z","discussion":[{"author":"CohenCyril","date":"2021-07-27T22:25:16Z","comment":"A comment about what goes wrong when unlocked?"},{"author":"affeldt-aist","date":"2021-07-29T08:14:33Z","comment":"> A comment about what goes wrong when unlocked?\r\n\r\nThe detail that prompted me to lock is that otherwise  `/=` simplifies it even under bigops given difficult-to-read formulas on the screen. I guess we did not bother for other arithmetic operations so far because they are more simple."},{"author":"CohenCyril","date":"2021-07-29T08:18:16Z","comment":"> > A comment about what goes wrong when unlocked?\r\n> \r\n> The detail that prompted me to lock is that otherwise `/=` simplifies it even under bigops given difficult-to-read formulas on the screen. I guess we did not bother for other arithmetic operations so far because they are more simple.\r\n\r\nOk, lock is not made for that, only for kernel / unification inefficiences.\r\nPlease try `nosimpl` instead:\r\n```coq\r\nDefinition mule_subdef := <the definition of multiplication>\r\n\r\nDefinition mule := nosimpl mule_subdef.\r\n```\r\n"},{"author":"affeldt-aist","date":"2021-08-20T06:17:19Z","comment":"> Sorry for the delayed review. This looks great!\r\n> (I had some doubts at first because in floating-point arithmetic oo x 0 yields a NaN and not 0, but that's quite moral, the 0 of floats meaning \"a tiny value\" whereas here 0 is exactly 0)\r\n\r\nthank you very much, I addressed your comments, there were all to the point\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":402,"state":"closed","open_date":"2021-07-12T02:19:30Z","update_date":"2021-07-27T11:54:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":401,"state":"closed","open_date":"2021-06-28T07:01:19Z","update_date":"2021-07-29T10:10:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":399,"state":"closed","open_date":"2021-06-22T14:09:15Z","update_date":"2021-07-19T00:52:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":398,"state":"closed","open_date":"2021-06-22T11:38:51Z","update_date":"2022-04-04T14:32:29Z","discussion":[{"author":"proux01","date":"2022-04-04T13:28:46Z","comment":"Closing as this is superseeded by https://github.com/math-comp/algebra-tactics/pull/54"}],"tags":[],"pull_requests":[]},{"author":"zstone1","number":397,"state":"closed","open_date":"2021-06-18T21:53:53Z","update_date":"2022-06-06T12:41:50Z","discussion":[{"author":"zstone1","date":"2022-06-06T12:41:49Z","comment":"This was successfully broken into smaller changes and dramatically improved. All those changes have been merged, so this is now redundant."}],"tags":[],"pull_requests":[]},{"author":"t6s","number":396,"state":"open","open_date":"2021-06-18T01:54:31Z","update_date":"2023-03-15T15:05:48Z","discussion":[{"author":"CohenCyril","date":"2021-06-18T07:16:40Z","comment":"You might find this relevant: https://github.com/math-comp/newtonsums/pull/2\r\nCC: @hivert \r\n"},{"author":"hivert","date":"2021-06-18T08:56:34Z","comment":"@CohenCyril  Thanks for mentioning me. Concerning power series, if you only want the formal side I've a fairly developed code on https://github.com/hivert/FormalPowerSeries. It is largely based on Cyril's newtonsums which only dealt with truncated power series. In my code I've 2*3 differents proof for the formula for Catalan numbers. The first series uses truncated power series, the second one normal powerseries. The later are formalized as inverse limits of truncated thanks to the classical axioms of analysis. For two series, I've formalised 3 proof (generalized newton formula, lagrange inversion and differential holonomic equation). I wanted to compare how much work is required by using only truncated power series (constructive, no axioms).\r\n\r\nAs usual with me, it is work in progress and nothing is published...\r\n"}],"tags":[{"tag":"experiment :test_tube:","description":"This issue/PR is very experimental"}],"pull_requests":[]},{"author":"affeldt-aist","number":395,"state":"closed","open_date":"2021-06-17T14:56:50Z","update_date":"2021-08-04T21:24:13Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":394,"state":"closed","open_date":"2021-06-17T13:57:01Z","update_date":"2021-06-22T13:54:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":393,"state":"closed","open_date":"2021-06-17T07:25:57Z","update_date":"2021-06-22T13:54:23Z","discussion":[{"author":"CohenCyril","date":"2021-06-17T07:58:25Z","comment":"We could also have had `Definition image_def A f := ...` and `Notation image f A := (image_def A f)` :)"},{"author":"proux01","date":"2021-06-17T11:12:55Z","comment":"Thanks!"},{"author":"affeldt-aist","date":"2021-06-17T11:15:41Z","comment":"> We could also have had `Definition image_def A f := ...` and `Notation image f A := (image_def A f)` :)\r\n\r\nIn our case, we were using `image` in the expression `@image`. Would this notation fit this role?"},{"author":"CohenCyril","date":"2021-06-17T14:26:13Z","comment":"> > We could also have had `Definition image_def A f := ...` and `Notation image f A := (image_def A f)` :)\r\n> \r\n> In our case, we were using `image` in the expression `@image`. Would this notation fit this role?\r\n\r\nno"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":392,"state":"closed","open_date":"2021-06-17T02:37:20Z","update_date":"2021-06-17T07:12:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":391,"state":"closed","open_date":"2021-06-14T04:08:06Z","update_date":"2021-06-25T02:24:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":390,"state":"closed","open_date":"2021-06-14T00:45:39Z","update_date":"2021-06-17T07:12:46Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":389,"state":"closed","open_date":"2021-06-11T15:03:27Z","update_date":"2021-06-11T15:38:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":388,"state":"closed","open_date":"2021-06-10T15:31:23Z","update_date":"2021-06-17T07:08:35Z","discussion":[{"author":"CohenCyril","date":"2021-06-10T20:02:21Z","comment":"I would keep the function first, could you tell me why you picked the other order of arguments?"},{"author":"proux01","date":"2021-06-10T20:06:59Z","comment":"It works better for type inference. I don't know whether it is such a fundamental thing or just the result of the previous notation that was written in that order (`exists2 x, A x & f x = y` rather than `exists2 x, f x = y & A x`) though."},{"author":"affeldt-aist","date":"2021-06-11T09:07:45Z","comment":"Would it be ok to merge this and make a minor release of MathComp-Analysis?"},{"author":"affeldt-aist","date":"2021-06-17T01:15:42Z","comment":"Hasn't the order of the arguments of `image` change from 0.3.7? (I noticed late because I only tested infotheo, not monae that is built on top of it and which is referencing the `image` identifier directly.)"},{"author":"proux01","date":"2021-06-17T07:03:18Z","comment":"Yes, c.f. the discussion in #388 . The ` [set E | x in A]` notation was written as `exists2 x, A x & f x = y` and the order `image A f` enabled to get similar type inference results. With the previous order `image f A`, quite a few extra type casts were needed to make analysis itself compile."},{"author":"CohenCyril","date":"2021-06-17T07:08:34Z","comment":"I did not think enough about this. We should at least document the breaking change."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":387,"state":"closed","open_date":"2021-06-09T07:24:25Z","update_date":"2021-06-17T07:12:45Z","discussion":[{"author":"affeldt-aist","date":"2021-06-14T01:47:03Z","comment":"I've changed the `seriesZr` substrings in the identifiers to `seriesZ`. Using `Zr` was stemming from `limZr`\r\nbut here it is a bit surprising and `Z` only looks more natural."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":386,"state":"closed","open_date":"2021-06-04T09:12:04Z","update_date":"2021-06-11T09:08:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ybertot","number":385,"state":"closed","open_date":"2021-06-02T14:32:54Z","update_date":"2021-10-13T11:53:42Z","discussion":[{"author":"thery","date":"2021-06-02T22:59:00Z","comment":"I am looking for the inverse of `ln` and I need something like : \r\n```\r\nLemma continuous_inverse (f g : R -> R) x :  \r\n  (\\forall z \\near x, g (f z) = z)  ->\r\n  (\\forall z \\near x, {for z, continuous f})  ->\r\n  {for f x, continuous g}.\r\n```\r\nAny idea how this could be proved? I think we are almost there with your theorem.\r\nWhat we are missing is just than a continuous injective function `f` is either strictly increasing or strictly decreasing. "},{"author":"thery","date":"2021-06-03T05:51:30Z","comment":"Great! Do you think it would be possible to prove the generic lemma once and forall and not have\r\nto prove the increasing bit for each injective continuous function?"},{"author":"ybertot","date":"2021-06-30T11:05:02Z","comment":"The failures seem to be unrelated  to the content of the PR?  Is it possible to restart the compilation?"},{"author":"thery","date":"2021-07-05T11:24:50Z","comment":"Maybe an alternative formulation of the ffrst theorem is :\r\n```\r\n{near a, injective f} ->\r\n(near a, continuous f} ->\r\n{near a, {mono f : x y / x <= y}} \\/ {near a, {mono f : x y /~ x <= y}}\r\n```"},{"author":"CohenCyril","date":"2021-07-05T14:35:45Z","comment":"> Maybe an alternative formulation of the ffrst theorem is :\r\n> \r\n> ```\r\n> {near a, injective f} ->\r\n> (near a, continuous f} ->\r\n> {near a, {mono f : x y / x <= y}} \\/ {near a, {mono f : x y /~ x <= y}}\r\n> ```\r\n\r\nNo, this lemma would be less general, the naming is wrong, not the statement."},{"author":"CohenCyril","date":"2021-07-05T14:37:05Z","comment":"> > Maybe an alternative formulation of the ffrst theorem is :\r\n> > ```\r\n> > {near a, injective f} ->\r\n> > (near a, continuous f} ->\r\n> > {near a, {mono f : x y / x <= y}} \\/ {near a, {mono f : x y /~ x <= y}}\r\n> > ```\r\n> \r\n> No, this lemma would be less general, the naming is wrong, not the statement.\r\n\r\nOf course, we could/should also have the \"near version\", which should be an almost trivial specialization of the one on a segment."},{"author":"thery","date":"2021-07-05T16:32:49Z","comment":"> I think the lemmas with `\\/` are difficult to use, we should also provide the two alternatives for each: one with hypothesis `f a <= f b` and one with `f a >= f b`.\r\n\r\nThis is the way the actual proof works, It proves f a <= f b and then prove the other taking -f"},{"author":"CohenCyril","date":"2021-07-05T16:33:28Z","comment":"> > I think the lemmas with `\\/` are difficult to use, we should also provide the two alternatives for each: one with hypothesis `f a <= f b` and one with `f a >= f b`.\r\n> \r\n> This is the way the actual proof works, It proves f a <= f b and then prove the other taking -f\r\n\r\nI know ;)"},{"author":"thery","date":"2021-07-05T16:49:08Z","comment":"so stating the two alternatives before should simplify the proof."},{"author":"thery","date":"2021-07-08T23:22:23Z","comment":"Here is the other proof I need\r\n\r\n```\r\nLemma inverse_swap_continuous  (f g : R -> R) (x : R) :\r\n  {near x, cancel f g} -> {near x, continuous f} -> {near (f x), cancel g f}.\r\nProof.\r\nmove=> [e egt0 fK] [e' e'gt0 ctf].\r\nset e'' := Num.min e e' / 2.\r\nhave e''gt0 : 0 < e''.\r\n  by apply: divr_gt0; [rewrite /Num.min; case: ifP | rewrite ltr0Sn].\r\nhave [e''lte e''lte'] : e'' < e /\\ e'' < e'.\r\n  have e''lt2 : e'' < e'' + e'' by rewrite ltr_addl //.\r\n  rewrite !(lt_le_trans e''lt2) // /e'' -mulrDl (le_trans (midf_le _).2) //;\r\n    by case: (lerP e e') => // strict; rewrite ltW.\r\nhave fK' : {in `[x - e'', x + e''], cancel f g}.\r\n  move=> y; rewrite in_itv /= => /andP [yin1 yin2]; apply: fK=> /=.\r\n  rewrite -opprB normrN real_ltr_distl ?num_real // (lt_le_trans _ yin1) /=.\r\n    by rewrite (le_lt_trans yin2) // ltr_add2.\r\n  by rewrite ltr_add2 ltr_oppl opprK.\r\nhave ctf' : {in `[x - e'', x + e''], continuous f}.\r\n  move=> y; rewrite in_itv /= => /andP [yin1 yin2]; apply: ctf => /=.\r\n  rewrite -opprB normrN real_ltr_distl ?num_real // (lt_le_trans _ yin1) /=.\r\n    by rewrite (le_lt_trans yin2) // ltr_add2.\r\n  by rewrite ltr_add2 ltr_oppl opprK.\r\nhave cmp1 : x - e'' < x by rewrite ltr_subl_addr ltr_addl.\r\nhave cmp2 : x < x + e'' by rewrite ltr_addl.\r\nhave cmp : x - e'' < x + e'' by rewrite (lt_trans cmp1).\r\nhave ifx : If f (x - e'') (x + e'').\r\n  by move=> v w vin win fq; rewrite -(fK' v) // fq fK'.\r\nhave [mfx |mfx] := segment_injective_monotone ifx ctf'.\r\n  near=> z.\r\n  apply: interval_injective_continuous_bijective _ ctf' _ _ _ _ => //.\r\n  apply: strict_to_large_itv.\r\n  near: z; rewrite near_simpl; apply: near_in_interval.\r\n  by rewrite in_itv /= !(ltNge, mfx, in_itv) /= -?ltNge ?(lexx, cmp1, ltW).\r\nnear=> y; suff : ((f \\o -%R) \\o -g) y = y by rewrite /= opprK.\r\nhave ctNf' : {in `[ (- x) - e'', (-x) + e''], continuous (f \\o -%R)}.\r\n  move=> z /itvP zI; apply: continuous_comp; first by apply: continuousN.\r\n  apply: ctf'.\r\n  by rewrite in_itv /= lter_oppr opprD opprK zI lter_oppl opprD zI.\r\napply: interval_injective_continuous_bijective _ ctNf' _ _ _ _.\r\n- by rewrite -opprD lter_oppl opprD opprK.\r\n- move=> z1 z2 /itvP z1I /itvP z2I.\r\n  by rewrite mfx // 1?lter_oppl ?opprK // in_itv /= lter_oppl lter_oppr !opprD\r\n             opprK ?(z1I, z2I).\r\n- move=> z /itvP zI; rewrite -[RHS](opprK z); congr (- _).\r\n  apply: fK'.\r\n  by rewrite in_itv /= lter_oppr opprD opprK zI lter_oppl opprD zI.\r\napply: strict_to_large_itv.\r\nnear: y; rewrite near_simpl; apply: near_in_interval.\r\nrewrite in_itv /= !(opprD, opprK).\r\nby rewrite !(ltNge, mfx, in_itv) /= -?ltNge ?(lexx, cmp2) // ltW // ltW.\r\nGrab Existential Variables. all:end_near. Qed.\r\n```\r\n"},{"author":"CohenCyril","date":"2021-07-13T08:04:09Z","comment":"I think all the shorthands that appear in statements should be removed from statements: I find `If`, `Cf`, and `Mf` unreadable. Please replace them by the body of the let in..."},{"author":"ybertot","date":"2021-07-13T09:14:21Z","comment":"I did the replacement of If Cf and Mf, but only in main statements.  Inside proofs, I kept them.  Is that ok?\r\n"},{"author":"thery","date":"2021-07-29T10:18:14Z","comment":"is it ready to merge?"},{"author":"ybertot","date":"2021-07-30T06:21:05Z","comment":"@CohenCyril you requested changes long ago, and I think they were made, can you check?"},{"author":"CohenCyril","date":"2021-08-04T14:42:04Z","comment":"@ybertot there are several naming problems, ordering of lemmas and too strong hypotheses here and there. I take the lock on this PR, please do not touch anything yet."},{"author":"CohenCyril","date":"2021-08-04T21:57:51Z","comment":"I will stop there for now... It needs a second pass to create `realfun.v`, dispatch various lemmas (including backports to mathcomp) where they belong and double check their names. There still are some generalizations to make on some auxiliary lemmas. Also the changelog must be update.\r\n@ybertot if you feel like doing it...\r\n"},{"author":"thery","date":"2021-09-16T09:45:11Z","comment":"@ybertot  @CohenCyril news?\r\n"},{"author":"ybertot","date":"2021-09-17T08:37:37Z","comment":"I had a direct discussion with @CohenCyril.  I won't be able to work on this PR before October."},{"author":"affeldt-aist","date":"2021-09-27T00:58:31Z","comment":"> including backports to mathcomp\r\n\r\n`ltr_distlC`, `ler_distlC`, `subset_itv_oo_cc`, `itvxx`, `itvxxP` backported to MathComp\r\n(PR: https://github.com/math-comp/math-comp/pull/791)\r\n"},{"author":"affeldt-aist","date":"2021-10-01T12:28:35Z","comment":"> I will stop there for now... It needs a second pass to create `realfun.v`, dispatch various lemmas (including backports to mathcomp) where they belong and double check their names. There still are some generalizations to make on some auxiliary lemmas. Also the changelog must be update. @ybertot if you feel like doing it...\r\n\r\nI did some work in this direction but I have to stop for now.\r\n\r\n"},{"author":"thery","date":"2021-10-12T08:10:16Z","comment":"@affeldt-aist @ybertot @CohenCyril what is left to be done?"},{"author":"affeldt-aist","date":"2021-10-12T09:28:06Z","comment":"> @affeldt-aist @ybertot @CohenCyril what is left to be done?\r\n\r\nLast time I checked there were still lemmas to be put in better locations. I go back to it  right now."},{"author":"affeldt-aist","date":"2021-10-12T14:32:31Z","comment":"> > @affeldt-aist @ybertot @CohenCyril what is left to be done?\r\n> \r\n> Last time I checked there were still lemmas to be put in better locations. I go back to it right now.\r\n\r\nWe did a bit of cleaning with @thery .\r\n\r\nWhat about merging? @CohenCyril \r\n\r\n@ybertot Is it ok to squash some contiguous commits before merging?"},{"author":"ybertot","date":"2021-10-12T15:02:31Z","comment":"I trust you all on every operations that can be made on this commit.  Do you need me for sth?  I am busy with conference reviewing just now."},{"author":"affeldt-aist","date":"2021-10-12T15:53:41Z","comment":"> Do you need me for sth?\r\n\r\nNo, I think we are almost done. \r\n\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":384,"state":"closed","open_date":"2021-06-01T09:03:34Z","update_date":"2021-06-01T09:31:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"thery","number":383,"state":"closed","open_date":"2021-06-01T00:36:16Z","update_date":"2021-12-23T10:21:18Z","discussion":[{"author":"thery","date":"2021-06-01T01:07:08Z","comment":"Don't understand why the CI fails, it works on my machine. \r\nI cannot do a `Require Import Nsatz` because there is a Notation clash on `-->` \r\nbut the tactic should be there\r\n\r\nFixed"},{"author":"CohenCyril","date":"2021-06-01T07:06:08Z","comment":"Looks really promising to me :) "},{"author":"thery","date":"2021-07-08T23:26:28Z","comment":"This PR depends on #385. As soon as it is merged we can remove the file `inverse_continuous.v`"},{"author":"affeldt-aist","date":"2021-09-24T00:19:44Z","comment":"Should we try to submit `sqrtrV` and `divr_eq` to MathComp before its 1.13 release?"},{"author":"thery","date":"2021-10-14T09:34:44Z","comment":"@affeldt-aist what is left to be done?"},{"author":"affeldt-aist","date":"2021-10-14T09:38:41Z","comment":"> @affeldt-aist what is left to be done?\r\n\r\nI think it is mostly about putting the lemmas in the right files."},{"author":"thery","date":"2021-10-14T12:44:59Z","comment":"is it normal the CI does not make it to build big_enough?\r\n"},{"author":"CohenCyril","date":"2021-10-14T12:48:59Z","comment":"> is it normal the CI does not make it to build big_enough?\r\n\r\nI'm clueless, I've been banging my head on it since this morning in another repo...\r\nhttps://github.com/math-comp/Abel/pull/71/checks?check_run_id=3894379682"},{"author":"thery","date":"2021-10-17T20:15:04Z","comment":"can't figure out with 8.11 is failing on topology at ligne 620."},{"author":"thery","date":"2021-10-18T11:16:17Z","comment":"Almost there. @affeldt-aist  if you can have a look I haven´t messed up things after my moving around and renaming"},{"author":"thery","date":"2021-10-18T11:38:29Z","comment":"the CI seems very unstable I get some timeout\r\n"},{"author":"thery","date":"2021-10-21T13:14:43Z","comment":"@erikmd there is a timeout in the CI for the resolution of opam constrains. Would it be possible to have a more recent version of opam associated with the dockerimage (@gares says the solver that comes with 2.1 is much better)"},{"author":"gares","date":"2021-10-21T14:22:31Z","comment":"FTR: https://github.com/ocaml/opam/issues/4495"},{"author":"thery","date":"2021-10-21T14:25:34Z","comment":"they propose to install `z3`, life is tough!"},{"author":"affeldt-aist","date":"2021-12-21T14:24:15Z","comment":"I made a last pass and hopefully addressed comments from the last meeting. Ready to merge."},{"author":"CohenCyril","date":"2021-12-22T20:02:45Z","comment":"45 commits :cry: "},{"author":"CohenCyril","date":"2021-12-22T20:04:32Z","comment":"> 45 commits cry\r\n\r\nnext time, please squash"},{"author":"thery","date":"2021-12-22T20:41:20Z","comment":"@CohenCyril can't we configure github so that it automatically squashes merge?"},{"author":"CohenCyril","date":"2021-12-22T21:18:29Z","comment":"> @CohenCyril can't we configure github so that it automatically squashes merge?\r\n\r\nNot that I know of..."},{"author":"thery","date":"2021-12-22T21:25:13Z","comment":"@CohenCyril it seems it is possible : \r\nhttps://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/configuring-commit-squashing-for-pull-requests"},{"author":"affeldt-aist","date":"2021-12-22T22:51:16Z","comment":"Note that several contiguous commits were actually squashed before merge (commits that were just minor fixes or that were actually incremental progress)."},{"author":"thery","date":"2021-12-23T10:21:18Z","comment":"@CohenCyril it seems it is possible : \r\nhttps://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/configuring-commit-squashing-for-pull-requests"}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":381,"state":"closed","open_date":"2021-05-21T15:14:53Z","update_date":"2021-06-01T09:19:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":380,"state":"closed","open_date":"2021-05-14T11:21:51Z","update_date":"2021-06-01T08:50:10Z","discussion":[{"author":"affeldt-aist","date":"2021-05-27T10:54:52Z","comment":"I take the opportunity of this conversation to ask a related question. Given the exponential function defined as:\r\n```\r\nDefinition exp (x : R) : R := lim (series (exp_coeff x)).\r\n```\r\nHow to define the natural logarithm? What is better than the following?\r\n```\r\nDefinition ln (R : realType) (x : R) :=\r\n  if pselect (exists y, exp y = x) is left e then projT1 (cid e) else 0.\r\n```\r\n@CohenCyril "},{"author":"affeldt-aist","date":"2021-05-30T04:42:54Z","comment":"Is it ok to merge this as it is for 0.3.8 and come back to it later? @CohenCyril @thery "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":379,"state":"closed","open_date":"2021-05-11T07:26:30Z","update_date":"2021-06-01T08:50:26Z","discussion":[{"author":"affeldt-aist","date":"2021-05-21T15:13:54Z","comment":"oops, I pushed by mistake to master https://github.com/math-comp/analysis/commit/bdf276666be6679a9f6cc0842961d2e15fa7694c which corresponds to one commit of this PR,\r\nI think it is harmless because it is just removal of duplicated things and git will just skip the patch when merging"},{"author":"affeldt-aist","date":"2021-05-28T10:29:23Z","comment":"This is really just to avoid a clash in coq-robot @CohenCyril "},{"author":"CohenCyril","date":"2021-05-28T10:45:32Z","comment":"OK. Can you rename it to `symmetric_form` instead?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":378,"state":"closed","open_date":"2021-05-09T09:45:31Z","update_date":"2022-02-09T09:15:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":377,"state":"closed","open_date":"2021-05-07T09:53:59Z","update_date":"2021-05-12T03:01:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":376,"state":"closed","open_date":"2021-05-06T10:13:40Z","update_date":"2021-06-11T16:34:22Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":375,"state":"closed","open_date":"2021-05-04T15:19:17Z","update_date":"2022-03-22T15:44:00Z","discussion":[{"author":"CohenCyril","date":"2021-05-04T15:32:56Z","comment":"I have a version, in one of my workdirs that is supposed to cover everything (non negative, negative, positive, non positive, extended or not, symmetric on multiplication). I just did not have time to finish it :'(\r\nMeanwhile, I do not mind having several copies."},{"author":"CohenCyril","date":"2022-01-09T18:14:45Z","comment":"> I have a version, in one of my workdirs that is supposed to cover everything (non negative, negative, positive, non positive, extended or not, symmetric on multiplication). I just did not have time to finish it :'(\r\n> Meanwhile, I do not mind having several copies.\r\n\r\ncf #511 "},{"author":"proux01","date":"2022-01-11T12:31:30Z","comment":"Thanks, I'll rebase on top of it."},{"author":"CohenCyril","date":"2022-01-11T15:37:29Z","comment":"> Thanks, I'll rebase on top of it.\r\n\r\nDo you understand how to do it with minimal duplication?\r\nDo you want to chat for a few minutes?"},{"author":"proux01","date":"2022-01-11T15:44:57Z","comment":"I hope so. I'll ask if I run into trouble (but if I understand correctly, that should mostly be a few canonical instances and a spec inductive with two cases (+oo or non negative real))."},{"author":"CohenCyril","date":"2022-01-11T16:09:56Z","comment":"> I hope so. I'll ask if I run into trouble (but if I understand correctly, that should mostly be a few canonical instances and a spec inductive with two cases (+oo or non negative real)).\r\n\r\nI expect that most (if not all) `*_(nonzero|reality)_subdef` can be reused as such and that their should be exactly one `operator_snum_subproof` to add and the corresponding canonical, per new supported operation (`0`, `1`, `+oo`, `-oo`, negation, addition, multiplication, etc)."},{"author":"CohenCyril","date":"2022-01-11T16:10:33Z","comment":"> spec inductive with two cases (+oo or non negative real)).\r\n\r\nI do not understand this bit..."},{"author":"proux01","date":"2022-01-11T16:21:16Z","comment":"> > spec inductive with two cases (+oo or non negative real)).\r\n> \r\n> I do not understand this bit...\r\n\r\nSomething similar to nonneg_spec in #511"},{"author":"proux01","date":"2022-03-05T18:51:59Z","comment":"Rebased and ready for review (this is mostly a bunch of canonical instances)."}],"tags":[],"pull_requests":[]},{"author":"proux01","number":374,"state":"closed","open_date":"2021-05-04T15:14:43Z","update_date":"2021-11-05T07:42:51Z","discussion":[{"author":"CohenCyril","date":"2021-05-04T15:21:41Z","comment":"I'd rather keep extended reals a commutative monoid (which was the case before this PR), this is crucial for taking maximal advantage of bigops."},{"author":"proux01","date":"2021-05-04T15:22:45Z","comment":"I fully agree, this PR doesn't change anything about extended reals, just offers dual extended reals where -oo++oo = +oo instead of -oo."},{"author":"CohenCyril","date":"2021-05-04T15:30:12Z","comment":"Sorry, I misunderstood your original post and did not open the diff. It seems reasonable to me although:\r\n- I cannot foresee a use yet (could you point me towards a concrete example)\r\n- I would not integrate this within the same scope and same names. We could use for example `%dE` (for \"dual Extended\") an the names could be prefixed with `dual_`?\r\n"},{"author":"CohenCyril","date":"2021-05-04T15:31:03Z","comment":"Also, I would integrate it within `ereal.v`"},{"author":"proux01","date":"2021-05-04T16:11:54Z","comment":"> * I cannot foresee a use yet (could you point me towards a concrete example)\r\n\r\nWe use it in a formalization of Network Calculus (a static analysis for networks, used to certify embedded networks in civil aircrafts) that is based on min-plus algebra. Sorry, can't share the code yet due to licencing issues (hope to finally fix that in the coming weeks).\r\n\r\n> * I would not integrate this within the same scope and same names. We could use for example `%dE` (for \"dual Extended\") an the names could be prefixed with `dual_`?\r\n\r\nWould indeed make sense to enable mix use of both regular and dual versions (no idea if that can arise though).\r\n"},{"author":"CohenCyril","date":"2021-05-04T16:21:50Z","comment":"> Would indeed make sense to enable mix use of both regular and dual versions (no idea if that can arise though).\r\n\r\nI think it can... and I forgot about providing correspondance lemmas under the negation `add_undef` precondition.\r\n(Although we might very well switch to `add_def` as per #365)"},{"author":"proux01","date":"2021-05-06T15:15:52Z","comment":"@CohenCyril all your comments should be taken into account."},{"author":"proux01","date":"2021-08-13T11:02:12Z","comment":"This is rebased on top of #403, `dual_mule` disappeared since it is now the same as `mule`."},{"author":"proux01","date":"2021-09-28T08:41:03Z","comment":"Just rebased this on top of master now that #403 is merged."},{"author":"proux01","date":"2021-09-29T14:40:42Z","comment":"@CohenCyril all notation seem to work properly (for instance `x + y <= -(x + y))%dE` uses dual_adde as expected and prints back identically), I just spotted an omission int the bigop notations and `+?` was missing in `ereal_dual_scope`. "},{"author":"proux01","date":"2021-10-29T08:57:03Z","comment":"@CohenCyril I'd like to rebase this on top of #459 once it is merged (to add lemmas about mine, the dual of maxe)"},{"author":"CohenCyril","date":"2021-10-29T23:27:34Z","comment":"> @CohenCyril I'd like to rebase this on top of #459 once it is merged (to add lemmas about mine, the dual of maxe)\r\n\r\nSure. I also think that the new convention is to use `forall x : \\bar R, x \\in fin_num -> P x` rather than `forall r : R, P r%:E`.\r\nI also think theorems about dual ereal should be encapsulated in a submodule and imported on demand."},{"author":"proux01","date":"2021-11-02T16:11:01Z","comment":"Indeed, done, this should now be ready.\r\n\r\nBTW, this dual add thing is used there: https://gitlab.mpi-sws.org/proux/nc-coq\r\nI wanted to do opam and nix packages for CI when I realized I'm still using dioid master that relies on a nasty hack to use HB on top of current MC https://github.com/math-comp/dioid/blob/master/HB_wrappers.v . So I should probably wait for MC 2.0."},{"author":"proux01","date":"2021-11-04T17:06:33Z","comment":"rebased"},{"author":"proux01","date":"2021-11-05T07:42:48Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":373,"state":"closed","open_date":"2021-05-04T14:58:12Z","update_date":"2021-05-04T16:34:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":372,"state":"closed","open_date":"2021-05-04T14:24:01Z","update_date":"2021-05-04T15:20:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":371,"state":"closed","open_date":"2021-05-03T15:48:36Z","update_date":"2022-02-26T14:15:23Z","discussion":[{"author":"pi8027","date":"2021-05-26T05:40:49Z","comment":"Here is a patch I propose (context: https://github.com/math-comp/math-comp/pull/732#discussion_r639371183):\r\n```patch\r\nFrom 46158eb46e2ab033884151726c6dbbd9233b1e24 Mon Sep 17 00:00:00 2001\r\nFrom: Kazuhiko Sakaguchi <pi8027@gmail.com>\r\nDate: Wed, 26 May 2021 14:37:16 +0900\r\nSubject: [PATCH] normrzE\r\n\r\n---\r\n theories/measure_wip.v | 29 +++++++++++------------------\r\n 1 file changed, 11 insertions(+), 18 deletions(-)\r\n\r\ndiff --git a/theories/measure_wip.v b/theories/measure_wip.v\r\nindex 5f94173..e7e507f 100644\r\n--- a/theories/measure_wip.v\r\n+++ b/theories/measure_wip.v\r\n@@ -63,17 +63,8 @@ Definition uncurry {A B C:Type} (f:A -> B -> C)\r\n   (p:A * B) : C := match p with (x, y) => f x y end.\r\n \r\n (* NB: PR to MathComp in progress *)\r\n-Lemma gez0_norm (R : numDomainType) (i : int) : 0 <= i -> `|i|%:R = i%:~R :> R.\r\n-Proof. by move/gez0_abs => <-. Qed.\r\n-\r\n-Lemma gtz0_norm (R : numDomainType) (i : int) : 0 < i -> `|i|%:R = i%:~R :> R.\r\n-Proof. by move/gtz0_abs => <-. Qed.\r\n-\r\n-Lemma ltz0_norm (R : numDomainType) (i : int) : i < 0 -> `|i|%:R = - i%:~R :> R.\r\n-Proof.\r\n-move/ltz0_abs/eqP; rewrite -eqr_oppLR => /eqP <-.\r\n-by rewrite abszN absz_id mulrNz opprK.\r\n-Qed.\r\n+Lemma normrzE (R : numDomainType) i : `|i|%:R = `|i|%:~R :> R.\r\n+Proof. by rewrite -abszE. Qed.\r\n (* END NB: PR to MathComp in progress *)\r\n \r\n Section eseries.\r\n@@ -3570,10 +3561,11 @@ exists (set_of_itv \\o ccitv).\r\n   rewrite predeqE => /= r; split => // _; have [r0|r0] := leP 0 r.\r\n   - exists (absz (ceil r)) => //; apply/set_of_itv_mem.\r\n     rewrite itv_boundlr/= 2!lte_bnd (le_trans _ r0)/= ?oppr_le0 ?ler0n//.\r\n-    by rewrite gez0_norm ?ceil_ge0 // ler_ceil.\r\n+    by rewrite normrzE ger0_norm ?ceil_ge0 // ler_ceil.\r\n   - exists (absz (floor r)) => //; apply/set_of_itv_mem.\r\n     rewrite itv_boundlr /= 2!lte_bnd (le_trans (ltW r0)) ?ler0n// andbT.\r\n-    by rewrite ler_oppl ltz0_norm ?floor_lt0// ler_oppl opprK ler_floor.\r\n+    rewrite ler_oppl normrzE ltr0_norm ?floor_lt0//.\r\n+    by rewrite mulrNz ler_opp2 ler_floor.\r\n move=> n; split.\r\n   by exists [fset (ccitv n)]%fset; rewrite ssetE /= big_seq_fset1.\r\n by rewrite length_itv hlength_itv /=; case: ifPn; rewrite lte_pinfty.\r\n@@ -3965,7 +3957,8 @@ have len_iIN_dvg : forall M, M > 0 -> exists N, (N >= 1)%N /\\ (M%:E < length (iI\r\n     have ? : (0 < `|ceil M|)%N by rewrite absz_gt0 gt_eqF // ceil_gt0.\r\n     exists `|ceil M|%N; split=> //; rewrite /iIN ioo set_of_itvE setTI.\r\n     rewrite length_ccitv lte_fin (le_lt_trans (ler_ceil _)) //.\r\n-    by rewrite -gtz0_norm ?ceil_gt0// ltr_nat -addnn -ltn_subLR // subnn.\r\n+    rewrite -[c in c%:~R]gtr0_norm ?ceil_gt0//.\r\n+    by rewrite -normrzE ltr_nat -addnn -add1n leq_add2r.\r\n   rewrite /iIN.\r\n   wlog : i {ij iIN} b r {iroo} / i = Interval -oo%O (BSide b r).\r\n     move=> h; move: iroo => [->|iroo]; first exact: h.\r\n@@ -3978,7 +3971,7 @@ have len_iIN_dvg : forall M, M > 0 -> exists N, (N >= 1)%N /\\ (M%:E < length (iI\r\n     rewrite ltr_oppl opprK.\r\n     case: ifPn => [rrM|].\r\n       rewrite meet_l ?(le_trans r0) // lte_fin mulrSr.\r\n-      rewrite gez0_norm ?ceil_ge0// ?(addr_ge0 _ (ltW _))//.\r\n+      rewrite normrzE ger0_norm ?ceil_ge0// ?(addr_ge0 _ (ltW _))//.\r\n       rewrite -ltr_subl_addl (@le_lt_trans _ _ (`|r| + M)) // ?ler_addr//.\r\n         by rewrite ler0_norm // addrC.\r\n       rewrite (@lt_le_trans _ _ (`|r| + M + 1)) // ?ltr_addl // ler_add2r.\r\n@@ -3986,7 +3979,7 @@ have len_iIN_dvg : forall M, M > 0 -> exists N, (N >= 1)%N /\\ (M%:E < length (iI\r\n     move=> /negP; apply: absurd.\r\n     rewrite -(ler0_norm r0) mulrSr ltr_spaddr //.\r\n     rewrite (@le_trans _ _ (`|r| + M)) // ?ler_addl //; first exact/ltW.\r\n-    by rewrite gez0_norm ?ceil_ge0// ?(addr_ge0 _ (ltW _))// ler_ceil.\r\n+    by rewrite normrzE (ger0_norm (ceil_ge0 _)) ?addr_ge0 ?ler_ceil // ltW.\r\n   have crM : (0 < `|ceil (`|r| + M)|)%N.\r\n     by rewrite absz_gt0 gt_eqF // ceil_gt0 // -(addr0 0) ler_lt_add.\r\n   exists (`|ceil (`| r | + M)|%N); split => //.\r\n@@ -3994,10 +3987,10 @@ have len_iIN_dvg : forall M, M > 0 -> exists N, (N >= 1)%N /\\ (M%:E < length (iI\r\n   rewrite opprK andbT.\r\n   case: ifPn => [_|].\r\n     rewrite meet_l; last first.\r\n-      rewrite gez0_norm ?ceil_ge0// ?(addr_ge0 _ (ltW _))// gtr0_norm//.\r\n+      rewrite normrzE ger0_norm ?ceil_ge0// ?(addr_ge0 _ (ltW _))// gtr0_norm//.\r\n       by rewrite (le_trans (ler_ceil _)) // ler_int ceil_le // ler_addl ltW.\r\n     rewrite lte_fin -{1}(add0r M) ltr_le_add //.\r\n-    rewrite gez0_norm ?ceil_ge0// ?(addr_ge0 _ (ltW _))// gtr0_norm//.\r\n+    rewrite normrzE ger0_norm ?ceil_ge0// ?(addr_ge0 _ (ltW _))// gtr0_norm//.\r\n     by rewrite (le_trans (ler_ceil _)) // ler_int ceil_le // ler_addr ltW.\r\n   move/negP; apply: absurd.\r\n   rewrite -(@ltr_nat R) in crM.\r\n-- \r\n2.20.1\r\n```"},{"author":"affeldt-aist","date":"2021-05-26T10:01:15Z","comment":"@pi8027 I have replayed the proofs in the spirit of your patch. Maybe that's good enough with only one lemma.\r\nI modify the mathcomp PR accordingly. Thanks for your time!"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":370,"state":"closed","open_date":"2021-04-30T09:06:58Z","update_date":"2021-05-09T09:57:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":369,"state":"closed","open_date":"2021-04-30T02:44:39Z","update_date":"2021-05-09T09:57:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":367,"state":"closed","open_date":"2021-04-26T04:43:23Z","update_date":"2021-05-09T09:57:25Z","discussion":[{"author":"CohenCyril","date":"2021-05-04T15:33:59Z","comment":"I prefer `\\bar R` much more"},{"author":"CohenCyril","date":"2021-05-05T10:07:51Z","comment":"BTW, `er` does not make sense, it is so short we should use it instead of `\\bar` but it is utterly uninformative.\r\nI think it should be renamed `extended` or `with_infinities`.\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":366,"state":"closed","open_date":"2021-04-02T09:27:05Z","update_date":"2021-05-21T15:18:28Z","discussion":[{"author":"CohenCyril","date":"2021-05-04T16:30:21Z","comment":"Great! Can you also take this opportunity to add `0%E` and `1%E` as definitions for `0%R%:E` and `1%R%:E`?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":364,"state":"closed","open_date":"2021-04-01T11:07:00Z","update_date":"2021-04-01T14:22:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":363,"state":"closed","open_date":"2021-04-01T07:35:59Z","update_date":"2021-04-01T07:52:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":362,"state":"closed","open_date":"2021-03-31T13:18:59Z","update_date":"2021-06-10T15:33:43Z","discussion":[{"author":"CohenCyril","date":"2021-03-31T13:24:13Z","comment":"I'm afraid this is too agressive, one has to check that `[set f x | x in A]` is not systematically printed `(fun x => f x) `@ A`"},{"author":"proux01","date":"2021-03-31T13:37:56Z","comment":"> I'm afraid this is too agressive, one has to check that `[set f x | x in A]` is not systematically printed `(fun x => f x) `@ A`\r\n\r\nThe notation is declared `only parsing` (I just move this in the `Reserved Notation` for uniformity)."},{"author":"proux01","date":"2021-05-04T15:04:01Z","comment":"@CohenCyril are you expecting anything from me here?"},{"author":"CohenCyril","date":"2021-05-04T15:38:22Z","comment":"> @CohenCyril are you expecting anything from me here?\r\n\r\nSorry, I forgot about this. I think the direct image refactoring is ok. I'm not convinced the preimage definition should be removed though... And it needs a rebase."},{"author":"proux01","date":"2021-05-04T16:07:34Z","comment":"Me neither now that you point it, so let's forgot about it for now.\r\nRebased."},{"author":"affeldt-aist","date":"2021-06-08T04:29:39Z","comment":"This change seems to cause problems for infotheo:\r\nhttps://github.com/affeldt-aist/infotheo/pull/60/commits/2c15a31dd368b739d3c35a74ca4093dd2362c508\r\nYou can observe the need to insert coercions and also scripts that break because of uncontrolled simplification.\r\nWhat are the advantages of having made `image` a notation?\r\n\r\n"},{"author":"proux01","date":"2021-06-08T06:22:56Z","comment":"The ability to rewrite `image_comp`, c.f. https://github.com/math-comp/analysis/pull/360#discussion_r604738035"},{"author":"affeldt-aist","date":"2021-06-08T06:47:28Z","comment":"We used to be able to rewrite `image_comp`, some of these proofs are now failing. :-/"},{"author":"affeldt-aist","date":"2021-06-08T09:30:33Z","comment":"So it looks like the inconvenients outweigh the advantages, isn't it?"},{"author":"proux01","date":"2021-06-08T10:26:55Z","comment":"I really don't know, rewriting image_comp on things like `[set f x | x in [set g y | y in A]]` with non trivial `f` and `g` was a real pain.\r\n\r\nHere is a commit in analysis that could avoid your coercions : https://github.com/proux01/analysis/commit/e8568c8acebcdef6cd91c806e93176fa7b74e8a9\r\nand a fix (not ideal) for infotheo : https://github.com/proux01/infotheo/commit/791c3b619ca59bc473702420e6548161b9391c37\r\n\r\nIt seems that `/=` is simplifying set notations too much, making `image` a definition was stopping that but I'm not convinced it is the right fix. WDYT @CohenCyril ?"},{"author":"CohenCyril","date":"2021-06-10T06:52:11Z","comment":"Maybe a solution would be to define\r\n```coq\r\nDefinition image f A := [set y | exists2 x, A x & f x = y].\r\nArguments image f A /.\r\n```\r\nbefore the notation\r\n```coq\r\nNotation \"[ 'set' E | x 'in' A ]\" := (image (fun x => E) A) : classical_set_scope.\r\n```\r\nso that we still have the head symbol but at least it is the same everywhere."},{"author":"proux01","date":"2021-06-10T15:33:43Z","comment":"Thanks, a slight variation seems to work (c.f. #388 ) and the impact on infotheo is minimal https://github.com/proux01/infotheo/commit/19c95c315ee38561a6101b66c475e972533767eb"}],"tags":[],"pull_requests":[]},{"author":"proux01","number":360,"state":"closed","open_date":"2021-03-27T12:12:15Z","update_date":"2021-03-31T12:15:12Z","discussion":[{"author":"CohenCyril","date":"2021-03-29T10:21:55Z","comment":"It looks mostly good, I will take a closer look by wednesday..."},{"author":"CohenCyril","date":"2021-03-31T09:15:10Z","comment":"I think this can be merged modulo answering my comments and rebasing."},{"author":"proux01","date":"2021-03-31T11:08:08Z","comment":"Rebased, CI green"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":359,"state":"closed","open_date":"2021-03-26T08:09:28Z","update_date":"2021-04-23T02:28:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":358,"state":"closed","open_date":"2021-03-26T05:46:03Z","update_date":"2021-03-27T08:38:23Z","discussion":[{"author":"pi8027","date":"2021-03-26T07:38:40Z","comment":"I found myself good at this kind of refactoring work, and it also helps me to understand existing code. So I wish to have a list of lemmas I should try to refactor when I have some time."},{"author":"pi8027","date":"2021-03-26T10:15:29Z","comment":"I replaced `Defined` with `Qed` as discussed in the meeting."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":357,"state":"closed","open_date":"2021-03-26T05:33:43Z","update_date":"2021-03-26T10:47:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":356,"state":"closed","open_date":"2021-03-26T05:20:12Z","update_date":"2021-04-23T02:28:24Z","discussion":[{"author":"CohenCyril","date":"2021-03-30T18:54:36Z","comment":"Maybe we could still have a changelog entry?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":355,"state":"closed","open_date":"2021-03-26T05:14:42Z","update_date":"2021-04-23T17:41:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":354,"state":"closed","open_date":"2021-03-25T09:23:35Z","update_date":"2021-04-23T02:28:19Z","discussion":[{"author":"affeldt-aist","date":"2021-03-26T11:03:03Z","comment":"I did a rebase and amend to put email addresses to the commit message but couldn't find Theo's one. :-/"},{"author":"mkerjean","date":"2021-03-26T11:05:00Z","comment":"> I did a rebase and amend to put email addresses to the commit message but couldn't find Theo's one. :-/\r\n\r\nHis username on github is @tvignon. (https://github.com/tvignon)"},{"author":"affeldt-aist","date":"2021-03-26T11:14:07Z","comment":"> > I did a rebase and amend to put email addresses to the commit message but couldn't find Theo's one. :-/\r\n> \r\n> His username on github is @tvignon. (https://github.com/tvignon)\r\n\r\nI put `Co-Authored-By: Theo Vignon <tvignon@users.noreply.github.com>` in the commit message, that should do it.\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":353,"state":"closed","open_date":"2021-03-24T11:02:03Z","update_date":"2021-05-09T09:57:32Z","discussion":[{"author":"affeldt-aist","date":"2021-04-02T10:58:12Z","comment":"NB: I have rebase this PR on top of PR #355 to test the `\\sum_(_ <oo)` notations but revision is not over yet."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":352,"state":"closed","open_date":"2021-03-23T10:24:36Z","update_date":"2021-03-25T01:38:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":351,"state":"closed","open_date":"2021-03-23T04:39:54Z","update_date":"2021-03-24T02:21:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":350,"state":"closed","open_date":"2021-03-23T03:14:23Z","update_date":"2021-04-23T02:28:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":349,"state":"closed","open_date":"2021-03-18T10:46:39Z","update_date":"2021-03-24T02:24:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":347,"state":"closed","open_date":"2021-03-17T00:45:45Z","update_date":"2021-04-23T02:28:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":346,"state":"open","open_date":"2021-03-14T16:22:50Z","update_date":"2022-04-21T00:26:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":345,"state":"open","open_date":"2021-03-12T07:43:55Z","update_date":"2022-04-21T00:26:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":343,"state":"closed","open_date":"2021-03-12T03:12:04Z","update_date":"2022-01-12T07:57:42Z","discussion":[{"author":"proux01","date":"2021-12-04T10:39:47Z","comment":"You should probably edit `meta.yml` and regenerate OPAM, Nix,... files (c.f.  https://github.com/coq-community/templates ) to drop 8.11 and 8.12. And we should probably also update the OPAM package on extra-dev before merging.\r\n"},{"author":"affeldt-aist","date":"2021-12-04T13:54:50Z","comment":"> we should probably also update the OPAM package on extra-dev before merging.\r\n\r\nYou mean the files in `opam-coq-archive/extra-dev/packages/coq-mathcomp-analysis`?\r\n(Because it is a long time we haven't touched those. :-( )\r\n"},{"author":"affeldt-aist","date":"2021-12-04T14:15:19Z","comment":"\"Nix CI for bundle 8.11 / mathcomp-analysis (pull_request)\" fails.\r\n\"Nix CI for bundle 8.11 / coq (pull_request)\" is marked as a success but if we click on \"Details\" we can observe that compilation is incomplete.\r\nIs that intended?\r\n"},{"author":"proux01","date":"2021-12-04T14:43:50Z","comment":"> You mean the files in `opam-coq-archive/extra-dev/packages/coq-mathcomp-analysis`?\r\n\r\nyep (we can just bump Coq 8.11 to 8.13 and take the opportunity to tell ssreflect 1.13 is supported)\r\n\r\n> \"Nix CI for bundle 8.11 / coq (pull_request)\" is marked as a success but if we click on \"Details\" we can observe that compilation is incomplete.\r\n\r\nI don't get your point, it looks to me like Coq 8.11 was successfully retrieved from cachix?\r\n"},{"author":"affeldt-aist","date":"2021-12-05T02:33:15Z","comment":"> I don't get your point, it looks to me like Coq 8.11 was successfully retrieved from cachix?\r\n\r\nI see. I didn't understand that the point of this part of the CI was to check only that Coq can be retrieved.Thank you.\r\n"},{"author":"proux01","date":"2021-12-09T11:21:14Z","comment":"@affeldt-aist this now looks mergeable\r\n"},{"author":"proux01","date":"2021-12-27T12:51:59Z","comment":"It remains to remove 8.11 and 8.12 from Nix CI, removing the two bundle lines in `.nix/config.nix` and the two corresponding files in `.github/workflows` should be enough."},{"author":"proux01","date":"2022-01-06T19:42:19Z","comment":"So addition of Analysis in Coq CI is waiting for this to be merged: https://github.com/coq/coq/pull/15443"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":340,"state":"closed","open_date":"2021-03-12T02:52:30Z","update_date":"2021-04-23T02:28:07Z","discussion":[{"author":"affeldt-aist","date":"2021-03-15T14:22:01Z","comment":"This is partly inspired by recent PRs to MathComp :-) @CohenCyril "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":339,"state":"closed","open_date":"2021-03-10T15:39:24Z","update_date":"2021-03-10T15:56:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":338,"state":"closed","open_date":"2021-03-04T02:05:13Z","update_date":"2021-03-04T11:39:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":337,"state":"open","open_date":"2021-02-19T15:30:00Z","update_date":"2023-03-15T15:05:36Z","discussion":[{"author":"pi8027","date":"2021-03-26T10:28:01Z","comment":"So this is the PR that needs linting and refactoring, right?"},{"author":"mkerjean","date":"2021-03-26T10:33:22Z","comment":"> So this is the PR that needs linting and refactoring, right?\r\n\r\nYes, quite heavily. In particular, hahn_banach.v could be transformed in a file depending of mathcomp-analysis, containing another (?) proof of Zorn's lemma or using the one already present in analysis. "},{"author":"affeldt-aist","date":"2021-03-26T10:46:20Z","comment":"> > So this is the PR that needs linting and refactoring, right?\r\n> \r\n> Yes, quite heavily. In particular, hahn_banach.v could be transformed in a file depending of mathcomp-analysis, containing another (?) proof of Zorn's lemma or using the one already present in analysis.\r\n\r\n@pi8027 There a few more concrete hints in the minutes of the last meeting (https://github.com/math-comp/analysis/wiki/2021-03-26-Meeting)."},{"author":"pi8027","date":"2021-04-04T17:37:04Z","comment":"Could someone grant me write permission to directly push to here?\r\n\r\n> `ERROR: Permission to math-comp/analysis.git denied to pi8027.`"},{"author":"CohenCyril","date":"2021-04-04T19:08:52Z","comment":"> Could someone grant me write permission to directly push to here?\r\n> \r\n> > `ERROR: Permission to math-comp/analysis.git denied to pi8027.`\r\n\r\ndone"},{"author":"pi8027","date":"2021-04-05T13:02:57Z","comment":"@CohenCyril Thanks!"},{"author":"mkerjean","date":"2022-02-07T14:44:26Z","comment":"Hi @pi8027, did you try to lint and refactor this or can I tackle this ? "}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":336,"state":"closed","open_date":"2021-02-19T02:52:07Z","update_date":"2021-03-12T02:53:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":335,"state":"closed","open_date":"2021-02-19T01:49:26Z","update_date":"2021-03-12T02:53:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":334,"state":"open","open_date":"2021-02-18T21:27:23Z","update_date":"2023-03-15T15:06:47Z","discussion":[{"author":"affeldt-aist","date":"2021-03-11T11:01:30Z","comment":"I tried to simplify a bit the scripts. Tell me if I introduced to much mess, Maybe it is worth doing one more pass and discuss whether to put lemmas in other files. Should `le_closed_ball` moved in `normedtype.v` (maybe using the `homo` notation). Should `floor_nat_comp` go to `reals.v`? Should `bounded_landau` go to `landau.v`? @CohenCyril "},{"author":"mkerjean","date":"2021-03-15T13:54:47Z","comment":"> I tried to simplify a bit the scripts. Tell me if I introduced to much mess.\r\nSeems good to me, thanks :)\r\n"},{"author":"mkerjean","date":"2021-03-26T10:36:16Z","comment":"> I tried to simplify a bit the scripts. Tell me if I introduced to much mess, Maybe it is worth doing one more pass and discuss whether to put lemmas in other files. Should `le_closed_ball` moved in `normedtype.v` (maybe using the `homo` notation). Should `floor_nat_comp` go to `reals.v`? Should `bounded_landau` go to `landau.v`? @CohenCyril\r\n\r\nAs `bounded_landau` depends of the newly introduced defininition `bounded_fun_norm`, shouldn't it stay in near Banach-Steinhaus theorem for the time being ? And then Banach-Steinhaus needs to be inserted as a section/module in `landau.v` ? "},{"author":"affeldt-aist","date":"2021-03-26T10:44:20Z","comment":"\r\n> As `bounded_landau` depends of the newly introduced defininition `bounded_fun_norm`,\r\n> shouldn't it stay in near Banach-Steinhaus theorem for the time being ?\r\n\r\nI was thinking that `bounded_fun_norm` would go to `landau.v` too.\r\n\r\n> And then Banach-Steinhaus needs to be inserted as a section/module in `landau.v` ?\r\n\r\nIndeed, we wrongly stated that it should go to `normedtype.v` during the meeting. :-(\r\n"},{"author":"affeldt-aist","date":"2021-03-29T08:20:50Z","comment":"Follow-up to Friday's meeting: I tried to replace `floor_nat_comp` with more primitive lemmas and the usage of `ceil`."},{"author":"mkerjean","date":"2021-04-01T16:08:44Z","comment":"At the end Baire's theorem depends on sequences, thus Baire's and Banach-Steinhauss theorem have been added in `sequences.v`, as well as the auxiliary definitions on bounded function (to be removed one day)."},{"author":"affeldt-aist","date":"2021-05-27T11:30:17Z","comment":"NB: This PR uses the lemma `gtz0_norm` expecting it to be integrated into MathComp.\r\nThis is rather this lemma:\r\n```\r\nLemma natr_absz i : `|i|%:R = `|i|%:~R :> R.\r\nProof. by rewrite -abszE. Qed.\r\n```\r\nthat is likely to be merged into MathComp (see PR https://github.com/math-comp/math-comp/pull/732/).\r\nMaybe update this PR accordingly?\r\n"},{"author":"mkerjean","date":"2022-02-07T13:24:46Z","comment":"> NB: This PR uses the lemma `gtz0_norm` expecting it to be integrated into MathComp. This is rather this lemma:\r\n> \r\n> ```\r\n> Lemma natr_absz i : `|i|%:R = `|i|%:~R :> R.\r\n> Proof. by rewrite -abszE. Qed.\r\n> ```\r\n> \r\n> that is likely to be merged into MathComp (see PR [math-comp/math-comp#732](https://github.com/math-comp/math-comp/pull/732)). Maybe update this PR accordingly?\r\n\r\nThese lemmas have been integrated to MathComp 1.13 and Analysis seems to depend on math-comp 1.13, but I can't find them within sequence.v in this branch, any idea why ? "},{"author":"CohenCyril","date":"2022-02-07T13:32:23Z","comment":"> These lemmas have been integrated to MathComp 1.13 and Analysis seems to depend on math-comp 1.13, but I can't find them within sequence.v in this branch, any idea why ?\r\n\r\nHi! mathcomp-analysis is compatible with both (and with 1.14 too), and the default nix-shell uses the most conservative of the two (so 1.12.0).\r\nI am strongly in support of dropping 1.12.0 ASAP, that would solve your issue and several of mine :)"},{"author":"CohenCyril","date":"2022-02-07T13:33:33Z","comment":"Meanwhile is you use `nix-shell --argstr bundle 8.14` it will use Coq 8.14 and force mathcomp to 1.13."}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"CohenCyril","number":333,"state":"closed","open_date":"2021-02-17T18:16:45Z","update_date":"2021-04-23T02:28:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":332,"state":"closed","open_date":"2021-02-10T09:21:04Z","update_date":"2021-03-04T01:52:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":331,"state":"closed","open_date":"2021-02-01T14:57:07Z","update_date":"2021-03-12T02:53:36Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":329,"state":"closed","open_date":"2021-01-26T05:48:09Z","update_date":"2021-01-29T09:59:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":328,"state":"closed","open_date":"2021-01-26T03:19:07Z","update_date":"2021-01-29T10:00:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":327,"state":"closed","open_date":"2021-01-19T19:28:49Z","update_date":"2021-01-26T03:20:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":326,"state":"closed","open_date":"2021-01-19T09:00:13Z","update_date":"2021-01-19T15:30:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":322,"state":"closed","open_date":"2021-01-14T05:37:47Z","update_date":"2021-01-29T10:00:52Z","discussion":[{"author":"CohenCyril","date":"2021-01-18T18:26:19Z","comment":"This is transitory code waiting for (https://github.com/math-comp/math-comp/pull/682 and https://github.com/math-comp/math-comp/pull/691) to be integrated.\r\nCan you please check that the definitions have the same type here as there, that the lemmas have the same shape and that you are not using the body of these definitions anywhere else? If a lemma is missing from the above PR, you could suggest their insertion."},{"author":"CohenCyril","date":"2021-01-18T18:35:31Z","comment":"Also, note that `Rtoint` is (and `floor` too) to disappear in favor of the more general and informative `Num.floor`."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":321,"state":"closed","open_date":"2021-01-14T04:29:00Z","update_date":"2021-01-19T08:34:10Z","discussion":[{"author":"CohenCyril","date":"2021-01-18T17:51:18Z","comment":"LGTM merge when rebased"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":320,"state":"closed","open_date":"2021-01-14T04:08:29Z","update_date":"2021-01-19T15:30:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":319,"state":"closed","open_date":"2021-01-13T12:47:37Z","update_date":"2021-01-18T17:51:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":318,"state":"closed","open_date":"2021-01-12T05:00:09Z","update_date":"2021-07-22T13:11:49Z","discussion":[{"author":"CohenCyril","date":"2021-07-22T12:59:48Z","comment":"@zstone1 why did you close this one?"},{"author":"zstone1","date":"2021-07-22T13:11:49Z","comment":"Oh, sorry I should have left a closing comment. With #397 (Arzela-Ascoli), it will dramatically simplify this proof. So while the banach space definitions are still useful, that should be a separate diff. "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":316,"state":"closed","open_date":"2021-01-08T18:55:14Z","update_date":"2021-01-19T09:01:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":315,"state":"closed","open_date":"2021-01-08T18:09:12Z","update_date":"2021-01-19T09:01:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":314,"state":"closed","open_date":"2021-01-07T05:28:13Z","update_date":"2021-01-29T09:59:26Z","discussion":[{"author":"CohenCyril","date":"2021-01-18T17:36:54Z","comment":"I'd rather reuse the convetions from `mathcomp/ssreflect/finset.v`\r\n\r\n> * enforce the convention of using T, U for names of variables\r\n>   in Type (or choiceType an pointedType)\r\n\r\nUse `T` (if multiple types, use a suffix as in `T'` or `T1` ... `Tn` or a prefix as in `aT` for domain type or  `rT` return type)\r\n\r\n>   * use I when the type corresponds to an index\r\n\r\nUse `I` or `J` for indexes.\r\n\r\n> * enforce the convention that sets are named A, B, C, D, etc.\r\n\r\nYes\r\n\r\n>   * indexed sets are rather named F\r\n>   * use X for set T and Y for set U when it makes sense when\r\n\r\nUse the same sufix or prefix for the sets as their containing type (e.g. `A1` in `T1`, etc)\r\n\r\n>     we are talking about images/preimages\r\n>   * keep X for sets of pairs\r\n\r\nor remove the suffix? (e.g. `A : set (T1 * T2)`)\r\n\r\n> * small reordering of lemmas in sections (basic_lemmas,\r\n>   image_lemmas, bigop_lemmas) to take advantage of Implicit Types\r\n\r\n"},{"author":"CohenCyril","date":"2021-01-18T17:37:29Z","comment":" + document these choices in the header?"},{"author":"CohenCyril","date":"2021-01-26T10:37:41Z","comment":"Please rebase and then we merge"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":313,"state":"closed","open_date":"2021-01-04T03:46:00Z","update_date":"2021-01-19T09:00:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":312,"state":"closed","open_date":"2020-12-21T08:03:45Z","update_date":"2020-12-21T09:23:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"zstone1","number":311,"state":"closed","open_date":"2020-12-19T22:27:18Z","update_date":"2021-10-30T14:29:24Z","discussion":[{"author":"CohenCyril","date":"2020-12-20T21:19:59Z","comment":"Hi @zstone1 thank you for your contribution. At first glance, it is interesting and I have many remarks to make but I am very short in time during this period of the year.\r\n\r\nJust so you know, your restriction mechanism is akin to the one used in group theory `{morphism G -> gT'}` (where `G` is a subgroup of an enclosing groupe type `gT`).\r\n\r\nYou might also be interested in PR #224 "},{"author":"zstone1","date":"2020-12-20T22:44:12Z","comment":"Ah, thanks for the heads up about the integral PR. And no worries on time. I'd love to hear your thoughts when you get to it. "},{"author":"CohenCyril","date":"2021-01-12T10:31:58Z","comment":"Hi, @zstone1 I have many remarks and questions about this PR, but I'll start \"small\": would you consider using function restriction like this one? https://github.com/math-comp/analysis/blob/0eaabe88aaac5500a2584b60648a31e1ff153e29/theories/csum.v#L46-L48 (defined in #294 and used in #224)\r\n\r\nIn your case, since you don't have `0`, you could use `point` from `pointedType` instead (which we should make sure always coincides with `0` in Z-modules). Would that be a reasonable assumption that all your codomains are pointed?"},{"author":"zstone1","date":"2021-01-12T16:47:12Z","comment":"Thanks for this, it's an interesting point. First of all, `pointedType` is a very reasonable assumption. I think I already am assuming it everywhere. Second, I have a `patch` function which behaves similarly. For a given set `A`,  the function `patch_point A := patch A (fun=> point)` is exactly the restriction you're recommending. \r\n\r\nI did consider such restrictions, and I don't have a good reason to use dependent pairs over restriction functions. It looks like the restriction functions will fit better into the existing paradigm, so I'm happy to make that change. It should be quite straightforward. On the other hand, I believe the \"exploded\" topology has the advantage of using the same filter everywhere. The only way I could figure out to use that `patch_point A` function was to say \r\n``` \r\nF ~~>_(A) :=  ((patch_point A) @` F --> (patch_point A f))\r\n```\r\nBut then, for defining convergence over a family of sets, we'd need \r\n```\r\nforall A, fam A -> (patch_point A) @` F --> (patch_point A f)\r\n```\r\nNow we've got different filters for each set. So I can't really use the nice `sup_topology` stuff. My goal was to make the definition \r\n```\r\nNotation \"F ~ famA ~> f\" := \r\n  (F --> (f : family_cvg_topologicalType famA)) (at level 100).\r\n``` \r\nas clean as possible. This also should prevent having to sprinkle in excess restrictions at application time.\r\n \r\nThat being said, in another draft PR I just posted, I prove that geometric series converge compactly. I ended up using `cvg_restrict_dep` anyway. So when it comes to proving things converge over families, having the clean definition didn't help much. So if it ends up that all of the `sup_topology` stuff is a distraction, then I'm fine to remove it, and just use the restriction definitions.\r\n\r\nDoes this explain my reasoning clearly? If I've missed something, please let me know. I'd love to simplify the PR. "},{"author":"CohenCyril","date":"2021-01-12T17:41:29Z","comment":"I agree that restrictions using dependent types might not be the most usable in general, though it could sometimes prove useful. When one stays with topology and more generally non algebraic structures, they might be ok (even if one has to pay the price of going back and forth a type and its subtype, it could be manageable). When one enters the realm of algebra, the predicate must satisfy more structure. So it's ok to keep them as a side tool, provided the theory is done once and applied to the other.\r\n\r\nAbout changing the topology on spaces of function, while it is unavoidable for the pointwise one, maybe the best strategy would be to change the topology on the domain using `within`, e.g. by having a canonical structure on an alias of the domain e.g.\r\n```coq\r\nDefinition restrict_type U (A : set U) := U.\r\nNotation \"U `\\_ A\" := (restrict_type U A) : type_scope.\r\n```\r\nThen, filters on ``F --> (f : U`\\_A -> _)`` correspond to your current `F ~~>_(A) f` (I hope, please check I'm not saying something wrong)."},{"author":"zstone1","date":"2021-01-12T18:04:35Z","comment":"I remember trying something like that, but gave up. The uniform topology for functions doesn't use a topology on the domain; it's just a `choiceType`. (I'll admit this detail surprised me.) This line of thinking is how I ended up with dependent pairs in the first place. I agree with the approach wholeheartedly, though. Only altering the function domain would be quite elegant. But I never figured out how to do it. I suspect it's not possible, but don't have any supporting evidence. "},{"author":"CohenCyril","date":"2021-01-18T17:30:39Z","comment":"> Only altering the function domain would be quite elegant. But I never figured out how to do it. I suspect it's not possible, but don't have any supporting evidence.\r\n\r\nAh right, I understand the problem, I think this could be done by adding some machinery that try to detect a restriction of a domain for the product topology...."},{"author":"CohenCyril","date":"2021-01-18T18:35:20Z","comment":"Then I guess a solution would be to have a type `{restricted A -> T}` function (note that in the mathcomp tradition, annotation of the sort are prefered over LaTeX style subscripts of the arrow, and that we use curly brackets for types and square brackets for terms)."},{"author":"zstone1","date":"2021-01-18T21:37:19Z","comment":"Ok, that's quite reasonable. I've updated the proofs with the new syntax, as well as the docs. All this raises a (possibly out of scope) question. Should `U -> V` have a canonical topology? I'm not sure I why uniform is a better choice than pointwise. Even though removing the `Canonical` declaration would force people to be explicit about their topologies, new syntax is a fairly lightweight way to annotate it. And when you're working with only one kind of convergence, the existing `F --> f` (vs `{unif, F --> f}` ) notation still works just fine."},{"author":"affeldt-aist","date":"2021-03-25T05:42:43Z","comment":"There is maybe a need for one more pass of linting.\r\n"},{"author":"zstone1","date":"2021-06-08T04:17:33Z","comment":"Ok, three things done:\r\n1) I've created aliases for `U -> V` for each topology, and given the canonical filters, topologies, uniform, as appropriate. I kept all the same notations. I believe this is the requested change, but please correct me if I'm wrong.\r\n2) I've added a new function `restrict` which is just `patch` with `(fun=> point)`. I've kept the patch function. Is this ok, or would you prefer I do some more substantial renaming?\r\n3) I've proven that `restrict` in the uniform topology behaves like the restricted topology.\r\n\r\nAre there any other blockers for merging this?"},{"author":"affeldt-aist","date":"2021-06-18T10:13:46Z","comment":"I tried to use `pred` instead of `set` in `patch` following what was said during the last meeting."},{"author":"zstone1","date":"2021-06-26T13:33:47Z","comment":"Ah, those notations suggestions are a nice improvement. I will address these issues this week. \r\n\r\nSeparately, I had a realization that I can define `{uniform A -> V}` as the weak topology of `restrict_dep A : (X -> Y) -> ({x : X| x \\in A} -> Y)`. I believe this will save several hundred lines of proofs, but I can't be sure until I try. "},{"author":"zstone1","date":"2021-06-27T23:32:57Z","comment":"Alright, I believe I've updated all the issues you identified. Also, using the weak topology of the restriction map has saved saved nearly 300 lines, and removed many of the awkward internal lemmas, such as all the `explode` stuff. "},{"author":"CohenCyril","date":"2021-07-22T07:55:28Z","comment":"@zstone1 please never merge master into a PR, use rebase instead with squashing when necessary.\r\nHowever please do not touch it for now, I will be working on it it's ok with you."},{"author":"zstone1","date":"2021-08-27T21:17:10Z","comment":"Just wanted to check the status of this diff. Is there anything I can do here? "},{"author":"CohenCyril","date":"2021-08-30T09:42:53Z","comment":"> Just wanted to check the status of this diff. Is there anything I can do here?\r\n\r\nI am back from vacation, I will attend this matter asap now."},{"author":"CohenCyril","date":"2021-09-22T15:25:29Z","comment":"@zstone1 I pushed some refactorings in the branch `domain_restriction`, I need to do a proper rebase and update the changelog. May I force-push on your `zstone1:master` branch?"},{"author":"zstone1","date":"2021-09-22T16:08:01Z","comment":"Yes, do whatever you need."},{"author":"CohenCyril","date":"2021-10-30T01:16:59Z","comment":"Sorry, when the remote branch is `master` it makes things really error prone (for me)... I will reopen it under a new branch "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":309,"state":"closed","open_date":"2020-12-17T04:21:22Z","update_date":"2021-01-19T09:00:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":308,"state":"closed","open_date":"2020-12-13T05:25:25Z","update_date":"2021-01-19T09:00:46Z","discussion":[{"author":"CohenCyril","date":"2020-12-21T04:13:22Z","comment":"@affeldt-aist I merged too quickly, there is a missing changelog entry."},{"author":"affeldt-aist","date":"2020-12-21T04:19:20Z","comment":"You mean that fact that we remove `Typeclasses Opaque fmap.` ?\r\nDoes the change of definition of `interior` qualify for the changelog?"},{"author":"CohenCyril","date":"2020-12-21T04:22:04Z","comment":"> You mean that fact that we remove `Typeclasses Opaque fmap.` ?\r\n\r\nYes, it has side effects: more TC are solved and this should be logged.\r\n\r\n> Does the change of definition of `interior` qualify for the changelog?\r\n\r\nNo, it is almost syntactically equal (even though the input is slightly different) and should be convertible, unifiable and pattern matchable the same in any context..."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":307,"state":"closed","open_date":"2020-12-12T03:45:26Z","update_date":"2020-12-12T04:37:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":306,"state":"closed","open_date":"2020-12-11T16:16:44Z","update_date":"2022-01-18T16:11:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":305,"state":"closed","open_date":"2020-12-11T04:42:19Z","update_date":"2021-03-10T14:21:06Z","discussion":[{"author":"affeldt-aist","date":"2020-12-11T12:29:47Z","comment":"by adding a topological structure to zmodType, I am afraid I start doing things that look like PR #205 "},{"author":"CohenCyril","date":"2020-12-11T14:30:28Z","comment":"> by adding a topological structure to zmodType, I am afraid I start doing things that look like PR #205\r\n\r\nOne should not do that, you are adding a trivial topology where everything is open, indeed you defined singletons to be open, hence any set, as an arbitrary union of singletons is automatically open...\r\n\r\nMoreover, if you were to add the discrete topology instead, it would be incompatible with any other topology that we use... If one really need discrete topologies, they need to introduce an alias `discrete T := T` and have canonicals on `discrete` instead..."},{"author":"affeldt-aist","date":"2020-12-11T14:50:39Z","comment":"well, this was really to keep going and uncover more problems, if we are to have a topologicalType as a parameter of the pseudometric mixin then the end of the file needs to be changed for we cannot used `topologyOfEntourageMixin` anymore, am I wrong? "},{"author":"CohenCyril","date":"2020-12-11T15:00:36Z","comment":"> well, this was really to keep going and uncover more problems, if we are to have a topologicalType as a parameter of the pseudometric mixin then the end of the file needs to be changed for we cannot used `topologyOfEntourageMixin` anymore, am I wrong?\r\n\r\nI'm not sure I understand..."},{"author":"affeldt-aist","date":"2020-12-11T15:11:44Z","comment":"> \r\n> \r\n> > well, this was really to keep going and uncover more problems, if we are to have a topologicalType as a parameter of the pseudometric mixin then the end of the file needs to be changed for we cannot used `topologyOfEntourageMixin` anymore, am I wrong?\r\n> \r\n> I'm not sure I understand...\r\n\r\nI think that ~normedZ~ zmodType needs to be given its topological structure earlier"},{"author":"CohenCyril","date":"2020-12-11T15:23:42Z","comment":"> I think that ~normedZ~ zmodType needs to be given its topological structure earlier\r\n\r\nI do not understand why you say that, moreover `zmodType` should not have a canonical structure..."},{"author":"affeldt-aist","date":"2020-12-11T15:31:03Z","comment":"> > I think that ~normedZ~ zmodType needs to be given its topological structure earlier\r\n> \r\n> I do not understand why you say that, moreover `zmodType` should not have a canonical structure...\r\n\r\nIt was to type check the `open (ball_ Num.Def.normr x e)` statement at line 4364 (though now we know that we can't do with this axiom anyway)."},{"author":"CohenCyril","date":"2020-12-11T15:37:11Z","comment":"> It was to type check the `open (ball_ Num.Def.normr x e)` statement at line 4364 (though now we know that we can't do with this axiom anyway).\r\n\r\nThen all you need is the topology of a  normedZmodType structure, and it must and should not be canonical, but local, since we are defining a factory on this line."},{"author":"affeldt-aist","date":"2020-12-11T15:44:06Z","comment":"> > It was to type check the `open (ball_ Num.Def.normr x e)` statement at line 4364 (though now we know that we can't do with this axiom anyway).\r\n> \r\n> Then all you need is the topology of a normedZmodType structure, and it must and should not be canonical, but local, since we are defining a factory on this line.\r\n\r\nI'll go back to it asap once ax5 is fixed as you suggested above."},{"author":"affeldt-aist","date":"2020-12-21T03:35:19Z","comment":"We gave up extending the interface of pseudometric spaces. This PR is scheduled to be closed as it is. A related discussion is going on in PR #283 ."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":303,"state":"closed","open_date":"2020-12-10T16:31:55Z","update_date":"2020-12-11T16:16:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":302,"state":"closed","open_date":"2020-12-09T15:17:41Z","update_date":"2020-12-17T09:17:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":300,"state":"open","open_date":"2020-12-09T08:49:23Z","update_date":"2022-04-21T00:26:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":299,"state":"closed","open_date":"2020-12-09T07:56:58Z","update_date":"2020-12-12T09:08:07Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":298,"state":"closed","open_date":"2020-12-09T00:07:47Z","update_date":"2020-12-09T04:47:25Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":297,"state":"closed","open_date":"2020-12-07T16:05:07Z","update_date":"2020-12-09T04:47:33Z","discussion":[{"author":"CohenCyril","date":"2020-12-08T12:00:26Z","comment":"Great :+1: "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":296,"state":"closed","open_date":"2020-12-01T08:41:09Z","update_date":"2020-12-09T04:47:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":295,"state":"closed","open_date":"2020-11-27T14:00:36Z","update_date":"2020-11-28T10:52:09Z","discussion":[{"author":"CohenCyril","date":"2020-11-27T14:03:17Z","comment":"I had already fixed that :-/"},{"author":"affeldt-aist","date":"2020-11-27T14:06:27Z","comment":"> I had already fixed that :-/\r\n\r\nI am not sure what happened but I realized when rebasing integral_sketch that the fix has been partly undone. My bad. :cat2: "},{"author":"CohenCyril","date":"2020-11-27T14:08:21Z","comment":"> I am not sure what happened but I realized when rebasing integral_sketch that the fix has been partly undone. My bad.\r\n\r\nmaybe you undid more :cry:"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":294,"state":"closed","open_date":"2020-11-27T12:32:02Z","update_date":"2021-05-04T15:06:45Z","discussion":[{"author":"affeldt-aist","date":"2021-03-19T05:46:04Z","comment":"Can we merge this?\r\nI understand that the two files introduced by this PR are not perfect but they are useful since\r\nthey support the construction of Lebesgue measure. Moreover, we can expect substantial\r\nimprovements in the mid-term about csum (wip). Otoh, proper support of finType and countType\r\nin cardinality.v are likely to take more time.\r\nI therefore marked these files clearly as WIP in their headers (and explained why) and propose\r\nto merge this PR now (after squashing a bit) and produce issues about improving them.\r\nWe can then go on using them actively and improve them more efficiently. @CohenCyril @strub \r\n\r\n\r\n"},{"author":"affeldt-aist","date":"2021-03-26T10:29:27Z","comment":"following the discussion we had about PR #311 we should maybe take `fer`, etc. out of this PR and put them back to `integral_sketch` for the time being, right? @CohenCyril "},{"author":"affeldt-aist","date":"2021-03-31T04:15:46Z","comment":"> following the discussion we had about PR #311 we should maybe take `fer`, etc. out of this PR and put them back to `integral_sketch` for the time being, right? @CohenCyril\r\n\r\nActually, maybe the whole section `funpos`..."},{"author":"CohenCyril","date":"2021-03-31T09:28:36Z","comment":"> > following the discussion we had about PR #311 we should maybe take `fer`, etc. out of this PR and put them back to `integral_sketch` for the time being, right? @CohenCyril\r\n> \r\n> Actually, maybe the whole section `funpos`...\r\n\r\nsure"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":293,"state":"closed","open_date":"2020-11-27T03:12:05Z","update_date":"2020-11-28T10:52:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":291,"state":"closed","open_date":"2020-11-25T23:33:45Z","update_date":"2020-12-09T04:48:03Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":290,"state":"closed","open_date":"2020-11-25T15:55:12Z","update_date":"2020-11-27T15:55:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":289,"state":"closed","open_date":"2020-11-25T14:18:47Z","update_date":"2020-11-25T14:27:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":288,"state":"closed","open_date":"2020-11-25T13:56:44Z","update_date":"2020-11-25T14:11:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":287,"state":"closed","open_date":"2020-11-24T16:07:16Z","update_date":"2020-11-25T13:14:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":286,"state":"closed","open_date":"2020-11-20T15:25:27Z","update_date":"2020-11-20T15:45:46Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":285,"state":"closed","open_date":"2020-11-20T15:23:13Z","update_date":"2020-11-20T16:58:09Z","discussion":[{"author":"CohenCyril","date":"2020-11-20T15:46:10Z","comment":"Please rebase to benefit from the repaired nix action."},{"author":"CohenCyril","date":"2020-11-20T15:59:04Z","comment":":scream: :scream: :scream: :scream: :scream: :scream: :scream: "},{"author":"CohenCyril","date":"2020-11-20T15:59:44Z","comment":"> Please rebase to benefit from the repaired nix action.\r\n\r\nthis was not a rebase on the right branch :scream: "}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":284,"state":"closed","open_date":"2020-11-17T07:23:08Z","update_date":"2020-12-09T04:47:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":283,"state":"closed","open_date":"2020-11-16T20:01:37Z","update_date":"2021-01-19T09:00:28Z","discussion":[{"author":"affeldt-aist","date":"2020-12-04T11:26:32Z","comment":"note that PR #268 has been merged so that you can get rid of a few lemmas about closure after rebasing\r\n"},{"author":"mkerjean","date":"2021-01-14T21:18:38Z","comment":"I addressed all your comments @CohenCyril. It could be ready to be merged - or maybe another look at the proofs is necessary."},{"author":"affeldt-aist","date":"2021-01-15T05:15:07Z","comment":"- (*TBA topology.v*) means to be added to topology.v?\r\n  + of course this can't be done right away because the lemmas here depend on ball_normE\r\n  + I observe that nbhs0_lt and nbhs'0_lt could be specialized to V = K^o\r\n- naming suggestions:\r\n  + closed_neigh_ball -> open_nbhs_closed_ball? (because we don't use the string \"neigh\")\r\n  + sub_closed_ball -> closed_ball_subset? (I think that the full string \"subset\" is privileged)\r\n  + ball_closed_ball -> subset_closed_ball? (might be easier to guess what the lemma provides)\r\n"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":282,"state":"open","open_date":"2020-11-16T10:54:00Z","update_date":"2022-04-21T00:26:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":281,"state":"closed","open_date":"2020-11-13T23:10:49Z","update_date":"2020-11-28T03:46:15Z","discussion":[{"author":"affeldt-aist","date":"2020-11-18T04:24:58Z","comment":">     * unless applied, where `/=` will simplify.\r\n> \r\n>     * unless one uses `rewrite /mkset`.\r\n\r\nTo confirm. Looking at the diff it seems that we now have from time to time to\r\ndo explicit unfolds and simplifys. Does it mean that this solution is a compromise?"},{"author":"CohenCyril","date":"2020-11-20T16:59:53Z","comment":"> Does it mean that this solution is a compromise?\r\n\r\nTo me these unfolding and simplify are necessary steps to have enough control, and not a compromise."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":280,"state":"closed","open_date":"2020-11-12T10:53:07Z","update_date":"2020-11-28T10:52:38Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":279,"state":"closed","open_date":"2020-11-12T10:29:03Z","update_date":"2020-12-09T04:47:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":278,"state":"closed","open_date":"2020-11-11T15:06:18Z","update_date":"2020-11-11T15:54:13Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":276,"state":"closed","open_date":"2020-11-11T04:53:23Z","update_date":"2020-11-28T10:52:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":275,"state":"closed","open_date":"2020-11-10T10:01:57Z","update_date":"2021-01-13T13:05:10Z","discussion":[{"author":"mkerjean","date":"2020-11-10T10:21:02Z","comment":"> This PR makes MathComp analysis compatible with the master branch of MathComp and [math-comp/real-closed#28](https://github.com/math-comp/real-closed/pull/28).\r\n> \r\n> CC: @affeldt-aist @mkerjean\r\n\r\nThanks ! So `inE` should be replaced by `in_ivt` but not textually ? `inE` can't be adapted to include `in_ivt` ?"},{"author":"pi8027","date":"2020-11-10T10:34:26Z","comment":"@mkerjean Performing `rewrite inE` for `x \\in i` where `i` is an interval now gives us `[x, x] <= i` where `<=` is the subset relation for intervals. So we have to use `in_itv` instead. https://github.com/math-comp/math-comp/blob/72c13992b8961f288c412414fda206213486e25b/mathcomp/algebra/interval.v#L243\r\n\r\nI think now you can rebase your PR #205 on top of this PR or otherwise `cherry-pick` my commit in your PR, to test your PR with the master branch of MathComp."},{"author":"mkerjean","date":"2020-11-10T10:41:49Z","comment":"> @mkerjean Performing `rewrite inE` for `x \\in i` where `i` is an interval now gives us `[x, x] <= i` where `<=` is the subset relation for intervals. So we have to use `in_itv` instead. https://github.com/math-comp/math-comp/blob/72c13992b8961f288c412414fda206213486e25b/mathcomp/algebra/interval.v#L243\r\n\r\nand isn't the fact that `inE` can't apply to intervals an issue for other developments over MathComp ? Do you think this can be corrected at the level of `interval.v` ? "},{"author":"pi8027","date":"2020-11-10T11:38:26Z","comment":"@mkerjean For concrete intervals whose bounds are known to be one of unbounded, open, or close, the former behavior of `inE` is preferable indeed. However, the new interval library (math-comp/math-comp#458) provides a way to reason about intervals abstractly. Intervals are now canonically a `latticeType` (if the underlying type `T` is a `latticeType`) and it allows us to reduce problems about intervals to problems about a lattice. In this case, I think that the new behavior of `inE` is preferable. So I would say it is not an issue we should fix on the MathComp side..."},{"author":"pi8027","date":"2020-11-10T11:48:22Z","comment":"I think @CohenCyril may have an opinion on this issue."},{"author":"CohenCyril","date":"2020-11-10T12:55:37Z","comment":"Indeed, there seems to be a tension between generic intervals `i` and concrete intervals (e.g. `` `[a, b]``), if we want `inE` to be readable even for abstract intervals, preferring the form `` `[x, x] <= i`` is unavoidable... however \r\n1. all are convertible, e.g. all of ``x \\in `[a, b]``, `` `[x, x] <= i`` and `a <= x <= b` are convertible (you could use `inE`, followed by `subitvE` and then there are missing converibiliy lemmas between `<=` and in `le_bound` and `<=` in the underlying ordered Type (I suggest name `leEbound`) and same for `<`). CC @pi8027 \r\n2. if you have an assumption of the form ``xab : x \\in `[a, b]``, you should avoid using either `inE` or `in_itv` and use `(itvP xab)` instead."},{"author":"CohenCyril","date":"2020-12-09T01:31:33Z","comment":"I am switching this PR back to  a draft to prevent untimely merges.\r\nThe reason is that I believe we should release one last version of math-comp/analysis for coq + mathcomp 1.11 with #298 before we merge this one for good.\r\n"},{"author":"pi8027","date":"2020-12-14T12:10:22Z","comment":"`INSTALL.md` has to be changed."},{"author":"pi8027","date":"2020-12-16T13:42:01Z","comment":"I'm fine with the changes done by Cyril and Reynald. Shall we merge? (I hope to take a look at #205 tomorrow. Merging this PR would help its process.)"},{"author":"affeldt-aist","date":"2020-12-21T02:14:37Z","comment":"Let's merge since it is waited for for PR #205."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":273,"state":"closed","open_date":"2020-11-06T10:21:52Z","update_date":"2020-11-18T01:13:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":272,"state":"closed","open_date":"2020-11-06T08:36:54Z","update_date":"2020-11-09T02:48:26Z","discussion":[{"author":"mkerjean","date":"2020-11-06T12:59:11Z","comment":"@affeldt-aist Yes if you think they can be useful (examples are outdated already)"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":270,"state":"closed","open_date":"2020-11-05T03:49:27Z","update_date":"2020-11-05T13:50:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":269,"state":"closed","open_date":"2020-10-27T14:24:50Z","update_date":"2020-10-29T11:00:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":268,"state":"closed","open_date":"2020-10-20T08:46:36Z","update_date":"2020-11-28T10:52:48Z","discussion":[{"author":"CohenCyril","date":"2020-11-10T14:32:30Z","comment":"Fixed and rebased"}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":267,"state":"closed","open_date":"2020-10-12T10:20:30Z","update_date":"2020-11-16T19:39:10Z","discussion":[{"author":"affeldt-aist","date":"2020-11-05T16:31:24Z","comment":"@CohenCyril could you take a look to this PR? do you think we can think about merging in a very near future? (see also the last meeting minutes)"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":266,"state":"closed","open_date":"2020-10-12T09:15:10Z","update_date":"2020-10-26T08:30:06Z","discussion":[{"author":"CohenCyril","date":"2020-10-26T02:10:55Z","comment":"@affeldt-aist please rebase"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":265,"state":"closed","open_date":"2020-10-12T09:06:35Z","update_date":"2020-11-11T05:00:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":264,"state":"closed","open_date":"2020-09-28T03:55:21Z","update_date":"2020-11-09T11:10:09Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":263,"state":"closed","open_date":"2020-09-28T03:53:48Z","update_date":"2020-11-05T13:51:34Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"mkerjean","number":262,"state":"closed","open_date":"2020-09-24T10:06:56Z","update_date":"2021-02-18T19:41:16Z","discussion":[{"author":"affeldt-aist","date":"2020-11-06T03:42:10Z","comment":"Maybe this should now be rebased on top of PR #267 that subsumes PR #183 and is now under review."},{"author":"CohenCyril","date":"2021-02-18T19:37:41Z","comment":"Hi. Did you reopen this PR elsewhere?"},{"author":"mkerjean","date":"2021-02-18T19:41:16Z","comment":"> Hi. Did you reopen this PR elsewhere?\r\n\r\nYes, in the branch `banachsteinhaus`. The squashing of 37commits was too painful. I will PR the new branch once the rebasing on master is done, hopefully tonight. "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":260,"state":"closed","open_date":"2020-09-13T09:05:49Z","update_date":"2020-09-30T04:16:31Z","discussion":[{"author":"CohenCyril","date":"2020-09-25T12:30:49Z","comment":"@affeldt-aist please rebase one more time."}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":258,"state":"closed","open_date":"2020-09-12T07:37:07Z","update_date":"2020-09-15T01:07:58Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":257,"state":"closed","open_date":"2020-09-11T02:23:06Z","update_date":"2020-09-30T04:18:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":256,"state":"closed","open_date":"2020-09-09T03:28:06Z","update_date":"2020-09-25T11:51:50Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":254,"state":"closed","open_date":"2020-09-02T07:37:35Z","update_date":"2020-09-25T11:50:56Z","discussion":[],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":253,"state":"closed","open_date":"2020-08-26T10:19:24Z","update_date":"2020-09-30T04:17:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":252,"state":"closed","open_date":"2020-08-24T08:29:50Z","update_date":"2020-08-25T01:17:00Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":251,"state":"closed","open_date":"2020-08-14T00:50:33Z","update_date":"2020-08-24T08:33:22Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":250,"state":"closed","open_date":"2020-08-11T09:28:11Z","update_date":"2020-08-11T09:30:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":249,"state":"closed","open_date":"2020-08-11T09:06:25Z","update_date":"2020-08-11T09:53:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":248,"state":"closed","open_date":"2020-08-11T07:54:17Z","update_date":"2020-08-11T09:53:06Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":247,"state":"closed","open_date":"2020-08-11T01:26:09Z","update_date":"2020-08-11T09:53:37Z","discussion":[{"author":"CohenCyril","date":"2020-08-11T01:39:22Z","comment":"@affeldt-aist you can merge this at your convenience."}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":246,"state":"closed","open_date":"2020-08-03T13:01:22Z","update_date":"2020-08-11T09:54:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":245,"state":"closed","open_date":"2020-08-03T08:13:49Z","update_date":"2020-08-11T09:53:39Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":244,"state":"closed","open_date":"2020-07-29T10:12:27Z","update_date":"2020-08-08T00:16:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":243,"state":"closed","open_date":"2020-07-29T08:49:26Z","update_date":"2020-08-08T00:16:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":242,"state":"closed","open_date":"2020-07-28T12:47:46Z","update_date":"2020-09-25T12:21:21Z","discussion":[{"author":"CohenCyril","date":"2020-07-29T08:06:34Z","comment":"That's great!!\r\n- @drouhling can you add a `CHANGELOG_UNRELEASED.md` entry?\r\n- @pi8027 can you verify the new hierarchy?"},{"author":"pi8027","date":"2020-07-29T11:17:48Z","comment":"@CohenCyril @drouhling Done, but I didn't check the implementation by myself yet. There are 5 missing joins:\r\n```coq\r\nFail check_join CompletePseudoMetric.type GRing.Lmodule.type CompleteNormedModule.type.\r\nFail check_join CompletePseudoMetric.type GRing.Zmodule.type CompleteNormedModule.type.\r\nFail check_join CompletePseudoMetric.type NormedModule.type CompleteNormedModule.type.\r\nFail check_join CompletePseudoMetric.type Num.NormedZmodule.type CompleteNormedModule.type.\r\nFail check_join CompletePseudoMetric.type PseudoMetricNormedZmodule.type CompleteNormedModule.type.\r\n```"},{"author":"drouhling","date":"2020-07-29T13:22:01Z","comment":">     * @drouhling can you add a `CHANGELOG_UNRELEASED.md` entry?\r\n\r\nDone.\r\n\r\n> ```coq\r\n> Fail check_join CompletePseudoMetric.type GRing.Lmodule.type CompleteNormedModule.type.\r\n> Fail check_join CompletePseudoMetric.type GRing.Zmodule.type CompleteNormedModule.type.\r\n> Fail check_join CompletePseudoMetric.type NormedModule.type CompleteNormedModule.type.\r\n> Fail check_join CompletePseudoMetric.type Num.NormedZmodule.type CompleteNormedModule.type.\r\n> Fail check_join CompletePseudoMetric.type PseudoMetricNormedZmodule.type CompleteNormedModule.type.\r\n> ```\r\n\r\nI added the missing joins.\r\n"},{"author":"drouhling","date":"2020-07-29T13:24:52Z","comment":"In addition to the asked modifications, I updated the `misc/uniform_bigO.v` file."},{"author":"pi8027","date":"2020-07-29T14:57:25Z","comment":"Now the new hierarchy is correct. :)"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":241,"state":"closed","open_date":"2020-07-26T16:59:46Z","update_date":"2020-07-29T10:15:38Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":240,"state":"closed","open_date":"2020-07-26T14:51:04Z","update_date":"2020-07-27T12:46:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":239,"state":"closed","open_date":"2020-07-26T14:25:36Z","update_date":"2020-07-29T10:14:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":238,"state":"closed","open_date":"2020-07-21T23:50:21Z","update_date":"2020-07-22T17:14:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":237,"state":"closed","open_date":"2020-07-20T12:30:19Z","update_date":"2020-09-30T04:17:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":236,"state":"closed","open_date":"2020-07-20T12:21:45Z","update_date":"2020-07-27T18:35:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":235,"state":"closed","open_date":"2020-06-28T12:29:41Z","update_date":"2020-07-13T14:44:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":234,"state":"closed","open_date":"2020-06-22T08:08:47Z","update_date":"2020-07-08T14:10:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":233,"state":"closed","open_date":"2020-06-19T11:04:27Z","update_date":"2020-07-27T12:29:56Z","discussion":[{"author":"affeldt-aist","date":"2020-07-16T16:55:10Z","comment":"is it ok to merge?"},{"author":"CohenCyril","date":"2020-07-16T18:14:49Z","comment":"> is it ok to merge?\r\n\r\nHi, sorry @affeldt-aist I did not notice the transition to \"ready to review\". I will take a look asap\r\n\r\n"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":232,"state":"closed","open_date":"2020-06-19T06:28:27Z","update_date":"2020-08-07T14:26:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":230,"state":"closed","open_date":"2020-06-17T19:02:18Z","update_date":"2020-06-19T05:14:33Z","discussion":[{"author":"pi8027","date":"2020-06-17T19:03:40Z","comment":"@mkerjean @affeldt-aist Could you rework #180 using this fix?"},{"author":"affeldt-aist","date":"2020-06-17T19:05:23Z","comment":"> @mkerjean @affeldt-aist Could you rework #180 using this fix?\r\n\r\nWill do. Thank you!"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":229,"state":"closed","open_date":"2020-06-17T14:59:30Z","update_date":"2020-07-20T12:58:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":227,"state":"closed","open_date":"2020-06-11T03:09:45Z","update_date":"2020-06-11T15:44:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":226,"state":"closed","open_date":"2020-06-10T14:06:30Z","update_date":"2020-06-11T03:12:25Z","discussion":[{"author":"CohenCyril","date":"2020-06-10T14:06:39Z","comment":"@affeldt-aist ok with this?"},{"author":"affeldt-aist","date":"2020-06-10T14:08:48Z","comment":"> @affeldt-aist ok with this?\r\n\r\nYes, that's better."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":225,"state":"closed","open_date":"2020-06-10T13:34:13Z","update_date":"2020-06-11T15:44:17Z","discussion":[{"author":"affeldt-aist","date":"2020-06-10T13:36:40Z","comment":"I guess we'd better merge PR #218 before this one @CohenCyril "},{"author":"CohenCyril","date":"2020-06-10T14:34:41Z","comment":"Since we will soon release 0.3.1, which will be incompatible with mathcomp 1.11+beta1, I suggest we remove all the technical explantations about mathcomp beta and analysis 0.3.0..."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":224,"state":"closed","open_date":"2020-06-09T23:33:36Z","update_date":"2021-08-05T09:46:48Z","discussion":[{"author":"CohenCyril","date":"2020-10-01T00:10:28Z","comment":"@affeldt-aist this should do the trick"},{"author":"CohenCyril","date":"2020-10-01T00:10:40Z","comment":"(beware not to put ssrsearch in final code)"},{"author":"affeldt-aist","date":"2020-10-26T11:02:48Z","comment":"> @affeldt-aist this should do the trick\r\n\r\nThe log shows that compilation is failing when running into big_setU1 which is a lemma of finmap."},{"author":"affeldt-aist","date":"2021-05-09T09:48:24Z","comment":"What about closing this draft PR now that most of it (Lebesgue measure) has been moved to PR #371 \r\nand the rest of it (that part in wip) has been moved to PR #378 ?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":223,"state":"closed","open_date":"2020-06-09T23:31:21Z","update_date":"2020-07-24T13:44:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":222,"state":"closed","open_date":"2020-06-05T22:49:28Z","update_date":"2020-06-11T15:43:56Z","discussion":[{"author":"CohenCyril","date":"2020-06-11T00:19:09Z","comment":"please rebase on top of master"}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":221,"state":"closed","open_date":"2020-06-05T15:32:25Z","update_date":"2020-06-11T03:12:35Z","discussion":[],"tags":[{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"}],"pull_requests":[]},{"author":"affeldt-aist","number":220,"state":"closed","open_date":"2020-06-05T14:59:37Z","update_date":"2020-06-17T19:20:51Z","discussion":[],"tags":[{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":219,"state":"closed","open_date":"2020-06-05T14:10:07Z","update_date":"2020-06-11T03:12:41Z","discussion":[{"author":"affeldt-aist","date":"2020-06-05T14:12:29Z","comment":"Is it ok to merge quickly? (There is certainly another discussion to have about the naming of such lemmas but it can be deferred to later.)"}],"tags":[{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"}],"pull_requests":[]},{"author":"CohenCyril","number":218,"state":"closed","open_date":"2020-06-04T17:00:26Z","update_date":"2020-06-11T03:12:47Z","discussion":[{"author":"affeldt-aist","date":"2020-06-10T14:12:53Z","comment":"I don't get the failure of the CI (the one with opam). It looks like it is trying to install analysis 0.2.3...\r\n(By the way, this branch compiles on my computer using the latest MathComp 1.11.0 opam packages.)"},{"author":"erikmd","date":"2020-06-10T14:19:27Z","comment":"@affeldt-aist I've just seen your comment; maybe this is due to the fact the line\r\nhttps://github.com/math-comp/analysis/blob/fac11966aa94d3bab0949dfa8414aca42e65bd93/.travis.yml#L25\r\ndoes not mention a version, so opam takes the first version it is aware from coq-released (0.2.3)\r\nso maybe you could try replacing it with this:\r\n```\r\n- docker exec CI /bin/bash --login -c \"opam pin add -n -y -k path coq-mathcomp-${CONTRIB}.dev .\"\r\n```\r\n?"},{"author":"erikmd","date":"2020-06-10T14:20:32Z","comment":"or alternatively, add\r\n```\r\nversion: \"dev\"\r\n```\r\nin\r\nhttps://github.com/math-comp/analysis/blob/master/opam"},{"author":"CohenCyril","date":"2020-06-10T14:21:21Z","comment":"> does not mention a version, so opam takes the first version it is aware from coq-released (0.2.3)\r\n\r\nI thought  `opam pin add .` took `./` as the source..."},{"author":"erikmd","date":"2020-06-10T14:22:29Z","comment":"yes but if no version is mentioned, the algorithm is a bit non-intuitive (it does not defaults to dev…)\r\n\r\n(There had been a related discussion in a coq issue, I'll try to re-find it just FTR)"},{"author":"erikmd","date":"2020-06-10T14:27:43Z","comment":"OK, the discussion I was thinking about is this PR:\r\n\r\nhttps://github.com/coq/coq/pull/11038\r\n\r\nwhich quotes the following comment in the `ocaml/opam` repo:\r\n\r\nhttps://github.com/ocaml/opam/issues/2932#issue-228248081\r\n\r\n> AFAIU, currently opam chooses the version for pinned packages as follow:\r\n> \r\n> 1. use the version specified on the command line, if any\r\n> 2. use the `version:` field in the opam file of the pinned package, if any\r\n> 3. **use the latest version available in the package repository, if a package with the same name already exists**\r\n>     [which explains the fact it guessed the 0.2.3 version]\r\n> 4. ~unknown with opam1 and `~dev` (+dev?) with opam2\r\n\r\n(but I don't know if this is also documented in the OPAM manual)"},{"author":"affeldt-aist","date":"2020-06-10T14:28:27Z","comment":"(I pushed the fix suggested by @erikmd but now the CI does not trigger the check using opam anymore...)"},{"author":"erikmd","date":"2020-06-10T14:38:35Z","comment":"> (I pushed the fix suggested by @erikmd but now the CI does not trigger the check using opam anymore...)\r\n\r\nActually according to [this page](https://travis-ci.org/github/math-comp/analysis/pull_requests) it seems the build was indeed triggered (but the status feedback was lost on github side):\r\n\r\nhttps://travis-ci.org/github/math-comp/analysis/jobs/696872899\r\n\r\nand the error is now different:\r\n\r\n```\r\n<><> Synchronising pinned packages ><><><><><><><><><><><><><><><><><><><><><><>\r\n[coq-mathcomp-analysis.dev] no changes from file:///home/coq/analysis\r\n\r\nThe following dependencies couldn't be met:\r\n  - coq-mathcomp-analysis -> coq-mathcomp-finmap >= 1.5.0\r\n      no matching version\r\n\r\nNo solution found, exiting\r\n```"},{"author":"affeldt-aist","date":"2020-06-10T15:23:23Z","comment":"I see. Since `coq-mathcomp-finmap` is in `extra-dev`, it fails."},{"author":"CohenCyril","date":"2020-06-10T15:35:35Z","comment":"> I see. Since `coq-mathcomp-finmap` is in `extra-dev`, it fails.\r\n\r\nWell, we should not start making packages from the leafs of the dependency graph :laughing:.\r\nFinmap should be ok, I am currently porting multinomials and should release real-closed soonish... etc"},{"author":"affeldt-aist","date":"2020-06-10T21:50:02Z","comment":"The new error is still puzzling:\r\n```\r\n# File \"./theories/normedtype.v\", line 1439, characters 6-22:\r\n# Error: The LHS of ltxI\r\n#     (_ < _ `&` _)%O\r\n```\r\nThere is no `ltxI` in the source code."},{"author":"CohenCyril","date":"2020-06-10T22:15:16Z","comment":"> The new error is still puzzling:\r\n> \r\n> ```\r\n> # File \"./theories/normedtype.v\", line 1439, characters 6-22:\r\n> # Error: The LHS of ltxI\r\n> #     (_ < _ `&` _)%O\r\n> ```\r\n> \r\n> There is no `ltxI` in the source code.\r\n\r\nYeah, the general problem seems to be the wrong codebase is pulled."},{"author":"affeldt-aist","date":"2020-06-10T22:48:31Z","comment":"It looks like it is pulling 4b3281e45c570ca3ee21659b09e8ba8707f250d2."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":216,"state":"closed","open_date":"2020-06-03T09:58:05Z","update_date":"2020-07-20T12:40:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":215,"state":"closed","open_date":"2020-05-29T13:44:33Z","update_date":"2020-06-10T14:12:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":213,"state":"closed","open_date":"2020-05-26T19:25:50Z","update_date":"2020-06-11T15:44:34Z","discussion":[{"author":"affeldt-aist","date":"2020-06-04T17:32:00Z","comment":"TODO: make the tag format precise. @CohenCyril "},{"author":"CohenCyril","date":"2020-06-04T17:36:52Z","comment":"> TODO: make the tag format precise. @CohenCyril\r\n\r\ndone in b264352aaa016e4cdf06054f412af0018bb57fc5"},{"author":"CohenCyril","date":"2020-06-04T22:32:51Z","comment":"@affeldt-aist should we merge this in the Wiki?"},{"author":"affeldt-aist","date":"2020-06-04T22:37:18Z","comment":"> should we merge this in the Wiki?\r\n\r\nYou mean merge in master (in which case I am ok) or copy-paste in the wiki (in which case I would ask why not merge in master and put a link from the wiki to the .md file)?"},{"author":"CohenCyril","date":"2020-06-04T22:40:01Z","comment":"> > should we merge this in the Wiki?\r\n> \r\n> You mean merge in master (in which case I am ok) or copy-paste in the wiki (in which case I would ask why not merge in master and put a link from the wiki to the .md file)?\r\n\r\nSince this is a release process tied to github and not to the distributed content, I think it should not be in math-comp/analysis, but math-comp/analysis.wiki...."},{"author":"affeldt-aist","date":"2020-06-05T09:43:20Z","comment":"I moved the file to `analysis.wiki`. We can maybe close without merging?\r\n\r\n[link to file on the wiki](https://github.com/math-comp/analysis/wiki/HOWTORELEASE)"}],"tags":[{"tag":"documentation :memo:","description":"This issue/PR is about documentation of the library / repository"}],"pull_requests":[]},{"author":"affeldt-aist","number":212,"state":"closed","open_date":"2020-05-25T20:42:11Z","update_date":"2020-06-11T03:12:54Z","discussion":[{"author":"affeldt-aist","date":"2020-05-25T20:43:43Z","comment":"@CohenCyril @mkerjean @strub Here is a tentative changelog, as discussed earlier today, please amend."},{"author":"affeldt-aist","date":"2020-05-26T15:37:28Z","comment":"@CohenCyril Is it ok to squash and merge? (I understand that the changelog is not perfect but we'll do better from now on.)"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":211,"state":"closed","open_date":"2020-05-23T19:29:53Z","update_date":"2020-07-19T19:00:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":210,"state":"closed","open_date":"2020-05-23T01:36:43Z","update_date":"2020-06-11T03:13:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":209,"state":"closed","open_date":"2020-05-21T17:30:18Z","update_date":"2020-05-21T17:49:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":208,"state":"closed","open_date":"2020-05-21T01:15:33Z","update_date":"2020-06-11T03:15:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":207,"state":"open","open_date":"2020-05-21T00:12:24Z","update_date":"2022-04-21T00:26:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"vlj","number":206,"state":"closed","open_date":"2020-05-18T21:11:26Z","update_date":"2020-11-10T14:27:26Z","discussion":[{"author":"CohenCyril","date":"2020-05-19T16:47:52Z","comment":"Hi @vlj thanks for your contribution, I will take a look a deeper look next week."},{"author":"CohenCyril","date":"2020-08-07T22:02:20Z","comment":"@vlj  thanks for your contribution, I think once the proofs are tidied we can merge, indeed proofs in math-comp/analysis should adhere to [math-comp core contributing style](https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md) and more particularily [the proof style](https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md#proof-style).\r\nIn particular:\r\n- The only period symbol (`.`) in a line should be the last character of the line.\r\n- When exactly two subgoals are generated, the first one should be indented and second one should not. No bullets should be used.\r\nSorry for the delay, and please do not hesitate to ask questions, I will try to be more reactive now!\r\n"},{"author":"vlj","date":"2020-08-23T09:39:30Z","comment":"About the first convention is it accepted to use the semicolon symbol even if only a single goal is focused?"},{"author":"CohenCyril","date":"2020-08-24T11:53:25Z","comment":"> About the first convention is it accepted to use the semicolon symbol even if only a single goal is focused?\r\n\r\nYes, in mathcomp proof style conventions, the semicolon is not used regardless of how many goals are focused, and its purpose is to group tactics in a line that makes a single, substantial step of reasoning."},{"author":"CohenCyril","date":"2020-08-24T12:36:00Z","comment":"Hi @vlj, I refactored and cleaned your code. The wrapper lemmas you defined were not necessary if you partially apply the wanted lemmas. Some intermediate definitions were superfluous. About the `bool` vs `Prop` thing, it is indeed expected that lattice relations are in `bool` while the classic subset relation is in `Prop`. Indeed `asbool` was needed but should be used minimally.\r\nSome pieces of code are still missing to turn sets into a full-fledged distributive lattice with top and bottom and complement. We could merge as such and open a new PR to complement it...\r\nFrom the naming of your (former) wrapper lemmas, I also suspect that many of our set lemmas in `classical_sets.v` are not following the naming conventions from `finset.v` or `order.v` (also cf #252), hence one should open yet another PR to fix them. (ping @affeldt-aist)"},{"author":"affeldt-aist","date":"2020-08-25T01:07:27Z","comment":"`setIDl` was renamed to `setIUl` by a recent PR (hence the rebase/push force).\r\n`classical_sets.v` was lacking `setUK`, etc. lemmas.\r\nShould `setI_meet` be renamed `setIidPlE` and moved near `setIidPl`?"},{"author":"vlj","date":"2020-08-26T18:40:39Z","comment":"Thanks for the refactoring and renaming !\r\nI added the canonical structure for top and bottom. I didn't manage to get Order.BLattice.Mixin to accept the sub0set lemma so I introduced an intermediate fact that uses the asboolP. There is no counterpart for the setTsub so I directly write the one that fits the input of Order.TBLattice.Mixin."},{"author":"vlj","date":"2020-09-12T21:49:11Z","comment":"I added complement and sub."},{"author":"CohenCyril","date":"2020-09-25T12:17:48Z","comment":"Additionally, the changelog should document the new canonical instances and the `E` lemmas."},{"author":"vlj","date":"2020-09-26T15:33:06Z","comment":"I merged and added the lemmas suggested."},{"author":"CohenCyril","date":"2020-09-26T19:17:00Z","comment":"Great! Can you squash and rebase?"},{"author":"vlj","date":"2020-09-28T20:41:31Z","comment":"Working on it, but it's WIP."},{"author":"vlj","date":"2020-09-29T11:46:43Z","comment":"Is mathcomp analysis supposed to be built against dev branch of mathcomp ? I need the contra_not_neq lemma which seems to have been introduced recently in ssrbool."},{"author":"CohenCyril","date":"2020-09-29T11:53:22Z","comment":"Indeed, @vlj we build master against stable releases, you may add a copy of `contra_not_neq` in `boolp.v`, with a comment saying that is material that will be subsumed by mathcomp 1.12, and you should open an issue after the merge of the PR to remind us to remove it as soon as we switch to mathcomp 1.12 when it is release"},{"author":"vlj","date":"2020-09-30T12:45:14Z","comment":"I modified the proper_subset definition. I had some troubles writing the properEset and I'm not sure it's the easiest way to do ; it uses a couple intermediate lemma, setDset0 :  (Y `\\` X) != set0 <-> exists2 a : T, Y a & ~ X a. and subsetNeqSetDnonempty (H : X `<=` Y) : X != Y <-> (Y `\\` X) != set0. I think setDset0 may be useful for other purpose, I don't know if subsetNeqSetDnonempty  is too specific or not. I'm also not very experimented with the asbool_* lemmas so maybe it's not optimal either."},{"author":"vlj","date":"2020-10-04T10:48:57Z","comment":"Added proper_neqAsubset lemma."},{"author":"affeldt-aist","date":"2020-11-05T01:38:57Z","comment":"> The `Exports` module misses a few canonicals: `Internal.blatticeType` ... `Internal.ctbDistrLatticeType`. Also, I think `subEset` should be renamed `subsetEset`, and you should add as well `` properEset : (X < Y)%O = (X `<` Y) ``, `` subEset : (X `\\` Y)%O = (X `\\` Y) ``, `` complEset : (~` X)%O = ~` X ``, `botEset : 0%O = set0` , `topEset : 1%O = setT`.\r\n\r\nIt looks like these changes have been performed.\r\n"},{"author":"pi8027","date":"2020-11-05T11:04:16Z","comment":"@affeldt-aist Could you request me a review here just not to forget about it? Thanks."},{"author":"affeldt-aist","date":"2020-11-05T11:06:15Z","comment":"> @affeldt-aist Could you request me a review here just not to forget about it? Thanks.\r\n\r\nSure. Thank you!"}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":205,"state":"closed","open_date":"2020-05-15T23:12:44Z","update_date":"2021-03-23T03:15:15Z","discussion":[{"author":"CohenCyril","date":"2020-05-26T17:59:43Z","comment":"I am not sure it is the problem, but I see one possible explanation: you are missing the closure under the join, e.g. solution to `GRing.Ring.sort ?1 = GRing.LModule.sort ?2`, must go through `GRing.LAlgebra` and `GRing.Field.sort ?1 = GRing.LModule.sort ?2` must go through `FieldExtension`. So it seems to me that providing canonical structures only up to `lmodType` may cause unification failures and the fix is to state and make canonical that `F` is a (trivial) field extension over itself...\r\n"},{"author":"mkerjean","date":"2020-05-29T15:37:49Z","comment":"> I am not sure it is the problem, but I see one possible explanation: you are missing the closure under the join, e.g. solution to `GRing.Ring.sort ?1 = GRing.LModule.sort ?2`, must go through `GRing.LAlgebra` and `GRing.Field.sort ?1 = GRing.LModule.sort ?2` must go through `FieldExtension`. So it seems to me that providing canonical structures only up to `lmodType` may cause unification failures and the fix is to state and make canonical that `F` is a (trivial) field extension over itself...\r\n\r\nWould that be a way to resolve the rift between `NormedModule.lmodType` and  `numfield_lmodType` ? I'm puzzled about wether a new structure mimicking `numFieldType` but with a forgetful functor to lmodType is necessary. \r\nAlso where can I find `FieldExtenstion` ? "},{"author":"CohenCyril","date":"2020-05-29T21:34:54Z","comment":"> > I am not sure it is the problem, but I see one possible explanation: you are missing the closure under the join, e.g. solution to `GRing.Ring.sort ?1 = GRing.LModule.sort ?2`, must go through `GRing.LAlgebra` and `GRing.Field.sort ?1 = GRing.LModule.sort ?2` must go through `FieldExtension`. So it seems to me that providing canonical structures only up to `lmodType` may cause unification failures and the fix is to state and make canonical that `F` is a (trivial) field extension over itself...\r\n> \r\n> Would that be a way to resolve the rift between `NormedModule.lmodType` and `numfield_lmodType` ? I'm puzzled about wether a new structure mimicking `numFieldType` but with a forgetful functor to lmodType is necessary.\r\n\r\nI do not think a new structure is necessary. But I could be wrong... but it's difficult to say until we check whether all the joins can be defined...\r\n\r\n> Also where can I find `FieldExtenstion` ?\r\n\r\nhttps://github.com/math-comp/math-comp/blob/master/mathcomp/field/fieldext.v#L10\r\n\r\n"},{"author":"pi8027","date":"2020-09-23T09:27:58Z","comment":"PR math-comp/math-comp#591 reimplements the solution to the issue of ambiguous paths (math-comp/math-comp#546) using primitive class records. I suggest using the new one to work on this PR. If there is a problem, please let me know.\r\n"},{"author":"pi8027","date":"2020-12-09T21:35:26Z","comment":"@mkerjean Do you need any help? I would like to take a look at this PR after merging #275."},{"author":"mkerjean","date":"2020-12-09T21:43:34Z","comment":"> @mkerjean Do you need any help? I would like to take a look at this PR after merging #275.\r\n\r\nYes ! I think this PR begins to look better. I moved your [previous](https://github.com/math-comp/analysis/blob/b3a67378443dc35cd788b02dc384a5f3a4949935/theories/topology.v#L4329) definitions at the end of `topology.v` , as they are now needed by `ereal.v`. \r\n\r\nI would be especially happy to have your opinion on [these](https://github.com/math-comp/analysis/blob/b3a67378443dc35cd788b02dc384a5f3a4949935/theories/normedtype.v#L1258) new definitions : should normedModType structures on `rcfType`, `realType` and others be defined this way ? Shoud we define them without a clone of the structure using `_^o` ? "},{"author":"mkerjean","date":"2020-12-09T21:48:03Z","comment":"@affeldt-aist The way I did it, taking `^o` out of `ereal.v` as the unfortunate consequence that `ereal_hausdorff` needs to be explicitely used sometimes ([here](https://github.com/math-comp/analysis/blob/b3a67378443dc35cd788b02dc384a5f3a4949935/theories/measure.v#L312) for example). Do you see why ?  "},{"author":"affeldt-aist","date":"2020-12-10T02:10:08Z","comment":"> @affeldt-aist The way I did it, taking `^o` out of `ereal.v` as the unfortunate consequence that `ereal_hausdorff` needs to be explicitely used sometimes ([here](https://github.com/math-comp/analysis/blob/b3a67378443dc35cd788b02dc384a5f3a4949935/theories/measure.v#L312) for example). Do you see why ?\r\n\r\nIt seems to be fixable by changing the `Hint` (I committed)."},{"author":"pi8027","date":"2020-12-17T09:44:24Z","comment":"FTR, `sequences.v` still has some remaining `^o`."},{"author":"mkerjean","date":"2020-12-17T10:01:28Z","comment":"> FTR, `sequences.v` still has some remaining `^o`.\r\n\r\nI'll try to do that today, thanks"},{"author":"CohenCyril","date":"2020-12-17T16:39:05Z","comment":"Left todo before merge :\r\n- [ ] encapsulate \"non-forgetful inheritance\" instances inside a module (e.g `NumFieldNormed`) and document it in the headers and import the module in the subsequent files of the library,\r\n- [ ] add a `CHANGELOG_UNRELEASED.md` entry,\r\n- [ ] squash & rebase on top of master"},{"author":"pi8027","date":"2020-12-18T14:17:27Z","comment":"FYI, I intend to modify `hierarchy.ml` at some point to make sure there is no missing join in this PR, but I'm not sure if it is doable."},{"author":"mkerjean","date":"2020-12-18T14:20:55Z","comment":"> FYI, I intend to modify `hierarchy.ml` at some point to make sure there is no missing join in this PR, but I'm not sure if it is doable.\r\n\r\nThat woudl be great! I'm afraid that [these](https://github.com/math-comp/analysis/blob/b3a67378443dc35cd788b02dc384a5f3a4949935/theories/normedtype.v#L1258) definitions should be done directly one the hierarchy of topological structures. Do you want to merge already the cleanup you did in your fork of the PR ? "},{"author":"pi8027","date":"2020-12-18T14:58:14Z","comment":"> That woudl be great! I'm afraid that [these](https://github.com/math-comp/analysis/blob/b3a67378443dc35cd788b02dc384a5f3a4949935/theories/normedtype.v#L1258) definitions should be done directly one the hierarchy of topological structures.\r\n\r\nI'm not sure if I understood what you say, but is it the same as the following one?:\r\n\r\n> I would be especially happy to have your opinion on [these](https://github.com/math-comp/analysis/blob/b3a67378443dc35cd788b02dc384a5f3a4949935/theories/normedtype.v#L1258) new definitions : should normedModType structures on `rcfType`, `realType` and others be defined this way ? Shoud we define them without a clone of the structure using `_^o` ?\r\n\r\nOK, I actually did not answer this. I think we should define a `regular` instance for each topological structure (pointed, filtered, topological, normed modules, etc.), but not for each numeric field structure (`rcfType`, `realType`, etc.), and then define instances for non-forgetful inheritance based on them. These `regular` instances solve unification problems of the form `Pointed.sort ?1 = regular ?2`, `Filtered.sort ?1 = regular ?2`, and so on, and then force `?2` to be canonically a `numFieldType`. Since other numeric field structures are canonically `numFieldType`, we do not need `regular` instances for them. Also, if we define such `regular` instances, they will be redundant with ones for `numFieldType`.\r\n\r\n> Do you want to merge already the cleanup you did in your fork of the PR ?\r\n\r\nNo (I mean, not now). I'd like to wait for #275."},{"author":"mkerjean","date":"2020-12-18T15:06:49Z","comment":"> > That woudl be great! I'm afraid that [these](https://github.com/math-comp/analysis/blob/b3a67378443dc35cd788b02dc384a5f3a4949935/theories/normedtype.v#L1258) definitions should be done directly one the hierarchy of topological structures.\r\n> \r\n> I'm not sure if I understood what you say, but is it the same as the following one?:\r\n> \r\n> > I would be especially happy to have your opinion on [these](https://github.com/math-comp/analysis/blob/b3a67378443dc35cd788b02dc384a5f3a4949935/theories/normedtype.v#L1258) new definitions : should normedModType structures on `rcfType`, `realType` and others be defined this way ? Shoud we define them without a clone of the structure using `_^o` ?\r\n> \r\n> OK, I actually did not answer this. I think we should define a `regular` instance for each topological structure (pointed, filtered, topological, normed modules, etc.), but not for each numeric field structure (`rcfType`, `realType`, etc.), and then define instances for non-forgetful inheritance based on them. These `regular` instances solve unification problems of the form `Pointed.sort ?1 = regular ?2`, `Filtered.sort ?1 = regular ?2`, and so on, and then force `?2` to be canonically a `numFieldType`. Since other numeric field structures are canonically `numFieldType`, we do not need `regular` instances for them. Also, if we define such `regular` instances, they will be redundant with ones for `numFieldType`.\r\n> \r\nIndeed, it was the same question. Thanks for your explanations. So we are ok for now, and  wait for PR#275 to be merged to rebase.\r\n\r\n> > Do you want to merge already the cleanup you did in your fork of the PR ?\r\n> \r\n> No (I mean, not now). I'd like to wait for #275.\r\n"},{"author":"pi8027","date":"2020-12-21T07:12:57Z","comment":"I'm working on a fix for this PR. I suggest not to touch this branch until further notice so that we do not duplicate our efforts."},{"author":"pi8027","date":"2020-12-22T13:27:47Z","comment":"I still have to fix canonical declarations, but I do not see any serious unfixable issues. Here is the inheritance diagram excluding `countalg` and `finalg` structures:\r\n![hierarchy](https://user-images.githubusercontent.com/111003/102892903-f1adf680-44a3-11eb-9a31-68c93a43ba7c.png)\r\n"},{"author":"pi8027","date":"2020-12-25T22:13:31Z","comment":"I made some progress. See: https://github.com/pi8027/analysis/tree/numfield_topology.\r\n\r\nHere is the list of remaining issues I discovered:\r\n- Currently, the smallest `ssralg`/`ssrnum` structure that inherits from `pointedType` is `numFieldType` as in the above diagram, and the following `R_pointedType` (which improperly make `numDomainType` inheriting from `pointedType`) has been removed. https://github.com/math-comp/analysis/blob/823ad8d21b4305b111152e59c3fe036d49a8d960/theories/topology.v#L3902 As a consequence of the removal, I had to put `^o` back in the following two places: https://github.com/math-comp/analysis/blob/e954498980cca73b34f32b5ca86c92b6973479ec/theories/normedtype.v#L301 https://github.com/math-comp/analysis/blob/e954498980cca73b34f32b5ca86c92b6973479ec/theories/normedtype.v#L322 I'd like to hear @CohenCyril's opinion on whether we should make `numDomainType` inheriting from `pointedType` properly to fix this or not. I think that downsides to doing so are that,\r\n  1. `normedZmodType` has also to inherit from `pointedType` to avoid ambiguous join (if we simply add an edge from `pointedType` to `numDomainType`, `pointedType` and `zmodType` have two joins: `numDomainType` and `pseudoMetricNormedZmodType`),\r\n  2. then `pseudoMetricNormedZmodType` has also to inherit from `pointedType` *by non-forgetful inheritance* to avoid ambiguous coercion paths (I mean, in the definition of the `pseudoMetricNormedZmodType`, the `pointedType` mixin has to be removed from the class record and derived from the `zmodType` mixin instead), and\r\n  3. we have to be really careful not to introduce conversion issues of `pointedType` instances.\r\n- I had to patch the proof of `cvg_norm` but do not understand why. https://github.com/math-comp/analysis/commit/e954498980cca73b34f32b5ca86c92b6973479ec#diff-ec3855f35a085739515162cb2620b5daea6488b737c11df25d618370adc5e240R2595-R2596\r\n- There is only one remaining explicit application of `harmonic`. I think this is unfixable. https://github.com/math-comp/analysis/blob/e954498980cca73b34f32b5ca86c92b6973479ec/theories/sequences.v#L693"},{"author":"mkerjean","date":"2021-01-04T09:53:57Z","comment":"> I made some progress. See: https://github.com/pi8027/analysis/tree/numfield_topology.\r\n\r\nCould you describe the changes you made to `normedtype.v` in this branch, in particular concerning the module `nonforgetful_inheritance` ? Is it mainly a reordering of the deleted canonical definitions, or are they new structures at stakes ?\r\n\r\n"},{"author":"pi8027","date":"2021-01-04T11:01:49Z","comment":"> > I made some progress. See: https://github.com/pi8027/analysis/tree/numfield_topology.\r\n> \r\n> Could you describe the changes you made to `normedtype.v` in this branch, in particular concerning the module `nonforgetful_inheritance` ? Is it mainly a reordering of the deleted canonical definitions, or are they new structures at stakes ?\r\n\r\n@mkerjean Since Coq gives precedence to the oldest coercion path between two coercion classes, the coercion from `realType` (and other structures that inherit from `numFieldType`) to `normedModType` (and `pseudoMetricNormedZmodType`) has to be declared before one from `numFieldType` to `normedModType`. So I reordered them upside down (from `realType` to `numFieldType` ordering). A bunch of missing (non-trivial) joins have also been added, e.g., the join of `numDomainType` and `normedModType` should be `numFieldType`."},{"author":"pi8027","date":"2021-01-13T18:51:04Z","comment":"I will unlikely be able to make more progress until Feb 2. Also, I need feedback from Cyril to make more progress anyway. (No pressure intended.)"},{"author":"mkerjean","date":"2021-01-13T18:58:22Z","comment":"> I will unlikely be able to make more progress until Feb 2. Also, I need feedback from Cyril to make more progress anyway. (No pressure intended.)\r\n\r\nThe status of this PR could be discussed in the next Analysis meeting. I am waiting for it to be merged to rebase the PRs related to Hahn Banach, Banach Steinhauss and holomorpy on it. "},{"author":"CohenCyril","date":"2021-01-14T00:02:02Z","comment":"Ah sorry, I've been kind of busy...\r\nThe problem is that forgetful inheritance from mathcomp analysis to mathcomp (core) is not possible in the current state of affairs, and altering mathcomp with anything that might lead to to blowup in Galois is risky, so I'm afraid we cannot do a proper inheritance between `numDomainType` and `pointedType` and we'll have to go to the non forgetful one, unless I missed something...\r\n"},{"author":"mkerjean","date":"2021-02-17T15:40:48Z","comment":"Did you had a chance to merge your fork of the PR @pi8027  ? Should this branch be merged with master afterwards @CohenCyril  ? See the [todos](https://github.com/math-comp/analysis/wiki/2021-01-26-Meeting) from the last meeting."},{"author":"affeldt-aist","date":"2021-03-11T15:23:57Z","comment":"small questions about this PR:\r\n- should `default.nix` be changed? (l.49 mentions `numfield_topology` which is this very branch) @CohenCyril \r\n- in `ereal.v`, `lee_fin`, `lte_fin`, `lee_tofin`, `lte_tofin` should use `%O` or` %R`? @pi8027 \r\n"},{"author":"affeldt-aist","date":"2021-03-11T15:40:51Z","comment":"I tried to reflect the changes in the changelog but I am not sure it is good enough. You may want to take a look at it."},{"author":"affeldt-aist","date":"2021-03-12T04:22:02Z","comment":"@pi8027 maybe we should put a date to the diagram to avoid any confusion, or do you have a more recent one?"},{"author":"pi8027","date":"2021-03-12T05:13:42Z","comment":"> in `ereal.v`, `lee_fin`, `lte_fin`, `lee_tofin`, `lte_tofin` should use `%O` or` %R`? @pi8027\r\n\r\nThe LHS and RHS of `lee_fin` are inequations of extended reals and a numeric domain, and should use `ereal_scope` and `ring_scope`, respectively. However, the latter one should be `order_scope` if we generalize it to `porderType`.\r\n\r\n> @pi8027 maybe we should put a date to the diagram to avoid any confusion, or do you have a more recent one?\r\n\r\nhttps://github.com/math-comp/analysis/pull/205#issuecomment-749539719 is up to date."},{"author":"pi8027","date":"2021-03-12T05:23:16Z","comment":"In the case you need the dot file, here it is: [hierarchy.dot](https://github.com/math-comp/analysis/files/6127770/hierarchy.txt).\r\n"},{"author":"affeldt-aist","date":"2021-03-18T08:20:23Z","comment":"> The LHS and RHS of `lee_fin` are inequations of extended reals and a numeric domain, and should use `ereal_scope` and `ring_scope`, respectively. However, the latter one should be `order_scope` if we generalize it to `porderType`.\r\n\r\nI propose to create an issue for that and to merge this PR now. What do you think? @CohenCyril @pi8027 @mkerjean "},{"author":"pi8027","date":"2021-03-18T19:16:02Z","comment":"@affeldt-aist The module `nonforgetful_inheritance` has to be renamed to `numFieldTopology` according to the last meeting."}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":204,"state":"open","open_date":"2020-05-14T13:39:36Z","update_date":"2022-04-21T00:26:37Z","discussion":[{"author":"CohenCyril","date":"2020-05-21T17:04:24Z","comment":"@mkerjean @mkerjean CI fixed (cf https://github.com/math-comp/math-comp-nix/blob/e4d6c84698822d395832a6bc2c6d308356e2b08f/default.nix#L40)"},{"author":"mkerjean","date":"2020-07-12T22:48:37Z","comment":"FYI, for the proof of (Differentiable /\\ Cauchy-Riemann => Holomorphic), I tried to reintroduce two normed structure on `R[i]`, in order to use the theory of differentiability already developed. However, it is still difficult to handle, as basic computations do not  perform easily https://github.com/math-comp/analysis/blob/e2bab6f145d62cde3c15472175983733989e6e14/theories/holomorphy.v#L547. Would that be something which could be solved by [this](https://github.com/math-comp/real-closed/blob/complex_both_modules/theories/complex.v) branch of real-closed  @CohenCyril  ? "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":203,"state":"closed","open_date":"2020-05-11T20:41:45Z","update_date":"2020-06-04T22:42:38Z","discussion":[{"author":"affeldt-aist","date":"2020-05-12T14:04:37Z","comment":"@amahboubi @strub do you have an opinion about replacing `pred` with `set` has done in this commit https://github.com/math-comp/analysis/pull/203/commits/48661cc903ff48df35739e5df60df6ba93db049c ? It looked a bit more comfortable to me."},{"author":"affeldt-aist","date":"2020-05-14T16:53:51Z","comment":"@CohenCyril do you mean this commit https://github.com/math-comp/analysis/commit/f8d361a93db5906a73327d4fcf1fe9070e1960b8 when you refer to the the new `inE`?"},{"author":"affeldt-aist","date":"2020-05-15T11:15:23Z","comment":"@CohenCyril so your opinion is to stick to `pred`-based defnitions?"},{"author":"affeldt-aist","date":"2020-05-16T10:31:51Z","comment":"(Trying to summarize.) `pred`-based predicates and the `\\in` notation might be viable thanks to \r\n- https://github.com/math-comp/analysis/pull/202 (already merged)\r\n- https://github.com/math-comp/math-comp/pull/501 (to be merged)\r\n\r\nFor the time being, this PR sticks to `set`-based predicates, avoids the `\\in` notation, and\r\ntries not to unfold `lb`. `ub`, etc. That does not reduce the size of proofs much, but makes\r\nappear a few factorizations and enables some generalizations.\r\n"},{"author":"affeldt-aist","date":"2020-05-25T10:04:25Z","comment":"As an additional piece of information about `pred` vs. `set`, the commit https://github.com/math-comp/analysis/pull/203/commits/31f83c25912286ac73822b68b690df356807ae1b replays `sequences.v` with `set`-based predicates."},{"author":"affeldt-aist","date":"2020-05-29T13:41:36Z","comment":"We agreed on merging this PR during the last meeting but it seems that it incidentally implements one aspect of PR #117 (this was observed by @mkerjean ).\r\n\r\n@amahboubi Are you also ok with merging?\r\n\r\n"},{"author":"amahboubi","date":"2020-06-03T09:29:38Z","comment":"No objection."},{"author":"CohenCyril","date":"2020-06-03T10:40:47Z","comment":"> No objection.\r\n\r\nThanks @amahboubi, I will merge then."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":202,"state":"closed","open_date":"2020-05-08T15:12:12Z","update_date":"2020-05-08T17:00:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":201,"state":"closed","open_date":"2020-05-07T23:11:12Z","update_date":"2020-05-08T02:36:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":200,"state":"closed","open_date":"2020-05-07T23:09:34Z","update_date":"2020-06-09T23:44:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":199,"state":"closed","open_date":"2020-05-07T20:25:33Z","update_date":"2020-05-25T21:12:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":198,"state":"closed","open_date":"2020-05-07T19:49:47Z","update_date":"2020-05-14T18:27:21Z","discussion":[{"author":"CohenCyril","date":"2020-05-07T20:17:32Z","comment":"This PR is going to screw up https://github.com/math-comp/analysis/pull/187/commits/724b76f1df900c3d13b1687886879f49e20e3250#diff-f3e38d654b6f90f27bae5d8e2632fd7fR1468 from #187 "},{"author":"CohenCyril","date":"2020-05-07T20:19:43Z","comment":"I am actually going to extract from #187 all the changes to topology and normedtype. A side effect is to fix #155 "},{"author":"affeldt-aist","date":"2020-05-07T20:20:12Z","comment":"> This PR is going to screw up ...\r\n\r\nMaybe add\r\nfixes #155 to PR #187 ?\r\n"},{"author":"affeldt-aist","date":"2020-05-07T20:21:38Z","comment":"> I am actually going to extract from #187 ...\r\n\r\n:+1: \r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":197,"state":"closed","open_date":"2020-05-06T22:35:49Z","update_date":"2020-08-08T00:16:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":196,"state":"closed","open_date":"2020-05-06T13:09:05Z","update_date":"2020-05-14T18:26:31Z","discussion":[{"author":"CohenCyril","date":"2020-05-07T03:44:09Z","comment":"@mkerjean @affeldt-aist I implemented the generic boundedness and lipshitz notations in an ever more general way than described here: https://github.com/math-comp/analysis/pull/183#discussion_r408341345\r\nIndeed `[locally G]` is a combinator that can be used either on boundedness or lipshitz predicates to make them local instead of global."},{"author":"CohenCyril","date":"2020-05-08T14:21:14Z","comment":"@affeldt-aist can I merge?"},{"author":"affeldt-aist","date":"2020-05-08T15:09:42Z","comment":"> @affeldt-aist can I merge?\r\n\r\nYes."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":195,"state":"closed","open_date":"2020-05-05T09:23:13Z","update_date":"2020-05-05T11:53:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":194,"state":"closed","open_date":"2020-05-04T14:42:26Z","update_date":"2020-05-04T14:59:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":193,"state":"closed","open_date":"2020-05-01T19:01:53Z","update_date":"2020-07-29T17:12:16Z","discussion":[{"author":"affeldt-aist","date":"2020-05-02T00:33:57Z","comment":"Wouldn't `appr` be more natural as a prefix?"},{"author":"mkerjean","date":"2020-05-03T10:30:40Z","comment":"Do you have an example of simplifying allowed by this renaming ?"},{"author":"CohenCyril","date":"2020-05-03T11:13:25Z","comment":"@affeldt-aist \r\n> Wouldn't `appr` be more natural as a prefix?\r\n\r\nMaybe, I don't know, `appr` makes me think of `app` as in `oapp`, buut maybe it is not that bad...\r\n\r\n@mkerjean \r\n> Do you have an example of simplifying allowed by this renaming ?\r\n\r\nThe main simplification is documentation and consistency of notations. Right now `lim_add`, `lim_opp`... should be named `flim_add`, `flim_opp` instead. But the visual distinction between `lim` and `flim` is not clear enough in my opinion, and explaining `flim` goes through the history of coquelicot, where it was called `filterlim`, and since `f @ x --> y` is supposed to be handled without the explicit use of filters in most cases, it seems unnatural to rely on a name which contains the word `filter` in it, hence the switch to `approaches` or rather an abbreviation of it.\r\n"},{"author":"affeldt-aist","date":"2020-05-03T13:18:27Z","comment":"What about using \"tends to\" instead of \"approaches\" and abbreviate it as \"tto\"?"},{"author":"CohenCyril","date":"2020-05-04T12:52:53Z","comment":"I made a poll https://framadate.org/GQURpf2DYTSKJeJd\r\nand my preference has changed, ... I strongly prefer to have `cvg` as a name :laughing: \r\nbecause as of now, `cvg` named lemma are scarse and for each `cvg` named lemma we could come up with, I suspect there is a lemma slightly more precise lemma which explicits the actual limit... and `cvg F := F --> lim F` is in fact a base, default case for `_ --> _`..."},{"author":"CohenCyril","date":"2020-05-04T13:12:54Z","comment":"I force pushed to show how it would look with `cvg`"},{"author":"affeldt-aist","date":"2020-05-04T13:28:03Z","comment":"But then shouldn't, e.g., `lim_scale` become `cvgZ`?"},{"author":"CohenCyril","date":"2020-05-04T13:28:50Z","comment":"If it's too confusing, `cvg F := F --> lim F` could be renamed `is_cvg F := F --> lim F`."},{"author":"CohenCyril","date":"2020-05-04T13:29:26Z","comment":"> But then shouldn't, e.g., `lim_scale` become `cvgZ`?\r\n\r\nI did several mistakes in the sed script, they should be fixed now. Can you refresh and tell me it you see a problem?"},{"author":"CohenCyril","date":"2020-05-04T14:18:09Z","comment":"The checks finally pass, and I am happy with the result. @mkerjean what do you think?"},{"author":"mkerjean","date":"2020-05-04T14:32:13Z","comment":"`cvg` seems great (sorry, I've been busy with job applications).  "},{"author":"CohenCyril","date":"2020-05-04T14:43:56Z","comment":"> `cvg` seems great\r\n\r\nThanks for your input :smiley: \r\n\r\n> (sorry, I've been busy with job applications).\r\n\r\ngood luck!!"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":192,"state":"closed","open_date":"2020-04-29T17:05:33Z","update_date":"2020-05-14T13:24:52Z","discussion":[{"author":"mkerjean","date":"2020-05-04T20:13:07Z","comment":"You've been updating complex with respect to PR#270 ? For information I tested another formalism for the real structure on `C` (basically, nothing of the previous `Rcomplex` is canonical anymore), and I used `within R` to speak about real differentiation. Here it is : [https://github.com/mkerjean/analysis/blob/mathcomp_master_topologicalring/theories/holomorphy.v](https://github.com/mkerjean/analysis/blob/mathcomp_master_topologicalring/theories/holomorphy.v). \r\nIt does shorten the proofs. In another branch I tried to take out the `R^o` notation to ease the proof of `CauhyRiemann -> holomorphic`."},{"author":"CohenCyril","date":"2020-05-04T20:18:19Z","comment":"> You've been updating complex with respect to PR#270 ?\r\n\r\nYes, complex has been updated wrt mathcomp 1.11.0+beta1 ... Apparently, I forgot to withdraw the module structure, though :-/"},{"author":"CohenCyril","date":"2020-05-04T20:19:05Z","comment":"> and I used `within R` to speak about real differentiation.\r\n\r\nI think that's really nice :)"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":191,"state":"closed","open_date":"2020-04-29T12:01:48Z","update_date":"2020-04-29T12:45:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":190,"state":"closed","open_date":"2020-04-28T13:38:17Z","update_date":"2020-04-28T16:37:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":189,"state":"closed","open_date":"2020-04-24T21:41:50Z","update_date":"2020-06-10T14:12:37Z","discussion":[{"author":"CohenCyril","date":"2020-04-28T13:39:23Z","comment":"should be reopened on top of master"},{"author":"affeldt-aist","date":"2020-06-09T23:36:52Z","comment":"Is it ok to close this PR? Contents have been moved to PR #223 and PR #224 ."},{"author":"CohenCyril","date":"2020-06-10T13:27:43Z","comment":"The diff confirms it is indeed subsumed!"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":188,"state":"closed","open_date":"2020-04-24T20:36:01Z","update_date":"2020-12-08T03:19:56Z","discussion":[{"author":"CohenCyril","date":"2020-04-25T22:31:08Z","comment":"> Is this change of canonical structures correct?\r\n\r\nnop, there should be a structure merge between numDomainType and pointedType"},{"author":"affeldt-aist","date":"2020-05-04T15:56:55Z","comment":"> But it's too heavy with HB...\r\n\r\nYou mean *without*?\r\n"},{"author":"CohenCyril","date":"2020-05-04T15:59:14Z","comment":"> > But it's too heavy with HB...\r\n> \r\n> You mean _without_?\r\n\r\nyes, **without**"},{"author":"CohenCyril","date":"2020-05-07T23:30:20Z","comment":"So in the end, with @mkerjean suggestion, this will happen... but as part of a bigger commit making all `numFieldType` canonically `normedModType`\r\n(EDIT: replaced `numDomainType` by `numFieldType`)"},{"author":"affeldt-aist","date":"2020-05-12T22:05:32Z","comment":"> there should be a \"pointedNumDomain\" Structure :-/\r\n> But it's too heavy with HB...\r\n\r\nSomething like that?\r\n```\r\nModule PointedNumDomain.\r\nSection ClassDef.\r\nRecord class_of T := Class {\r\n  base : Num.NumDomain.class_of T ;\r\n  pointed_mixin : Pointed.point_of T }.\r\nLocal Coercion base : class_of >-> Num.NumDomain.class_of.\r\nLocal Coercion pointed_base T (class_of_T : class_of T) :=\r\n  @Pointed.Class _ class_of_T (pointed_mixin class_of_T).\r\n\r\nStructure type := Pack { sort ; _ : class_of sort }.\r\nLocal Coercion sort : type >-> Sortclass.\r\nVariables (T : Type) (cT : type).\r\nDefinition class := let: Pack _ c as cT' := cT return class_of cT' in c.\r\nLet xT := let: Pack T _ := cT in T.\r\nNotation xclass := (class : class_of xT).\r\nDefinition clone c of phant_id class c := @Pack T c.\r\nDefinition pack (b0 : Num.NumDomain.class_of T) (pm0 : @Pointed.point_of T) :=\r\n  fun bT (b : Num.NumDomain.class_of T)\r\n    & phant_id (@Num.NumDomain.class bT) b =>\r\n  fun pm & phant_id pm0 pm => @Pack T (@Class T b pm).\r\n\r\nDefinition eqType := @Equality.Pack cT xclass.\r\nDefinition choiceType := @Choice.Pack cT xclass.\r\nDefinition zmodType := @GRing.Zmodule.Pack cT xclass.\r\nDefinition ringType := @GRing.Ring.Pack cT xclass.\r\nDefinition comRingType := @GRing.ComRing.Pack cT xclass.\r\nDefinition unitRingType := @GRing.UnitRing.Pack cT xclass.\r\nDefinition comUnitRingType := @GRing.ComUnitRing.Pack cT xclass.\r\nDefinition idomainType := @GRing.IntegralDomain.Pack cT xclass.\r\nDefinition numDomainType := @Num.NumDomain.Pack cT xclass.\r\nDefinition pointedType := @Pointed.Pack cT xclass.\r\nEnd ClassDef.\r\n\r\nModule Exports.\r\nCoercion sort : type >-> Sortclass.\r\nBind Scope ring_scope with sort.\r\nCoercion base  : class_of >-> Num.NumDomain.class_of.\r\nCoercion pointed_base : class_of >-> Pointed.class_of.\r\nCoercion eqType : type >-> Equality.type.\r\nCanonical eqType.\r\nCoercion choiceType : type >-> Choice.type.\r\nCanonical choiceType.\r\nCoercion zmodType : type >-> GRing.Zmodule.type.\r\nCanonical zmodType.\r\nCoercion ringType : type >-> GRing.Ring.type.\r\nCanonical ringType.\r\nCoercion comRingType : type >-> GRing.ComRing.type.\r\nCanonical comRingType.\r\nCoercion unitRingType : type >-> GRing.UnitRing.type.\r\nCanonical unitRingType.\r\nCoercion comUnitRingType : type >-> GRing.ComUnitRing.type.\r\nCanonical comUnitRingType.\r\nCoercion idomainType : type >-> GRing.IntegralDomain.type.\r\nCanonical idomainType.\r\nCoercion numDomainType : type >-> Num.NumDomain.type.\r\nCanonical numDomainType.\r\nCoercion pointedType : type >-> Pointed.type.\r\nCanonical pointedType.\r\nNotation pointedNumDomainType := type.\r\nNotation PointedNumDomainType T m := (@pack T m _ id _ id _).\r\nNotation \"[ 'pointedNumDomainType' 'of' T 'for' cT ]\" := (@clone T cT _ idfun)\r\n  (at level 0, format \"[ 'pointedNumDomainType'  'of'  T  'for'  cT ]\") : form_scope.\r\nNotation \"[ 'pointedNumDomainType' 'of' T ]\" := (@clone T _ _ id)\r\n  (at level 0, format \"[ 'pointedNumDomainType'  'of'  T ]\") : form_scope.\r\nEnd Exports.\r\nEnd PointedNumDomain.\r\nImport PointedNumDomain.Exports.\r\n```"},{"author":"CohenCyril","date":"2020-05-12T22:49:16Z","comment":"Hum, no, I meant, with @mkerjean's suggestion, we do not have dedicated structures, but we indeed do what your PR originally did, but on a larger scale (every structure above num **field** should have coercions and canonicals to pointed, filtered, topological, pseudometric and normed types...)\r\n(EDIT: I replaced num domain by num field)"},{"author":"mkerjean","date":"2020-05-14T11:42:16Z","comment":"> Hum, no, I meant, with @mkerjean's suggestion, we do not have dedicated structures, but we indeed do what your PR originally did, but on a larger scale (every structure above num domains should have coercions and canonicals to pointed, filtered, topological, pseudometric and normed types...)\r\n\r\nI'll be updating this PR today (AoE maybe)."},{"author":"affeldt-aist","date":"2020-07-20T13:29:55Z","comment":"(to be closed, see https://github.com/math-comp/analysis/pull/205)"},{"author":"CohenCyril","date":"2020-12-07T15:06:26Z","comment":"Subsumed by #205 "}],"tags":[{"tag":"question :question:","description":"There is an unanswered question here"}],"pull_requests":[]},{"author":"affeldt-aist","number":187,"state":"closed","open_date":"2020-04-23T16:26:38Z","update_date":"2020-06-11T15:44:45Z","discussion":[{"author":"CohenCyril","date":"2020-05-07T18:37:06Z","comment":"I will start rebasing this branch"},{"author":"affeldt-aist","date":"2020-05-14T09:15:29Z","comment":"@ybertot : it is not yet up to mathcomp standards but here is a tentative proof for your information"},{"author":"affeldt-aist","date":"2020-05-14T09:39:24Z","comment":"TODO: Hardy's theorem (the true converse of Cesaro)..."}],"tags":[],"pull_requests":[]},{"author":"vlj","number":186,"state":"closed","open_date":"2020-04-20T21:20:01Z","update_date":"2020-04-21T22:43:24Z","discussion":[{"author":"affeldt-aist","date":"2020-04-21T09:54:03Z","comment":"We can save one line!\r\n```\r\nrewrite predeqE => z.\r\nby apply: asbool_eq_equiv; rewrite asbool_and !asbool_neg asbool_or negb_or.\r\n```\r\n:-)"},{"author":"vlj","date":"2020-04-21T20:53:02Z","comment":"I updated the PR following affeldt-aist advice, I didn't see the negb_or lemma."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":185,"state":"closed","open_date":"2020-04-17T19:12:39Z","update_date":"2020-04-23T22:23:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"vlj","number":184,"state":"closed","open_date":"2020-04-16T17:56:08Z","update_date":"2020-04-24T08:26:40Z","discussion":[{"author":"affeldt-aist","date":"2020-04-16T22:09:33Z","comment":"Fine with me, except that I would try to write the script more compactly, something like\r\n```\r\nrewrite /interior predeqE => //= x; rewrite locallyE; split => [[B0 [?]] | []].\r\n- by rewrite subsetI => -[? ?]; split; rewrite locallyE; exists B0.\r\n- rewrite locallyE => -[B0 [? ?]] [B1 [? ?]]; exists (B0 `&` B1); split;\r\n  [exact: neighI | by rewrite subsetI; split; apply: subIset; [left|right]].\r\n```"},{"author":"vlj","date":"2020-04-18T18:55:45Z","comment":"I changed the proof to follow yours."},{"author":"vlj","date":"2020-04-23T18:30:24Z","comment":"Force pushed a version with naming/whitespace fixes."}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":183,"state":"closed","open_date":"2020-04-14T16:21:42Z","update_date":"2021-03-12T02:53:38Z","discussion":[{"author":"CohenCyril","date":"2020-04-28T13:41:00Z","comment":"Should be reopened on top of master (please add a reference to this PR so that we can continue the discussions)"},{"author":"mkerjean","date":"2020-10-09T06:59:35Z","comment":"Should I open a new PR for `closed_ball` ? "},{"author":"affeldt-aist","date":"2020-10-09T07:02:26Z","comment":"> Should I open a new PR for `closed_ball` ?\r\n\r\nI think that that was one of the conclusions of the last meeting (the minutes seem to say so).\r\n"},{"author":"affeldt-aist","date":"2021-01-27T02:50:48Z","comment":"(I just rebased to get rid of conflicts and fix the changelog so that we can merge.) @CohenCyril "},{"author":"mkerjean","date":"2021-02-18T21:25:36Z","comment":"Should this be merged ? "}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":182,"state":"closed","open_date":"2020-04-14T15:38:10Z","update_date":"2020-04-25T22:29:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":181,"state":"closed","open_date":"2020-04-14T15:28:26Z","update_date":"2020-04-14T15:28:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":180,"state":"closed","open_date":"2020-04-14T09:45:15Z","update_date":"2021-07-29T09:15:53Z","discussion":[{"author":"mkerjean","date":"2020-04-14T09:58:37Z","comment":"Issue: Sometimes one needs to explicitly mention the pseudoMetricNormedZmodType on which lemmas are applied while it was not necessary with NormedModTypes. It also makes (at least) `derive.v` fail ([here](https://github.com/math-comp/analysis/blob/3085f787d0d16b08db4a151b711382de9fabe87e/theories/derive.v#L786) view locally_le_locally_norm can't be applied). What's missing ? "},{"author":"mkerjean","date":"2020-04-14T12:48:52Z","comment":"Issue: Some further generalizations should be possible but `lim` does not seem to work on `PseudoMetricNormedZmodule`. See  [here](https://github.com/math-comp/analysis/blob/0eb77159595dc65f63f4e5ce955303eb74d88a14/theories/normedtype.v#L789)."},{"author":"affeldt-aist","date":"2020-04-23T15:55:47Z","comment":"This branch/PR has been rebased on PR #177 that lifts several lemmas about limits to the level of topological spaces, thus the issues about `flim_lim` and `flim_unique` have disappeared. But similar inference problems seem to occur later, e.g., here https://github.com/math-comp/analysis/blob/b8c628cb71191eeb9e5d600c0ea9c10dcedf2241/theories/derive.v#L786 .\r\n"},{"author":"affeldt-aist","date":"2020-05-21T13:14:28Z","comment":"There are still notation issues with lemmas [`norm_lim_id`](https://github.com/math-comp/analysis/blob/55b94bdc2d7ae32f61ff031ab9267ce9c2c63dbe/theories/normedtype.v#L1208) and [`norm_cvg_lim`](https://github.com/math-comp/analysis/blob/55b94bdc2d7ae32f61ff031ab9267ce9c2c63dbe/theories/normedtype.v#L1210).\r\n\r\nThere are still generalizations to do, at least about the lemmas related to the new `bounded_on` predicate, but also some generalizations for which I might have screwed up when rebasing. :-/"},{"author":"affeldt-aist","date":"2020-06-17T21:51:22Z","comment":"FYI, I rebased on top of a recent master (with PR #230) and at first sight the behavior seems unchanged, i.e.:\r\n- in `normedtype.v`:\r\n  + `norm_cvg_eq` -> still requires explicit type\r\n  + `norm_lim_id` -> still requires `[lim ... in ...]` notation\r\n  + `norm_cvg_lim` -> still requires explicit type and `[lim ... in ...]` notation\r\n  + `continuous_cvg_dist` -> still requires explicit type\r\n- in `derive.v`:\r\n  + `bilinear_eqo` -> still requires explicit `[pseudoMetricNormedZmodType R of _]`\r\n  + `dinv` -> still requires explicit `[pseudoMetricNormedZmodType R of _]`\r\n\r\n"},{"author":"mkerjean","date":"2021-03-26T14:34:52Z","comment":"> FYI, I rebased on top of a recent master (with PR #230) and at first sight the behavior seems unchanged, i.e.:\r\n> \r\n>     * in `normedtype.v`:\r\n>       \r\n>       * `norm_cvg_eq` -> still requires explicit type\r\n>       * `norm_lim_id` -> still requires `[lim ... in ...]` notation\r\n>       * `norm_cvg_lim` -> still requires explicit type and `[lim ... in ...]` notation\r\n>       * `continuous_cvg_dist` -> still requires explicit type\r\n> \r\n>     * in `derive.v`:\r\n>       \r\n>       * `bilinear_eqo` -> still requires explicit `[pseudoMetricNormedZmodType R of _]`\r\n>       * `dinv` -> still requires explicit `[pseudoMetricNormedZmodType R of _]`\r\n\r\nIn `normedtype.v`:\r\n* explicit argument [l.1793](https://github.com/math-comp/analysis/blob/1c5946eec37e3ab923fb60de41b5f84e1f435a3a/theories/normedtype.v#L1793) explicit argument needed for `cvg_ball` (not needed in the case of `V : normedType R`). "},{"author":"affeldt-aist","date":"2021-05-29T09:10:07Z","comment":"Does https://github.com/math-comp/analysis/pull/180/commits/c3abdc48907cd5610a9e024d997fa432d5d0c8c1\r\nreally fix the inference problem derive.v? Or does it just narrow it?\r\n"},{"author":"affeldt-aist","date":"2021-07-26T06:59:03Z","comment":"> Ready to merge after my comments have been taken into account.\r\n> Also, I would rather have TODO/NBs turned into issues, they are less prone to bitrot.\r\n\r\nNBs that were marking issues caused by this PR has been resolved (I think).\r\nThere are still TODOs but I think that they predates this PR.\r\nOk to merge and chase TODOs later?\r\n"}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":179,"state":"closed","open_date":"2020-04-14T08:46:31Z","update_date":"2021-02-19T15:22:45Z","discussion":[{"author":"affeldt-aist","date":"2020-04-23T16:02:54Z","comment":"When rebasing this PR / branch on PR #175, we have but back `theories/hahn_banach_applications.v` back in the `_CoqProject` and this has revealed a compilation problem apparently simply due to a misuse of `sup`. "},{"author":"CohenCyril","date":"2020-04-28T13:42:41Z","comment":"Should be reopened on top of master"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":178,"state":"closed","open_date":"2020-04-13T17:25:52Z","update_date":"2020-04-23T22:24:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":177,"state":"closed","open_date":"2020-04-13T16:40:00Z","update_date":"2020-05-14T18:26:26Z","discussion":[{"author":"CohenCyril","date":"2020-04-28T13:41:45Z","comment":"Is it ready for review?"},{"author":"affeldt-aist","date":"2020-04-28T14:54:50Z","comment":"> Is it ready for review?\r\n\r\nI would say yet (provided we do the squash just before an eventual merge)."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":176,"state":"closed","open_date":"2020-04-13T16:36:46Z","update_date":"2020-04-13T16:38:20Z","discussion":[{"author":"affeldt-aist","date":"2020-04-13T16:38:20Z","comment":"My mistake: should be based on `mathcomp_master`."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":175,"state":"closed","open_date":"2020-04-13T13:42:39Z","update_date":"2020-04-24T17:22:18Z","discussion":[{"author":"CohenCyril","date":"2020-04-21T22:47:09Z","comment":"can you rewrite the history to squash the last two commits (ebdbe9f and f474275), put them first and remove mine about nix?"},{"author":"affeldt-aist","date":"2020-04-21T23:18:46Z","comment":"> can you rewrite the history to squash the last two commits ([ebdbe9f](https://github.com/math-comp/analysis/commit/ebdbe9ffe87bac817b329f29092280abda434c98) and [f474275](https://github.com/math-comp/analysis/commit/f4742757d9b586ec9d6e65eb5d3198e16a345918)), put them first and remove mine about nix?\r\n\r\nI don't think I did exactly what you wanted. :-("},{"author":"CohenCyril","date":"2020-04-21T23:35:42Z","comment":"It looks like you rewrote the wrong history :-/ what did you do?"},{"author":"affeldt-aist","date":"2020-04-22T20:08:50Z","comment":"> It looks like you rewrote the wrong history :-/ what did you do?\r\n\r\nIt should be fixed now. Thanks a lot."},{"author":"CohenCyril","date":"2020-04-22T21:07:43Z","comment":"There are conflicts again... I do not know what you did, but it is un-fixed"},{"author":"affeldt-aist","date":"2020-04-22T21:22:45Z","comment":"> There are conflicts again... I do not know what you did, but it is un-fixed\r\n\r\nI didn't do the last rebase on master.\r\n(And there is still the manual install of finmap.1.0.5 to get rid of.)"},{"author":"affeldt-aist","date":"2020-04-24T15:23:31Z","comment":"> I would like to merge as such and patch/fix after the fact. Do you agree?\r\n\r\nI think it is a good idea.\r\n"}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":174,"state":"closed","open_date":"2020-04-13T07:43:29Z","update_date":"2020-05-14T18:30:34Z","discussion":[{"author":"mkerjean","date":"2020-04-14T07:40:02Z","comment":"The main content of this PR is going to be merged into PR#177. What remains are few lemmas dealing with within (section within) which were useful in other developments. Should they be added to topology.v ? "},{"author":"CohenCyril","date":"2020-04-14T16:41:39Z","comment":"> The main content of this PR is going to be merged into PR#177. What remains are few lemmas dealing with within (section within) which were useful in other developments. Should they be added to topology.v ?\r\n\r\nyes sure"},{"author":"affeldt-aist","date":"2020-04-21T19:16:09Z","comment":"What about closing this PR now that is has been split between PR #177 and PR #182 ? "},{"author":"mkerjean","date":"2020-04-24T19:12:06Z","comment":"PR closed since it has split between PR #177 and PR #182."}],"tags":[],"pull_requests":[]},{"author":"vlj","number":173,"state":"closed","open_date":"2020-04-11T17:06:50Z","update_date":"2020-04-28T14:04:01Z","discussion":[{"author":"affeldt-aist","date":"2020-04-11T22:02:36Z","comment":"You can maybe look at `finset.v` for the naming convention (`setCK` and `setICr`)."},{"author":"vlj","date":"2020-04-13T17:32:34Z","comment":"Renamed setCK and setICr, and added another lemma (setC0)."},{"author":"affeldt-aist","date":"2020-04-13T17:36:18Z","comment":"`setICr` should maybe be `setICl` because the complement operation is on the left-hand. These conventions are documented in [CONTRIBUTING.md](https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md).\r\n\r\nAlso you may want to squash your commits into one commit. @vlj \r\n"},{"author":"vlj","date":"2020-04-16T17:21:23Z","comment":"Renamed to setICl, removed setCC, setC0 and setCK since they are already in master, and fixed -[] and the extra space. Everything is squashed into a single commit now."}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":172,"state":"closed","open_date":"2020-04-08T11:21:40Z","update_date":"2020-04-13T07:42:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":171,"state":"closed","open_date":"2020-04-08T10:03:07Z","update_date":"2020-04-08T11:16:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":170,"state":"closed","open_date":"2020-02-13T09:30:09Z","update_date":"2020-06-03T12:11:18Z","discussion":[{"author":"affeldt-aist","date":"2020-04-13T16:59:32Z","comment":"This PR has been subsumed by the branch `mathcomp_master_hahnbanach`."}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":169,"state":"closed","open_date":"2020-02-11T12:41:27Z","update_date":"2020-04-22T10:15:13Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":168,"state":"closed","open_date":"2020-01-10T01:42:41Z","update_date":"2020-01-14T20:01:38Z","discussion":[{"author":"pi8027","date":"2020-01-10T02:42:33Z","comment":"`real_scope` is declared and opened in several files but actually never be used. What is this?"},{"author":"affeldt-aist","date":"2020-01-10T06:57:56Z","comment":"> What is this?\r\n\r\nIt's wip ^_^. I look at that on Monday, today's hospital day :-(."},{"author":"affeldt-aist","date":"2020-01-14T08:29:49Z","comment":"> it is better to do not use `order_scope`.\r\n\r\nIt is not obvious to me why as a user I should avoid the most generic notation\r\noffered by order_scope. Since ereals have been declared as an ordered type,\r\nisn't it for them in particular to enjoy the notation?\r\n  \r\n\r\n"},{"author":"pi8027","date":"2020-01-14T09:03:48Z","comment":"@affeldt-aist\r\n```coq\r\nFrom mathcomp Require Import all_ssreflect all_algebra.\r\n\r\n(*\r\nAt least, using `order_scope` to reason about rings is a potential pitfall:\r\n*)\r\nFail Check (fun (R : numDomainType) (x : R) => 0 <= x)%O.\r\n(*\r\nThe command has indeed failed with message:\r\nIn environment\r\nR : numDomainType\r\nx : R\r\nThe term \"x\" has type \"Num.NumDomain.sort R\" while it is expected to have type \"Order.POrder.sort ?t\".\r\n*)\r\n```"},{"author":"pi8027","date":"2020-01-14T09:05:09Z","comment":"Also, I think that simultaneously opening both `order_scope` and `ring_scope` makes printing ambiguous. I will try to produce an example if needed."},{"author":"affeldt-aist","date":"2020-01-14T20:01:16Z","comment":"@CohenCyril lectured me on `*_display`'s (in particular the usage of `%R`) and on the benefit of using `%E` when explicitly dealing with ereals. "}],"tags":[],"pull_requests":[]},{"author":"gitter-badger","number":167,"state":"closed","open_date":"2019-12-04T13:20:40Z","update_date":"2020-04-23T16:09:45Z","discussion":[{"author":"affeldt-aist","date":"2020-04-13T13:58:02Z","comment":"What about closing this PR since the badge is already here?"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":166,"state":"closed","open_date":"2019-12-03T20:11:30Z","update_date":"2020-04-13T13:33:34Z","discussion":[{"author":"affeldt-aist","date":"2019-12-03T22:16:15Z","comment":"I haven't figured out how to compile it also with mathcomp.1.9.0 because of L2161 of topology.v."},{"author":"affeldt-aist","date":"2019-12-04T09:22:18Z","comment":"> I haven't figured out how to compile it also with mathcomp.1.9.0 because of L2161 of topology.v.\r\n\r\nThanks @pi8027!\r\n\r\n"}],"tags":[],"pull_requests":[]},{"author":"pi8027","number":164,"state":"closed","open_date":"2019-12-03T14:43:48Z","update_date":"2019-12-03T14:47:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":163,"state":"closed","open_date":"2019-12-03T13:53:33Z","update_date":"2019-12-03T16:04:55Z","discussion":[{"author":"affeldt-aist","date":"2019-12-03T14:07:39Z","comment":"Why not PR on branch analysis_270? (analysis_270_integration is regularly rebased on anslysis_270)"},{"author":"affeldt-aist","date":"2019-12-03T14:10:26Z","comment":"Also, is it important to redefine the comparison operators in scope ereal_scope? Why not use order_scope (or %O) when one needs them?"},{"author":"pi8027","date":"2019-12-03T14:18:09Z","comment":"@affeldt-aist \r\n\r\n> Why not PR on branch analysis_270? (analysis_270_integration is regularly rebased on anslysis_270)\r\n\r\nThere are 3 branches including `270` and this was so confusing to me (I still don't understand the difference between them), but I can reopen this for `analysis_270`.\r\n\r\n> Also, is it important to redefine the comparison operators in scope ereal_scope? Why not use order_scope (or %O) when one needs them?\r\n\r\n`order_scope` defines the `0` and `1` notations which mean the bottom and top of lattices. It's better to do not use `order_scope` to reason about ereals."},{"author":"affeldt-aist","date":"2019-12-03T14:26:19Z","comment":"> There are 3 branches including `270` and this was so confusing to me (I still don't understand the difference between them), but I can reopen this for `analysis_270`.\r\n\r\nSorry about that. `analysis_270_*` are branches that build upon `analysis_270`, each working on a different aspect but the common basis is `analysis_270`. (We could at least delete `analysis_270_integral`). \r\n \r\n> > Also, is it important to redefine the comparison operators in scope ereal_scope? Why not use order_scope (or %O) when one needs them?\r\n> \r\n> `order_scope` defines the `0` and `1` notations which mean the bottom and top of lattices. It's better to do not use `order_scope` to reason about ereals.\r\n\r\nOk, I see. I was happy enough using 0%R and 1%R here and there, since so far the need for order_scope was limited.\r\n\r\n"},{"author":"pi8027","date":"2019-12-03T14:32:35Z","comment":"> Ok, I see. I was happy enough using 0%R and 1%R here and there, since so far the need for order_scope was limited.\r\n\r\nIMO, error messages produced by `(0 < x)%O` where `x : (R : numDomainType)` is difficult enough to let us lose time a lot. Those specialized notations save our time."},{"author":"affeldt-aist","date":"2019-12-03T14:38:57Z","comment":"> IMO, error messages produced by `(0 < x)%O` where `x : (R : numDomainType)` is difficult enough to let us lose time a lot. Those specialized notations save our time.\r\n\r\nOk. Otesudesuga, is it ok to PR on analysis_270?\r\n"},{"author":"pi8027","date":"2019-12-03T14:40:42Z","comment":"Yes."}],"tags":[],"pull_requests":[]},{"author":"vlj","number":162,"state":"closed","open_date":"2019-11-09T18:12:27Z","update_date":"2020-01-10T13:10:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":161,"state":"closed","open_date":"2019-10-18T08:21:18Z","update_date":"2019-10-18T08:25:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":160,"state":"closed","open_date":"2019-10-17T19:10:09Z","update_date":"2019-10-17T19:25:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":159,"state":"closed","open_date":"2019-10-16T20:56:15Z","update_date":"2019-10-17T10:59:45Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":158,"state":"closed","open_date":"2019-10-11T21:42:33Z","update_date":"2019-10-12T07:20:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"pi8027","number":153,"state":"closed","open_date":"2019-10-04T16:43:22Z","update_date":"2019-10-11T11:32:09Z","discussion":[{"author":"pi8027","date":"2019-10-04T16:43:49Z","comment":"Ping @affeldt-aist"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":152,"state":"closed","open_date":"2019-10-02T12:05:46Z","update_date":"2020-04-25T19:57:02Z","discussion":[{"author":"affeldt-aist","date":"2020-04-24T22:02:15Z","comment":"This PR is maybe not useful anymore now that `mathcomp_master` has been merged into `master`?"}],"tags":[],"pull_requests":[]},{"author":"hivert","number":150,"state":"closed","open_date":"2019-07-10T15:03:37Z","update_date":"2019-07-30T08:19:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":149,"state":"closed","open_date":"2019-07-08T00:34:12Z","update_date":"2020-04-13T13:33:39Z","discussion":[{"author":"affeldt-aist","date":"2019-07-10T15:28:05Z","comment":"I updated INSTALL.md according to the opam file and following #150.\r\nI removed the suggestion to install opam using apt-get on Debian systems because it may not be up-to-date."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":148,"state":"closed","open_date":"2019-07-03T10:12:14Z","update_date":"2020-04-13T13:33:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":147,"state":"closed","open_date":"2019-07-02T21:47:08Z","update_date":"2020-04-13T13:33:40Z","discussion":[{"author":"amahboubi","date":"2019-07-03T07:53:41Z","comment":"What is the upgrade about?"},{"author":"CohenCyril","date":"2019-07-03T09:45:36Z","comment":"This is the equivalent of `opam upgrade` except it does so for all users. Be prepared to recompile mathcomp if we merge this."},{"author":"amahboubi","date":"2019-07-03T10:25:50Z","comment":"How do we know the nature of the upgrade (which package is upgraded, from which version to which other)?"},{"author":"CohenCyril","date":"2019-07-03T10:32:20Z","comment":"> How do we know the nature of the upgrade (from which version to which other)?\r\n\r\nI know no other way than running nix-shell and observing the computed set of packages to install. (Note that this does not uninstall the previous versions, which remain available if you change the commit back to the previous one)"},{"author":"amahboubi","date":"2019-07-03T12:02:04Z","comment":"I meant, for the present commit log, and for analysis, which version of the dependencies are supported by this new config. E.g. real-closed is now available, etc."},{"author":"CohenCyril","date":"2019-07-03T12:35:48Z","comment":"> I meant, for the present commit log, and for analysis, which version of the dependencies are supported by this new config. E.g. real-closed is now available, etc.\r\n\r\ncf https://github.com/NixOS/nixpkgs/blob/73392e79aa62e406683d6a732eb4f4101f4732be/pkgs/development/coq-modules/mathcomp/extra.nix#L46-L61"},{"author":"amahboubi","date":"2019-07-03T13:20:05Z","comment":"Could you rephrase your commit log to reflect the upgrades it allows?"},{"author":"amahboubi","date":"2019-07-03T13:25:54Z","comment":"> cf https://github.com/NixOS/nixpkgs/blob/73392e79aa62e406683d6a732eb4f4101f4732be/pkgs/development/coq-modules/mathcomp/extra.nix#L46-L61\r\n\r\nCould we have a nix upgrade documentation somewhere? E..g. what is the role of this file? Who should edit it and when?"},{"author":"CohenCyril","date":"2019-07-03T13:35:41Z","comment":"> Could we have a nix upgrade documentation somewhere? E..g. what is the role of this file? Who should edit it and when?\r\n\r\na doc on\r\n- upgrading the local nix shell (shell.nix) on analysis?\r\n- or upgrading the package definitions (mathcomp/extra.nix) on nixpkgs?"},{"author":"amahboubi","date":"2019-07-03T13:37:28Z","comment":"Both. "},{"author":"amahboubi","date":"2019-09-17T16:07:19Z","comment":"@CohenCyril , again a description would have been really helpful here, listing the **coq** packages and/or versions made available via this update. I.e. what you put in the commit log of your contribution to the nix repo.\r\nAlso, such a PR should not say un-merged that long (without a reason)."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":146,"state":"closed","open_date":"2019-06-11T00:39:32Z","update_date":"2019-07-08T00:28:06Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":145,"state":"closed","open_date":"2019-06-02T09:14:52Z","update_date":"2020-04-13T13:33:04Z","discussion":[{"author":"CohenCyril","date":"2019-06-03T09:13:21Z","comment":"@affeldt-aist please rebase :)"},{"author":"affeldt-aist","date":"2019-06-03T10:00:26Z","comment":"rebase w.r.t. master"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":144,"state":"closed","open_date":"2019-05-30T16:12:05Z","update_date":"2020-04-13T13:33:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":143,"state":"closed","open_date":"2019-05-29T12:02:22Z","update_date":"2020-04-13T13:33:05Z","discussion":[{"author":"CohenCyril","date":"2019-05-29T12:07:57Z","comment":"@math-comp/analysis please acknowledge"},{"author":"drouhling","date":"2019-05-29T12:11:10Z","comment":"Fine with me."},{"author":"mkerjean","date":"2019-05-29T14:02:23Z","comment":"fine with me oc"},{"author":"affeldt-aist","date":"2019-05-29T16:02:40Z","comment":"I'm ok (tested with mathcomp 1.8.0 and 1.9.0)."},{"author":"CohenCyril","date":"2019-05-30T18:58:15Z","comment":"@affeldt-aist what did you change ?"},{"author":"affeldt-aist","date":"2019-05-30T23:45:17Z","comment":"@CohenCyril I just reset a wrong commit"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":142,"state":"closed","open_date":"2019-05-23T17:55:34Z","update_date":"2020-04-13T13:33:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":141,"state":"closed","open_date":"2019-05-23T17:15:24Z","update_date":"2019-05-23T17:23:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":139,"state":"closed","open_date":"2019-05-16T02:37:23Z","update_date":"2019-05-16T14:33:19Z","discussion":[{"author":"CohenCyril","date":"2019-05-16T14:32:51Z","comment":"I am not sure this is the best place yet, but at least it is better than landau"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":137,"state":"closed","open_date":"2019-05-09T10:32:38Z","update_date":"2020-07-29T10:16:53Z","discussion":[{"author":"CohenCyril","date":"2019-06-03T09:17:15Z","comment":"~~TODO: move to theories/ directory~~"},{"author":"affeldt-aist","date":"2019-06-03T10:12:11Z","comment":"rebased and integral.v went to theories/"},{"author":"affeldt-aist","date":"2020-04-24T21:43:19Z","comment":"Is is ok to close this PR? ~~PR #189 ~~ PR #224 (with PR #223  )provides an updated version. "}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":136,"state":"closed","open_date":"2019-05-08T07:57:37Z","update_date":"2020-05-14T18:27:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":135,"state":"closed","open_date":"2019-04-09T07:07:06Z","update_date":"2019-05-16T14:33:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":132,"state":"closed","open_date":"2019-02-22T10:05:16Z","update_date":"2019-05-16T14:33:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":131,"state":"closed","open_date":"2019-02-10T19:06:06Z","update_date":"2019-02-22T09:37:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":130,"state":"closed","open_date":"2019-02-10T17:24:00Z","update_date":"2019-02-10T18:41:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":129,"state":"closed","open_date":"2019-02-08T09:37:47Z","update_date":"2019-02-22T09:38:20Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":128,"state":"closed","open_date":"2019-02-07T19:41:20Z","update_date":"2019-02-08T09:05:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":127,"state":"closed","open_date":"2019-01-29T00:41:53Z","update_date":"2019-02-22T09:38:52Z","discussion":[{"author":"CohenCyril","date":"2019-02-21T10:15:24Z","comment":"fixed by #131 "}],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":126,"state":"closed","open_date":"2019-01-09T13:24:40Z","update_date":"2019-07-02T08:08:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"mkerjean","number":125,"state":"closed","open_date":"2018-12-21T11:09:55Z","update_date":"2020-04-14T08:34:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":124,"state":"closed","open_date":"2018-12-18T03:44:19Z","update_date":"2019-04-09T20:11:56Z","discussion":[{"author":"CohenCyril","date":"2019-02-22T16:53:52Z","comment":"Unless I am mistaken @amahboubi has a lock on this file for now. If I am right, @amahboubi can you PR your changes even if they are not complete?"}],"tags":[],"pull_requests":[]},{"author":"gitter-badger","number":123,"state":"closed","open_date":"2018-12-11T18:19:59Z","update_date":"2018-12-12T08:40:57Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":122,"state":"open","open_date":"2018-12-10T17:46:47Z","update_date":"2023-02-09T07:32:07Z","discussion":[{"author":"affeldt-aist","date":"2020-07-29T10:19:53Z","comment":"What it is the status of this PR?"},{"author":"CohenCyril","date":"2020-07-29T10:31:34Z","comment":"@affeldt-aist forgotten but I think would be a great improvment"},{"author":"CohenCyril","date":"2020-07-29T10:32:10Z","comment":"Actually, I always think I merged it and often am disappointed I didn't :-("},{"author":"affeldt-aist","date":"2020-07-29T10:40:06Z","comment":"So I guess we should update the PR. Since things have changed in two years, I wonder whether it would not be better to do a new PR."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":121,"state":"closed","open_date":"2018-12-10T17:45:52Z","update_date":"2019-02-08T09:36:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":120,"state":"closed","open_date":"2018-11-30T02:31:46Z","update_date":"2019-02-22T09:39:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":119,"state":"closed","open_date":"2018-11-05T10:30:00Z","update_date":"2020-09-30T04:18:46Z","discussion":[{"author":"drouhling","date":"2019-02-22T10:34:21Z","comment":"This now depends on #132."},{"author":"drouhling","date":"2020-07-28T12:49:49Z","comment":"This is now superseded by #242."}],"tags":[],"pull_requests":[]},{"author":"amahboubi","number":117,"state":"open","open_date":"2018-10-26T15:02:32Z","update_date":"2022-04-21T00:26:37Z","discussion":[{"author":"amahboubi","date":"2018-10-26T21:10:44Z","comment":"@CohenCyril , @strub : Require Import from std lib or 3 axiom prelude? I vote for the first."},{"author":"amahboubi","date":"2018-10-26T21:15:23Z","comment":"@CohenCyril corollary question: if we import axioms from std lib, is it important to keep your proof script for Diaconescu or shall we use the one from ClassicalEpsilon and have only one-liners here?"},{"author":"CohenCyril","date":"2018-10-29T12:05:56Z","comment":"> Require Import from std lib or 3 axiom prelude? I vote for the first.\r\n\r\nI vote for the second, because it makes it clear which axioms we use exactly. Historically I opted for importing from stdlib, and I changed just before the Coq Workshop presentation, when I realized the previous instantiation of that I did `mclassic` did not rely on the axioms I thought I used...\r\n\r\nAdditional argument: when we switch to stdlib2, our independence from stdlib1 will be in our favor. :smile: "},{"author":"amahboubi","date":"2018-10-29T12:28:10Z","comment":"> Additional argument: when we switch to stdlib2, our independence from stdlib1 will be in our favor. smile\r\n\r\nThis is clearly not our hardest dependency on stdlib1... and I bet that one will be one of the easiest to resolve.\r\nBut can you elaborate on the problem you encountered?\r\nSide note, this WIP branch also remove `mclassic` and `mextentionality` which are mostly scars from our past experiments. "},{"author":"CohenCyril","date":"2018-10-29T12:52:03Z","comment":"@amahboubi I did not realize immediately that I depended on *proof irrelevance* rather than *diaconescu theorem + the axioms we already had.*\r\n\r\nSure, it is an easy dependency to remove indeed, but why restoring it and wait rather than keeping as few dependencies as possible? Especially since it consists in less than 20 loc anyway. We can keep a reference to the stdlib in comments.\r\n\r\nBTW, @drouhling is currently chasing the dependency in stdlib R if I am correct."},{"author":"amahboubi","date":"2018-10-29T13:14:25Z","comment":"May be for a communication issue: it is the first time I read that analysis wants to keep as few dependencies as possible on stlib1. \r\nI am not yet 100% convinced and I do not believe in references by comments. But this specific issue is rather mundane and I think it does not worth spending much energy on it. My main ultimate goal here is to recover from the massive de-synchronization, in an efficient way.\r\nI was not thinking of the dependency on R, although it is really great that Damien is addressing this. E.g. mathcomp is requiring a few libraries from stdlib1."},{"author":"CohenCyril","date":"2018-10-29T13:40:38Z","comment":"@amahboubi I did not say that analysis (as a project) wants anything. I think we should wait for the meeting to decide such strategies for this repo.\r\nI was merely giving you my motivations for my \"vote\", I am sorry if that was unclear.\r\n\r\nAnd wrt the dependency of mathcomp in stdlib1, this a distinct issue, which Maxime is already adressing."}],"tags":[],"pull_requests":[]},{"author":"strub","number":116,"state":"open","open_date":"2018-10-17T09:33:29Z","update_date":"2023-04-10T09:50:19Z","discussion":[{"author":"affeldt-aist","date":"2021-01-27T00:42:35Z","comment":"We should maybe merge this one. @strub Do you want to squash some of the last commits which do not look informative? (\"merge remote-tracking...\", commit without commit message, \"merge branch 'master'...)"},{"author":"affeldt-aist","date":"2021-03-12T04:18:31Z","comment":"> We should maybe merge this one.\r\n\r\nSorry, I didn't realize it was not yet completed. Or are the Admitted's irrelevant?"},{"author":"affeldt-aist","date":"2022-07-03T09:32:21Z","comment":"Any progress?"}],"tags":[{"tag":"enhancement :sparkles:","description":"This issue/PR is about adding new features enhancing the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":115,"state":"closed","open_date":"2018-10-10T03:48:25Z","update_date":"2020-05-04T20:11:33Z","discussion":[{"author":"affeldt-aist","date":"2020-05-04T15:01:21Z","comment":"The lemmas proposed by this PR have been implemented by PR #194 that has been merged."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":114,"state":"closed","open_date":"2018-10-05T06:38:04Z","update_date":"2020-06-04T22:20:21Z","discussion":[{"author":"drouhling","date":"2018-10-08T13:26:56Z","comment":"Another experiment with `bigop` and `maxr` is in the `bigmaxr` branch."},{"author":"drouhling","date":"2018-10-09T12:01:24Z","comment":"I'll merge `bigmaxr` in `entourages`, since it is sufficient for the purpose of #112.\r\n\r\nHowever it would be nice to extend it with something similar to `bigmaxr_mem` (replacing `head r s` with any default value `x` smaller than all the elements of the family), maybe reusing parts of your work. But this should not be in `Rstruct.v`, since this has nothing to do with `R`."},{"author":"affeldt-aist","date":"2020-05-04T19:51:39Z","comment":"A replacement for `bigmaxr_mem` (as mentioned by @drouhling ) has already been merged into `master` (in `normedtype.v`). The commit of this PR is about `Rstruct.v`, at a time when we were still relying on it. We can forget about it. We can also merge it to keep `Rstruct.v` as up-to-date as possible (I know at least one project that is using `Rstruct.v` through mathcomp-analysis)."}],"tags":[],"pull_requests":[]},{"author":"anton-trunov","number":113,"state":"closed","open_date":"2018-10-03T10:15:08Z","update_date":"2018-10-03T11:43:44Z","discussion":[{"author":"strub","date":"2018-10-03T11:20:07Z","comment":"`git+https` is a valid scheme ? Because `git` is bugging on it."},{"author":"anton-trunov","date":"2018-10-03T11:28:09Z","comment":"@strub Oh, shoot, you are right! I copied it from here: https://github.com/coq/opam-coq-archive/blob/30ca50d426ab4e54a5c496774483eb58debb1b7e/extra-dev/packages/coq-mathcomp-multinomials/coq-mathcomp-multinomials.dev/opam#L5"},{"author":"anton-trunov","date":"2018-10-03T11:29:36Z","comment":"And Coq does not have this `git+` prefix: https://github.com/coq/coq/blob/016f4a302090bcbb4ad47197dda2c60d6f598f6a/coq.opam#L6\r\n\r\nSorry for the noise and let me quickly force-push a correction."},{"author":"strub","date":"2018-10-03T11:41:47Z","comment":"That's unfair to point my own mistakes :)"},{"author":"anton-trunov","date":"2018-10-03T11:43:43Z","comment":"Thanks for merging! I'm gonna go and fix the packages in the coq-opam archive :)"}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":112,"state":"closed","open_date":"2018-10-03T08:50:20Z","update_date":"2020-08-10T12:32:26Z","discussion":[{"author":"affeldt-aist","date":"2018-10-05T06:35:19Z","comment":"A theory of bigrmax is definitely needed (e.g., https://github.com/affeldt-aist/infotheo/blob/master/Rbigop.v). (Warning: that's old code.)"},{"author":"drouhling","date":"2018-10-31T08:45:44Z","comment":"Summary of a discussion with @CohenCyril:\r\n- I'll split this PR in two parts: one introducing the use of entourages and the other removing the dependency on standard R.\r\n- the compilation issue in `derive.v` seems to be related to unification and should be fixed once #118 is resolved.\r\n- some lemmas in the `Bigmaxr` section can be generalised and might belong to mathcomp.\r\n- once the PRs are merged, a `Rmodels` directory should be created and should contain `Rstruct.v`, `exodus.v` from #116 and maybe one day the model of reals using rational Cauchy filters we discussed while preparing our submission to the Coq workshop."},{"author":"CohenCyril","date":"2020-08-07T15:00:33Z","comment":"@drouhling I think this issue was completely solved after the merge of #246, am I right?"},{"author":"drouhling","date":"2020-08-08T11:00:21Z","comment":"> @drouhling I think this issue was completely solved after the merge of #246, am I right?\r\n\r\nIndeed, this PR had no purpose any more."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":111,"state":"closed","open_date":"2018-10-03T08:43:54Z","update_date":"2019-02-22T09:41:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":108,"state":"closed","open_date":"2018-10-02T14:04:12Z","update_date":"2019-02-22T09:41:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":107,"state":"closed","open_date":"2018-09-28T23:15:23Z","update_date":"2018-10-01T13:42:48Z","discussion":[{"author":"CohenCyril","date":"2018-09-28T23:35:56Z","comment":"@drouhling and @affeldt-aist I changed my mind again, I'd like to keep `littleo` and `bigO` for the spec lemmas as in this commit. Indeed it is a shame to \"reserve\" such short and explicit names just for local definition... What do you think?"},{"author":"CohenCyril","date":"2018-10-01T07:29:08Z","comment":"> The result depends on how the goal is parsed, since the first occurrence is matched, and the proof script is harder to read in my opinion.\r\n\r\nI agree, but it is generally the case with spec lemmas (`leqP`, `ltngtP`, `altP eqP`, ...) we only add arguments when there is an ambiguity. Here in most (all?) cases, there are exactly as many bigOs as there are `have :=` and hence I am fine with it."},{"author":"drouhling","date":"2018-10-01T07:59:47Z","comment":"> > The result depends on how the goal is parsed, since the first occurrence is matched, and the proof script is harder to read in my opinion.\r\n> \r\n> I agree, but it is generally the case with spec lemmas (`leqP`, `ltngtP`, `altP eqP`, ...) we only add arguments when there is an ambiguity. Here in most (all?) cases, there are exactly as many bigOs as there are `have :=` and hence I am fine with it.\r\n\r\nI'm also fine with it, then.\r\n\r\nYou should rebase on master: there is a conflict between `Let littleo ...` from master and `Lemma littleo ...` from this branch."}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":106,"state":"closed","open_date":"2018-09-27T12:25:15Z","update_date":"2018-09-27T15:25:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"strub","number":105,"state":"closed","open_date":"2018-09-26T10:30:25Z","update_date":"2018-09-26T11:02:49Z","discussion":[{"author":"strub","date":"2018-09-26T10:55:54Z","comment":"Maybe waiting the CI to complete before merging is a good baseline :)"},{"author":"CohenCyril","date":"2018-09-26T10:57:29Z","comment":"> Maybe waiting the CI to complete before merging is a good baseline :)\r\n\r\nI did..."},{"author":"strub","date":"2018-09-26T10:59:17Z","comment":"I had a mail telling me that the CI failed on my side... I won't try to understand."},{"author":"CohenCyril","date":"2018-09-26T11:02:49Z","comment":"Commit 5480a961218a4a4868bbf37d21257c44e85a972b was a success: https://circleci.com/gh/math-comp/analysis/358\r\n\r\nCommit b1c8355fe0d1ee04f170264a41bbd7c6c745d66c was not: https://circleci.com/gh/math-comp/analysis/357, but I do not understand what this commit refers to..."}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":101,"state":"closed","open_date":"2018-09-13T11:49:13Z","update_date":"2018-09-14T07:12:33Z","discussion":[{"author":"CohenCyril","date":"2018-09-13T14:15:09Z","comment":"> There is something I don't truly understand: I had to add occurrences of `is_true` in the definitions of `littleo`, `bigO`, etc, in order for the hints related to `littleoP`, `bigOP`, etc, to work\r\n\r\nIn the hint patterns, it is mandatory to explicitly add `is_true` at the head, because since any term can be provided, the system has no way to know it should be coerced to `Prop`. For the uses I made comments about, I do not understand the reason..."},{"author":"drouhling","date":"2018-09-13T14:31:22Z","comment":"Notations are local to sections, so the `Local` keyword is not mandatory here. I can still add it for safety."},{"author":"CohenCyril","date":"2018-09-13T14:32:50Z","comment":"> Notations are local to sections, so the `Local` keyword is not mandatory here. I can still add it for safety.\r\n\r\nsure :)"},{"author":"drouhling","date":"2018-09-13T14:36:03Z","comment":"> In the hint patterns, it is mandatory to explicitly add `is_true` at the head, because since any term can be provided, the system has no way to know it should be coerced to `Prop`. For the uses I made comments about, I do not understand the reason...\r\n\r\nI put those `is_true` because otherwise the hints inside the sections, which use the notations as in\r\n```Hint Extern 0 (bigOmega _ _ _) => solve[apply: bigOmegaP] : core.```\r\nwon't work.\r\n\r\n"}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":100,"state":"closed","open_date":"2018-09-12T12:36:27Z","update_date":"2018-09-12T13:14:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":99,"state":"closed","open_date":"2018-09-12T07:04:13Z","update_date":"2018-09-12T09:26:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":98,"state":"closed","open_date":"2018-09-10T13:17:09Z","update_date":"2018-09-11T11:29:47Z","discussion":[{"author":"drouhling","date":"2018-09-10T14:19:27Z","comment":"Indeed. I thought this was rather the purpose of #90 but since this example file is not compiled with make there is a chance we forget about it.\r\n\r\nI'll move these pieces of code and let you resolve the conflicts with #90 :-)"},{"author":"CohenCyril","date":"2018-09-10T14:38:50Z","comment":"Also I rather would name the directory `misc` and the file `uniform_bigO`."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":96,"state":"closed","open_date":"2018-09-03T13:41:26Z","update_date":"2018-09-12T09:28:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":93,"state":"closed","open_date":"2018-08-20T09:22:41Z","update_date":"2018-09-12T13:12:15Z","discussion":[{"author":"strub","date":"2018-09-06T09:39:15Z","comment":"Which version of finmap this PR is targeting?"},{"author":"drouhling","date":"2018-09-06T12:40:18Z","comment":"This was done with the dev version but since it also works with v1.1.0 we might as well lower the deps as in #96."}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":92,"state":"closed","open_date":"2018-08-17T14:28:22Z","update_date":"2018-09-13T11:49:51Z","discussion":[{"author":"CohenCyril","date":"2018-08-17T15:09:17Z","comment":"Thanks @drouhling. The right fix for finmap would be to depend on the released version 1.0.0, the dev version is now aligned with 1.1.0 which deprecated `seq_fset` in favour of `[fset x in s]`. Could you please split your pr in two? (One that depends on finmap 1.0.0 and does not fix related changes, and a second one that compiles with 1.1.0 but which will need `seq_fset` related stuff removed/replaced?)"},{"author":"drouhling","date":"2018-08-20T09:24:38Z","comment":"Thanks for the tip on how to use the new finmap. The changes related to this are now in #93."}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":91,"state":"closed","open_date":"2018-07-11T11:06:52Z","update_date":"2018-09-13T11:50:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":90,"state":"closed","open_date":"2018-07-09T17:03:46Z","update_date":"2020-11-16T10:55:00Z","discussion":[{"author":"CohenCyril","date":"2020-11-16T10:54:59Z","comment":"Subsumed by #282 "}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":89,"state":"closed","open_date":"2018-07-09T14:20:36Z","update_date":"2018-07-09T15:05:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":88,"state":"closed","open_date":"2018-07-09T14:12:23Z","update_date":"2018-07-09T15:05:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":87,"state":"closed","open_date":"2018-07-08T08:01:50Z","update_date":"2018-07-08T16:36:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":86,"state":"closed","open_date":"2018-07-06T14:56:50Z","update_date":"2018-07-08T16:36:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":85,"state":"closed","open_date":"2018-07-06T03:17:33Z","update_date":"2018-07-06T09:10:42Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":84,"state":"closed","open_date":"2018-06-08T07:49:48Z","update_date":"2018-06-18T19:18:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":83,"state":"open","open_date":"2018-04-25T21:34:05Z","update_date":"2023-03-15T14:37:19Z","discussion":[{"author":"affeldt-aist","date":"2021-05-12T02:04:20Z","comment":"memo: mentioned in PR #294 "},{"author":"affeldt-aist","date":"2021-10-04T03:04:28Z","comment":"partially handed by PR #435?"}],"tags":[{"tag":"experiment :test_tube:","description":"This issue/PR is very experimental"},{"tag":"renaming/refactoring","description":"This is about a renaming or refactoring in the library"}],"pull_requests":[]},{"author":"affeldt-aist","number":82,"state":"closed","open_date":"2018-04-25T06:24:00Z","update_date":"2018-06-18T19:19:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":81,"state":"closed","open_date":"2018-04-24T16:55:06Z","update_date":"2018-06-18T19:19:21Z","discussion":[{"author":"CohenCyril","date":"2018-04-26T14:47:11Z","comment":"@strub can you investigate please?"},{"author":"strub","date":"2018-05-20T12:05:23Z","comment":"This is certainly a caching issue. Try to merge master into your branch to get the new CI file.\r\n\r\nAnyway, CI caching system is broken-by-design (TM)."},{"author":"CohenCyril","date":"2018-06-08T07:50:05Z","comment":"Things specific to CI are now moved to issue #84"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":80,"state":"closed","open_date":"2018-04-24T09:15:34Z","update_date":"2019-02-22T09:42:22Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":79,"state":"closed","open_date":"2018-04-24T09:11:12Z","update_date":"2018-04-24T16:29:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":78,"state":"closed","open_date":"2018-04-24T08:58:14Z","update_date":"2018-06-18T19:19:49Z","discussion":[{"author":"CohenCyril","date":"2018-04-24T09:42:53Z","comment":"The failure comes from the fact we just moved real_closed out of math-comp/ but did not modify the opam-coq-archive package yet... I'm on it..."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":77,"state":"closed","open_date":"2018-04-24T08:17:35Z","update_date":"2018-04-24T08:48:46Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":76,"state":"closed","open_date":"2018-04-24T08:13:00Z","update_date":"2018-04-24T08:13:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":75,"state":"closed","open_date":"2018-04-19T01:04:07Z","update_date":"2018-04-24T09:05:06Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":74,"state":"closed","open_date":"2018-04-17T11:54:39Z","update_date":"2018-04-24T09:05:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"larsr","number":73,"state":"closed","open_date":"2018-04-17T10:08:23Z","update_date":"2018-04-17T15:21:58Z","discussion":[{"author":"CohenCyril","date":"2018-04-17T14:15:27Z","comment":"Thanks for your PR, I took the liberty to simplify even more."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":69,"state":"closed","open_date":"2018-04-16T07:56:54Z","update_date":"2018-04-24T09:04:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":66,"state":"closed","open_date":"2018-04-03T09:20:48Z","update_date":"2018-04-24T09:04:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":65,"state":"closed","open_date":"2018-03-30T14:14:11Z","update_date":"2018-04-24T09:04:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":64,"state":"closed","open_date":"2018-03-30T09:17:09Z","update_date":"2018-04-09T12:45:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":62,"state":"closed","open_date":"2018-03-23T06:29:55Z","update_date":"2018-04-24T09:04:42Z","discussion":[{"author":"CohenCyril","date":"2018-03-23T08:50:36Z","comment":"> There is sill one Reserved Notation in the middle of hierarchy.v:\r\n> Reserved Notation \"|[ x ]|\" (at level 0, x at level 99, format \"|[ x ]|\").\r\n> \r\n> Putting it at the top of the file reveals that it conflicts with the tactical\r\n> => [[...]|[...]]\r\n\r\nYes, this conflict is an issue I know, and it is supposed to be fixed by #4 "}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":59,"state":"closed","open_date":"2018-03-22T12:18:19Z","update_date":"2018-03-23T08:01:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":58,"state":"closed","open_date":"2018-03-22T06:43:14Z","update_date":"2018-04-24T09:04:36Z","discussion":[{"author":"drouhling","date":"2018-03-22T08:44:25Z","comment":"I also have a question which is unrelated to the changes brought by this PR. Why is the `_ \\is _` construction used, while it is not used for `littleo` and `bigO`?"},{"author":"affeldt-aist","date":"2018-03-22T09:34:38Z","comment":"> Why is the _ \\is _ construction used, while it is not used for littleo and bigO?\r\n\r\nThe usefulness of rewriting was more obvious for littleo and bigO than for big-Omega and big-Theta,\r\nthis is why we started with the simpler \\is construct only. Since then, the boilerplate of littleo and bigO\r\nhas been adapted and \\is remains only because it is slightly more general than =Omega_ and =Theta_\r\n(it allows for functions with different codomains). These are not strong reasons to keep it."},{"author":"drouhling","date":"2018-03-22T10:33:45Z","comment":"OK thanks for the clarification."}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":57,"state":"closed","open_date":"2018-03-21T15:19:35Z","update_date":"2018-03-22T10:27:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":55,"state":"closed","open_date":"2018-03-21T09:47:25Z","update_date":"2018-03-22T08:45:54Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":54,"state":"closed","open_date":"2018-03-20T15:10:59Z","update_date":"2018-03-21T13:35:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":53,"state":"closed","open_date":"2018-03-20T14:53:25Z","update_date":"2018-03-21T13:35:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":52,"state":"closed","open_date":"2018-03-20T14:31:41Z","update_date":"2018-03-21T13:36:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":51,"state":"closed","open_date":"2018-03-15T06:44:00Z","update_date":"2018-03-22T08:45:57Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":50,"state":"closed","open_date":"2018-03-08T01:44:05Z","update_date":"2018-04-24T09:04:19Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":49,"state":"closed","open_date":"2018-03-07T15:23:38Z","update_date":"2018-03-21T01:18:46Z","discussion":[{"author":"CohenCyril","date":"2018-03-07T15:45:18Z","comment":"@affeldt-aist hi! Can you please rebase on top of master? (It looks like you did a merge instead of a rebase)"},{"author":"affeldt-aist","date":"2018-03-08T01:03:15Z","comment":"Similar PR in branch issue7b (with no merge-commit).\r\n"},{"author":"CohenCyril","date":"2018-03-20T17:24:52Z","comment":"Since #50 has been merged, should this one be closed?"},{"author":"affeldt-aist","date":"2018-03-21T01:16:02Z","comment":"Yes."}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":48,"state":"closed","open_date":"2018-03-01T17:07:13Z","update_date":"2018-03-02T00:01:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"amahboubi","number":47,"state":"closed","open_date":"2018-03-01T10:46:35Z","update_date":"2018-03-01T13:24:35Z","discussion":[{"author":"CohenCyril","date":"2018-03-01T10:48:40Z","comment":"You are right! And indeed this is very specfic to Damien working branch `diff`. I guess he plans to make a PR at somepoint and we have to solve issues related to #46 before merging into `master`..."},{"author":"CohenCyril","date":"2018-03-01T11:23:05Z","comment":"Making a PR on a branch that will ultimately also be a PR is not a good practice. The reason it is not a PR yet is that @drouhling did not judge it was ready yet for integration, so the best practice is to interact with @drouhling instead, and when it is a PR, we can start reviewing/discussing and amending.\r\n\r\nI think most of the confusion here comes from the fact that I showed you a work in progress that I could see @drouhling was working on, but that even I did not have many opportunities to discuss with him yet... We are basically looking over his shoulder right now ;)"},{"author":"amahboubi","date":"2018-03-01T13:24:35Z","comment":"Ok. I am closing the PR."}],"tags":[],"pull_requests":[]},{"author":"strub","number":44,"state":"closed","open_date":"2018-02-14T16:11:56Z","update_date":"2018-04-24T09:04:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"strub","number":43,"state":"closed","open_date":"2018-02-14T13:38:50Z","update_date":"2018-02-14T13:57:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"strub","number":42,"state":"closed","open_date":"2018-02-10T10:03:04Z","update_date":"2018-02-10T14:28:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"strub","number":41,"state":"closed","open_date":"2018-02-09T17:21:59Z","update_date":"2018-02-09T17:22:19Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":39,"state":"closed","open_date":"2018-02-09T14:16:24Z","update_date":"2018-02-22T08:12:57Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"strub","number":38,"state":"closed","open_date":"2018-02-09T12:15:17Z","update_date":"2018-02-09T12:57:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":36,"state":"closed","open_date":"2018-02-09T07:59:03Z","update_date":"2018-09-13T11:51:00Z","discussion":[{"author":"affeldt-aist","date":"2018-02-09T08:51:33Z","comment":"You are right. How about I open a new issue about Omega and Theta? I would like to prove a few more properties about them and I may not be able to do it soon. Yet, since this PR involves file deletion, it is maybe better to merge it now."},{"author":"drouhling","date":"2018-02-09T09:04:18Z","comment":"Agreed.\r\n\r\nI suggest:\r\n1. adding a very short documentation for Omega and Theta, saying explicitly that it is WIP, so that their existence is at least mentioned;\r\n2. merging this PR after this addition and open an issue for the missing properties;\r\n3. writing a more precise documentation once these properties are proven."},{"author":"affeldt-aist","date":"2018-02-22T02:06:42Z","comment":"Following drouhling's comment, I have added a few words about the existence of Omega and Theta and their wip status, update the file with wip, and rebased the issse33 branch on top of the current master branch. Issue33 to be kept opened until work on Omega and Theta is completed. Can maybe be merged to get rid of equiv.v.\r\n\r\n"},{"author":"drouhling","date":"2018-02-22T08:59:34Z","comment":"Cleaned up the history, ready to merge."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":35,"state":"closed","open_date":"2018-02-09T06:26:16Z","update_date":"2018-09-13T11:50:58Z","discussion":[{"author":"CohenCyril","date":"2018-02-09T08:33:45Z","comment":"I am not happy with `limD`: it is more appropriate for `lim (F + G) = lim F + lim G` (under the right convergence hypotheses). That's why I added the `f` prefix. But I was not happy with it too (and it's a bit of Coquelicots heritage too). Let's bring this discussion to #29 before merging."},{"author":"CohenCyril","date":"2018-02-09T09:29:15Z","comment":"Also, continuous being a unary predicate, it should be a suffix as in `add_continuous` etc..."},{"author":"drouhling","date":"2018-02-15T09:11:42Z","comment":"I agree with `add_continuous`; `continuousD` is more appropriate for\r\n`{for x, continuous f} -> {for x, continuous g} -> {for x, continuous (f + g)}`, which is a consequence of\r\n`add_continuous` and `continuous_comp` (still to be proven)."},{"author":"CohenCyril","date":"2018-02-22T10:09:08Z","comment":"@affeldt-aist thanks for the update, but can you rebase your branch against the current master?"},{"author":"CohenCyril","date":"2018-02-23T13:50:44Z","comment":"I did the rebase. Waiting for CI to check then merge"}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":30,"state":"closed","open_date":"2018-02-08T13:07:11Z","update_date":"2018-02-08T16:05:18Z","discussion":[{"author":"CohenCyril","date":"2018-02-08T13:18:26Z","comment":"Yes we should."},{"author":"CohenCyril","date":"2018-02-08T14:30:18Z","comment":"> Shouldn’t we move this file at the root level ?\r\n\r\n@strub I created issue #31 for this purpose.\r\n"}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":28,"state":"closed","open_date":"2018-02-08T06:33:36Z","update_date":"2018-02-22T08:13:00Z","discussion":[{"author":"CohenCyril","date":"2018-02-08T08:10:52Z","comment":"Lets's have the equational formulations as in mathcomp."},{"author":"CohenCyril","date":"2018-02-08T16:07:26Z","comment":"I did not see you updated your PR :+1:"}],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":26,"state":"closed","open_date":"2018-02-07T19:32:52Z","update_date":"2018-02-08T08:31:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":21,"state":"closed","open_date":"2018-02-07T09:49:41Z","update_date":"2018-02-08T13:24:30Z","discussion":[{"author":"CohenCyril","date":"2018-02-07T10:14:47Z","comment":"> in posnum.v:\r\n> \r\n> my understanding of the !! x notation is not perfect (in particular how exactly should it be used?) so I would like help for its documentation.\r\n\r\nThe notation `!! t` by Enrico Tassi (cf issue coq or mathcomp to be found... @gares would you know quickly which one?) triggers pretyping, to fill the holes of the term `t`. The main purpose is to trigger typeclass inference in the `body` of a ssreflect `have := !! body` tactic use case.\r\n(Ultimately this should be backported to coq/ssreflect cf issue #5)\r\n\r\n> the [gt0 of x] notation is defined twice, is there any reason?\r\n\r\nYes, once inside a section (so it disappears in its end) and once outside for exporting.\r\nIdeally the format should be factored out by a `Reserved Notation` at the beginning of the file, but this is independent from this PR about doc. We should open an issue for that (regrouping all problems of the same nature).\r\n\r\n> in topology.v:\r\n> \r\n> Filtered.Source is used several times to define canonical instances of Filtered.source. It would seem reasonable to export it to get rid of the Filtered prefix.\r\n\r\nMaybe maybe not, I do not know what's best. It's good it's been identified by documenting, but we should open an issue for that as it is independent from the doc PR.\r\n\r\n> I haven't documented in_filter since it seems to be only a tool for the near tactics, should I?\r\n\r\nIndeed, it's an internal construction, do not document.\r\n\r\n> I haven't documented filter_on and pfilter_on because I think something should be done about them. Sometimes we use these structures, sometimes we use the type classes Filter and ProperFilter (we also have UltraFilter). Shouldn't we choose one mechanism once and for all instead of mixing them, or do I miss the point of these structures?\r\n\r\nActually, Coquelicot's Hierarchy was designed using typeclasses for filters and we kept that. It would be a major review of the code to replace them by their canonical structure counterpart, and we should definitely try, as I suspect it would shorten some proof searchs (and fix the few ones that are broken). But it might introduce other problems that I did not assess yet. So let's open an issue.\r\n\r\nOn the other hand, in the current status of the code, the canonical structures `filter_on` and `pfilter_on` are the only way to make Landau work. TypeClass resolution can call Canonical Structure inference by unification, by CS has no mean to invoke TC resolution in the current state of this code. In other words, once you go CS, you cannot rely on TC anymore to do a complementary job.\r\n"},{"author":"drouhling","date":"2018-02-07T10:39:21Z","comment":"> > the [gt0 of x] notation is defined twice, is there any reason?\r\n>\r\n> Yes, once inside a section (so it disappears in its end) and once outside for exporting.\r\nIdeally the format should be factored out by a Reserved Notation at the beginning of the file, but this is independent from this PR about doc. We should open an issue for that (regrouping all problems of the same nature).\r\n\r\nIn fact, both are outside, hence my question."},{"author":"CohenCyril","date":"2018-02-07T15:03:17Z","comment":"> > > the [gt0 of x] notation is defined twice, is there any reason?\r\n>  >\r\n> > Yes, once inside a section (so it disappears in its end) and once outside for exporting.\r\n> > Ideally the format should be factored out by a Reserved Notation at the beginning of the file, but this is independent from this PR about doc. We should open an issue for that (regrouping all problems of the same nature).\r\n> \r\n> In fact, both are outside, hence my question.\r\n\r\nWoops, I guess its redundant then..."}],"tags":[],"pull_requests":[]},{"author":"affeldt-aist","number":20,"state":"closed","open_date":"2018-02-05T08:00:35Z","update_date":"2018-02-08T13:24:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":18,"state":"closed","open_date":"2018-01-26T14:48:25Z","update_date":"2018-02-08T13:24:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"CohenCyril","number":17,"state":"closed","open_date":"2018-01-24T14:10:35Z","update_date":"2018-01-26T15:37:25Z","discussion":[{"author":"CohenCyril","date":"2018-01-26T15:37:20Z","comment":"Actually, I'm merging, it makes proof more \"ssreflect\"-like despite the discrepancy with => and : of ssreflect (hopefully, one day we can have ssr intro patterns in Tactic Notations)"}],"tags":[],"pull_requests":[]},{"author":"strub","number":16,"state":"closed","open_date":"2018-01-24T11:55:55Z","update_date":"2018-01-26T14:46:13Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":15,"state":"closed","open_date":"2018-01-19T15:45:33Z","update_date":"2018-02-08T12:35:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"drouhling","number":14,"state":"closed","open_date":"2018-01-18T09:14:00Z","update_date":"2018-02-08T12:35:13Z","discussion":[{"author":"drouhling","date":"2018-01-18T12:25:37Z","comment":"The generalization to matrices shouldn't take much time.\r\n\r\nI am not sure however to understand your second point. Vectors inherit the structure of the type of the coordinates so if I have only a `uniformType` I won't be able to build this partial `normedModType` mixin."}],"tags":[],"pull_requests":[]},{"author":"drouhling","number":11,"state":"closed","open_date":"2018-01-16T09:56:12Z","update_date":"2018-01-17T09:39:33Z","discussion":[],"tags":[],"pull_requests":[]}]