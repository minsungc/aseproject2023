[{"author":"MSoegtropIMC","number":177,"state":"closed","open_date":"2023-02-28T16:05:45Z","update_date":"2023-03-15T13:11:36Z","discussion":[{"author":"spitters","date":"2023-02-28T16:17:00Z","comment":"I assume it's related to this PR, which has some problems...\r\nhttps://github.com/coq-community/corn/pull/176"},{"author":"MSoegtropIMC","date":"2023-02-28T16:54:35Z","comment":"The reason I noted is that `coq-math-classes` also has issues, and it depends on it. For most packages the issue is that having no locality attribute for a hint is now a fatal error."},{"author":"Zimmi48","date":"2023-03-04T21:25:48Z","comment":"My expectation is that once coq-math-classes is updated, the latest release of CoRN should work fine with Coq 8.17. Please confirm if that's the case @MSoegtropIMC (in which case no new tag will be needed)."},{"author":"MSoegtropIMC","date":"2023-03-15T13:11:35Z","comment":"I had to relax the Coq version restriction in opam:\r\n\r\nhttps://github.com/coq/opam-coq-archive/pull/2507\r\n\r\nbut otherwise it works. So I will use 8.16.0 and close this issue."}],"tags":[],"pull_requests":[]},{"author":"olaure01","number":176,"state":"open","open_date":"2022-11-27T22:31:47Z","update_date":"2022-11-27T22:31:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":175,"state":"closed","open_date":"2022-11-25T10:51:15Z","update_date":"2022-11-25T11:36:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"MSoegtropIMC","number":173,"state":"closed","open_date":"2022-08-10T10:24:29Z","update_date":"2022-09-06T13:50:04Z","discussion":[{"author":"Zimmi48","date":"2022-08-10T13:48:30Z","comment":"@spitters @VincentSe: do you prefer to release e34e331fa259c18192639ef3ce9e80cbf5db99dc (compatible with Coq 8.7-8.16 but already incompatible with Coq master) or do you prefer to release the head of master (compatible with Coq 8.11+, including Coq master)? If you want my opinion, I'd recommend using the head of master (because Coq < 8.11 is very old and with some luck this release will stay compatible with Coq 8.17 as well)."},{"author":"spitters","date":"2022-08-10T14:17:23Z","comment":"I agree with your recommendation!\n\nOn Wed, Aug 10, 2022 at 3:48 PM Théo Zimmermann ***@***.***>\nwrote:\n\n> @spitters <https://github.com/spitters> @VincentSe\n> <https://github.com/VincentSe>: do you prefer to release e34e331\n> <https://github.com/coq-community/corn/commit/e34e331fa259c18192639ef3ce9e80cbf5db99dc>\n> (compatible with Coq 8.7-8.16 but already incompatible with Coq master) or\n> do you prefer to release the head of master (compatible with Coq 8.11+,\n> including Coq master)? If you want my opinion, I'd recommend using the head\n> of master (because Coq < 8.11 is very old and with some luck this release\n> will stay compatible with Coq 8.17 as well).\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/issues/173#issuecomment-1210701032>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTRS7N5EABMYV7IMTADVYOXLRANCNFSM56D65V5A>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n"},{"author":"Zimmi48","date":"2022-08-20T12:16:20Z","comment":"I've pushed a new 8.16.0 tag and a PR https://github.com/coq/opam-coq-archive/pull/2261."},{"author":"spitters","date":"2022-08-21T17:14:10Z","comment":"Thanks!\n\nOn Sat, Aug 20, 2022 at 2:16 PM Théo Zimmermann ***@***.***>\nwrote:\n\n> I've pushed a new 8.16.0 tag and a PR coq/opam-coq-archive#2261\n> <https://github.com/coq/opam-coq-archive/pull/2261>.\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/issues/173#issuecomment-1221304390>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTXUK5EV3W7HR64U3BDV2DEB7ANCNFSM56D65V5A>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n"},{"author":"MSoegtropIMC","date":"2022-09-06T13:50:03Z","comment":"Thanks! I updated coq-corn to version 8.16.0 in the preparation branch and close now."}],"tags":[],"pull_requests":[]},{"author":"SnarkBoojum","number":172,"state":"open","open_date":"2022-07-15T09:58:39Z","update_date":"2022-08-03T11:45:36Z","discussion":[{"author":"spitters","date":"2022-08-03T11:45:35Z","comment":"We've tried to resolve these issues here. We would like to move to MIT.\r\nhttps://github.com/coq-community/corn/pull/99"}],"tags":[],"pull_requests":[]},{"author":"mrhaandi","number":171,"state":"closed","open_date":"2022-07-12T08:36:51Z","update_date":"2022-07-12T09:09:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":170,"state":"closed","open_date":"2022-07-06T21:14:45Z","update_date":"2022-07-09T14:30:32Z","discussion":[{"author":"Zimmi48","date":"2022-07-06T21:21:14Z","comment":"Unfortunately, I couldn't enable testing with Coq 8.16 because there is no math-classes release that is compatible with it yet (fixing this might just require changing the version constraints in the opam-repository though)."},{"author":"spitters","date":"2022-07-07T05:53:16Z","comment":"@Zimmi48 yes, we should just do a new release for 8.16.\r\nhttps://github.com/coq-community/math-classes/releases\r\nI think the only thing that needs to be done is to write the new release notes.\r\nI don't know if I'll find the time before the holiday though, so if you happen to beat me to it that's fine."},{"author":"Zimmi48","date":"2022-07-09T14:25:54Z","comment":"@spitters Actually my point was that I don't think a new release is needed at all. I'm betting that relaxing the Coq version bounds on the latest release is sufficient. I'll open a PR trying that."},{"author":"Zimmi48","date":"2022-07-09T14:30:32Z","comment":"Actually, the opam-coq-archive CI won't confirm if it works or not because it doesn't yet test Coq 8.16. However, @MSoegtropIMC should know whether math-classes is already compatible with Coq 8.16 or not (and if it isn't, he will likely open an issue asking for a new release in the coming weeks)."}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":169,"state":"closed","open_date":"2022-07-06T10:20:30Z","update_date":"2022-07-07T08:09:01Z","discussion":[{"author":"spitters","date":"2022-07-06T11:40:30Z","comment":"@Zimmi48 Didn't you disable CI for <8.11, or was that for math-classes?\r\n@ppedrot Thanks! However, CI fails for 8.12, 8.13 :thinking: "},{"author":"ppedrot","date":"2022-07-06T12:41:12Z","comment":"@spitters given the log, the 8.12-8.13 failures are unrelated, there is something wrong with the docker image it seems."},{"author":"Zimmi48","date":"2022-07-06T13:00:52Z","comment":"No, that was math-classes. CI contains all Coq versions starting at 8.7 it seems. I have restarted the failed jobs in case it was a transient issue with Docker."},{"author":"Zimmi48","date":"2022-07-06T14:08:51Z","comment":"Looks like the issue was transient indeed. This PR works on every version starting at 8.11."},{"author":"spitters","date":"2022-07-06T20:25:47Z","comment":"@Zimmi48 shall we just remove CI for 8.10 ?"},{"author":"Zimmi48","date":"2022-07-06T20:46:18Z","comment":"8.10 and below then? Sure, I can do that if you want."},{"author":"spitters","date":"2022-07-06T20:58:12Z","comment":"Yes, that would be great\n\nOn Wed, Jul 6, 2022 at 10:46 PM Théo Zimmermann ***@***.***>\nwrote:\n\n> 8.10 and below then? Sure, I can do that if you want.\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/pull/169#issuecomment-1176717303>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTQ4NOWLNL2LD3XWOYLVSXWCNANCNFSM52ZHEQJA>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n"},{"author":"Zimmi48","date":"2022-07-06T21:17:06Z","comment":"See #170"}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":168,"state":"closed","open_date":"2022-02-05T22:43:26Z","update_date":"2022-02-09T09:15:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"MSoegtropIMC","number":167,"state":"closed","open_date":"2022-01-18T18:00:48Z","update_date":"2022-01-23T21:30:58Z","discussion":[{"author":"MSoegtropIMC","date":"2022-01-23T14:13:26Z","comment":"I just wanted to let you know that with the updated coq-math-classes corn 8.13 does compile with Coq 8.15.\r\n\r\nI will push an update to the 8.13 opam package stating that it is compatible with Coq 8.15.\r\n\r\nIn case this is what you want to see in Coq Platform for Coq 8.15, please just close this issue."}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":166,"state":"closed","open_date":"2022-01-07T09:48:22Z","update_date":"2022-01-07T10:25:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"jakezweifler","number":165,"state":"closed","open_date":"2021-10-27T04:18:52Z","update_date":"2021-10-31T16:25:25Z","discussion":[{"author":"spitters","date":"2021-10-31T16:25:20Z","comment":"Many thanks!"}],"tags":[],"pull_requests":[]},{"author":"jakezweifler","number":164,"state":"open","open_date":"2021-10-11T16:53:08Z","update_date":"2021-10-13T19:24:30Z","discussion":[{"author":"spitters","date":"2021-10-13T19:24:30Z","comment":"That would be great. Please send a PR."}],"tags":[],"pull_requests":[]},{"author":"MSoegtropIMC","number":163,"state":"closed","open_date":"2021-10-02T10:27:00Z","update_date":"2021-10-02T16:18:22Z","discussion":[{"author":"spitters","date":"2021-10-02T11:02:44Z","comment":"I'm guessing we want to transition to 8.14.0 when it's released.\r\nIs there anything that needs to be done now?"},{"author":"Zimmi48","date":"2021-10-02T13:45:39Z","comment":"I don't think so. The latest release is already compatible with 8.14, as Michael mentioned."},{"author":"MSoegtropIMC","date":"2021-10-02T13:53:14Z","comment":"This issue is to inform you ahead of time and to track things. If it is closed, it means I go with `coq-corn.8.13.0` - which I probably won't do anyway if there will be a `coq-corn.8.14.0`, but as written above, if you want to be safe you should keep this issue open until I did the PR which moves Coq Platform to `coq-corn.8.14.0`."},{"author":"Zimmi48","date":"2021-10-02T16:14:08Z","comment":"What I meant was: there will be no 8.14.0 release, or at least not for a while, since the 8.13.0 release was done very recently and is compatible with Coq 8.14 already."},{"author":"MSoegtropIMC","date":"2021-10-02T16:18:21Z","comment":"OK, so if the only change is relaxing the version restrictions in the opam package - however one wants to name it then - it is correct to close this issue. If you decide otherwise before November, please reopen."}],"tags":[],"pull_requests":[]},{"author":"MSoegtropIMC","number":162,"state":"open","open_date":"2021-09-24T13:03:03Z","update_date":"2022-01-26T14:36:47Z","discussion":[{"author":"spitters","date":"2021-10-16T10:51:37Z","comment":"I believe there is a tool that can do this, isn't there?\r\nI'd be happy to merge a PR. I don't know when I have time to do it myself."},{"author":"Zimmi48","date":"2021-10-17T16:35:27Z","comment":"Probably that one: https://github.com/JasonGross/coq-tools/blob/master/absolutize-imports.py"},{"author":"MSoegtropIMC","date":"2022-01-26T09:58:33Z","comment":"@spitters : I have issues compiling examples after fixing the require paths. E.g. when I prepend `CoRN.reals.fast` to the requires in PlotExample.v, I get an error on the `Time Eval vm_compute in PlotQ ...`:\r\n\r\n```\r\nThe term \"∗\" has type \"Lt = Lt\" while it is expected to have type \"Qpos\".\r\n```"},{"author":"spitters","date":"2022-01-26T13:20:20Z","comment":"Could it be a scope problem?\n\nOn Wed, Jan 26, 2022 at 10:58 AM MSoegtropIMC ***@***.***>\nwrote:\n\n> @spitters <https://github.com/spitters> : I have issues compiling\n> examples after fixing the require paths. E.g. when I prepend\n> CoRN.reals.fast to the requires in PlotExample.v, I get an error on the Time\n> Eval vm_compute in PlotQ ...:\n>\n> The term \"∗\" has type \"Lt = Lt\" while it is expected to have type \"Qpos\".\n>\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/issues/162#issuecomment-1022041379>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTWUWAWSWXRKVARWIG3UX7AVJANCNFSM5EV5IJYQ>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n"},{"author":"MSoegtropIMC","date":"2022-01-26T14:36:47Z","comment":"> Could it be a scope problem?\r\n\r\nLikely. I could very likely fix it myself - I am just a bit busy with the Coq Platform release."}],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":161,"state":"closed","open_date":"2021-09-07T13:57:43Z","update_date":"2021-09-07T14:22:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"larsr","number":160,"state":"closed","open_date":"2021-07-26T17:08:16Z","update_date":"2021-09-07T14:37:44Z","discussion":[{"author":"Zimmi48","date":"2021-09-07T14:37:44Z","comment":"Done. See https://github.com/coq-community/corn/releases/tag/8.13.0, https://github.com/NixOS/nixpkgs/pull/136989 and https://github.com/coq/opam-coq-archive/pull/1807."}],"tags":[],"pull_requests":[]},{"author":"mrhaandi","number":159,"state":"closed","open_date":"2021-04-09T17:58:18Z","update_date":"2021-04-09T20:18:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"proux01","number":158,"state":"closed","open_date":"2021-04-01T20:35:33Z","update_date":"2021-04-02T09:41:48Z","discussion":[{"author":"proux01","date":"2021-04-01T21:53:04Z","comment":"This is backward compatible.\r\n"},{"author":"proux01","date":"2021-04-02T08:27:41Z","comment":"Basically: some canonical projections were unused but wrecking havoc with the new feature in Coq."}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":157,"state":"closed","open_date":"2021-03-24T14:22:36Z","update_date":"2021-03-26T10:30:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":156,"state":"closed","open_date":"2021-03-14T21:51:03Z","update_date":"2021-03-15T09:25:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":155,"state":"closed","open_date":"2021-03-13T14:01:36Z","update_date":"2021-03-15T09:25:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":154,"state":"closed","open_date":"2021-03-12T23:03:39Z","update_date":"2021-03-13T13:31:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"SkySkimmer","number":153,"state":"closed","open_date":"2021-03-02T11:25:36Z","update_date":"2021-03-04T00:09:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":152,"state":"closed","open_date":"2021-02-21T13:14:19Z","update_date":"2021-02-21T20:39:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":151,"state":"closed","open_date":"2021-01-21T08:52:34Z","update_date":"2021-01-22T21:26:12Z","discussion":[{"author":"ppedrot","date":"2021-01-22T18:42:01Z","comment":"CI green, let's merge."}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":150,"state":"closed","open_date":"2021-01-09T14:01:47Z","update_date":"2021-01-09T15:30:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":149,"state":"closed","open_date":"2020-12-06T12:25:57Z","update_date":"2020-12-06T14:03:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":148,"state":"closed","open_date":"2020-11-23T08:14:28Z","update_date":"2020-11-23T08:56:05Z","discussion":[{"author":"spitters","date":"2020-11-23T08:23:15Z","comment":"Thanks! Fine with me."}],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":147,"state":"closed","open_date":"2020-11-10T13:37:52Z","update_date":"2020-11-10T14:32:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":146,"state":"closed","open_date":"2020-10-29T20:54:33Z","update_date":"2020-10-30T08:40:41Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":145,"state":"closed","open_date":"2020-10-27T14:01:34Z","update_date":"2020-10-27T19:02:39Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"SkySkimmer","number":144,"state":"closed","open_date":"2020-10-16T12:49:46Z","update_date":"2020-10-19T12:13:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":143,"state":"closed","open_date":"2020-10-04T12:58:56Z","update_date":"2020-10-04T16:25:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":142,"state":"closed","open_date":"2020-09-30T09:56:20Z","update_date":"2020-09-30T11:27:41Z","discussion":[{"author":"spitters","date":"2020-09-30T10:09:42Z","comment":"If you're aiming for speed native arrays might be more appropriate."},{"author":"MSoegtropIMC","date":"2020-09-30T10:27:25Z","comment":"> If you're aiming for speed native arrays might be more appropriate.\r\n\r\nBut this would be Coq 8.13+ only. Would this be desirable? Should there be two versions? Or do we use lists for a while and change to native arrays when 8.13 is common?"},{"author":"VincentSe","date":"2020-09-30T11:27:28Z","comment":"The profiler still shows 50% of the computation time spent in OCaml's garbage collector. So native arrays could accelerate by 2, I don't think that's enough to maintain 2 versions of the computations simultaneously. Maybe we can still accelerate the lists, by removing the unary nat accessors."}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":141,"state":"closed","open_date":"2020-09-27T21:08:05Z","update_date":"2020-09-28T15:45:38Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":140,"state":"closed","open_date":"2020-09-23T16:21:43Z","update_date":"2020-09-23T18:26:00Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":139,"state":"closed","open_date":"2020-09-21T21:45:52Z","update_date":"2020-09-22T21:00:36Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":138,"state":"closed","open_date":"2020-09-21T09:29:19Z","update_date":"2020-09-21T12:59:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":137,"state":"closed","open_date":"2020-09-18T17:37:53Z","update_date":"2020-09-19T13:48:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":136,"state":"closed","open_date":"2020-09-14T19:10:56Z","update_date":"2020-09-14T20:53:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":135,"state":"closed","open_date":"2020-09-14T09:51:29Z","update_date":"2020-09-14T11:13:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":134,"state":"closed","open_date":"2020-09-12T14:58:34Z","update_date":"2020-09-13T09:13:00Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":133,"state":"closed","open_date":"2020-09-10T22:00:38Z","update_date":"2020-09-11T10:01:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":132,"state":"closed","open_date":"2020-09-09T20:51:38Z","update_date":"2020-09-09T22:36:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":131,"state":"closed","open_date":"2020-09-08T18:38:44Z","update_date":"2020-09-08T22:15:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":130,"state":"closed","open_date":"2020-09-06T18:51:51Z","update_date":"2020-09-07T11:32:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":129,"state":"closed","open_date":"2020-09-06T11:22:37Z","update_date":"2020-09-06T12:29:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":128,"state":"closed","open_date":"2020-09-02T21:14:47Z","update_date":"2020-09-03T07:38:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":127,"state":"closed","open_date":"2020-09-01T12:44:02Z","update_date":"2020-09-01T18:44:55Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":126,"state":"closed","open_date":"2020-08-28T18:15:15Z","update_date":"2020-08-28T19:34:58Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":125,"state":"closed","open_date":"2020-08-23T11:26:51Z","update_date":"2020-08-23T17:17:38Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":124,"state":"closed","open_date":"2020-08-21T17:42:33Z","update_date":"2020-08-21T18:53:38Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gares","number":123,"state":"closed","open_date":"2020-08-20T16:30:12Z","update_date":"2020-09-07T09:39:48Z","discussion":[{"author":"spitters","date":"2020-08-20T16:35:08Z","comment":"What would go into getting it to work again? @VincentSe has a cool application in mind."},{"author":"VincentSe","date":"2020-08-29T10:30:40Z","comment":"@gares @spitters According to the documentation\r\nhttps://coq.github.io/doc/master/refman/practical-tools/utilities.html\r\nThe VERNAC EXTEND must be in a mlg file for preprocessing, so dump.ml cannot work anymore."},{"author":"spitters","date":"2020-08-29T10:47:01Z","comment":"This should now be rewritten as a plugin, which I hope would not be too difficult."},{"author":"gares","date":"2020-08-29T14:53:23Z","comment":"This is a small totorial for writing plugins: https://github.com/coq/coq/tree/master/doc/plugin_tutorial"},{"author":"VincentSe","date":"2020-08-29T16:36:23Z","comment":"@spitters @gares Indeed, we can run the ocaml compiler by putting `dump.ml` inside `g_tuto0.mlg`. And we then see multiple errors \r\n- modules `Topconstr`, `Pretyping.Default` and `Tactic` no longer exist\r\n- `pp` function names changed, I am not sure which ones to call now\r\n- `Reductionops` changed, I tried rewriting it by this `(Reductionops.nf_all env Evd.empty c)` but it fails with `This expression has type         (EConstr.constr -> Tacticals.tactic) -> Tacticals.tactic\r\n       but an expression was expected of type EConstr.constr = Evd.econstr`. I have no clue what that means.\r\n"},{"author":"gares","date":"2020-08-29T17:23:22Z","comment":"If you publish your wip branch I can look at it."},{"author":"VincentSe","date":"2020-08-29T19:45:33Z","comment":"@gares Here is the branch\r\nhttps://github.com/coq-community/corn/tree/FixDump\r\nAt the moment it is just a copy of tuto0 into dump. The code in dump.ml was moved into `g_tuto0.mlg`, type make in folder dump to build and see the errors. I'll rename tuto0 when it compiles and works."},{"author":"VincentSe","date":"2020-09-04T09:21:09Z","comment":"Hello @gares, did you look at the branch I sent you ?"},{"author":"gares","date":"2020-09-07T09:39:48Z","comment":"Sorry I was on VAC. I see you merged the branch, cool!"}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":122,"state":"closed","open_date":"2020-08-20T10:24:52Z","update_date":"2020-08-20T18:39:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":121,"state":"closed","open_date":"2020-08-16T17:34:43Z","update_date":"2020-08-16T18:44:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":120,"state":"closed","open_date":"2020-08-15T21:53:18Z","update_date":"2020-08-16T11:35:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"palmskog","number":119,"state":"open","open_date":"2020-08-15T18:45:20Z","update_date":"2020-08-17T09:17:14Z","discussion":[{"author":"spitters","date":"2020-08-16T03:49:16Z","comment":"We already have such a list:\n\nhttp://corn.cs.ru.nl/pub.html\n\nfrom my phone\n\nOn Sat, Aug 15, 2020, 20:45 Karl Palmskog <notifications@github.com> wrote:\n\n> There are quite a few publications in the regular and grey literature\n> related to Corn, e.g.,\n>\n>    - https://valentinblot.org/pro/M1_report.pdf\n>    - https://link.springer.com/chapter/10.1007/978-3-540-27818-4_7\n>    - https://arxiv.org/abs/0805.2438\n>\n> These should be listed in README file or somewhere else in the repository.\n> Authors of papers not in permanent archives should be encouraged to submit\n> them to such archives (e.g., HAL or arXiv).\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/issues/119>, or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTRV3UIIBC634ZIMF2TSA3JUXANCNFSM4QAM53SQ>\n> .\n>\n"},{"author":"spitters","date":"2020-08-16T12:34:08Z","comment":"Added the missing publications, and put a link in the README.\r\n\r\nThanks @palmskog "},{"author":"palmskog","date":"2020-08-17T08:47:53Z","comment":"@spitters We now have explicit support in our templates for listing related papers in `meta.yml` (see [example](https://github.com/coq-community/lemma-overloading/blob/05a9f467049822eb14b3784ddaa21ddc0252c92a/meta.yml#L24-L30)), why not use it? This also makes it possible for others to make pull requests to suggest new (or old) papers, and autogenerate website pages.\r\n\r\nFor example, the following is currently not listed: http://www.eelis.net/research/hybrid/hybrid-itp10.pdf\r\n\r\n"},{"author":"spitters","date":"2020-08-17T09:17:13Z","comment":"Thanks. That's a good suggestions. It will take some time to convert the list from the website into meta.ml.\r\n\r\nI don't think the Hybrid system project was ever integrated into corn, and I'm not sure it still compiles.\r\nhttps://github.com/Eelis/hybrid"}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":118,"state":"closed","open_date":"2020-08-08T08:35:14Z","update_date":"2020-08-08T09:43:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":117,"state":"closed","open_date":"2020-08-06T20:18:50Z","update_date":"2020-08-07T08:04:46Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":116,"state":"closed","open_date":"2020-08-05T16:03:44Z","update_date":"2020-08-05T22:21:54Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":115,"state":"closed","open_date":"2020-08-04T17:09:31Z","update_date":"2020-08-04T18:55:53Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":114,"state":"closed","open_date":"2020-08-03T08:31:58Z","update_date":"2020-08-04T07:41:43Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":113,"state":"closed","open_date":"2020-08-01T15:39:51Z","update_date":"2020-08-01T20:25:55Z","discussion":[{"author":"spitters","date":"2020-08-01T16:03:42Z","comment":"Wouldn't MIT be better going forward?\n\nfrom my phone\n\nOn Sat, Aug 1, 2020, 17:40 Vincent Semeria <notifications@github.com> wrote:\n\n> Relicense constructive measure theory to GNU Lesser General Public License\n> version 2.1 or later, to be more compatible with Coq's license.\n> ------------------------------\n> You can view, comment on, or merge this pull request online at:\n>\n>   https://github.com/coq-community/corn/pull/113\n> Commit Summary\n>\n>    - New formula of exponential by geometric series\n>    - Change license of constructive measure theory to GNU Lesser General\n>    Public version 2.1 or later\n>\n> File Changes\n>\n>    - *M* reals/fast/CRGeometricSum.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-644d14a9b1c3a8cf93b21a47ed3ab989>\n>    (214)\n>    - *M* reals/fast/CRexp.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-7adb9f7349b2f922e4a5cc107e1f05a1>\n>    (218)\n>    - *M* reals/fast/CRpower.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-b808a5abbcf76bee6c97c1f4af9934a6>\n>    (57)\n>    - *M* reals/fast/Compress.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-d7fbcd2fd689d297b04980affd41ace3>\n>    (2)\n>    - *M* reals/stdlib/CMTDirac.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-81632673381a979c8255bd6711c1f172>\n>    (2)\n>    - *M* reals/stdlib/CMTFullSets.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-bb03273fc8109c7f3d8ccf4dd4b46f3a>\n>    (2)\n>    - *M* reals/stdlib/CMTIntegrableFunctions.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-cbe1445118d3795cb3cb7588ad2e66a6>\n>    (2)\n>    - *M* reals/stdlib/CMTIntegrableSets.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-e0c5276e661dd102100b26128c333b3a>\n>    (2)\n>    - *M* reals/stdlib/CMTMeasurableFunctions.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-1045cb8979319a19011f27ad2a39e52f>\n>    (2)\n>    - *M* reals/stdlib/CMTPositivity.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-e88221a7a6decf1841d94ed5984ed5cc>\n>    (2)\n>    - *M* reals/stdlib/CMTProductIntegral.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-ec2346846816b26c007313ffb021ce8f>\n>    (2)\n>    - *M* reals/stdlib/CMTReals.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-f66859f9299bb0e73603752c975788bc>\n>    (2)\n>    - *M* reals/stdlib/CMTbase.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-d59af8c8db5479e75779bc4cb08de40e>\n>    (2)\n>    - *M* reals/stdlib/CMTcast.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-aae420486f229c63e3244cbf75e273b3>\n>    (2)\n>    - *M* reals/stdlib/CMTprofile.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-ff4af4811d4e4648788b4219cb81d5d1>\n>    (2)\n>    - *M* reals/stdlib/ConstructiveCauchyIntegral.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-c132fbea64027d2cdc92b4701adf2a94>\n>    (2)\n>    - *M* reals/stdlib/ConstructiveDiagonal.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-246f7dab45ef5c7fcb44f90b69c909d3>\n>    (2)\n>    - *M* reals/stdlib/ConstructivePartialFunctions.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-e57fba09ab06782a40c1f4283461584b>\n>    (2)\n>    - *M* reals/stdlib/ConstructiveUniformCont.v\n>    <https://github.com/coq-community/corn/pull/113/files#diff-d9db423e317a1d671f49cb6bf577d8f6>\n>    (2)\n>\n> Patch Links:\n>\n>    - https://github.com/coq-community/corn/pull/113.patch\n>    - https://github.com/coq-community/corn/pull/113.diff\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/pull/113>, or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTT42ABPOOQIG2EZDBDR6QZNHANCNFSM4PR2WPVQ>\n> .\n>\n"},{"author":"VincentSe","date":"2020-08-01T16:19:52Z","comment":"@spitters Coq's license is LGPL 2.1 and it is not going to change. I don't see why a library of Coq would have a weaker license : when people `Require Import` a file from constructive measure theory, they also `Require Import` files from the stdlib, so using and developing constructive measure theory has the same obligations as using and developing in the stdlib."},{"author":"spitters","date":"2020-08-01T17:08:51Z","comment":"I believe it was @Zimmi48 who remarked that would that choose a license again, it would be MIT, as opposed to LGPL2. Since they are compatible (as I understand), MIT seems the better choice going forward.\r\nHowever, I don't feel strongly about this."},{"author":"Zimmi48","date":"2020-08-01T17:40:02Z","comment":"Say one wanted to have a version of CoRN work with the HoTT library instead of the standard library. The former doesn't depend on the latter and is not under LGPL license but under a BSD2 license, which is pretty equivalent to the (more popular nowadays) MIT license. By having CoRN be distributed under LGPL, you put some additional constraints on this person, that they wouldn't have if you had chosen MIT. This is just to counter your argument about this choice being the only reasonable one since the stdlib is already under this license."},{"author":"Zimmi48","date":"2020-08-01T17:40:56Z","comment":"That being said, this license issue is not very important to me TBH and, as I've said before, I'm not opposed to the use of LGPL for CoRN. It will already be more permissive if it's adopted project-wide compared to GPL."},{"author":"VincentSe","date":"2020-08-01T18:52:01Z","comment":"@Zimmi48 @spitters It's MIT now. Everyone good ?"},{"author":"spitters","date":"2020-08-01T20:12:07Z","comment":"Yes\n\nfrom my phone\n\nOn Sat, Aug 1, 2020, 20:52 Vincent Semeria <notifications@github.com> wrote:\n\n> @Zimmi48 <https://github.com/Zimmi48> @spitters\n> <https://github.com/spitters> It's MIT now. Everyone good ?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/pull/113#issuecomment-667572789>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTURONFAWHJUFWPIHB3R6RP53ANCNFSM4PR2WPVQ>\n> .\n>\n"}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":112,"state":"closed","open_date":"2020-07-19T16:10:53Z","update_date":"2020-07-19T18:49:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":111,"state":"closed","open_date":"2020-07-07T13:04:05Z","update_date":"2020-07-07T19:59:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":110,"state":"closed","open_date":"2020-07-06T09:25:27Z","update_date":"2020-07-06T10:28:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":109,"state":"closed","open_date":"2020-06-30T19:20:56Z","update_date":"2020-07-02T08:58:27Z","discussion":[{"author":"VincentSe","date":"2020-07-01T10:00:45Z","comment":"Hi @Zimmi48, the last 2 errors are timeouts on the master branch, which passed several times already. Can we merge this PR ?"},{"author":"Zimmi48","date":"2020-07-02T08:18:52Z","comment":"It looks like Docker was stuck pulling the Coq images. Probably some transient error and certainly unrelated to this PR. I've just restarted the builds to get a fully green CI."},{"author":"VincentSe","date":"2020-07-02T08:58:27Z","comment":"@Zimmi48 thanks! "}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":108,"state":"closed","open_date":"2020-06-27T19:52:17Z","update_date":"2020-06-28T16:09:11Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":107,"state":"closed","open_date":"2020-06-21T17:24:55Z","update_date":"2020-06-22T12:27:15Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":106,"state":"closed","open_date":"2020-06-15T17:09:07Z","update_date":"2020-06-15T21:15:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":105,"state":"closed","open_date":"2020-06-14T14:00:30Z","update_date":"2020-06-14T15:03:57Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":104,"state":"closed","open_date":"2020-06-14T08:31:19Z","update_date":"2020-06-14T12:02:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":103,"state":"closed","open_date":"2020-06-13T21:37:23Z","update_date":"2020-06-14T07:12:19Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":102,"state":"closed","open_date":"2020-06-13T14:23:09Z","update_date":"2020-06-13T19:04:49Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":101,"state":"closed","open_date":"2020-06-08T12:45:26Z","update_date":"2020-06-11T08:03:44Z","discussion":[{"author":"spitters","date":"2020-06-08T12:50:02Z","comment":"Could you say a bit more about this PR? Is it about cutting out the algebraic hierarchy?"},{"author":"VincentSe","date":"2020-06-08T13:01:39Z","comment":"@spitters Yes it continues the previous PR about the algebraic hierarchy. Also I think we can replace `Qpos` by `Q` in metric spaces, which will again simplify proofs."},{"author":"spitters","date":"2020-06-08T13:13:47Z","comment":"I'm a bit hesitant to remove interesting mathematical structure (Qpos) to\nsolve licensing issues, but if that's needed to get the job done, maybe\nit's OK.\n\nOn Mon, Jun 8, 2020 at 3:01 PM Vincent Semeria <notifications@github.com>\nwrote:\n\n> @spitters <https://github.com/spitters> Yes it continues the previous PR\n> about the algebraic hierarchy. Also I think we can replace Qpos by Q in\n> metric spaces, which will again simplify proofs.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/pull/101#issuecomment-640588394>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTQZKHMNC64N6HXKYWLRVTOMDANCNFSM4NYL6RKA>\n> .\n>\n"},{"author":"VincentSe","date":"2020-06-08T13:18:24Z","comment":"@spitters `Qpos` is not interesting, and not necessary for metric spaces. A ball of negative radius is well-defined as the empty set, and the triangular inequality generalizes trivially in this case. If we remove `Qpos` we get rid of coercions and instances of typeclasses, which make the code more readable and more maintainable. Also backward compatibility is broken again, which illustrates yet again how fragile this implicit machinery is. The less we use it, the better."},{"author":"spitters","date":"2020-06-08T13:25:17Z","comment":"I think we should learn how to improve the type class system. However,\ndoing this on very old code is not the most pleasant :-( So, I agree with\nthe way forward.\n\nOn Mon, Jun 8, 2020 at 3:18 PM Vincent Semeria <notifications@github.com>\nwrote:\n\n> @spitters <https://github.com/spitters> Qpos is not interesting, and not\n> necessary for metric spaces. A ball of negative radius is well-defined as\n> the empty set, and the triangular inequality generalizes trivially in this\n> case. If we remove Qpos we get rid of coercions and instances of\n> typeclasses, which make the code more readable and more maintainable. Also\n> backward compatibility is broken again, which illustrates yet again how\n> fragile this implicit machinery is. The less we use it, the better.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/pull/101#issuecomment-640597470>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTW2GCXY6IIHKFS7S63RVTQK7ANCNFSM4NYL6RKA>\n> .\n>\n"}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":100,"state":"closed","open_date":"2020-05-31T21:36:19Z","update_date":"2020-06-03T20:54:44Z","discussion":[{"author":"VincentSe","date":"2020-06-01T10:43:36Z","comment":"@Zimmi48 Hello, do you understand this nix error ?\r\n`\r\nerror: unknown hash algorithm '', at /nix/store/fhksmnm8dk9b1hs99sfzha4nwvpfs86n-nixpkgs-20.09pre227892.b27a19d5bf7/nixpkgs/pkgs/build-support/fetchurl/default.nix:119:3`\r\n\r\nIt seems unrelated to the PR."},{"author":"Zimmi48","date":"2020-06-01T10:46:46Z","comment":"I don't understand it (yet) but it is failing all over the place (on many projects). I will try to solve it ASAP, but if it's an issue for you, we can immediately switch to opam-based testing only."},{"author":"VincentSe","date":"2020-06-01T10:50:55Z","comment":"@Zimmi48 I can wait a little. I'd like @spitters to validate this PR before we merge it."},{"author":"Zimmi48","date":"2020-06-01T11:49:16Z","comment":"@VincentSe A priori this is fixed in #97 (to be confirmed when CI passes fully)."},{"author":"spitters","date":"2020-06-01T12:07:13Z","comment":"I'd prefer to fix it by https://github.com/coq-community/corn/pull/99 or at least have a change that does not break the type classes in our work in ODEs."},{"author":"spitters","date":"2020-06-01T12:56:22Z","comment":"I've merged #97 I guess you should rebase on top of that.\r\nAlso, Travis does not seem to test 8.11, maybe we should add that."},{"author":"VincentSe","date":"2020-06-01T14:44:12Z","comment":"@spitters @Zimmi48 Before Coq 8.10, the compiler doesn't resolve the Coercion\r\n`msp_is_setoid :> RSetoid` and `st_car :> Type`. Do you know why?\r\n\r\nThis is even stranger because all previous versions compile before this pull request, so they do resolve the coercion. This confirms that Coq's implicit machinery of coercions, canonical variables and typeclasses is very fragile. What should I do ? Remove the coercion and explicitly write `st_car` everywhere needed ? I would actually consider it an improvement of the source code."},{"author":"spitters","date":"2020-06-01T15:07:20Z","comment":"Yes, I was surprised about that too! Maybe @mattam82 knows what changed in the type-class implementation between these versions.\r\n\r\nYes, I agree inserting the st_car is the most sensible way to solve this."},{"author":"VincentSe","date":"2020-06-01T16:34:18Z","comment":"@spitters @mattam82 If I remove the coercion `st_car :> Type` in `RSetoid`, that affects most of the files in CoRN. Thousands of lines of code. Since this looks like a bugfix of coercions in version 8.10, I suggest we drop compatibility before that, and add compatibility with 8.11."},{"author":"spitters","date":"2020-06-01T18:13:59Z","comment":"Why would you remove the coercion? One could just insert it in the places where it cannot be found.\r\nIt looked like this failed only relatively late in the development.\r\n\r\nI'm not opposed to dropping compatibilty with older versions, but if possible it would be nice to keep it."},{"author":"VincentSe","date":"2020-06-01T19:46:50Z","comment":"@spitters @mattam82  If I add `Coercion st_car : RSetoid >-> Sortclass.` in file `UniformContinuity.v`, branch master fails with \r\n`Error: st_car is already a coercion.`\r\n\r\nSo how do we put the coercion back in the previous versions so that all versions compile ?"},{"author":"spitters","date":"2020-06-02T08:24:02Z","comment":"That the coercion fails seems to be due the the algorithm not being\nclever enough.\nSo, you should be able to help it by just putting in st_car at these places.\n\nNo need to declare the coercion again.\n\nOn Mon, Jun 1, 2020 at 9:47 PM Vincent Semeria <notifications@github.com> wrote:\n>\n> @spitters @mattam82 If I add Coercion st_car : RSetoid >-> Sortclass. in file UniformContinuity.v, branch master fails with\n> Error: st_car is already a coercion.\n>\n> So how do we put the coercion back in the previous versions so that all versions compile ?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n"}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":99,"state":"open","open_date":"2020-05-31T11:08:22Z","update_date":"2020-08-21T17:07:51Z","discussion":[{"author":"Zimmi48","date":"2020-05-31T11:14:47Z","comment":"For the reasons I gave in the related PR, I think that if an effort is made to relicense CoRN, the goal should be a more permissive license than LGPL."},{"author":"VincentSe","date":"2020-05-31T11:24:22Z","comment":"@Zimmi48 Because CoRN `Require Import` Coq's standard library, CoRN is forced to be LGPL. Or am I missing something ?"},{"author":"Zimmi48","date":"2020-05-31T11:41:28Z","comment":"Fortunately, it doesn't work like this. But you are perfectly illustrating my point on the LGPL being a complex license to understand. (I can come back to this and write a—long—explanation if you wish.)"},{"author":"VincentSe","date":"2020-05-31T12:03:42Z","comment":"@Zimmi48 Who is interpreting the license now ? You say that LGPL is complicated so we should avoid it, but eventually CoRN imports files from the standard library. If there is a problem with LGPL, by using the MIT license you would wrongly let CoRN users assume more permissions than they actually have. What I propose is much simpler : one license for both Coq and CoRN."},{"author":"Zimmi48","date":"2020-05-31T15:03:41Z","comment":">Who is interpreting the license now ?\r\n\r\nI am. But I'm relatively confident in my interpretation of standard open source licenses based on [my experience reading about them and discussing them](https://opensource.stackexchange.com/users/5858/zimm-i48).\r\n\r\n>by using the MIT license you would wrongly let CoRN users assume more permissions than they actually have\r\n\r\nLet us be specific. No open source license (be it MIT, LGPL or GPL) places any restriction on how you can *use* a piece of software. Software licenses that do place restrictions on usage (like [CompCert's Non-Commercial License](https://github.com/AbsInt/CompCert/blob/master/LICENSE)) are non-free and non-open source. Open source licenses restrict how you may *redistribute* the software or a derivative.\r\n\r\nFor instance, with a copyleft license (like the LGPL) you may not distribute a binary version without also making the sources available, and if you create a derived version, you may be bound by the same restrictions.\r\n\r\nIf I distribute Coq + CoRN, of course, I am bound by the terms of Coq's license. However, if I distribute only CoRN, I am only bound by the terms of CoRN's license. So it makes a difference.\r\n\r\n>What I propose is much simpler : one license for both Coq and CoRN.\r\n\r\nI agree that what you propose is very simple. However, my point (which was previously raised by @robbertkrebbers) is that if you go through the burden of relicensing CoRN, you may as well go one step further and choose a more permissive license. If some day, Coq's standard library itself is relicensed under a more permissive license (which would be difficult but not impossible), it would be sad to have to conduct again the same relicensing process for CoRN. Choosing a permissive license that allows relicensing (like MIT or BSD) now guarantees against such issue."},{"author":"VincentSe","date":"2020-05-31T15:31:29Z","comment":"> I agree that what you propose is very simple.\r\n\r\n@Zimmi48 Great, let's keep it simple. This is complicated enough already.\r\n\r\n> If some day, Coq's standard library itself is relicensed under a more permissive license (which would be difficult but not impossible)\r\n\r\nThis is not happening, you know it as much as I do."},{"author":"Zimmi48","date":"2020-05-31T15:38:24Z","comment":">This is not happening, you know it as much as I do.\r\n\r\nWell, I don't know it, so I wonder how you can be so sure.\r\n\r\n>Great, let's keep it simple. This is complicated enough already.\r\n\r\nWell in any case, I'd oppose to relicensing to LGPL-2.1-only. At the very least, make this LGPL-2.1-or-later."},{"author":"VincentSe","date":"2020-05-31T16:03:05Z","comment":"@Zimmi48 The option to use a later version of the license is already given in each file\r\n\r\n```\r\n * This work is free software; you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation; either version 2 of the License, or\r\n * (at your option) any later version.\r\n```\r\n\r\nBy the way, that means we need to modify all the files, replacing \"GNU General Public License\" by \"GNU Lesser General Public License\".\r\n\r\nI do not know how to modify `meta.yml` what should I put in it ? Then how do we regenerate the `README` and opam file ?"},{"author":"Zimmi48","date":"2020-05-31T16:21:31Z","comment":"> By the way, that means we need to modify all the files, replacing \"GNU General Public License\" by \"GNU Lesser General Public License\".\r\n\r\nThat's correct. And \"version 2\" should become \"version 2.1\".\r\n\r\n> I do not know how to modify `meta.yml` what should I put in it ? Then how do we regenerate the `README` and opam file ?\r\n\r\nYou only need to change two lines:\r\n\r\nhttps://github.com/coq-community/corn/blob/9db8c9e8919beb718475c5005e06730d9a24fbb7/meta.yml#L75-L77\r\n\r\nThe identifier should become `LGPL-2.1-or-later`.\r\n\r\nThen files can be regenerated using:\r\n\r\n```\r\ncd <your_coq_project> && cd ..\r\ngit clone https://github.com/coq-community/templates.git\r\ncd -\r\n../templates/generate.sh\r\n```\r\n\r\n(cf. https://github.com/coq-community/templates/blob/master/README.md)\r\n\r\nBut it would be best to merge #97 before doing this. Can you answer my question over there?"},{"author":"VincentSe","date":"2020-06-01T19:24:04Z","comment":"@Zimmi48 Is it good now with meta.yml modified and the templates regenerated ?"},{"author":"Zimmi48","date":"2020-06-02T15:50:36Z","comment":"Note that you probably had a slightly outdated version of the templates, leading to the (spurious) change to `.travis.yml`, which is responsible for CI failing (again)."},{"author":"VincentSe","date":"2020-06-03T08:35:33Z","comment":"@Zimmi48 I regenerated the templates and `.travis.yml` is back. It still does not build though. `opam install coq-corn.dev -v -y -j 2' failed`."},{"author":"Zimmi48","date":"2020-06-04T08:58:24Z","comment":"This time it is the Nix builds which are failing because of the changes to `default.nix`. You should backtrack on those changes too. Note that the opam file should still have its license identifier modified."},{"author":"VincentSe","date":"2020-06-04T09:12:03Z","comment":"@Zimmi48 Now branch master builds, but not the previous branches\r\n`make: *** No rule to make target 'install'.  Stop.`"},{"author":"Zimmi48","date":"2020-06-04T09:14:37Z","comment":"Cf. my comment just above."},{"author":"herbelin","date":"2020-07-25T13:05:49Z","comment":"> I agree that what you propose is very simple. However, my point (which was previously raised by @robbertkrebbers) is that if you go through the burden of relicensing CoRN, you may as well go one step further and choose a more permissive license.\r\n\r\nWould it make sense to have multi-licensing? This seems to be considered in some [situations](https://en.wikipedia.org/wiki/Multi-licensing#License_compatibility).\r\n\r\nMore generally, why one licence for the whole repository, rather than one (or more) licence per file (if not per Coq declaration). If the problem is a problem of compatibility, we could treat it with the same kind of granularity as we treat e.g. option `-impredicative-set` or `Print Assumptions`, couldn't we???"},{"author":"spitters","date":"2020-07-25T20:46:05Z","comment":"Multi licensing could be a possibility, but there doesn't seem to be a reason to go for LGPL, over MIT/BSD.\r\nSo, I agree with @Zimmi48 and @robbertkrebbers that the latter option would be more future proof."},{"author":"herbelin","date":"2020-07-27T11:17:30Z","comment":"Thinking at this licensing issue, there is something I still don't understand.\r\n\r\nHere, we are only talking about source code, while combining license is about building binaries, right? For instance, according to GPL's FAQ [What is the difference between “mere aggregation” and “combining two modules into one program”?](https://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.en.html#MereAggregation), two binaries which interact through a communication channel rather than being linked together can be combined whatever the license of the other is if one is GLP.\r\n\r\nSo, having Coq source code in different licenses such as GPL, LGPL or MIT seems to be no problem. The burden is put on who wants to make a binary executable out of the code having different licenses: they will have to make the components whose licenses are incompatible to communicate over a channel rather than by linking.\r\n\r\nIs this interpretation correct? And if yes, is this constraint put on who wants to create a binary out of Coq code so critical?\r\n\r\nOne may also wonder whether distributing source code should satisfy that the licenses of every code present in the distributed archive have to be compatible. Still according to the GPL FAQ above, it is ok to put side by side a GPL program with a distinct program having any other license on the same CD-ROM. So, it is a fortiori ok to do so for the sources of the programs (and we actually already do it for the platform).\r\n\r\nTL;DR: From the Coq point of view, I don't see problems with incompatible licenses other than forcing people interested in producing binaries to have the incompatible binaries in separate processes, and, for compatible licenses, to adopt the license resulting of this compatible match.\r\n\r\nThe remaining questions are then \"political\". Do we want to force people possibly producing binaries (such as a certified compiler with a floating point component) to have these libraries communicating over a channel rather than being linked? In practice, it is not even sure that it matters, since the executable part of CoRN, which is the part liable to be linked in a binary, is already MIT. Then, the actual licence incompatibilities I know regarding real numbers are with Flocq and Coquelicot, but, since there are less developers involved here, it may be easier to change the license of these packages, say, from LGPL 3 to LGLP 2 or any later version so that any combination of code related to real or floating-point numbers become acceptable as part of a same binary.\r\n"},{"author":"Zimmi48","date":"2020-07-28T10:18:28Z","comment":"If someone wants to build a certified piece of software they may be interesting to depend on more than one Coq library. If they do so, then they create a derivative work of the various libraries they picked. If these libraries' licenses are not compatible, they won't be able to do so. It's as simple as this. Discussing workarounds like having two independent programs communicate on a textual channel doesn't make sense in a software verification context IMHO.\r\n\r\nFurthermore, no, combining is not just about binaries. If it were, then programs in interpreted languages wouldn't be submitted to the same kind of constraints than the rest. It would also mean that people could write proprietary code that depends on a GPL'd library and distribute the two side by side (as source code) and put whatever restrictions they want on the code they wrote."},{"author":"spitters","date":"2020-07-28T17:50:49Z","comment":"Corn has had MIT code in the fast/ directory since 2007.\r\n"},{"author":"herbelin","date":"2020-07-28T18:14:51Z","comment":"@Zimmi48, I'm concerned by the current CoRN situation but I don't have a strong experience with licenses, my apologies. My feeling, especially after Abhishek asked his license question recently on Coq-Club, was that there was no clear consensus on what a software license should exactly imply in the context of formal proofs. Is there some jurisprudence to rely on?\r\n\r\nSo, regarding the MIT-licensed part of CoRN, should we consider that it is a non-sense to have part of the MIT-licensed directory of CoRN to depend on the part of CoRN marked as GPL without being itself GPL?"},{"author":"Zimmi48","date":"2020-07-29T10:49:03Z","comment":"> should we consider that it is a non-sense to have part of the MIT-licensed directory of CoRN to depend on the part of CoRN marked as GPL without being itself GPL?\r\n\r\nNo, I believe that it is OK to put some part of the code under a more permissive (and *GPL-compatible*) license, as long as it is clear to everyone that the \"larger work\" resulting from the combination of the two differently-licensed parts is GPL licensed."},{"author":"herbelin","date":"2020-07-29T11:29:59Z","comment":"Then, what is the problem in distributing the GPL 2 part of CoRN, the MIT part of CoRN, and the LGPL 2.1 stdlib as part of a same repository? The constraint is only on who wants to \"combine\" the different parts?\r\n\r\nAs for the case of the platform, is it ok to distribute an archive which contains both GPL 2 and LGPL 3, even though they are incompatible?"},{"author":"Zimmi48","date":"2020-07-29T20:00:42Z","comment":"> Then, what is the problem in distributing the GPL 2 part of CoRN, the MIT part of CoRN, and the LGPL 2.1 stdlib as part of a same repository? The constraint is only on who wants to \"combine\" the different parts?\r\n\r\nThere is no problem at all. It's just that if one wanted at some point to move some CoRN code to the Coq repository, it wouldn't be possible if that code is under GPL. Furthermore, managing several licenses in a single repository creates more maintenance burden (you cannot easily move code between the various parts) and more confusion for the users.\r\n\r\n>As for the case of the platform, is it ok to distribute an archive which contains both GPL 2 and LGPL 3, even though they are incompatible?\r\n\r\nYes, this is not a problem. In this case, it would really be considered as side-by-side distribution, pretty similarly to your earlier CD-ROM example. Of course, problems arise if users want to use several libraries that are incompatible license-wise in a single project, so this should still be a concern for the platform maintainers. In practice, I don't know of any such examples since CoRN is the only Coq library I know which is under GPL and it is not under GPL-2-only, it is under GPL-2-or-later as testified by the headers of those files under GPL."},{"author":"herbelin","date":"2020-07-29T20:22:01Z","comment":"> it is under GPL-2-or-later as testified by the headers of those files under GPL.\r\n\r\nAh right. I looked at the main LICENCE file which says GPL 2, and I did not see the \"or later\" in each file.\r\n\r\n> Yes, this is not a problem. In this case, it would really be considered as side-by-side distribution, pretty similarly to your earlier CD-ROM example. Of course, problems arise if users want to use several libraries that are incompatible license-wise in a single project\r\n\r\nThis is exactly the kind of things which confuses me. Since we are only talking about files with full source information, where is the limit between \"side-by-side\" and a \"single project\"? This seems to be rather a matter of convention. We could organize things as CoRN-A and CoRN-B, or Platform-CoRN and Platform-Flocq, or Platform-CoRN-A, Platform-Corn-B and Platform-Flocq. It seems in last analysis to be only about how \"people\" perceive things as going together or not. Am I missing something?\r\n\r\nSimilarly, if it is ok to have both MIT-licensed and GPL-licensed code in the CoRN library, why couldn't it be possible to mix licenses also in the Coq repository?"},{"author":"Zimmi48","date":"2020-07-29T21:51:59Z","comment":">It seems in last analysis to be only about how \"people\" perceive things as going together or not.\r\n\r\nUltimately, yes, interpreting law, contracts and licensing is about how people perceive things. However, there is a key difference here between distributing a set of packages in a single bundled and creating a project that needs to import two libraries to be evaluated. Only the later kind is an example of a \"larger work\".\r\n\r\n>Similarly, if it is ok to have both MIT-licensed and GPL-licensed code in the CoRN library, why couldn't it be possible to mix licenses also in the Coq repository?\r\n\r\nThe only limitation would be the one that we, as Coq maintainers, choose to impose. I would personally be OK with accepting that clearly defined and limited components are put under a more permissive license (in fact that was the case for `coq_dune.ml` in prevision of its integration into Dune itself, and the reference manual is still under a different license than Coq). However, I would be opposed to introducing code under a less permissive license into the standard library."},{"author":"herbelin","date":"2020-07-29T22:18:51Z","comment":"> However, I would be opposed to introducing code under a less permissive license into the standard library.\r\n\r\nI can understand this, but how much does this matter in practice if it can just be instead two repositories or a repository of repositories?\r\n\r\nBy the way, is the licence of camlp5 LGPL-compatible for instance?\r\n\r\nFor instance, to be extreme, why don't we attach license to theorems (as proposed above), reflecting what the contributor of the theorem intends. As far as I understood, this is actually what basically happened to CoRN. If I understood correctly, mostly nobody cared about a license, except two persons. When CoRN was already quite big and had still no license, one proposed to use GPL and the others agreed because they did not care. But another (more recent) contributor (then followed by a group of developers) used MIT for his (their) own work.\r\n\r\nTold otherwise, as soon as what matters is source code, which is the case for us, if we would not want to do politics regarding how this source code might eventually be used, we may also welcome contributors as they are and accept any license for any (distinct) contribution. (I'm not saying that we don't want to do politics though!)"},{"author":"spitters","date":"2020-07-31T17:11:26Z","comment":"@herbelin your description of the history is correct. In fact, I'm aware of only one strong GPL proponent, who has since long left academia."},{"author":"Zimmi48","date":"2020-08-03T12:34:15Z","comment":"> By the way, is the licence of camlp5 LGPL-compatible for instance?\r\n\r\nFYI, the license of camlp5 is what is known as 3-clause BSD (BSD3 for short and BSD-3-Clause in the SPDX classification) and yes, [it is compatible with the (L)GPL licenses](https://www.gnu.org/licenses/license-list.html#ModifiedBSD).\r\n\r\n>For instance, to be extreme, why don't we attach license to theorems (as proposed above), reflecting what the contributor of the theorem intends.\r\n\r\nMost people have no idea what licenses entail, and as I explained above, the more licenses you get, the more complicated you make the life of both users and maintainers. Of course, in an extreme world like the one you propose, one would develop additional tools to make license management bearable and would actually limit the choice of licenses to have a gradation but no equivalent and incompatible licenses. Anyway, the most reasonable approach which a lot of people support today is that it's good to consolidate an open source community around a single open source license (see the first proposition of https://choosealicense.com/). Unfortunately, the historically preferred license of the OCaml (and thus Coq) communities have been LGPL-2.1(-only) which as I've explained [somewhere else](https://github.com/coq-community/templates/issues/34#issuecomment-634565291) is a technically complex license that is not the best suited for Coq (nor OCaml) libraries. Given that the community is far from united around this license anyway, I think it make sense to start actively promoting other licenses such as the permissive (and very popular) MIT license or the weak copyleft (but simpler to understand than LGPL) MPL-2.0.\r\n\r\n@spitters \r\n>I'm aware of only one strong GPL proponent, who has since long left academia.\r\n\r\nBut will this author agree to relicense their work under a more permissive license? Otherwise, this whole relicensing enterprise is bound to be never complete."},{"author":"spitters","date":"2020-08-03T13:17:33Z","comment":"He seems to have disappeared from the internet. There are no papers\ndescribing substantial contributions to the corn library.\n\nOn Mon, Aug 3, 2020 at 2:34 PM Théo Zimmermann <notifications@github.com> wrote:\n>\n> By the way, is the licence of camlp5 LGPL-compatible for instance?\n>\n> FYI, the license of camlp5 is what is known as 3-clause BSD (BSD3 for short and BSD-3-Clause in the SPDX classification) and yes, it is compatible with the (L)GPL licenses.\n>\n> For instance, to be extreme, why don't we attach license to theorems (as proposed above), reflecting what the contributor of the theorem intends.\n>\n> Most people have no idea what licenses entail, and as I explained above, the more licenses you get, the more complicated you make the life of both users and maintainers. Of course, in an extreme world like the one you propose, one would develop additional tools to make license management bearable and would actually limit the choice of licenses to have a gradation but no equivalent and incompatible licenses. Anyway, the most reasonable approach which a lot of people support today is that it's good to consolidate an open source community around a single open source license (see the first proposition of https://choosealicense.com/). Unfortunately, the historically preferred license of the OCaml (and thus Coq) communities have been LGPL-2.1(-only) which as I've explained somewhere else is a technically complex license that is not the best suited for Coq (nor OCaml) libraries. Given that the community is far from united around this license anyway, I think it make sense to start actively promoting other licenses such as the permissive (and very popular) MIT license or the weak copyleft (but simpler to understand than LGPL) MPL-2.0.\n>\n> @spitters\n>\n> I'm aware of only one strong GPL proponent, who has since long left academia.\n>\n> But will this author agree to relicense their work under a more permissive license? Otherwise, this whole relicensing enterprise is bound to be never complete.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n"},{"author":"Zimmi48","date":"2020-08-03T14:00:05Z","comment":"Does this mean that you would remove his code from CoRN?"},{"author":"lmamane","date":"2020-08-10T16:50:09Z","comment":"> @Zimmi48 Because CoRN `Require Import` Coq's standard library, CoRN is forced to be LGPL. Or am I missing something ?\r\n\r\nYou are inverting the situation. Actually, it is the GPL of CoRN that \"forces\" the combination of Coq and CoRN to be GPL, under two different possible mechanisms (any person distributing such a combination can choose which mechanism to use).\r\n\r\nUnder section 6 of the LGPLv2.1, one is allowed to link an LGPL-covered work (such as Coq and/or its \"theories\" standard library) with any other work (such as CoRN), and redistribute the combination, with some quite weak conditions on the licence of the \"other work\". The GPL fulfils these weak conditions. In effect, the license of the result of the combination of Coq and CoRN is the GPL. (\"Obviously\" if one takes out Coq without CoRN from the combined work distributed under section 6, then that copy of Coq can be used and redistributed under the LGPL.) This is the same mechanism that allows a closed-source program, distributed as binary executable code only, to link dynamically against an LGPL-covered library. Or a free-as-in-free-speech / open source software under a GPL-incompatible license to do the same.\r\n\r\nAnother path for this specific case is that LGPL section 3 allows any person having a copy of Coq to redistribute _that copy_ under the GPL. Then you have a GPL Coq and a GPL CoRN, and the combination is covered by the GPL. That path is specific to GPL, it doesn't work for any other license."},{"author":"lmamane","date":"2020-08-10T17:53:50Z","comment":"> I agree that what you propose is very simple. However, my point (which was previously raised by @robbertkrebbers) is that if you go through the burden of relicensing CoRN, you may as well go one step further and choose a more permissive license. If some day, Coq's standard library itself is relicensed under a more permissive license (which would be difficult but not impossible), it would be sad to have to conduct again the same relicensing process for CoRN. Choosing a permissive license that allows relicensing (like MIT or BSD) now guarantees against such issue.\r\n\r\nTo guard against such issue, no need to relicense to a non-copyleft license. You only need to change the license of CoRN to \"Lesser GPL v2.1 or later, or, at your option, the license of the Coq standard library (theories directory as of time of writing)\". Provided all copyright holders agree, that is not more work than relicensing to \"Lesser GPL v2.1 or later\". In other words, \"Lesser GPL v2.1 or later, with the added permission that you can also choose the same licence as the Coq Standard Library (theories directory)\". In effect the copyright holders say they trust the Coq copyright holders to make good choices in the future, and delegate to them collectively together (not individually) the power to relicense CoRN.\r\n\r\nA more complicated setup which works in other scenarios is to give that power to an identified institution or group of persons... The Free Software Foundation, the Radboud University, the group \"Bas Spitters and Robbert Krebbers and Herman Geuvers\", the CNRS, the NWO or whatever the copyright holders collectively choose. I don't think that is a good setup for CoRN, but if that's what other people want, I'm willing to consent to a reasonable identified institution or group of people."},{"author":"lmamane","date":"2020-08-10T18:13:12Z","comment":"> here doesn't seem to be a reason to go for LGPL, over MIT/BSD.\r\n\r\nWell, this harks back to the question \"why is CoRN under the GPL in the first place?\" and the related \"why is Coq under the Lesser GPL, rather than MIT/BSD/...\"? For me, it is linked to a certain view of scientific progress and the role you have (and I had at the time) as academics. That things are done incrementally, by standing on the shoulder of giants, and we add the common pot of humanity's advancement and knowledge. And whether, or not, people should be allowed to make use of that common pot without contributing back their work to that same common pot. That used to be \"obvious\"; Newton and Leibnitz never had to worry whether someone making improvements on the calculus the developed would use the improved calculus for personal gain, but forbid others from further improving the improved calculus. Bohr and Heisenberg didn't have to worry that people making refinements to their Copenhagen interpretation of quantum mechanics would forbid other people to make further refinements. The idea would have seemed outlandish, bizarre and just not possible.\r\n\r\nWe now live in a world where that is not obvious anymore. And thus, as far as we intend our work to be in an ecosystem of \"common pot\", we have to use mechanisms like copyleft to express that. There is a strong copyleft (the GPL) and a weak copyleft (the Lesser GPL). The argument, which is being made, that CoRN would be better served by being under a weak copyleft doesn't mean we to throw away the baby with the bathwater and abandon all expression of the common pot ecosystem, going all the way to no copyleft at all.\r\n\r\nSecrecy of knowledge is so abhorrent to humanity and progress of humanity, that about a century (and a half?) ago, when secrecy of new ideas was a concrete problem, leading to loss of progress when people died, humanity devised a system, and agreed to make sacrifices, to entice inventors of new ideas to make them public, through the patent system: give the inventor a _temporary_ monopoly on usage of his idea, in exchange for making the idea public. That was the basic deal. Under the same basic position (abhorrence of secret of ideas leading to progress), we use copyleft to discourage secrecy."},{"author":"herbelin","date":"2020-08-20T21:42:08Z","comment":"> FYI, the license of camlp5 is what is known as 3-clause BSD (BSD3 for short and BSD-3-Clause in the SPDX classification) and yes, [it is compatible with the (L)GPL licenses](https://www.gnu.org/licenses/license-list.html#ModifiedBSD).\r\n\r\nOK, thanks.\r\n\r\nFollowing  @lmamane's comments, I would like to add two comments.\r\n\r\nTo mitigate the situation, it is probably worth to replace the discussion in an historical context which changed in the last 20 years. At some time, part of the academic world was pretty irritated by the closed attitude of some big software companies (as witnessed by critical books and posts at this time). That justified, in reaction to these attitudes, to strongly defend strict copyleft policies. Some of these companies learnt from it and started to support open source software (e.g. acquiring GitHub), reducing this feeling of a conflict between proprietary and open source software. On the other side, the emergence of startups in domains close to us, and sometimes from colleagues, contributed to the idea that it is legitimate for such startups to protect their source, at least temporary, so that they can simply live from their work. Another aspect whose impact on the current ways of thinking I'm not able to quantify is the role of \"permissive\" approaches to licensing such as the one defended by the widely spreaded interpreted language Python.\r\n\r\nMy second comment is a question: do we have a clear idea of the impact of a license in our field?\r\n\r\nAt the technical level, I see at least two situations where an entity might want to keep a Coq development secret.\r\n\r\n  1. A certification proof can be a commercial argument and some actors may want to announce that they prove some correctness properties without releasing the proof (this happened e.g. for the certification of JavaCard properties). In this case, a certification agency serves as third-party trustee. But in any cases, the proofs are not distributed, so the license of the public code possibly used in the certification has a priori no impact, right?\r\n\r\n  2. A Coq development is used by extraction to produce a software (e.g. a certified compiler, or certified server). If the dependencies of this software are in a permissive license, the software can be distributed without releasing the source without thinking further. If some (unmodified) dependencies are in a strong copyleft license (GPL), some constraints will be put on the distributed executable if the author would not like to distribute the sources. Typically, the users will be asked to download and extract independently the strong copyleft Coq dependencies of the executable to make themselves a fully operational software. If this way of doing is compatible with the words of strong copyleft (and the users ok to do the combining themselves), this is a burden, but not a so strong one.\r\n\r\nIn the latter, I neglect the moral aspect. If the intent of the author of the strong copyleft license is to force works depending on it to be released with sources, it might be unwelcome to bypass this intent and be (morally) dommageable to release without sources. On the other side, the strong copyleft might be considered too constraining for who wants to release executables without releasing the sources and move them to rely on other, more permissive, dependencies. Yet on another side, good ideas kept secret do not remain secret for long. For instance, proprietary spreadsheets or word processors did not so much prevent the development of open-source similar softwares. Proprietary drivers did not significantly prevent developing open-source versions of these drivers. This is a question of time, and a natural swing of the pendulum, which we can see in other situations (e.g. the current reactions to an excess of tracking of internet users).\r\n\r\nAt the end, my feeling is that what really matters is not the technical impacts but the moral impact (and a regular attention that no actors abuse their power).\r\n\r\nBack to the PR, I see that several people would feel more comfortable with sending the message of a more permissive license, either MIT-like, or LGPL 2.1, or \"Lesser GPL v2.1 or later, or, at your option, the license of the Coq standard library (theories directory as of time of writing)\". Do we then try to go for the latter, which after all seems reasonable? Then, an appropriate mail to CoRN developers could be prepared.\r\n"},{"author":"spitters","date":"2020-08-21T09:17:17Z","comment":"Thanks Hugo for the careful response. I believe it's accurate.\r\nGPL currently seems to be mostly hindering the progress of corn and it's interaction with other libraries.\r\nThis was unintended when the license was introduced.\r\nWe already have permission from most of the key contributors to use the MIT license, so I would propose to go with that. Also, because it is currently recommended by the Coq-community."},{"author":"robbertkrebbers","date":"2020-08-21T17:07:51Z","comment":"Which contributors are missing, or more relevantly, for which parts of CoRN do we not have permission yet?"}],"tags":[],"pull_requests":[]},{"author":"spitters","number":98,"state":"closed","open_date":"2020-05-30T10:04:39Z","update_date":"2020-08-07T06:48:54Z","discussion":[{"author":"robbertkrebbers","date":"2020-05-31T09:39:12Z","comment":"In principle I'm fine with this, but I think it's very confusing.\r\n\r\n- Licensing information should not be in a README file in some subfolder, it should be in a LICENSE file. The LICENSE in the root should explain what's the LICENSE for all parts of the development, or describe where that information can be found.\r\n- There is a LICENSE file at the root of the repo (with GPL), since it does not explicitly exclude this directory, I believe this directory is therefore also GPL (I think that LICENSE file was already there when I wrote the code in 2010, so my contributions are therefore GPL already, even without my explicit permission).\r\n- I think you said you wanted to relicense under LGPL, so why not change the  LICENSE file in the root (provided you have permissions from everyone involved). In general, having separate licenses for different parts of a development is very confusing.\r\n- I gave the permission for WTFPL since it's very liberal and thus compatible with any open source license, allowing you to use my developments under any license that you see fit (now or in the future). I don't think you should actually use WTFPL, but rather a more common license (which could be any).\r\n"},{"author":"robbertkrebbers","date":"2020-05-31T10:26:37Z","comment":"My 2 cents if you want to change the license: make a PR that changes the LICENSE (in the root of the repo) to LGPL. Then ask all contributors to respond to that PR that they agree.\r\n\r\nAnother 2 cents: if you are going to change the license, I would directly go to something more liberal than LGPL, for example, BSD, so as to avoid re-licensing issues in the future."},{"author":"VincentSe","date":"2020-05-31T10:37:02Z","comment":"@robbertkrebbers Completely relicensing CoRN to LGPL or BSD would greatly improve its chances to be accepted and used in Coq platform as the recommended constructive mathematics library. There are 19 contributors holding the copyright, do you know how to reach them all ?"},{"author":"VincentSe","date":"2020-05-31T11:09:40Z","comment":"@robbertkrebbers @spitters @Zimmi48 Here is the pull request that replace CoRN's license by Coq's license\r\nhttps://github.com/coq-community/corn/pull/99\r\n\r\nCan you contact the 19 CoRN's copyright holders to ask them to accept this change ?"},{"author":"Zimmi48","date":"2020-05-31T11:12:45Z","comment":"I agree with Robert. I recently gave my reasons for being opposed to the use of LGPL in https://github.com/coq-community/templates/issues/34#issuecomment-634565291. I largely prefer the use of GPL (clear requirements) to LGPL (people think it is a rather permissive license when in fact, its requirements are extremely restrictive). I am very sad that it is the de facto licence of the OCaml and Coq ecosystems. I recommend either MIT (very much used, very permissive, similar to BSD) or MPL 2.0 (weak copyleft but very easy to understand contrary to LGPL)."},{"author":"robbertkrebbers","date":"2020-06-02T15:54:38Z","comment":"> There are 19 contributors holding the copyright, do you know how to reach them all ?\r\n\r\nI have no idea if it's feasible to contact all of them. Many are not active in academia anymore. Bas may have a better idea if this is feasible at all, or hopeless to start with.\r\n\r\nBut before pursuing any such an endeavor, I propose you figure out what license you really want.\r\n\r\nAlso I have to say that I don't quite understand Bas's original plan. Was his intention to only re-license parts of CoRN or the whole of it?"},{"author":"spitters","date":"2020-06-02T18:25:26Z","comment":"We have contacted a number of key people already, and they are happy to\nchange the license.\n\nTo avoid having to contact everyone, we could just relicense the parts that\ndo not have GPL and where we have already contacted the contributors.\nVincent has shown that those parts are enough.\n\nOn Tue, Jun 2, 2020 at 5:54 PM Robbert Krebbers <notifications@github.com>\nwrote:\n\n> There are 19 contributors holding the copyright, do you know how to reach\n> them all ?\n>\n> I have no idea if it's feasible to contact all of them. Many are not\n> active in academia anymore. Bas may have a better idea if this is feasible\n> at all, or hopeless to start with.\n>\n> But before pursuing any such an endeavor, I propose you figure out what\n> license you really want.\n>\n> Also I have to say that I don't quite understand Bas's original plan. Was\n> his intention to only re-license parts of CoRN or the whole of it?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/pull/98#issuecomment-637642916>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTTDX2T6GTWSDJXAN2DRUUOE3ANCNFSM4NOUCVNQ>\n> .\n>\n"},{"author":"robbertkrebbers","date":"2020-06-02T18:27:45Z","comment":"In that case, I suggest making clear in the LICENSE file in the root what parts are available under which license."},{"author":"spitters","date":"2020-08-04T12:26:28Z","comment":"@robbertkrebbers as proposed here MIT instead of WTFPL is preferred (as it is more common)\r\nhttps://github.com/coq-community/manifesto/pull/110\r\n\r\nAs per the ongoing discussion \r\nhttps://github.com/coq-community/corn/pull/99\r\n, it may be preferable to (re)license the parts where we can easily contact all the authors, and then handle #99 when we know more. The conclusion from #99 is that it has been accepted practice for a very long time in corn to have parts under MIT license.\r\nSo, I see no problem doing this for the faster/ files too."},{"author":"robbertkrebbers","date":"2020-08-05T18:06:23Z","comment":"> @robbertkrebbers as proposed here MIT instead of WTFPL is preferred (as it is more common)\r\ncoq-community/manifesto#110\r\n\r\nTLDR: MIT is fine.\r\n\r\nAs I stated in that email, I'm fine with any open source license. I gave explicit permission for WTFPL kind of as a joke, but also since that would allow you to re-license to whatever you like.\r\n\r\nPS: What's the reason why MIT is preferred over BSD?"},{"author":"Zimmi48","date":"2020-08-05T21:08:40Z","comment":"MIT has just become more popular nowadays. GitHub recommends it (cf. https://choosealicense.com) and the FSF prefers it over BSD because BSD has many variations including an old one (4-clause) that was not GPL-compatible."},{"author":"robbertkrebbers","date":"2020-08-06T16:28:57Z","comment":"That sounds like a reasonable motivation to prefer MIT. But are there any technical differences between 3-clause BSD and MIT?"},{"author":"robbertkrebbers","date":"2020-08-06T16:29:53Z","comment":"@spitters I still think the following should be fixed:\r\n\r\n> Licensing information should not be in a README file in some subfolder, it should be in a LICENSE file. The LICENSE in the root should explain what's the LICENSE for all parts of the development, or describe where that information can be found."},{"author":"spitters","date":"2020-08-06T16:34:22Z","comment":"@robbertkrebbers I agree, but I hope we can resolve that as part of the larger discussion in #99 "},{"author":"Zimmi48","date":"2020-08-07T06:48:54Z","comment":"> That sounds like a reasonable motivation to prefer MIT. But are there any technical differences between 3-clause BSD and MIT?\n\nThe MIT license is equivalent to the 2-clause BSD license. See https://opensource.stackexchange.com/questions/217/what-are-the-essential-differences-between-the-bsd-and-mit-licences."}],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":97,"state":"closed","open_date":"2020-05-28T13:37:55Z","update_date":"2020-11-10T13:59:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":96,"state":"closed","open_date":"2020-05-26T22:19:36Z","update_date":"2020-05-27T07:56:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":95,"state":"closed","open_date":"2020-05-17T09:47:38Z","update_date":"2020-05-17T11:40:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":94,"state":"closed","open_date":"2020-05-09T10:56:35Z","update_date":"2020-05-09T15:33:37Z","discussion":[{"author":"VincentSe","date":"2020-05-09T12:06:24Z","comment":"@Zimmi48 Those build errors are related to GTK+ and probably independent of this pull request. Can we merge ?"},{"author":"spitters","date":"2020-05-09T12:40:12Z","comment":"GTK+ ? is it trying to build coqide??"},{"author":"Zimmi48","date":"2020-05-09T15:09:57Z","comment":"The Nix package of Coq does indeed contain CoqIDE but it is not supposed to be rebuilt in the CI, a pre-compiled version is always supposed to be available. I've just checked to be sure and the same error happens on master as well. So yes, this is unrelated to this PR and is likely a recently introduced bug in nixpkgs. I'll investigate it and report it."},{"author":"VincentSe","date":"2020-05-09T15:33:28Z","comment":"@Zimmi48 Thanks for the investigation."}],"tags":[],"pull_requests":[]},{"author":"olaure01","number":93,"state":"closed","open_date":"2020-05-07T10:58:01Z","update_date":"2020-05-07T15:06:48Z","discussion":[{"author":"Zimmi48","date":"2020-05-07T14:45:05Z","comment":"IIUC @olaure01 correctly, this is no longer needed."},{"author":"olaure01","date":"2020-05-07T15:03:44Z","comment":"@Zimmi48 Indeed, thanks to the use of local definitions in coq/coq#12162. However it is backwards compatible and, in a context of a single use of `lt`, qualifying it might be a good idea."},{"author":"Zimmi48","date":"2020-05-07T15:06:48Z","comment":"I'll leave it to the corn maintainers to decide if they want to reopen and merge or not."}],"tags":[],"pull_requests":[]},{"author":"olaure01","number":92,"state":"closed","open_date":"2020-04-29T17:25:33Z","update_date":"2020-04-29T20:12:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"olaure01","number":91,"state":"closed","open_date":"2020-04-28T14:30:52Z","update_date":"2020-04-28T16:00:32Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":90,"state":"closed","open_date":"2020-04-27T16:45:22Z","update_date":"2020-04-28T18:56:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":89,"state":"closed","open_date":"2020-04-03T17:32:26Z","update_date":"2020-04-03T19:12:32Z","discussion":[{"author":"VincentSe","date":"2020-04-03T17:33:20Z","comment":"@Zimmi48 Opaque_algebra is needed, but there is this better way to skip it"},{"author":"Zimmi48","date":"2020-04-03T18:05:02Z","comment":"Another solution would be to replace the `Opaque` in `Opaque_algebra.v` with `Global Opaque` and then, the files that need it could use `Require Import` instead of `Load`."}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":88,"state":"closed","open_date":"2020-03-31T21:25:46Z","update_date":"2020-04-07T16:24:08Z","discussion":[{"author":"VincentSe","date":"2020-04-01T07:33:17Z","comment":"The build failed with this error\r\n`Error: Unable to locate library ConstructiveReals.`\r\n\r\nThat probably means that CoRN is not up date with Coq's master branch, which merged this file ConstructiveReals.v 2 days ago:\r\nhttps://github.com/coq/coq/pull/11725\r\n\r\nHow do we synchronize CoRN ?"},{"author":"spitters","date":"2020-04-01T08:31:33Z","comment":"corn depends on a stable version of coq.\r\nIn this case, I'm not sure there is other way forward than to break backwards compatibility.\r\n@Zimmi48 do you happen to know an alternative?"},{"author":"Zimmi48","date":"2020-04-01T08:42:52Z","comment":"Part of @VincentSe's work on constructive reals has already been released in 8.11, but the recent PR that was merged in Coq master reorganizes most of this in different files, and if this PR depends on this reorganization, it isn't even compatible with Coq 8.11.\r\n\r\nA temporary solution could be to enable this extension only when the detected version of Coq is >= 8.12 (this would have to be tested in the `Makefile`).\r\n\r\nOf course, another solution would be to simply drop compatibility with all currently released versions of Coq, but in this case, we should at least ensure that a last version compatible with Coq 8.11 is released."},{"author":"VincentSe","date":"2020-04-01T08:59:20Z","comment":"@Zimmi48 @spitters This PR indeed depends on Coq's reorganization PR. Acutally it was a single big PR before, that I split into 1 PR towards Coq and this PR towards CoRN.\r\n\r\nI do not understand your explanations about the dependencies between Coq and CoRN. I expect CoRN to have several branches, that mirror Coq's versions. So branches CoRN/8.10, CoRN/8.11, CoRN/master and so on. Why is it not the case ?\r\n\r\nCoRN is in Coq's continuous integration, so we know that it is possible to build both (and much more) on each PR."},{"author":"spitters","date":"2020-04-01T09:06:19Z","comment":"Because of the close collaboration with the coqdevs we managed to keep the master version of corn compatible with many versions of Coq.\r\nWe can release an 8.11 version now, and have the master branch follow the coq master (towards 8.12) if there is no better option."},{"author":"Zimmi48","date":"2020-04-01T09:06:44Z","comment":"> I do not understand your explanations about the dependencies between Coq and CoRN. I expect CoRN to have several branches, that mirror Coq's versions. So branches CoRN/8.10, CoRN/8.11, CoRN/master and so on. Why is it not the case ?\r\n\r\nThat's not how it works. CoRN has a single branch (`master`) which is tested with several versions of Coq. This is the recommendation for libraries: instead of being compatible with only one version of Coq at once, compatibility is maintained with a range of versions. This means that users can bump the version of Coq they use without changing the version of CoRN and conversely can bump the version of CoRN without changing the version of Coq (makes up for smoother upgrades).\r\n\r\nThat being said, this doesn't mean that there cannot be exceptions to this policy.\r\n\r\n>CoRN is in Coq's continuous integration, so we know that it is possible to build both (and much more) on each PR.\r\n\r\nYes, and if you click on the \"Details\" button of the Travis failure, you can see that your PR actually did succeed with Coq master."},{"author":"VincentSe","date":"2020-04-01T09:17:11Z","comment":"@Zimmi48 @spitters Ok, fair enough. In this case multi-compatibility is easy: simply do not include those 15 new files in CoRN's build when Coq's version is <= 8.11.\r\n\r\nDo you know how to setup that in CoRN's makefile ?"},{"author":"Zimmi48","date":"2020-04-01T09:22:58Z","comment":"> @Zimmi48 @spitters Ok, fair enough. In this case multi-compatibility is easy: simply do not include those 15 new files in CoRN's build when Coq's version is <= 8.11.\r\n\r\nRight!\r\n\r\n> Do you know how to setup that in CoRN's makefile ?\r\n\r\nNo, I'm no Makefile expert. But we can ask @JasonGross for advice. He's used to this kind of tricks."},{"author":"VincentSe","date":"2020-04-01T17:06:32Z","comment":"@Zimmi48 @spitters It seems that Makefile is generated by `coq_makefile -f Make -o Makefile`.\r\n\r\nThen why is `Makefile` source-controlled in Git ? It should be deleted from Git and then git-ignored.\r\n\r\nAnd then I read the doc of [coq_makefile](https://coq.inria.fr/refman/practical-tools/utilities.html), and found nothing about changing the files built in function of Coq's version.\r\n\r\n@JasonGross Do you know another way ?"},{"author":"JasonGross","date":"2020-04-01T17:18:39Z","comment":"I have some code [in mit-plv/rewriter](https://github.com/mit-plv/rewriter/blob/ddb7798dd73a9a95781bd8334e92d9ff4b8a7d6e/Makefile.local.common#L10-L14) that gets the version of Coq:\r\n```makefile\r\nCOQ_VERSION_PREFIX = The Coq Proof Assistant, version\r\nCOQ_VERSION := $(firstword $(subst $(COQ_VERSION_PREFIX),,$(shell $(COQBIN)coqc --version 2>/dev/null)))\r\n\r\nCOQ_EXTENDED_VERSION := $(shell (echo | $(COQBIN)coqtop 2>/dev/null; $(COQBIN)coqc --version 2>/dev/null))\r\nCOQ_EXTENDED_VERSION_OLD := $(shell cat $(COQ_VERSION_FILE) 2>/dev/null)\r\n```\r\nThen I have [some code that picks the file list based on this version](https://github.com/mit-plv/rewriter/blob/ddb7798dd73a9a95781bd8334e92d9ff4b8a7d6e/Makefile.local.common#L16-L57):\r\n```makefile\r\nifneq (,$(filter 8.9%,$(COQ_VERSION)))\r\nEXPECTED_EXT:=.v89\r\nML_DESCRIPTION := \"Coq v8.9\"\r\nML4_OR_MLG := ml4\r\nelse\r\nifneq (,$(filter 8.10%,$(COQ_VERSION)))\r\nEXPECTED_EXT:=.v810\r\nML_DESCRIPTION := \"Coq v8.10\"\r\nML4_OR_MLG := mlg\r\nelse\r\nifneq (,$(filter 8.11%,$(COQ_VERSION)))\r\nEXPECTED_EXT:=.v811\r\nML_DESCRIPTION := \"Coq v8.11\"\r\nML4_OR_MLG := mlg\r\nelse\r\nEXPECTED_EXT:=.v812\r\nML_DESCRIPTION := \"Coq v8.12\"\r\nML4_OR_MLG := mlg\r\nendif\r\nendif\r\nendif\r\n\r\nCOMPATIBILITY_FILES_PATTERN := \\\r\n\tsrc/Rewriter/Util/plugins/definition_by_tactic.ml \\\r\n\tsrc/Rewriter/Util/plugins/definition_by_tactic.mli \\\r\n\tsrc/Rewriter/Util/plugins/definition_by_tactic_plugin.@ML4_OR_MLG@ \\\r\n\tsrc/Rewriter/Util/plugins/definition_by_tactic_plugin.mllib \\\r\n\tsrc/Rewriter/Util/plugins/inductive_from_elim.ml \\\r\n\tsrc/Rewriter/Util/plugins/inductive_from_elim.mli \\\r\n\tsrc/Rewriter/Util/plugins/inductive_from_elim_plugin.@ML4_OR_MLG@ \\\r\n\tsrc/Rewriter/Util/plugins/inductive_from_elim_plugin.mllib \\\r\n\tsrc/Rewriter/Util/plugins/rewriter_build.ml \\\r\n\tsrc/Rewriter/Util/plugins/rewriter_build.mli \\\r\n\tsrc/Rewriter/Util/plugins/rewriter_build_plugin.@ML4_OR_MLG@ \\\r\n\tsrc/Rewriter/Util/plugins/rewriter_build_plugin.mllib \\\r\n\tsrc/Rewriter/Util/plugins/strategy_tactic.ml \\\r\n\tsrc/Rewriter/Util/plugins/strategy_tactic.mli \\\r\n\tsrc/Rewriter/Util/plugins/strategy_tactic_plugin.@ML4_OR_MLG@ \\\r\n\tsrc/Rewriter/Util/plugins/strategy_tactic_plugin.mllib \\\r\n        src/Rewriter/Util/plugins/RewriterBuildRegistry.v\r\n\r\nCOMPATIBILITY_FILES := $(subst @ML4_OR_MLG@,$(ML4_OR_MLG),$(COMPATIBILITY_FILES_PATTERN))\r\n```\r\nI also [generate `_CoqProject` from `_CoqProject.in` using these variables](https://github.com/mit-plv/rewriter/blob/ddb7798dd73a9a95781bd8334e92d9ff4b8a7d6e/Makefile#L39-L40) : \r\n```makefile\r\n_CoqProject: _CoqProject.in\r\n\tsed s'/@ML4_OR_MLG@/$(ML4_OR_MLG)/g' $< > $@\r\n```\r\n\r\nThen you can just add a bit of code to the `Makefile` that generates `Makefile.coq` using `coq_makefile` and delegates to it."},{"author":"JasonGross","date":"2020-04-01T17:20:23Z","comment":"Note that I also have [code that updates `$(COQ_VERSION_FILE)` only when the version of Coq changes](https://github.com/mit-plv/rewriter/blob/ddb7798dd73a9a95781bd8334e92d9ff4b8a7d6e/Makefile#L33-L37), so you can make targets depend on that file to force them to update when the version of Coq changes."},{"author":"Zimmi48","date":"2020-04-01T17:27:14Z","comment":"> Then why is `Makefile` source-controlled in Git ? It should be deleted from Git and then git-ignored.\r\n\r\nIt used to be common practice. Indeed, this `coq_makefile`-generated `Makefile` supports regenerating itself. But nowadays, the recommended way is rather to wrap the call to `coq_makefile` in a small `Makefile` and to have the generated makefile be called `Makefile.coq` and be git-ignored. Cf. most other coq-community projects.\r\n\r\nSince `Make` is also generated automatically (by `configure.sh`), a solution could also be that this is the `configure.sh` script that checks the Coq version and generate the appropriate `Make`."},{"author":"VincentSe","date":"2020-04-01T17:51:17Z","comment":"@Zimmi48 @JasonGross Thanks for your ideas.\r\n\r\nSo in CoRN I propose to git-ignore `Make` and `Makefile`, because they are both generated by `configure.sh`. Then the test on Coq's version can be implemented in `configure.sh` because it's a shell script.\r\n\r\nDoes that sound right to you ?"},{"author":"VincentSe","date":"2020-04-02T07:29:59Z","comment":"@spitters agrees to merge. I am about to click on the merge button on github, but I remember @Zimmi48 told me not to. What's the merging process ?"},{"author":"Zimmi48","date":"2020-04-02T07:56:02Z","comment":"@VincentSe : that only applied to the Coq repository itself. Here you can."},{"author":"Zimmi48","date":"2020-04-02T07:59:50Z","comment":"Regarding your test of the Coq version, it isn't appropriate to rely on the `+`, you should instead test that the number after the dot is >= 12.\n\nIndeed, beta versions from past releases had the plus as well. OTOH, checking for 12 or later should ensure that this test continues to be appropriate even after the next release."},{"author":"Zimmi48","date":"2020-04-02T08:03:22Z","comment":"If I may nitpick, I should also say that your changes to `configure` could have gone in a commit separate from your gitignore changes. In any case, the commit title is misleading because this commit contains more than what's announced."},{"author":"VincentSe","date":"2020-04-02T08:08:18Z","comment":"@Zimmi48 There might be a bug in `coqc --version` then. I get this\r\n\r\n```\r\nThe Coq Proof Assistant, version 8.11+alpha (December 2019)\r\ncompiled on Dec 14 2019 12:50:03 with OCaml 4.09.0\r\n```\r\n\r\nand I am on this commit \r\n\r\n```\r\n*   e2f0814688  (HEAD, upstream/master) Pierre-Marie Pédrot, 2 days ago | Merge PR #11647: [rfc] Consolidation of parsing interfaces\r\n```"},{"author":"Zimmi48","date":"2020-04-02T08:13:18Z","comment":"As the date suggests, you probably haven't re-run `./configure` in all that time. In any case, on a fresh installation like on CI, the version will really be `8.12+alpha`."},{"author":"VincentSe","date":"2020-04-02T12:11:08Z","comment":"@spitters @Zimmi48 Also, why do we exclude `tactics/Opaque_algebra.v` from the build in `configure.sh` ? If this file is not used, let's remove it.\r\n\r\nIt is actually used as load commands inside other files, why ?\r\n`./reals/Q_dense.v:Load \"Opaque_algebra\".`"},{"author":"Zimmi48","date":"2020-04-02T12:16:36Z","comment":"I have no idea. This goes far back. But that's not good practice in any case."},{"author":"spitters","date":"2020-04-02T12:21:22Z","comment":"I believe it was there for performance reasons. I think it's safe to remove\nnow.\n\nOn Thu, Apr 2, 2020 at 2:16 PM Théo Zimmermann <notifications@github.com>\nwrote:\n\n> I have no idea. This goes far back. But that's not good practice in any\n> case.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/pull/88#issuecomment-607810009>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABTNTW2SIP2L3OKCUJ7NVTRKR63FANCNFSM4LYBBADQ>\n> .\n>\n"},{"author":"VincentSe","date":"2020-04-02T16:09:29Z","comment":"@Zimmi48 nitpick executed"}],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":87,"state":"closed","open_date":"2020-03-29T11:50:06Z","update_date":"2020-03-29T14:42:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"vbgl","number":86,"state":"closed","open_date":"2020-02-26T14:09:03Z","update_date":"2020-02-26T15:15:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"SimonBoulier","number":85,"state":"closed","open_date":"2020-01-08T11:12:13Z","update_date":"2020-01-08T12:40:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"c67e708d","number":84,"state":"closed","open_date":"2019-12-06T13:11:35Z","update_date":"2019-12-06T13:30:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"vbgl","number":83,"state":"closed","open_date":"2019-11-25T15:48:20Z","update_date":"2019-11-26T10:33:57Z","discussion":[{"author":"VincentSe","date":"2019-11-26T08:58:31Z","comment":"@Zimmi48 Thanks, that was my opinion also"}],"tags":[],"pull_requests":[]},{"author":"vbgl","number":82,"state":"closed","open_date":"2019-11-05T12:31:29Z","update_date":"2019-11-06T10:27:57Z","discussion":[{"author":"Zimmi48","date":"2019-11-06T10:23:40Z","comment":"@vbgl Looking at your patch, I see you have changed a lot of `;` into `.` While this is not a problem *per se*, I would like to remark that you can insert goal selectors within a `;` sequence by prefixing them with the `only` keyword."},{"author":"vbgl","date":"2019-11-06T10:27:57Z","comment":"Thanks for the hint. This is even documented: <https://coq.github.io/doc/master/refman/proof-engine/ltac.html#grammar-token-ltac_expr3> ;-)"}],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":81,"state":"closed","open_date":"2019-09-23T20:30:01Z","update_date":"2019-09-23T20:32:22Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":80,"state":"closed","open_date":"2019-09-20T17:30:48Z","update_date":"2019-09-22T18:16:35Z","discussion":[{"author":"spitters","date":"2019-09-21T06:58:10Z","comment":"Yes, I'd be happy to have Vincent as a co maintainer.\n\nfrom my phone\n\nOn Sat, Sep 21, 2019, 08:12 Théo Zimmermann <notifications@github.com>\nwrote:\n\n> *@Zimmi48* commented on this pull request.\n>\n> Hi Vincent,\n> That's very nice of you to propose yourself as a maintainer for Corn.\n> Supposing that Bas agrees, you should edit the meta.yml file, from which\n> README.md is auto-generated (using a program called mustache, and a\n> template that can be found in https://github.com/coq-community/templates).\n> I suggest you only put yourself to the list of maintainers to start with.\n> You can add yourself to the list of authors *after* having made\n> significant contributions.\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/coq-community/corn/pull/80?email_source=notifications&email_token=AABTNTRKJJOLNDGZ67FAYG3QKW3MTA5CNFSM4IYZRFCKYY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOCFPTQGI#pullrequestreview-291452953>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABTNTVRWCTO7KPOL3N34H3QKW3MTANCNFSM4IYZRFCA>\n> .\n>\n"},{"author":"Zimmi48","date":"2019-09-22T15:55:50Z","comment":"I've merged your PR and regenerated the README, but I screwed up the process a little, and this is the reason why this PR is not marked as merged. Please, never open pull request from your master branch, always use a dedicated topic branch. Otherwise, it makes collaboration on the branch much more difficult."},{"author":"Zimmi48","date":"2019-09-22T16:00:52Z","comment":"@VincentSe You should have received an invitation to join coq-community, and one to join this repository as a collaborator. You only need to accept the first one, and the other one should be accepted automatically. You will then be an admin of this repository like @spitters. I've also updated the repository's description."},{"author":"VincentSe","date":"2019-09-22T18:16:35Z","comment":"@Zimmi48 Done, thanks"}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":79,"state":"closed","open_date":"2019-09-16T15:44:23Z","update_date":"2019-09-16T18:33:57Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"VincentSe","number":78,"state":"closed","open_date":"2019-09-01T14:27:05Z","update_date":"2020-09-07T11:34:10Z","discussion":[{"author":"Zimmi48","date":"2019-09-01T15:07:51Z","comment":"Dates in copyright headers do not mean that their copyright has come to an end but indicate the date of the works. So indeed, if Corn was to be relicensed, it would need an agreement from the all the copyright holders.\r\n\r\nBut I don't think that the license is the only blocker here: one important question is whether this proposal is something that the Coq development team will agree with. I can only encourage you to come to a working group to have this idea discussed (chances are that the next one will be held in Nantes though). I am personally very interested in this perspective.\r\n\r\nAnother point is that we are likely going to split the standard library into several packages in the future, so the fact that a part of it is under a different license may not necessarily turn out to be problematic."},{"author":"VincentSe","date":"2019-09-01T15:25:35Z","comment":"@Zimmi48 I have never been invited to such a working group. When is the next one and how can I enter it ? Also, how do we add this question of the integration of Corn's reals to its agenda ?"},{"author":"Zimmi48","date":"2019-09-01T16:53:08Z","comment":"The working groups are public, anyone can come. This is the page to look for regarding its organization: https://github.com/coq/coq/wiki/Next-Coq-Working-Group\r\nAs you can see, the next one will be toward the end of September."},{"author":"Zimmi48","date":"2019-09-01T16:53:32Z","comment":"The agenda is set by editing the wiki page."},{"author":"VincentSe","date":"2019-09-19T16:35:22Z","comment":"@Zimmi48 Hello, the next proposed date for the working group is next Thursday and no choice has been made yet ? I need to book a hotel and a train..."},{"author":"Zimmi48","date":"2019-09-19T17:53:26Z","comment":"I'm sorry, I was so busy I forgot to inform you that the date has been set, and@mattam82 apparently forgot to update the wiki page :confused: \r\nThe dates are October 1st and 2nd in Nantes. Enjoy if you are going! (Unfortunately, I won't be able to make it, even by visio :disappointed:)"},{"author":"VincentSe","date":"2019-09-19T18:57:23Z","comment":"@Zimmi48 Nice... Yes I'll be there. Anything else I need to know to get there? Location? Digicode? "},{"author":"Zimmi48","date":"2019-09-19T21:11:44Z","comment":"This will probably be written in time on the wiki page. For now, there has been no such information."},{"author":"Zimmi48","date":"2019-09-21T06:27:44Z","comment":"BTW if you want a slot to be devoted to a discussion on standard library's reals, you should add this point to the wiki page"},{"author":"VincentSe","date":"2020-09-07T11:34:10Z","comment":"Duplicate of https://github.com/coq-community/corn/pull/99"}],"tags":[],"pull_requests":[]},{"author":"raingloom","number":77,"state":"closed","open_date":"2019-08-19T21:19:15Z","update_date":"2019-08-19T21:28:00Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"eponier","number":63,"state":"closed","open_date":"2018-09-27T08:39:26Z","update_date":"2018-09-27T09:38:46Z","discussion":[{"author":"Zimmi48","date":"2018-09-27T09:38:14Z","comment":"Thanks a lot!"}],"tags":[],"pull_requests":[]},{"author":"spitters","number":61,"state":"closed","open_date":"2018-09-19T18:23:42Z","update_date":"2018-09-20T08:57:51Z","discussion":[{"author":"Zimmi48","date":"2018-09-19T18:35:16Z","comment":"@spitters This doesn't seem necessary: the current version of corn is still compatible with Coq 8.6-8.7. The problem is rather the other way around: there is no released version (tag / opam package) that is compatible with Coq 8.8. Just tagging the current master branch and publishing this on opam-coq-archive should be enough."},{"author":"spitters","date":"2018-09-19T18:37:58Z","comment":"So, I just push the tag, but leave the README as it is ?"},{"author":"Zimmi48","date":"2018-09-19T18:55:35Z","comment":"If you want you can make the README more precise by saying that it was tested for compatibility with Coq 8.6 through 8.8.1."},{"author":"Zimmi48","date":"2018-09-19T18:58:25Z","comment":"It does however require a recent math-classes. Maybe a first step would be to make a release for math-classes."},{"author":"spitters","date":"2018-09-19T19:47:22Z","comment":"Done:\r\nhttps://github.com/coq-community/math-classes/releases/tag/8.8.1"},{"author":"Zimmi48","date":"2018-09-19T19:49:25Z","comment":"Great! Now, it would probably make sense to document this requirement on the version of math-classes in the README of corn. I'll prepare the PRs on the opam archive when the tag for corn is put as well."},{"author":"spitters","date":"2018-09-19T19:57:03Z","comment":"I've just updated the readme to include the version of mc"},{"author":"spitters","date":"2018-09-19T19:57:40Z","comment":"Since the only change is in a text file, I think we can pull, if I did not overlook anything."},{"author":"Zimmi48","date":"2018-09-19T20:01:54Z","comment":"Yes"},{"author":"Zimmi48","date":"2018-09-20T08:57:51Z","comment":"@spitters I don't see a new tag for corn yet."}],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":60,"state":"closed","open_date":"2018-07-21T11:52:08Z","update_date":"2018-07-21T15:24:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":56,"state":"closed","open_date":"2018-07-16T11:59:43Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"maximedenes","date":"2018-07-16T12:14:04Z","comment":"I don't have privileges to cancel the build and restart it."},{"author":"spitters","date":"2018-07-16T12:16:22Z","comment":"Just restarted it"},{"author":"maximedenes","date":"2018-07-16T12:58:15Z","comment":"Success! If you merge this PR, I'll rebase #55 on top of it so that it gets tested. Thanks!"}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":55,"state":"closed","open_date":"2018-07-12T14:46:33Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"maximedenes","date":"2018-07-12T14:54:36Z","comment":"Shouldn't this trigger a Travis build?"},{"author":"maximedenes","date":"2018-07-16T07:15:05Z","comment":"@spitters Is Travis activated on this repo? This patch should be backward compatible, but it would be good to test it. Thanks!"},{"author":"spitters","date":"2018-07-16T08:31:15Z","comment":"Thanks. @maximedenes I haven't gotten around to enabling travis.\r\nIf you can do it with your eyes closed, please send me a PR.\r\n\r\nBTW: I'm considering moving corn to the coq-community. "},{"author":"maximedenes","date":"2018-07-16T08:47:18Z","comment":"I think what is missing is to activate Travis itself : https://travis-ci.org/c-corn/corn says it is not an active repository. Once that is done, we can tweak the configuration via pull requests."},{"author":"spitters","date":"2018-07-16T08:52:50Z","comment":"Thanks. I pressed activate and restarted the build.\r\nWhat do we need to make it work for this PR?"},{"author":"maximedenes","date":"2018-07-16T08:53:51Z","comment":"In this situation, I think we need to close and reopen so that Travis is made aware that this PR exists. Will try."},{"author":"maximedenes","date":"2018-07-16T08:54:16Z","comment":"Yes, it did pick it up. Let's see what the build says."},{"author":"spitters","date":"2018-07-16T09:38:42Z","comment":"I think this came from\r\nhttps://github.com/math-classes/math-classes/pull/52\r\nError: Unable to locate library MathClasses.theory.Streams."},{"author":"maximedenes","date":"2018-07-16T10:55:56Z","comment":"Which version of math classes is this branch of corn known to compile with?"},{"author":"spitters","date":"2018-07-16T11:04:54Z","comment":"It compiled 4 months ago with master, but I think was broken by\r\n math-classes/math-classes#52\r\n\r\nI hadn't spotted that because travis for math-classes doesn't run corn"},{"author":"maximedenes","date":"2018-07-16T11:06:06Z","comment":"I thought we would detect that on the Coq side, if it was the case. @ppedrot do you know more?"},{"author":"ppedrot","date":"2018-07-16T11:10:48Z","comment":"What version of math-classes is this build testing against? The fix is only present in master IIRC."},{"author":"spitters","date":"2018-07-16T11:12:28Z","comment":"I think corn takes math-classes from opam, and the opam version of mc may need to be updated?"},{"author":"ppedrot","date":"2018-07-16T11:13:30Z","comment":"Yes, that's probably the source of the error."},{"author":"spitters","date":"2018-07-16T11:18:43Z","comment":"So, we need a new 1.0.8 tag for the current master of mc.\r\nI won't have time today, maybe at the end of the week.\r\nWe will also need to update the corn README"},{"author":"maximedenes","date":"2018-07-16T11:19:52Z","comment":"I don't think it is reasonable to expect to release a new version each time an incompatible change is made. Isn't there a way to build against master instead?"},{"author":"spitters","date":"2018-07-16T11:22:39Z","comment":"This mode of working was suggested by the coq-devs IIRC.\r\nI'd be happy to follow any approach that is most convenient for you."},{"author":"maximedenes","date":"2018-07-16T11:28:34Z","comment":"I guess we should add an `opam` file on the `master` branch and make Travis use it. Will prepare a PR."},{"author":"maximedenes","date":"2018-07-16T14:56:11Z","comment":"Success! So this patch is backward compatible."},{"author":"spitters","date":"2018-07-17T08:41:26Z","comment":"Thanks @maximedenes "}],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":54,"state":"closed","open_date":"2018-05-24T15:11:37Z","update_date":"2018-07-20T11:55:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ppedrot","number":53,"state":"closed","open_date":"2018-05-24T14:38:34Z","update_date":"2018-07-20T11:55:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":51,"state":"closed","open_date":"2018-05-11T21:53:48Z","update_date":"2018-07-27T14:43:25Z","discussion":[{"author":"spitters","date":"2018-05-12T12:50:17Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"robbertkrebbers","number":50,"state":"closed","open_date":"2018-03-08T21:32:17Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"robbertkrebbers","date":"2018-03-09T07:28:51Z","comment":"@spitters The CI gives: \"The job exceeded the maximum time limit for jobs, and has been terminated.\" Is that expected?"},{"author":"spitters","date":"2018-03-09T08:32:49Z","comment":"I've noticed that before. I don't have a good solution for that.\r\n"},{"author":"robbertkrebbers","date":"2018-03-09T09:02:28Z","comment":"Thanks for merging!"},{"author":"langston-barrett","date":"2018-03-09T17:25:29Z","comment":"@spitters It might be helpful to split the Travis build into (semi)-independent parts, like we do with UniMath: https://github.com/UniMath/UniMath/blob/master/.travis.yml"},{"author":"spitters","date":"2018-03-11T05:41:38Z","comment":"Thanks, but why does this give more time on Travis?"}],"tags":[],"pull_requests":[]},{"author":"jashug","number":49,"state":"closed","open_date":"2018-02-24T02:07:00Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"spitters","date":"2018-02-24T14:37:45Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"vblot","number":48,"state":"closed","open_date":"2018-01-08T15:42:09Z","update_date":"2018-07-20T11:55:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"vblot","number":47,"state":"closed","open_date":"2017-12-13T13:56:19Z","update_date":"2018-07-20T11:55:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"vblot","number":46,"state":"closed","open_date":"2017-12-12T21:56:21Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"spitters","date":"2017-12-12T22:19:31Z","comment":"Thanks. What happened to the makefiles? Is it the new coq_makefile in action?\r\nDid you check that everything is still being compiled? Is the dependency on ssr necessary?"},{"author":"vblot","date":"2017-12-13T09:44:34Z","comment":"Concerning the makefiles, I only modified the configure.sh to add the new folder liouville, and it generated these files (along with a \"Makefile.conf\" that I should probably have added). I didn't test full recompilation but I'll do so this afternoon,"},{"author":"vblot","date":"2017-12-13T10:51:21Z","comment":"I just checked and \"Makefile.conf\" is actually generated by make if it doesn't exist already, so no need to include it in the repository."},{"author":"vblot","date":"2017-12-13T11:26:52Z","comment":"And I just tried full recompilation: everything works with trunk versions of coq, bignums and math-classes."},{"author":"spitters","date":"2017-12-13T11:46:51Z","comment":"Thanks. "}],"tags":[],"pull_requests":[]},{"author":"maximedenes","number":45,"state":"closed","open_date":"2017-11-06T14:11:47Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"spitters","date":"2017-11-06T14:28:57Z","comment":"Thanks! I'll merge when travis is happy.\r\nTravis is failing because travis.yml is missing. @Zimmi48 Didn't we set this up?\r\n\r\nI haven't had the time to look into the deprecation warnings. Do you know what's happening?"},{"author":"Zimmi48","date":"2017-11-06T14:33:43Z","comment":"We set it up in #44 but this wasn't merged yet because it was waiting for math-classes to be in OPAM. I've just relaunched the build of #44 so I think it should pass this time and be merged, then we can re-test the present PR."},{"author":"spitters","date":"2017-11-06T15:29:59Z","comment":"@maximedenes Could you rebase on top of #44, which I just merged. Then we can check that Travis is happy."},{"author":"maximedenes","date":"2017-11-06T15:31:57Z","comment":"Rebased!"},{"author":"Zimmi48","date":"2017-11-06T16:41:21Z","comment":"The build timed out. Probably worth simply relaunching. The previous builds ran in about 45 minutes so it's easy to go over the limit in case Travis is overloaded."},{"author":"spitters","date":"2017-11-06T23:01:59Z","comment":"I restarted the build.\r\nDid any of the Coq devs look at incremental compilation for Coq yet?\r\nhttps://www.cs.utexas.edu/~celik/papers/CelikETAL17iCoq.pdf"},{"author":"spitters","date":"2017-11-06T23:28:18Z","comment":"http://cozy.ece.utexas.edu/icoq/\r\n@ahmet-celik \r\n"},{"author":"spitters","date":"2017-11-06T23:51:37Z","comment":"Not sure what this means.\r\n\r\n```\r\n$ opam repo -y add coq-released https://coq.inria.fr/opam/released\r\n\r\n[ERROR] coq-released is already a remote repository\r\n```"},{"author":"Zimmi48","date":"2017-11-07T08:26:07Z","comment":"@spitters I guess this has happened before since the other open PR on this repository attempts to fix this, see here: https://github.com/c-corn/corn/pull/34/files.\r\nI guess you should just merge this other PR (or ping @JasonGross if you think there is a better solution). In any case, beware that you'd need to change the base branch from v8.5 to master before merging (you can do this with the edit button next to the PR title)."},{"author":"spitters","date":"2017-11-07T08:55:02Z","comment":"OK. I have merged #34 now and applied this by hand to the master branch.\r\n@maximedenes do you want to rebase again, or shall I just pull your request?"},{"author":"Zimmi48","date":"2017-11-07T09:05:35Z","comment":"@spitters You can also close / reopen the PR to trigger a Travis build with a new merge point."},{"author":"maximedenes","date":"2017-11-07T09:06:34Z","comment":"I'll rebase, it should take only a minute."},{"author":"maximedenes","date":"2017-11-07T09:07:33Z","comment":"Rebased! :)"}],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":44,"state":"closed","open_date":"2017-10-27T20:35:13Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"Zimmi48","date":"2017-10-28T10:18:35Z","comment":"The Travis build is failing because the Opam package for math classes is broken. I suggest you do a new release of math classes so that we can produce a corresponding Opam package that is compatible with 8.7.0."},{"author":"spitters","date":"2017-10-29T09:00:03Z","comment":"@Zimmi48 Thanks.\r\nhttps://github.com/coq/opam-coq-archive/pull/213\r\n\r\nI guess that when we have corn fixed, I should do the same for corn opam."},{"author":"Zimmi48","date":"2017-10-29T10:22:10Z","comment":"Indeed."},{"author":"Zimmi48","date":"2017-10-30T08:37:20Z","comment":"Closing / reopening to relaunch Travis."},{"author":"Zimmi48","date":"2017-10-30T09:53:38Z","comment":"Travis is still failing because the update to https://github.com/coq/opam-coq-archive haven't been propagated to https://coq.inria.fr/opam/released yet. I don't know how long this usually takes."},{"author":"Zimmi48","date":"2017-11-06T15:16:52Z","comment":"Travis passed, so this is ready to merge."},{"author":"spitters","date":"2017-11-06T15:23:22Z","comment":"@Zimmi48 Thanks!"}],"tags":[],"pull_requests":[]},{"author":"spitters","number":43,"state":"closed","open_date":"2017-10-27T16:12:34Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"Zimmi48","date":"2017-10-27T17:34:56Z","comment":"This looks OK and Travis is failing because there was never a `.travis.yml` file for v8.6 and master.\r\nI'll submit a PR to add such a file when this is merged.\r\nThanks @spitters!"}],"tags":[],"pull_requests":[]},{"author":"letouzey","number":42,"state":"closed","open_date":"2017-06-12T20:39:09Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"spitters","date":"2017-10-27T16:07:47Z","comment":"There's something wrong with the Travis installation, but I am going to merge this trusting @letouzey and @Zimmi48."}],"tags":[],"pull_requests":[]},{"author":"Zimmi48","number":41,"state":"closed","open_date":"2017-03-14T10:19:32Z","update_date":"2018-07-20T11:55:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"silene","number":40,"state":"closed","open_date":"2017-03-08T08:50:18Z","update_date":"2018-07-20T11:55:52Z","discussion":[{"author":"maximedenes","date":"2017-03-17T07:15:50Z","comment":"@spitters could we get this merged? It is blocking a PR on Coq's side. Thanks!"}],"tags":[],"pull_requests":[]},{"author":"langston-barrett","number":34,"state":"closed","open_date":"2016-11-16T23:20:37Z","update_date":"2018-07-20T11:55:51Z","discussion":[{"author":"langston-barrett","date":"2016-11-17T02:13:33Z","comment":"Hmm, the job timed out. Given how long it takes to install and compile coq, math-classes, and corn, this might be intermittent. You can always restart the builds, but it's up to the contributors whether or not a build that fails sometimes is worth it!\n"},{"author":"spitters","date":"2016-11-17T07:42:51Z","comment":"We had a similar issue with HoTT. @jasongross speeded things up.\nThere were many tweaks, but I believe the easiest one would be to us a binary for Coq.\n"}],"tags":[],"pull_requests":[]},{"author":"langston-barrett","number":32,"state":"closed","open_date":"2016-11-16T21:22:01Z","update_date":"2018-07-20T11:55:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ghost","number":29,"state":"closed","open_date":"2016-06-08T10:33:42Z","update_date":"2018-07-20T11:55:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ghost","number":28,"state":"closed","open_date":"2016-06-08T10:33:17Z","update_date":"2018-07-20T11:55:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ghost","number":27,"state":"closed","open_date":"2016-05-19T15:17:13Z","update_date":"2018-07-20T11:55:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ghost","number":26,"state":"closed","open_date":"2016-05-19T15:16:02Z","update_date":"2018-07-20T11:55:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ghost","number":25,"state":"closed","open_date":"2016-04-19T13:01:35Z","update_date":"2018-07-20T11:55:51Z","discussion":[{"author":"spitters","date":"2016-04-19T14:07:00Z","comment":"@matej-kosik Thanks!\n\nI'd be inclined to pull with the two lemmas removed. We'll put them back in later.\nThe std_library ommissions are really that things that should be moved to the stdlib.\nI've discussed this a number of times with the coq-devs, but man-power for this seems to be missing.\n"},{"author":"spitters","date":"2016-04-19T14:08:32Z","comment":"@matej-kosik I'd like to target 8.5pl1. Does this compile with that version?\nI guess, the answer is yes, since you say it compiles with trunk.\n"},{"author":"ghost","date":"2016-04-19T15:18:35Z","comment":"I think I made two mistakes.\n\n(1) I have started to figure out how to compile corn with Coq trunk where, as a first step, it makes sense to consider Coq 8.5.\n\n(2) There are omissions in the pull request.\n"}],"tags":[],"pull_requests":[]},{"author":"bmsherman","number":24,"state":"closed","open_date":"2016-03-01T22:20:47Z","update_date":"2018-07-20T11:55:51Z","discussion":[{"author":"robbertkrebbers","date":"2016-03-03T11:13:19Z","comment":"merged, thank you.\n"}],"tags":[],"pull_requests":[]},{"author":"clarus","number":22,"state":"closed","open_date":"2015-11-26T17:13:21Z","update_date":"2018-07-20T11:55:51Z","discussion":[{"author":"clarus","date":"2015-12-05T11:23:16Z","comment":"ping\n"}],"tags":[],"pull_requests":[]},{"author":"sumahadevan","number":21,"state":"closed","open_date":"2015-06-08T15:06:06Z","update_date":"2018-07-20T11:55:51Z","discussion":[{"author":"robbertkrebbers","date":"2016-02-25T17:01:33Z","comment":"> a comprehensive fix similar to MathClasses fix of Jason Gross (https://gist.github.com/JasonGross/14decf638535a2447286) may be best.\n\nThat would indeed be better. If you could use Jason's script to generate such a fix, I would happily accept a pull request for it. I do not have time to do it myself right now.\n\n> Windows requires one additional but separate fix for reals/faster/ARAlternatingSum.v (reduce parameter 50000 to 5000 for vm_compute); not a part of this commit but can provide it.\n\nThat number is arbitrary, and way too large, so I would happily accept a pull request to reduce it.\n\n> Issue is the second native Compute line which should either be commented or also changed to vm_compute like first one (works fine after commenting this line).\n\nDito, if you make a pull request, I will accept it.\n"},{"author":"bmsherman","date":"2016-02-27T14:40:53Z","comment":"@robbertkrebbers, I will work on creating a pull request that makes each of these changes!\n"}],"tags":[],"pull_requests":[]},{"author":"spitters","number":20,"state":"closed","open_date":"2015-05-29T10:56:59Z","update_date":"2018-07-20T11:55:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"aa755","number":17,"state":"closed","open_date":"2015-01-16T23:49:52Z","update_date":"2018-07-20T11:55:51Z","discussion":[{"author":"spitters","date":"2015-03-14T18:16:10Z","comment":"@aa755 Great, thanks! Please address the suggestions and I will make merge.\n"}],"tags":[],"pull_requests":[]},{"author":"aa755","number":15,"state":"closed","open_date":"2015-01-11T05:30:35Z","update_date":"2018-07-20T11:55:51Z","discussion":[{"author":"spitters","date":"2015-03-14T18:19:34Z","comment":"@aa755 These are important additions. However, in math-classes, we are trying to move away from `CRing` and use the standard `Ring`. This generally works, so I suggest you use that route too.\n"}],"tags":[],"pull_requests":[]},{"author":"aa755","number":14,"state":"closed","open_date":"2015-01-09T20:32:23Z","update_date":"2018-07-20T11:55:51Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"aa755","number":13,"state":"closed","open_date":"2014-12-30T00:12:45Z","update_date":"2018-07-20T11:55:51Z","discussion":[{"author":"robbertkrebbers","date":"2014-12-30T00:42:20Z","comment":"Cannot we prove the former Weak_IVT as a corollary of your new Weak_IVTQ? Or are you indirectly using the old result somehow?\n"},{"author":"aa755","date":"2014-12-30T00:45:10Z","comment":"I am using Weak_IVT in my proof of Weak_IVTQ : \nhttps://github.com/aa755/ssrcorn/commit/efb6acd9cd20afad4d3bdb0b958cc972fcbc2a52#diff-0dd69c5cbb189ab832c7358fd3337ba5R158\n"}],"tags":[],"pull_requests":[]},{"author":"aa755","number":7,"state":"closed","open_date":"2014-09-30T11:50:11Z","update_date":"2018-07-20T11:55:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"clarus","number":5,"state":"closed","open_date":"2014-09-25T16:56:02Z","update_date":"2018-07-20T11:55:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"spitters","number":4,"state":"closed","open_date":"2014-09-18T16:31:22Z","update_date":"2018-07-20T11:55:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"spitters","number":3,"state":"closed","open_date":"2014-09-02T18:14:00Z","update_date":"2018-07-20T11:55:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"spitters","number":2,"state":"closed","open_date":"2014-08-26T10:41:00Z","update_date":"2018-07-20T11:55:50Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"wires","number":1,"state":"closed","open_date":"2012-02-03T14:49:36Z","update_date":"2018-07-20T11:55:50Z","discussion":[],"tags":[],"pull_requests":[]}]