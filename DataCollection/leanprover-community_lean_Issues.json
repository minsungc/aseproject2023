[{"author":"vleni","number":803,"state":"open","open_date":"2023-03-15T23:45:36Z","update_date":"2023-03-16T08:21:07Z","discussion":[{"author":"vleni","date":"2023-03-16T08:21:06Z","comment":"A solution I have for now is to calculate the list l while the env exists:\r\n```lean\r\nmeta def main : io unit := do {\r\n\t\tl <- io.run_tactic $ do {\r\n\t\t\te <- tactic.get_env,\r\n\t\t\treturn (environment.decl_map e (fun d, \"a\"))\r\n\t\t},\r\n\t\tlet big := string.intercalate \",\" l in\r\n\t\tio.print_ln big\r\n\t}\r\n```\r\nMaybe this is an issue related to GC?"}],"tags":[],"pull_requests":[]},{"author":"ddrone","number":802,"state":"open","open_date":"2023-02-25T12:26:58Z","update_date":"2023-02-25T12:27:38Z","discussion":[{"author":"ddrone","date":"2023-02-25T12:27:38Z","comment":"By the way, if someone can provide me pointers about the relevant code I'm happy to try to contribute a fix myself."}],"tags":[],"pull_requests":[]},{"author":"legrosbuffle","number":801,"state":"closed","open_date":"2023-01-17T15:55:14Z","update_date":"2023-01-20T02:10:47Z","discussion":[{"author":"bryangingechen","date":"2023-01-18T18:26:37Z","comment":"> @gebner do you have any idea why the CI isn't running and I don't have an option to enable it?\r\n\r\nI guess it's because the PR was made from a fork rather than from a branch. We can run it manually with bors:\r\n\r\nbors try"},{"author":"bryangingechen","date":"2023-01-18T18:28:24Z","comment":"Er, we should be able to but it's also not working for some reason...\r\n\r\n**edit**: ah, bors was just delayed for some reason."},{"author":"gebner","date":"2023-01-18T18:31:21Z","comment":"> do you have any idea why the CI isn't running and I don't have an option to enable it?\r\n\r\nI can't enable it either.  As Bryan said, it's probably because the PR is from a fork, and Clement didn't enable actions there."},{"author":"bors[bot]","date":"2023-01-18T19:03:41Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766154355)\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766153431)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766153645)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766154211)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766153815)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766154527)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766154054)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3951821419/jobs/6766153234)"},{"author":"gebner","date":"2023-01-18T19:10:23Z","comment":"bors r+"},{"author":"legrosbuffle","date":"2023-01-19T06:49:35Z","comment":"> and Clement didn't enable actions there\r\n\r\nSorry about that, I don't know the process there. Is there anything I need to do now ? It looks like you got the CI working ?"},{"author":"gebner","date":"2023-01-20T01:24:53Z","comment":"> Is there anything I need to do now ?\r\n\r\nNo, you don't need to do anything."},{"author":"gebner","date":"2023-01-20T01:24:59Z","comment":"bors r+\r\n"},{"author":"bors[bot]","date":"2023-01-20T02:10:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223227)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223450)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792224157)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223554)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223394)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223299)\n  * Build sanitized\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3963888005/jobs/6792223502)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":800,"state":"closed","open_date":"2022-12-26T18:56:45Z","update_date":"2022-12-26T20:37:57Z","discussion":[{"author":"gebner","date":"2022-12-26T20:08:18Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-26T20:37:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646438)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646356)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3783248651/jobs/6431643869)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646713)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3783248651/jobs/6431643715)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646523)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3783250159/jobs/6431646269)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3783248651/jobs/6431643924)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":799,"state":"closed","open_date":"2022-12-25T20:01:11Z","update_date":"2022-12-26T18:56:33Z","discussion":[{"author":"digama0","date":"2022-12-25T20:41:53Z","comment":"This is just getting rid of the subexpression entirely? I'm okay with this if we're just trying to fix the broken build, but this export strategy is plainly unusable if we actually care about reconstructing the value."},{"author":"gebner","date":"2022-12-25T21:05:28Z","comment":"I've put the subexpression back in."},{"author":"gebner","date":"2022-12-25T22:30:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-25T23:10:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421717230)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716791)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716927)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716880)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421717188)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716982)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421716838)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3777734494/jobs/6421717260)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":798,"state":"closed","open_date":"2022-12-23T22:22:34Z","update_date":"2022-12-23T22:56:32Z","discussion":[{"author":"gebner","date":"2022-12-23T22:22:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-23T22:56:29Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3768551978/jobs/6407075102)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3768551978/jobs/6407075011)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3768551978/jobs/6407074846)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3768550210/jobs/6407071596)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3768550210/jobs/6407071925)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3768550210/jobs/6407071864)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3768550210/jobs/6407072049)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3768551978/jobs/6407075236)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":797,"state":"closed","open_date":"2022-12-23T21:04:36Z","update_date":"2022-12-23T21:38:10Z","discussion":[{"author":"gebner","date":"2022-12-23T21:04:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-23T21:38:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406490999)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491080)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406490876)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406490789)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491269)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491183)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491384)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3768229613/jobs/6406491480)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":796,"state":"closed","open_date":"2022-12-23T19:37:35Z","update_date":"2022-12-23T20:55:30Z","discussion":[{"author":"gebner","date":"2022-12-23T19:38:31Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-23T19:49:07Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3767867555/jobs/6405808538)"},{"author":"gebner","date":"2022-12-23T20:17:32Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-23T20:55:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131603)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131552)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131498)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131437)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131373)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131296)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131651)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3768034074/jobs/6406131790)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":795,"state":"closed","open_date":"2022-12-21T18:51:50Z","update_date":"2022-12-21T19:22:35Z","discussion":[{"author":"gebner","date":"2022-12-21T18:52:02Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-21T19:22:30Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3752015528/jobs/6373690097)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3752013892/jobs/6373686320)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3752013892/jobs/6373686776)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3752013892/jobs/6373686681)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3752015528/jobs/6373690348)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3752015528/jobs/6373690249)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3752015528/jobs/6373690492)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3752013892/jobs/6373686859)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":794,"state":"closed","open_date":"2022-12-15T01:58:09Z","update_date":"2022-12-15T16:40:20Z","discussion":[{"author":"gebner","date":"2022-12-15T01:58:28Z","comment":"As confirmed by Mario: https://github.com/leanprover-community/mathlib/pull/17951#issuecomment-1352445212\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-12-15T07:59:23Z","comment":"Timed out."},{"author":"gebner","date":"2022-12-15T15:51:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-15T16:40:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033581)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033176)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280034259)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280034113)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033942)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033765)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280033401)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3705737927/jobs/6280034444)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":793,"state":"closed","open_date":"2022-12-15T00:38:11Z","update_date":"2022-12-15T01:13:22Z","discussion":[{"author":"gebner","date":"2022-12-15T00:38:17Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-15T01:13:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267921934)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267922043)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267922225)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267922142)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3699971502/jobs/6267918321)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267921774)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3699971502/jobs/6267918576)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3699972671/jobs/6267922307)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":792,"state":"closed","open_date":"2022-12-07T19:45:00Z","update_date":"2022-12-07T20:24:30Z","discussion":[{"author":"gebner","date":"2022-12-07T19:45:26Z","comment":"It appears that this fixes #791."},{"author":"gebner","date":"2022-12-07T19:45:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-07T20:24:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149194039)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149193558)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149194378)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149194298)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149193932)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149193789)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149193692)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3642278404/jobs/6149194163)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":791,"state":"closed","open_date":"2022-12-07T00:10:30Z","update_date":"2022-12-08T02:07:41Z","discussion":[{"author":"digama0","date":"2022-12-07T00:19:16Z","comment":"@gebner Help! Do you have any ideas what could cause these segfaults?"},{"author":"gebner","date":"2022-12-07T18:27:53Z","comment":"Oh no, this week is not going well...."},{"author":"gebner","date":"2022-12-07T19:16:38Z","comment":"Oof, I've got a stacktrace:\r\n```\r\n#1  0x0000000000c9d4bd in std::condition_variable::notify_all() ()\r\n#2  0x00000000008fdd67 in lean::shared_mutex::unlock (this=0x13c5390) at /home/runner/work/lean/lean/src/util/shared_mutex.cpp:66\r\n#3  0x0000000000497da5 in lean::exclusive_lock::~exclusive_lock (this=0x7fff760d0f18, __in_chrg=<optimized out>)\r\n    at /home/runner/work/lean/lean/src/util/shared_mutex.h:76\r\n#4  0x0000000000497c45 in lean::register_option (n='verbose', k=lean::BoolOption, default_value=0xe36e48 \"true\",\r\n    description=0xe36e28 \"disable/enable verbose messages\") at /home/runner/work/lean/lean/src/util/sexpr/option_declarations.cpp:79\r\n#5  0x000000000049493c in lean::initialize_options () at /home/runner/work/lean/lean/src/util/sexpr/options.cpp:27\r\n#6  0x000000000090d60f in lean::initialize_sexpr_module () at /home/runner/work/lean/lean/src/util/sexpr/init_module.cpp:15\r\n#7  0x00000000008fc60e in lean::initialize () at /home/runner/work/lean/lean/src/init/init.cpp:29\r\n#8  0x00000000008fc6d1 in lean::initializer::initializer (this=0x7fff760d1050) at /home/runner/work/lean/lean/src/init/init.cpp:86\r\n#9  0x000000000040cb0d in initializer::initializer (this=0x7fff760d1050) at /home/runner/work/lean/lean/src/shell/lean.cpp:315\r\n#10 0x00000000004058f7 in main (argc=2, argv=0x7fff760d26a8) at /home/runner/work/lean/lean/src/shell/lean.cpp:437\r\n```"},{"author":"gebner","date":"2022-12-07T20:28:28Z","comment":"There is a workaround on master now."}],"tags":[],"pull_requests":[]},{"author":"digama0","number":790,"state":"closed","open_date":"2022-12-06T22:47:09Z","update_date":"2022-12-14T23:19:43Z","discussion":[{"author":"digama0","date":"2022-12-08T02:15:09Z","comment":"`tlean`s are a line-oriented format, and the attribute data export function is called in a context where it is in the middle of a line because the line starts with `#ATTR` and the attribute data is supposed to go at the end. So if you call the functions like `export_expr` on the tlean_exporter directly the line will be garbled if it needs to output any new expr nodes, since expr nodes have to go on their own line.\r\n\r\nThe fix here is to have the attribute data get passed two streams: one of them is in the `tlean_exporter` and used for additional nodes (like `export_expr`), and the ostringstream is used to buffer additional information to be placed in the `#ATTR` line (no newlines are allowed here)."},{"author":"gebner","date":"2022-12-14T22:40:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-12-14T23:19:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266592707)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266592909)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266593270)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266593168)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266593072)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266592995)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266592822)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3699339003/jobs/6266593356)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":789,"state":"open","open_date":"2022-12-02T02:10:43Z","update_date":"2022-12-02T02:10:43Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"digama0","number":788,"state":"closed","open_date":"2022-12-01T06:22:03Z","update_date":"2022-12-15T01:23:59Z","discussion":[{"author":"gebner","date":"2022-12-01T06:44:07Z","comment":"I'm not sure I can reproduce this.  The following file produces the same order of universe parameters in both Lean 3 and Lean 4:\r\n```lean\r\nuniverse a universe z\r\ndef foo (α : Type a) (β : Type _) (γ : Type z) := α × β × γ\r\nset_option pp.universes true\r\n#print foo\r\n```\r\n\r\n```\r\n$ lean +leanprover-community/lean:3.49.1 788.lean\r\ndef {a z u_1} foo : Type a → Type u_1 → Type z → Type (max a u_1 z) :=\r\nλ (α : Type a) (β : Type u_1) (γ : Type z), α × β × γ\r\n$ lean +leanprover/lean4:nightly-2022-11-30 788.lean\r\ndef foo.{a, z, u_1} : Type a → Type u_1 → Type z → Type (max a z u_1) :=\r\nfun α β γ => Prod.{a, max z u_1} α (Prod.{u_1, z} β γ)\r\n```\r\n\r\nAlso do we really want this order (and not change Lean 4)?  Also please add a test."},{"author":"digama0","date":"2022-12-01T08:30:12Z","comment":"You are right, this isn't the issue. The mystery `_aux_param_0` is actually in the definition of `List.traverse._main`:\r\n```lean\r\nnamespace list\r\nuniverses u v\r\n\r\nprotected def traverse {F : Type u → Type v} [applicative F] {α β : Type*} (f : α → F β) :\r\n  list α → F (list β)\r\n| [] := pure []\r\n| (x :: xs) := list.cons <$> f x <*> traverse xs\r\n\r\nset_option pp.universes true\r\n#print list.traverse._main\r\n\r\nend list\r\n```\r\n```lean\r\ndef {_aux_param_0 u v} list.traverse._main : Π {F : Type u → Type v} [_inst_1 : applicative.{u v} F] {α : Type _aux_param_0} {β : Type u},\r\n  (α → F β) → list.{_aux_param_0} α → F (list.{u} β) := ...\r\n```\r\nI think cause is actually this line:\r\n\r\nhttps://github.com/leanprover-community/lean/blob/44be9cdbfdce562df6c93ebe2e045738bc0a2ad2/src/library/aux_definition.cpp#L111\r\nwhich sorts the newly generated universe parameters alphabetically, after introducing fresh variables using the `_aux_param_i` naming convention which of course will put them first. I think we should just remove the sort and let them be ordered by appearance in the term."},{"author":"gebner","date":"2022-12-14T22:43:59Z","comment":"Let's just try this out.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-12-15T00:03:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049190)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049276)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049110)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049030)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049433)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049350)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267048916)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3699559322/jobs/6267049507)"},{"author":"gebner","date":"2022-12-15T01:23:59Z","comment":"Apparently this also broke Lean 4 compatibility in the example I posted:\r\n```lean\r\nuniverse a universe z\r\ndef foo (α : Type a) (β : Type _) (γ : Type z) := α × β × γ\r\nset_option pp.universes true\r\n#print foo\r\n```\r\nNow prints `u_1 a z` instead of `a z u_1`.  I think we should just revert this PR."}],"tags":[],"pull_requests":[]},{"author":"digama0","number":787,"state":"closed","open_date":"2022-11-22T19:27:56Z","update_date":"2022-11-22T20:44:24Z","discussion":[{"author":"gebner","date":"2022-11-22T20:05:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-22T20:44:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942699)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942270)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942941)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942813)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942559)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914942443)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914943106)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3526705414/jobs/5914943221)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":786,"state":"closed","open_date":"2022-11-18T16:59:02Z","update_date":"2022-11-18T17:39:12Z","discussion":[{"author":"gebner","date":"2022-11-18T17:01:46Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-11-18T17:39:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3498778315/jobs/5859571408)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3498778315/jobs/5859570693)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3498778315/jobs/5859571755)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3498775413/jobs/5859565096)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3498775413/jobs/5859564918)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3498778315/jobs/5859571072)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3498775413/jobs/5859564620)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3498775413/jobs/5859565398)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":785,"state":"open","open_date":"2022-11-18T10:50:16Z","update_date":"2022-11-18T12:33:29Z","discussion":[{"author":"eric-wieser","date":"2022-11-18T12:00:03Z","comment":"CI seems unhappy with this test:\r\n\r\nhttps://github.com/leanprover-community/lean/blob/cb0da9f301ab2b85d8d96847c41b92d973a7b151/tests/lean/interactive/info.lean#L15-L16\r\n\r\nwhich no longer produces\r\n\r\nhttps://github.com/leanprover-community/lean/blob/cb0da9f301ab2b85d8d96847c41b92d973a7b151/tests/lean/interactive/info.lean.expected.out#L8\r\n\r\n"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":784,"state":"closed","open_date":"2022-11-18T05:56:39Z","update_date":"2022-11-18T07:04:21Z","discussion":[{"author":"bors[bot]","date":"2022-11-18T06:13:41Z","comment":":v: digama0 can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"digama0","date":"2022-11-18T06:22:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-18T07:04:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695173)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695272)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850694999)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850694904)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695441)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695362)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695086)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3494689328/jobs/5850695521)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":783,"state":"closed","open_date":"2022-11-17T00:09:42Z","update_date":"2022-11-17T01:23:42Z","discussion":[{"author":"gebner","date":"2022-11-17T00:45:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-17T01:23:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839983)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839889)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828840249)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828840160)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839690)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839598)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828839802)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3484364673/jobs/5828840067)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":782,"state":"closed","open_date":"2022-11-16T22:26:22Z","update_date":"2022-11-17T00:04:00Z","discussion":[{"author":"gebner","date":"2022-11-16T23:31:14Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-17T00:03:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828053825)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828053945)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054619)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054525)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054310)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054230)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054119)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3483985782/jobs/5828054422)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":781,"state":"closed","open_date":"2022-11-14T00:01:26Z","update_date":"2022-11-15T05:54:09Z","discussion":[{"author":"gebner","date":"2022-11-15T05:11:01Z","comment":"I don't see how this could've worked before.  :+1: for adding the test now.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-11-15T05:53:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712449)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712551)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792713078)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712982)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712864)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712778)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792712660)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3467647042/jobs/5792713186)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":780,"state":"closed","open_date":"2022-11-11T19:02:42Z","update_date":"2022-11-11T20:17:19Z","discussion":[{"author":"gebner","date":"2022-11-11T19:04:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-11-11T20:17:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663198)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663093)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753662968)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753662847)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663376)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663301)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753662730)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3447546048/jobs/5753663468)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":779,"state":"closed","open_date":"2022-11-11T07:23:27Z","update_date":"2022-11-11T08:20:00Z","discussion":[{"author":"semorrison","date":"2022-11-11T07:24:26Z","comment":"Corresponding mathlib PR is https://github.com/leanprover-community/mathlib/pull/17470"},{"author":"gebner","date":"2022-11-11T07:32:58Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-11T08:19:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704169)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704255)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704623)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704539)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704436)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704334)\n  * Build sanitized\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3443302021/jobs/5744704838)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":778,"state":"closed","open_date":"2022-11-04T00:37:59Z","update_date":"2022-11-11T21:19:03Z","discussion":[{"author":"gebner","date":"2022-11-11T18:07:07Z","comment":"bors r+"},{"author":"gebner","date":"2022-11-11T18:07:53Z","comment":"Thanks!"},{"author":"bors[bot]","date":"2022-11-11T18:50:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674412)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674248)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752675095)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674998)\n  * Build macos Debug\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674740)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752674567)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3447061212/jobs/5752675195)"},{"author":"eric-wieser","date":"2022-11-11T19:36:27Z","comment":"Mind looking at the related https://github.com/leanprover-community/doc-gen/pull/173 too?"},{"author":"gebner","date":"2022-11-11T20:40:18Z","comment":"The doc-gen PR is also a 👍 from me, but we'll first need to bump mathlib to 3.49.  https://github.com/leanprover-community/mathlib/pull/17470"},{"author":"eric-wieser","date":"2022-11-11T21:19:02Z","comment":"The doc-gen PR doesn't need a lean bump"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"semorrison","number":777,"state":"closed","open_date":"2022-10-28T05:32:30Z","update_date":"2022-11-05T12:40:48Z","discussion":[{"author":"semorrison","date":"2022-10-28T05:38:16Z","comment":"The alternative, I guess would be to see if we can change the Lean 4 behaviour. \r\n\r\nThe required diff in mathlib is at https://github.com/leanprover-community/mathlib/compare/revert_530."},{"author":"gebner","date":"2022-11-01T21:10:41Z","comment":"The order was requested by Kevin: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/specialize.20h.20_.2C.20swap/near/225703117"},{"author":"semorrison","date":"2022-11-05T12:40:41Z","comment":"The Lean 4 behaviour was changed to match Lean 3 in https://github.com/leanprover/lean4/pull/1796."}],"tags":[],"pull_requests":[]},{"author":"alexjbest","number":776,"state":"open","open_date":"2022-10-26T12:52:30Z","update_date":"2022-10-26T12:55:47Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"digama0","number":775,"state":"closed","open_date":"2022-10-24T10:31:28Z","update_date":"2022-11-11T19:37:35Z","discussion":[{"author":"gebner","date":"2022-11-11T18:07:43Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-11-11T19:37:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142164)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142025)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142572)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142479)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142367)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142272)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753141935)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3447289015/jobs/5753142675)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":774,"state":"closed","open_date":"2022-10-19T03:15:39Z","update_date":"2022-10-19T05:04:35Z","discussion":[{"author":"gebner","date":"2022-10-19T04:26:23Z","comment":"We use `eq_true` four times in mathlib, including in category theory.  I'm fine with moving it to mathlib and renaming it to `eq_true_iff` or something.\r\n\r\nbors d+"},{"author":"bors[bot]","date":"2022-10-19T04:26:24Z","comment":":v: semorrison can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"semorrison","date":"2022-10-19T04:27:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-10-19T05:04:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602409)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602283)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602836)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602762)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602671)\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602586)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602492)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3278796980/jobs/5397602918)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":773,"state":"closed","open_date":"2022-10-03T17:11:51Z","update_date":"2022-10-03T18:14:31Z","discussion":[{"author":"gebner","date":"2022-10-03T17:33:15Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-10-03T18:14:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177120)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177585)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177839)\n  * [Build linux Release](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177737)\n  * Build macos Debug\n  * [Build macos Release](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177271)\n  * [Build sanitized](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175176942)\n  * [Build windows Release](https://github.com/leanprover-community/lean/actions/runs/3176182024/jobs/5175177962)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"fpvandoorn","number":772,"state":"open","open_date":"2022-09-26T13:29:17Z","update_date":"2022-09-26T13:29:17Z","discussion":[],"tags":[{"tag":"bug","description":"Something isn't working"}],"pull_requests":[]},{"author":"YaelDillies","number":771,"state":"open","open_date":"2022-09-19T18:34:02Z","update_date":"2022-09-19T18:37:37Z","discussion":[{"author":"gebner","date":"2022-09-19T18:37:37Z","comment":"Pending discussion on Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/append.20and.20concat/near/299602232"}],"tags":[],"pull_requests":[]},{"author":"kmill","number":770,"state":"open","open_date":"2022-09-19T18:09:38Z","update_date":"2022-11-16T10:09:10Z","discussion":[{"author":"kmill","date":"2022-09-19T18:17:23Z","comment":"I had wondered about this behavior of the pretty printer before, and [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Forall.20vs.2E.20if-then/near/299317772) led me to check how hard it would be to make the change. If it's unwanted, that's fine.\r\n\r\nOne one hand, it's an improvement because you can tell immediately whether a pi type with a binding domain in Type is a Prop since it will always show forall notation. On the other you can't immediately tell whether a forall is dependent or not. I think it's still on the balance an improvement that helps align Lean with common practice mathematics at little cost."},{"author":"eric-wieser","date":"2022-09-22T21:43:00Z","comment":"To an experienced user, I'd argue being able to spot a non-dependent binder at a glance is more valuable than matching pen and paper mathematics, but I understand the pedagogical appeal.\r\n\r\nDo you think using underscores for the variable names in non-dependent binders is a good idea? I think that would remove the downside regarding dependent types."},{"author":"kmill","date":"2022-09-23T04:53:36Z","comment":"> Do you think using underscores for the variable names in non-dependent binders is a good idea? I think that would remove the downside regarding dependent types.\r\n\r\nI like this idea @eric-wieser. I added a mild hack to get this to work -- anonymous names can't round-trip anyway, so I made the binder pp routine print anonymous names as `_` rather than `[anonymous]`. That way the `pp_pi` function can set the `pp_name` of a local associated to a non-dependent pi to `name()` to get it to show up as `_`. This was the simplest way to get this feature to work that I could think of.\r\n\r\nI generalized this to also apply to non-dependent pi types with non-explicit binders. For example, `Π {n : ℕ}, ℤ` pretty prints as `Π {_ : ℕ}, ℤ`."},{"author":"kmill","date":"2022-09-27T14:00:25Z","comment":"[(Zulip PR Reviews thread)](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23770/near/300819312)"},{"author":"eric-wieser","date":"2022-11-15T09:23:11Z","comment":"I created some conflicts in my other PR; some tests might need fixing yet."},{"author":"kmill","date":"2022-11-15T09:26:15Z","comment":"@eric-wieser I just noticed your other PRs and was in the process of getting my dev environment set up for lean to merge and test (I'm at Orsay for the year, by the way).\r\n\r\n**Edit:** Your merge looks good to me, thanks! The tests all pass locally too."}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"venom12138","number":769,"state":"closed","open_date":"2022-09-11T15:05:07Z","update_date":"2022-09-11T19:19:58Z","discussion":[{"author":"PatrickMassot","date":"2022-09-11T19:19:58Z","comment":"Thanks for your interest in Lean. This issue list is not the right place to ask user questions. This is a general principle with GitHub.\r\n\r\nIn this specific case, you should come to https://leanprover.zulipchat.com/ to discuss this. There you will learn about https://leanprover-community.github.io/ in general and https://leanprover-community.github.io/mathlib_docs/ in particular (assuming that you mean Lean 3 since you wrote your message here)."}],"tags":[],"pull_requests":[]},{"author":"yurivict","number":768,"state":"closed","open_date":"2022-09-06T07:07:21Z","update_date":"2022-09-24T11:53:07Z","discussion":[{"author":"fpvandoorn","date":"2022-09-06T07:23:51Z","comment":"You're looking for https://github.com/leanprover/lean4.\r\nThis is the version of Lean that supports the mathematical library. The [mathematical library of Lean](https://github.com/leanprover-community/mathlib) has not been ported to Lean 4 yet, although we are making a lot of progress in the porting process."},{"author":"yurivict","date":"2022-09-06T16:08:55Z","comment":"When is Lean 4 expected to become fully functional and replace Lean 3?\r\n"},{"author":"jcommelin","date":"2022-09-13T08:45:25Z","comment":"As a programming language, it already is. But if you are interested in formalization of mathematics, then it makes sense to wait till mathlib has been ported to Lean 4. This will probably happen in the next few months."}],"tags":[],"pull_requests":[]},{"author":"yurivict","number":767,"state":"open","open_date":"2022-09-05T16:59:52Z","update_date":"2022-09-05T16:59:52Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":766,"state":"closed","open_date":"2022-09-04T12:34:45Z","update_date":"2022-09-05T11:50:10Z","discussion":[{"author":"gebner","date":"2022-09-05T11:13:19Z","comment":"Thanks!\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-09-05T11:50:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8187290459?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8187290639?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8187291391?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8187291303?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8187291182?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8187291089?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8187290931?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8187291509?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"yurivict","number":765,"state":"open","open_date":"2022-09-01T04:38:01Z","update_date":"2022-09-05T17:26:22Z","discussion":[{"author":"gebner","date":"2022-09-02T16:56:51Z","comment":"I can't reproduce this issue.  The live version on the website takes a couple of seconds to load (no matter the file), but after that your example is instantaneous."},{"author":"yurivict","date":"2022-09-02T17:09:22Z","comment":"Is C++ compiled version instantaneous for you on simple scripts?\r\nThen I need to profile it.\r\n"},{"author":"gebner","date":"2022-09-02T17:54:04Z","comment":"It takes around 350ms."},{"author":"yurivict","date":"2022-09-02T20:19:39Z","comment":"Simple program takes ~22 sec on FreeBSD:\r\n```\r\n$ time lean simple.lean \r\nm : ℕ\r\n\r\nreal\t0m22.868s\r\nuser\t0m51.723s\r\nsys\t0m0.505s\r\n```"},{"author":"yurivict","date":"2022-09-03T15:13:09Z","comment":"I got this profile:\r\n![image](https://user-images.githubusercontent.com/271906/188276756-5012a7aa-eb7f-4291-9528-c9a3a6aa30cf.png)\r\n\r\nSome functions are called 1.5+ billion times, and many functions are called over 500 million times.\r\nI don't think you even have so many objects of any kind. Some of the algorithms are obviously inefficient.\r\n\r\nC++ library is different on FreeBSD, this might have causes the compiler to interpret some code differently.\r\n"},{"author":"yurivict","date":"2022-09-03T15:14:36Z","comment":"I am pretty sure that there is a C++ problem in the code. Maybe some shared_ptr is copied often when this isn't needed - passing by address usually suffices."},{"author":"gebner","date":"2022-09-05T14:06:04Z","comment":"I think all you need to do is:\r\n```\r\ncd lean/library\r\nlean --make\r\n```"},{"author":"yurivict","date":"2022-09-05T17:26:22Z","comment":"This solved the problem.\r\n\r\nBut why isn't this done in the course of normal build?\r\nThere is the code for this in CMakeLists.txt, but it isn't run for some reason.\r\n"}],"tags":[],"pull_requests":[]},{"author":"yurivict","number":764,"state":"open","open_date":"2022-09-01T02:17:40Z","update_date":"2022-09-02T16:58:51Z","discussion":[{"author":"gebner","date":"2022-09-02T16:58:51Z","comment":"Please title the PR `fix(util/memory): support freebsd`\r\n\r\nOtherwise LGTM."}],"tags":[],"pull_requests":[]},{"author":"yurivict","number":763,"state":"open","open_date":"2022-08-31T23:49:08Z","update_date":"2022-08-31T23:50:00Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":762,"state":"closed","open_date":"2022-08-30T09:53:15Z","update_date":"2022-08-30T11:50:51Z","discussion":[{"author":"gebner","date":"2022-08-30T11:07:09Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-30T11:50:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8090547928?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8090654970?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8090655845?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8090655622?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8090547592?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8090547460?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8090655415?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8090656088?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":761,"state":"closed","open_date":"2022-08-29T12:25:14Z","update_date":"2022-08-30T10:28:36Z","discussion":[{"author":"gebner","date":"2022-08-30T09:51:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-30T10:28:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8089242686?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8089243433?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8089243771?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8089243622?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8089243212?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8089243088?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8089242906?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8089243936?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":760,"state":"closed","open_date":"2022-08-25T18:36:05Z","update_date":"2022-08-25T19:18:24Z","discussion":[{"author":"gebner","date":"2022-08-25T18:36:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-25T19:18:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8022944795?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8022940137?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8022940859?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8022945606?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8022940580?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8022945083?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8022940331?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8022945907?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":759,"state":"closed","open_date":"2022-08-24T21:21:21Z","update_date":"2022-08-25T17:48:17Z","discussion":[{"author":"gebner","date":"2022-08-25T16:24:58Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-25T17:48:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8021373328?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8021372704?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8021373147?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8021373042?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8021373601?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8021373465?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8021372881?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8021373793?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":758,"state":"closed","open_date":"2022-08-24T06:23:49Z","update_date":"2022-08-24T19:06:18Z","discussion":[{"author":"gebner","date":"2022-08-24T11:55:17Z","comment":"Is there a way to deduplicate the `open_locale` commands?  In Lean 4, duplicate notations result in ambiguous syntax errors, so it's not a bad idea to flag this in Lean 3:\r\n```lean\r\nlocal notation \"foo\" => Nat\r\nlocal notation \"foo\" => Nat\r\n\r\n#check foo\r\n/-\r\nambiguous, possible interpretations \r\n  foo : Type\r\n  \r\n  foo : Type\r\n-/\r\n```"},{"author":"digama0","date":"2022-08-24T16:54:26Z","comment":"It's not really a problem for synport, because we aren't still using the old `open_locale` implementation and are just using `open` instead, which handles scoped notations correctly. In lean 3, there are also no issues because when you add the exact same notation twice, the first one is *overridden* by the second. Notice that this works:\r\n```lean\r\nnotation (name := a) `foo`:20 := nat\r\nnotation (name := b) `foo`:20 := nat\r\n#check foo -- ok\r\nnotation (name := c) `foo`:20 := int\r\n#check foo -- ambiguous\r\n```\r\nSo the only case to worry about is if the user actually writes the same `notation` line twice in the file and synport translates it to an ambiguous pair, and I don't think people actually do this in practice enough for it to be a concern."},{"author":"gebner","date":"2022-08-24T18:26:23Z","comment":"> I don't think people actually do this in practice enough for it to be a concern.\r\n\r\nThat was what I was thinking about but it's indeed a rare case.  Let's ship it.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-08-24T19:06:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8001667961?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8001668401?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8001669085?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8001668656?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8001667747?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8001667590?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8001668190?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8001669254?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-author","description":""}],"pull_requests":[]},{"author":"kmill","number":757,"state":"closed","open_date":"2022-08-23T23:18:13Z","update_date":"2022-08-25T17:03:06Z","discussion":[{"author":"gebner","date":"2022-08-25T16:23:36Z","comment":"I think it would be better to match the Lean 4 behavior eventually (either by changing Lean 3 or Lean 4).\r\n\r\nBut we can do this in steps.  Let's get the partial version in first, which is easy to port mathlib to.  We can then do the more complicated change later.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-08-25T17:03:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/8020683931?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/8020683767?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/8020684399?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/8020684242?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/8020683592?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/8020683467?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/8020683273?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/8020684086?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-author","description":""}],"pull_requests":[]},{"author":"digama0","number":756,"state":"closed","open_date":"2022-08-18T19:21:37Z","update_date":"2022-08-24T12:48:25Z","discussion":[{"author":"gebner","date":"2022-08-24T11:59:15Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-08-24T12:48:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7994188172?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7994188617?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7994188867?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7994188762?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7994188452?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7994188332?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7994188024?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7994189079?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":755,"state":"closed","open_date":"2022-08-17T16:18:39Z","update_date":"2022-08-17T19:15:14Z","discussion":[{"author":"gebner","date":"2022-08-17T16:24:12Z","comment":"I guess we can also remove the `[decidable q]` argument now."},{"author":"eric-wieser","date":"2022-08-17T18:31:11Z","comment":"Good point, done"},{"author":"gebner","date":"2022-08-17T18:37:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-08-17T19:15:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7885390066?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7885389471?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7885390656?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7885390554?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7885390385?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7885390292?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7885389789?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7885390809?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"digama0","number":754,"state":"closed","open_date":"2022-08-16T20:51:42Z","update_date":"2022-08-24T19:17:28Z","discussion":[{"author":"gebner","date":"2022-08-17T14:51:31Z","comment":"I guess this doesn't do anything if you import two notations with conflicting names, but it's good enough for the port.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-08-17T15:29:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7881437475?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7881436428?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7881437915?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7881437740?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7881437219?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7881436844?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7881436623?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7881438140?check_suite_focus=true)"},{"author":"digama0","date":"2022-08-17T22:43:01Z","comment":"> I guess this doesn't do anything if you import two notations with conflicting names, but it's good enough for the port.\r\n\r\nNot sure what you mean: it gives an error if it ever has overlapping names in a scope. If you have two conflicting notations in separate imports, it should be an import error, although I didn't test that. As long as the env extension is constructed by calling `add` on each thing in the new file it should hit the error."},{"author":"gebner","date":"2022-08-18T08:23:51Z","comment":"Ah, my bad.  You're right of course.  I only saw the `check_notation_name` function at first, which is called from the parser but not during imports.  But then there's also a second check in `notation_config::add_entry` that I overlooked."},{"author":"kmill","date":"2022-08-23T23:45:56Z","comment":"Does anyone have a mathlib branch that's been updated with this change? I haven't been able to figure out how to alter mathlib in some cases. For example, no matter what I do to the stream `cons` notation I get the following error:\r\n```\r\nsrc/data/stream/init.lean:7:0: error: invalid import: data.stream.defs\r\ninvalid notation, a notation named '«expr :: »' has already been declared\r\n```"},{"author":"digama0","date":"2022-08-24T01:51:39Z","comment":"The following seems to work (at `data/stream/defs.lean`):\r\n```\r\nnotation (name := stream.cons) h :: t := cons h t\r\n```\r\nFor updating mathlib generally, you should start a branch and we can work on it together, if you like.\r\n\r\nNote: I encountered issues here with outdated oleans causing the import error even after I fixed the issue. Make sure you clear oleans, and maybe there is an issue in the hashing algorithm that is preventing it from picking up on changes when the only thing that is changed is a notation name."},{"author":"kmill","date":"2022-08-24T15:46:02Z","comment":"> Note: I encountered issues here with outdated oleans causing the import error even after I fixed the issue.\r\n\r\nAh, that was it, thanks!"},{"author":"digama0","date":"2022-08-24T19:17:28Z","comment":"By the way, I have pushed the mathlib update work I have done so far to https://github.com/leanprover-community/mathlib/tree/notation_name ."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":753,"state":"closed","open_date":"2022-08-08T09:02:38Z","update_date":"2022-08-08T10:28:44Z","discussion":[{"author":"gebner","date":"2022-08-08T09:48:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-08-08T10:28:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7722926673?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7722926190?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7722941458?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7722941339?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7722940861?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7722926858?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7722940438?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7722941679?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":752,"state":"closed","open_date":"2022-08-07T18:00:38Z","update_date":"2022-08-08T08:01:25Z","discussion":[{"author":"gebner","date":"2022-08-08T07:21:37Z","comment":"> For reasons unknown, this doesn't just throw a stack overflow exception instead of segfaulting: it actually terminates correctly. Does `check_system` do some split stack shenanigans?\r\n\r\nNot that I know of, but there might be a `try { export_expr(); } catch (...) {}` somewhere.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-08-08T08:01:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7720638641?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7720638892?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7720639527?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7720639418?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7720639152?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7720639049?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7720639302?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7720639683?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":751,"state":"open","open_date":"2022-07-29T13:56:07Z","update_date":"2022-07-29T13:56:07Z","discussion":[],"tags":[{"tag":"bug","description":"Something isn't working"}],"pull_requests":[]},{"author":"collares","number":750,"state":"open","open_date":"2022-07-29T12:47:43Z","update_date":"2022-07-29T13:14:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"collares","number":749,"state":"open","open_date":"2022-07-29T12:41:06Z","update_date":"2022-07-29T13:10:28Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":748,"state":"open","open_date":"2022-07-29T12:12:33Z","update_date":"2022-07-29T13:21:59Z","discussion":[{"author":"eric-wieser","date":"2022-07-29T13:21:17Z","comment":"It would be a lot easier to debug this if I could get lean to pretty-print the value of `e` or `r` at this point: but the gdb pretty-printign only seems to work for me in VSCode with\r\n```gdb\r\n`python print(list(gdb.selected_frame().block())[2].value(gdb.selected_frame()))\r\n```\r\nand I can't wokr out how to get hold of a `formatter` object inside `translate_to` in order to use the lean `expr` printing."}],"tags":[],"pull_requests":[]},{"author":"vihdzp","number":747,"state":"closed","open_date":"2022-07-16T06:15:04Z","update_date":"2022-08-08T09:44:51Z","discussion":[{"author":"gebner","date":"2022-07-16T11:30:46Z","comment":"> I don't know what `is_per` means, so I skipped that one.\r\n\r\nThat obviously means P.E.R. and is short for partial equivalence relation.  That is, the relation is an equivalence relation on the subset `{ x | R x x }`."},{"author":"gebner","date":"2022-08-08T09:03:21Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-08-08T09:44:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7722195868?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7722196130?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7722196940?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7722196803?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7722196560?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7722196393?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7722195526?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7722197174?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"vihdzp","number":746,"state":"closed","open_date":"2022-07-15T04:47:37Z","update_date":"2022-07-15T08:59:27Z","discussion":[{"author":"gebner","date":"2022-07-15T08:24:10Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-07-15T08:59:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7354526714?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7354526912?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7354527728?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7354527634?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7354527290?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7354527167?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7354527457?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7354527920?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":745,"state":"closed","open_date":"2022-07-13T16:11:51Z","update_date":"2022-07-13T19:48:07Z","discussion":[{"author":"eric-wieser","date":"2022-07-13T16:26:53Z","comment":"This should wait for #743 to finish merging"},{"author":"gebner","date":"2022-07-13T19:14:58Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-07-13T19:48:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7327793630?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7327793106?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7327793853?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7327793764?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7327793389?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7327793285?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7327792933?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7327794011?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":744,"state":"closed","open_date":"2022-07-13T04:34:07Z","update_date":"2022-07-13T07:37:47Z","discussion":[{"author":"eric-wieser","date":"2022-07-13T06:36:50Z","comment":"This looks great!\r\n\r\n![image](https://user-images.githubusercontent.com/425260/178666974-c6ef37f9-6df3-4215-86c1-181a0475e7c5.png)\r\n"},{"author":"eric-wieser","date":"2022-07-13T06:36:58Z","comment":"bors merge"},{"author":"gebner","date":"2022-07-13T06:52:13Z","comment":"Ha, this was an easy fix!"},{"author":"bors[bot]","date":"2022-07-13T07:37:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7315656100?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7315656205?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7315656627?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7315656570?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7315656468?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7315656387?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7315656301?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7315656701?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":743,"state":"closed","open_date":"2022-07-12T17:05:08Z","update_date":"2022-07-13T16:35:00Z","discussion":[{"author":"gebner","date":"2022-07-13T16:00:07Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-07-13T16:34:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7324796992?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7324798534?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7324799221?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7324799032?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7324798115?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7324797952?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7324797404?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7324799689?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":742,"state":"closed","open_date":"2022-07-12T00:19:28Z","update_date":"2022-07-12T15:47:14Z","discussion":[{"author":"bors[bot]","date":"2022-07-12T12:34:25Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2022-07-12T15:05:08Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-07-12T15:47:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7304595776?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7304595284?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7304596845?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7304596677?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7304596337?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7304596203?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7304596024?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7304597152?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"eric-wieser","number":741,"state":"closed","open_date":"2022-07-11T15:31:23Z","update_date":"2022-07-11T22:42:36Z","discussion":[{"author":"eric-wieser","date":"2022-07-11T22:02:44Z","comment":"> Otherwise LGTM.\r\n\r\nI'm going to assume that's a \"bors d+\", since I added the suggested assertion; that should unblock #740\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-07-11T22:42:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7291551452?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7291551587?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7291552146?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7291551969?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7291551298?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7291551219?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7291551754?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7291552326?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"EdAyers","number":740,"state":"closed","open_date":"2022-07-11T08:31:54Z","update_date":"2022-07-15T10:04:00Z","discussion":[{"author":"eric-wieser","date":"2022-07-12T09:21:19Z","comment":"I have another branch based off #742 that fixes this, as well as fixing the encoding too."}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":739,"state":"closed","open_date":"2022-07-10T09:17:54Z","update_date":"2022-07-11T14:18:49Z","discussion":[{"author":"gebner","date":"2022-07-11T13:34:53Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-07-11T14:18:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7283329322?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7283329071?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7283329935?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7283329813?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7283328862?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7283328635?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7283329523?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7283330142?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"isadofschi","number":738,"state":"open","open_date":"2022-07-10T00:55:44Z","update_date":"2022-07-10T09:16:32Z","discussion":[{"author":"isadofschi","date":"2022-07-10T01:04:50Z","comment":"Could this be happening because the order in `bool × ℕ` is not a total ordering?\r\n\r\nEdit: yes, it seems that was the problem:\r\n\r\n```\r\nimport init.meta\r\nimport order.lexicographic\r\n\r\n#eval (((native.rb_map.of_list ([] : list ((bool ×ₗ ℕ) × ℕ ))).insert (tt,2) 3).insert (ff,4) 5).size\r\n```\r\n\r\nI don't know if we can require here that the ordering is a total order since `rb_map` is `meta`. For the \"non meta\" `rbmap` there seems to be a similar issue:\r\n\r\n```\r\nimport order.basic\r\n\r\n#eval (( (rbmap.from_list ([] : list ((bool×ℕ ) × ℕ))).insert (tt,2) 3).insert (ff,4) 5).to_list\r\n```\r\nIf this is expected behaviour we probably want to document a reminder somewhere in mathlib_docs.\r\n\r\n"},{"author":"fpvandoorn","date":"2022-07-10T09:16:32Z","comment":"Feel free to make a PR that adds docstrings/module docs explaining that the ordering needs to be total.\r\nWe can probably also change the definitions to require a [`linear_order`](https://leanprover-community.github.io/mathlib_docs/init/algebra/order.html#linear_order), since the definition is nonsensical otherwise (incomparable elements are treated as equal, which is generally not a transitive relationship), but I'm not sure if that will have unfortunate side effects."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":737,"state":"closed","open_date":"2022-06-27T10:10:54Z","update_date":"2022-06-27T10:41:15Z","discussion":[{"author":"gebner","date":"2022-06-27T10:11:14Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-27T10:41:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7070600423?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7070606513?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7070601198?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7070607129?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7070606843?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7070606744?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7070600850?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7070607342?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":736,"state":"closed","open_date":"2022-06-26T14:41:10Z","update_date":"2022-06-26T16:22:55Z","discussion":[{"author":"gebner","date":"2022-06-26T15:07:52Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-26T15:44:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7061605477?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7061605580?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7061605794?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7061605756?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7061605674?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7061605641?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7061605720?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7061605842?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"gebner","number":735,"state":"closed","open_date":"2022-06-24T12:45:07Z","update_date":"2022-06-24T13:21:35Z","discussion":[{"author":"gebner","date":"2022-06-24T12:49:48Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-24T13:21:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7041824538?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7041824668?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7041807512?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7041825061?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7041807015?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7041824897?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7041824779?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7041807233?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":734,"state":"closed","open_date":"2022-06-23T10:00:13Z","update_date":"2022-06-23T20:56:11Z","discussion":[{"author":"eric-wieser","date":"2022-06-23T17:00:56Z","comment":"> Did you actually run into any issues with the wrong instance or was it just cosmetics? From what I can tell, even if you get the wrong instance the expr should still be defeq to the expected one.\r\n\r\nThe expr is defeq, but I assume it won't pick up the right typeclass instances if you antiquote it into an expression because its inferred type is wrong."},{"author":"gebner","date":"2022-06-23T18:06:37Z","comment":"> I assume it won't pick up the right typeclass instances if you antiquote it into an expression because its inferred type is wrong.\r\n\r\nI still can't tell if you encountered an actual error.  Could you please post the antiquotation issue that is broken/wrong now, and will work after this PR?"},{"author":"eric-wieser","date":"2022-06-23T19:19:50Z","comment":"Sure, here's a mwe on mathlib master:\r\n```lean\r\nimport algebra.group.type_tags\r\nimport data.int.basic\r\n\r\nrun_cmd do\r\n  let x : multiplicative ℤ := multiplicative.of_add 3,\r\n  let p1 : pexpr := ``(%%`(x) * %%`(x)),\r\n  let p2 : pexpr := ``(%%`(x * x)),\r\n  e1 ← tactic.to_expr p1,\r\n  e2 ← tactic.to_expr p2,\r\n  x1 ← tactic.eval_expr (multiplicative ℤ) e1,\r\n  x2 ← tactic.eval_expr (multiplicative ℤ) e2,\r\n  tactic.trace (x1.to_add, x2.to_add)  -- (9, 6)\r\n```\r\nThe correct output should be `(6, 6)`, but without the change in this PR it's impossible to add the instance that makes that fix without running into a loop / having it fire on `ℤ` too"},{"author":"gebner","date":"2022-06-23T20:24:48Z","comment":"Okay, got it.  That one could probably also be fixed in the quotation code directly, without modifying `reflected`.\r\n\r\nBut there's also the cosmetic issue that `reflect` should pick `coe` instead of `some` etc. so it's probably a good idea to change `reflected` anyhow.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-06-23T20:56:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7031306456?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7031306325?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7031307126?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7031307037?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7031306918?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7031306804?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7031306650?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7031307295?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"nmtsy","number":733,"state":"closed","open_date":"2022-06-21T21:47:04Z","update_date":"2022-06-21T22:07:58Z","discussion":[{"author":"digama0","date":"2022-06-21T22:07:57Z","comment":"This is almost certainly a problem with assigned metavariables in the tactic state. `apply_fun` is the misbehaving tactic here by not calling `instantiate_mvars` on the type of the goal. Although most tactics try not to introduce assigned metavariables in the goal, it is infeasible (computationally expensive) to ask this in general. Since `apply_fun` is a mathlib tactic, I will close this issue and it can be addressed in mathlib instead."}],"tags":[],"pull_requests":[]},{"author":"digama0","number":732,"state":"closed","open_date":"2022-06-19T15:34:35Z","update_date":"2022-06-23T13:52:43Z","discussion":[{"author":"eric-wieser","date":"2022-06-23T13:17:41Z","comment":"bors merge\r\n\r\nSince this has plenty of :+1:s on Zulip, and the diff looks good"},{"author":"bors[bot]","date":"2022-06-23T13:52:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7024295221?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7024295695?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7024296658?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7024296489?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7024296205?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7024295996?check_suite_focus=true)\n  * Build sanitized\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7024296903?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":731,"state":"open","open_date":"2022-06-16T09:44:58Z","update_date":"2022-06-16T09:45:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":730,"state":"closed","open_date":"2022-06-14T20:21:35Z","update_date":"2022-06-15T10:44:49Z","discussion":[{"author":"gebner","date":"2022-06-14T21:25:55Z","comment":"You can also derive this with `cast undefined` if you're too clever:\r\n```lean\r\nimport system.io\r\nmeta def unsafe_perform_io {α} (m : io α) : except io.error α :=\r\nmatch (cast undefined m : unit → sum α io.error) () with\r\n| sum.inl a := except.ok a\r\n| sum.inr err := except.error err\r\nend\r\n```\r\n\r\nEither way we should remove the dangling reference to `tactic_state.mk_empty`."},{"author":"gebner","date":"2022-06-14T21:33:49Z","comment":"And we can now define `tactic_state.mk_empty`:\r\n```lean\r\nmeta def tactic_state.mk_empty : tactic_state :=\r\nmatch unsafe_perform_io (io.run_tactic tactic.read) with\r\n| except.ok s := s\r\n| except.error _ := undefined\r\nend\r\n```"},{"author":"gebner","date":"2022-06-15T10:09:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-15T10:44:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6897582357?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6897582219?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6897582601?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6897582503?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6897582081?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6897581997?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6897581820?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6897582748?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":729,"state":"closed","open_date":"2022-06-13T11:52:18Z","update_date":"2022-06-13T20:44:21Z","discussion":[{"author":"gebner","date":"2022-06-13T16:24:24Z","comment":"bors d+"},{"author":"bors[bot]","date":"2022-06-13T16:24:25Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2022-06-13T17:08:40Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-13T20:44:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6868755961?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6868756586?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6868756825?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6868756717?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6868756415?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6868756326?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6868756196?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6868756969?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"vihdzp","number":728,"state":"closed","open_date":"2022-06-11T17:26:25Z","update_date":"2022-06-13T19:37:47Z","discussion":[{"author":"gebner","date":"2022-06-13T14:07:49Z","comment":"Usually we put these lemmas directly in mathlib (where they will also be checked by linters, etc.)."},{"author":"vihdzp","date":"2022-06-13T19:37:46Z","comment":"Alright, I'll add it as part of another PR in mathlib instead."}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":727,"state":"closed","open_date":"2022-06-10T21:34:47Z","update_date":"2022-06-14T14:59:44Z","discussion":[{"author":"gebner","date":"2022-06-13T10:02:35Z","comment":"LGTM.  You know that we're switching to Lean 4 soon™, right? :smile: \r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-06-13T10:04:06Z","comment":"Build failed:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6859138162?check_suite_focus=true)"},{"author":"gebner","date":"2022-06-13T10:17:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-13T10:18:50Z","comment":"Build failed:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6859359728?check_suite_focus=true)"},{"author":"gebner","date":"2022-06-13T14:02:00Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-13T20:03:02Z","comment":"Build failed:\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6862863197?check_suite_focus=true)"},{"author":"eric-wieser","date":"2022-06-14T07:33:30Z","comment":"I assume that was a network failure since it built fine in the PR?"},{"author":"eric-wieser","date":"2022-06-14T14:26:20Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-14T14:59:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6882487208?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6882487497?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6882487966?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6882487788?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6882486577?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6882486433?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6882486895?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6882488287?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"eric-wieser","number":726,"state":"closed","open_date":"2022-06-10T17:03:17Z","update_date":"2022-06-10T19:13:45Z","discussion":[{"author":"gebner","date":"2022-06-10T17:13:06Z","comment":"I think you might be the first one to use the vscode debugger to debug Lean!\r\n\r\nPlease prepend `chore(.vscode):` or `feat(.vscode):` to the PR title."},{"author":"gebner","date":"2022-06-10T18:10:40Z","comment":"bors d+"},{"author":"bors[bot]","date":"2022-06-10T18:10:41Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2022-06-10T18:11:54Z","comment":"> I think you might be the first one to use the vscode debugger to debug Lean!\r\n\r\nI was actually able to do it in-browser in gitpod by sideloading `ms-vscode.cpptools`, but today I discovered that that violates the license agreement of `ms-vscode.cpptools` so I shouldn't be doing that any more, and shouldn't commit any config that enables it.\r\n"},{"author":"eric-wieser","date":"2022-06-10T18:39:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-06-10T19:13:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6836286551?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6836286123?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6836286884?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6836286806?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6836286383?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6836286306?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6836286671?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6836287020?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"spolu","number":725,"state":"closed","open_date":"2022-06-09T11:04:05Z","update_date":"2022-06-09T11:29:54Z","discussion":[{"author":"spolu","date":"2022-06-09T11:29:39Z","comment":"Actually interpreted as a `sorry` and reported as a warning at build. Closing"},{"author":"gebner","date":"2022-06-09T11:29:53Z","comment":"> Gladly accepts the proof\r\n\r\nI'm getting a warning here:\r\n```\r\n/home/gebner/mathlib/725.lean:4:0: warning: declaration '[anonymous]' uses sorry\r\n```\r\n\r\nThere's a whole bunch of tactics which don't fail immediately but ultimately result in an invalid proof.  Here's some archetypical ones from the top of my head:\r\n```lean\r\nexample : false := by tactic.set_goals []\r\nexample : false := by exact undefined\r\nexample : false := by exact sorry\r\n\r\nexample : false :=\r\nbegin\r\n  tactic.add_decl (declaration.ax `very.clever [] `(false)),\r\n  exact very.clever,\r\nend\r\n```\r\n\r\nThe last one doesn't even produce a warning.  In general, the whole trust model of Lean depends on the kernel type checker.  Tactics will occasionally produce invalid proof terms due to bugs."}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":724,"state":"closed","open_date":"2022-06-09T08:33:20Z","update_date":"2022-06-15T16:03:26Z","discussion":[{"author":"gebner","date":"2022-06-09T08:51:00Z","comment":"> I'm not sure how best to test this\r\n\r\nYou could add a test like this one: https://github.com/leanprover-community/lean/blob/38b59111b2b4e6c572582b27e8937e92fc70ac02/tests/lean/interactive/info_import.input"},{"author":"gebner","date":"2022-06-10T17:03:25Z","comment":"Please prepend `feat(shell/server):` to the PR title.  Otherwise LGTM.\r\n\r\nbors d+"},{"author":"bors[bot]","date":"2022-06-10T17:03:26Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2022-06-10T17:42:24Z","comment":"Having through about this a little more, the \"what type is this\" characterizations probably  should leak through to the autocompletion API; I'll split out a PR to do that once I have my build systems set up again."},{"author":"eric-wieser","date":"2022-06-15T15:26:06Z","comment":"@gebner: this has changed a little bit (to include types), are you still happy with it? The downstream PRs are up to date with the new version."},{"author":"gebner","date":"2022-06-15T15:29:24Z","comment":"lgtm\r\nbors r+"},{"author":"bors[bot]","date":"2022-06-15T16:03:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6903039832?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6903039562?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6903040587?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6903040477?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6903040229?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6903040102?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6903039274?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6903040826?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":723,"state":"closed","open_date":"2022-06-08T20:02:30Z","update_date":"2022-06-24T11:24:30Z","discussion":[{"author":"eric-wieser","date":"2022-06-08T21:31:41Z","comment":"For my own reference, I was able to debug this in gitpod with the following `launch.json`:\r\n<details>\r\n\r\n```\r\n{\r\n    // Use IntelliSense to learn about possible attributes.\r\n    // Hover to view descriptions of existing attributes.\r\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\r\n    \"version\": \"0.2.0\",\r\n    \"configurations\": [\r\n        {\r\n            \"name\": \"Launch\",\r\n            \"cwd\": \"${workspaceFolder}/library\",\r\n            \"program\": \"${workspaceRoot}/build/debug/shell/lean\",\r\n            \"args\": [\"init/data/list/lemmas.lean\"],\r\n            \"type\":\"cppdbg\",\r\n            \"request\": \"launch\",\r\n            \"setupCommands\": [\r\n                {\r\n                  \"description\": \"Enable pretty-printing for gdb\",\r\n                  \"text\": \"-enable-pretty-printing\",\r\n                  \"ignoreFailures\": false\r\n                },\r\n                {\r\n                  \"description\": \"Enable pretty-printing for gdb\",\r\n                  \"text\": \"-interpreter-exec console \\\"source ${workspaceRoot}/bin/lean-gdb.py\\\"\",\r\n                  \"ignoreFailures\": false\r\n                }\r\n            ],\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n</details>"},{"author":"gebner","date":"2022-06-24T10:27:53Z","comment":"LGTM\r\nbors r+"},{"author":"bors[bot]","date":"2022-06-24T10:34:52Z","comment":"Canceled."},{"author":"eric-wieser","date":"2022-06-24T10:35:40Z","comment":"I updated a comment' ; I tried a different approach changing `get_eq_name()` to `get_iff_name()` for `iff`s, but dsimp then doesn't find those lemmas. The comment now reflects that that doesn't work."},{"author":"gebner","date":"2022-06-24T10:51:51Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-24T11:24:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/7040289707?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/7040289843?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/7040290549?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7040290404?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/7040290226?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/7040290114?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/7040289996?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/7040290799?check_suite_focus=true)"}],"tags":[{"tag":"enhancement","description":"New feature or request"}],"pull_requests":[]},{"author":"vihdzp","number":722,"state":"closed","open_date":"2022-06-08T07:49:51Z","update_date":"2022-06-08T07:55:30Z","discussion":[{"author":"vihdzp","date":"2022-06-08T07:55:30Z","comment":"Oh, I should have searched it up first. "}],"tags":[{"tag":"awaiting-author","description":""}],"pull_requests":[]},{"author":"YaelDillies","number":721,"state":"open","open_date":"2022-06-05T16:21:50Z","update_date":"2022-06-26T17:21:04Z","discussion":[{"author":"fpvandoorn","date":"2022-06-06T09:09:48Z","comment":"> Feel free to move the rest to mathlib as well. Except for `set_of` because that's referenced by Lean.\r\n\r\nShould we leave `set_of` here?"},{"author":"YaelDillies","date":"2022-06-06T09:19:52Z","comment":"Oh, I missed this. Where is it referenced?"},{"author":"fpvandoorn","date":"2022-06-06T09:21:26Z","comment":"Probably in the C++ code, on how to parse `{ ... | ... }`."},{"author":"fpvandoorn","date":"2022-06-06T09:22:35Z","comment":"Then again, I don't *think* it causes any problems if we move this to mathlib, except that you'll get an error when writing `{ ... | ... }` before you import the appropriate file. But I'd like to let @gebner chime in on that."},{"author":"gebner","date":"2022-06-06T10:02:34Z","comment":"I believe `set_of` is the only reason some of the `set` definition is still in core (see https://github.com/leanprover-community/lean/pull/675#issuecomment-1024411237).  There's also a test that checks whether every definition referenced from the C++ side actually exists in the library:\r\nbors try"},{"author":"bors[bot]","date":"2022-06-06T10:11:49Z","comment":"## try\n\nBuild failed:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6753550822?check_suite_focus=true)"},{"author":"fpvandoorn","date":"2022-06-07T09:50:40Z","comment":"Relevant line in the build failure: `init.data.basic` cannot find `init.data.set`."},{"author":"eric-wieser","date":"2022-06-24T00:32:09Z","comment":"bors try"},{"author":"bors[bot]","date":"2022-06-24T00:45:00Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/7034021279?check_suite_focus=true)"},{"author":"eric-wieser","date":"2022-06-24T08:46:11Z","comment":"Looks like there are 24 failing tests (search for `***Failed` in the logs to find them)"}],"tags":[{"tag":"awaiting-author","description":""}],"pull_requests":[]},{"author":"YaelDillies","number":719,"state":"closed","open_date":"2022-05-31T08:58:33Z","update_date":"2022-06-06T10:42:05Z","discussion":[{"author":"gebner","date":"2022-06-06T10:04:09Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-06-06T10:41:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6753575803?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6753575670?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6753576361?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6753576292?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6753576039?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6753575965?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6753576163?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6753576492?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"Longhao-Chen","number":718,"state":"open","open_date":"2022-05-21T12:12:09Z","update_date":"2022-05-21T12:12:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"vihdzp","number":717,"state":"closed","open_date":"2022-05-19T03:13:11Z","update_date":"2022-05-20T08:13:52Z","discussion":[{"author":"gebner","date":"2022-05-20T07:43:39Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-05-20T08:13:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6520895958?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6520895637?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6520896130?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6520896072?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6520895834?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6520895756?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6520895491?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6520896223?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":716,"state":"closed","open_date":"2022-05-18T12:25:21Z","update_date":"2022-05-18T13:17:12Z","discussion":[{"author":"gebner","date":"2022-05-18T12:46:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-05-18T13:17:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6489434725?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6489434974?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6489433576?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6489435713?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6489432539?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6489432440?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6489432971?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6489433766?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"vihdzp","number":715,"state":"closed","open_date":"2022-05-17T18:39:22Z","update_date":"2022-05-18T13:51:57Z","discussion":[{"author":"gebner","date":"2022-05-17T19:50:11Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-05-17T20:37:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6477681648?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6477681252?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6477681831?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6477681735?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6477681409?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6477681347?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6477681530?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6477681968?check_suite_focus=true)"},{"author":"alreadydone","date":"2022-05-18T13:46:28Z","comment":"The changes haven't shown up in the [docs](https://leanprover-community.github.io/mathlib_docs/init/wf.html#acc) even with a new release. How could the docs be updated?"},{"author":"gebner","date":"2022-05-18T13:51:56Z","comment":"The changes will show up once mathlib has been upgraded to the latest Lean version.  The mathlib docs always show the Lean version used in mathlib."}],"tags":[],"pull_requests":[]},{"author":"YaelDillies","number":714,"state":"closed","open_date":"2022-05-08T09:22:59Z","update_date":"2022-05-08T12:06:05Z","discussion":[{"author":"eric-wieser","date":"2022-05-08T09:28:14Z","comment":"bors try"},{"author":"bors[bot]","date":"2022-05-08T10:05:46Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6340068567?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6340068498?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6340068465?check_suite_focus=true)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6340068539?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6340068587?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6340068614?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6340068513?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6340068439?check_suite_focus=true)"},{"author":"gebner","date":"2022-05-08T10:52:31Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-05-08T12:03:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6340614427?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6340614348?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6340614502?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6340614474?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6340614402?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6340614382?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6340614452?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6340614544?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"kmill","number":713,"state":"closed","open_date":"2022-05-07T16:14:58Z","update_date":"2022-05-17T08:15:13Z","discussion":[{"author":"kmill","date":"2022-05-07T16:19:02Z","comment":"Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Why.20are.20there.20two.20transitive.20closures.3F/near/281526286"},{"author":"gebner","date":"2022-05-08T10:51:25Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-05-08T11:22:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6340467410?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6340467387?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6340467642?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6340467592?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6340467544?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6340467497?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6340467453?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6340467684?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"kmill","number":712,"state":"closed","open_date":"2022-04-30T20:27:13Z","update_date":"2022-05-02T09:23:54Z","discussion":[{"author":"kmill","date":"2022-04-30T20:33:34Z","comment":"This PR is to try to fix the error messages to be more informative and less confusing. There have been some Zulip questions from new users that have shown how confusing they can be. I'm still not completely sure how to phrase them.\r\n\r\nI've also found the `noncomputable` suggestion for partially written theorems to be annoying, and this disables it when the type of the theorem contains a sorry."},{"author":"gebner","date":"2022-05-02T08:40:33Z","comment":"Seems reasonable enough.\r\nbors r+"},{"author":"bors[bot]","date":"2022-05-02T09:23:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6254525811?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6254526270?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6254526484?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6254526406?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6254526148?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6254526070?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6254525944?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6254526589?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"kmill","number":711,"state":"closed","open_date":"2022-04-23T17:22:53Z","update_date":"2022-04-29T13:22:47Z","discussion":[{"author":"gebner","date":"2022-04-29T12:47:11Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-04-29T13:22:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6228333649?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6228333435?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6228334110?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6228334026?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6228333904?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6228333811?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6228333215?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6228334259?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"eric-wieser","number":710,"state":"closed","open_date":"2022-03-30T12:54:37Z","update_date":"2022-03-31T09:48:50Z","discussion":[{"author":"fpvandoorn","date":"2022-03-31T09:08:49Z","comment":"LGTM\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-03-31T09:48:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5768267546?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5768267741?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5768268106?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5768267918?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5768267342?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5768267218?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5768267036?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5768268258?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"kmill","number":709,"state":"open","open_date":"2022-03-28T02:11:59Z","update_date":"2022-06-24T00:36:56Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"kmill","number":708,"state":"open","open_date":"2022-03-26T04:05:44Z","update_date":"2022-06-09T08:34:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":707,"state":"closed","open_date":"2022-03-24T13:32:42Z","update_date":"2022-03-24T14:07:22Z","discussion":[{"author":"gebner","date":"2022-03-24T13:33:20Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-03-24T14:07:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5677136928?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5677132593?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5677133084?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5677137262?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5677132440?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5677136664?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5677132751?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5677133263?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":706,"state":"closed","open_date":"2022-03-23T10:17:06Z","update_date":"2022-03-23T12:05:22Z","discussion":[{"author":"gebner","date":"2022-03-23T10:18:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-03-23T10:26:59Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5658508132?check_suite_focus=true)"},{"author":"gebner","date":"2022-03-23T10:54:19Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-03-23T11:33:55Z","comment":"This PR was included in a batch that successfully built, but then failed to merge into master (it was a non-fast-forward update). It will be automatically retried."},{"author":"bors[bot]","date":"2022-03-23T12:05:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5659528394?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5659528593?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5659528888?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5659528805?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5659528149?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5659528015?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5659527831?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5659529006?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null},{"tag":"easy","description":null}],"pull_requests":[]},{"author":"gebner","number":705,"state":"closed","open_date":"2022-03-18T12:42:12Z","update_date":"2022-03-18T13:44:06Z","discussion":[{"author":"gebner","date":"2022-03-18T13:12:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-03-18T13:44:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5600841506?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5600841366?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5600842014?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5600836228?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5600836084?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5600841713?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5600835866?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5600836438?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"kmill","number":704,"state":"closed","open_date":"2022-03-17T23:42:38Z","update_date":"2022-03-18T12:14:58Z","discussion":[{"author":"kmill","date":"2022-03-18T00:11:42Z","comment":"I still need to check this against mathlib, and I'll report back when it succeeds."},{"author":"kmill","date":"2022-03-18T09:06:40Z","comment":"Mathlib compiles in debug mode without any errors."},{"author":"gebner","date":"2022-03-18T11:27:44Z","comment":"Seems reasonable enough.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2022-03-18T12:14:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5599649470?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5599649379?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5599649642?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5599649574?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5599649274?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5599649200?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5599649055?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5599649709?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"kmill","number":703,"state":"closed","open_date":"2022-03-17T04:05:48Z","update_date":"2022-03-17T20:17:31Z","discussion":[{"author":"gebner","date":"2022-03-17T08:16:20Z","comment":"Strategically speaking, we should be aiming to move closer to Lean 4, and avoid features that are not in Lean 4 because that just makes porting harder.  From that perspective, we should do:\r\n - `noncomputable def` unconditionally marks the definition as noncomputable\r\n - `noncomputable theory` marks definitions as noncomputable if necessary\r\n\r\nThis is trivial to port, and obviates the `force_noncomputable` hack.  I'm also happy with adding `noncomputable! def` and keeping `noncomputable def` as it is.\r\n\r\nI would prefer to remove the `noncomputable! theory` command because we can't easily port it to Lean 4."},{"author":"kmill","date":"2022-03-17T18:54:08Z","comment":"@gebner Ok, `noncomputable! theory` is gone. I had thought it could be useful for non-mathlib purposes, but (1) I don't want to make mathport any more complicated and (2) there was still some work to do with figuring out how to properly handle theorems and whether they should be marked noncomputable too (and that's more work and complexity than I'm willing to put into this feature!)\r\n\r\nI'd like to leave `noncomputable` alone, since some people like how Lean raises an error if it's misapplied. It seems like this shouldn't make mathport that much more complex, since if I've understood it correctly both `noncomputable` and `noncomputable!` can be translated in the same way. (And if we run into definitions where this is a problem, it likely would point toward performance issues in the Lean 4 compiler. This at least is a motivation behind introducing this feature in Lean 3, where it's less clearly useful spending significant time trying to improve the VM compiler, especially since the afflicted definitions are never going to be evaluated.)"},{"author":"gebner","date":"2022-03-17T19:37:50Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2022-03-17T20:17:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5591129091?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5591128274?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5591128975?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5591128838?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5591128693?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5591128620?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5591128473?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5591129267?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":681,"state":"closed","open_date":"2022-02-10T03:47:38Z","update_date":"2022-02-15T03:38:46Z","discussion":[{"author":"digama0","date":"2022-02-10T05:07:25Z","comment":"This could be significantly expensive. It should be controlled by a command line flag."},{"author":"gebner","date":"2022-02-10T09:25:01Z","comment":"> This could be significantly expensive. It should be controlled by a command line flag.\r\n\r\nYes, both in terms of CPU time and disk space."},{"author":"dselsam","date":"2022-02-15T03:38:46Z","comment":"This is niche enough and a small enough delta that it doesn't seem worth merging into master."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":680,"state":"closed","open_date":"2022-02-08T14:11:40Z","update_date":"2022-02-08T14:49:42Z","discussion":[{"author":"gebner","date":"2022-02-08T14:11:44Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-08T14:49:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5110441302?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5110441484?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5110442228?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5110435617?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5110435042?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5110441021?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5110435471?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5110442502?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":679,"state":"closed","open_date":"2022-02-07T14:44:05Z","update_date":"2022-02-08T13:01:22Z","discussion":[{"author":"gebner","date":"2022-02-08T12:18:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-08T13:01:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5108920613?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5108920717?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5108920866?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5108920803?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5108920385?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5108920329?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5108920106?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5108920961?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":678,"state":"closed","open_date":"2022-02-03T11:03:49Z","update_date":"2022-02-03T11:44:36Z","discussion":[{"author":"gebner","date":"2022-02-03T11:04:30Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-03T11:44:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5050541089?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5050536180?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5050541618?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5050536463?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5050541426?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5050541342?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5050541232?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5050541749?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":677,"state":"closed","open_date":"2022-02-02T03:22:00Z","update_date":"2022-02-02T12:19:04Z","discussion":[{"author":"gebner","date":"2022-02-02T11:29:45Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-02T11:31:10Z","comment":"Build failed:\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5035746279?check_suite_focus=true)"},{"author":"gebner","date":"2022-02-02T11:35:15Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-02-02T12:19:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5035809119?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5035809226?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5035809565?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5035809523?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5035809451?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5035809417?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5035809333?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5035809655?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":676,"state":"closed","open_date":"2022-01-30T00:23:15Z","update_date":"2022-01-31T17:04:42Z","discussion":[{"author":"gebner","date":"2022-01-31T16:27:38Z","comment":"bors r="},{"author":"gebner","date":"2022-01-31T16:27:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-31T17:04:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5008997720?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5008997543?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5008998304?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5008998224?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5008998114?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5008998041?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5008997872?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5008998456?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":675,"state":"closed","open_date":"2022-01-28T16:30:31Z","update_date":"2022-05-18T12:44:32Z","discussion":[{"author":"gebner","date":"2022-01-28T16:48:01Z","comment":"Feel free to move the rest to mathlib as well.  Except for `set_of` because that's referenced by Lean."},{"author":"urkud","date":"2022-01-28T20:12:31Z","comment":"I've got a cold, so for the next few days I only do things that are fun (or necessary). This isn't, so it's going to wait till next Monday or Wednesday."},{"author":"gebner","date":"2022-05-18T12:12:04Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-05-18T12:44:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/6488912777?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/6488912968?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/6488913719?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/6488913612?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/6488913448?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/6488913324?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/6488913101?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/6488913951?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"robertylewis","number":674,"state":"closed","open_date":"2022-01-28T15:10:16Z","update_date":"2022-01-28T16:02:45Z","discussion":[{"author":"gebner","date":"2022-01-28T15:25:34Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-28T16:02:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4982601212?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4982601452?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4982601824?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4982601766?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4982601657?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4982601597?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4982601344?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4982601940?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"YaelDillies","number":671,"state":"closed","open_date":"2022-01-23T22:49:43Z","update_date":"2022-01-24T10:37:03Z","discussion":[{"author":"gebner","date":"2022-01-24T09:55:06Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-24T10:37:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4919810782?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4919810708?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4919810608?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4919810547?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4919810448?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4919810400?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4919810299?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4919810850?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":670,"state":"closed","open_date":"2022-01-21T16:15:06Z","update_date":"2022-07-04T10:28:35Z","discussion":[{"author":"gebner","date":"2022-01-31T16:31:14Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-31T16:38:09Z","comment":"Canceled."},{"author":"dselsam","date":"2022-01-31T16:43:48Z","comment":"@gebner Thank you for the feedback. I adopted your `tag : unit` suggestion. I didn't understand your suggestion about `@[reducible] def id_tag (tag : string) (x : Prop) : Prop := x` though -- did you mean that proofs should have nested `id`s like `@id (@id_tag \"my-tac\" thm) pf`?"},{"author":"gebner","date":"2022-01-31T17:09:13Z","comment":"> I didn't understand your suggestion about @[reducible] def id_tag (tag : string) (x : Prop) : Prop := x though -- did you mean that proofs should have nested ids like @id (@id_tag \"my-tac\" thm) pf?\r\n\r\nApparently that was too subtle.  My suggestion was to use `Prop` instead of `Sort u` because the tag should not appear in data."},{"author":"dselsam","date":"2022-01-31T17:16:09Z","comment":"Oh you just meant `@[reducible] def id_tag (tag : string) {α : Prop} (x : α) : α := x`? The way you wrote it, it only took the `Prop` without the proof. I thought it might be nice to allow tactics to tag data -- e.g. a program synthesis tactic might tag a gnarly program it constructed -- but this is irrelevant in current mathlib so I would be very happy to restrict to `Prop`. I'll push the change."},{"author":"gebner","date":"2022-01-31T17:26:37Z","comment":"> The way you wrote it, it only took the Prop without the proof.\r\n\r\nOoops, sorry for the confusion.\r\n\r\nbors r+"},{"author":"gebner","date":"2022-01-31T17:26:45Z","comment":"bors cancel"},{"author":"bors[bot]","date":"2022-01-31T17:26:46Z","comment":"Canceled."},{"author":"gebner","date":"2022-01-31T17:27:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-31T18:05:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/5009833999?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/5009834450?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/5009834660?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/5009834567?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/5009834335?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/5009834259?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/5009834128?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/5009834802?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"kmill","number":669,"state":"closed","open_date":"2022-01-15T19:11:46Z","update_date":"2022-01-18T22:00:56Z","discussion":[{"author":"fpvandoorn","date":"2022-01-16T13:15:44Z","comment":"Does it put parentheses around notation with binders? Around the `foldr`-notation combinator (like for `[1,2,3]`)?\r\nDo we want to add a test?"},{"author":"kmill","date":"2022-01-17T19:34:21Z","comment":"@fpvandoorn I added some tests to illustrate the behavior. It puts parentheses around every instance of non-special-cased notation (and also around negative numerals, just for clarity).\r\n\r\nThe only notations it does not parenthesize right now are ones built into the pretty printer, like subtypes, set separation, set of, explicit collections, tuples, and special constants like unit. It also does not parenthesize other constructions, like lambdas, function applications, pi expressions, let expressions, etc.\r\n\r\nI think the main intent of this feature is to help understand precedence of user-defined notation."},{"author":"fpvandoorn","date":"2022-01-18T11:57:20Z","comment":"LGTM"},{"author":"gebner","date":"2022-01-18T12:21:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-18T13:00:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4853077959?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4853077753?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4853078066?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4853078030?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4853077889?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4853077838?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4853077652?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4853078132?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":668,"state":"closed","open_date":"2022-01-11T10:56:48Z","update_date":"2022-01-11T12:07:55Z","discussion":[{"author":"gebner","date":"2022-01-11T11:32:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-11T12:07:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4774603151?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4774608325?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4774603635?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4774608411?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4774608083?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4774603270?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4774608245?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4774603729?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":667,"state":"closed","open_date":"2022-01-11T10:51:52Z","update_date":"2022-01-11T11:31:48Z","discussion":[{"author":"gebner","date":"2022-01-11T10:52:10Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-11T11:31:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4774171783?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4774171667?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4774172037?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4774171972?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4774172194?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4774172154?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4774171878?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4774172286?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":666,"state":"closed","open_date":"2022-01-11T10:32:37Z","update_date":"2022-01-11T11:31:49Z","discussion":[{"author":"gebner","date":"2022-01-11T10:49:44Z","comment":"bors merge"},{"author":"gebner","date":"2022-01-11T10:49:59Z","comment":"bors r-"},{"author":"bors[bot]","date":"2022-01-11T10:50:00Z","comment":"Canceled."},{"author":"gebner","date":"2022-01-11T10:51:12Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-11T11:31:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4774171783?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4774171667?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4774172037?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4774171972?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4774172194?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4774172154?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4774171878?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4774172286?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":665,"state":"closed","open_date":"2022-01-09T16:24:26Z","update_date":"2022-01-11T10:53:59Z","discussion":[{"author":"gebner","date":"2022-01-09T16:33:05Z","comment":"Hmmm, this still synthesizes subsingleton instances in simp. ?!?!?"},{"author":"gebner","date":"2022-01-11T10:07:54Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-11T10:53:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4773647669?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4773647878?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4773648399?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4773648336?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4773648041?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4773647989?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4773648112?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4773648495?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":664,"state":"closed","open_date":"2022-01-07T18:23:22Z","update_date":"2022-01-07T19:23:20Z","discussion":[{"author":"gebner","date":"2022-01-07T18:35:48Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T19:21:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4742342547?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4742342698?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4742343031?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4742342982?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4742342879?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4742342841?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4742342772?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4742343133?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":663,"state":"closed","open_date":"2022-01-07T17:49:52Z","update_date":"2022-01-07T18:29:53Z","discussion":[{"author":"gebner","date":"2022-01-07T17:52:04Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T18:29:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4741922402?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4741922477?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4741922810?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4741922762?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4741922650?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4741922571?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4741922275?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4741922885?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":662,"state":"closed","open_date":"2022-01-07T17:04:02Z","update_date":"2022-01-07T17:50:44Z","discussion":[{"author":"gebner","date":"2022-01-07T17:05:57Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T17:50:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4741476519?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4741476396?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4741476923?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4741476872?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4741476629?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4741476597?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4741476776?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4741476991?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":661,"state":"closed","open_date":"2022-01-07T16:17:30Z","update_date":"2022-01-07T17:07:14Z","discussion":[{"author":"gebner","date":"2022-01-07T16:21:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T17:07:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4741015264?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4741015609?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4741015776?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4741015711?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4741015427?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4741015361?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4741015533?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4741015869?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":660,"state":"closed","open_date":"2022-01-07T14:35:24Z","update_date":"2022-01-07T15:58:21Z","discussion":[{"author":"gebner","date":"2022-01-07T15:22:14Z","comment":"bors merge"},{"author":"bors[bot]","date":"2022-01-07T15:58:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4740389412?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4740389496?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4740389800?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4740389750?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4740389681?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4740389635?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4740389566?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4740389875?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":659,"state":"closed","open_date":"2022-01-04T15:13:35Z","update_date":"2022-01-05T13:40:22Z","discussion":[{"author":"gebner","date":"2022-01-04T18:38:51Z","comment":"This certainly needs a ready-to-synthesize check, otherwise everything is treated as an out_param†:\r\n```lean\r\nclass A (α β : Type) -- no out_param!\r\ninstance : A ℕ ℤ := ⟨⟩\r\ndef p (_ : Type) : Prop := false\r\n@[simp] lemma l {α β} [A α β] : p α ↔ p β := iff.rfl\r\nexample : p ℕ := by simp --> p ℤ\r\n```\r\n† albeit with reducible transparency instead of semireducible, of course\r\n\r\nCan you also mention where this turned up in mathlib?  This will make it easier to sell as a Lean 4 change."},{"author":"ericrbg","date":"2022-01-05T02:29:02Z","comment":"as far as I know, this patch was because lemmas like `map_zero` for `fun_like`+children don't fire as `simp` lemmas sometimes."},{"author":"Vierkantor","date":"2022-01-05T12:41:30Z","comment":"> > Can you also mention where this turned up in mathlib? This will make it easier to sell as a Lean 4 change.\r\n>\r\n> as far as I know, this patch was because lemmas like `map_zero` for `fun_like`+children don't fire as `simp` lemmas sometimes.\r\n\r\nIndeed this was one of the cases, although this was mostly worked around as a side effect of adding the `out_param` to `has_coe_to_fun`: this made the goal contain enough of the instances that filling in the metavariables typically succeeds. This worked, as long as classes remained bundled.\r\n\r\nFor the `linear_map_class` I was working on, bundling is not possible (it would produce a dangerous instance) and the issue returned. I'm currently recompiling/fixing a branch of mathlib that should demonstrate a `simp` lemma newly picked up by this change."},{"author":"gebner","date":"2022-01-05T12:58:11Z","comment":"LGTM. Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2022-01-05T13:40:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4714818108?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4714818015?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4714818351?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4714818323?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4714818275?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4714818241?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4714818173?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4714818388?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":658,"state":"closed","open_date":"2022-01-04T11:05:12Z","update_date":"2022-01-04T12:02:58Z","discussion":[{"author":"gebner","date":"2022-01-04T11:25:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-04T12:02:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4701369381?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4701363691?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4701369491?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4701369448?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4701363421?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4701369554?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4701363536?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4701369735?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":657,"state":"closed","open_date":"2022-01-03T15:43:55Z","update_date":"2022-01-04T10:33:51Z","discussion":[{"author":"gebner","date":"2022-01-04T09:53:14Z","comment":"bors r+"},{"author":"bors[bot]","date":"2022-01-04T10:33:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4700465012?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4700464889?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4700465307?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4700465201?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4700465149?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4700465118?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4700465071?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4700465526?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":656,"state":"closed","open_date":"2021-12-21T04:53:18Z","update_date":"2021-12-21T10:46:12Z","discussion":[{"author":"gebner","date":"2021-12-21T10:09:51Z","comment":"OMG this is not the expansion that I expected.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-12-21T10:46:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4593388351?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4593388429?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4593388734?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4593388672?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4593388586?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4593388513?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4593388262?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4593388802?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":654,"state":"closed","open_date":"2021-11-24T10:33:08Z","update_date":"2021-11-24T11:34:14Z","discussion":[{"author":"gebner","date":"2021-11-24T10:49:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-11-24T11:34:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4310879661?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4310880211?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4310880370?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4310880312?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4310879766?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4310879737?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4310880118?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4310880464?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":653,"state":"closed","open_date":"2021-11-24T09:25:39Z","update_date":"2021-11-24T10:39:11Z","discussion":[{"author":"gebner","date":"2021-11-24T09:54:03Z","comment":"> This was causing an assertion violation. It is not clear what the best fix is [...]\r\n\r\nIn general, I would prefer replacing the assertion violation by an exception.  It's better to fail than to run into undefined behavior.   From what I can tell, the assertion fails somewhere else though.\r\n\r\nbors r+"},{"author":"digama0","date":"2021-11-24T10:24:42Z","comment":"That was my original plan as well, but the exception would have to have a very weird message, not much better than an assertion violation since it's not the user's fault. Tracking down the actual issue lead to the observation that this bit of code is unfolding with one reducibility setting but the code that permitted this code to run in the first place was using a different setting. (In fact it's different code altogether, `safe_whnf` instead of `whnf`, so there might still be differences lurking.) In any case, that code in `drec.cpp` is not where we should be throwing the error, that's after we have already committed to constructing the inductive and are halfway through building it. But I won't complain if we want to replace those asserts with exceptions just so that users can see what's going on, even though it is still an internal error.\r\n\r\nRe: undefined behavior, that can be addressed by using `lean_always_assert` instead of `lean_assert` if there is any doubt about the reliability of the condition."},{"author":"bors[bot]","date":"2021-11-24T10:39:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4310273979?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4310273749?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4310274372?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4310274315?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4310273899?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4310273852?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4310274097?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4310274202?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":652,"state":"closed","open_date":"2021-11-17T02:11:54Z","update_date":"2021-11-17T10:38:52Z","discussion":[{"author":"gebner","date":"2021-11-17T09:58:58Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-11-17T10:38:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4236427223?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4236427400?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4236427509?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4236427464?check_suite_focus=true)\n  * Build macos Debug\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4236427307?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4236427141?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4236427577?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":650,"state":"closed","open_date":"2021-11-12T05:08:16Z","update_date":"2021-11-12T11:50:54Z","discussion":[{"author":"kmill","date":"2021-11-12T07:38:27Z","comment":"It seems like the only modules in mathlib this will obviously affect are in `src/tactic`: `core.lean`, `monotonicity/interactive.lean`, `pretty_cases.lean`, `squeeze.lean`, and `transfer.lean`.\r\n\r\nMathlib seems to have its own version of `format!`, too, in `src/tactic/core.lean` (see `parse_pformat`), which is used in the `trace!` macro, and `src/tactic/simps.lean` has a case of `{{`.  (I'm not sure I didn't miss anything.)"},{"author":"digama0","date":"2021-11-12T07:58:33Z","comment":"I expect very few changes in mathlib. `format!` and friends are used rarely, and `{{` in format even more rarely. I was planning to defer this until after it lands and we are working on the mathlib bump PR, but this should be an exhaustive enumeration: [1](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L1475) [2](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L1694) [3](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/pretty_cases.lean#L56) [4](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/squeeze.lean#L53) [5](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/transfer.lean#L74) [6](https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/interactive.lean#L65), plus the implementation of `pformat!` has to be updated. "},{"author":"gebner","date":"2021-11-12T10:08:24Z","comment":"I agree with the balancing philosophy, and wholeheartedly approve of the whitespace formatting.\r\n\r\nbors r+"},{"author":"gebner","date":"2021-11-12T11:10:04Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-11-12T11:50:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4188969527?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4188969083?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4188969455?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4188969406?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4188969218?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4188969167?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4188969347?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4188969609?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":649,"state":"closed","open_date":"2021-11-08T13:41:45Z","update_date":"2021-11-08T15:15:10Z","discussion":[{"author":"gebner","date":"2021-11-08T14:24:11Z","comment":"bors r+"},{"author":"gebner","date":"2021-11-08T14:32:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-11-08T15:15:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4140207230?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4140207543?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4140194376?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4140207849?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4140207443?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4140207367?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4140193962?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4140208045?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":648,"state":"closed","open_date":"2021-11-08T12:36:47Z","update_date":"2021-11-08T14:22:36Z","discussion":[{"author":"gebner","date":"2021-11-08T13:38:17Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-11-08T14:22:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4139540354?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4139540150?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4139540770?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4139540667?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4139540562?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4139540492?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4139540243?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4139540879?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"kbuzzard","number":646,"state":"closed","open_date":"2021-11-06T23:17:00Z","update_date":"2021-11-07T13:22:50Z","discussion":[{"author":"fpvandoorn","date":"2021-11-07T12:43:36Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-11-07T13:22:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4130798982?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4130799103?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4130799138?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4130799118?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4130799044?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4130799018?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4130799076?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4130799153?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":645,"state":"open","open_date":"2021-11-02T09:43:53Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"eric-wieser","date":"2021-11-04T11:20:58Z","comment":"What's the easiest way to convert an `std::vector<T>` into a `vm_obj` holding a `list`? I was hoping `to_obj` had an overload for that."},{"author":"gebner","date":"2021-11-04T13:23:31Z","comment":"I think `vm_list.h` is everything we have.  Copy&pasted from `to_obj(buffer<expr> const &)`:\r\n```c++\r\n    vm_obj obj = mk_vm_nil();\r\n    for (unsigned i = ls.size(); i > 0; i--)\r\n        obj = mk_vm_cons(to_obj(ls[i - 1]), obj);\r\n    return obj;\r\n```"}],"tags":[],"pull_requests":[]},{"author":"yurivict","number":643,"state":"closed","open_date":"2021-10-31T16:26:46Z","update_date":"2021-11-01T17:32:05Z","discussion":[{"author":"gebner","date":"2021-11-01T09:42:29Z","comment":"Cool!  Do the tests pass on FreeBSD now?\r\n\r\nPlease change the PR title to `fix(CMakeLists.txt): support freebsd`.  Otherwise LGTM."},{"author":"yurivict","date":"2021-11-01T16:28:34Z","comment":"All tests pass on FreeBSD."},{"author":"gebner","date":"2021-11-01T16:52:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-11-01T17:32:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4070462172?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4070462344?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4070462723?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4070462657?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4070462502?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4070462445?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4070462078?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4070462796?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":642,"state":"closed","open_date":"2021-10-29T16:21:48Z","update_date":"2021-10-29T17:11:21Z","discussion":[{"author":"gebner","date":"2021-10-29T16:35:33Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-29T17:11:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4049024913?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4049025025?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4049025231?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4049025187?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4049025122?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4049025083?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4049024976?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4049025283?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":640,"state":"closed","open_date":"2021-10-28T23:03:12Z","update_date":"2021-10-28T23:42:26Z","discussion":[{"author":"bryangingechen","date":"2021-10-28T23:03:18Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-28T23:42:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4040808996?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4040808842?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4040809110?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4040809076?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4040808945?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4040808917?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4040809038?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4040809156?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"timlacroix","number":639,"state":"closed","open_date":"2021-10-27T12:31:49Z","update_date":"2021-10-27T12:32:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":638,"state":"closed","open_date":"2021-10-25T11:04:05Z","update_date":"2021-10-30T09:53:07Z","discussion":[{"author":"gebner","date":"2021-10-25T17:53:53Z","comment":"LGTM\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-10-25T18:34:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/4000506469?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/4000506418?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/4000506568?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/4000506532?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/4000506278?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/4000506214?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/4000506359?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/4000506634?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":637,"state":"closed","open_date":"2021-10-23T04:27:32Z","update_date":"2021-10-25T08:57:50Z","discussion":[{"author":"gebner","date":"2021-10-25T07:30:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-25T08:57:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3994371955?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3994372215?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3994372709?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3994372659?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3994372447?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3994372396?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3994372538?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3994372789?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"urkud","number":636,"state":"closed","open_date":"2021-10-22T21:12:48Z","update_date":"2021-10-25T08:16:48Z","discussion":[{"author":"gebner","date":"2021-10-25T07:30:23Z","comment":"LGTM.  Stream isn't in Lean 4 either (though there are two other types called stream now, so we might want to find a new name for this one).\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-10-25T08:16:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3993947806?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3993947903?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3993948295?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3993948204?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3993948051?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3993948004?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3993948117?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3993948371?check_suite_focus=true)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"fpvandoorn","number":635,"state":"closed","open_date":"2021-10-21T13:56:33Z","update_date":"2021-10-21T15:01:11Z","discussion":[{"author":"gebner","date":"2021-10-21T14:12:51Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-21T15:01:06Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3964985387?check_suite_focus=true)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3964985973?check_suite_focus=true)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3964986412?check_suite_focus=true)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3964986344?check_suite_focus=true)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3964985775?check_suite_focus=true)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3964985656?check_suite_focus=true)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3964986160?check_suite_focus=true)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3964986597?check_suite_focus=true)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":634,"state":"closed","open_date":"2021-10-21T09:26:28Z","update_date":"2021-10-21T10:11:35Z","discussion":[{"author":"gebner","date":"2021-10-21T09:28:20Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-21T10:11:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3962071168)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3962071320)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3962071747)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3962071695)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3962071485)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3962071425)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3962071569)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3962071815)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":633,"state":"closed","open_date":"2021-10-21T06:17:46Z","update_date":"2021-10-21T08:19:20Z","discussion":[{"author":"gebner","date":"2021-10-21T07:36:04Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-21T08:19:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3960997795)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3960997631)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3960998057)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3960998001)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3960997907)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3960997860)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3960997726)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3960998134)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":632,"state":"closed","open_date":"2021-10-20T23:23:40Z","update_date":"2021-10-21T10:17:39Z","discussion":[{"author":"gebner","date":"2021-10-21T09:28:30Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-21T10:11:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3962071168)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3962071320)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3962071747)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3962071695)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3962071485)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3962071425)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3962071569)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3962071815)"},{"author":"semorrison","date":"2021-10-21T10:17:39Z","comment":"I compiled mathlib locally with this change to core, and everything works fine without any changes required."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":631,"state":"closed","open_date":"2021-10-20T08:20:09Z","update_date":"2021-10-20T09:01:55Z","discussion":[{"author":"gebner","date":"2021-10-20T08:23:36Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-20T09:01:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3949084454)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3949083970)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3949084270)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3949077754)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3949077568)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3949084062)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3949077301)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3949084530)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":630,"state":"closed","open_date":"2021-10-19T10:15:01Z","update_date":"2021-10-20T08:04:23Z","discussion":[{"author":"gebner","date":"2021-10-19T15:57:34Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-19T21:58:26Z","comment":"Build failed:\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3941583934)"},{"author":"gebner","date":"2021-10-20T07:15:58Z","comment":"Failure is unrelated\r\nbors r+"},{"author":"bors[bot]","date":"2021-10-20T08:04:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3948484258)\n  * [Build linux aarch64 Release](https://github.com/leanprover-community/lean/runs/3948484149)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3948484508)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3948484451)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3948484050)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3948484004)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3948484357)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3948484599)"}],"tags":[],"pull_requests":[]},{"author":"YaelDillies","number":629,"state":"open","open_date":"2021-10-15T11:52:49Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"YaelDillies","date":"2021-10-15T11:53:40Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-15T11:53:41Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make YaelDillies a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/YaelDillies)\n"},{"author":"gebner","date":"2021-10-15T11:59:25Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-15T12:08:09Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3905678620)"},{"author":"bryangingechen","date":"2021-10-15T13:33:18Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-15T13:43:29Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3906547507)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":628,"state":"closed","open_date":"2021-10-15T08:59:59Z","update_date":"2021-10-17T04:54:38Z","discussion":[{"author":"semorrison","date":"2021-10-17T04:54:38Z","comment":"@digama0 expressed some reservations about making this change on zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/move.20init.2Ealgebra.2Eorder.20from.20core.20to.20mathlib.3F\r\n\r\nI'll close this for now unless someone has strong opinions to the contrary."}],"tags":[{"tag":"rfc","description":""}],"pull_requests":[]},{"author":"dselsam","number":627,"state":"closed","open_date":"2021-10-06T04:22:15Z","update_date":"2021-10-06T16:32:13Z","discussion":[{"author":"semorrison","date":"2021-10-06T06:36:17Z","comment":"This will be very helpful for making reproducible builds of the mathport artifacts, so I would love to see this merged!"},{"author":"gebner","date":"2021-10-06T07:00:53Z","comment":"Mmmh, this means we need to compile mathlib to create tleans.  IIRC we disabled the parallel export because the file locking didn't cope too well with parallelism: https://github.com/leanprover-community/lean/pull/524#issuecomment-770929660\r\n\r\nI couldn't find the script used to create the mathport releases, but I suspect you can get a larger speedup by using the olean cache instead of compiling mathlib."},{"author":"gebner","date":"2021-10-06T10:01:22Z","comment":"> but I suspect you can get a larger speedup by using the olean cache instead of compiling mathlib.\r\n\r\nOf course this can't work because we also want the AST output which we can't generate from the oleans.\r\n\r\nThis PR probably breaks CI, let's see:\r\nbors r+"},{"author":"gebner","date":"2021-10-06T10:30:56Z","comment":"bors r-"},{"author":"bors[bot]","date":"2021-10-06T10:30:57Z","comment":"Canceled."},{"author":"gebner","date":"2021-10-06T10:35:06Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-06T10:44:15Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3813851860)"},{"author":"gebner","date":"2021-10-06T11:22:26Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-06T11:35:30Z","comment":"## try\n\nBuild failed:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3814275131)"},{"author":"gebner","date":"2021-10-06T12:32:00Z","comment":"bors try"},{"author":"gebner","date":"2021-10-06T12:48:03Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-06T12:48:04Z","comment":"## try\n\nAlready running a review"},{"author":"bors[bot]","date":"2021-10-06T12:48:20Z","comment":"## try\n\nBuild failed:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3814941879)"},{"author":"gebner","date":"2021-10-06T12:48:36Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-10-06T13:29:27Z","comment":"## try\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3815109435)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3815109081)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3815108934)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3815109228)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3815109300)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3815108826)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3815108717)"},{"author":"gebner","date":"2021-10-06T13:33:08Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-06T14:21:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3815606502)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3815606688)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3815606615)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3815607181)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3815607100)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3815606972)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3815607339)"},{"author":"dselsam","date":"2021-10-06T16:32:13Z","comment":"@gebner Thanks for your help!"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":626,"state":"closed","open_date":"2021-10-04T08:10:31Z","update_date":"2021-10-04T11:13:18Z","discussion":[{"author":"gebner","date":"2021-10-04T10:12:46Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-04T11:13:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3789452774)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3789452692)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3789452637)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3789452481)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3789452420)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3789452558)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3789452887)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":622,"state":"closed","open_date":"2021-09-21T16:04:58Z","update_date":"2021-09-22T20:13:40Z","discussion":[{"author":"bryangingechen","date":"2021-09-21T16:08:40Z","comment":"Do you mind adding a test for this?"},{"author":"fpvandoorn","date":"2021-09-22T00:04:52Z","comment":"I don't like always doing `whnf`.\r\nIf my goal is `smooth f`, I don't want as new hypothesis `¬ times_cont_mdiff I I' ⊤ f`, but `¬ smooth f`.\r\n\r\nTwo ways in which this can be improved:\r\n* Only use the reduced form if the goal is `ne` (``tgt_wh \\l if tgt.is_app_of `ne then whnf tgt reducible else return tgt``)\r\n* Only use the reduced form if the reduced form is a negation (this might unfold other things that are defined to be negations)\r\n"},{"author":"digama0","date":"2021-09-22T03:08:58Z","comment":"Rather than using `whnf`, I think you should unify the goal against `not ?m` and use whatever you get for `?m`. This will ensure that you only unfold what you need to."},{"author":"eric-wieser","date":"2021-09-22T08:24:05Z","comment":"Isn't that essentially what I'm doing? I'm not whnf-ing the goal, I'm copying it and whnf-ing that copy just to see if a `not` would unify."},{"author":"fpvandoorn","date":"2021-09-22T17:49:28Z","comment":"Oh wait, I had a misunderstanding about the logic of the function. This looks good to me.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2021-09-22T18:50:02Z","comment":"Build failed:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3678494847)"},{"author":"bryangingechen","date":"2021-09-22T19:31:48Z","comment":"I've seen that exact failure a few times already on some other PRs here so I think it's spurious. I'll make an issue later.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-22T20:13:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3679427393)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3679427246)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3679427191)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3679427523)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3679427475)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3679427320)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3679427598)"}],"tags":[],"pull_requests":[]},{"author":"BoltonBailey","number":621,"state":"open","open_date":"2021-09-18T23:12:18Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"BoltonBailey","date":"2021-09-18T23:32:12Z","comment":"Actually, after more experimentation, I'm not convinced I understand `repeat` yet."}],"tags":[],"pull_requests":[]},{"author":"urkud","number":620,"state":"closed","open_date":"2021-09-17T01:47:15Z","update_date":"2021-10-22T21:03:45Z","discussion":[{"author":"urkud","date":"2021-09-17T01:58:58Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-09-17T02:01:52Z","comment":"## try\n\nBuild failed:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3627845366)"},{"author":"urkud","date":"2021-09-17T16:55:44Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-09-17T17:55:59Z","comment":"## try\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3634705564)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3634705415)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3634705527)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3634705693)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3634705627)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3634705347)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3634705449)"},{"author":"bors[bot]","date":"2021-09-17T19:51:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3635650866)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3635651159)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3635651135)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3635651062)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3635651018)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3635650932)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3635651225)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"digama0","number":619,"state":"closed","open_date":"2021-09-13T23:36:24Z","update_date":"2021-10-19T15:12:45Z","discussion":[{"author":"gebner","date":"2021-09-29T15:21:43Z","comment":"Does this get us closer to :four_leaf_clover:?  If so:\r\nbors d+"},{"author":"bors[bot]","date":"2021-09-29T15:21:44Z","comment":":v: digama0 can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"digama0","date":"2021-09-30T02:45:35Z","comment":"@gebner This is not explicitly related to lean 4 backporting, but testing the lean 4 behavior reveals that it does match this resolution scheme (not the original/current lean 3 way), with the exception that `open _root_.Foo` does not work; as far as I know there is no way in the lean 4 syntax to select a shadowed namespace name. That is, this brings lean 3 closer to parity to lean 4 and lean 4 is forward-compatible with this scheme."},{"author":"gebner","date":"2021-10-19T14:31:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-19T15:12:40Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3940520791)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3940521405)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3940521315)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3940520590)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3940520504)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3940521026)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3940521559)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":618,"state":"closed","open_date":"2021-09-13T20:16:01Z","update_date":"2021-10-19T15:54:39Z","discussion":[{"author":"digama0","date":"2021-09-13T22:34:00Z","comment":"Hm, the broken test in the first commit reveals an issue with an unclear resolution. What happens is that it tries to `open lift` inside the `test` namespace, with the intention of opening the `test.lift` namespace and referring to `test.lift.up`, but instead it opens the `lift` namespace, resulting in an error.\r\n\r\nThe reason this commit caused the failure is that `lift` was not previously a namespace declared in the standard library, but it is a definition `def lift := ...`, and the changes make it so that the generated `lift.equations._eqn_1` lemma causes `lift` and `lift.equations` to be registered as namespaces.\r\n\r\nPersonally, I don't much like the fact that namespace declarations exist as a concept, considering the user's indirect control over them. But I see why `open` needs to be able to do name resolution, so I won't rock the boat too much here. There are two solutions I see to this:\r\n\r\n1. Live with the fact that there are now lots of namespaces, roughly one for every surface definition, because of equation lemmas. Name resolution for `namespace test   open lift` should probably be tweaked so that it finds `test.lift` instead of `lift` anyway (like name resolution for definitions).\r\n2. Don't generate namespaces for internal names like `lift.equations._eqn_1`.\r\n\r\nI went with option 2 since that makes for less impact. Basically we filter out internal suffixes like `equations._eqn_1` and then only add the parents of `lift` (of which there are none in this case) as new namespaces. There are still some gaps, like `_private.1234.foo._main` will cause `_private` and `_private.1234` to be registered as namespaces, but this doesn't seem like a big deal. Also `list.cons` and other inductive constructors are namespaces now because of autogenerated lemmas like `list.cons.inj_arrow`. I suppose someone could conceivably open these namespaces so I don't think it's worth fixing."},{"author":"gebner","date":"2021-10-19T14:32:05Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-19T15:54:35Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3941052345)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3941053313)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3941053237)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3941052665)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3941052590)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3941052895)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3941053098)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":617,"state":"closed","open_date":"2021-09-13T16:51:49Z","update_date":"2021-09-13T19:49:00Z","discussion":[{"author":"bryangingechen","date":"2021-09-13T16:51:56Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-09-13T17:20:53Z","comment":"Build failed:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3589741425)"},{"author":"bryangingechen","date":"2021-09-13T18:48:23Z","comment":"Strange. Let's try again.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-13T19:48:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3590812276)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3590812452)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3590812397)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3590812563)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3590812516)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3590812164)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3590812647)"}],"tags":[],"pull_requests":[]},{"author":"YaelDillies","number":616,"state":"closed","open_date":"2021-09-13T07:28:46Z","update_date":"2021-09-13T14:50:08Z","discussion":[{"author":"bors[bot]","date":"2021-09-13T14:50:06Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3587758051)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3587758448)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3587758193)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3587758761)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3587758678)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3587758580)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3587758893)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":615,"state":"closed","open_date":"2021-09-12T14:28:12Z","update_date":"2021-10-22T21:03:55Z","discussion":[{"author":"bryangingechen","date":"2021-09-12T14:41:47Z","comment":"Ah, I was a little confused where this came from until I saw that this was added in #609. BTW #124 tracks \"primed\" tactics from mathlib. I don't know if we'll ever get to it now, but I think the plan had been to replace e.g. `reflexivity` in core with `reflexivity'`.\r\n\r\nLGTM.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T15:28:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3579910778)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3579910856)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3579910841)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3579910822)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3579910811)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3579910870)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3579910895)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"digama0","number":614,"state":"closed","open_date":"2021-09-08T21:33:38Z","update_date":"2021-09-12T19:18:49Z","discussion":[{"author":"bryangingechen","date":"2021-09-12T16:36:40Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-09-12T16:48:00Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580300373)"},{"author":"digama0","date":"2021-09-12T17:17:45Z","comment":"bors try"},{"author":"bryangingechen","date":"2021-09-12T18:08:02Z","comment":"Is it worth adding some documentation for `--ast` in this repo (maybe even just a pointer to mathport)?"},{"author":"bors[bot]","date":"2021-09-12T18:12:44Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580436321)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580436262)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580436244)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580436288)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580436373)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580436344)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580436222)"},{"author":"digama0","date":"2021-09-12T18:14:22Z","comment":"I will write some documentation as a `.md` file (in a separate PR)."},{"author":"bryangingechen","date":"2021-09-12T18:18:11Z","comment":"OK, let's merge this now then.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T19:18:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580659577)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580659628)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580659620)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580659547)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580659539)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580659596)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580659643)"}],"tags":[],"pull_requests":[]},{"author":"ericrbg","number":612,"state":"closed","open_date":"2021-09-01T22:40:26Z","update_date":"2021-09-09T11:19:06Z","discussion":[{"author":"digama0","date":"2021-09-09T10:28:50Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-09-09T11:19:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3555034490)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3555034721)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3555034672)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3555034393)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3555034346)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3555034585)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3555034783)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":611,"state":"closed","open_date":"2021-08-31T19:52:51Z","update_date":"2021-09-12T18:24:28Z","discussion":[{"author":"bryangingechen","date":"2021-09-12T16:43:51Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T18:24:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580481599)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580481558)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580481544)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580481508)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580481487)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580481467)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580481578)"}],"tags":[],"pull_requests":[]},{"author":"trevorfancher","number":610,"state":"closed","open_date":"2021-08-31T19:51:22Z","update_date":"2021-09-16T14:24:53Z","discussion":[{"author":"bryangingechen","date":"2021-09-12T16:38:47Z","comment":"Thanks! This was probably just an oversight when we forked.\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T18:24:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580481599)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580481558)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580481544)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580481508)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580481487)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580481467)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580481578)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":609,"state":"closed","open_date":"2021-08-25T03:15:49Z","update_date":"2021-10-22T21:03:57Z","discussion":[{"author":"urkud","date":"2021-08-25T04:36:24Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-08-25T05:29:54Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3418241477)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3418241422)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3418241537)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3418241577)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3418241502)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3418241439)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3418241459)"},{"author":"gebner","date":"2021-08-25T09:37:56Z","comment":"LGTM.  Would it make sense to instead replace min/max by inf/sup completely (i.e. have linear_order extend has_inf and has_sup)?"},{"author":"urkud","date":"2021-08-25T11:57:36Z","comment":"I guess that some people will not be happy about using lattice notation for min and max."},{"author":"gebner","date":"2021-08-25T13:15:20Z","comment":"We could do `infix ⊔ := max`, then you could use both.  But we can also wait until Lean 4, which doesn't have the `def max`, so we will be able to all of this refactoring in mathlib."},{"author":"gebner","date":"2021-08-25T13:15:24Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-25T14:04:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3422297699)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3422297965)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3422297878)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3422298514)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3422298417)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3422298167)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3422298636)"}],"tags":[{"tag":"enhancement","description":"New feature or request"},{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"digama0","number":608,"state":"closed","open_date":"2021-08-23T18:59:59Z","update_date":"2021-08-25T10:21:50Z","discussion":[{"author":"bryangingechen","date":"2021-08-25T05:31:32Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-08-25T06:26:11Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3418541749)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3418541818)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3418541692)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3418541884)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3418541782)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3418541840)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3418541622)"},{"author":"gebner","date":"2021-08-25T09:30:28Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-25T10:21:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3420380660)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3420380841)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3420380790)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3420381052)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3420381009)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3420380917)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3420381113)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":607,"state":"closed","open_date":"2021-08-21T00:45:10Z","update_date":"2021-08-25T11:02:44Z","discussion":[{"author":"gebner","date":"2021-08-25T09:30:51Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-25T11:02:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3420829131)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3420829057)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3420829017)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3420828886)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3420828861)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3420828770)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3420828953)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":606,"state":"closed","open_date":"2021-08-20T08:16:01Z","update_date":"2021-08-20T09:20:11Z","discussion":[{"author":"gebner","date":"2021-08-20T08:19:37Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-20T09:20:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3380014563)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3380014658)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3380014626)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3380014857)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3380014818)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3380014734)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3380014926)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":605,"state":"closed","open_date":"2021-08-18T21:14:27Z","update_date":"2021-09-12T17:32:55Z","discussion":[{"author":"bryangingechen","date":"2021-08-18T21:18:15Z","comment":"This is due to this change in `elan`, right? https://github.com/leanprover/elan/blob/master/CHANGELOG.md#101---2021-04-28"},{"author":"fpvandoorn","date":"2021-08-18T21:22:15Z","comment":"Yes"},{"author":"bryangingechen","date":"2021-09-12T16:37:11Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-09-12T17:32:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3580302477)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3580302445)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3580302429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3580302511)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3580302497)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3580302388)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3580302534)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":604,"state":"closed","open_date":"2021-08-18T21:09:09Z","update_date":"2021-08-18T22:26:47Z","discussion":[{"author":"gebner","date":"2021-08-18T21:25:47Z","comment":"bors r+"},{"author":"gebner","date":"2021-08-18T21:25:57Z","comment":"bors r-"},{"author":"bors[bot]","date":"2021-08-18T21:25:58Z","comment":"Canceled."},{"author":"gebner","date":"2021-08-18T21:26:19Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-18T22:26:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3365767995)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3365768231)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3365768192)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3365768104)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3365768078)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3365768153)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3365768273)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":603,"state":"closed","open_date":"2021-08-18T10:53:42Z","update_date":"2021-08-20T10:01:41Z","discussion":[{"author":"gebner","date":"2021-08-19T15:29:07Z","comment":"The reason for the timeouts seems to be related to strings:\r\n```lean\r\nset_option profiler true\r\nexample (h : 'h' = 'w') : false := by cases h -- before and now 0.4s\r\nexample (h : \"h\" = \"w\") : false := by cases h -- before 0.5s, now 7s\r\nexample (h : ['h'] = ['w']) : false := by cases h -- before 0.4s, now 2.7s\r\n```\r\n\r\nFrom what I can tell, this is because Lean tries to unify `104 < 0xd800` and `119 < 0xd800`.  This used to be fast (and not unifiable), but now it requires computing the inequality (and it's also unifiable now!)."},{"author":"fpvandoorn","date":"2021-08-19T19:28:30Z","comment":"would it make sense to make `nat.ble` irreducible?"},{"author":"gebner","date":"2021-08-19T19:42:51Z","comment":"I'd rather make `nat.le` irreducible.  Making `nat.ble` irreducible means you can't use it in `dec_trivial` anymore."},{"author":"gebner","date":"2021-08-20T08:32:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-20T10:01:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3380494005)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3380493671)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3380493630)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3380493846)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3380493807)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3380493490)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3380493921)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"dselsam","number":602,"state":"closed","open_date":"2021-08-12T13:50:59Z","update_date":"2021-08-12T15:28:51Z","discussion":[{"author":"gebner","date":"2021-08-12T14:41:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-12T15:28:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3312834707)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3312834927)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3312834859)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3312835148)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3312835083)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3312834567)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3312835289)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":601,"state":"closed","open_date":"2021-08-12T10:54:22Z","update_date":"2021-08-12T11:55:03Z","discussion":[{"author":"gebner","date":"2021-08-12T10:56:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-12T11:55:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3310782116)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3310782322)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3310782293)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3310782252)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3310782230)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3310782176)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3310782383)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":600,"state":"closed","open_date":"2021-08-10T10:53:48Z","update_date":"2021-08-10T18:13:39Z","discussion":[{"author":"gebner","date":"2021-08-10T11:20:16Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-10T12:02:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3290276669)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3290276462)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3290276431)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3290276625)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3290276583)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3290276362)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3290276510)"},{"author":"digama0","date":"2021-08-10T18:05:32Z","comment":"Oh dang, I was hoping to get #598 in this. The mathlib upgrade branch I pushed yesterday includes fixes for #598 (although they work without it too) - very few proofs broke. I've renamed it to [`lean-3-32-1`](https://github.com/leanprover-community/mathlib/tree/lean-3-32-1)."},{"author":"gebner","date":"2021-08-10T18:13:39Z","comment":"Ok, didnt realize it was that easy.  Lets make a new release then."}],"tags":[],"pull_requests":[]},{"author":"digama0","number":599,"state":"closed","open_date":"2021-08-06T20:28:53Z","update_date":"2021-08-09T12:01:59Z","discussion":[{"author":"gebner","date":"2021-08-09T11:14:28Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-09T12:01:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3279684244)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3279684331)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3279684303)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3279684063)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3279684032)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3279684166)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3279684371)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":598,"state":"closed","open_date":"2021-08-06T18:16:51Z","update_date":"2021-08-10T18:55:31Z","discussion":[{"author":"gebner","date":"2021-08-09T11:12:44Z","comment":"Given that this already causes lots of errors in core, I'd really like to see the effect on mathlib first.  It's trivial enough to port this unification hint manually if we need it."},{"author":"digama0","date":"2021-08-09T11:16:03Z","comment":"It's true that it causes several errors, but they are all easy to fix, they involve rewriting with `add_succ` when needed. The analogous theorems for `mul_succ` were already using the rewrite. But I agree that we should fix mathlib since if the breakage is too great we may want to back this out."},{"author":"gebner","date":"2021-08-10T18:10:16Z","comment":"bors r+\r\n"},{"author":"bors[bot]","date":"2021-08-10T18:55:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3293595093)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3293594885)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3293594843)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3293594658)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3293594609)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3293595008)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3293594764)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":597,"state":"closed","open_date":"2021-08-05T23:37:59Z","update_date":"2021-08-06T08:48:53Z","discussion":[{"author":"gebner","date":"2021-08-06T07:58:48Z","comment":"I'm positively surprised that you're also trying to port meta code.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-08-06T08:48:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3260175099)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3260175213)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3260175183)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3260175138)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3260175121)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3260175040)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3260175247)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":596,"state":"closed","open_date":"2021-08-04T02:25:54Z","update_date":"2021-08-04T09:11:41Z","discussion":[{"author":"gebner","date":"2021-08-04T07:54:28Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-04T09:11:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3239116542)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3239116443)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3239116377)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3239116309)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3239116239)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3239115953)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3239116118)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":595,"state":"closed","open_date":"2021-08-04T02:25:44Z","update_date":"2021-08-04T09:58:18Z","discussion":[{"author":"gebner","date":"2021-08-04T07:54:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-04T09:58:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3239797074)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3239797462)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3239797438)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3239797372)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3239797341)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3239797170)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3239797520)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":594,"state":"closed","open_date":"2021-08-04T02:25:36Z","update_date":"2021-08-04T09:58:20Z","discussion":[{"author":"gebner","date":"2021-08-04T07:55:08Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-08-04T09:58:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3239797074)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3239797462)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3239797438)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3239797372)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3239797341)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3239797170)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3239797520)"}],"tags":[],"pull_requests":[]},{"author":"ericrbg","number":593,"state":"closed","open_date":"2021-07-28T15:48:25Z","update_date":"2021-07-31T14:18:31Z","discussion":[{"author":"gebner","date":"2021-07-31T13:25:26Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-07-31T14:18:30Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3209178567)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3209178659)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3209178635)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3209178595)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3209178589)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3209178616)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3209178677)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":592,"state":"closed","open_date":"2021-07-23T00:13:55Z","update_date":"2021-08-04T02:26:10Z","discussion":[{"author":"gebner","date":"2021-07-31T13:24:32Z","comment":"LGTM.  Could you please split this PR into one per feature (we squash PRs and the PR title becomes the commit message)?"},{"author":"dselsam","date":"2021-08-04T02:26:10Z","comment":"Split into multiple PRs."}],"tags":[],"pull_requests":[]},{"author":"ericrbg","number":591,"state":"closed","open_date":"2021-07-18T22:04:43Z","update_date":"2021-07-28T15:02:43Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Nicknamen","number":590,"state":"closed","open_date":"2021-07-08T17:37:09Z","update_date":"2021-07-31T15:04:07Z","discussion":[{"author":"gebner","date":"2021-07-31T13:27:25Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-07-31T15:04:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3209356771)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3209356818)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3209356808)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/3209356859)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3209356852)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3209356838)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3209356871)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"fpvandoorn","number":589,"state":"closed","open_date":"2021-06-30T18:38:32Z","update_date":"2021-08-01T17:04:24Z","discussion":[{"author":"gebner","date":"2021-06-30T19:39:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-30T20:18:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2955906931)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2955906818)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2955906788)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2955906614)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2955906579)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2955906704)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2955906425)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":588,"state":"closed","open_date":"2021-06-29T12:57:05Z","update_date":"2021-06-29T14:42:33Z","discussion":[{"author":"gebner","date":"2021-06-29T13:52:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-29T14:42:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2942849434)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2942854036)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2942853990)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2942849749)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2942853688)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2942849799)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2942854118)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":587,"state":"closed","open_date":"2021-06-29T09:53:41Z","update_date":"2021-06-29T10:58:56Z","discussion":[{"author":"gebner","date":"2021-06-29T10:05:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-29T10:58:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2940944355)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2940944566)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2940944528)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2940944655)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2940944616)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2940944449)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2940944726)"}],"tags":[],"pull_requests":[]},{"author":"bentoner","number":586,"state":"closed","open_date":"2021-06-27T12:43:21Z","update_date":"2021-06-28T09:00:35Z","discussion":[{"author":"bentoner","date":"2021-06-28T07:30:44Z","comment":"Hi Gabriel, this isn't ready to be merged.\r\n\r\nPer the chat in Zulip with Patrick, which I'll repeat here, we need to decide how to proceed. I see at least 3 options:\r\n1. Proceed as per this pull request. This results in minimal changes to `leanpkg`, but it is not so nice because now `leanpkg` has to know about the `olean_url` field even though it doesn't do anything with it.\r\n2. Extend `leanpkg` to preserve but ignore fields in `leanpkg.toml` that it doesn't understand. This seems nicer but we lose the benefits of having a schema.\r\n3. Not make any changes to `leanpkg`. We can tell users to avoid it and use `leanproject` instead.\r\n\r\nI'm fine with any of the above (or whatever else you/Patrick prefer).\r\n\r\nSecondly, I realize my implementation of option 1 is incomplete, as described on zulip, which is the other reason why this isn't ready to be merged. I'll fix this later tonight so there's something concrete to decide on."},{"author":"gebner","date":"2021-06-28T07:51:08Z","comment":"I think you should be aware that Lean 3 (and leanpkg and leanproject) is pretty much on life support mode now.  I hope that a year from now we'll have mostly moved over to Lean 4, and I'd be surprised if anybody uses Lean 3 two years from now.  Keep that in mind when putting a lot of effort into Lean 3 tooling.\r\n\r\nI'm happy with all of the options you've listed.  I think the cleanest approach would be to just reimplement the remaining two(?) commands in leanproject and forget about leanpkg.\r\n\r\n> This seems nicer but we lose the benefits of having a schema.\r\n\r\nThe benefits of being able to store extra information in the leanpkg.toml file outweigh the untidyness of lacking a schema in my opinion."},{"author":"bentoner","date":"2021-06-28T09:00:35Z","comment":"Hi Gabriel.\r\n\r\n> I think the cleanest approach would be to just reimplement the remaining two(?) commands in leanproject and forget about leanpkg.\r\n\r\nOkay, let's do that then -- I'll close this. Thanks!"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":583,"state":"closed","open_date":"2021-06-11T12:44:33Z","update_date":"2021-06-11T13:28:03Z","discussion":[{"author":"gebner","date":"2021-06-11T12:45:17Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-11T13:28:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2802991005)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2802990932)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2802990901)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2802991112)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2802991083)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2802991177)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2802991284)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":582,"state":"closed","open_date":"2021-06-01T17:40:58Z","update_date":"2021-06-01T19:37:22Z","discussion":[{"author":"gebner","date":"2021-06-01T18:09:53Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-01T19:37:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2721362625)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2721362791)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2721362767)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2721362537)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2721362519)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2721362693)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2721362863)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":581,"state":"closed","open_date":"2021-06-01T01:00:22Z","update_date":"2021-06-29T13:37:11Z","discussion":[{"author":"gebner","date":"2021-06-29T12:51:15Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-06-29T13:37:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2942278631)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2942278823)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2942278792)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2942278948)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2942278910)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2942278702)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2942278994)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":580,"state":"closed","open_date":"2021-05-27T14:24:19Z","update_date":"2021-05-27T15:34:36Z","discussion":[{"author":"gebner","date":"2021-05-27T14:42:19Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-05-27T15:34:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2686029831)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2686029731)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2686029702)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2686029340)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2686029305)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2686029505)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2686029591)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":579,"state":"closed","open_date":"2021-05-27T13:47:45Z","update_date":"2021-05-27T16:41:36Z","discussion":[{"author":"gebner","date":"2021-05-27T15:38:10Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-05-27T16:41:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2686541028)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2686541571)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2686541525)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2686541316)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2686541260)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2686541427)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2686541137)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":577,"state":"closed","open_date":"2021-05-25T09:59:44Z","update_date":"2021-05-25T12:21:45Z","discussion":[{"author":"gebner","date":"2021-05-25T10:53:46Z","comment":"Seems like a clear improvement.\r\n\r\nbors d+"},{"author":"bors[bot]","date":"2021-05-25T10:53:47Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2021-05-25T10:58:35Z","comment":"Is f72a977 better or worse than the commit before it? I get the feeling they cause the pretty-printer to behave in different ways, but don't know which way is the better way"},{"author":"gebner","date":"2021-05-25T11:07:39Z","comment":"I don't have a preference.  Both look good to me."},{"author":"eric-wieser","date":"2021-05-25T11:08:15Z","comment":"I'll go for the shorter one then. Thanks for the quick review!"},{"author":"eric-wieser","date":"2021-05-25T11:32:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-05-25T12:21:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2664751936)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2664751842)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2664751811)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2664752069)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2664752026)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2664751711)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2664752145)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":574,"state":"closed","open_date":"2021-05-09T22:58:42Z","update_date":"2021-05-10T07:24:18Z","discussion":[{"author":"gebner","date":"2021-05-10T06:30:22Z","comment":"Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-05-10T07:24:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2542856064)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2542856318)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2542856298)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2542856166)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2542856133)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2542856229)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2542856374)"}],"tags":[],"pull_requests":[]},{"author":"hmonroe","number":573,"state":"closed","open_date":"2021-05-06T16:10:41Z","update_date":"2021-05-06T17:32:41Z","discussion":[{"author":"bryangingechen","date":"2021-05-06T16:12:08Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-05-06T17:32:40Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2519985789)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2519985922)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2519985879)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2519985668)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2519985628)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2519985497)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2519986037)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":572,"state":"closed","open_date":"2021-05-06T12:42:00Z","update_date":"2021-05-06T14:03:17Z","discussion":[{"author":"gebner","date":"2021-05-06T12:43:54Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-05-06T14:03:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2518248289)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2518248511)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2518248487)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2518248414)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2518248372)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2518248198)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2518248604)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":571,"state":"closed","open_date":"2021-04-30T13:43:18Z","update_date":"2021-04-30T14:42:30Z","discussion":[{"author":"gebner","date":"2021-04-30T13:51:52Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-04-30T14:42:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2476188664)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2476188921)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2476188888)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2476189049)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2476189023)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2476184722)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2476188773)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":570,"state":"closed","open_date":"2021-04-30T12:31:19Z","update_date":"2021-04-30T16:05:14Z","discussion":[{"author":"gebner","date":"2021-04-30T12:44:35Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-30T13:37:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2475690414)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2475690283)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2475690264)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2475690521)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2475690494)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2475690162)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2475690569)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":569,"state":"closed","open_date":"2021-04-30T10:08:46Z","update_date":"2021-04-30T12:24:22Z","discussion":[{"author":"gebner","date":"2021-04-30T11:05:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-04-30T12:24:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2475082961)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2475082636)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2475082610)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2475083164)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2475083109)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2475082797)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2475083293)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":568,"state":"closed","open_date":"2021-04-26T12:17:40Z","update_date":"2021-04-28T10:50:49Z","discussion":[{"author":"gebner","date":"2021-04-28T09:39:23Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-28T10:50:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2456455181)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2456455467)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2456455443)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2456455372)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2456455347)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2456455541)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2456455596)"}],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"},{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"bentoner","number":567,"state":"closed","open_date":"2021-04-24T18:49:19Z","update_date":"2021-04-28T09:59:21Z","discussion":[{"author":"gebner","date":"2021-04-28T09:14:32Z","comment":"Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-04-28T09:59:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2456113418)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2456113573)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2456113538)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2456113746)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2456113697)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2456113207)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2456113852)"}],"tags":[],"pull_requests":[]},{"author":"kbuzzard","number":566,"state":"closed","open_date":"2021-04-20T16:55:30Z","update_date":"2021-04-20T18:53:46Z","discussion":[{"author":"gebner","date":"2021-04-20T17:47:50Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2021-04-20T18:53:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2393281763)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2393281510)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2393281475)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2393281619)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2393281586)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2393281684)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2393281851)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":565,"state":"closed","open_date":"2021-04-19T09:07:09Z","update_date":"2021-04-19T10:17:04Z","discussion":[{"author":"gebner","date":"2021-04-19T09:30:36Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-19T10:17:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2379433071)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2379432970)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2379432940)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2379433259)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2379433209)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2379431686)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2379433419)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":564,"state":"closed","open_date":"2021-04-16T08:39:00Z","update_date":"2021-04-16T10:20:47Z","discussion":[{"author":"gebner","date":"2021-04-16T09:34:38Z","comment":"bors merge"},{"author":"bors[bot]","date":"2021-04-16T10:20:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2361000825)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2361000907)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2361000890)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2361001046)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2361001018)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2361000959)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2361001125)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":562,"state":"closed","open_date":"2021-04-09T19:13:34Z","update_date":"2021-04-16T09:20:41Z","discussion":[{"author":"dselsam","date":"2021-04-09T19:15:01Z","comment":"I also fixed the definition of fibonacci numbers in one of the tests for @kbuzzard "},{"author":"gebner","date":"2021-04-16T08:26:06Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-16T09:20:40Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2360509930)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2360509819)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2360509790)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2360510052)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2360510030)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2360510107)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2360510163)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":561,"state":"closed","open_date":"2021-04-09T16:22:54Z","update_date":"2021-04-09T18:29:14Z","discussion":[{"author":"gebner","date":"2021-04-09T17:33:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-04-09T18:29:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2308050832)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2308050563)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2308050546)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2308050775)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2308050743)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2308050682)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2308050627)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":560,"state":"closed","open_date":"2021-03-28T06:31:55Z","update_date":"2021-03-29T12:02:41Z","discussion":[{"author":"gebner","date":"2021-03-29T11:14:39Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-29T12:02:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2217913665)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2217913612)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2217913586)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2217913494)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2217913465)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2217913773)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2217913870)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":558,"state":"closed","open_date":"2021-03-28T01:26:09Z","update_date":"2021-03-29T13:09:48Z","discussion":[{"author":"gebner","date":"2021-03-29T11:15:23Z","comment":"This is wonderful, thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-03-29T13:09:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2218217319)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2218217548)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2218217465)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2218217799)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2218217763)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2218217664)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2218217889)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":557,"state":"closed","open_date":"2021-03-18T15:54:27Z","update_date":"2021-10-22T21:03:51Z","discussion":[{"author":"gebner","date":"2021-03-18T16:05:05Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-18T16:20:33Z","comment":"## try\n\nBuild failed:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2141330100)"},{"author":"eric-wieser","date":"2021-03-19T13:19:23Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-19T13:26:43Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2148763579)"},{"author":"urkud","date":"2021-03-21T23:02:50Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-21T23:58:29Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2161802495)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2161802584)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2161802621)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2161802537)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2161802505)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2161802598)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2161802563)"},{"author":"urkud","date":"2021-03-25T20:36:47Z","comment":"The following example fails with the new `has_coe_to_sort`:\r\n```lean\r\nuniverse u\r\n\r\ninstance {α : Type u} : has_coe_to_sort (set α) (Type u) := ⟨λ s, {x // x ∈ s}⟩\r\n\r\nexample : ↥({0} : set ℕ) := ⟨0, rfl⟩\r\n```\r\nError: \"5:29: invalid constructor ⟨...⟩, 'has_coe_to_sort.coe' is not an inductive type\"\r\n\r\nI have no idea why this happens."},{"author":"bryangingechen","date":"2021-03-26T12:57:54Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-26T13:44:01Z","comment":"## try\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2201939466)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2201939677)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2201939495)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2201939792)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2201939645)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2201939577)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2201939402)"},{"author":"eric-wieser","date":"2021-07-06T08:12:25Z","comment":"What's the status of this PR?"},{"author":"gebner","date":"2021-10-19T16:55:40Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-10-19T22:37:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/3944976544)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/3944976504)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/3944976474)\n  * Build macos Debug\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/3944976412)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/3944976611)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/3944976659)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"gebner","number":556,"state":"open","open_date":"2021-03-17T17:46:44Z","update_date":"2022-06-09T08:34:10Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":555,"state":"closed","open_date":"2021-03-16T11:22:12Z","update_date":"2022-05-31T14:07:06Z","discussion":[{"author":"gebner","date":"2021-03-16T16:46:35Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-16T17:28:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2123582538)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2123582314)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2123582292)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2123582445)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2123582420)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2123582108)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2123582680)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":554,"state":"closed","open_date":"2021-03-15T14:27:26Z","update_date":"2021-03-15T15:27:39Z","discussion":[{"author":"bryangingechen","date":"2021-03-15T14:27:34Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-15T15:27:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2113415262)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2113415115)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2113415079)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2113415434)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2113415407)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2113415534)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2113415657)"}],"tags":[],"pull_requests":[]},{"author":"timlacroix","number":552,"state":"closed","open_date":"2021-03-11T08:35:53Z","update_date":"2021-03-11T09:58:59Z","discussion":[{"author":"gebner","date":"2021-03-11T09:11:58Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-11T09:58:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2084854090)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2084854354)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2084854334)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2084854207)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2084854192)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2084853896)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2084854427)"}],"tags":[],"pull_requests":[]},{"author":"pechersky","number":551,"state":"closed","open_date":"2021-03-10T15:53:23Z","update_date":"2021-07-07T20:50:58Z","discussion":[{"author":"bryangingechen","date":"2021-03-10T16:08:02Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-10T16:54:23Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2078537288)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2078537154)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2078537427)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2078537185)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2078537030)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2078536862)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2078537326)"},{"author":"bryangingechen","date":"2021-03-15T13:35:12Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-15T14:01:54Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2112983524)"},{"author":"sgouezel","date":"2021-03-17T20:15:35Z","comment":"Do you understand what breaks in the build? If it could build, I would try to fix mathlib to see how painful this is."},{"author":"pechersky","date":"2021-03-17T21:16:00Z","comment":"> Do you understand what breaks in the build? If it could build, I would try to fix mathlib to see how painful this is.\r\n\r\nThe test that fails has the content:\r\n```\r\nexample : 1000 * 1000 = 123456 :=\r\nrfl\r\n```\r\nand the expected output as:\r\n```\r\n1956.lean:1:0: error: deep recursion was detected at 'replace' (potential solution: increase stack space in your system)\r\n```\r\nBecause of the difference in multiplication, now `rfl` is chugging chugging chugging and hitting the timeout, instead of hitting the `deep recursion` error message. So in some ways, it's not a failed test in that there is no \"correct\" behavior, but it is not great because it means that with the new definition, this deep loop isn't caught."},{"author":"pechersky","date":"2021-03-17T21:16:15Z","comment":"For testing mathlib, it shouldn't cause problems."},{"author":"digama0","date":"2021-03-17T21:21:29Z","comment":"That sounds like an improvement, like something that was not tail recursive is now tail recursive and being optimized better."},{"author":"pechersky","date":"2021-03-17T21:46:02Z","comment":"I've pushed some proof improvements and deleted the test. It builds on my machine (haven't ran the tests)."},{"author":"bryangingechen","date":"2021-03-17T21:47:28Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-03-17T22:06:29Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2134886326)"},{"author":"pechersky","date":"2021-03-17T22:24:58Z","comment":"The line that's currently breaking is\r\n```\r\ndef ints : list ℤ :=\r\n(do i ← list.range 40, [-i, i]) ++\r\n(do s ← [-1,1], j ← list.range 20, [s*(2^31:nat) + j-10])\r\n\r\nrun_cmd verify $ ∀ x ∈ ints, ∀ y ∈ ints, is_ok $ int.mul x y\r\n```\r\n\r\nWhen `x ∈ small_ints, y ∈ ints`, it's fine, but `x ∈ ints, y ∈ small_ints` it is not."},{"author":"gebner","date":"2021-03-18T10:20:15Z","comment":"> When x ∈ small_ints, y ∈ ints, it's fine, but x ∈ ints, y ∈ small_ints it is not.\r\n\r\nThat's ok to swap.  This test checks that definitional reduction and VM computation agree.  Depending on which argument is recursive in mul, you can only use definitional reduction with small left/right arguments."},{"author":"gebner","date":"2021-03-18T13:43:39Z","comment":"Another difference leading to the `small_ints` issue that I didn't notice earlier is that the definition of `int.mul` has changed. Previously it was defined in terms of `nat.mul`, so it would also for large numbers.  Now it is defined in terms of `int.smul`, which uses `nat.rec` and that one is exponential in the size of the argument.\r\n\r\nbors try"},{"author":"pechersky","date":"2021-03-18T14:43:48Z","comment":"How do I tag this release so that Sebastien can point his toml to it? Any tagging I do is only for my repo."},{"author":"bors[bot]","date":"2021-03-18T14:48:08Z","comment":"## try\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2140142808)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2140142528)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2140142565)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2140142939)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2140142649)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2140142680)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2140142877)"},{"author":"gebner","date":"2021-03-18T15:26:08Z","comment":"> Any tagging I do is only for my repo.\r\n\r\nIt would work fine if you didn't put a slash into the tag name. (And start it with a letter.)\r\n\r\nHere is an example tag that works: https://github.com/urkud/lean/releases/tag/dropDLO2\r\n```\r\nlean +urkud/lean:dropDLO2\r\n```"},{"author":"pechersky","date":"2021-03-18T15:41:04Z","comment":"OK, I've pushed the `pr511` tag to my repo: https://github.com/pechersky/lean/releases/tag/pr511. Is there a way to get it to update to point to the built gz files?"},{"author":"gebner","date":"2021-03-18T15:48:50Z","comment":"Hmm, maybe you need to enable github actions on your repo?"},{"author":"pechersky","date":"2021-03-18T18:10:48Z","comment":"I tried making the toml change on the mathlib branch, but got this failure in the CI:\r\nhttps://github.com/leanprover-community/mathlib/runs/2141539845?check_suite_focus=true\r\n```\r\nRun leanpkg configure\r\n\r\nWARNING: Lean version mismatch: installed version is leanprover-community/lean:3.27.0, but package requires pechersky/lean:pr511\r\n\r\nconfiguring mathlib 0.1\r\n```"},{"author":"gebner","date":"2021-03-18T18:23:26Z","comment":"@pechersky That's just a warning.  The error is below."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":550,"state":"closed","open_date":"2021-03-08T15:49:39Z","update_date":"2021-03-11T18:36:51Z","discussion":[{"author":"fpvandoorn","date":"2021-03-08T16:11:30Z","comment":"The test looks great! It also works for other ways to define declarations, like mutual inductives, mutual defs, nested inductives?"},{"author":"gebner","date":"2021-03-08T18:20:46Z","comment":"> The test looks great! It also works for other ways to define declarations, like mutual inductives, mutual defs, nested inductives?\r\n\r\nMutual defs already worked.  I've also fixed mutual inductives now."},{"author":"gebner","date":"2021-03-11T17:51:56Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-11T18:36:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2088575750)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2088575844)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2088575811)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2088575982)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2088575956)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2088575908)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2088576039)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":549,"state":"closed","open_date":"2021-03-08T12:15:58Z","update_date":"2021-03-08T13:24:45Z","discussion":[{"author":"gebner","date":"2021-03-08T12:43:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-08T13:24:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2056489014)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2056489126)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2056489106)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2056489268)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2056489247)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2056489180)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2056489345)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":548,"state":"closed","open_date":"2021-03-08T10:35:28Z","update_date":"2021-03-08T11:46:05Z","discussion":[{"author":"gebner","date":"2021-03-08T10:59:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-08T11:46:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2055843518)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2055843295)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2055843262)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2055843415)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2055843397)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2055843465)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2055843353)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":547,"state":"closed","open_date":"2021-03-05T05:06:20Z","update_date":"2021-03-05T09:15:16Z","discussion":[{"author":"gebner","date":"2021-03-05T08:17:41Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-05T09:15:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2038125572)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2038125698)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2038125659)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2038125963)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2038125906)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2038125804)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2038126044)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":545,"state":"closed","open_date":"2021-03-04T23:31:43Z","update_date":"2021-03-08T16:47:27Z","discussion":[{"author":"fpvandoorn","date":"2021-03-04T23:42:02Z","comment":"The three remaining test failures all depend on the fact that some proofs declarations are `def`, not `lemma`. \r\n\r\nIn two tests this is the case because they receive the `@[pattern]` attribute\r\nIn one test an equational lemma of such a declaration is retrieved with metaprogramming.\r\n\r\nI'm not sure what the best solution is. The tests don't seem very useful to me, so we could remove them? Or I could revert the three relevant lemmas back to `def`s."},{"author":"gebner","date":"2021-03-05T08:15:50Z","comment":"> I'm not sure what the best solution is. The tests don't seem very useful to me, so we could remove them? Or I could revert the three relevant lemmas back to defs.\r\n\r\nPlease remove the tests in this case.  AFAICT they should reduce for well-founded recursion?  I don't think this ever reliably worked at all.\r\n\r\n(There is theoretically also a `set_option type_context.unfold_lemmas true` option, but I wouldn't bother.)"},{"author":"gebner","date":"2021-03-08T15:59:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-08T16:47:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2057936568)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2057936249)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2057936214)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2057936390)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2057936357)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2057936478)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2057936066)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"fpvandoorn","number":544,"state":"closed","open_date":"2021-03-04T21:28:02Z","update_date":"2021-03-08T17:38:12Z","discussion":[{"author":"gebner","date":"2021-03-04T21:55:52Z","comment":"bors d=EdAyers"},{"author":"bors[bot]","date":"2021-03-04T21:55:53Z","comment":":v: EdAyers can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"gebner","date":"2021-03-08T15:59:49Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-03-08T17:38:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/2058333983)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/2058334565)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/2058334534)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/2058334753)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/2058334735)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/2058334376)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/2058335228)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":541,"state":"closed","open_date":"2021-02-26T15:01:28Z","update_date":"2021-02-26T16:08:44Z","discussion":[{"author":"gebner","date":"2021-02-26T15:22:32Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-26T16:08:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1988556821)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1988556999)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1988556980)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1988557077)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1988557056)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1988556926)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1988557148)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":540,"state":"closed","open_date":"2021-02-26T10:29:00Z","update_date":"2021-02-26T12:52:20Z","discussion":[{"author":"gebner","date":"2021-02-26T11:14:54Z","comment":"bors r+"},{"author":"eric-wieser","date":"2021-02-26T11:27:13Z","comment":"Alarmingly the mac build is segfaulting on test 480..."},{"author":"gebner","date":"2021-02-26T12:06:00Z","comment":"bors r-\r\nbors cancel"},{"author":"bors[bot]","date":"2021-02-26T12:06:01Z","comment":"Canceled."},{"author":"gebner","date":"2021-02-26T12:07:33Z","comment":"Oh wait, it worked when bors ran the CI.  So this is indeed alarming since it happens nondeterministically.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-02-26T12:52:17Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1987326948)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1987326743)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1987326716)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1987326825)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1987326809)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1987326869)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1987326999)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":539,"state":"closed","open_date":"2021-02-25T10:47:39Z","update_date":"2021-02-25T12:25:02Z","discussion":[{"author":"gebner","date":"2021-02-25T11:37:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T12:24:59Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978644332)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978644245)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978644216)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978634820)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978644144)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978634768)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978644289)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":538,"state":"closed","open_date":"2021-02-25T10:02:01Z","update_date":"2021-02-25T11:04:51Z","discussion":[{"author":"gebner","date":"2021-02-25T10:07:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":537,"state":"closed","open_date":"2021-02-25T09:31:12Z","update_date":"2021-02-25T11:04:53Z","discussion":[{"author":"gebner","date":"2021-02-25T09:44:33Z","comment":"Hmm, mathlib still builds.  I'm surprised.\r\n\r\nbors r+"},{"author":"gebner","date":"2021-02-25T10:05:06Z","comment":"bors r-"},{"author":"bors[bot]","date":"2021-02-25T10:05:07Z","comment":"Canceled."},{"author":"gebner","date":"2021-02-25T10:07:24Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":535,"state":"closed","open_date":"2021-02-19T18:07:43Z","update_date":"2021-02-19T20:24:13Z","discussion":[{"author":"gebner","date":"2021-02-19T19:37:11Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-19T20:24:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1937984926)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1937984878)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1937984854)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1937984809)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1937984786)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1937984726)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1937984981)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":534,"state":"closed","open_date":"2021-02-19T14:09:05Z","update_date":"2021-02-19T17:54:28Z","discussion":[{"author":"gebner","date":"2021-02-19T17:17:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-19T17:54:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1937134029)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1937133983)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1937133946)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1937133887)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1937133866)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1937133801)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1937134086)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":533,"state":"open","open_date":"2021-02-18T12:32:29Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"gebner","date":"2021-02-18T13:24:57Z","comment":"IIRC it was intentional that the type parameter of list and option is in Type instead of Sort, as this simplifies type inference.  Have you tried compiling mathlib with this change?"},{"author":"eric-wieser","date":"2021-02-18T13:26:13Z","comment":"I have not at any point tried to build lean itself locally, and was relying on CI to do that. Presumably once this build passes, I can create a mathlib branch that points to this branch, and have CI test that too?"},{"author":"gebner","date":"2021-02-18T13:53:45Z","comment":"You need to make a tag for the CI to upload a release.  Please make the tag on your own fork."},{"author":"eric-wieser","date":"2021-02-18T17:27:13Z","comment":"Build is full of failures with trivial goals that `simp` isn't closing:\r\n```lean\r\n/home/runner/work/lean/lean/library/init/data/list/lemmas.lean:25:3: error: tactic failed, there are unsolved goals\r\nstate:\r\ncase list.cons\r\nα : Type u,\r\nt_hd : α,\r\nt_tl : list α,\r\nt_ih : t_tl ++ nil = t_tl\r\n⊢ t_hd = t_hd ∧ t_tl = t_tl\r\n```\r\nI guess I'll have to try this locally..."}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":532,"state":"closed","open_date":"2021-02-17T08:21:04Z","update_date":"2021-02-25T11:04:56Z","discussion":[{"author":"gebner","date":"2021-02-25T09:32:43Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":531,"state":"closed","open_date":"2021-02-12T03:38:04Z","update_date":"2021-02-25T10:25:34Z","discussion":[{"author":"bryangingechen","date":"2021-02-12T04:03:19Z","comment":"In lieu of running `bors try` here, here's a link to the results of CI on the first commit, which shows 6 broken tests: https://github.com/dselsam/lean3/runs/1884575459#step:9:2914"},{"author":"dselsam","date":"2021-02-12T17:20:55Z","comment":"Sorry, rusty on the protocol. Fixed."},{"author":"gebner","date":"2021-02-25T09:31:50Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T10:25:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1977779178)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1977779046)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1977779011)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1977779261)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1977779240)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1977779325)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1977779404)"}],"tags":[],"pull_requests":[]},{"author":"shingtaklam1324","number":530,"state":"closed","open_date":"2021-02-11T04:11:17Z","update_date":"2021-02-25T11:04:55Z","discussion":[{"author":"shingtaklam1324","date":"2021-02-11T09:41:57Z","comment":"There is also a set of tests at https://github.com/leanprover-community/mathlib/pull/6150/files#diff-bf742064f8ef6e229c0fa7b5df4c4b97b090242eae93579926f970c5856ccaa8 but I'm not sure how the tests work in this repo."},{"author":"bryangingechen","date":"2021-02-11T15:53:13Z","comment":"There's some explanation [here](https://github.com/leanprover-community/lean/blob/master/doc/fixing_tests.md), but it should also be fine to let CI tell us what's broken:\r\n\r\nbors try"},{"author":"bors[bot]","date":"2021-02-11T16:04:07Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1880654657)"},{"author":"bryangingechen","date":"2021-02-11T16:32:52Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-11T17:24:03Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1880929482)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1880929850)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1880929642)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1880929513)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1880929670)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1880929766)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1880929924)"},{"author":"gebner","date":"2021-02-25T09:35:09Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":528,"state":"closed","open_date":"2021-02-03T00:23:42Z","update_date":"2021-02-11T17:18:30Z","discussion":[{"author":"gebner","date":"2021-02-11T16:34:03Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-11T17:18:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1880940416)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1880940326)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1880940304)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1880940505)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1880940479)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1880940638)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1880940562)"}],"tags":[],"pull_requests":[]},{"author":"pechersky","number":527,"state":"closed","open_date":"2021-02-02T18:12:41Z","update_date":"2021-03-08T16:04:57Z","discussion":[{"author":"bryangingechen","date":"2021-02-02T18:15:34Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-02T18:58:43Z","comment":"## try\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1816814980)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1816815167)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1816815005)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1816815130)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1816815192)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1816815223)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1816815085)"},{"author":"pechersky","date":"2021-02-02T19:50:30Z","comment":"It's used in `init/meta/name`:\r\n```\r\n/-- Reflect a C++ name object. The VM replaces it with the C++ implementation. -/\r\ninductive name\r\n| anonymous  : name\r\n| mk_string  : string → name → name\r\n| mk_numeral : unsigned → name → name\r\n```\r\n\r\nSome parts of the code supply a numeral directly for `mk_numeral`. I initally ripped all the `unsigned/ops` out, but that broke the `tests/lean/run/quote1.lean` at `#check ``f`. So I had to bring back the most basic support for numerals for unsigned.\r\n\r\nHowever, I ripped out numeral support for `fin`, and had to change `tests/lean/run/array1.lean` to explicit construction of a `2` using constructor syntax."},{"author":"bryangingechen","date":"2021-02-02T19:53:33Z","comment":"Right, I saw that but I wasn't sure how the `add` operation was used there. Maybe something in the C++?"},{"author":"gebner","date":"2021-03-08T16:02:04Z","comment":"Given the future of Lean 4, I don't think this is the right direction.  Lean 4 has `Fin` in core, and it has the same operations that we will soon have in Lean 3 (see #541)."}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":526,"state":"closed","open_date":"2021-02-01T12:50:26Z","update_date":"2021-02-01T14:28:01Z","discussion":[{"author":"gebner","date":"2021-02-01T13:44:47Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-01T14:27:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1806986740)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1806986896)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1806986873)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1806986821)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1806986790)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1806986648)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1806986942)"}],"tags":[],"pull_requests":[]},{"author":"pechersky","number":525,"state":"closed","open_date":"2021-02-01T01:42:17Z","update_date":"2021-02-01T02:44:36Z","discussion":[{"author":"bryangingechen","date":"2021-02-01T02:28:57Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-01T02:35:29Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1803536702)"},{"author":"bryangingechen","date":"2021-02-01T02:41:09Z","comment":"Looks like the build errors start [here](https://github.com/leanprover-community/lean/runs/1803536702#step:5:992). You could potentially try removing more stuff, but it looks to me like later on the widget code may require some of this, so I'm not sure if this will ultimately be successful."},{"author":"pechersky","date":"2021-02-01T02:42:39Z","comment":"Ah, I see, doc-gen doesn't gather the \"Imported by\" in https://leanprover-community.github.io/mathlib_docs/init/data/fin/ops.html to properly point to `library/init/data/fin/default`. OK, more work necessary before this can be done."}],"tags":[],"pull_requests":[]},{"author":"dselsam","number":524,"state":"closed","open_date":"2021-01-29T19:24:22Z","update_date":"2021-02-02T10:31:58Z","discussion":[{"author":"digama0","date":"2021-01-29T19:29:17Z","comment":"Does the `.tlean` format have more information than the `.olean` files? Why not process `.olean` directly?"},{"author":"dselsam","date":"2021-01-29T21:30:11Z","comment":"A few considerations.\r\n\r\n- The `tlean_exporter` unfolds all macros, but currently mathlib cannot be built at trust level 0. Thus as is, the `.olean` files will necessarily not unfold all macros and so will contain different information than the `.tlean` files.\r\n- Generally speaking, the `.tlean` files have less information. Writing a separate exporter allows us to add features incrementally. If we tried to deserialize the `.olean` files directly, we would need to implement deserializers for every corresponding serializer before deserialization would work at all.\r\n- The `.tlean` format is simpler and easier to parse (at the cost of being less space-efficient).\r\n- It may come in handy to be able store additional information that is not needed for the `.olean`s.\r\n- Realistically, I would prefer to simply never have this branch merged than to rewrite it to parse the `.olean`s."},{"author":"digama0","date":"2021-01-29T21:52:39Z","comment":"Regarding macros, it seems like we will want access to the fact that a macro existed at a certain place, since a lot of annotations take that form. If the export happens at trust level 0 and everything is being unfolded, then the resulting objects will be harder to work with programmatically on the lean 4 side for any use besides handing them straight off to the kernel.\r\n\r\nI think the name `--port` is not representative. Perhaps a better name is `--make --tlean` or `--make --text`, since this doesn't really have anything to do with porting, it's just an ascii version of the olean files. Other approaches for controlling whether olean or tlean or both are generated would also work."},{"author":"dselsam","date":"2021-01-30T01:49:28Z","comment":"> The export shouldn't happen when writing the olean files though. Can you move this to `shell/lean.cpp` please? That is, do something like we do now for `--export`:\r\n> \r\n> ```c++\r\n> if (port_mode) {\r\n>     for (auto & mod : mods) {\r\n>         auto res = get(mod.m_mod_info->m_result);\r\n> \r\n>         auto tlean_fn = tlean_of_lean(mod.m_id);\r\n>         exclusive_file_lock output_lock(tlean_fn);\r\n>         std::ofstream out(tlean_fn);\r\n>         write_module_tlean(*res.m_loaded_module, out);\r\n>         out.close();\r\n>         if (!out) throw exception(\"failed to write tlean file\");\r\n>     }\r\n> }\r\n> ```\r\n\r\nI updated the PR to do this at the end but in parallel. Could you please sanity check my use of library tasks?\r\n"},{"author":"dselsam","date":"2021-01-30T01:52:47Z","comment":"> I think the name `--port` is not representative. Perhaps a better name is `--make --tlean` or `--make --text`, since this doesn't really have anything to do with porting, it's just an ascii version of the olean files. Other approaches for controlling whether olean or tlean or both are generated would also work.\r\n\r\nAgreed. I will change to `--tlean`."},{"author":"dselsam","date":"2021-01-30T02:01:55Z","comment":"> Regarding macros, it seems like we will want access to the fact that a macro existed at a certain place, since a lot of annotations take that form. If the export happens at trust level 0 and everything is being unfolded, then the resulting objects will be harder to work with programmatically on the lean 4 side for any use besides handing them straight off to the kernel.\r\n\r\nI agree we may want more annotations, though we can get pretty far with kernel-friendly terms such as `id_delta`. For example, `simp` could tag the proofs it returns with `tagSimp`."},{"author":"dselsam","date":"2021-02-01T14:19:05Z","comment":"> The task code is ok AFAICT.\r\n\r\nThe task code isn't always generating all the `.tlean` files for some reason. If you don't know what the issue is, perhaps we should just stick with the sequential version for now. It does not get run very often."},{"author":"gebner","date":"2021-02-01T14:33:34Z","comment":"bors cancel"},{"author":"gebner","date":"2021-02-01T14:33:40Z","comment":"bors r-"},{"author":"bors[bot]","date":"2021-02-01T14:33:41Z","comment":"Canceled."},{"author":"gebner","date":"2021-02-01T14:41:25Z","comment":"Ok, I'm really confused what I've been reviewing.  You have both a `lean` and a `lean3` repository, and they have *slightly* different code.  I have been testing the code from `lean`, but I should've looked at `lean3`, right?\r\n\r\nCould you also please check the \"allow edits from maintainers\" checkbox in the PR?"},{"author":"dselsam","date":"2021-02-01T14:56:02Z","comment":"This PR is from `dselsam/lean3:master`. GitHub would not let me PR from `dselsam/lean`. \r\n\r\n> Could you also please check the \"allow edits from maintainers\" checkbox in the PR?\r\n\r\nIt was already checked. \r\n\r\nHere is the task code I was referring to that doesn't seem to always finish waiting: \r\nhttps://github.com/dselsam/lean3/blob/master/src/shell/lean.cpp#L756-L773"},{"author":"gebner","date":"2021-02-01T15:14:13Z","comment":"Apparently, the locking code doesn't like parallelism too much:\r\n```\r\nerror: failed to lock file 1 '/home/gebner/mathlib/src/algebraic_geometry/structure_sheaf.tlean': Too many open files\r\n```\r\n\r\nRemoving the `exclusive_file_lock` doesn't fix all the errors either, so I've just reverted it back to the sequential version."},{"author":"gebner","date":"2021-02-01T15:15:24Z","comment":"bors try"},{"author":"dselsam","date":"2021-02-01T15:17:11Z","comment":"@gebner Great find, thanks! "},{"author":"bors[bot]","date":"2021-02-01T15:25:33Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1807623584)"},{"author":"gebner","date":"2021-02-01T16:21:18Z","comment":"I've added the tlean export to the CI.  Apparently it fails in debug mode: https://github.com/dselsam/lean3/runs/1807719169\r\n```\r\nexporting /home/runner/work/lean3/lean3/library/init/core.tlean\r\nLEAN ASSERTION VIOLATION\r\nFile: /home/runner/work/lean3/lean3/src/frontends/lean/parse_table.cpp\r\nLine: 129\r\nTask: : \r\nc->m_kind == action_kind::Expr || c->m_kind == action_kind::Exprs || c->m_kind == action_kind::ScopedExpr || c->m_kind == action_kind::Binder || c->m_kind == action_kind::Binders\r\n(C)ontinue, (A)bort/exit, (S)top/trap\r\n```"},{"author":"dselsam","date":"2021-02-01T16:27:09Z","comment":"Thanks, I will fix."},{"author":"gebner","date":"2021-02-01T19:09:46Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-01T19:20:19Z","comment":"## try\n\nBuild failed:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1809255233)"},{"author":"bryangingechen","date":"2021-02-02T01:48:17Z","comment":"bors try"},{"author":"bors[bot]","date":"2021-02-02T02:24:22Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1811376793)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1811376735)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1811376826)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1811376757)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1811376806)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1811376771)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1811376685)"},{"author":"gebner","date":"2021-02-02T09:48:35Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-02T10:31:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1813539327)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1813539232)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1813539190)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1813539050)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1813539018)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1813539120)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1813539281)"}],"tags":[],"pull_requests":[]},{"author":"Julian-Kuelshammer","number":523,"state":"closed","open_date":"2021-01-28T21:04:02Z","update_date":"2021-01-28T21:36:51Z","discussion":[{"author":"gebner","date":"2021-01-28T21:12:50Z","comment":"Additional lemmas should always go to mathlib.  Only stuff that needs to be in core (e.g. because it used to define tactics or overriden in the VM) should be in core."},{"author":"bryangingechen","date":"2021-01-28T21:36:51Z","comment":"Specifically, this lemma should go in `data.nat.basic` somewhere in this section: https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/basic.lean#L734"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":522,"state":"closed","open_date":"2021-01-26T20:54:36Z","update_date":"2021-01-26T21:37:54Z","discussion":[{"author":"bryangingechen","date":"2021-01-26T20:55:19Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-26T21:37:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1772320391)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1772320474)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1772320458)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1772320644)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1772320615)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1772320558)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1772320685)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":520,"state":"closed","open_date":"2021-01-24T19:06:30Z","update_date":"2021-01-25T09:20:07Z","discussion":[{"author":"gebner","date":"2021-01-25T08:43:38Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-25T09:20:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1760647378)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1760647287)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1760647268)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1760647332)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1760647310)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1760647224)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1760647422)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"gebner","number":519,"state":"closed","open_date":"2021-01-20T18:26:31Z","update_date":"2021-01-21T09:36:26Z","discussion":[{"author":"gebner","date":"2021-01-21T08:56:32Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-21T09:36:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1740595613)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1740595802)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1740597011)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1740597138)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1740597129)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1740595840)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1740597169)"}],"tags":[],"pull_requests":[]},{"author":"ChrisHughes24","number":518,"state":"closed","open_date":"2021-01-16T21:02:47Z","update_date":"2021-01-17T17:09:06Z","discussion":[{"author":"gebner","date":"2021-01-17T16:34:50Z","comment":"I'm not sure this was originally a typo, `r` is \"infix\" here.  But it's indeed misleading.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2021-01-17T17:09:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1717350866)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1717350753)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1717350746)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1717350804)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1717350786)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1717350851)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1717350829)"}],"tags":[],"pull_requests":[]},{"author":"jesse-michael-han","number":517,"state":"closed","open_date":"2021-01-15T15:47:23Z","update_date":"2021-01-15T20:45:18Z","discussion":[{"author":"gebner","date":"2021-01-15T20:09:40Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-15T20:45:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1710927145)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1710926996)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1710926975)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1710927060)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1710927034)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1710927100)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1710927187)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":514,"state":"closed","open_date":"2021-01-04T12:14:39Z","update_date":"2021-01-04T13:01:57Z","discussion":[{"author":"gebner","date":"2021-01-04T12:20:59Z","comment":"Mathlib builds w/o changes."},{"author":"gebner","date":"2021-01-04T12:21:29Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-04T13:01:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1643690229)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1643690173)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1643690153)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1643690115)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1643690099)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1643680071)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1643690198)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":513,"state":"closed","open_date":"2021-01-02T17:27:30Z","update_date":"2021-01-03T11:47:27Z","discussion":[{"author":"EdAyers","date":"2021-01-03T10:27:29Z","comment":"I wanted to double check that it doesn't break mathlib but I've done that now"},{"author":"gebner","date":"2021-01-03T11:00:54Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-03T11:47:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1639321797)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1639321784)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1639321748)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1639321820)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1639321716)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1639321705)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1639321767)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":510,"state":"closed","open_date":"2020-12-27T15:47:47Z","update_date":"2021-01-08T18:23:38Z","discussion":[{"author":"EdAyers","date":"2020-12-27T15:49:01Z","comment":"Currently the test breaks because for some reason when the parser is initialised it doesn't pick up the passed string."},{"author":"EdAyers","date":"2021-01-08T13:12:43Z","comment":"A test is failing:\r\n```lean\r\nrun_cmd do {ps ← lean.parser.mk_parser_state, tactic.trace ps.cur_pos}\r\n```\r\n\r\nthis code is nondeterministic. I've observed it producing `⟨1,0⟩` or `⟨32641, 1932892776⟩` or `⟨0,2⟩` :-/\r\nI guess somewhere a dead pointer is being dereferenced."},{"author":"EdAyers","date":"2021-01-08T13:19:08Z","comment":"Ok I think that the scanner does not initialise position information until scanning has started, so if you immediately read `scanner.m_line` you just get stack rubble. So I am going to remove this test."},{"author":"gebner","date":"2021-01-08T17:43:23Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-08T18:23:35Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1670195937)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1670195743)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1670195721)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1670195826)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1670195798)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1670195877)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1670195663)"}],"tags":[],"pull_requests":[]},{"author":"jesse-michael-han","number":509,"state":"closed","open_date":"2020-12-26T21:06:34Z","update_date":"2020-12-28T04:16:06Z","discussion":[{"author":"EdAyers","date":"2020-12-27T21:21:46Z","comment":"lgtm!"},{"author":"EdAyers","date":"2020-12-27T21:22:09Z","comment":"I wonder if I can \r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-12-27T21:22:10Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make EdAyers a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/EdAyers)\n"},{"author":"EdAyers","date":"2020-12-27T21:23:04Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-12-27T21:23:05Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make EdAyers a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/EdAyers)\n"},{"author":"digama0","date":"2020-12-28T03:35:44Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-12-28T04:16:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1615729116)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1615729167)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1615729153)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1615729176)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1615729195)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1615729182)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1615729138)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"eric-wieser","number":508,"state":"closed","open_date":"2020-12-18T10:59:49Z","update_date":"2021-02-25T11:05:01Z","discussion":[{"author":"eric-wieser","date":"2021-01-27T12:52:48Z","comment":"Looks like I did a really bad job of copying my working version over into lean core. Should all be fixed now."},{"author":"sorawee","date":"2021-01-27T20:56:50Z","comment":"I don't know if this is unreasonable or not, but it would be nice if this function can be split into `case_core` and `case`, where `case_core` returns `tactic (list expr × list expr)` which is a pair of `unsolved_goals` and `remaining_goals`. The implementation of `focus_case` (as discussed in https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Multiple.20case) would then simply be:\r\n\r\n```\r\ndo (unsolved_goals, remaining_goals) ← case_core args tac,\r\n   tactic.set_goals (unsolved_goals ++ remaining_goals)\r\n```"},{"author":"gebner","date":"2021-02-25T09:36:15Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-02-25T11:04:56Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1978158765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1978158456)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1978158429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1978158584)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1978158556)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1978158623)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1978158713)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"urkud","number":507,"state":"closed","open_date":"2020-12-17T03:08:44Z","update_date":"2021-10-22T21:04:40Z","discussion":[{"author":"urkud","date":"2020-12-17T03:09:24Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-12-17T03:55:06Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1567946867)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1567946816)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1567946767)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1567946859)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1567946806)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1567946834)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1567946891)"},{"author":"gebner","date":"2021-01-02T15:18:06Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-02T15:58:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded!\n\n*And happy new year! 🎉*\n\n\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1636861563)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1636861572)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1636861516)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1636861592)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1636861527)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1636861539)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1636861546)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"eric-wieser","number":506,"state":"closed","open_date":"2020-12-16T13:50:32Z","update_date":"2020-12-16T15:02:26Z","discussion":[{"author":"gebner","date":"2020-12-16T14:24:32Z","comment":":tada: \r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-12-16T15:02:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1564271917)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1564272039)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1564271694)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1564271821)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1564271979)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1564271661)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1564271795)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":505,"state":"closed","open_date":"2020-11-20T17:12:01Z","update_date":"2020-11-23T10:13:41Z","discussion":[{"author":"gebner","date":"2020-11-23T09:32:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-11-23T10:13:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1441247398)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1441247227)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1441247473)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1441247033)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1441246866)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1441245319)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1441247128)"}],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":503,"state":"closed","open_date":"2020-11-18T09:54:51Z","update_date":"2020-11-18T10:47:50Z","discussion":[{"author":"gebner","date":"2020-11-18T10:09:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-11-18T10:47:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1417441130)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1417440900)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1417440968)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1417441041)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1417441058)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1417440999)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1417441161)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":502,"state":"closed","open_date":"2020-11-17T13:14:27Z","update_date":"2020-11-17T23:42:17Z","discussion":[{"author":"gebner","date":"2020-11-17T13:34:29Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-11-17T14:13:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1412414133)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1412413966)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1412413906)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1412413854)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1412414210)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1412414013)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1412414054)"},{"author":"kbuzzard","date":"2020-11-17T23:42:17Z","comment":"This was related to https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/hanging.20linter/near/216994727"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":501,"state":"closed","open_date":"2020-11-15T22:26:24Z","update_date":"2021-01-02T16:58:49Z","discussion":[{"author":"EdAyers","date":"2021-01-01T18:46:12Z","comment":"Hi what needs to be done for this to get merged?"},{"author":"gebner","date":"2021-01-02T15:30:52Z","comment":"> Hi what needs to be done for this to get merged?\r\n\r\nSorry, this flew completely under my radar.  LGTM."},{"author":"gebner","date":"2021-01-02T15:32:49Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-02T16:49:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded!\n\n*And happy new year! 🎉*\n\n\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1636946531)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1636946565)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1636946547)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1636946574)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1636946602)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1636946492)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1636946628)"},{"author":"bryangingechen","date":"2021-01-02T16:58:49Z","comment":"@EdAyers do you mind creating a followup PR which updates the widget-server doc and also clarifies the doc string that @eric-wieser pointed out?"}],"tags":[],"pull_requests":[]},{"author":"ChrisHughes24","number":499,"state":"closed","open_date":"2020-11-12T20:03:59Z","update_date":"2020-11-13T02:31:06Z","discussion":[{"author":"bors[bot]","date":"2020-11-13T02:31:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1393771729)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1393771681)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1393771717)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1393771703)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1393771683)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1393771749)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1393771697)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":498,"state":"closed","open_date":"2020-11-11T13:05:17Z","update_date":"2020-11-12T09:45:50Z","discussion":[{"author":"gebner","date":"2020-11-12T08:48:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-11-12T09:45:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1389444203)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1389444064)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1389444180)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1389444116)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1389444151)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1389444046)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1389444097)"}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":497,"state":"closed","open_date":"2020-11-09T21:57:57Z","update_date":"2021-01-08T16:20:59Z","discussion":[{"author":"gebner","date":"2020-11-11T13:58:13Z","comment":"@bryangingechen `dsimp` is completely different from `simp`.  But if we like the API here, then it should be even easier to add to `dsimp`."},{"author":"gebner","date":"2021-01-08T15:44:52Z","comment":"bors r+"},{"author":"bors[bot]","date":"2021-01-08T16:20:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1669581961)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1669581863)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1669581835)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1669581716)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1669581685)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1669581918)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1669581791)"}],"tags":[{"tag":"rfc","description":""},{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"digama0","number":496,"state":"closed","open_date":"2020-11-04T18:49:33Z","update_date":"2020-11-05T20:13:53Z","discussion":[{"author":"gebner","date":"2020-11-05T09:02:07Z","comment":"I thought the general plan was to get rid of the default termination measure altogether: #288 \r\n\r\nBut in the absence of progress on the other PR, this seems like a good improvement.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-11-05T09:36:29Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1357323170)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1357323132)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1357323099)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1357323027)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1357322995)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1357323213)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1357323256)"},{"author":"digama0","date":"2020-11-05T20:13:53Z","comment":"@gebner This actually changes the `rel_tac`, not the `dec_tac` (except for marginally improving the error messages). They are independent; even if we kill `default_dec_tac` we still want to use this alternate well founded relation for mutual defs (at least, until we come up with a better well founded relation that actually does structurally-less-than over all inductive types)."}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":495,"state":"open","open_date":"2020-10-29T12:20:46Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"gebner","date":"2020-10-29T13:46:32Z","comment":"Does this actually help us with mathlib CI?  Does this produce too much output for the CI log?  Should it rather print progress messages as JSON, so that we can postprocess them (more easily)?"},{"author":"eric-wieser","date":"2020-10-29T13:52:42Z","comment":"> Does this actually help us with mathlib CI?\r\n\r\nWhat's the easiest way to find out? Can I make a mathlib PR pointing lean to this branch?\r\n\r\nEdit: ~~Done in https://github.com/leanprover-community/mathlib/pull/4817 I think~~ Nope, I need a tag\r\n\r\n> Does this produce too much output for the CI log? Should it rather print progress messages as JSON, so that we can postprocess them (more easily)?\r\n\r\nThat's probably a good idea, especially if this approach overloads the CI log. It was more work though since I'd need to modify the python script in mathlib too, and I figured this might be good enough."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":494,"state":"closed","open_date":"2020-10-29T10:45:08Z","update_date":"2020-10-29T11:58:29Z","discussion":[{"author":"gebner","date":"2020-10-29T11:19:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-10-29T11:58:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1326195403)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1326196312)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1326195350)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1326196399)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1326196380)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1326196241)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1326196474)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":493,"state":"closed","open_date":"2020-10-28T10:27:28Z","update_date":"2020-10-28T12:48:57Z","discussion":[{"author":"gebner","date":"2020-10-28T11:43:15Z","comment":"bors r+"},{"author":"gebner","date":"2020-10-28T12:05:38Z","comment":"bors r-"},{"author":"bors[bot]","date":"2020-10-28T12:05:39Z","comment":"Canceled."},{"author":"gebner","date":"2020-10-28T12:06:31Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-28T12:48:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1320501001)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1320500922)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1320500906)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1320500971)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1320500951)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1320500813)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1320500866)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":491,"state":"closed","open_date":"2020-10-27T18:35:33Z","update_date":"2020-10-27T20:36:04Z","discussion":[{"author":"gebner","date":"2020-10-27T18:52:11Z","comment":"The `by_contradiction` test still fails."},{"author":"digama0","date":"2020-10-27T19:18:55Z","comment":"I know how to fix the test but not how to fix the expected out file."},{"author":"gebner","date":"2020-10-27T19:37:13Z","comment":"`./test_single.sh .../lean/bin/lean by_contradiction.lean` prints a diff."},{"author":"gebner","date":"2020-10-27T19:58:29Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T20:36:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1316990689)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1316990730)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1316990717)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1316990759)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1316990751)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1316990655)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1316990784)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":490,"state":"closed","open_date":"2020-10-27T12:06:40Z","update_date":"2020-10-28T12:48:59Z","discussion":[{"author":"gebner","date":"2020-10-27T12:33:38Z","comment":"As suggested by @jcommelin, I have replaced `_x` by the shorter `GREEK SMALL LETTER ALPHA WITH VRACHY` (`ᾰ`)."},{"author":"gebner","date":"2020-10-28T11:44:07Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-28T12:48:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1320501001)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1320500922)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1320500906)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1320500971)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1320500951)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1320500813)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1320500866)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":488,"state":"closed","open_date":"2020-10-27T09:39:52Z","update_date":"2020-10-27T11:59:32Z","discussion":[{"author":"gebner","date":"2020-10-27T11:36:24Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T11:59:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1314396750)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1314396796)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1314396773)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1314396651)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1314396624)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1314396714)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":487,"state":"closed","open_date":"2020-10-26T23:43:50Z","update_date":"2020-10-27T00:26:24Z","discussion":[{"author":"bryangingechen","date":"2020-10-27T00:05:00Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T00:26:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1311959324)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1311959442)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1311959429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1311959380)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1311959365)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1311959399)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":485,"state":"closed","open_date":"2020-10-24T15:10:26Z","update_date":"2020-10-26T10:45:55Z","discussion":[{"author":"gebner","date":"2020-10-26T09:53:54Z","comment":"Could you please add a test case?"},{"author":"eric-wieser","date":"2020-10-26T10:20:40Z","comment":"Test added. Can you squash the commits when you merge through the github UI? I've been editing through the web UI because I haven't attempted to get a local build system set up."},{"author":"gebner","date":"2020-10-26T10:22:01Z","comment":"I'll leave the squashing to:\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-26T10:45:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1308207418)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1308207351)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1308207325)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1308207493)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1308207461)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1308207250)"}],"tags":[{"tag":"bug","description":"Something isn't working"},{"tag":"awaiting-author","description":""}],"pull_requests":[]},{"author":"urkud","number":484,"state":"closed","open_date":"2020-10-20T03:42:49Z","update_date":"2020-10-24T15:25:20Z","discussion":[{"author":"gebner","date":"2020-10-20T14:41:22Z","comment":"> Is it possible to make a fake release so that github CI will be able to build mathlib with this Lean?\r\n\r\nIf you push to a tag (please just make sure it doesn't clash with a potential version number), then the CI will make a release out of it."},{"author":"urkud","date":"2020-10-20T17:00:54Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-10-20T17:11:43Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1282336048)"},{"author":"urkud","date":"2020-10-20T19:47:45Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-10-20T19:58:24Z","comment":"## try\n\nBuild failed:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1283054629)"},{"author":"bors[bot]","date":"2020-10-24T15:25:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1302414995)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1302415039)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1302415029)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1302415104)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1302415087)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1302415061)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"lacker","number":483,"state":"closed","open_date":"2020-10-14T21:09:09Z","update_date":"2020-10-15T17:37:53Z","discussion":[{"author":"bryangingechen","date":"2020-10-14T21:29:50Z","comment":"Let's see if this breaks any tests.\r\nbors try"},{"author":"bors[bot]","date":"2020-10-14T21:40:14Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1255905808)"},{"author":"lacker","date":"2020-10-15T16:49:14Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-10-15T16:49:15Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make lacker a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/lacker)\n"},{"author":"lacker","date":"2020-10-15T16:52:21Z","comment":"Bah. Well, this test is failing because the test is just checking the precise error string returned. I fixed the test expected output. Let me know if that is considered OK or if there is more danger here"},{"author":"bryangingechen","date":"2020-10-15T17:12:27Z","comment":"That's the exact fix I would've done, so I think you're good. Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-15T17:37:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1260394360)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1260394440)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1260394414)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1260394497)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1260394480)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1260394546)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":482,"state":"closed","open_date":"2020-10-12T15:09:27Z","update_date":"2020-10-13T00:06:15Z","discussion":[{"author":"gebner","date":"2020-10-12T17:02:34Z","comment":"Could you please add the other test case from https://github.com/leanprover-community/lean/pull/476#discussion_r503264366 and copy the PR description from #476 (bors uses it in the commit message).\r\n\r\nOtherwise LGTM.\r\n\r\nbors d+"},{"author":"bors[bot]","date":"2020-10-12T17:02:35Z","comment":":v: eric-wieser can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"eric-wieser","date":"2020-10-12T17:04:30Z","comment":"Where should the passing test-cases go?"},{"author":"gebner","date":"2020-10-12T18:05:10Z","comment":"Oh, I didn't look where you put the test case.  Typically these test cases (where the error message is important) go into `tests/lean`.  You can then also put the passing test case in the same file.\r\n\r\nSome explanation here: https://github.com/leanprover-community/lean/blob/master/doc/fixing_tests.md"},{"author":"eric-wieser","date":"2020-10-12T23:41:59Z","comment":"bors r+"},{"author":"eric-wieser","date":"2020-10-12T23:42:57Z","comment":"Thanks for the review, and for pointing me towards the better fix!"},{"author":"bors[bot]","date":"2020-10-13T00:06:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1244874960)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1244874993)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1244874987)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1244874938)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1244874928)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1244874979)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":481,"state":"closed","open_date":"2020-10-12T04:09:30Z","update_date":"2020-10-12T04:50:10Z","discussion":[{"author":"bryangingechen","date":"2020-10-12T04:28:04Z","comment":"[No warnings!](https://github.com/leanprover-community/lean/pull/481/checks?check_run_id=1240189052)\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-12T04:50:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1240265338)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1240265352)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1240265345)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1240265332)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1240265319)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1240265373)"}],"tags":[],"pull_requests":[]},{"author":"Julian","number":480,"state":"closed","open_date":"2020-10-11T22:10:00Z","update_date":"2020-10-13T13:43:01Z","discussion":[{"author":"gebner","date":"2020-10-13T07:50:05Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-13T07:50:47Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1246333739)"},{"author":"Julian","date":"2020-10-13T13:00:17Z","comment":"(And now removed from the Makefile). Does that CI thing listen to scrubs or will it ignore me\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-10-13T13:00:23Z","comment":":lock: Permission denied\n\nExisting reviewers: [click here to make Julian a reviewer](https://app.bors.tech/repositories/24760/add-reviewer/Julian)\n"},{"author":"digama0","date":"2020-10-13T13:05:22Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-13T13:30:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1247764871)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1247765106)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1247765080)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1247765039)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1247765014)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1247764957)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":479,"state":"closed","open_date":"2020-10-11T20:36:30Z","update_date":"2020-10-12T00:48:18Z","discussion":[{"author":"bryangingechen","date":"2020-10-12T00:23:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-12T00:48:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1239669762)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1239669710)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1239669691)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1239669661)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1239669647)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1239669740)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":476,"state":"closed","open_date":"2020-10-08T16:53:18Z","update_date":"2020-10-12T17:01:08Z","discussion":[{"author":"gebner","date":"2020-10-12T12:41:58Z","comment":"> CI run: eric-wieser/lean/actions/runs/297777454 (This repo isn't set up to run CI on PRs, so that's the best I can do.)\r\n\r\nI've invited you as a collaborator on this repo."}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":475,"state":"open","open_date":"2020-10-08T15:48:18Z","update_date":"2022-06-09T08:34:10Z","discussion":[{"author":"bryangingechen","date":"2020-10-08T15:49:48Z","comment":"Could you add some tests showing the desired new behavior?"},{"author":"eric-wieser","date":"2020-10-08T15:51:08Z","comment":"Where would you like the test to go? https://github.com/leanprover-community/lean/tree/master/tests/lean/interactive/conv.lean?"},{"author":"eric-wieser","date":"2020-10-08T15:52:11Z","comment":"At any rate, this doesn't work yet, and I need help to make it work."},{"author":"bryangingechen","date":"2020-10-08T16:01:42Z","comment":"There are a few types of tests:\r\n- Lean files in [`tests/lean`](https://github.com/leanprover-community/lean/tree/master/tests/lean) should generate the corresponding `.lean.expected.out` file.\r\n- Lean files in [`tests/lean/run`](https://github.com/leanprover-community/lean/tree/master/tests/lean/run) should run without creating any output\r\n- Lean files in [`tests/lean/fail`](https://github.com/leanprover-community/lean/tree/master/tests/lean/fail) should fail\r\n\r\nSee also [`doc/fixing_tests.md`](https://github.com/leanprover-community/lean/blob/master/doc/fixing_tests.md)."}],"tags":[{"tag":"WIP","description":"Work in progress"}],"pull_requests":[]},{"author":"EdAyers","number":473,"state":"closed","open_date":"2020-10-02T12:32:24Z","update_date":"2020-10-02T13:13:46Z","discussion":[{"author":"gebner","date":"2020-10-02T12:46:48Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-02T13:13:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1198799805)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1198799709)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1198799698)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1198799776)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1198799767)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1198799732)"}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":472,"state":"closed","open_date":"2020-10-01T14:26:50Z","update_date":"2020-10-01T14:57:57Z","discussion":[{"author":"robertylewis","date":"2020-10-01T14:30:57Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-10-01T14:57:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1193948858)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1193949084)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1193949044)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1193948963)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1193948937)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1193949137)"},{"author":"robertylewis","date":"2020-10-01T14:57:57Z","comment":"Oh, hah, I didn't even notice this was in lean and not mathlib! Just saw the notification and bors'ed by reflex."}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":471,"state":"closed","open_date":"2020-09-26T14:49:40Z","update_date":"2020-09-28T06:56:51Z","discussion":[{"author":"rwbarton","date":"2020-09-26T15:06:59Z","comment":"I guess this looks fine but what about just turning it into `local notation`?"},{"author":"jcommelin","date":"2020-09-26T15:09:28Z","comment":"For some reason it didn't work in that file. I don't understand notation well enough to figure out why it broke."},{"author":"rwbarton","date":"2020-09-26T15:14:22Z","comment":"Oh, maybe it was because of\r\n```lean\r\n@[simp] theorem to_list_cons (a : α) (v : vector α n) : to_list (a :: v) = a :: to_list v := ...\r\n```\r\nI think local notation might just always be preferred to global notation, with no fallback on type errors.\r\n\r\nAnyways, LGTM as is."},{"author":"gebner","date":"2020-09-28T06:22:03Z","comment":":tada: Next step: `multiset.cons`\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-09-28T06:56:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1174964724)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1174964601)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1174964565)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1174964825)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1174964810)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1174964768)"}],"tags":[{"tag":"awaiting-review","description":null}],"pull_requests":[]},{"author":"LdBeth","number":469,"state":"closed","open_date":"2020-09-20T07:25:38Z","update_date":"2023-02-14T19:11:46Z","discussion":[{"author":"gebner","date":"2020-09-21T08:55:39Z","comment":"According to @alexpeattie, `realpath` isn't installed by default either.  Can you shed some light on this, I don't have a mac?\r\n\r\n> realpath isn't installed on macOS by default either sadly sob . There are some alternatives here if we want to preserve the symlink reading behaviour"},{"author":"LdBeth","date":"2020-09-22T02:59:32Z","comment":"Neither `greadlink` nor `realpath` is present by default on mac, but if mac users have already installed `greadlink` from package manager of their choice, i.e. Homebrew, it means they also have `realpath` installed, which means those Mac users who already installed coreutils don't have to worry about this change.\r\n\r\nThis change is mean to relief those Mac users who prefer a compatible `realpath` other than the one from coreutils, such as https://github.com/harto/realpath-osx (it is a barely minimal implementation compared to coreutils), also FreeBSD users, they have `realpath` present in their systems by default, but not a `readlink` accepts `-f`."},{"author":"alexpeattie","date":"2020-09-22T08:51:14Z","comment":"I don't know if there's an advantage to switching from `greadlink` to `realpath`, but I think we should keep the `if` statement with a message about installing `coreutils` for users who don't have it 🙂 "},{"author":"LdBeth","date":"2020-09-22T10:10:19Z","comment":"So I made another commit change it to prompt user to install coreutils, and still fallback to `readlink -f` for some distributions with older versions of coreutils such as CentOS."},{"author":"LdBeth","date":"2020-09-23T11:19:07Z","comment":"Yes. Thank you for pointing that out."},{"author":"alexpeattie","date":"2020-09-28T13:10:13Z","comment":"~Revisiting this again @LdBeth - I'm not sure that changing the `if` to checking `command -v realpath` is right, because `realpath` is present by default on macOS, just not the GNU `realpath` which supports the `-v` flag. I think you'd either want to check `uname` as before, or do something like `if realpath -f / >/dev/null 2>&1`?~ Oops ignore this, I was getting `realpath` and `readlink` mixed up!\r\n\r\nAlso, just to double check, what's the main advantage to switching to `realpath` over `greadlink`? Thanks 🙂 !"},{"author":"LdBeth","date":"2020-09-29T15:13:05Z","comment":"@alexpeattie although macOS has neither `realpath` nor GNU `readlink`, acquiring the `realpath` command is fairly simple and flexible, user can choose either an executable calls C `realpath`, a python script calls `os.path.realpath`, even pure bash script implementation, or just use `realpath` from coreutils, which also introduces a bunch of tools may not needed by the user, which I personally find undesirable.\r\n\r\nWe might choose write shell function to replace call to external tools, but I feel it is unnecessary.   `realpath` is a tool been reinvented too many times."}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":466,"state":"closed","open_date":"2020-09-13T22:53:31Z","update_date":"2020-09-14T03:04:16Z","discussion":[{"author":"bryangingechen","date":"2020-09-13T23:30:25Z","comment":"LGTM. I figured we may as well add some docs while we're at it.\r\nbors d+"},{"author":"bors[bot]","date":"2020-09-13T23:30:26Z","comment":":v: semorrison can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"semorrison","date":"2020-09-14T02:31:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-09-14T03:04:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1109995678)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1109995715)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1109995706)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1109995657)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1109995646)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1109995694)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":464,"state":"closed","open_date":"2020-09-09T23:05:33Z","update_date":"2020-09-09T23:34:38Z","discussion":[{"author":"bryangingechen","date":"2020-09-09T23:05:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-09-09T23:34:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1093749609)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1093749406)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1093749370)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1093749533)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1093749499)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1093749577)"}],"tags":[],"pull_requests":[]},{"author":"kbuzzard","number":463,"state":"closed","open_date":"2020-09-09T14:35:19Z","update_date":"2020-09-09T21:19:57Z","discussion":[{"author":"bryangingechen","date":"2020-09-09T20:55:03Z","comment":"Thanks again!\r\nbors r+"},{"author":"bors[bot]","date":"2020-09-09T21:19:53Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1093307298)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1093307223)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1093307204)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1093307107)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1093307083)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1093307252)"}],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":462,"state":"closed","open_date":"2020-09-06T02:12:26Z","update_date":"2020-09-09T13:48:49Z","discussion":[{"author":"gebner","date":"2020-09-09T13:26:13Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-09-09T13:48:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1091340018)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1091340159)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1091340131)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1091340238)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1091340197)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1091340088)"}],"tags":[],"pull_requests":[]},{"author":"ammkrn","number":461,"state":"closed","open_date":"2020-09-04T02:28:45Z","update_date":"2020-09-04T10:39:03Z","discussion":[{"author":"gebner","date":"2020-09-04T10:15:03Z","comment":"Thanks!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-09-04T10:39:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1071386623)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1071386521)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1071386497)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1071386590)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1071386574)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1071386430)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":459,"state":"open","open_date":"2020-09-02T21:54:26Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"EdAyers","date":"2020-09-02T21:57:17Z","comment":"I'm leaving this as a draft for now because there are some other things that approx does"}],"tags":[],"pull_requests":[]},{"author":"rwbarton","number":458,"state":"closed","open_date":"2020-08-29T20:49:18Z","update_date":"2020-10-27T11:31:01Z","discussion":[{"author":"rwbarton","date":"2020-08-30T00:34:09Z","comment":"Related Zulip discussion:\r\nhttps://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Bad.20instance.20name.20lint/near/206730654"},{"author":"rwbarton","date":"2020-08-30T16:01:31Z","comment":"One more edge case occurred to me, something like\r\n```lean\r\nclass lie (α : Type) : Type :=\r\n(bracket : α → α → α)\r\n\r\nnamespace lie\r\n\r\ndef gl : Type := unit\r\ninstance : lie gl := sorry    -- error, because it tries to use the name `lie.gl` which was just used above\r\n\r\nend lie\r\n```\r\nWe could refrain from stripping the current namespace from the class name if it's the whole class name. Not sure whether it is something to worry about."},{"author":"digama0","date":"2020-08-30T22:45:56Z","comment":"Shouldn't the name be `lie.gl.lie`?"},{"author":"rwbarton","date":"2020-09-08T13:14:50Z","comment":"Yes, probably. I've added logic to handle this case."},{"author":"rwbarton","date":"2020-09-08T13:33:54Z","comment":"Trying to build mathlib suggests that it would be worth adding logic to handle the case of a variable as the last argument, using the old `namespace.class_name` form for compatibility. It's also sensible since usually there won't be multiple instances of that shape for a given `(namespace, class_name)` pair."},{"author":"gebner","date":"2020-09-08T13:38:59Z","comment":"We should probably communicate the heuristic and rationales to the Lean 4 team."},{"author":"rwbarton","date":"2020-09-08T15:37:43Z","comment":"I managed to port all of mathlib to this latest version of the naming heuristic, but it wasn't pretty: I had to touch about 100 instances.\r\n\r\nI've added to the comment some other instance forms that I encountered in the process. Of these, the first three (dot notation, type ascriptions, `@` notation) are the most common. It's probably worth supporting these three--the logic is getting more complicated so some refactoring will be needed."},{"author":"rwbarton","date":"2020-09-08T15:53:05Z","comment":"([Here](https://github.com/leanprover-community/mathlib/commit/1592c0d38041f514149cec69f85ee4f376f5b474) is the mathlib patch if anyone is interested)"},{"author":"gebner","date":"2020-09-08T16:14:05Z","comment":"The mathlib patch doesn't *remove* any names.  I assume this is because you wanted to change as little as possible.  Will we see any gains, errm, *losses* from this change?"},{"author":"rwbarton","date":"2020-09-08T19:15:22Z","comment":"> The mathlib patch doesn't _remove_ any names. I assume this is because you wanted to change as little as possible.\r\n\r\nMainly, I wanted to make sure this change would be viable at all--100 affected instances isn't great but it seems acceptable, and it showed what additional changes would be helpful.\r\n\r\n> Will we see any gains, errm, _losses_ from this change?\r\n\r\nI hadn't planned this far ahead but I suppose that, as a one-off, I could modify Lean to report \"unnecessarily\" named instances, and we can delete whatever instance names don't seem helpful."},{"author":"rwbarton","date":"2020-09-08T19:20:32Z","comment":"(I guess I should say that what motivated me to try to fix this was the accumulated annoyance at all the times I wrote the second instance of something inside a `namespace`, and Lean told me the name was already used. I wasn't thinking as much about trying to streamline already-existing code, but that would also be a nice benefit.)"},{"author":"gebner","date":"2020-10-27T10:39:21Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T11:30:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1314257523)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1314257652)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1314257630)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1314257416)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1314257390)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1314257577)"}],"tags":[],"pull_requests":[]},{"author":"rwbarton","number":457,"state":"closed","open_date":"2020-08-28T17:13:50Z","update_date":"2020-08-29T18:09:10Z","discussion":[{"author":"rwbarton","date":"2020-08-28T17:45:32Z","comment":"I have a sorry-free (and actually not too painful) version of mathlib that builds against this patch applied to 3.18.4 (current mathlib doesn't build with current Lean yet)."},{"author":"jcommelin","date":"2020-08-28T17:49:21Z","comment":"Does this mean that we don't want GMP VM implementations for nat.pow?"},{"author":"rwbarton","date":"2020-08-28T18:02:30Z","comment":"Well apparently no one wanted to implement that while it was convenient, so making it more difficult doesn't seem like a big problem."},{"author":"bryangingechen","date":"2020-08-28T18:03:06Z","comment":"> I have a sorry-free (and actually not too painful) version of mathlib that builds against this patch applied to 3.18.4 (current mathlib doesn't build with current Lean yet).\r\n\r\nMaybe we could fold that into leanprover-community/mathlib#3955 (and make it \"update to version 3.20.0c\")?"},{"author":"rwbarton","date":"2020-08-28T20:00:23Z","comment":"My mathlib changes corresponding to the present PR are not ready to be PRed yet, and I'd personally prefer not to hold up leanprover-community/mathlib#3955 more than necessary since I would like to make some unrelated changes to `data.fin`."},{"author":"gebner","date":"2020-08-29T16:20:05Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-29T16:42:24Z","comment":"Build failed:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1045536694)"},{"author":"bryangingechen","date":"2020-08-29T17:43:22Z","comment":"What a strange error: https://github.com/leanprover-community/lean/runs/1045536694#step:9:210\r\n\r\nLet's see if it was just a fluke:\r\nbors r+"},{"author":"gebner","date":"2020-08-29T17:52:27Z","comment":"> [S, E, C, R, E, T, _, D, A, T, A]\r\n\r\n:rofl: "},{"author":"bors[bot]","date":"2020-08-29T18:09:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1045689095)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1045689105)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1045689102)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1045689083)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1045689079)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1045689037)"}],"tags":[],"pull_requests":[]},{"author":"rwbarton","number":456,"state":"closed","open_date":"2020-08-27T19:54:57Z","update_date":"2020-08-28T09:21:21Z","discussion":[{"author":"rwbarton","date":"2020-08-27T20:07:24Z","comment":"Whoops, I forgot trace messages go to stderr, and therefore not into the expected output file."},{"author":"gebner","date":"2020-08-28T08:40:24Z","comment":"BTW, I've now given you (and all mathlib maintainers) write access to this repo.  Feel free to create branches here and enjoy the github actions!\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-28T09:21:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1040648427)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1040648503)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1040648485)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1040648369)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1040648316)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1040648451)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":455,"state":"closed","open_date":"2020-08-26T21:01:13Z","update_date":"2020-08-26T22:37:18Z","discussion":[{"author":"bryangingechen","date":"2020-08-26T22:09:11Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-26T22:37:14Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1033769269)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1033769292)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1033769282)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1033769241)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1033769233)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1033769308)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":453,"state":"closed","open_date":"2020-08-23T16:11:47Z","update_date":"2020-08-28T11:36:33Z","discussion":[{"author":"gebner","date":"2020-08-23T16:51:17Z","comment":"This is sweet!  Could you also add a parse_json and to_string function please?"},{"author":"gebner","date":"2020-08-28T08:43:25Z","comment":"LGTM except for the build error."},{"author":"gebner","date":"2020-08-28T11:08:00Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-28T11:36:30Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1041160238)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1041160279)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1041160259)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1041160334)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1041160311)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1041160197)"}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":452,"state":"closed","open_date":"2020-08-22T07:14:25Z","update_date":"2020-08-24T16:07:36Z","discussion":[{"author":"gebner","date":"2020-08-24T08:07:28Z","comment":"The tests fails."},{"author":"jcommelin","date":"2020-08-24T09:18:13Z","comment":"I've tried to fix the tests (-;"},{"author":"jcommelin","date":"2020-08-24T12:06:12Z","comment":"@gebner Locally the build + tests are totally fine. But CI is complaining. I don't know what's going on."},{"author":"gebner","date":"2020-08-24T12:26:19Z","comment":"CI is green BTW."},{"author":"jcommelin","date":"2020-08-24T12:35:00Z","comment":"Ooh, silly me. Looking at the wrong GH notification :facepalm: "},{"author":"gebner","date":"2020-08-24T15:41:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-08-24T16:07:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1022382134)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1022382013)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1022381971)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1022382086)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1022382053)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1022382200)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":449,"state":"closed","open_date":"2020-08-16T17:44:17Z","update_date":"2020-08-17T07:48:30Z","discussion":[{"author":"gebner","date":"2020-08-17T07:24:57Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-17T07:48:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/992518670)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/992518756)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/992518735)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/992518709)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/992518699)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/992518622)"}],"tags":[],"pull_requests":[]},{"author":"robertylewis","number":448,"state":"closed","open_date":"2020-08-16T16:40:20Z","update_date":"2020-08-16T17:09:15Z","discussion":[{"author":"fpvandoorn","date":"2020-08-16T16:46:21Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-08-16T17:09:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990812421)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990812417)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990812415)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990812426)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990812424)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990812401)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":446,"state":"closed","open_date":"2020-08-15T18:01:35Z","update_date":"2020-08-16T09:36:08Z","discussion":[{"author":"gebner","date":"2020-08-16T08:57:20Z","comment":"I'm not a fan of avoiding choice, but as long as it doesn't change the theorem statements and makes you happy,\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-16T09:36:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990085975)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990085985)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990085982)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990085961)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990085956)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990085947)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":445,"state":"closed","open_date":"2020-08-15T17:10:31Z","update_date":"2020-08-16T17:45:57Z","discussion":[{"author":"gebner","date":"2020-08-16T08:51:04Z","comment":"The PR description lacks a \"motivation\" section."},{"author":"digama0","date":"2020-08-16T14:42:18Z","comment":"@gebner fixed"},{"author":"digama0","date":"2020-08-16T14:44:40Z","comment":"Regarding checking the value of a let binding, this would be a reasonable next step after this PR: make `guard_hyp h : t` check that `h` is a hypothesis (not a let binding) in the local context of type `t`, and `guard_hyp h : t := val` checks that `h` is a let binding with type `t` and value `val`."},{"author":"gebner","date":"2020-08-16T17:06:14Z","comment":"Ah ok, then the change makes sense.\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-16T17:30:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990849618)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990849562)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990849557)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990849594)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990849584)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990849609)"},{"author":"bors[bot]","date":"2020-08-16T17:30:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990849618)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990849562)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990849557)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990849594)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990849584)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990849609)"},{"author":"digama0","date":"2020-08-16T17:45:56Z","comment":"Bors merged this PR twice?"},{"author":"bors[bot]","date":"2020-08-16T17:45:57Z","comment":"Already running a review"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":444,"state":"closed","open_date":"2020-08-15T17:04:59Z","update_date":"2020-08-16T09:14:26Z","discussion":[{"author":"gebner","date":"2020-08-16T08:51:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-16T09:14:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/990046559)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/990046526)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/990046521)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/990046544)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/990046540)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/990046552)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":443,"state":"closed","open_date":"2020-08-15T16:43:23Z","update_date":"2020-08-20T11:28:07Z","discussion":[{"author":"EdAyers","date":"2020-08-20T08:36:16Z","comment":"Ok I think I'm basically happy with it as well for now. Doubtless there will be additions and corrections later."},{"author":"gebner","date":"2020-08-20T11:06:11Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-08-20T11:28:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1007328115)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1007328088)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1007328060)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1007328204)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1007328179)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1007328237)"}],"tags":[],"pull_requests":[]},{"author":"rwbarton","number":442,"state":"closed","open_date":"2020-08-14T18:15:00Z","update_date":"2020-10-27T12:07:06Z","discussion":[{"author":"bryangingechen","date":"2020-08-14T18:52:55Z","comment":"bors try"},{"author":"gebner","date":"2020-08-14T19:01:55Z","comment":"There is a lot of stuff that depends on the name `a`. :disappointed:  I wonder how much of mathlib will break."},{"author":"bors[bot]","date":"2020-08-14T19:02:22Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/986214640)"},{"author":"digama0","date":"2020-08-14T19:13:38Z","comment":"@gebner It's not `a` bug it's `_x` feature. Depending on auto names is bad practice."},{"author":"rwbarton","date":"2020-08-15T19:51:18Z","comment":"Fixed some additional tests. Now trying to build mathlib to see how bad the damage is."},{"author":"rwbarton","date":"2020-08-15T20:17:04Z","comment":"Hmm, now lean is segfaulting on `set_theory.pgame`, so maybe don't merge this just yet, though I don't know the cause yet."},{"author":"rwbarton","date":"2020-08-15T21:25:01Z","comment":"The change in default binder name to `_x` is triggering #447, because `pgame` is defined as\r\n```lean\r\ninductive pgame : Type (u+1)\r\n| mk : ∀ α β : Type u, (α → pgame) → (β → pgame) → pgame\r\n```\r\n\r\nI'm not sure how to proceed. I suppose it would be nice to use the name `_x` only in tactic mode and `a` elsewhere, as this would also cause less breakage from use of autogenerated names. But it doesn't seem to be that straightforward based on how `→` is parsed currently. Also possible would be to try to come up with a name not starting with `_` but which won't conflict with anything someone is likely to type; suggestions?"},{"author":"gebner","date":"2020-09-09T13:35:29Z","comment":"Just throwing ideas out there: we could also use name.anonymous instead of _x to avoid hitting #447."},{"author":"gebner","date":"2020-10-27T12:07:03Z","comment":"Replaced by #490."}],"tags":[],"pull_requests":[]},{"author":"rwbarton","number":440,"state":"closed","open_date":"2020-08-13T17:41:32Z","update_date":"2020-08-14T09:56:16Z","discussion":[{"author":"gebner","date":"2020-08-14T09:33:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-14T09:56:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/984273317)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/984273354)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/984273347)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/984273418)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/984273399)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/984273379)"}],"tags":[],"pull_requests":[]},{"author":"DanielFabian","number":439,"state":"closed","open_date":"2020-08-13T14:49:16Z","update_date":"2020-08-13T15:24:02Z","discussion":[{"author":"gebner","date":"2020-08-13T15:24:02Z","comment":"Wow, this works much better than I'd expected.  Maybe we should even use it for the documentation.\r\n\r\nHowever, this PR should go into mathlib first (mathlib contains a copy of the file).  (I'll then copy the mathlib fork over here once in a while.)"}],"tags":[],"pull_requests":[]},{"author":"shingtaklam1324","number":434,"state":"closed","open_date":"2020-08-09T10:40:38Z","update_date":"2020-08-10T08:01:53Z","discussion":[{"author":"bryangingechen","date":"2020-08-09T15:10:13Z","comment":"It might be https://github.com/trentm/python-markdown2/issues/355. I think adding extra newlines for now is fine."},{"author":"gebner","date":"2020-08-10T07:39:09Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-10T08:01:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/965694933)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/965694919)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/965694898)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/965694877)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/965694862)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/965694947)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":432,"state":"closed","open_date":"2020-08-06T18:56:02Z","update_date":"2020-08-07T11:34:14Z","discussion":[{"author":"gebner","date":"2020-08-07T11:10:46Z","comment":"For the future: you get twice the credit if you open two PRs!  :smile: \r\n\r\n> Can I use library notes in core?\r\n\r\nI wouldn't write `see note [foo]` where `foo` is defined in mathlib, although maybe `see note [foo] in mathlib` could be acceptable.  If you want to define library notes in core, then you'll need to port it to core but I'm not sure if it's worth the effort.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-07T11:34:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/957984855)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/957984836)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/957984826)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/957984803)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/957984788)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/957984870)"}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":430,"state":"closed","open_date":"2020-08-05T01:45:25Z","update_date":"2020-08-06T14:46:48Z","discussion":[{"author":"gebner","date":"2020-08-06T14:24:12Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-08-06T14:46:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/954194471)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/954194296)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/954194278)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/954194387)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/954194357)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/954194431)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":428,"state":"closed","open_date":"2020-08-01T02:09:20Z","update_date":"2021-10-22T21:04:35Z","discussion":[{"author":"bryangingechen","date":"2020-08-01T11:11:15Z","comment":"Should we add a docstring mentioning that [it's there because it avoids classical choice](https://github.com/leanprover-community/mathlib/pull/3643#issuecomment-667437859)?"},{"author":"digama0","date":"2020-08-01T12:22:13Z","comment":"If it's replacing the original proof, there probably isn't much need to note this explicitly, unless someone feels like changing the proof again. (It could go in the commit message though.)"},{"author":"gebner","date":"2020-08-03T07:35:48Z","comment":"Let's appease the intuitionism police.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-08-03T07:57:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/939523147)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/939523032)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/939523024)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/939523091)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/939523072)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/939523125)"}],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"pull_requests":[]},{"author":"gebner","number":427,"state":"closed","open_date":"2020-07-30T11:49:23Z","update_date":"2020-07-30T12:33:17Z","discussion":[{"author":"gebner","date":"2020-07-30T12:11:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-30T12:33:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/927500399)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/927500974)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/927500963)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/927500450)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/927500438)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/927501159)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":426,"state":"closed","open_date":"2020-07-30T08:01:36Z","update_date":"2020-07-30T09:08:19Z","discussion":[{"author":"gebner","date":"2020-07-30T08:45:52Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-30T09:08:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/926811931)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/926811815)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/926811802)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/926811894)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/926811877)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/926811840)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":425,"state":"closed","open_date":"2020-07-29T22:32:35Z","update_date":"2021-10-22T21:04:33Z","discussion":[{"author":"gebner","date":"2020-07-30T08:03:08Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-30T08:34:56Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/926661029)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/926661066)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/926661004)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/926661083)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/926661079)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/926660974)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":424,"state":"closed","open_date":"2020-07-29T17:24:41Z","update_date":"2020-07-29T17:55:38Z","discussion":[{"author":"gebner","date":"2020-07-29T17:27:42Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-29T17:55:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/924307275)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/924307308)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/924307293)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/924307220)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/924307202)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/924307251)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":421,"state":"closed","open_date":"2020-07-29T10:44:10Z","update_date":"2020-07-29T11:05:02Z","discussion":[{"author":"gebner","date":"2020-07-29T10:44:33Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-29T11:04:58Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/922842334)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/922841537)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/922842381)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/922841457)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/922842290)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/922841487)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":420,"state":"closed","open_date":"2020-07-29T08:25:47Z","update_date":"2020-07-29T09:02:35Z","discussion":[{"author":"gebner","date":"2020-07-29T08:41:45Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-29T09:02:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/922434813)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/922434749)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/922434732)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/922434795)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/922434784)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/922434844)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":417,"state":"closed","open_date":"2020-07-28T16:16:41Z","update_date":"2020-07-29T10:38:20Z","discussion":[{"author":"gebner","date":"2020-07-29T10:16:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-29T10:38:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/922757235)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/922757351)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/922757332)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/922757296)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/922757273)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/922757196)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":416,"state":"closed","open_date":"2020-07-28T15:45:32Z","update_date":"2020-07-28T16:25:23Z","discussion":[{"author":"gebner","date":"2020-07-28T15:46:00Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-28T16:25:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/919626370)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/919626239)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/919626393)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/919626306)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/919626268)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/919623658)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":415,"state":"closed","open_date":"2020-07-28T15:35:43Z","update_date":"2020-07-28T16:25:25Z","discussion":[{"author":"gebner","date":"2020-07-28T15:45:58Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-28T16:25:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/919626370)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/919626239)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/919626393)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/919626306)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/919626268)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/919623658)"}],"tags":[],"pull_requests":[]},{"author":"eric-wieser","number":414,"state":"open","open_date":"2020-07-28T14:21:34Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"gebner","date":"2020-07-28T15:24:13Z","comment":"The current plan is actually to remove this file altogether, @bryangingechen has started here: #288"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":413,"state":"closed","open_date":"2020-07-28T13:33:15Z","update_date":"2020-07-28T14:09:22Z","discussion":[{"author":"gebner","date":"2020-07-28T13:33:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-28T14:09:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/919122372)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/919123676)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/919122456)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/919122402)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/919123725)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/919122435)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":412,"state":"closed","open_date":"2020-07-28T12:56:28Z","update_date":"2020-07-28T13:44:20Z","discussion":[{"author":"gebner","date":"2020-07-28T13:21:36Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-28T13:44:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/919036203)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/919036271)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/919036196)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/919036247)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/919036299)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/919036280)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":410,"state":"closed","open_date":"2020-07-28T11:40:38Z","update_date":"2020-07-28T12:05:55Z","discussion":[{"author":"gebner","date":"2020-07-28T11:40:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-28T12:05:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/918683843)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/918687107)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/918687231)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/918687148)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/918687268)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/918687248)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":409,"state":"closed","open_date":"2020-07-24T09:58:47Z","update_date":"2020-07-24T10:22:23Z","discussion":[{"author":"gebner","date":"2020-07-24T10:00:02Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-24T10:22:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/906175571)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/906175740)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/906175648)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/906175713)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/906175586)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/906175674)"}],"tags":[],"pull_requests":[]},{"author":"digama0","number":408,"state":"closed","open_date":"2020-07-24T04:19:00Z","update_date":"2020-07-24T09:20:41Z","discussion":[{"author":"gebner","date":"2020-07-24T08:59:28Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-24T09:20:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/905996213)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/905996183)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/905996155)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/905996243)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/905996193)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/905996228)"}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":407,"state":"closed","open_date":"2020-07-23T18:47:12Z","update_date":"2020-07-24T09:43:51Z","discussion":[{"author":"gebner","date":"2020-07-24T09:06:56Z","comment":"I haven't read this in detail, but the tests are passing and you know what you're doing.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-07-24T09:43:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/906065826)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/906065862)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/906065854)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/906065801)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/906065780)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/906065837)"}],"tags":[],"pull_requests":[]},{"author":"robertylewis","number":406,"state":"closed","open_date":"2020-07-23T16:48:59Z","update_date":"2020-07-23T17:52:00Z","discussion":[{"author":"gebner","date":"2020-07-23T17:26:23Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-23T17:51:56Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/903678134)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/903678163)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/903678004)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/903678102)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/903678150)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/903678031)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":405,"state":"closed","open_date":"2020-07-23T14:15:00Z","update_date":"2020-07-23T14:49:17Z","discussion":[{"author":"EdAyers","date":"2020-07-23T14:16:25Z","comment":"Thanks to @robertylewis for spotting and @gebner for telling me how to fix."},{"author":"gebner","date":"2020-07-23T14:27:43Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-23T14:49:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/903018875)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/903018806)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/903018832)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/903018927)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/903018895)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/903018758)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":404,"state":"closed","open_date":"2020-07-22T16:13:20Z","update_date":"2020-07-23T09:49:01Z","discussion":[{"author":"robertylewis","date":"2020-07-22T16:32:19Z","comment":"If this does fix #398 I'd be curious to know why! There's no big search in that example to cache: it successfully applies the first instance it checks, and terminates. Not obviously a caching issue to me, but convenient if it is.\r\n\r\nOf course in real life this issue didn't appear in a `#check`, but if this fixes #398 then maybe #403 fixes the real example."},{"author":"gebner","date":"2020-07-23T09:29:06Z","comment":"It reduces the runtime of the `#check` example from 6s to 2.3s on my machine (but I don't have an explanation either).\r\n\r\nAll the issues in the Zulip thread were about `#check`.  If you have a real-life issue, please file it in another issue.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-07-23T09:48:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/902031326)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/902031421)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/902031476)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/902031385)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/902031433)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/902031344)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":403,"state":"closed","open_date":"2020-07-22T15:16:51Z","update_date":"2020-07-22T16:33:51Z","discussion":[{"author":"gebner","date":"2020-07-22T16:13:53Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-22T16:33:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/899314647)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/899314727)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/899314793)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/899314529)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/899314625)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/899314774)"}],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":402,"state":"closed","open_date":"2020-07-22T12:22:17Z","update_date":"2020-07-23T15:30:44Z","discussion":[{"author":"gebner","date":"2020-07-22T12:56:46Z","comment":"I like it, and the implementation looks good.  Is `set_of ...` the term that we want?"},{"author":"fpvandoorn","date":"2020-07-22T15:36:53Z","comment":"> `{(f x) | x ∈ s}` is equivalent to `set.image f s`\r\n\r\nToo bad they are not definitionally equal. But I guess we can have simp lemmas rewriting them."},{"author":"Vierkantor","date":"2020-07-23T09:26:03Z","comment":"> > `{(f x) | x ∈ s}` is equivalent to `set.image f s`\r\n> \r\n> Too bad they are not definitionally equal. But I guess we can have simp lemmas rewriting them.\r\n\r\nThe issue is that the notation expands to `∃ (h : x ∈ s), ...` instead of `x ∈ s \\and ...`, right? `simp` should already fix that with the `exists_prop` lemma."},{"author":"gebner","date":"2020-07-23T09:41:54Z","comment":"Another option would be to move `set.image` to the core library.  I can't tell at first glance if this would make things easier or harder.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-07-23T10:09:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/902089825)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/902089849)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/902089931)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/902089911)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/902089886)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/902089940)"},{"author":"fpvandoorn","date":"2020-07-23T15:30:44Z","comment":"> Another option would be to move `set.image` to the core library. I can't tell at first glance if this would make things easier or harder.\r\n\r\n`set.image` is already in core: https://github.com/leanprover-community/lean/blob/05d7184/library/init/data/set.lean#L83\r\n\r\n> > > `{(f x) | x ∈ s}` is equivalent to `set.image f s`\r\n> > \r\n> > \r\n> > Too bad they are not definitionally equal. But I guess we can have simp lemmas rewriting them.\r\n> \r\n> The issue is that the notation expands to `∃ (h : x ∈ s), ...` instead of `x ∈ s \\and ...`, right? `simp` should already fix that with the `exists_prop` lemma.\r\n\r\nCorrect, then you get something definitionally equal, but presumably you want to actually rewrite it to `set.image` instead of (the definiens of `set.image`)"}],"tags":[],"pull_requests":[]},{"author":"TwoFX","number":399,"state":"closed","open_date":"2020-07-20T17:08:06Z","update_date":"2020-07-23T10:09:23Z","discussion":[{"author":"gebner","date":"2020-07-21T08:44:19Z","comment":"The actual cause for this bug is a few lines below:\r\n```c++\r\n    while (is_annotation(fn))\r\n        fn = get_annotation_arg(fn);\r\n```\r\nApparently `as_is` is an annotation.\r\n\r\nI don't think we need to spend much effort now to make `@@%%e` work.\r\n\r\nPlease put the tests in the `tests/lean/run` directory.  The `run` tests check that the test executes without error, then tests in `tests/lean` compare the output.  Then you don't need the `*.expected` files either.\r\n\r\nOtherwise LGTM.  Thanks for fixing this!"},{"author":"TwoFX","date":"2020-07-23T09:34:02Z","comment":"@gebner I have moved the tests as requested. Is there anything else you'd like me to change?"},{"author":"gebner","date":"2020-07-23T09:39:06Z","comment":"Thanks!\r\nbors r+"},{"author":"bors[bot]","date":"2020-07-23T10:09:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/902089825)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/902089849)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/902089931)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/902089911)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/902089886)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/902089940)"}],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":393,"state":"open","open_date":"2020-07-16T21:08:39Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"cipher1024","date":"2020-07-16T21:10:00Z","comment":"Written together with @danielfabian"},{"author":"cipher1024","date":"2020-07-16T21:12:27Z","comment":"```lean\r\ne <- get_defn_spec n\r\n```\r\n\r\ngives us a pre-term parsed from the equations typed in by the user. Those are distinct from the equations proved by the equation compiler as their can be fewer equations when multiple cases can be described by the same equation"},{"author":"gebner","date":"2020-07-23T09:55:01Z","comment":"There are two issues here:\r\n 1. The expression that is stored is not the equations, but the pre-expression of the definition (even if this is not an equation).  Nothing is stored for auxiliary definitions for matches.  Storing pre-expressions in general might be useful, but then please rename the API to reflect this (i.e., rename everything to `defn_spec` and update the doc string).\r\n 2. If you want the *equations* before the equation compiler duplicates them, then you can store the elaborated equations here (or maybe in the equation compiler): https://github.com/leanprover-community/lean/blob/572b494f16fbb04e5316eb81e76c0698fd556a5d/src/frontends/lean/elaborator.cpp#L2683 (the `new_e` variable contains the elaborated equations)"},{"author":"DanielFabian","date":"2020-07-23T22:03:51Z","comment":"@gebner What we are after here are the equations you see in the pattern match. So if your pattern match contains 5 lines in the source code, we need a sorted list of 5 equations. And sorted, because at this point, the left hand sides are not yet disjoint. Rather, the equations need to be applied in order and the first match wins.\r\n\r\nThe whole point of this is so that we get a target for something we would like to automatically prove. E.g.:\r\n\r\n```lean\r\ndef foo : nat -> nat :=\r\n| 0 := 1\r\n| n := 2\r\n```\r\nin this case, we want an easy way to get two goals, in order: `foo 0 = 1`, `forall n, foo n = 2`. \r\n\r\nYou'll notice, that the second theorem is false. But it becomes true, if you modify it slightly:\r\n`forall n, n != 0 -> foo n = 2`.\r\n\r\nThe idea is that you get this ever-growing list of premises as you go through the pattern match cases where at every point, the universally quantified theorem is true, but only because you also know that any of the previous patterns were already handled and therefore are now known to be impossible.\r\n\r\nIf this is our goal, are the elaborated equations the ones we need?"},{"author":"gebner","date":"2020-07-24T09:05:07Z","comment":"> If this is our goal, are the elaborated equations the ones we need?\r\n\r\nYes, I'd strongly suggest that."}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":391,"state":"closed","open_date":"2020-07-16T13:28:24Z","update_date":"2020-10-27T11:04:50Z","discussion":[{"author":"gebner","date":"2020-10-27T10:38:32Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T11:04:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1314140492)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1314140651)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1314140638)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1314140589)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1314140571)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1314140529)"}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":390,"state":"closed","open_date":"2020-07-13T03:14:23Z","update_date":"2020-07-13T12:24:33Z","discussion":[{"author":"gebner","date":"2020-07-13T08:44:35Z","comment":"These are not \"invalid\" expressions.  As the documentation for the `cases` tactic (in the C++ code) clearly states:\r\n```\r\n    1- Store in ilist the new \"hypotheses\" introduced for each new goal.\r\n       We have a new \"hypothesis\" for each constructor field.\r\n       We say \"hypothesis\" because it may be an arbitrary term.\r\n       This may happen because of dependent pattern matching.\r\n```\r\n\r\nCould you please update the doc string to clarify the result of the Lean tactic, and then explain that you can't match on the arbitrary terms using `case`?\r\n\r\nPlease also follow the convention for the PR title.  (That is, `fix(library/init/meta/tactic): ....`)"},{"author":"JLimperg","date":"2020-07-13T11:47:52Z","comment":"I should start reading the C++ docs. Adjusted the docs accordingly."},{"author":"gebner","date":"2020-07-13T12:00:04Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-13T12:24:29Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/865033263)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/865033152)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/865033292)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/865033195)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/865033182)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/865033234)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":387,"state":"closed","open_date":"2020-07-08T15:09:50Z","update_date":"2020-07-08T16:53:26Z","discussion":[{"author":"gebner","date":"2020-07-08T16:29:28Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-08T16:53:22Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/850648286)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/850648214)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/850644137)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/850648246)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/850644018)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/850648262)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":386,"state":"closed","open_date":"2020-07-08T15:06:40Z","update_date":"2020-07-08T15:43:52Z","discussion":[{"author":"gebner","date":"2020-07-08T15:07:16Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-08T15:43:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/850310516)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/850310465)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/850310424)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/850310450)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/850310497)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/850310409)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":383,"state":"closed","open_date":"2020-07-07T14:32:38Z","update_date":"2020-07-07T19:41:43Z","discussion":[{"author":"robertylewis","date":"2020-07-07T14:36:14Z","comment":"Any prediction what build time bot will have to stay about this? :)"},{"author":"gebner","date":"2020-07-07T16:12:49Z","comment":"The motivation was @jcommelin's complaint about @semorrison's PR (leanprover-community/mathlib#3275) on Zulip: https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.233275.20tensor.20polynomial/near/203067417\r\n\r\nWith this PR, the compilation time of `polynomial_algebra.lean` goes down from 37s to 25s.  The elaboration time of `to_fun_alg_hom` goes down from 4.62s to 2.3s.\r\n\r\nI compiled mathlib with this change and did not run into any errors."},{"author":"gebner","date":"2020-07-07T19:19:33Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-07T19:41:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/847008448)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/847008594)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/847008380)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/847008396)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/847008427)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/847008513)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":381,"state":"closed","open_date":"2020-07-06T19:35:08Z","update_date":"2020-10-27T10:34:02Z","discussion":[{"author":"fpvandoorn","date":"2020-07-06T19:56:20Z","comment":"***If*** this is the right way to go:\r\n* What does `0 < 0.1` mean after this change? Error, cannot find `has_div` instance on `nat`? Or is it actually an inequality in `rat` (once `rat` is defined)?\r\n* I prefer [monus](https://en.wikipedia.org/wiki/Monus) `∸` over `-.`\r\n* Before this merges, we need to at least add some doc strings to the new classes."},{"author":"gebner","date":"2020-07-06T20:11:53Z","comment":"> What does `0 < 0.1` mean after this change?\r\n\r\nIt is an elaboration error (`failed to synthesize type class instance for has_div ℕ`).  It is not easy to change the algorithm to default the number type.  (Although I guess we could hack it to pick different types depending on which type classes we need to synthesize...)"},{"author":"cipher1024","date":"2020-07-06T23:23:06Z","comment":"Should we use `÷` instead of `/.`?"},{"author":"PatrickMassot","date":"2020-07-07T09:06:07Z","comment":"I'm not sure at all this is a desirable change. I would much prefer to see more efforts on the automation side than weird notations. I understand it's a huge effort, but fixing `omega` so that it can prove more lemmas about nat subtraction, and fixing the parser so that `0.1` is not silently turned into a nat would be much more useful. I don't see any situation where I would want `0.1` to be anything by a rational number, ready to be coerced to any other field if needed."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":380,"state":"closed","open_date":"2020-07-06T12:14:37Z","update_date":"2020-07-06T13:09:24Z","discussion":[{"author":"gebner","date":"2020-07-06T12:47:30Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-06T13:09:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/841473211)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/841473235)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/841473271)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/841474926)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/841474877)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/841475036)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":378,"state":"closed","open_date":"2020-07-03T01:54:53Z","update_date":"2020-07-03T05:17:16Z","discussion":[{"author":"cipher1024","date":"2020-07-03T02:14:30Z","comment":"Have you tried building mathlib with it?"},{"author":"bryangingechen","date":"2020-07-03T03:25:59Z","comment":"> Have you tried building mathlib with it?\r\n\r\nThe first sentence of the PR is \"mathlib still compiles\", right?"},{"author":"cipher1024","date":"2020-07-03T04:01:35Z","comment":"Right, I should read more carefully. This looks good to me. I haven't reviewed a PR for a while. What is the new way of putting one on the build queue?"},{"author":"bryangingechen","date":"2020-07-03T04:06:18Z","comment":"You can type `bors r+` or equivalently `bors merge` on its own line in a comment or PR review comment. The PR then gets added to the queue which you can view [here](https://app.bors.tech/repositories/24760) (more docs on that page too)."},{"author":"cipher1024","date":"2020-07-03T04:20:21Z","comment":"Nice! Thanks! So by you explaining it to me, you actually accepted the PR, right? "},{"author":"bryangingechen","date":"2020-07-03T04:33:00Z","comment":"No, I didn't put the command on its own line. Didn't want to keep all the fun for myself. 😉 "},{"author":"cipher1024","date":"2020-07-03T04:54:59Z","comment":"Here we go then!"},{"author":"cipher1024","date":"2020-07-03T04:55:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-03T05:17:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/833190340)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/833190270)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/833190312)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/833190288)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/833190325)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/833190305)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":377,"state":"closed","open_date":"2020-07-02T14:49:40Z","update_date":"2020-07-03T07:50:03Z","discussion":[{"author":"gebner","date":"2020-07-03T07:26:12Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-03T07:49:59Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/833500306)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/833500299)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/833500345)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/833500276)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/833500272)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/833500329)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":376,"state":"closed","open_date":"2020-07-02T13:53:08Z","update_date":"2020-07-03T09:54:46Z","discussion":[{"author":"gebner","date":"2020-07-02T13:53:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-02T14:11:52Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/830862513)"},{"author":"gebner","date":"2020-07-03T09:31:54Z","comment":"Finally.  I think we should sanitize the output of the widget tests, replacing `\"key\":\"...\"` by `\"key\":\"\"`.  We already do this for the interactive tests to sanitize the file name.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-07-03T09:54:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/833866359)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/833866375)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/833866484)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/833866508)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/833866444)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/833866468)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":375,"state":"closed","open_date":"2020-07-02T13:52:40Z","update_date":"2020-07-02T14:35:24Z","discussion":[{"author":"gebner","date":"2020-07-02T13:59:40Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-07-02T14:35:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/830938425)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/830938550)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/830938321)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/830938583)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/830938462)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/830938662)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":373,"state":"closed","open_date":"2020-07-01T08:03:56Z","update_date":"2020-07-01T08:35:35Z","discussion":[{"author":"gebner","date":"2020-07-01T08:11:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-01T08:35:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/825685276)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/825685530)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/825685407)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/825685573)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/825685459)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/825685237)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":371,"state":"closed","open_date":"2020-06-30T19:10:38Z","update_date":"2020-07-01T09:00:05Z","discussion":[{"author":"gebner","date":"2020-07-01T08:27:16Z","comment":"Thank you, this looks great!\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-07-01T09:00:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/825760742)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/825760751)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/825760717)\n  * Build macos Release\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/825760683)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/825760660)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":370,"state":"closed","open_date":"2020-06-30T12:59:09Z","update_date":"2020-07-02T12:48:52Z","discussion":[{"author":"gebner","date":"2020-07-02T12:27:08Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-07-02T12:48:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/830568744)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/830568860)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/830568789)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/830568758)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/830568797)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/830568835)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":369,"state":"closed","open_date":"2020-06-30T11:11:49Z","update_date":"2020-06-30T11:52:34Z","discussion":[{"author":"gebner","date":"2020-06-30T11:28:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-30T11:52:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/822174184)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/822174266)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/822174280)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/822174202)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/822174290)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/822174235)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":368,"state":"closed","open_date":"2020-06-29T16:51:26Z","update_date":"2020-06-30T08:43:13Z","discussion":[{"author":"gebner","date":"2020-06-30T07:59:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-30T08:43:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/821579985)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/821579977)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/821579958)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/821580005)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/821579907)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/821579922)"}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":367,"state":"closed","open_date":"2020-06-29T16:31:04Z","update_date":"2020-06-29T17:05:10Z","discussion":[{"author":"gebner","date":"2020-06-29T16:41:16Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T17:05:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/819230610)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/819230553)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/819230570)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/819230530)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/819230626)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/819230647)"}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":366,"state":"closed","open_date":"2020-06-29T12:51:00Z","update_date":"2020-06-29T17:05:15Z","discussion":[{"author":"gebner","date":"2020-06-29T12:55:26Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T13:03:47Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/818342204)"},{"author":"gebner","date":"2020-06-29T14:16:07Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T14:34:47Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/818660818)"},{"author":"bryangingechen","date":"2020-06-29T15:41:14Z","comment":"There's an extra argument to `nat.mul_lt_mul'` here:\r\n\r\nhttps://github.com/leanprover-community/lean/pull/366/files#diff-d3d17d9ef912378c84ec927e3808bda9R1305\r\n\r\n[See the build failure](https://github.com/leanprover-community/lean/pull/366/checks?check_run_id=818639579#step:5:992)."},{"author":"jcommelin","date":"2020-06-29T16:37:12Z","comment":"Weird, I thought I had caught that one."},{"author":"gebner","date":"2020-06-29T16:41:27Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T17:05:06Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/819230610)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/819230553)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/819230570)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/819230530)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/819230626)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/819230647)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":365,"state":"closed","open_date":"2020-06-28T18:16:33Z","update_date":"2020-07-05T21:21:52Z","discussion":[{"author":"gebner","date":"2020-06-29T08:24:09Z","comment":"Why is this a draft?"},{"author":"EdAyers","date":"2020-06-29T08:50:32Z","comment":"The spacing isn't quite right still..."},{"author":"gebner","date":"2020-06-29T09:46:56Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-29T10:09:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/817918441)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/817918388)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/817918456)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/817918398)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/817918477)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/817918506)"},{"author":"bryangingechen","date":"2020-07-05T21:12:14Z","comment":"@EdAyers I found a similar issue with the types, did this PR also solve this?\r\n<img width=\"1490\" alt=\"squished_types\" src=\"https://user-images.githubusercontent.com/5209952/86542308-a4809d00-bee2-11ea-9568-d797f2d1441c.png\">\r\n"},{"author":"EdAyers","date":"2020-07-05T21:16:27Z","comment":"it should only fix the spacing issues on the LHS of `:` in the context. Please can you confirm that the spacing on `yis_a_max_ofA` is correct if you just print it as a string?"},{"author":"bryangingechen","date":"2020-07-05T21:21:43Z","comment":"Oh, I see. `is_a_max_of` is declared as notation without spaces around it:\r\n```lean\r\ninfix `is_a_max_of`:55 := is_max\r\n```\r\nAdding spaces fixes this. I'll make a PR on the tutorials project then. Sorry for the noise!"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":363,"state":"closed","open_date":"2020-06-27T12:32:11Z","update_date":"2020-06-30T08:21:55Z","discussion":[{"author":"gebner","date":"2020-06-30T07:58:16Z","comment":"LGTM.\r\n\r\nbors r+"},{"author":"bors[bot]","date":"2020-06-30T08:21:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/821497379)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/821497369)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/821497261)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/821497335)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/821497277)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/821497305)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":361,"state":"closed","open_date":"2020-06-26T12:24:46Z","update_date":"2020-06-30T13:01:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":358,"state":"closed","open_date":"2020-06-25T11:49:20Z","update_date":"2020-06-25T12:32:16Z","discussion":[{"author":"gebner","date":"2020-06-25T12:11:01Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-25T12:32:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/807214249)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/807214213)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/807214137)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/807214388)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/807214426)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/807214480)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":357,"state":"closed","open_date":"2020-06-25T10:21:03Z","update_date":"2020-06-25T12:06:38Z","discussion":[{"author":"gebner","date":"2020-06-25T10:58:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-25T11:11:46Z","comment":"Build failed:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/807001683)"},{"author":"gebner","date":"2020-06-25T11:44:22Z","comment":"Uggh, an intermittent error when uploading the github actions artifact.\r\n\r\nbors merge\r\nagain"},{"author":"bors[bot]","date":"2020-06-25T12:06:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/807131357)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/807131404)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/807131330)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/807131365)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/807131338)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/807131388)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":356,"state":"closed","open_date":"2020-06-24T08:11:52Z","update_date":"2020-06-24T08:39:25Z","discussion":[{"author":"gebner","date":"2020-06-24T08:17:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T08:39:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/802564395)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/802564248)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/802564416)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/802564274)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/802564311)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/802564350)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":355,"state":"closed","open_date":"2020-06-23T16:00:52Z","update_date":"2020-06-24T17:00:37Z","discussion":[{"author":"gebner","date":"2020-06-24T10:33:15Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T10:41:04Z","comment":"Canceled."},{"author":"gebner","date":"2020-06-24T10:41:37Z","comment":"bors cancel"},{"author":"gebner","date":"2020-06-24T11:51:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T13:14:50Z","comment":"Build failed:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/803215977)"},{"author":"gebner","date":"2020-06-24T16:38:34Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T17:00:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/804230579)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/804230543)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/804230502)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/804230602)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/804230520)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/804230562)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":354,"state":"closed","open_date":"2020-06-23T13:16:45Z","update_date":"2020-06-23T14:00:32Z","discussion":[{"author":"gebner","date":"2020-06-23T13:16:53Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-23T14:00:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/799462363)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/799462240)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/799462338)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/799462280)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/799462214)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/799462298)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":353,"state":"closed","open_date":"2020-06-23T13:16:34Z","update_date":"2020-10-27T16:31:01Z","discussion":[{"author":"gebner","date":"2020-10-27T15:39:10Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-27T16:30:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1315676570)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1315676523)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1315676494)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1315676329)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1315676305)\n  * [Build sanitized](https://github.com/leanprover-community/lean/runs/1315676406)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1315676155)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":352,"state":"closed","open_date":"2020-06-23T12:57:58Z","update_date":"2020-06-24T10:53:29Z","discussion":[{"author":"gebner","date":"2020-06-23T13:03:41Z","comment":"vscode highlighting: https://github.com/leanprover/vscode-lean/pull/183"},{"author":"gebner","date":"2020-06-24T10:30:25Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-24T10:53:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/802985917)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/802985940)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/802985833)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/802985813)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/802985908)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/802985871)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":350,"state":"closed","open_date":"2020-06-23T09:57:57Z","update_date":"2020-06-23T14:26:17Z","discussion":[{"author":"gebner","date":"2020-06-23T13:19:45Z","comment":"There is still a failing VM check in #349 and I have no idea where that comes from.  But that's not bugworthy since there's still a sorry in there.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-23T14:04:27Z","comment":"Canceled."},{"author":"gebner","date":"2020-06-23T14:04:52Z","comment":"oops\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-23T14:26:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/799635303)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/799635364)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/799635294)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/799635233)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/799635327)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/799635210)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":348,"state":"closed","open_date":"2020-06-22T14:58:53Z","update_date":"2020-06-22T15:20:57Z","discussion":[{"author":"gebner","date":"2020-06-22T14:58:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-22T15:20:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/795810069)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/795810196)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/795806960)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/795806849)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/795806919)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/795806862)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":347,"state":"closed","open_date":"2020-06-21T14:59:15Z","update_date":"2020-06-22T11:34:54Z","discussion":[{"author":"gebner","date":"2020-06-22T11:12:47Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-22T11:34:50Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/795027137)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/795027101)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/795027056)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/795027084)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/795027115)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/795027035)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":346,"state":"closed","open_date":"2020-06-19T15:43:24Z","update_date":"2020-06-22T13:43:50Z","discussion":[{"author":"gebner","date":"2020-06-22T12:51:02Z","comment":"Looks \"good\" to me.  I don't use the filtering options so I don't know what people expect there.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-22T13:20:29Z","comment":"Build failed:\n  * Build macos Debug"},{"author":"gebner","date":"2020-06-22T13:22:27Z","comment":"sudo\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-22T13:43:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/795449870)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/795449841)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/795449737)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/795449806)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/795449784)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/795449879)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":344,"state":"closed","open_date":"2020-06-18T10:32:07Z","update_date":"2020-06-18T11:12:58Z","discussion":[{"author":"gebner","date":"2020-06-18T10:44:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-18T11:12:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/783981786)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/783987416)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/783981811)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/783981832)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/783987347)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/783987463)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":343,"state":"closed","open_date":"2020-06-18T09:53:41Z","update_date":"2020-06-18T10:16:49Z","discussion":[{"author":"gebner","date":"2020-06-18T09:53:47Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-18T10:16:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/783803108)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/783803161)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/783803137)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/783803172)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/783803152)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/783803189)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":342,"state":"closed","open_date":"2020-06-17T16:38:01Z","update_date":"2020-06-17T17:01:28Z","discussion":[{"author":"gebner","date":"2020-06-17T16:38:58Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-17T17:01:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/781280096)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/781280064)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/781280024)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/781280075)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/781280013)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/781280115)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":340,"state":"closed","open_date":"2020-06-16T10:37:13Z","update_date":"2020-06-18T10:50:45Z","discussion":[{"author":"gebner","date":"2020-06-18T10:27:12Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-18T10:50:41Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/783914620)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/783914603)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/783914580)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/783914505)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/783914566)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/783914531)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":339,"state":"closed","open_date":"2020-06-16T10:35:13Z","update_date":"2020-06-16T11:23:07Z","discussion":[{"author":"gebner","date":"2020-06-16T11:00:51Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-16T11:23:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/776195571)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/776195683)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/776195578)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/776195644)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/776195621)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/776195665)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":338,"state":"closed","open_date":"2020-06-16T09:18:43Z","update_date":"2020-06-16T09:42:56Z","discussion":[{"author":"gebner","date":"2020-06-16T09:19:10Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-16T09:42:52Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/775904179)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/775904225)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/775904197)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/775904208)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/775904166)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/775904241)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":337,"state":"closed","open_date":"2020-06-16T08:32:56Z","update_date":"2020-06-16T09:07:29Z","discussion":[{"author":"gebner","date":"2020-06-16T08:42:17Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-16T09:07:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/775781732)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/775781682)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/775781651)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/775781740)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/775781691)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/775781711)"}],"tags":[],"pull_requests":[]},{"author":"jipsen","number":336,"state":"closed","open_date":"2020-06-15T23:58:37Z","update_date":"2020-06-17T17:27:53Z","discussion":[{"author":"jipsen","date":"2020-06-16T01:00:54Z","comment":"Actually, line 216 should also be deleted since it's an incorrect duplicate of line 139 \\blacktriangleright U+25B8. Currently when this symbol is used in a .tex file with the \\usepackage{listing} style, it is displayed as a white triangle in the PDF file."},{"author":"gebner","date":"2020-06-16T07:31:07Z","comment":"Ok, can you then also delete line 216?"},{"author":"jipsen","date":"2020-06-17T16:39:15Z","comment":"Ok, I deleted it. I'm assuming I don't have to make a new pull request, but let me know if something else still needs to be done (sorry, git is not my native language)."},{"author":"gebner","date":"2020-06-17T16:44:51Z","comment":"No, you're doing great.  You can still add commits as long as the PR is not merged.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-17T17:27:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/781352924)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/781352837)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/781352961)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/781352948)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/781352881)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/781352871)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":335,"state":"closed","open_date":"2020-06-15T20:42:08Z","update_date":"2020-06-15T21:05:41Z","discussion":[{"author":"gebner","date":"2020-06-15T20:42:17Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-15T21:05:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/774194513)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/774194466)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/774194485)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/774194502)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/774194527)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/774194537)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":332,"state":"closed","open_date":"2020-06-15T14:51:27Z","update_date":"2020-06-15T17:18:37Z","discussion":[{"author":"gebner","date":"2020-06-15T15:23:22Z","comment":"As expected, all errors were theoretical.  mathlib builds fine.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-15T16:10:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/773285393)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/773285312)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/773285382)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/773285299)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/773285265)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/773285348)"},{"author":"fpvandoorn","date":"2020-06-15T16:32:06Z","comment":"This is really nice! I feel that the exponential search time on type-class inference was one of the big bottlenecks for development in mathlib.\r\n\r\nI wouldn't be surprised if this sped up a lot of other things as well, like `simp` (and maybe even `library_search`?)."},{"author":"gebner","date":"2020-06-15T17:18:37Z","comment":"It will definitely speed up `simp` (in some cases).  My initial motivation came from this test case from the `simp_nf` linter:\r\n```lean\r\nimport all\r\n-- before: 16s\r\n-- after: 0.3s\r\nexample {α : Type*} {β : Type*} (f : α → β) (a : α) :\r\n  (f : pfun α β) a = roption.some (f a) :=\r\nby simp\r\n```"}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":331,"state":"closed","open_date":"2020-06-15T13:03:10Z","update_date":"2020-06-15T15:45:24Z","discussion":[{"author":"gebner","date":"2020-06-15T15:20:57Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-06-15T15:45:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/773198098)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/773198089)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/773198132)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/773198280)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/773198149)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/773198208)"}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":330,"state":"closed","open_date":"2020-06-15T11:56:59Z","update_date":"2020-06-15T15:20:43Z","discussion":[{"author":"gebner","date":"2020-06-15T14:45:01Z","comment":"Is there a reason this can't go into mathlib instead?"},{"author":"JLimperg","date":"2020-06-15T14:59:30Z","comment":"None in particular. The generic reason why I PR'd them here is that I feel like basic functions should be in core so that it remains/becomes possible to use Lean without a 150k LOC dependency."},{"author":"gebner","date":"2020-06-15T15:07:53Z","comment":"Unless they are needed for something else in core, please PR them to mathlib instead."},{"author":"JLimperg","date":"2020-06-15T15:20:43Z","comment":"All right, will do."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":329,"state":"closed","open_date":"2020-06-15T11:25:00Z","update_date":"2020-06-15T12:16:09Z","discussion":[{"author":"gebner","date":"2020-06-15T11:52:57Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-15T12:16:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/772473788)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/772473765)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/772473667)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/772473575)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/772473621)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/772473774)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":328,"state":"closed","open_date":"2020-06-14T14:17:40Z","update_date":"2020-06-14T14:52:14Z","discussion":[{"author":"gebner","date":"2020-06-14T14:29:02Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-14T14:52:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/770067728)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/770067717)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/770067743)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/770067732)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/770067748)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/770067690)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":327,"state":"closed","open_date":"2020-06-13T17:28:35Z","update_date":"2021-10-22T21:04:29Z","discussion":[{"author":"gebner","date":"2020-06-13T17:47:49Z","comment":"I'm half surprised that somebody actually uses this file.  This was part of the never realized algebraic normalizer.  It's not really used in core either, so you could move it to mathlib fairly easily, if you want.\r\n\r\nbors merge"},{"author":"urkud","date":"2020-06-13T18:01:50Z","comment":"I don't use it. I was reading `order/basic` and noticed that we have [is_strict_total_order'](https://leanprover-community.github.io/mathlib_docs/order/basic.html#is_strict_total_order') in `mathlib`."},{"author":"bryangingechen","date":"2020-06-13T18:05:20Z","comment":"I think @digama0 suggested moving all of this order stuff out of core. #288 was sort of a preliminary step, but I ran out of steam."},{"author":"bors[bot]","date":"2020-06-13T18:11:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/768543777)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/768543784)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/768543766)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/768543800)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/768543796)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/768543789)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":325,"state":"closed","open_date":"2020-06-12T15:13:20Z","update_date":"2020-06-12T15:49:06Z","discussion":[{"author":"gebner","date":"2020-06-12T15:14:09Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-12T15:49:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/765908559)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/765906083)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/765908429)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/765906147)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/765906202)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/765906173)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":324,"state":"closed","open_date":"2020-06-12T14:43:04Z","update_date":"2020-06-12T15:18:14Z","discussion":[{"author":"gebner","date":"2020-06-12T14:55:20Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-12T15:18:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/765825182)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/765825155)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/765825192)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/765825131)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/765825102)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/765825054)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":323,"state":"closed","open_date":"2020-06-12T10:16:58Z","update_date":"2020-06-12T10:41:51Z","discussion":[{"author":"gebner","date":"2020-06-12T10:17:29Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-12T10:41:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/765049653)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/765049530)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/765049611)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/765049586)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/765049624)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/765049644)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":322,"state":"closed","open_date":"2020-06-12T01:22:46Z","update_date":"2020-06-27T12:30:33Z","discussion":[{"author":"bryangingechen","date":"2020-06-12T02:05:01Z","comment":"> This is different to the mouse events in that\r\n\r\nDid the end of this sentence get dropped?"},{"author":"gebner","date":"2020-06-12T09:46:25Z","comment":"Also please change the PR title to fit the commit message guidelines."},{"author":"EdAyers","date":"2020-06-12T14:04:09Z","comment":"ok I've now realised there is a simpler fix to the disco selection problem, so I'm going to open that as a separate PR and then this PR can be exclusively for the refactor."},{"author":"gebner","date":"2020-06-23T16:01:21Z","comment":"@EdAyers What was the status of this PR?  Do we still want it?"},{"author":"EdAyers","date":"2020-06-23T16:06:55Z","comment":"Hi I think that this PR has got out of sync with other developments. Can we pause this PR for a while until I have more time to work on it? Now that the sticky selection issue has been solved through other means there is not much reason to refactor and potentially introduce more bugs."},{"author":"gebner","date":"2020-06-23T16:09:12Z","comment":"Sure, no hurry."}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":321,"state":"closed","open_date":"2020-06-12T00:35:49Z","update_date":"2020-06-17T07:47:41Z","discussion":[{"author":"semorrison","date":"2020-06-12T00:54:53Z","comment":"Another thing I'm tempted to do is rename all injectivity lemmas currently named `*_inj` to `*.inj`, to match the automatically generated ones.\r\n\r\nPros:\r\n* Be able to identify injectivity lemmas easily (e.g. have `library_search` ignore them!)\r\n\r\nCons:\r\n* Not be able to distinguish just from the name between automatically generated injectivity lemmas and hand-written ones."},{"author":"gebner","date":"2020-06-17T07:23:41Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-17T07:47:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/779451659)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/779451649)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/779451635)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/779451692)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/779451672)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/779451600)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":320,"state":"closed","open_date":"2020-06-11T13:17:01Z","update_date":"2020-06-11T14:05:37Z","discussion":[{"author":"gebner","date":"2020-06-11T13:39:28Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-11T14:05:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/761901213)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/761901110)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/761901222)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/761901160)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/761901148)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/761901189)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":319,"state":"closed","open_date":"2020-06-11T12:36:46Z","update_date":"2020-06-11T12:59:41Z","discussion":[{"author":"gebner","date":"2020-06-11T12:36:56Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-11T12:59:36Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/761705450)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/761705415)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/761705426)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/761705463)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/761705486)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/761705495)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":318,"state":"closed","open_date":"2020-06-11T09:41:04Z","update_date":"2020-06-11T10:11:36Z","discussion":[{"author":"gebner","date":"2020-06-11T09:41:24Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-11T10:11:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/761214943)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/761214934)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/761215042)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/761215028)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/761215004)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/761214984)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":317,"state":"closed","open_date":"2020-06-11T09:19:44Z","update_date":"2020-06-11T09:49:09Z","discussion":[{"author":"gebner","date":"2020-06-11T09:25:19Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-11T09:49:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/761145387)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/761145460)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/761145350)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/761145477)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/761145407)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/761145432)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":314,"state":"closed","open_date":"2020-06-10T16:43:34Z","update_date":"2020-06-10T17:39:59Z","discussion":[{"author":"gebner","date":"2020-06-10T16:45:40Z","comment":"See discussion at https://github.com/leanprover/lean-client-js/pull/12\r\nCompanion PR: https://github.com/EdAyers/vscode-lean/pull/2\r\n\r\n@EdAyers Does this look reasonable to you?  Does the id of the root component instance change?"},{"author":"EdAyers","date":"2020-06-10T17:00:24Z","comment":"Yes I was just looking at that. The only case where a component id can change is when it is reconciled with an older component. However the root component is never reconciled so the id should be the same for the lifetime of the widget"},{"author":"gebner","date":"2020-06-10T17:10:55Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-10T17:39:55Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/758771174)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/758771121)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/758771224)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/758771109)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/758771164)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/758771199)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":313,"state":"closed","open_date":"2020-06-10T14:59:45Z","update_date":"2020-06-10T15:48:07Z","discussion":[{"author":"gebner","date":"2020-06-10T15:24:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-10T15:48:03Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/758395729)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/758401510)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/758401589)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/758395764)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/758395658)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/758395674)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":312,"state":"closed","open_date":"2020-06-10T14:50:52Z","update_date":"2020-06-10T15:22:12Z","discussion":[{"author":"gebner","date":"2020-06-10T14:57:54Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-10T15:22:08Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/758290581)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/758290636)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/758290565)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/758290624)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/758290675)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/758290700)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":311,"state":"closed","open_date":"2020-06-10T13:33:46Z","update_date":"2020-06-10T14:22:23Z","discussion":[{"author":"gebner","date":"2020-06-10T13:58:45Z","comment":"LGTM, I hope this fixes the react warnings I see in the chrome console.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-10T14:22:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/758069336)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/758069269)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/758069305)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/758069315)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/758069358)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/758069371)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":310,"state":"closed","open_date":"2020-06-10T08:46:35Z","update_date":"2020-06-10T15:59:22Z","discussion":[{"author":"gebner","date":"2020-06-10T09:36:49Z","comment":"bors merge"},{"author":"bryangingechen","date":"2020-06-10T10:04:51Z","comment":"Looks like bors crashed for some reason:\r\n```elixir\r\n{{:badmatch, {:error, :post_comment}},\r\n [\r\n   {BorsNG.GitHub, :post_comment!, 3,\r\n    [file: 'lib/github/github.ex', line: 280]},\r\n   {Enum, :\"-each/2-lists^foreach/1-0-\", 2,\r\n    [file: 'lib/enum.ex', line: 769]},\r\n   {Enum, :each, 2, [file: 'lib/enum.ex', line: 769]},\r\n   {BorsNG.Worker.Batcher, :\"-complete_batch/3-fun-0-\", 4,\r\n    [file: 'lib/worker/batcher.ex', line: 717]},\r\n   {Enum, :\"-each/2-lists^foreach/1-0-\", 2,\r\n    [file: 'lib/enum.ex', line: 769]},\r\n   {Enum, :each, 2, [file: 'lib/enum.ex', line: 769]},\r\n   {BorsNG.Worker.Batcher, :complete_batch, 3,\r\n    [file: 'lib/worker/batcher.ex', line: 716]},\r\n   {BorsNG.Worker.Batcher, :maybe_complete_batch, 1,\r\n    [file: 'lib/worker/batcher.ex', line: 650]}\r\n ]}\r\n```"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":308,"state":"closed","open_date":"2020-06-09T12:13:10Z","update_date":"2020-06-09T16:57:53Z","discussion":[{"author":"gebner","date":"2020-06-09T16:36:30Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-09T16:57:49Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/754694828)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/754694922)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/754694900)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/754694793)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/754694780)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/754694862)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":307,"state":"closed","open_date":"2020-06-09T11:12:25Z","update_date":"2020-06-09T12:04:17Z","discussion":[{"author":"jcommelin","date":"2020-06-09T11:22:43Z","comment":"Does this mean that \"everything is a hole\" now?"},{"author":"gebner","date":"2020-06-09T11:41:16Z","comment":"Well, every underscore has all hole actions available.  It's a bit confusing, because `infer type`, etc., are completely useless.  But let's clean this up afterwards.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-06-09T12:04:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/753674416)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/753674443)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/753674436)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/753674461)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/753674456)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/753674478)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":306,"state":"closed","open_date":"2020-06-09T10:45:41Z","update_date":"2020-06-09T12:28:57Z","discussion":[{"author":"EdAyers","date":"2020-06-09T10:50:33Z","comment":"lgtm, looks like a good way of refactoring the code"},{"author":"gebner","date":"2020-06-09T11:41:30Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-09T12:28:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/753741211)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/753741354)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/753741324)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/753741670)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/753741616)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/753741497)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":305,"state":"closed","open_date":"2020-06-09T10:06:01Z","update_date":"2020-06-09T11:12:01Z","discussion":[{"author":"gebner","date":"2020-06-09T10:48:36Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-09T11:11:58Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/753521629)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/753521655)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/753521645)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/753521679)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/753521669)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/753521640)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":304,"state":"closed","open_date":"2020-06-08T17:01:18Z","update_date":"2020-06-09T10:04:33Z","discussion":[{"author":"gebner","date":"2020-06-09T09:40:55Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-09T10:04:25Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/753319064)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/753319131)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/753319111)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/753319019)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/753319012)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/753318970)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":303,"state":"closed","open_date":"2020-06-08T16:20:38Z","update_date":"2020-06-08T16:48:27Z","discussion":[{"author":"gebner","date":"2020-06-08T16:24:07Z","comment":"bors merge"},{"author":"EdAyers","date":"2020-06-08T16:25:43Z","comment":"Looks good to me! I hope you found it roughly straightforward to understand and modify the code."},{"author":"bors[bot]","date":"2020-06-08T16:48:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/750714446)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/750714428)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/750714411)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/750714347)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/750714336)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/750714380)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":301,"state":"closed","open_date":"2020-06-08T15:21:33Z","update_date":"2020-06-08T18:31:48Z","discussion":[{"author":"gebner","date":"2020-06-08T15:23:27Z","comment":"@EdAyers These are the changes required in the vscode extension: https://github.com/EdAyers/vscode-lean/pull/1"},{"author":"gebner","date":"2020-06-08T18:05:57Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-08T18:31:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/751027548)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/751027753)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/751027682)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/751027930)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/751027916)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/751027846)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":300,"state":"closed","open_date":"2020-06-07T10:31:24Z","update_date":"2020-06-07T11:59:24Z","discussion":[{"author":"gebner","date":"2020-06-07T11:37:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-07T11:59:21Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/747006606)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/747006632)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/747006626)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/747006668)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/747006660)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/747006642)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":299,"state":"closed","open_date":"2020-06-06T16:47:54Z","update_date":"2020-06-06T17:17:40Z","discussion":[{"author":"gebner","date":"2020-06-06T16:56:04Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-06T17:17:36Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/745522630)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/745522674)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/745522665)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/745522657)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/745522651)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/745522617)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":298,"state":"closed","open_date":"2020-06-05T14:13:13Z","update_date":"2020-06-05T15:08:01Z","discussion":[{"author":"gebner","date":"2020-06-05T14:39:47Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-05T15:07:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/742625307)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/742625345)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/742625327)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/742625378)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/742625368)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/742625268)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":297,"state":"closed","open_date":"2020-06-03T15:02:22Z","update_date":"2020-06-03T18:09:44Z","discussion":[{"author":"gebner","date":"2020-06-03T17:41:01Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-03T18:09:40Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/735651631)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/735651668)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/735651653)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/735651705)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/735651693)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/735651726)"}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":296,"state":"closed","open_date":"2020-06-03T06:31:31Z","update_date":"2020-10-11T20:16:20Z","discussion":[{"author":"semorrison","date":"2020-06-03T06:40:33Z","comment":"Note that this doc-string, which is in core, advises using a tactic provided in mathlib.\r\n\r\nI think this is a good idea, regardless :-)"},{"author":"bryangingechen","date":"2020-06-03T06:52:30Z","comment":"> Note that this doc-string, which is in core, advises using a tactic provided in mathlib.\r\n> \r\n> I think this is a good idea, regardless :-)\r\n\r\nI recommend mentioning mathlib and saying something about `import tactic` then. Also should we mention `rcases` as well?"},{"author":"jcommelin","date":"2020-06-03T07:18:59Z","comment":"Shall we also add `forall`, and `iff`?"},{"author":"gebner","date":"2020-06-11T13:47:05Z","comment":"Is this still wip?"},{"author":"gebner","date":"2020-06-11T13:47:10Z","comment":"bors d+"},{"author":"bors[bot]","date":"2020-06-11T13:47:11Z","comment":":v: semorrison can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"bryangingechen","date":"2020-06-11T13:59:14Z","comment":"I'm still uncomfortable with docstrings making reference to tactics that require imports from mathlib without mentioning mathlib or giving example import statements."},{"author":"jcommelin","date":"2020-06-11T14:17:51Z","comment":"Should we add these docstrings from mathlib instead?"},{"author":"bryangingechen","date":"2020-06-11T14:24:58Z","comment":"We could do that, then we would only need to say \"remember to `import tactic`\"."},{"author":"jcommelin","date":"2020-07-14T06:25:35Z","comment":"We should have done something about this before the workshop :facepalm: But it's never too late.\r\nStarted a discussion on Zulip: https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23296.20mention.20tactics.20in.20docstrings"},{"author":"bryangingechen","date":"2020-10-11T19:54:30Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-10-11T20:16:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/1239111298)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/1239111319)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/1239111316)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/1239111334)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/1239111329)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/1239111310)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":295,"state":"closed","open_date":"2020-05-31T19:29:30Z","update_date":"2020-06-02T08:09:46Z","discussion":[{"author":"gebner","date":"2020-06-02T07:41:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T08:09:43Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730030884)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730030855)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730030839)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730030801)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730030794)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730030870)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":294,"state":"closed","open_date":"2020-05-31T10:41:25Z","update_date":"2020-06-02T10:08:27Z","discussion":[{"author":"gebner","date":"2020-06-02T07:44:11Z","comment":"Looks ready to merge to me, why is this still a draft?"},{"author":"EdAyers","date":"2020-06-02T09:24:17Z","comment":"I had some more stuff to add. But I guess this can be merged as is"},{"author":"gebner","date":"2020-06-02T09:35:10Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T10:08:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730360907)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730360859)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730360845)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730360962)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730360931)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730360888)"}],"tags":[],"pull_requests":[]},{"author":"giordano","number":293,"state":"closed","open_date":"2020-05-31T00:58:30Z","update_date":"2020-06-02T09:55:09Z","discussion":[{"author":"gebner","date":"2020-06-02T07:42:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T08:41:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730110191)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730110152)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730110142)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730110213)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730110209)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730110239)"}],"tags":[],"pull_requests":[]},{"author":"giordano","number":292,"state":"closed","open_date":"2020-05-31T00:58:27Z","update_date":"2020-06-02T09:54:40Z","discussion":[{"author":"gebner","date":"2020-06-02T07:43:36Z","comment":"bors merge"},{"author":"gebner","date":"2020-06-02T07:47:10Z","comment":"bors r-"},{"author":"bors[bot]","date":"2020-06-02T07:47:12Z","comment":"Canceled."},{"author":"gebner","date":"2020-06-02T07:47:15Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-06-02T08:20:20Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730043512)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730043534)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730043501)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730043547)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730043523)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730043484)"},{"author":"gebner","date":"2020-06-02T08:24:09Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T09:08:48Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730200609)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730200590)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730200579)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730200545)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730200536)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730200560)"}],"tags":[],"pull_requests":[]},{"author":"giordano","number":291,"state":"closed","open_date":"2020-05-31T00:58:17Z","update_date":"2020-06-03T09:47:39Z","discussion":[{"author":"bryangingechen","date":"2020-05-31T01:04:33Z","comment":"@jlpaca has been building Lean on FreeBSD, but dealing with some issues in [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mystery.20mathlib.20errors.20in.20.60data.2Flist.60)."},{"author":"gebner","date":"2020-06-03T08:59:51Z","comment":"@jlpaca Does this PR work for you?\r\n\r\n@giordano Do the tests succeed on FreeBSD?"},{"author":"giordano","date":"2020-06-03T09:19:49Z","comment":"> @giordano Do the tests succeed on FreeBSD?\r\n\r\nI don't have a FreeBSD system :slightly_smiling_face:   I only cross-compiled with [BinaryBuilder](https://binarybuilder.org/).\r\n\r\nAnyway I think the guards in the code currently use the wrong logic, as I explained above.  It's Windows that is different from most of the rest of the operating systems out there, not the other way around.  In all programs I know, you first check \"if Windows\" and then deal with the rest."},{"author":"gebner","date":"2020-06-03T09:23:42Z","comment":"Ok yes, the change seems reasonable enough.\r\nbors merge\r\n\r\nDid the tests succeed on BinaryBuilder?"},{"author":"giordano","date":"2020-06-03T09:26:21Z","comment":"> Did the tests succeed on BinaryBuilder?\r\n\r\nIt's a cross-compilation environment, we can't run programs for foreign platform (not yet at least) :disappointed: "},{"author":"bors[bot]","date":"2020-06-03T09:46:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/734073398)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/734073345)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/734073340)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/734073308)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/734073294)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/734073384)"}],"tags":[],"pull_requests":[]},{"author":"giordano","number":290,"state":"closed","open_date":"2020-05-31T00:57:34Z","update_date":"2020-06-02T09:54:59Z","discussion":[{"author":"gebner","date":"2020-06-02T07:44:43Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T08:41:13Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730110191)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730110152)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730110142)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730110213)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730110209)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730110239)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":288,"state":"open","open_date":"2020-05-30T18:07:53Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"gebner","date":"2020-05-30T18:31:40Z","comment":"It's too late now, but it's ok to make `leanpkg` meta.  There's nothing we gain from it being non-meta."},{"author":"digama0","date":"2021-01-10T03:40:57Z","comment":"I think we need a means to set the well founded tactic (locally or globally), perhaps using a user attribute. Currently, I think `well_founded_tactics.default` is magic, being used directly as the default well founded generator if nothing is specified. Since both `dec_tac` and `rel_tac` are tactics, we could use a `def_replacer` setup so that the default is editable, but this would require the default tactic here to evaluate some user attribute (which we can set to run `assumption` in core).\r\n\r\nAlternatively, we can have the magic constant be a `tactic well_founded_tactics`, that is, we have a tactic that returns a `well_founded_tactics` that is the default if none is specified (the components of which are themselves tactics which might do various things). This can be similarly set up as a `def_replacer` defaulting to `well_founded_tactics.default`.\r\n\r\nIf we don't do something like this, it seems that tests like `mutual_sizeof.lean` will be significantly degraded since we will have to specify `using_well_founded` all the time, even if we move the test to mathlib where we can use much more sophisticated automatic dec tacs like `linarith`."},{"author":"bryangingechen","date":"2021-01-10T03:55:57Z","comment":"Removing the need to add `using_well_founded` everywhere would be great. `def_replacer` is in mathlib though, so what should we do here? Is there a set up somewhere I can refer to / copy? (Feel free to push to this branch if you want.)"},{"author":"digama0","date":"2021-01-12T04:07:59Z","comment":"`def_replacer` is in mathlib but the techniques that make it work are not. The basic idea is to use a user attribute whose cache is a tactic, the `orelse` of all registered tactics (or with other fold operation depending on the application), and when you need to call the tactic on input x, you look up the current value of the attribute, `eval_expr` it as a tactic of the appropriate type and call it with x."}],"tags":[],"pull_requests":[]},{"author":"rwbarton","number":287,"state":"closed","open_date":"2020-05-29T12:03:11Z","update_date":"2020-06-02T08:41:17Z","discussion":[{"author":"gebner","date":"2020-06-02T07:45:53Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-06-02T08:41:15Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/730110191)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/730110152)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/730110142)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/730110213)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/730110209)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/730110239)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":286,"state":"closed","open_date":"2020-05-28T16:56:31Z","update_date":"2020-05-28T18:14:42Z","discussion":[{"author":"gebner","date":"2020-05-28T17:47:44Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-28T18:14:38Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/717761323)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/717763767)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/717763754)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/717763702)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/717763689)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/717761271)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":284,"state":"closed","open_date":"2020-05-27T18:37:25Z","update_date":"2020-05-27T20:15:40Z","discussion":[{"author":"gebner","date":"2020-05-27T19:47:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-27T20:15:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/714408119)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/714408049)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/714408031)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/714408089)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/714408076)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/714408102)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":283,"state":"closed","open_date":"2020-05-27T16:54:52Z","update_date":"2020-05-27T17:41:38Z","discussion":[{"author":"gebner","date":"2020-05-27T17:16:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-27T17:41:35Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/713971069)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/713971039)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/713971028)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/713971115)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/713971106)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/713971148)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":282,"state":"closed","open_date":"2020-05-27T15:12:36Z","update_date":"2020-05-28T15:34:51Z","discussion":[{"author":"gebner","date":"2020-05-27T18:01:28Z","comment":"I tried building mathlib and found something.  This change has a somewhat unintended side-effect.\r\n\r\nFor example, the `le_refl` goal now looks like this:\r\n```lean\r\n∀ a : α, @has_le.le (has_le.mk α (partial_order.le α)) a a\r\n```\r\n\r\nUnfortunately you can't `rw le_refl` here because the unifier fails to unify the two (at reducible transparency).  This is because projections of constructors are reduced somewhat eagerly and then you have a useless `partial_order.le`."},{"author":"kckennylau","date":"2020-05-28T07:11:58Z","comment":"Does this fix #214?"},{"author":"gebner","date":"2020-05-28T08:19:39Z","comment":"@kckennylau This would indeed fix #214 (modulo the `has_mul.mk` issue I mentioned in the other comment)."},{"author":"gebner","date":"2020-05-28T13:58:02Z","comment":"So, I've ported mathlib and the diff isn't too large: https://github.com/leanprover-community/mathlib/compare/si\r\n\r\nThe workaround for the `has_mul.mk` issue above is as follows.  Consider for example `euclidean_domain.integral_domain`.  This would break:\r\n```lean\r\n@[priority 70] -- see Note [lower instance priority]\r\ninstance (α : Type*) [e : euclidean_domain α] : integral_domain α :=\r\nby haveI := classical.dec_eq α; exact\r\n{ eq_zero_or_eq_zero_of_mul_eq_zero :=\r\n    λ a b (h : a * b = 0), or_iff_not_and_not.2 $ λ h0 : a ≠ 0 ∧ b ≠ 0,\r\n      h0.1 $ by rw [← mul_div_cancel a h0.2, h, zero_div],\r\n  ..e }\r\n```\r\n\r\nThe reason is that the `..e` inserts a reference to `euclidean_domain.add`, which should never be referenced.  The workaround is very easy: just specify `mul := (*)` (etc.) manually:\r\n```lean\r\n@[priority 70] -- see Note [lower instance priority]\r\ninstance (α : Type*) [e : euclidean_domain α] : integral_domain α :=\r\nby haveI := classical.dec_eq α; exact\r\n{ eq_zero_or_eq_zero_of_mul_eq_zero := by exact\r\n    λ a b h, (or_iff_not_and_not.2 $ λ h0,\r\n      h0.1 $ by rw [← mul_div_cancel a h0.2, h, zero_div]),\r\n  zero := 0, add := (+), mul := (*), ..e }\r\n```"},{"author":"gebner","date":"2020-05-28T15:07:05Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-28T15:34:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/717252488)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/717252469)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/717252461)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/717252518)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/717252508)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/717252533)"}],"tags":[],"pull_requests":[]},{"author":"jalex-stark","number":281,"state":"open","open_date":"2020-05-27T02:32:47Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"gebner","date":"2020-05-27T07:22:16Z","comment":"I feel obligated to mention that you could also implement `assumption?` in mathlib using [the trick described here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/set_option.20trace.2Esimplify.2Erewrite.20true/near/195957392)."},{"author":"gebner","date":"2020-06-04T10:17:12Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-06-04T10:25:02Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/738034296)"},{"author":"gebner","date":"2020-06-04T14:18:10Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-06-04T14:28:33Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/738798341)"},{"author":"gebner","date":"2020-06-04T14:40:09Z","comment":"I think for the `?` notation to work, you need to add this before `assumption`: (copied from `rcases`)\r\n```lean\r\nprecedence `?`:max\r\n```\r\n\r\nYou should also add an `assumption'` tactic (of type `tactic unit`) that you can use as auto_param.  That is, replace `. assumption` by `. assumption'` in two tests."},{"author":"jalex-stark","date":"2020-06-04T14:43:42Z","comment":"> I think for the `?` notation to work, you need to add this before `assumption`: (copied from `rcases`)\r\n> \r\n> ```lean\r\n> precedence `?`:max\r\n> ```\r\n> \r\n> You should also add an `assumption'` tactic (of type `tactic unit`) that you can use as auto_param. That is, replace `. assumption` by `. assumption'` in two tests.\r\n\r\nThere's currently an `assumption'` tactic that's essentially `all_goals {assumption}`. which one deserves the name?\r\n(I don't know what an auto_param is, and I don't know which two tests you want replaced.)"},{"author":"gebner","date":"2020-06-04T14:49:28Z","comment":"If you write `. assumption` after the type of an argument, then Lean will try to automatically fill in the argument by calling the tactic `assumption`.  This is also works for structure fields.\r\n\r\nThere are two tests that use `. assumption` (just search for it).  The auto_param is definitely the least important, the current `assumption'` should stay as it is."},{"author":"jalex-stark","date":"2020-06-04T14:53:45Z","comment":"> If you write `. assumption` after the type of an argument, then Lean will try to automatically fill in the argument by calling the tactic `assumption`. This is also works for structure fields.\r\n> \r\n> There are two tests that use `. assumption` (just search for it). The auto_param is definitely the least important, the current `assumption'` should stay as it is.\r\n\r\nso these tests need `. assumption` replaced by `. tactic.assumption`? or we should make `assumption''` an alias for `tactic.assumption`?  (I don't really know what's going on and my instinct is to blindly try to implement what you tell me.)"},{"author":"jalex-stark","date":"2020-06-04T15:27:13Z","comment":"in the latest commit, I have\r\n`./test_single.sh ../../bin/lean assumption.lean` gives output `-- checked`\r\n\r\nbut the `. assumption` tests are I think still broken, working on it."},{"author":"gebner","date":"2020-06-04T15:32:32Z","comment":"I think you should add an `assumption''` and use that in the tests.\r\n\r\nbors try"},{"author":"bors[bot]","date":"2020-06-04T15:40:47Z","comment":"## try\n\nBuild failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/739071434)"},{"author":"gebner","date":"2020-06-04T15:49:59Z","comment":"Oh wow, the precedence change broke a lot of stuff.  You should post a message on Zulip about this.  I'm not sure what the correct solution here is."},{"author":"jalex-stark","date":"2020-06-04T16:12:35Z","comment":"> I feel obligated to mention that you could also implement `assumption?` in mathlib using [the trick described here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/set_option.20trace.2Esimplify.2Erewrite.20true/near/195957392).\r\n\r\nMaybe this approach would get around the current problem. Note that `rcases` is in mathlib and the precedence stuff doesn't break there."}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":280,"state":"closed","open_date":"2020-05-26T22:07:55Z","update_date":"2020-05-27T07:47:04Z","discussion":[{"author":"gebner","date":"2020-05-27T07:18:44Z","comment":"Ooops, I completely missed this when I reviewed the override PR.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-05-27T07:47:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/712113564)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/712113599)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/712113590)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/712113644)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/712113624)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/712113545)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":278,"state":"closed","open_date":"2020-05-26T16:19:10Z","update_date":"2020-05-26T18:06:44Z","discussion":[{"author":"gebner","date":"2020-05-26T17:41:07Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T18:06:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/710295015)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/710294990)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/710294984)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/710295009)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/710295003)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/710294958)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":277,"state":"closed","open_date":"2020-05-26T15:47:26Z","update_date":"2020-05-26T17:11:43Z","discussion":[{"author":"gebner","date":"2020-05-26T15:53:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T17:11:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/710088841)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/710088890)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/710088870)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/710088759)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/710088726)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/710088924)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":276,"state":"closed","open_date":"2020-05-26T13:22:28Z","update_date":"2020-05-26T16:32:13Z","discussion":[{"author":"EdAyers","date":"2020-05-26T13:40:38Z","comment":"Seems like the test runner isn't picking up tests/lean/eformat.lean which should be failing."},{"author":"gebner","date":"2020-05-26T13:43:37Z","comment":"> Seems like the test runner isn't picking up tests/lean/eformat.lean which should be failing.\r\n\r\nThe `eformat` test is executed and seems to be working."},{"author":"EdAyers","date":"2020-05-26T13:45:39Z","comment":"> Are there changes in `pp.cpp` beyond replacing `format` by `T`?\r\n\r\nIn commit 4d1f I change where spaces are added in a binder block. I am now concerned that I tested the wrong thing since eformat test worked for build before that. So this might get revoked.\r\n\r\nOther than that it should produce the same format string as the old pp. Which I trust is occurring since all of the tests still pass."},{"author":"EdAyers","date":"2020-05-26T14:14:59Z","comment":"Ok so with my inconsistent tests, I think that the problem was that sometimes in server mode I wasn't getting a space between two names in the same binder block. \r\n4d1f286 resolved the issue for me but not sure why there is inconsistent behaviour between hover info and output to produced.out. "},{"author":"EdAyers","date":"2020-05-26T14:46:32Z","comment":"Also, if any lean 4 developers are reading this... please consider adding support for structured formats like this to lean 4! They enable a large number of snazzy tricks. "},{"author":"gebner","date":"2020-05-26T15:52:46Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T16:32:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/709959759)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/709959607)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/709959594)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/709959726)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/709959707)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/709959660)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":275,"state":"closed","open_date":"2020-05-26T11:27:48Z","update_date":"2020-05-26T12:40:58Z","discussion":[{"author":"gebner","date":"2020-05-26T11:58:15Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T12:00:33Z","comment":"Canceled."},{"author":"gebner","date":"2020-05-26T12:00:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-26T12:40:54Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/709187797)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/709187846)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/709187829)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/709187700)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/709187685)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/709187757)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":273,"state":"closed","open_date":"2020-05-25T12:32:12Z","update_date":"2020-05-25T14:27:14Z","discussion":[{"author":"gebner","date":"2020-05-25T12:37:20Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-05-25T13:06:22Z","comment":"## try\n\nBuild succeeded:\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/706212772)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/706212783)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/706212763)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/706212793)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/706212717)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/706212736)"},{"author":"gebner","date":"2020-05-25T13:57:46Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-25T14:27:10Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/706433045)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/706433135)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/706433119)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/706433093)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/706433082)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/706433150)"}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":272,"state":"closed","open_date":"2020-05-25T12:02:14Z","update_date":"2020-05-25T12:09:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":271,"state":"closed","open_date":"2020-05-25T10:59:34Z","update_date":"2020-05-25T11:47:13Z","discussion":[{"author":"gebner","date":"2020-05-25T10:59:42Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-25T11:47:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/706005443)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/706005514)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/706005508)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/706005484)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/706005467)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/706005409)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":269,"state":"closed","open_date":"2020-05-25T09:42:01Z","update_date":"2020-05-25T11:17:50Z","discussion":[{"author":"gebner","date":"2020-05-25T10:48:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-25T11:17:46Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/705929226)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/705929207)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/705929181)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/705929091)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/705929059)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/705929244)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":267,"state":"closed","open_date":"2020-05-24T08:16:06Z","update_date":"2020-05-24T09:06:37Z","discussion":[{"author":"bryangingechen","date":"2020-05-24T08:18:36Z","comment":"Question: which linters are most worth tackling next? \r\n\r\n[Here's](https://gist.github.com/bryangingechen/6c2f397b14d756c3c7f72440cd9b4816) the linter output from putting `#lint_all` at the bottom of mathlib's `tactic.lint` (as of 3.14.0c)."},{"author":"gebner","date":"2020-05-24T08:38:16Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-24T09:06:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/703446098)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/703446068)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/703446064)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/703446090)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/703446083)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/703446059)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":266,"state":"closed","open_date":"2020-05-23T08:09:51Z","update_date":"2020-05-23T08:38:08Z","discussion":[{"author":"gebner","date":"2020-05-23T08:10:17Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-23T08:38:04Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/701646458)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/701646469)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/701646463)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/701646449)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/701646443)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/701646429)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":265,"state":"closed","open_date":"2020-05-21T19:04:32Z","update_date":"2020-05-21T19:41:30Z","discussion":[{"author":"gebner","date":"2020-05-21T19:05:27Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-21T19:41:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/697375053)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/697375004)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/697374984)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/697374957)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/697374942)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/697375031)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":264,"state":"closed","open_date":"2020-05-21T18:00:43Z","update_date":"2020-05-21T18:51:37Z","discussion":[{"author":"gebner","date":"2020-05-21T18:17:04Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-21T18:51:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/697264242)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/697264272)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/697264266)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/697264299)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/697264285)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/697264317)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":263,"state":"closed","open_date":"2020-05-21T17:54:55Z","update_date":"2020-05-21T18:25:14Z","discussion":[{"author":"gebner","date":"2020-05-21T17:58:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-21T18:25:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/697181304)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/697181320)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/697181314)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/697181289)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/697181281)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/697181268)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":262,"state":"closed","open_date":"2020-05-21T17:35:23Z","update_date":"2020-05-23T08:59:47Z","discussion":[{"author":"gebner","date":"2020-05-23T07:45:48Z","comment":"LGTM, just need to fix windows ci first."},{"author":"gebner","date":"2020-05-23T08:11:52Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-23T08:59:42Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/701678241)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/701678247)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/701678243)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/701678259)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/701678256)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/701678251)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":261,"state":"closed","open_date":"2020-05-21T17:12:48Z","update_date":"2020-05-21T18:51:39Z","discussion":[{"author":"gebner","date":"2020-05-21T18:09:13Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-21T18:51:34Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/697264242)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/697264272)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/697264266)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/697264299)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/697264285)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/697264317)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":260,"state":"closed","open_date":"2020-05-21T17:04:58Z","update_date":"2020-05-23T08:59:50Z","discussion":[{"author":"semorrison","date":"2020-05-22T01:44:48Z","comment":"Could we have a few more comments?"},{"author":"gebner","date":"2020-05-23T07:47:56Z","comment":"LGTM, still need to fix windows ci."},{"author":"gebner","date":"2020-05-23T08:11:02Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-23T08:59:44Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/701678241)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/701678247)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/701678243)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/701678259)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/701678256)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/701678251)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":259,"state":"closed","open_date":"2020-05-21T16:53:15Z","update_date":"2020-05-23T08:59:52Z","discussion":[{"author":"gebner","date":"2020-05-21T18:10:55Z","comment":"The mathlib name is `map_with_index` and has a better docstring."},{"author":"gebner","date":"2020-05-22T12:07:25Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-22T12:26:44Z","comment":"Build failed:\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/699541859)"},{"author":"gebner","date":"2020-05-23T08:11:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-23T08:59:47Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/701678241)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/701678247)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/701678243)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/701678259)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/701678256)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/701678251)"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":258,"state":"closed","open_date":"2020-05-21T15:44:20Z","update_date":"2020-05-28T16:56:06Z","discussion":[{"author":"EdAyers","date":"2020-05-21T15:44:46Z","comment":"Reopened from #257 "},{"author":"gebner","date":"2020-05-21T16:22:11Z","comment":"This is a really nice but also somewhat large PR.\r\n\r\nThe non-widget changes all seem fairly unobjectionable at first glance.  If you packaged them up as single small PRs, then we could merge most of them without much discussion.\r\n\r\nI need to read up on the widget architecture though.  This will take a while."},{"author":"gebner","date":"2020-05-21T16:26:59Z","comment":"> magic : Type performs the same role as format except that there is a special constructor tag_expr : expr.address → expr → magic → magic that contains information about which subexpression caused this string to be rendered.\r\n\r\nHow about merging `format` and `magic`?  That is, just add an extra constructor to format.  (Maybe something more generic than `expr.address` though.)"},{"author":"EdAyers","date":"2020-05-21T16:38:44Z","comment":"Yeah the problem with this is that format is implemented as a `sexpr` under the hood and there are lots of strange pieces to the implementation of format that I didn't understand so it seemed simpler to just make a separate datatype."},{"author":"gebner","date":"2020-05-22T12:25:51Z","comment":"> Yeah the problem with this is that format is implemented as a `sexpr` under the hood and there are lots of strange pieces to the implementation of format that I didn't understand so it seemed simpler to just make a separate datatype.\r\n\r\nOk, I understand.  Ideally we'd refactor `format` so that it uses VM objects (like Lean 4).  But that's a larger undertaking, which is probably not worth it.\r\n\r\nHow about renaming `magic` to `format2` then?  This makes it clear that it is essentially the same as the normal `format` structure, but just a different implementation."},{"author":"EdAyers","date":"2020-05-23T11:05:17Z","comment":"Yes that's the deal. I'll rename to format2. Or maybe structured_format?"},{"author":"gebner","date":"2020-05-23T12:36:23Z","comment":"Whatever name you like best.  I'm waiting for the PR."},{"author":"gebner","date":"2020-05-28T09:13:38Z","comment":"I don't think there is much missing in this PR, except for:\r\n\r\n - Moving `library/widget` into `init`\r\n - The mutex in `widget_info`\r\n\r\nThe rest could also be done in follow-up PRs.  At this point I believe it would be more useful to gather user feedback from the ~~guinea pigs~~ mathlib contributors.  (I'd also like to make a release.)  What are your thoughts?"},{"author":"EdAyers","date":"2020-05-28T12:47:19Z","comment":"Sounds good to me."},{"author":"EdAyers","date":"2020-05-28T13:40:23Z","comment":"Do you know of any lean syntax tricks to improve making html?\r\nIs there already a tree building API or convention in Lean?\r\nCurrently it looks like this:\r\n``` lean\r\nh \"ul\" [] [\r\n     h \"li\" [] [\"this is list item 1\"],\r\n     h \"li\" [] [\"this is list item 2\"],\r\n     h \"li\" [] [\r\n          h \"span\" [] [\"there is a button here\"],\r\n          h \"button\" [on_click (λ _, 3)] [\"click me!\"]\r\n     ]\r\n]\r\n```"},{"author":"gebner","date":"2020-05-28T15:04:42Z","comment":"The html syntax looks okay to me."},{"author":"gebner","date":"2020-05-28T16:27:58Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-28T16:28:00Z","comment":":-1: Rejected by label"},{"author":"gebner","date":"2020-05-28T16:28:34Z","comment":"sudo bors merge\r\n<!--\r\nbors merge\r\n-->"},{"author":"bors[bot]","date":"2020-05-28T16:56:00Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/717524007)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/717524034)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/717524021)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/717523983)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/717523976)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/717524044)"}],"tags":[{"tag":"enhancement","description":"New feature or request"}],"pull_requests":[]},{"author":"EdAyers","number":257,"state":"closed","open_date":"2020-05-21T15:32:17Z","update_date":"2020-05-21T15:43:10Z","discussion":[{"author":"bryangingechen","date":"2020-05-21T15:37:49Z","comment":"Sorry, do you mind re-opening this from a branch in this repo, so that we can more easily see the results of CI?"},{"author":"EdAyers","date":"2020-05-21T15:42:03Z","comment":"np"},{"author":"EdAyers","date":"2020-05-21T15:43:09Z","comment":"Closing to use branch on this repo"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":255,"state":"closed","open_date":"2020-05-20T08:36:17Z","update_date":"2020-05-20T09:24:59Z","discussion":[{"author":"gebner","date":"2020-05-20T08:56:56Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-20T09:24:56Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/692141366)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/692141396)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/692141384)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/692141352)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/692141341)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/692141308)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":254,"state":"closed","open_date":"2020-05-19T21:36:54Z","update_date":"2020-05-20T07:57:20Z","discussion":[{"author":"gebner","date":"2020-05-20T07:26:22Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-20T07:57:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/691893030)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/691892947)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/691892933)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/691893004)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/691892993)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/691892977)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":253,"state":"closed","open_date":"2020-05-19T16:54:44Z","update_date":"2020-05-20T07:57:22Z","discussion":[{"author":"gebner","date":"2020-05-20T07:26:33Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-20T07:57:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/691893030)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/691892947)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/691892933)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/691893004)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/691892993)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/691892977)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":252,"state":"closed","open_date":"2020-05-19T16:27:05Z","update_date":"2020-05-19T16:58:41Z","discussion":[{"author":"gebner","date":"2020-05-19T16:27:28Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-19T16:58:37Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/689765031)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/689765089)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/689765073)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/689765010)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/689764991)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/689765056)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":251,"state":"closed","open_date":"2020-05-19T15:58:26Z","update_date":"2020-05-19T18:27:31Z","discussion":[{"author":"Kha","date":"2020-05-19T16:24:19Z","comment":"You might be interested in https://github.com/leanprover/lean4/commit/18a89abbe6d0f0528195462098a4663f5c952275 :)"},{"author":"gebner","date":"2020-05-19T16:53:08Z","comment":"Note that this a fairly safe change, since the elaborator only calls type class synthesis for goals that do not have metavariables (except for `out_params`).  So this should only really affect coercions to functions/types, or manual calls to `mk_instance`.\r\n\r\nmathlib builds without a single error.\r\n\r\nFor completeness, I'll also try to disable the corresponding check for standard coercions."},{"author":"gebner","date":"2020-05-19T17:24:16Z","comment":"mathlib still builds."},{"author":"gebner","date":"2020-05-19T17:58:14Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-19T18:27:28Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/690045584)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/690045624)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/690045603)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/690045557)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/690045545)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/690045648)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":250,"state":"closed","open_date":"2020-05-18T10:42:10Z","update_date":"2020-05-18T11:10:31Z","discussion":[{"author":"gebner","date":"2020-05-18T10:42:27Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-18T11:10:27Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/684951749)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/684951784)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/684951775)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/684951727)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/684951716)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/684951763)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":249,"state":"closed","open_date":"2020-05-18T09:30:36Z","update_date":"2020-05-18T10:11:48Z","discussion":[{"author":"gebner","date":"2020-05-18T09:45:46Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-18T10:11:45Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/684791346)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/684791418)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/684791406)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/684791449)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/684791438)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/684791378)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":246,"state":"closed","open_date":"2020-05-17T03:13:30Z","update_date":"2020-05-17T03:58:10Z","discussion":[{"author":"bryangingechen","date":"2020-05-17T03:13:53Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-05-17T03:58:07Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/682029455)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/682029441)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/682029436)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/682029470)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/682029459)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/682029480)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":245,"state":"closed","open_date":"2020-05-16T22:26:42Z","update_date":"2020-05-17T03:32:24Z","discussion":[{"author":"bryangingechen","date":"2020-05-17T03:07:10Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-05-17T03:32:20Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/682002742)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/682002739)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/682002735)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/682002752)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/682002749)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/682002758)"}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":243,"state":"closed","open_date":"2020-05-16T18:41:55Z","update_date":"2020-05-16T19:44:28Z","discussion":[{"author":"bryangingechen","date":"2020-05-16T19:18:03Z","comment":"LGTM!\r\nbors r+"},{"author":"bors[bot]","date":"2020-05-16T19:44:24Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/681402099)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/681402096)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/681402092)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/681402079)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/681402074)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/681402108)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":241,"state":"closed","open_date":"2020-05-15T18:30:54Z","update_date":"2020-05-18T14:33:16Z","discussion":[{"author":"gebner","date":"2020-05-15T19:32:19Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T19:59:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/679297456)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/679297380)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/679297362)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/679297516)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/679297495)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/679297479)"},{"author":"bryangingechen","date":"2020-05-18T01:18:23Z","comment":"I think this commit broke `tactic.olean_doc_strings`: see [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/preparing.20for.20lean-3.2E13.2E0/near/197872929).\r\n\r\n**Edit**: fixed in #249. "}],"tags":[],"pull_requests":[]},{"author":"gebner","number":240,"state":"closed","open_date":"2020-05-15T15:09:41Z","update_date":"2020-05-15T17:50:02Z","discussion":[{"author":"gebner","date":"2020-05-15T17:07:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T17:49:57Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/678931842)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/678931788)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678931769)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/678931830)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/678931821)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/678931855)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":239,"state":"closed","open_date":"2020-05-15T14:49:35Z","update_date":"2020-05-15T17:50:04Z","discussion":[{"author":"bryangingechen","date":"2020-05-15T15:19:08Z","comment":"Awesome! Could you add some tests?"},{"author":"gebner","date":"2020-05-15T17:07:49Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T17:49:59Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/678931842)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/678931788)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678931769)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/678931830)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/678931821)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/678931855)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":238,"state":"closed","open_date":"2020-05-15T12:47:25Z","update_date":"2020-05-15T13:47:23Z","discussion":[{"author":"gebner","date":"2020-05-15T13:13:05Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T13:47:19Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/678170076)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/678170147)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678170140)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/678170123)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/678170114)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/678170097)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":237,"state":"closed","open_date":"2020-05-15T12:10:46Z","update_date":"2020-05-15T12:59:54Z","discussion":[{"author":"gebner","date":"2020-05-15T12:29:35Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T12:59:51Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/678044395)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/678044360)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678044351)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/678044320)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/678044304)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/678044385)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":235,"state":"closed","open_date":"2020-05-14T12:46:38Z","update_date":"2020-05-14T13:17:30Z","discussion":[{"author":"gebner","date":"2020-05-14T12:47:47Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-14T13:17:26Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/674478929)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/674479007)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/674478997)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/674479053)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/674479034)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/674478961)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":234,"state":"closed","open_date":"2020-05-14T09:51:05Z","update_date":"2020-05-15T08:53:27Z","discussion":[{"author":"gebner","date":"2020-05-14T09:51:43Z","comment":"I'll compile mathlib with this change to evaluate the performance difference (of running `by simp` after `import all`)."},{"author":"gebner","date":"2020-05-14T10:12:41Z","comment":"There is one unexpected user-facing change: if you set `_refl_lemma` manually, you need to do this before you set the `simp` attribute now."},{"author":"gebner","date":"2020-05-14T11:05:35Z","comment":"The performance is *nice*:\r\n```\r\n   38ms    46.9%   simp_lemmas.mk_default\r\n```\r\n\r\nThis is after `import all`.  Unfortunately it segfaults on windows, mac, and emscripten."},{"author":"digama0","date":"2020-05-14T11:07:38Z","comment":"At least it works on all the important OS's..."},{"author":"gebner","date":"2020-05-14T16:02:30Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-05-14T16:12:13Z","comment":"## try\n\nBuild failed:\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/675126755)"},{"author":"gebner","date":"2020-05-15T08:19:37Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-15T08:53:23Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/677391740)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/677391713)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/677391707)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/677391772)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/677391761)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/677391794)"}],"tags":[],"pull_requests":[]},{"author":"kckennylau","number":233,"state":"closed","open_date":"2020-05-13T21:39:39Z","update_date":"2020-05-16T19:13:00Z","discussion":[{"author":"bryangingechen","date":"2020-05-13T22:02:45Z","comment":"Did you see #229? That PR removes `init.algebra.ring` entirely. I think you may want to make this change in the corresponding mathlib PR when it appears."},{"author":"jcommelin","date":"2020-05-14T04:19:33Z","comment":"Yup, I would prefer to wait a couple of days."},{"author":"bryangingechen","date":"2020-05-16T19:13:00Z","comment":"I'm closing this for now. This change should be done with the rest of the algebra cleanup in mathlib that we can start on after leanprover-community/mathlib#2697 lands (maybe in a few hours?)."}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":231,"state":"open","open_date":"2020-05-12T14:50:10Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"JLimperg","date":"2020-05-12T14:52:24Z","comment":"I'm not actually sure that this is a good idea, because of the meta issue. For meta types like `name` and `expr`, this instance is fine, but for non-meta types, people should really define both `has_to_format` and `has_to_string`."}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":230,"state":"closed","open_date":"2020-05-12T14:16:06Z","update_date":"2020-05-13T09:41:05Z","discussion":[{"author":"gebner","date":"2020-05-13T09:12:25Z","comment":"bors r+"},{"author":"bors[bot]","date":"2020-05-13T09:40:58Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/670196975)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/670197032)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/670197010)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/670196909)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/670196882)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/670196947)"}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":229,"state":"closed","open_date":"2020-05-11T17:42:08Z","update_date":"2020-05-15T18:28:16Z","discussion":[{"author":"gebner","date":"2020-05-11T17:49:20Z","comment":"Can you merge master?  The diff is full with changes from your `norm_num` PR."},{"author":"gebner","date":"2020-05-11T17:50:50Z","comment":"Also: PR title!"},{"author":"urkud","date":"2020-05-11T18:04:53Z","comment":"What's the point of commenting out the code instead of deleting it?"},{"author":"jcommelin","date":"2020-05-11T18:08:40Z","comment":"Because it's still somewhat WIPpy. I didn't know if it had to be resurrected or not."},{"author":"jcommelin","date":"2020-05-12T05:18:16Z","comment":"I've now also removed a whole bunch of commented code."},{"author":"jcommelin","date":"2020-05-12T06:32:49Z","comment":"There's a whole bunch of tests failing. What do we want to do with them? I've removed one that I think clearly could be removed, but I'm not sure what to do with most of them."},{"author":"gebner","date":"2020-05-12T09:19:15Z","comment":"> There's a whole bunch of tests failing. What do we want to do with them? I've removed one that I think clearly could be removed, but I'm not sure what to do with most of them.\r\n\r\nI've quickly looked over the failing tests:\r\n 1. Some tests fail because you've removed lemmas that the C++ code relies on (and that are listed in `constants.txt`).  Check the errors in the `check_constants.lean` and put the lemmas back.\r\n 2. `(by cc : a + b = b + a)` requires instances for `is_associative (+)` and `is_commutative (+)`.  Add them back (locally?).  Same goes for `ac_refl`.\r\n 3. Often `add_comm` can be replaced by `nat.add_comm`.\r\n 4. Try to keep the spirit of the test.\r\n 4. Many tests are named after the issue number, check the old Lean bug tracker to figure out what the test is supposed to be testing.  That is, for `1898.lean` go to https://github.com/leanprover/lean/issues/1898"},{"author":"gebner","date":"2020-05-15T17:07:24Z","comment":"LGTM.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-05-15T17:19:19Z","comment":"Build failed:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/678900032)"},{"author":"bryangingechen","date":"2020-05-15T17:42:57Z","comment":"A test from #237 needs to be updated: https://github.com/leanprover-community/lean/runs/678900032#step:8:1241"},{"author":"gebner","date":"2020-05-15T17:47:30Z","comment":"bors d+"},{"author":"bors[bot]","date":"2020-05-15T17:47:31Z","comment":":v: jcommelin can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests)."},{"author":"jcommelin","date":"2020-05-15T17:48:22Z","comment":"bors merge\r\n\r\npleeeease....."},{"author":"bors[bot]","date":"2020-05-15T18:28:12Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/679015007)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/679014981)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/679014973)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/679015043)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/679015037)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/679014934)"}],"tags":[{"tag":"enhancement","description":"New feature or request"},{"tag":"rfc","description":""}],"pull_requests":[]},{"author":"JLimperg","number":228,"state":"closed","open_date":"2020-05-11T16:18:10Z","update_date":"2020-05-12T14:16:14Z","discussion":[{"author":"JLimperg","date":"2020-05-11T16:18:16Z","comment":"I can't test these changes with mathlib right now because there's no branch that builds against Lean master, but last I checked, the resulting breakage was relatively minor."},{"author":"gebner","date":"2020-05-11T16:40:09Z","comment":"> I can't test these changes with mathlib right now because there's no branch that builds against Lean master, but last I checked, the resulting breakage was relatively minor.\r\n\r\nFor the record, the branch that builds with mathlib is called `v3.11.0`."},{"author":"JLimperg","date":"2020-05-11T18:48:37Z","comment":"> For the record, the branch that builds with mathlib is called `v3.11.0`.\r\n\r\nOkay, I can cherry-pick this PR and my previous PR, which this one depends on, on top of the v3.11.0 tag. That's actually not terrible. Building mathlib now. (I've also started a [Zulip discussion about an alternative approach](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Create.20a.20mathlib.20branch.20that.20builds.20with.20Lean.20master.3F).)\r\n\r\nAlso, thanks for the prompt review! I'll go through your comments now."},{"author":"JLimperg","date":"2020-05-11T19:17:40Z","comment":"mathlib diff for this PR is indeed very small (+/- 13)."},{"author":"gebner","date":"2020-05-12T11:39:00Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-12T12:13:31Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/666832660)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/666832688)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/666832672)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/666832646)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/666832630)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/666832604)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":227,"state":"closed","open_date":"2020-05-11T14:18:19Z","update_date":"2020-05-14T11:53:06Z","discussion":[{"author":"gebner","date":"2020-05-14T11:13:59Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-14T11:53:02Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/674221660)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/674221681)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/674221670)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/674221701)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/674221691)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/674221628)"}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":226,"state":"closed","open_date":"2020-05-11T11:27:09Z","update_date":"2020-05-11T12:34:36Z","discussion":[{"author":"gebner","date":"2020-05-11T11:28:23Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T12:34:32Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/663173200)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/663173255)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/663173248)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/663173164)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/663173146)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/663173227)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":225,"state":"closed","open_date":"2020-05-11T10:56:14Z","update_date":"2020-05-11T11:26:23Z","discussion":[{"author":"gebner","date":"2020-05-11T10:56:20Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T11:26:11Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/662984800)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/662984856)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/662984845)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/662984783)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/662984776)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/662984824)"}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":224,"state":"closed","open_date":"2020-05-11T07:39:06Z","update_date":"2020-05-11T12:05:04Z","discussion":[{"author":"gebner","date":"2020-05-11T08:31:24Z","comment":"LGTM.  Please choose a PR title that confirms to the naming scheme.  I've also put a few other PRs on the queue, so you will probably need to merge master and update `constants.txt` again in an hour or so."},{"author":"jcommelin","date":"2020-05-11T10:50:43Z","comment":"@gebner I fixed the conflicts"},{"author":"gebner","date":"2020-05-11T11:01:36Z","comment":"Please run `python3 script/gen_constants_cpp.py src/library/constants.txt`"},{"author":"jcommelin","date":"2020-05-11T11:06:12Z","comment":"Thanks! That script is helpful (-;"},{"author":"gebner","date":"2020-05-11T11:09:03Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T12:05:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/663066944)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/663066988)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/663066977)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/663067005)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/663067001)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/663067012)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":223,"state":"closed","open_date":"2020-05-08T16:49:28Z","update_date":"2020-05-08T18:20:20Z","discussion":[{"author":"gebner","date":"2020-05-08T17:32:26Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-08T18:16:01Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/657102867)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/657102773)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/657102745)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/657102695)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/657102681)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/657102725)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":222,"state":"closed","open_date":"2020-05-08T16:02:41Z","update_date":"2020-05-08T17:24:43Z","discussion":[{"author":"gebner","date":"2020-05-08T16:47:34Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-08T17:24:39Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/656986336)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/656986267)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/656986264)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/656986322)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/656986314)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/656986287)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":221,"state":"closed","open_date":"2020-05-08T15:35:17Z","update_date":"2020-05-08T16:13:21Z","discussion":[{"author":"gebner","date":"2020-05-08T15:35:31Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-08T16:13:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/656794783)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/656794727)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/656794713)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/656794816)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/656794806)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/656794761)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":220,"state":"closed","open_date":"2020-05-08T15:32:51Z","update_date":"2020-05-08T16:13:23Z","discussion":[{"author":"gebner","date":"2020-05-08T15:35:33Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-08T16:13:18Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/656794783)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/656794727)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/656794713)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/656794816)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/656794806)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/656794761)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":219,"state":"closed","open_date":"2020-05-08T15:05:05Z","update_date":"2020-05-08T16:13:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":218,"state":"closed","open_date":"2020-05-08T11:25:07Z","update_date":"2020-05-08T15:21:20Z","discussion":[{"author":"gebner","date":"2020-05-08T14:40:43Z","comment":"At least one macos and one windows user downloaded and tested the test release 9.9.9 without complaining, so I assume that this works.\r\n\r\nbors merge"},{"author":"bors[bot]","date":"2020-05-08T15:21:16Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/656636540)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/656636675)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/656636661)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/656636643)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/656636635)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/656636610)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":217,"state":"closed","open_date":"2020-05-07T07:14:44Z","update_date":"2021-10-22T21:04:25Z","discussion":[{"author":"urkud","date":"2020-05-07T07:16:16Z","comment":"The diff is large because I've also added missing lines to `constants.txt`, then sorted the file alphabetically and regenerated two other files."},{"author":"gebner","date":"2020-05-09T10:20:59Z","comment":"bors try"},{"author":"bors[bot]","date":"2020-05-09T10:59:21Z","comment":"## try\n\nBuild succeeded:\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/658788326)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/658788346)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/658788340)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/658788358)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/658788329)\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/658788322)"},{"author":"gebner","date":"2020-05-11T08:25:53Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T09:40:05Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/662662578)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/662662665)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/662662650)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/662662620)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/662662611)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/662662705)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":216,"state":"closed","open_date":"2020-05-07T05:44:26Z","update_date":"2021-10-22T21:04:23Z","discussion":[{"author":"urkud","date":"2020-05-07T07:55:03Z","comment":"Test `tests/lean/doc_strings.lean` fails because it outputs docstrings of all loaded modules thus assumes that no files in `prelude` have module docs. What is the correct fix: `filter` the list before printing it? Something else?"},{"author":"gebner","date":"2020-05-07T08:08:51Z","comment":"> What is the correct fix: `filter` the list before printing it? Something else?\r\n\r\nI would remove the `olean_doc_strings` line.  The `module_doc_strings` is already a function that filters `olean_doc_strings`."},{"author":"urkud","date":"2020-05-07T22:26:23Z","comment":"BTW, should we move some of these lemmas to `mathlib` instead?"},{"author":"gebner","date":"2020-05-11T08:25:39Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T09:02:09Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/662562278)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/662562306)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/662562300)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/662562361)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/662562354)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/662562328)"}],"tags":[],"pull_requests":[]},{"author":"urkud","number":215,"state":"closed","open_date":"2020-05-07T05:15:12Z","update_date":"2021-10-22T21:04:21Z","discussion":[{"author":"gebner","date":"2020-05-07T08:09:35Z","comment":"I'll try to remember to update this next time."}],"tags":[],"pull_requests":[]},{"author":"digama0","number":213,"state":"closed","open_date":"2020-05-06T21:24:57Z","update_date":"2020-05-08T09:21:10Z","discussion":[{"author":"bryangingechen","date":"2020-05-06T22:12:02Z","comment":"Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/rw.3A.20equality.20is.20not.20an.20equality/near/196692155"},{"author":"PatrickMassot","date":"2020-05-07T10:19:05Z","comment":"Was this speed-benchmarked before merging?"},{"author":"gebner","date":"2020-05-07T10:58:55Z","comment":"I've had enough.  I think that this whole idea behind benchmarking Lean changes on mathlib and saying that they should be merged only if the compile time doesn't increase is fundamentally flawed.\r\n\r\nThe job of Lean is not to compile today's mathlib revision as fast as possible.  All code in mathlib has been written to work around Lean's performance and design deficiencies.  It should surprise nobody that it is optimized for the current Lean version.  The changes we're considering here fix actual bugs or allow better designs (see e.g. the type class changes or the congruence lemma changes).  It is possible that some workarounds in mathlib actually become counterproductive, and they should be fixed in mathlib.  Sometimes it also happens that we introduce regressions.  Please report them.  (I didn't see any bug reports about performance regressions recently.)\r\n\r\nI fundamentally disagree with the premise that faster is better.  If a new feature makes working with Lean less painful (such as this very PR), then we should merge it even if it increases mathlib build time a bit.\r\n\r\nOn a slightly more productive note: if you want to benchmark mathlib, please do so in a methodologically sound way.  Compile it always on the same (otherwise idle) machine.  Do it multiple times, and report the variance!  The total build time of mathlib is also not a good long-term metric: mathlib grows every single day.  It would be more informative to measure per-file runtime, or even per-declaration runtime.  This would also probably give more insight if a change causes regression in only a few declarations.\r\n\r\nFinally: I'm not sure complaining about this on every single core PR is going to get anybody interesting in setting up benchmarks."}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":212,"state":"closed","open_date":"2020-05-04T16:09:48Z","update_date":"2020-05-15T06:19:09Z","discussion":[{"author":"gebner","date":"2020-05-11T08:26:40Z","comment":"bors merge"},{"author":"bors[bot]","date":"2020-05-11T09:40:06Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/662662578)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/662662665)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/662662650)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/662662620)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/662662611)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/662662705)"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":211,"state":"closed","open_date":"2020-05-03T17:11:25Z","update_date":"2020-05-08T09:21:01Z","discussion":[{"author":"gebner","date":"2020-05-04T11:41:21Z","comment":"Here's the actual Lean 4 code: https://github.com/leanprover/lean4/blob/7899ab3761f4061f0699e6922102f4abf401f3be/src/Init/Lean/Meta/ExprDefEq.lean#L229-L238"},{"author":"bryangingechen","date":"2020-05-04T13:03:49Z","comment":"Interesting. Does the Lean 4 code behave similarly to this PR? \r\n\r\nWhat's the next step here? Since this PR breaks [a number of proofs in mathlib](https://gist.github.com/bryangingechen/8ebb9400835b54482f4d2246501f94be), is there something else in core that should be adjusted?"},{"author":"gebner","date":"2020-05-04T14:10:13Z","comment":"I think the new Lean 4 code dies exactly the same thing.\r\n\r\nAre the errors in mathlib fixable?  Let's merge this if it doesn't introduce any unsurmountable problems."},{"author":"bryangingechen","date":"2020-05-04T15:12:24Z","comment":"I've opened a branch https://github.com/leanprover-community/mathlib/tree/lean_pr_211 with a few fixes. I'll update the gist above marking the errors I've fixed.\r\n\r\nThere's more discussion about this happening in [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs)."}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":210,"state":"closed","open_date":"2020-05-02T15:55:36Z","update_date":"2020-05-08T09:21:09Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":209,"state":"closed","open_date":"2020-05-01T17:28:17Z","update_date":"2020-05-08T09:21:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":208,"state":"closed","open_date":"2020-05-01T10:40:54Z","update_date":"2020-05-08T09:21:04Z","discussion":[],"tags":[{"tag":"enhancement","description":"New feature or request"}],"pull_requests":[]},{"author":"Vierkantor","number":207,"state":"closed","open_date":"2020-05-01T10:39:14Z","update_date":"2020-05-08T09:21:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":205,"state":"closed","open_date":"2020-04-30T15:43:50Z","update_date":"2020-05-02T15:46:37Z","discussion":[{"author":"JLimperg","date":"2020-04-30T17:39:20Z","comment":"Sorry, just found a bug in nu-rename. Don't review/merge yet."},{"author":"JLimperg","date":"2020-04-30T17:48:24Z","comment":"Okay, now it's at least less obviously buggy."},{"author":"JLimperg","date":"2020-05-01T20:50:56Z","comment":"Thanks for the review!"},{"author":"gebner","date":"2020-05-02T12:06:37Z","comment":"How do you use this tactic to rename multiple variables with the same name?\r\n```lean\r\nexample (x x : ℕ) : ... :=\r\nbegin\r\n  rename ???\r\nend\r\n```"},{"author":"digama0","date":"2020-05-02T14:27:13Z","comment":"Hopefully that just names the second one. If you have this situation, you can call `dedup` first, but otherwise the first `x` is basically inaccessible, which is the point of name shadowing."},{"author":"JLimperg","date":"2020-05-02T14:36:12Z","comment":"No, `rename x y` will rename both `x`s. I didn't want to complicate the tactic even more to support a fringe case. (In all of mathlib, there was only one proof that relied on the 'rename only the last occurrence' semantics, and this was easy to solve using `dedup` as you point out.)"}],"tags":[],"pull_requests":[]},{"author":"JLimperg","number":204,"state":"closed","open_date":"2020-04-28T17:11:37Z","update_date":"2020-04-28T17:48:53Z","discussion":[{"author":"JLimperg","date":"2020-04-28T17:12:53Z","comment":"This change is fully backwards-compatible unless someone imports `init.data.string.instances` directly (and why would you?). Should I still write a `changes` entry?"},{"author":"gebner","date":"2020-04-28T17:26:14Z","comment":"LGTM.  The only important thing is that the decidability instance still has exactly the same name and type, because it is override in the VM.\r\n\r\nIf somebody imports `init.data.string.instances`, they're on their own."}],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":203,"state":"closed","open_date":"2020-04-28T09:35:55Z","update_date":"2020-04-28T13:29:10Z","discussion":[{"author":"gebner","date":"2020-04-28T09:52:30Z","comment":"Wow, I didn't expect the tests to actually pass. :open_mouth: "},{"author":"PatrickMassot","date":"2020-04-28T09:55:58Z","comment":"We still lack performance tests..."}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":202,"state":"closed","open_date":"2020-04-25T00:04:41Z","update_date":"2020-04-28T06:44:21Z","discussion":[{"author":"gebner","date":"2020-04-25T09:14:18Z","comment":"I'm not sure what this buys us?  Nobody imports `init.control.monad` directly, I hope?  Am I missing something?\r\n\r\nThe change effects nothing, but it also affects nothing and :four_leaf_clover: has `Init.Control.Monad` as well.  So let's merge it."},{"author":"semorrison","date":"2020-04-26T01:57:10Z","comment":"Sorry @gebner, I should have been clearer --- what it buys is no one getting confused after in mathlib we rename `category` to `control`, and `category_theory` to `category`."},{"author":"cipher1024","date":"2020-04-26T20:33:25Z","comment":"I don't know that `category_theory` should be renamed to `category`. I support `category` -> `control` but I feel like `category_theory` is a bit like `group_theory`, no?"},{"author":"jcommelin","date":"2020-04-28T06:44:21Z","comment":"Maybe the directory should keep the same name, but I guess it would make sense to rename `category_theory.category` to `_root_.category`? And maybe the namespace `category_theory` should also be renamed to `category`?"}],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":198,"state":"closed","open_date":"2020-04-21T08:17:03Z","update_date":"2020-05-08T09:21:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":195,"state":"closed","open_date":"2020-04-19T14:02:33Z","update_date":"2020-04-20T04:03:19Z","discussion":[{"author":"gebner","date":"2020-04-19T14:41:39Z","comment":"Thanks!"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":194,"state":"closed","open_date":"2020-04-18T11:21:35Z","update_date":"2020-05-08T09:21:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":192,"state":"closed","open_date":"2020-04-14T03:48:39Z","update_date":"2020-04-20T12:05:31Z","discussion":[{"author":"khoek","date":"2020-04-20T11:50:31Z","comment":"@cipher1024 Am I right in thinking that there is no way to get the types and `binder_info` of the available included variables? This would make this much more useful I think!\r\n\r\nAlso, what is the difference between an included variable and an available included variable? Perhaps a more intuitive name for `list_include_var_names` is `list_variables`, if I understand correctly what it does?"},{"author":"khoek","date":"2020-04-20T12:05:31Z","comment":"Oh no, ok, it returns the actual `local_const`s. That's cool! At least in mathlib I'd like to wrap this in something which splits out `name \\times binder_info \\time expr`s, and I'll do this in a `#where` pull request in a moment. Is there any reason not to just return this actually?"}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":191,"state":"closed","open_date":"2020-04-14T00:36:01Z","update_date":"2020-04-14T14:40:12Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":190,"state":"closed","open_date":"2020-04-13T18:41:06Z","update_date":"2020-05-08T09:21:19Z","discussion":[{"author":"bryangingechen","date":"2020-04-16T21:45:57Z","comment":"This is [failing two tests at the moment](https://travis-ci.org/github/leanprover-community/lean/jobs/674894609#L2534): \r\n- https://github.com/leanprover-community/lean/blob/master/tests/lean/run/array1.lean\r\n- https://github.com/leanprover-community/lean/blob/master/tests/lean/run/array2.lean\r\n\r\n**edit**: I've fixed the tests, but it looks like there are other open questions about this PR that I can't address."},{"author":"gebner","date":"2020-04-18T09:03:05Z","comment":"@jcommelin Are you still working on this PR?  From my point of view, there are three things that still need to be done:\r\n 1. `array.map` should be defined in terms of `d_array.map` or `d_array.foreach`.\r\n 2. Therefore the type of `d_array.foreach` needs to be generalized.\r\n 3. The C++ implementation of `d_array.foreach` needs to ignore the new type argument."},{"author":"jcommelin","date":"2020-04-18T10:22:40Z","comment":"@gebner Hmmm... when it comes to changing some C++ implementation I would need a lot of hand holding. I'm perfectly happy with someone else making those changes. But if someone wants to take the time to teach me, that's fine as well."}],"tags":[],"pull_requests":[]},{"author":"rwbarton","number":189,"state":"closed","open_date":"2020-04-13T02:03:54Z","update_date":"2020-04-14T08:46:28Z","discussion":[{"author":"rwbarton","date":"2020-04-13T02:12:32Z","comment":"I tested that this PR does not break mathlib."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":188,"state":"closed","open_date":"2020-04-12T09:24:49Z","update_date":"2020-05-08T09:21:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":187,"state":"closed","open_date":"2020-04-11T16:41:35Z","update_date":"2020-05-08T09:21:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":186,"state":"closed","open_date":"2020-04-11T16:20:08Z","update_date":"2020-05-08T09:21:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":185,"state":"closed","open_date":"2020-04-11T11:48:03Z","update_date":"2020-05-08T09:21:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":183,"state":"closed","open_date":"2020-04-11T11:05:35Z","update_date":"2020-05-08T09:21:26Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":182,"state":"closed","open_date":"2020-04-11T10:50:36Z","update_date":"2020-04-11T15:45:08Z","discussion":[{"author":"Kha","date":"2020-04-11T13:20:45Z","comment":"I didn't look too closely, but is the old VM not really bad at preserving linearity?"},{"author":"gebner","date":"2020-04-11T13:49:44Z","comment":"> I didn't look too closely, but is the old VM not really bad at preserving linearity?\r\n\r\nIndeed, it's not great at that.  Several people have told me that it's completely unpredictable.  It's also not easy to debug, but at least you know what to look for.\r\n\r\nHowever the performance characteristics of `parray` are completely and utterly opaque to me.  AFAICT even a simple read can cause allocation."},{"author":"gebner","date":"2020-04-11T15:45:05Z","comment":"I think I remember some of the issues now.  One place where linearity is not preserved is in monadic expressions."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":180,"state":"closed","open_date":"2020-04-09T12:23:14Z","update_date":"2020-05-08T09:21:29Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":179,"state":"closed","open_date":"2020-04-09T10:58:26Z","update_date":"2020-05-08T09:21:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":178,"state":"closed","open_date":"2020-04-08T09:54:54Z","update_date":"2020-05-08T09:21:54Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":177,"state":"closed","open_date":"2020-04-07T17:06:09Z","update_date":"2020-05-08T09:21:55Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":176,"state":"closed","open_date":"2020-04-07T15:29:51Z","update_date":"2020-04-07T16:15:16Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":175,"state":"closed","open_date":"2020-04-07T13:29:55Z","update_date":"2020-04-07T16:15:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"jcommelin","number":174,"state":"closed","open_date":"2020-04-07T08:21:24Z","update_date":"2020-04-07T15:57:21Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":173,"state":"closed","open_date":"2020-04-03T22:47:17Z","update_date":"2020-04-07T15:57:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Jack-Pumpkinhead","number":171,"state":"open","open_date":"2020-04-01T14:11:41Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"digama0","date":"2020-04-01T14:22:02Z","comment":"Rather than having `nat` versions of these theorems, I suggest importing the `decidable.*` order lemmas in `algebra.order` from mathlib and using them instead."},{"author":"digama0","date":"2020-04-01T14:24:38Z","comment":"Also, it would be nice if this extended to `int` as well. Again, it should be as simple as applying the `decidable.*` theorems instead of the regular ones when constructing the instance."},{"author":"Jack-Pumpkinhead","date":"2020-04-01T15:36:36Z","comment":"Oh.. `int.decidable_le` use (implicit) subtraction `int.has_sub` which comes from `int.comm_ring` which contains classical...\r\n\r\nIn other situations `decidable.*` is a good choice."},{"author":"digama0","date":"2020-04-01T15:52:46Z","comment":"Right, because the proof of `int.comm_ring` uses facts about linear ordered rings (on nat, I think) that ultimately trace back to those theorems. I originally wrote the `decidable.*` series with exactly this refactor in mind, but that was before we unfroze the lean repo."}],"tags":[],"pull_requests":[]},{"author":"semorrison","number":170,"state":"closed","open_date":"2020-04-01T12:35:34Z","update_date":"2020-04-04T02:04:18Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"semorrison","number":169,"state":"closed","open_date":"2020-04-01T12:32:52Z","update_date":"2020-04-04T02:04:37Z","discussion":[{"author":"gebner","date":"2020-04-01T13:09:40Z","comment":"Should we also fix `has_emptyc` as well?  Should we make `mk {}` the default for classes (or even structures and/or inductives in general)?\r\n\r\nI am a bit reluctant to make such a fundamental change if the issue is likely to come back in a few months when we switch to Lean 4.\r\n\r\n@Kha Do you know about the situation in Lean 4?  In case you didn't follow the discussion, the issue is that the unifier has special code to unify type and type class arguments with higher transparency (i.e. semireducible).  However this code is only used when the arguments are implicit or instance-implicit.\r\n\r\nUnfortunately, `has_zero.zero` has the type as an explicit argument.  This is because the structure command only makes parameters implicit if they can be inferred from other arguments.  Hence the unification behavior of `has_zero.zero` and `has_add.add` is surprisingly different because the `α` argument has different implicitness:\r\n```lean\r\nhas_zero.zero (α) [has_zero α] : α\r\n\r\n-- for comparison, the `α` is implicit in (+)\r\nhas_add.add {α} [has_add α] : α → α → α\r\n```\r\n\r\nHere is a MWE:\r\n```lean\r\n-- M and ℕ unify with semireducible transparency\r\ndef M := ℕ\r\n\r\ninstance : has_zero M := nat.has_zero\r\ninstance : has_add M := nat.has_add\r\n\r\n-- unifies with reducible transparency\r\nexample (a b : ℕ) : (a + b : M) = (a + b : ℕ) :=\r\nby tactic.reflexivity tactic.transparency.reducible\r\n\r\n-- does not unify with reducible transparency\r\n-- (it should behave just like addition)\r\nexample : (0 : M) = (0 : ℕ) :=\r\nby tactic.reflexivity tactic.transparency.reducible\r\n```"},{"author":"Kha","date":"2020-04-01T14:22:54Z","comment":"> @Kha Do you know about the situation in Lean 4?\r\n\r\nI didn't know about this special case, but it looks like it's still there: https://github.com/leanprover/lean4/blob/master/src/Init/Lean/Meta/ExprDefEq.lean#L161-L172. `TransparencyMode` has been simplified to `all | default | reducible`."},{"author":"gebner","date":"2020-04-01T14:45:08Z","comment":"Nice, there haven't been any changes to the unifier.  Even the comments are the same. :smile: \r\n\r\nSo I guess this means we should make the arguments in `0` implicit.  Let's see how this goes."},{"author":"gebner","date":"2020-04-01T15:39:06Z","comment":"@semorrison Two tests fail now: `pp_zero_bug.lean` (output has changed) and `1562.lean`."},{"author":"semorrison","date":"2020-04-03T01:02:43Z","comment":"Okay... I'm going to have to learn how to actually build Lean again. It's been a while. (I made this PR direct from github.)"},{"author":"bryangingechen","date":"2020-04-03T02:41:50Z","comment":"@semorrison No worries, I've fixed the tests, I hope."}],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":168,"state":"open","open_date":"2020-04-01T00:47:24Z","update_date":"2022-06-09T08:34:11Z","discussion":[{"author":"gebner","date":"2020-04-01T08:40:39Z","comment":"Ping me please once there is something reviewable here."}],"tags":[{"tag":"WIP","description":"Work in progress"}],"pull_requests":[]},{"author":"anfelor","number":167,"state":"closed","open_date":"2020-03-31T17:46:43Z","update_date":"2020-04-04T10:52:06Z","discussion":[{"author":"urkud","date":"2020-03-31T22:28:32Z","comment":"Should we create a branch with all proposed library changes, and a big pending PR from this branch to `master`? This way it will be easier to track, e.g., if this PR conflicts with #161, and at release we can merge the large PR without squashing."},{"author":"gebner","date":"2020-04-01T08:55:56Z","comment":"I think we have enough changes now to warrant a new release.  I'll merge this PR.  (EDIT: as soon as the comments are addressed.)\r\n\r\nI'm not sure if it was the right choice to wait with merging the PRs to keep Lean master compatible with mathlib master.  In the end we don't gain much from it."}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":166,"state":"closed","open_date":"2020-03-31T16:48:00Z","update_date":"2020-04-07T15:57:28Z","discussion":[{"author":"cipher1024","date":"2020-03-31T16:52:53Z","comment":"I appreciate the documentation! I had some complaints about indenting comments in docstrings. People seem to prefer\r\n\r\n```\r\n/-- foo foo bar foo\r\nnew line foo bar foo\r\n-/\r\n```\r\n\r\nbecause of how VSCode reads and displays the comments in hover text."},{"author":"gebner","date":"2020-03-31T17:56:22Z","comment":"This is a definite improvement.  Do you plan to fix the other `[TODO]`s as well?"},{"author":"EdAyers","date":"2020-04-01T14:09:27Z","comment":"Yes, I've just had a look through them now. Some of them were just notes to myself to understand some obscure config flag. I can't understand what some of the config flags do still so is it ok to just remove the '[todo]'?"},{"author":"gebner","date":"2020-04-01T14:17:57Z","comment":"Yes, please remove the TODOs.  If I (or somebody else) knows what the flags do, we can always add it as a suggestion."},{"author":"EdAyers","date":"2020-04-01T14:22:02Z","comment":"done, see the commit message of a6bf1c8 for more info."}],"tags":[],"pull_requests":[]},{"author":"digama0","number":165,"state":"closed","open_date":"2020-03-29T04:13:13Z","update_date":"2020-04-07T15:57:30Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"urkud","number":161,"state":"closed","open_date":"2020-03-24T18:42:55Z","update_date":"2021-10-22T21:04:19Z","discussion":[{"author":"urkud","date":"2020-03-28T17:18:37Z","comment":"Any chance to have it reviewed soon?"},{"author":"cipher1024","date":"2020-03-28T18:19:27Z","comment":"> So far I've always postponed actually merging the PRs until the release day. My reasoning is that it is easier to test changes to Lean if Lean master can build mathlib master.\r\n\r\nIf we switch to GitHub Actions, any chance we could get the build system to check mathlib for us?"},{"author":"gebner","date":"2020-03-28T18:28:22Z","comment":"> If we switch to GitHub Actions, any chance we could get the build system to check mathlib for us?\r\n\r\nWe could, but this check would typically fail.  Usually we make breaking changes in Lean, and then shortly before the release fix mathlib in a `lean3N` branch."}],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":159,"state":"closed","open_date":"2020-03-24T11:21:57Z","update_date":"2020-03-31T13:53:13Z","discussion":[{"author":"semorrison","date":"2020-03-25T05:08:51Z","comment":"Fantastic! It's lovely to see the top to bottom integration of the community work on Lean here. I was trying to prove that `1/#G \\Sigma_g g` projected onto the trivial isotypic component of a G representation, and here we are."}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":158,"state":"closed","open_date":"2020-03-22T17:22:36Z","update_date":"2020-03-24T17:23:37Z","discussion":[{"author":"bryangingechen","date":"2020-03-22T17:24:25Z","comment":"I suggest we also link to [mathlib's installation instructions](https://github.com/leanprover-community/mathlib#installation) in the Installation section, since that's what most users should use."}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":155,"state":"closed","open_date":"2020-03-20T14:42:33Z","update_date":"2020-03-20T15:24:27Z","discussion":[{"author":"gebner","date":"2020-03-20T15:05:40Z","comment":"Looks good.  Did you test this on windows?  Does it fix the issue?"},{"author":"Vtec234","date":"2020-03-20T15:11:05Z","comment":"Yep, I've tested and it seems to fix the problem. We should merge and release this soon if possible, otherwise people on Windows will experience super slow builds with recent mathlib."}],"tags":[],"pull_requests":[]},{"author":"digama0","number":153,"state":"closed","open_date":"2020-03-20T10:25:25Z","update_date":"2020-05-12T12:13:38Z","discussion":[{"author":"urkud","date":"2020-04-08T21:50:24Z","comment":"Note that with this PR `#check ({0, 1} : set nat)` will output `{1, 0}` because @digama0 changes the parser but not the pretty printer."},{"author":"jcommelin","date":"2020-05-11T11:51:38Z","comment":"@urkud @digama0 What is the status here? Yury's `has_singleton` PR has been merged. It would be nice to also have this one. And then fix mathlib."},{"author":"gebner","date":"2020-05-11T14:43:16Z","comment":"The only thing missing here is updating the pretty-printer."},{"author":"urkud","date":"2020-05-11T18:29:47Z","comment":"Possibly fixed the pretty printer. Compiling & testing."},{"author":"gebner","date":"2020-05-12T11:38:14Z","comment":"bors merge"},{"author":"gebner","date":"2020-05-12T11:39:44Z","comment":"bors r-\r\nbors r+"},{"author":"bors[bot]","date":"2020-05-12T11:39:45Z","comment":"Canceled."},{"author":"bors[bot]","date":"2020-05-12T12:13:33Z","comment":"Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build emscripten](https://github.com/leanprover-community/lean/runs/666832660)\n  * [Build linux Debug](https://github.com/leanprover-community/lean/runs/666832688)\n  * [Build linux Release](https://github.com/leanprover-community/lean/runs/666832672)\n  * [Build macos Debug](https://github.com/leanprover-community/lean/runs/666832646)\n  * [Build macos Release](https://github.com/leanprover-community/lean/runs/666832630)\n  * [Build windows Release](https://github.com/leanprover-community/lean/runs/666832604)"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":152,"state":"closed","open_date":"2020-03-19T22:49:26Z","update_date":"2020-10-27T10:34:10Z","discussion":[{"author":"cipher1024","date":"2020-03-20T03:33:47Z","comment":"Why aren't they usable in `calc` blocks anymore? If we used `abbreviation` instead of `notation`, would that be good enough?"},{"author":"jcommelin","date":"2020-03-20T04:08:12Z","comment":"I would also very much like to keep them available in calc-blocks.\r\nOn the up side, does this mean that the `>`-linter can now be removed? Because `simp` will see through the notation, right?"},{"author":"gebner","date":"2020-03-20T11:27:21Z","comment":"> Why aren't they usable in calc blocks anymore?\r\n\r\nThe immediate reason is because the calc parser joins the proofs in the calc proof using transitivity steps.  So consider the following example:\r\n```lean\r\ncalc a = b    : p1\r\n   ... > c    : p2\r\n```\r\nHere `calc` needs to combine `a = b` and `dummy > c` via transitivity.  However, the second expression is actually `c < dummy` and Lean doesn't know how to apply transitivity here.  (The calc parser also gets confused since dummy is now the second argument.)\r\n\r\n> If we used abbreviation instead of notation, would that be good enough?\r\n\r\nThe definitions `ge` and `gt` are already reducible.  AFAICT the only difference between `abbreviation` and `@[reducible, inline] def` is that that the unifier unfolds the abbreviation a bit more eagerly.\r\n\r\nI'm not sure what goes wrong exactly, but I think it boils down to the fact that `e.get_app_fn.const_name` returns different names for `a < b` and `a > b`.  Turning `ge` and `gt` into an abbreviation doesn't change that.\r\n\r\n@digama0 @fpvandoorn IIRC you've been heavily involved in the war against `>`.  Do you have a small MWE of what goes wrong with `>`?"},{"author":"gebner","date":"2020-03-20T11:28:26Z","comment":">  On the up side, does this mean that the >-linter can now be removed? Because simp will see through the notation, right?\r\n\r\nYes!  That's the motivation for this change."},{"author":"Kha","date":"2020-03-20T11:48:43Z","comment":"> I'm not sure what goes wrong exactly, but I think it boils down to the fact that `e.get_app_fn.const_name` returns different names for `a < b` and `a > b`. Turning `ge` and `gt` into an abbreviation doesn't change that.\r\n\r\nThe big issue is head matching as used by `simp` and others, right? There is the `add_key_equivalence` command [that is supposed to solve this issue](https://github.com/leanprover/lean/blob/master/src/library/tactic/kabstract.h#L18), but AFAICS it's never been tried in either corelib or mathlib..."},{"author":"gebner","date":"2020-03-20T12:49:53Z","comment":"> The big issue is head matching as used by simp and others, right?\r\n\r\nI assume so, but I'm not an expert on the gt-issues.\r\n\r\n> There is the add_key_equivalence command that is supposed to solve this issue.\r\n\r\nUnfortunately, the `add_key_equivalence` only affects `kabstract` used by `rw`.  The simplifier uses the `head_index` class, which literally computes `const_name(get_app_fn(lhs))`: https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/library/head_map.cpp#L23"},{"author":"Kha","date":"2020-03-20T12:52:59Z","comment":"Ah, you're right."},{"author":"ChrisHughes24","date":"2020-03-20T13:39:57Z","comment":"Maybe this is for another PR, but should we do the same for `ne` as well?"},{"author":"digama0","date":"2020-03-20T13:55:48Z","comment":"I don't think so. `ne a b` is actually shorter than `not (eq a b)`, and also there are theorems in the `ne` namespace like `ne.symm` that would be lost if it was turned into a notation. Plus `ne` is in simp normal form so there isn't a need to eliminate it."},{"author":"cipher1024","date":"2020-03-20T23:16:12Z","comment":"If we could add the right keys in the right tables rather than removing `>`, I'd prefer that. And if we could have a notion of synonym that can be reused, that would be even better. I can think of the same treatment for `>>=` vs `=<<`. Maybe we need an attribute?"},{"author":"rwbarton","date":"2020-05-26T13:55:35Z","comment":"One mild reason for `>` to be a definition rather than notation is that it means the pretty-printer can reproduce what the user wrote, rather than always producing `<` (or worse, always producing `>`)."}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":150,"state":"closed","open_date":"2020-03-16T13:58:22Z","update_date":"2020-03-16T16:12:34Z","discussion":[{"author":"Vtec234","date":"2020-03-16T14:00:24Z","comment":"@gebner Would you like me to also pop this into the changelog and set the version to 3.7.1?"},{"author":"gebner","date":"2020-03-16T14:07:09Z","comment":"> Would you like me to also pop this into the changelog and set the version to 3.7.1?\r\n\r\nYes, please."},{"author":"bryangingechen","date":"2020-03-16T14:33:37Z","comment":"While we're on the topic of the changelog, I noticed that 3.6.1c was missing. Here it is for ease of copy+paste.\r\n```\r\nv3.6.1c (2 Mar 2020)\r\n--------------------\r\n\r\nBug fix:\r\n - Correctly reference the community fork of Lean in `leanpkg.toml` (#131)\r\n```"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":149,"state":"closed","open_date":"2020-03-12T13:56:05Z","update_date":"2020-04-07T15:57:02Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":148,"state":"closed","open_date":"2020-03-12T13:48:28Z","update_date":"2020-04-07T15:57:03Z","discussion":[{"author":"gebner","date":"2020-03-12T20:14:58Z","comment":"CI failures are of unclear origin, probably related to the 50 minute timeout."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":147,"state":"closed","open_date":"2020-03-12T13:25:13Z","update_date":"2020-04-07T15:57:04Z","discussion":[{"author":"bryangingechen","date":"2020-04-02T05:05:28Z","comment":"Does this mean that we can remove `of_tactic'` from mathlib?"},{"author":"gebner","date":"2020-04-02T09:28:22Z","comment":"I think I've already removed `of_tactic'` from mathlib, did I miss anything?"},{"author":"bryangingechen","date":"2020-04-02T14:57:24Z","comment":"Oh, you're right. I got confused by some comments in the tests."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":143,"state":"closed","open_date":"2020-03-09T13:01:54Z","update_date":"2020-04-07T15:57:05Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":142,"state":"closed","open_date":"2020-03-06T11:26:33Z","update_date":"2020-04-07T15:57:07Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":141,"state":"closed","open_date":"2020-03-05T14:52:10Z","update_date":"2020-03-08T18:43:35Z","discussion":[{"author":"gebner","date":"2020-03-08T14:02:07Z","comment":"@Vierkantor I don't remember: did you test this change on mathlib?  Were there any issues?"},{"author":"Vierkantor","date":"2020-03-08T17:45:50Z","comment":"I tested these changes together with #134, and compared to #134 alone, there were no issues. Should I test building mathlib again with all changes that were merged?"},{"author":"gebner","date":"2020-03-08T18:43:21Z","comment":"Ok, good.  There's no point in testing right now, everything's broken."}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":140,"state":"closed","open_date":"2020-03-05T14:37:40Z","update_date":"2020-03-09T14:08:51Z","discussion":[{"author":"Vtec234","date":"2020-03-07T20:38:37Z","comment":"Fixed! It's only slightly ironic what the culprit was."},{"author":"Vtec234","date":"2020-03-09T12:15:53Z","comment":"@digama0 @cipher1024 : this PR changes the .olean format by adding two extra unsigned 32-bit integers between the version string and the olean hash"},{"author":"digama0","date":"2020-03-09T12:26:45Z","comment":"Is there an olean version number you can bump? Is it possible to support both formats?"},{"author":"Vtec234","date":"2020-03-09T14:08:51Z","comment":"Afaik oleans aren't versioned, but Lean itself is, so I think olean-rs could:\r\n1. parse the olean up until the Lean version string\r\n2. if the version is 3.7 or greater (assuming 3.7 will have this change in it), read the two extra hashes; otherwise, proceed as for earlier versions\r\nThis won't work with dev builds of e.g. current master because the version is still 3.6.1, but should work with proper releases."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":139,"state":"closed","open_date":"2020-03-05T14:01:04Z","update_date":"2020-04-07T15:57:06Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":138,"state":"closed","open_date":"2020-03-04T22:04:19Z","update_date":"2020-03-08T22:23:28Z","discussion":[{"author":"robertylewis","date":"2020-03-04T22:10:48Z","comment":"Nice!\r\n\r\nAFAIK there's no way (before this PR) to make a declaration protected after it's been defined -- it's only done with the `protected def` syntax. Are there any bad interactions if, say, I define `nat.foo`, open `nat`, do some stuff with `foo`, and then protect `foo`?"},{"author":"cipher1024","date":"2020-03-04T22:41:43Z","comment":"I think there shouldn't be but maybe we should ask @Kha for a second opinion. My perspective is that protected only affects name resolution in the elaborator. We can reduce the risk by exposing only `add_protected` (combine `add` and `mk_protected`) instead of letting the user use the two separately. An added benefit of doing it this way is that we won't have tactics popping up randomly making old declarations protected."},{"author":"Kha","date":"2020-03-05T08:31:09Z","comment":"Either way should be fine. The Lean 4 API is `addProtected (env : Environment) (n : Name) : Environment`, though usually you would of course use a higher-level function such as `elabDef (modifiers : Modifiers) (stx : Syntax) : CommandElabM Unit`.\r\n\r\n"},{"author":"cipher1024","date":"2020-03-07T20:25:07Z","comment":"The change seems to make the build time out. I'm not clear on why that would slow down the build."},{"author":"gebner","date":"2020-03-07T20:29:32Z","comment":"> The change seems to make the build time out. I'm not clear on why that would slow down the build. \r\n\r\nI've merged #122 since an example in `mini_crush` will be broken by an upcoming change to the core library (#132).  So you can just merge master and CI will pass."},{"author":"cipher1024","date":"2020-03-07T21:25:54Z","comment":"I have also added a trick to make sure that `make` doesn't time out. Is this related to any recent change?"},{"author":"gebner","date":"2020-03-07T21:31:42Z","comment":"> I have also added a trick to make sure that `make` doesn't time out. Is this related to any recent change?\r\n\r\nThe `travis_long` script is a good idea.  I don't know what causes the time outs, but I've also seen them."}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":136,"state":"closed","open_date":"2020-03-04T19:09:56Z","update_date":"2020-03-12T15:27:55Z","discussion":[{"author":"gebner","date":"2020-03-08T14:07:59Z","comment":"I'm not sure it is a good idea to just move the primed functions to core.  Either we should fix the bugs (and remove the primed functions), or we can keep the bugfix in mathlib.\r\n\r\n@fpvandoorn Do you have a testcase where `of_tactic` fails, or a description of what is wrong with it?"},{"author":"digama0","date":"2020-03-09T03:13:00Z","comment":"@gebner You can kind of see this from the implementation of `of_tactic'`, but `of_tactic` does not properly handle failure reporting. I forget what exactly it does but what it should do is propagate the exception into the tactic monad rather than crashing or something."},{"author":"digama0","date":"2020-03-09T03:17:30Z","comment":"```lean\r\nimport tactic.core\r\n\r\nmeta def tactic.interactive.test (a : interactive.parse\r\n  (lean.parser.of_tactic (@tactic.fail ℕ _ _ \"oh no\"))) :=\r\ntactic.skip\r\n\r\nmeta def tactic.interactive.test' (a : interactive.parse\r\n  (lean.parser.of_tactic' (@tactic.fail ℕ _ _ \"oh no\"))) :=\r\ntactic.skip\r\n\r\nexample : true := begin test end -- vm check failed: is_closure(o)\r\nexample : true := begin test' end -- oh no\r\n```"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":135,"state":"closed","open_date":"2020-03-04T14:13:40Z","update_date":"2020-04-07T15:57:12Z","discussion":[{"author":"gebner","date":"2020-03-05T13:43:07Z","comment":"Travis failure is unrelated, the build script could not access `github.com`.\r\n\r\nI also tried to backport the change from Lean 4 that processes the instance arguments from right to left (instead of left-to-right).  However this breaks some stuff: at the very least we'd need to refactor the `coe_trans` instances and switch their arguments."},{"author":"gebner","date":"2020-03-05T22:34:22Z","comment":"This causes some breakage in mathlib: now the `additive.is_add_hom` and `multiplicative.is_mul_hom` instances for the unbundled instances loop when used in `tensor_product.lean`.\r\n\r\n```lean\r\ninstance additive.is_add_hom [has_mul α] [has_mul β] (f : α → β) [is_mul_hom f] :\r\n  @is_add_hom (additive α) (additive β) _ _ f := /- ... -/\r\n\r\ninstance multiplicative.is_mul_hom [has_add α] [has_add β] (f : α → β) [is_add_hom f] :\r\n  @is_mul_hom (multiplicative α) (multiplicative β) _ _ f := /- ... -/\r\n```\r\n\r\nNote that these instances terminate only if types are unified with only reducible transparency (i.e., that `additive α` and `α` do not unify).  But I believe that this just plain doesn't work in Lean 3.  Such a problem also cropped up earlier with simp lemmas: https://github.com/leanprover-community/mathlib/pull/2026\r\n\r\nAFAICT the only reason why they didn't loop previously is because vector spaces have no `has_mul` instance."},{"author":"jcommelin","date":"2020-03-06T01:33:24Z","comment":"Certainly `additive` and `multiplicative` should be as irreducible as possible."},{"author":"gebner","date":"2020-03-06T14:30:32Z","comment":"> Certainly additive and multiplicative should be as irreducible as possible.\r\n\r\nUnfortunately they become much harder to use.  Consider the first instance:\r\n```lean\r\ninstance additive.is_add_hom [has_mul α] [has_mul β] (f : α → β) [is_mul_hom f] :\r\n  @is_add_hom (additive α) (additive β) _ _ f := /- ... -/\r\n```\r\nIf you look closely, we treat `f` not only as a function of type `f : α → β` (when passing it to `is_mul_hom`), but also as a function of type `f : additive α → additive β` (when passing it to `is_add_hom`).  If we could not unfold `additive`, this instance would not even be well-typed!\r\n\r\nIf `additive α` was irreducible, then we'd need to have a coercion from `α → β` to `additive α → additive β` and the instance would read:\r\n```lean\r\ninstance additive.is_add_hom [has_mul α] [has_mul β] (f : α → β) [is_mul_hom f] :\r\n  is_add_hom (f : additive α → additive β) := /- ... -/\r\n```"},{"author":"gebner","date":"2020-03-06T19:20:23Z","comment":"mathlib builds just fine with https://github.com/leanprover-community/mathlib/pull/2096 applied.  Well, I've had to remove tactics from four proofs because they were no longer necessary."}],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":134,"state":"closed","open_date":"2020-03-03T16:24:56Z","update_date":"2020-03-08T13:52:52Z","discussion":[{"author":"Vierkantor","date":"2020-03-05T09:29:42Z","comment":"Update: `mathlib` doesn't build with this change because it exposes another weirdness (bug?) where η-expansion fails: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Missing.20.CE.B7"},{"author":"Vierkantor","date":"2020-03-05T13:34:55Z","comment":"After fixing the η-expansion issue in the elaborator, mathlib builds successfully (with the appropriate modifications, since `simp` is more powerful now)."},{"author":"gebner","date":"2020-03-05T15:17:42Z","comment":"Oh, I didn't realize this also changed the congruence lemmas for SMT since `mk_congr` calls `mk_congr_simp` first.  I think we should disentangle them by removing the call to `mk_congr_simp` here: https://github.com/leanprover-community/lean/blob/b3a6165c5813ceefa6f31971e40fca9b676e3656/src/library/congr_lemma.cpp#L425"},{"author":"Vierkantor","date":"2020-03-06T15:25:21Z","comment":"I changed `mk_congr` and `mk_congr_simp` so that they call `congr_kinds` and `congr_simp_kinds` respectively. I _think_ the logic for `congr_kinds` is correct, and it passes the tests and builds mathlib successfully. A reviewer should check again that it makes sense though, since it's rather subtle."}],"tags":[],"pull_requests":[]},{"author":"fpvandoorn","number":133,"state":"closed","open_date":"2020-03-02T20:15:18Z","update_date":"2020-03-08T13:51:38Z","discussion":[{"author":"fpvandoorn","date":"2020-03-03T01:02:11Z","comment":"@robertylewis do you remember why you commented out `eval`? I did add it back as a keyword (I don't know how to just add `#eval` as a keyword, neither `#eval` nor `\\#eval` seem to work. Instead, I now just always color `#` using `keywordcolor`)"},{"author":"robertylewis","date":"2020-03-03T09:44:03Z","comment":"We were writing about `polynomial.eval` and it was getting highlighted."}],"tags":[],"pull_requests":[]},{"author":"ChrisHughes24","number":132,"state":"closed","open_date":"2020-03-01T13:04:46Z","update_date":"2020-04-08T15:51:03Z","discussion":[{"author":"digama0","date":"2020-03-02T21:36:58Z","comment":"Oops, I deleted my comment and apparently your response as well."},{"author":"ChrisHughes24","date":"2020-03-02T21:50:54Z","comment":"@digama0 I don't think this is ready to merge yet because of the issue with `linear_ordered_field`. It should extend `field` rather than `division_ring`, but doing that causes an error."},{"author":"digama0","date":"2020-03-02T21:55:52Z","comment":"Why don't the types of the two left_distribs match? I would think that either one is a field and the other is a proven property, or they have the same field.\r\n\r\nAs for one_mul vs mul_one, how about switching the field axiom to `a⁻¹ * a = 1`? It's commutative so it shouldn't matter which we pick, and this makes it more consistent with groups."},{"author":"ChrisHughes24","date":"2020-03-02T21:59:45Z","comment":"I'm not sure why the types of the two `left_distrib`s don't match. They look like they should reduce to the same thing to me, though they do have different instance paths."},{"author":"ChrisHughes24","date":"2020-03-02T22:01:39Z","comment":"The downside to changing the axiom for a field to `a⁻¹ * a = 1` is that it will break more stuff, since previously it was the other way, but I guess this isn't really a big deal."},{"author":"digama0","date":"2020-03-02T22:03:05Z","comment":"This is going to break a lot of stuff anyway. May as well pull the band-aid off and clean things up as much as you can while you have the opportunity."},{"author":"digama0","date":"2020-03-02T22:04:45Z","comment":"I think the left_distrib problem might be a lean bug. Maybe we should wait until someone has a chance to go into the code and fix it"},{"author":"ChrisHughes24","date":"2020-03-02T22:07:04Z","comment":"One last issue I forgot to mention is that this PR does add a bunch of new instances that aren't really necessary. Now that `group` extends `has_one` but not `monoid`, we have a `group.to_has_one` instance that we didn't have before. Is this a problem? "},{"author":"digama0","date":"2020-03-02T22:15:14Z","comment":"Those instances already existed, with those same names no less. You get a `B.to_A` instance by default when you say `class B extends A`."},{"author":"ChrisHughes24","date":"2020-03-02T22:16:06Z","comment":"`group.to_has_one` didn't I don't think, because it didn't extend `has_one`, it extended `monoid`"},{"author":"digama0","date":"2020-03-02T22:16:23Z","comment":"Oh you mean transitive instances. That might be a performance problem because lean doesn't handle diamonds well, we'll see."},{"author":"ChrisHughes24","date":"2020-03-02T22:17:12Z","comment":"If only I could just do `attribute [-instance]` at the end of the file."},{"author":"digama0","date":"2020-03-02T22:17:55Z","comment":"maybe make an issue :D"},{"author":"digama0","date":"2020-03-02T22:18:52Z","comment":"Could you make a MWE for the left_distrib issue? I'm having trouble reproducing it."},{"author":"ChrisHughes24","date":"2020-03-02T22:44:42Z","comment":"[MWE](https://gist.github.com/ChrisHughes24/a1f25f9d9e933838ea41585811236212)"},{"author":"fpvandoorn","date":"2020-03-03T16:29:11Z","comment":"> One last issue I forgot to mention is that this PR does add a bunch of new instances that aren't really necessary. Now that `group` extends `has_one` but not `monoid`, we have a `group.to_has_one` instance that we didn't have before. Is this a problem?\r\n\r\nA workaround for this is to use \r\n```lean\r\nstructure group ...\r\n\r\nattribute [class] group\r\n```\r\nI'm not sure if this has other unintended consequences. I can think of two:\r\n* The projections will have the wrong arguments explicit. This should be fine, since we don't use the `group.foo` projections directly anyway.\r\n* The constructor `group.mk` might be different, but I don't think this will actually be the case with `old_structure_cmd`."},{"author":"ChrisHughes24","date":"2020-03-12T19:54:40Z","comment":"@fpvandoorn Another downside of the `attribute [class]` approach is that the instances `group.to_has_inv` and the like also have the wrong arguments explicit. I can redefine these as `group.to_has_inv'` etc, but this has caused a problem with a `simp [add_comm]` failing to simplify in a situation where `rw add_comm` solves the goal. \r\n\r\nThe `simp` failure fails to prove a goal that looks like `a * b + b * b = b * b + a * b`. The two `a * b` have different paths for `has_mul` and making them the same means that the simplifier succeeds. I know that with `simp [add_comm]` the simplifier puts things in some normalized order, does this ordering depend on the instance path?"},{"author":"gebner","date":"2020-04-07T14:32:18Z","comment":"I'm gonna merge this today.  Please complain if I missed any big issues in the discussion above."},{"author":"gebner","date":"2020-04-08T15:51:02Z","comment":"BTW, I've reverted this for now: #178.  Let's revisit this in Lean >=3.9."}],"tags":[],"pull_requests":[]},{"author":"TwoFX","number":131,"state":"closed","open_date":"2020-02-28T12:12:27Z","update_date":"2020-03-02T10:26:37Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":129,"state":"closed","open_date":"2020-02-26T21:08:03Z","update_date":"2020-04-07T15:57:35Z","discussion":[{"author":"Kha","date":"2020-02-26T21:31:44Z","comment":"How is `f1 ++ soft_break ++ f2` different from `group $ f1 ++ line ++ f2`?"},{"author":"cipher1024","date":"2020-02-26T21:43:14Z","comment":"Doesn't `line` always break? That's what I have observed so far. "},{"author":"Kha","date":"2020-02-26T21:46:17Z","comment":"It shouldn't inside of `group`."},{"author":"cipher1024","date":"2020-02-27T00:09:22Z","comment":"If I write the following, both `trace` statements print the same thing:\r\n\r\n```lean\r\nmeta def test : tactic unit :=\r\ndo let x := list.repeat (to_fmt \"word\") 40,\r\n   let y := format.group $ format.join (list.intersperse format.line x),\r\n   let y' := format.join (list.intersperse format.line x),\r\n   tactic.trace \"> group\",\r\n   tactic.trace y,\r\n   tactic.trace \"> non-group\",\r\n   tactic.trace y'\r\n```\r\n\r\nThey both print:\r\n\r\n```\r\nword\r\nword\r\nword\r\nword\r\n...\r\n```\r\n\r\nAm I misusing `group`?"},{"author":"gebner","date":"2020-02-27T10:18:19Z","comment":"What @Kha said.  You need to put a `format.group` around it, but converting line breaks to spaces when they fit on a single line is literally the raison d'être of `format`.  The formatter in Lean is a standard Wadler-style pretty printer, so it should have all the API you need.  (Read the [paper](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf).)  I don't see any implementation or examples in the PR, is this what you expected:\r\n```lean\r\nopen format\r\n\r\n#eval tactic.trace $ group $\r\n  ((list.range 3).map (λ i, to_fmt \"word\" ++ line)).foldl (++) nil\r\n/-\r\nword word word\r\n\r\n-/\r\n\r\n#eval tactic.trace $ group $\r\n  ((list.range 30).map (λ i, to_fmt \"word\" ++ line)).foldl (++) nil\r\n/-\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\n\r\n-/\r\n```"},{"author":"cipher1024","date":"2020-02-27T18:08:56Z","comment":"Thanks for the clarification. I now see that I did not understand `line` and `group`. Still `soft_break` provides a different feature (I'll add a test to illustrate that). Consider the following:\r\n\r\n```lean\r\n#eval tactic.trace $ group $\r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.line)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ group $\r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.line)).foldl (++) nil\r\n-- prints 25 lines\r\n#eval tactic.trace $ group $\r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ group $\r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints 2 lines\r\n```"},{"author":"gebner","date":"2020-03-01T13:16:19Z","comment":"@cipher1024 You can define `soft_break` yourself:\r\n```lean\r\nopen format\r\nmeta def format.soft_break := line.group\r\n#eval tactic.trace $ group $\r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.line)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ group $\r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.line)).foldl (++) nil\r\n-- prints 25 lines\r\n#eval tactic.trace $ group $\r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ group $\r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints 2 lines\r\n```"},{"author":"cipher1024","date":"2020-03-01T22:09:59Z","comment":"Thanks! I hadn't realized that. And now, it also works without nesting the whole `format` expression inside another `group`:\r\n\r\n```lean\r\n#eval tactic.trace $ \r\n  ((list.range 24).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints one line\r\n#eval tactic.trace $ \r\n  ((list.range 25).map (λ i, to_fmt \"word\" ++ format.soft_break)).foldl (++) nil\r\n-- prints 2 lines\r\n```\r\n\r\nI'll PR it to mathlib."},{"author":"bryangingechen","date":"2020-03-01T22:24:39Z","comment":"At the same time it looks like `format.line` and `format.group` deserve better docstrings."}],"tags":[],"pull_requests":[]},{"author":"ChrisHughes24","number":128,"state":"closed","open_date":"2020-02-25T18:41:34Z","update_date":"2020-08-28T14:51:01Z","discussion":[{"author":"ChrisHughes24","date":"2020-03-01T13:17:32Z","comment":"This breaks `data/nat/bitwise.lean`. Maybe these lemma should be moved to mathlib?"},{"author":"gebner","date":"2020-04-01T08:52:29Z","comment":"> This breaks `data/nat/bitwise.lean`. Maybe these lemma should be moved to mathlib?\r\n\r\nI don't think these are used anywhere, so we can probably safely move them to mathlib."},{"author":"cipher1024","date":"2020-04-02T17:57:58Z","comment":"> > This breaks `data/nat/bitwise.lean`. Maybe these lemma should be moved to mathlib?\r\n> \r\n> I don't think these are used anywhere, so we can probably safely move them to mathlib.\r\n\r\nI can confirm. I believe we PRed this module when I was at Galois. @joehendrix Do you use the Lean 3 community fork at Galois? Is it a problem if `bitvec` moves to `mathlib`?\r\n"},{"author":"gebner","date":"2020-04-07T09:30:50Z","comment":"Another issue is that `nat.pow` and the bitwise operations have efficient VM implementations."},{"author":"cipher1024","date":"2020-04-15T19:14:28Z","comment":"For `nat.pow`, we could use `**` as the notation and not create an instance. We can use it in programs and have a simp rule rewrite it to `^` in proofs."},{"author":"jcommelin","date":"2020-08-28T04:29:12Z","comment":"> Another issue is that `nat.pow` and the bitwise operations have efficient VM implementations.\r\n\r\nDo those VM implementations care about what the definition of `nat.pow` is in Lean? I don't think so, right? So we can make this work, if we want."},{"author":"joehendrix","date":"2020-08-28T04:59:46Z","comment":"I just saw my name mentioned here.\r\nI don't think anybody at Galois is using Lean 3, and dropping `nat.pow` (or just changing the definition) seems fine to me.  I've always been a bit uncomfortable in general with having definitions that are only efficient because they have VM acceleration that isn't always documented in the Lean source."},{"author":"rwbarton","date":"2020-08-28T14:51:01Z","comment":"The build failed because these lemmas are used elsewhere in the core library. I'm going to replace this with a new PR."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":127,"state":"closed","open_date":"2020-02-25T13:28:30Z","update_date":"2020-03-03T11:56:15Z","discussion":[{"author":"bryangingechen","date":"2020-02-25T14:46:00Z","comment":"Here are the commits in 3.5.1c (released 4 Feb 2020) which also aren't in the changelog:\r\n\r\nFeatures:\r\n- feat(tactic/change): allow `change` to be used to rename bound variables (#96)\r\n- feat(frontends/lean/pp): annotate pretty-printed output with full constant names (#89)\r\n- feat(library/init/meta/module_info): import modules from meta code (#88)\r\n- feat(library/init/meta/interactive): make `add_interactive` copy doc string (#97)\r\n- feat(leanpkg): avoid version warning for external Leans (#106) \r\n\r\nBugfixes:\r\n- fix(library/vm/vm_float): VM float cleanup (#87) \r\n- fix(builtin_cmds): force tactic type in run_cmd (#103) \r\n- fix(library/type_context): `?m_1` and `(λ x, ?m_1) y` are definitionally equal (#107)\r\n"},{"author":"gebner","date":"2020-02-25T15:24:39Z","comment":"Thanks, I've added them as well."}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":125,"state":"closed","open_date":"2020-02-23T05:25:36Z","update_date":"2020-02-23T17:04:15Z","discussion":[{"author":"jcommelin","date":"2020-02-23T07:22:28Z","comment":"Should they now also mention `open_locale classical`?"},{"author":"gebner","date":"2020-02-23T09:41:47Z","comment":"Ah, the tests now fail because we check for the exact error message.  Please update the tests.\r\n\r\nI don't think we should mention `open_locale classical`, this is mathlib-specific."},{"author":"bryangingechen","date":"2020-02-23T15:18:43Z","comment":"Whoops, fixed now."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":122,"state":"closed","open_date":"2020-02-21T12:41:33Z","update_date":"2020-04-07T15:57:14Z","discussion":[{"author":"cipher1024","date":"2020-02-22T05:01:00Z","comment":"I'm not sure that's a good idea. I thought it was good to have a couple of sanity checks to make sure we don't go crazy with the checks."},{"author":"gebner","date":"2020-02-22T09:03:19Z","comment":"The ugly truth is that all of the external projects tested in this way are experiments that have not been used by anyone in the last three years (to the best of my knowledge).  Furthermore, all of them are virtually 100% meta code.  The only thing being tested is that the tactics API remains unchanged.\r\n\r\nThe original purpose of the registry test in the CI was to ensure that changes in Lean core don't cause unexpected breakage in the Lean ecosystem.  The ecosystem is *mathlib* now, and we're very actively keeping an eye on it.  I don't see the value in chaining ourselves to abandonware."},{"author":"gebner","date":"2020-03-07T13:03:57Z","comment":"So I didn't want to merge this unless necessary, but #132 breaks the mini_crush examples."}],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":121,"state":"closed","open_date":"2020-02-21T09:45:28Z","update_date":"2020-02-22T12:42:34Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ChrisHughes24","number":119,"state":"closed","open_date":"2020-02-20T21:43:19Z","update_date":"2020-02-26T08:11:14Z","discussion":[{"author":"rwbarton","date":"2020-02-20T23:55:28Z","comment":"> What fallout do we expect from this change in mathlib? Is it clear what we need to do in mathlib?\r\n\r\nProbably just replace all occurrences of `discrete_field` by `field`."},{"author":"digama0","date":"2020-02-21T01:12:26Z","comment":"It's not just a name change, the change to division rings might have some fallout, but I think we have done almost nothing with division rings so this should be mostly just a find/replace job."},{"author":"jcommelin","date":"2020-02-21T06:11:12Z","comment":"Note that this change is in some sense quite important. Currently, in Lean you can have two division ring structures on a type that are provably *not* equal (after applying ext, etc...), whereas they are mathematically identical. The difference would be that in maths `inv zero` doesn't make any sense, whereas in Lean one of the structures could have `inv zero = one` and the other `inv zero = zero`. This fact is actually blocking the generalisation of a bunch of simp-lemmas from fields to division rings."},{"author":"gebner","date":"2020-02-21T10:17:45Z","comment":"The build fails in `ordered_field.lean`."},{"author":"gebner","date":"2020-02-21T15:24:05Z","comment":"Now it fails in `norm_num.lean`."},{"author":"fpvandoorn","date":"2020-02-21T17:58:18Z","comment":"* I think this PR should also get rid of (or at least rename) `discrete_linear_ordered_field`.\r\n* Should we add a `decidable_eq` instance to the fields of `field`? I think we have a couple of choices:\r\n  1. We don't add `decidable_eq`, and just use classical logic to get `decidable_eq` instances\r\n  2. We don't add `decidable_eq`, but add it as an instance whenever needed.\r\n  3. We add `decidable_eq` to `field`.\r\n\r\n  These choices matter if we do constructive logic, but I don't think anyone cares about this too much. However, they might also matter when doing classical logic. For example, if there is an instance `linear_ordered_field -> decidable_linear_order` which uses `classical.prop_decidable` then we might have two instances of `decidable_linear_order rat`, one where `decidable_le` (and variants) is proven, and one where it is a consequence of `classical.prop_decidable`. That could lead to potential fallout (for example: locally changing an instance priority might make all lemmas involving `max` not apply anymore)."},{"author":"ChrisHughes24","date":"2020-02-21T21:46:44Z","comment":"Another option is to make `max` and `abs` fields of the structures and get rid of the `decidable_eq` assumptions. There are examples where there was a diamond where `sup` was not the same as `max` on `with_top` of a linear order. I think there should perhaps be a `has_abs.abs` that includes the `abs` on complexes perhaps? I'd be happy to rename `max` to `sup` as well."},{"author":"digama0","date":"2020-02-21T22:14:09Z","comment":"Why not use the lattice operations for this? `max` coincides with `sup` whenever the former is defined, and `abs` coincides with `max x (-x)` in the current definition but we also might want it to look like `norm` in some cases. But `norm` is real valued while `abs` is valued in the structure, so I don't know what the right generalization is."},{"author":"gebner","date":"2020-02-25T13:19:49Z","comment":"This change seems to require a bit more discussion, is everybody OK with delaying it until Lean 3.7?"},{"author":"jcommelin","date":"2020-02-25T17:32:21Z","comment":"> This change seems to require a bit more discussion, is everybody OK with delaying it until Lean 3.7?\r\n\r\nLet's at least add `inv_zero` to `division_ring`. That should be completely uncontroversial.\r\n"},{"author":"ChrisHughes24","date":"2020-02-25T18:00:59Z","comment":"I think everything in this PR should be uncontroversial. The part that requires discussion is what to do with ordered rings and fields, but this PR does nothing to them."},{"author":"gebner","date":"2020-02-25T18:30:06Z","comment":"Ok, then let's get this in.  I've merged master into the branch and everything builds locally.  Let's wait for the CI."},{"author":"gebner","date":"2020-02-25T18:32:56Z","comment":"One test failed (the C++ code uses the norm_num helper lemmas to construct proofs, and you removed one unnecessary argument).  I've fixed this so that we can merge this ASAP."}],"tags":[],"pull_requests":[]},{"author":"gebner","number":117,"state":"closed","open_date":"2020-02-20T10:12:03Z","update_date":"2020-03-03T11:56:17Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":116,"state":"closed","open_date":"2020-02-19T21:01:55Z","update_date":"2020-03-03T11:56:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":115,"state":"closed","open_date":"2020-02-19T11:03:44Z","update_date":"2020-03-03T11:56:21Z","discussion":[{"author":"fpvandoorn","date":"2020-02-20T19:03:37Z","comment":"Is the test failure related to this change?"},{"author":"bryangingechen","date":"2020-02-20T19:51:45Z","comment":"No, the failure comes from #72, which is supposed to be addressed by #104."},{"author":"gebner","date":"2020-02-20T22:46:43Z","comment":"Yes, the CI error should be fixed now that I've merged master into this branch.  I'm just trying to avoid merges as much as possible because the CI capacity in this repository is severely crippled: we can only do about one CI run every 2 hours or so."}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":113,"state":"closed","open_date":"2020-02-14T02:40:52Z","update_date":"2020-04-14T00:53:51Z","discussion":[{"author":"bryangingechen","date":"2020-02-14T03:35:40Z","comment":"Ugh, [the docstring to `olean_doc_strings` in`init.meta.tactic`](https://github.com/leanprover-community/lean/blob/master/library/init/meta/tactic.lean#L553) contains `` `/-!` `` which breaks the naïve approach I took here. \r\n\r\nShould I try to detect backticks or is there something simpler?"},{"author":"bryangingechen","date":"2020-02-14T05:07:03Z","comment":"~This is still broken... the interactive tests freeze.~\r\n\r\nWith the current approach we'll have to be more careful with backticks near the end of the docstrings. For instance, [this `` `-/ `` in `init.meta.expr`](https://github.com/leanprover-community/lean/blob/master/library/init/meta/expr.lean#L189) was also breaking the build."},{"author":"robertylewis","date":"2020-02-14T09:48:42Z","comment":"Nice!\r\n\r\n> With the current approach we'll have to be more careful with backticks near the end of the docstrings. For instance, [this `` `-/ `` in `init.meta.expr`](https://github.com/leanprover-community/lean/blob/master/library/init/meta/expr.lean#L189) [](/leanprover-community/lean/blob/HEAD@{2020-02-14T05:07:03Z}/library/init/meta/expr.lean#L189) was also breaking the build.\r\n\r\nIt gives an error in VSCode if you write it, right? In that case, I don't think it's a big problem."},{"author":"gebner","date":"2020-02-14T14:03:59Z","comment":"> Should I try to detect backticks or is there something simpler?\r\n\r\nI think you should just change the `olean_doc_string` docstring to `` `/-! ... -/` ``.  Detecting `` `/- `` as done currently in this PR is just as error-prone (it fails for `` `/-! ... -/` ``).  Let's go with the simplest approach here."},{"author":"gebner","date":"2020-02-17T13:44:27Z","comment":"LGTM."}],"tags":[],"pull_requests":[]},{"author":"robertylewis","number":110,"state":"closed","open_date":"2020-02-06T16:11:12Z","update_date":"2020-02-18T21:10:13Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":107,"state":"closed","open_date":"2020-02-03T08:53:29Z","update_date":"2020-02-04T17:00:40Z","discussion":[{"author":"cipher1024","date":"2020-02-04T03:20:46Z","comment":"Can you summarize why this commit is correct and is the kernel using `quick_is_def_eq`? Also, can you check that mathlib builds with it?"},{"author":"gebner","date":"2020-02-04T08:49:41Z","comment":"> Can you summarize why this commit is correct\r\n\r\nThe type context uses the same code for unification and checking definitional equality of terms, this function is called `is_def_eq`.  The variables `m_update_left` and `m_update_right` in the `type_context` class control whether we assign metavariables in the left (resp., right) expression.  They hence control whether we do unification or definitional equality checks.  This issue concerns the case when these variables are set to false, i.e., when we perform definitional equality checks.\r\n\r\nThe `is_def_eq` function is constructed in several layers:\r\n * `is_def_eq` calls `is_def_eq_core`, and then logs a trace message and handles postponed universe level unification problems\r\n * `is_def_eq_core` calls `is_def_eq_core_core`, and adds the pair of the expressions to the cache if they have been found to be definitionally equal\r\n * `is_def_eq_core_core` is the core function.  It does βηιζ-reduction as well as δ-reduction guided by the definitional height heuristic.  Then it tries some ad-hoc heuristics like offset equations and unification hints.  After that, it does the \"typical\" unification steps: e.g. reduce `f a =?= g b` to `f =?= g` and `a =?= b`.  Finally, it implements proof irrelevance.  However, at the very beginning of `is_def_eq_core_core` (before we reduce anything) is a quick check that should detect unifiable/non-unifiable terms without the costly βδιζ-reduction done in `is_def_eq_core_core`; this function is called `quick_is_def_eq`.\r\n * `quick_is_def_eq` has some pretty straightforward checks: return true if the pointers are equal, or return true if we have cached the definitional equality.  Then it unfolds metavariables.  If there is a still a metavariable on one side, then it tries to assign it, however the code essentially works like this [comments are my reading of the code]:\r\n```c++\r\nif (f1 is a metavariable) {\r\n  if (m_update_left) {\r\n    // Try to assign metavariable\r\n  } else {\r\n    // The metavariable is not syntactically equal to the other expression.\r\n    // We cannot assign the metavariable, hence they cannot be\r\n    // definitionally equal.\r\n    // ⚡\r\n    return l_false;\r\n  }\r\n}\r\n```\r\n  Alas, this is not correct.  The expressions could still be definitionally equal after reduction.  This PR changes the `l_false` to `l_undef`, thereby proceeding with `is_def_eq_core_core`.\r\n\r\n> kernel using quick_is_def_eq\r\n\r\nOf course not.  The kernel uses different code for type checking, namely the `type_checker` instead of the `type_context`.\r\n\r\n> Also, can you check that mathlib builds with it?\r\n\r\nThe mathlib build succeeds with debug assertions enabled."}],"tags":[],"pull_requests":[]},{"author":"robertylewis","number":106,"state":"closed","open_date":"2020-01-31T10:38:44Z","update_date":"2020-02-04T16:54:39Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":104,"state":"closed","open_date":"2020-01-30T10:00:56Z","update_date":"2020-02-21T16:10:36Z","discussion":[{"author":"cipher1024","date":"2020-01-30T16:54:21Z","comment":"We're losing a lot of details by doing that. If the error message changes by accident, we won't be warned."},{"author":"bryangingechen","date":"2020-01-31T20:58:31Z","comment":"Related issue: #72. Out of curiosity, does anyone have any insight into why the column number would be inconsistent here?"},{"author":"gebner","date":"2020-02-01T10:40:24Z","comment":"My pet theory is the following: while the position of an expression is stored in the expression itself, the position does not factor in the hash code or equality checks (it is also mutable IIRC).  We probably just deduplicate expressions somewhere, and replace the expression with one position with another (equal!) expression with a different position."},{"author":"gebner","date":"2020-02-04T08:55:07Z","comment":"I think this is a good and pragmatic change and believe that we should merge it.\r\n\r\nThe important part about this test is just that it fails, not the precise wording of the error message.  While it would be nice to fix the nondeterministic column on macOS instead, I'm not sure this is realistic given our resources or even a good use of our time."},{"author":"cipher1024","date":"2020-02-04T17:56:11Z","comment":"What worries me about this change is not so much about losing a test for the wording but losing an indication of the proof state that gets reported. If an error gets introduced in wf recursion such that the goal gets messed up, this is one of the safeguards that could warn us."},{"author":"gebner","date":"2020-02-04T18:23:19Z","comment":"I think we have quite a few other tests for well-founded recursion (including error messages), this test specifically tests for a apparent inconsistency in Lean one or two years ago."},{"author":"gebner","date":"2020-02-21T16:10:36Z","comment":"And the problem reappeared in the darwin build for #122."}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":103,"state":"closed","open_date":"2020-01-30T01:30:27Z","update_date":"2020-02-04T16:55:31Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Vierkantor","number":100,"state":"closed","open_date":"2020-01-28T16:49:56Z","update_date":"2020-02-19T21:02:22Z","discussion":[{"author":"Vierkantor","date":"2020-01-29T11:20:39Z","comment":"I'm currently compiling the full `mathlib` against the changes, but from testing `mathlib/src/tactics`, it seems that only `squeeze_simp` needs some fixes. Here is the PR to `mathlib` to fix this: https://github.com/leanprover-community/mathlib/pull/1923"},{"author":"Vierkantor","date":"2020-01-30T14:31:20Z","comment":"After updating to the master branch, mathlib builds with no errors!\r\n\r\nI've added some code to prevent conflicts between forwards and backwards rewriting rules (preventing an infinite loop of rewriting back-and-forth): if there is a `@[simp] lemma foo` and `simp [<-foo]` is called, the original lemma `foo` is deleted from the set of simp lemmas so that only `foo.symm` remains.\r\n\r\nBut I just realized that this doesn't solve all conflicts: if for whatever reason there is a `@[simp] lemma bar` with the same type as `foo`, `simp [<-foo]` would be equivalent to `simp [<-foo, bar]`, and thus start looping again. I guess the simplest way to prevent all these issues is to say `[<-foo]` is only allowed as an argument to `simp only` so conflicts should be easily apparent. Or is this just something that the user is expected to be careful with?"},{"author":"gebner","date":"2020-02-11T10:30:27Z","comment":"> Or is this just something that the user is expected to be careful with?\r\n\r\nYes, I think this is up to the user.  You can already very easily make simp loop by calling `simp *`, so this issue is not new."},{"author":"gebner","date":"2020-02-11T10:31:27Z","comment":"> Or is this just something that the user is expected to be careful with?\r\n\r\nYes, I think this is up to the user.  You can already very easily make simp loop by calling `simp *`, so this issue is not new.\r\n\r\nLGTM."},{"author":"cipher1024","date":"2020-02-19T19:58:01Z","comment":"What's going on with the build?"},{"author":"bryangingechen","date":"2020-02-19T20:18:09Z","comment":"@cipher1024 From what I can tell, something went wrong [here](https://travis-ci.org/leanprover-community/lean/jobs/652621473#L1584) causing `ccache` not to be installed. [Here's](https://github.com/leanprover-community/lean/blob/master/.travis.yml#L172) the relevant part of `.travis.yml`. Not sure if something changed with homebrew or with travis..."},{"author":"gebner","date":"2020-02-19T20:50:46Z","comment":"This is a bit surprising, the CI worked on the PR."},{"author":"gebner","date":"2020-02-19T21:02:22Z","comment":"See #116."}],"tags":[],"pull_requests":[]},{"author":"robertylewis","number":99,"state":"closed","open_date":"2020-01-27T16:09:08Z","update_date":"2020-02-04T16:56:50Z","discussion":[{"author":"bryangingechen","date":"2020-01-29T20:42:46Z","comment":"While we're at it, we should say something about the community fork vs the official version in the README, e.g. this text snippet should be updated and maybe we should link to the leanprover-community website:\r\n\r\n> Important: Lean 3.4.2 is the latest release. It is also the last release for the Lean 3.x code base. Only major bugs (e.g., soundness) will be fixed for this code base from now on. We are currently developing Lean 4 in a new (private) repository. The Lean 4 source code will be released here when ready. The main goals for Lean 4 are described here.\r\n"},{"author":"robertylewis","date":"2020-01-30T11:00:31Z","comment":"Good call. I've updated the readme a bit more."}],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"pull_requests":[]},{"author":"bryangingechen","number":97,"state":"closed","open_date":"2020-01-13T03:09:49Z","update_date":"2020-01-30T03:56:22Z","discussion":[],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"pull_requests":[]},{"author":"cipher1024","number":96,"state":"closed","open_date":"2020-01-11T22:08:01Z","update_date":"2020-01-13T20:27:04Z","discussion":[{"author":"bryangingechen","date":"2020-01-13T20:27:04Z","comment":"Don't mind me, just commenting here so that issue #95 gets linked."}],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":94,"state":"closed","open_date":"2019-12-28T07:47:25Z","update_date":"2019-12-30T17:54:35Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":92,"state":"closed","open_date":"2019-12-27T18:12:03Z","update_date":"2020-01-27T21:56:23Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"gebner","number":89,"state":"closed","open_date":"2019-12-17T10:29:17Z","update_date":"2020-01-27T23:47:27Z","discussion":[{"author":"gebner","date":"2019-12-17T13:20:17Z","comment":"I also added a `pp.generalized_field_notation` that uses field notation for all function instead of just structure projections."},{"author":"Vtec234","date":"2019-12-17T13:36:06Z","comment":"Do you think with the full knowledge of type information, we could link to the correct *instance* of a typeclass rather than the typeclass itself? E.g. the `•` in `1 • b = b` could link to the inferred instance of `has_scalar mytype` rather than `has_scalar.smul`."},{"author":"gebner","date":"2019-12-17T14:06:25Z","comment":"I would also like to see that.  In practice I'm not sure there's an always an obvious choice for the instance declaration.  E.g. in your example with `•`, the instance for `has_scalar` is `mul_action.to_has_scalar`, which is probably not what you want."},{"author":"cipher1024","date":"2019-12-18T00:49:35Z","comment":"This looks good to me. I especially like what you did to pretty print projections. Ready to merge?"},{"author":"gebner","date":"2019-12-18T09:28:47Z","comment":"Yes, I think this can be merged.  The `pp.generalized_field_notation` option is turned off by default though.  Should we switch it on by default?"},{"author":"robertylewis","date":"2020-01-10T19:37:33Z","comment":"For doc gen reasons, could I request that this PR be included in a 3.5 release before we officially move mathlib over to 3.5?"},{"author":"cipher1024","date":"2020-01-10T19:47:03Z","comment":"Certainly. Sorry I completely lost sight of this PR. We can schedule 3.5.1 in the near future to make this PR available. Let's see if you have backward compatible PRs until then."},{"author":"robertylewis","date":"2020-01-27T14:22:25Z","comment":"@cipher1024 In advance of the shift to 3.5c, could we merge this so it's part of the nightlies?"}],"tags":[],"pull_requests":[]},{"author":"gebner","number":88,"state":"closed","open_date":"2019-12-13T12:52:25Z","update_date":"2020-01-29T17:34:29Z","discussion":[{"author":"gebner","date":"2019-12-14T21:10:25Z","comment":"The tests fail on windows because of the different path separator (`\\` vs. `/`), and because of the style check for the C++ code.  I'll fix that on Monday."}],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"pull_requests":[]},{"author":"gebner","number":87,"state":"closed","open_date":"2019-12-13T12:23:00Z","update_date":"2020-01-29T17:29:48Z","discussion":[{"author":"cipher1024","date":"2019-12-14T09:13:05Z","comment":"Why does the order matter?"},{"author":"gebner","date":"2019-12-14T09:29:52Z","comment":"The order only matters for consistency.  In practice there is no issue here since all the finalizers are empty.  It would make a difference for example if `finalize_vm_float` tried to remove the built-in functions added `initialize_vm_float`: the `g_vm_cbuiltins` map storing the built-in functions is freed in `finalize_vm_core`, and then `finalize_vm_float` would segfault if run in the wrong order."},{"author":"cipher1024","date":"2019-12-14T18:57:26Z","comment":"Ok. Just to confirm, this PR has no effect on the behavior. Is that correct?"},{"author":"gebner","date":"2019-12-14T21:08:52Z","comment":"Yes, there should be no effects on the runtime behavior.  I wanted to create a vm_float, and happened to notice the wrong finalization order (as well as the missing `to_obj` function in the header file)."}],"tags":[{"tag":"backward compatible","description":"A PR or feature that will be backward compatible with 3.4"}],"pull_requests":[]},{"author":"gebner","number":86,"state":"closed","open_date":"2019-12-03T16:23:51Z","update_date":"2019-12-03T19:53:45Z","discussion":[{"author":"cipher1024","date":"2019-12-03T19:40:15Z","comment":"After looking at the code, I think I understand your PR better. By not assigning to meta-variables, terms that would require that assignment now fail to type check. Is that correct?"},{"author":"gebner","date":"2019-12-03T19:50:54Z","comment":"Yes, precisely."}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":83,"state":"closed","open_date":"2019-11-15T14:29:09Z","update_date":"2019-11-15T16:32:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":81,"state":"closed","open_date":"2019-11-11T23:59:55Z","update_date":"2019-11-22T23:10:17Z","discussion":[{"author":"robertylewis","date":"2019-11-12T09:33:49Z","comment":"Cool, thanks!\r\n\r\n> If a single module contains multiple top-level docstrings, they're concatenated with newlines (but I could make it a list like before if people want).\r\n\r\nI think a list would be better. No reason to throw away information about how they're separated. Even better: would it be possible to pair each docstring with its location in the file?"},{"author":"robertylewis","date":"2019-11-12T09:36:52Z","comment":"The motivation there is that when we're generating docs, it would be nice to have some kind of sectioning. Module docs in the middle of the file would be the easiest way to do this. But we need to know where to put them in the generated docs."},{"author":"Vtec234","date":"2019-11-14T17:43:50Z","comment":"It's now a list of `(source filename, [(position info, doc string)])`."},{"author":"Vtec234","date":"2019-11-14T19:32:31Z","comment":"Here is a possible log entry for this:\r\n* Changes the semantics of `tactic.module_doc_strings` to return a list of module-level documentation entries for each imported file, and not just the currently open one."},{"author":"Vtec234","date":"2019-11-16T01:26:53Z","comment":"New version adds `olean_doc_strings` and reimplements `module_doc_strings` on top of that."},{"author":"Vtec234","date":"2019-11-18T20:41:06Z","comment":"Hm, that CI failure is really quite mysterious. I have no clue why this PR would change the column number printed in an unrelated test, and only on MacOS of all things."},{"author":"bryangingechen","date":"2019-11-18T21:10:11Z","comment":"It's yet another instance of #72. It should go away if [the job](https://travis-ci.org/leanprover-community/lean/jobs/612778328) is re-run. @cipher1024 "},{"author":"robertylewis","date":"2019-11-19T12:12:03Z","comment":"I haven't pushed it yet (still needs some cleanup), but I updated my doc generation tool to use this. Worked exactly as expected. Thanks again!"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":80,"state":"closed","open_date":"2019-11-11T20:16:01Z","update_date":"2019-11-15T02:52:37Z","discussion":[{"author":"bryangingechen","date":"2019-11-11T21:36:54Z","comment":"The dev tips look good to me (with the caveats that I haven't tried `ninja` nor have I managed to get `gdb` to work on macOS)."}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":79,"state":"closed","open_date":"2019-11-09T19:12:31Z","update_date":"2019-11-15T03:02:13Z","discussion":[{"author":"cipher1024","date":"2019-11-14T19:10:18Z","comment":"Can you add it to the change log please?"}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":78,"state":"closed","open_date":"2019-11-01T12:21:16Z","update_date":"2019-11-06T18:57:36Z","discussion":[{"author":"Vtec234","date":"2019-11-06T16:31:55Z","comment":"This looks good to go @cipher1024"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":75,"state":"closed","open_date":"2019-10-30T15:29:16Z","update_date":"2020-03-03T11:56:48Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":69,"state":"closed","open_date":"2019-10-10T18:48:41Z","update_date":"2019-11-09T19:16:40Z","discussion":[{"author":"gebner","date":"2019-10-11T08:15:02Z","comment":"> As is the name tco, maybe call it mvar_context_monad\r\n\r\nPlease just ignore the `_old` at the end, and call it `tc`.  For most of Lean 3's life, this class was called `type_context`.  It only got renamed to `type_context_old` in the preparation for Lean 4.\r\n\r\nEDIT: or maybe don't abbreviate it at all, and call it `type_context` and `local_context`."},{"author":"EdAyers","date":"2019-10-28T10:58:23Z","comment":"Any ideas why this test would be failing on just one configuration of travis?\r\n```\r\n380/1327 Test #284: leantest_non_meta_rec_fn.lean ...............................***Failed    0.05 sec\r\n\r\n-- testing non_meta_rec_fn.lean\r\n\r\n-- using result from test_all.sh\r\n\r\n--- non_meta_rec_fn.lean.expected.out\t2019-10-28 00:12:20.000000000 +0000\r\n\r\n+++ non_meta_rec_fn.lean.produced.out\t2019-10-28 00:25:23.000000000 +0000\r\n\r\n@@ -1,4 +1,4 @@\r\n\r\n-non_meta_rec_fn.lean:3:36: error: failed to prove recursive application is decreasing, well founded relation\r\n\r\n+non_meta_rec_fn.lean:3:0: error: failed to prove recursive application is decreasing, well founded relation\r\n\r\n   @has_well_founded.r true (@has_well_founded_of_has_sizeof true (default_has_sizeof true))\r\n\r\n Possible solutions: \r\n\r\n   - Use 'using_well_founded' keyword in the end of your definition to specify tactics for synthesizing well founded relations and decreasing proofs.\r\n\r\nERROR: file non_meta_rec_fn.lean.produced.out does not match non_meta_rec_fn.lean.expected.out\r\n````"},{"author":"bryangingechen","date":"2019-10-28T14:18:47Z","comment":"I've seen this sort of thing before on the macOS builds, where the build produces `n:0` instead of `n:m`. (Here, the test expects `3:36`, but the build produced `3:0`). It would be good to track down exactly what's going wrong here, but for now I'd suggest re-running that job and seeing if it goes away."}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":68,"state":"closed","open_date":"2019-09-28T00:36:09Z","update_date":"2019-10-01T14:35:53Z","discussion":[{"author":"bryangingechen","date":"2019-09-28T05:34:12Z","comment":"This should be ready to merge."}],"tags":[],"pull_requests":[]},{"author":"rwbarton","number":67,"state":"closed","open_date":"2019-09-25T23:05:37Z","update_date":"2020-03-08T13:50:49Z","discussion":[{"author":"rwbarton","date":"2019-09-25T23:31:10Z","comment":"I suppose the responsible thing to do is to add a test case, I'll write one in a bit."},{"author":"rwbarton","date":"2019-09-27T16:29:51Z","comment":"I don't understand why Travis claims the emscripten build failed--I guess I'll try restarting it again (I already tried once)."},{"author":"bryangingechen","date":"2019-09-27T19:07:51Z","comment":"It looks like it happened with [this build too](https://travis-ci.org/leanprover-community/lean/jobs/590120979). \r\n\r\nOne difference I noticed is the `kill %1` command doesn't return any output on the broken builds [1](https://travis-ci.org/leanprover-community/lean/jobs/590058488#L2922) [2](https://travis-ci.org/leanprover-community/lean/jobs/590120979#L3007), whereas it did previously: cf. [the last working build](https://travis-ci.org/leanprover-community/lean/jobs/589621216#L3008).\r\n\r\nSo maybe the `while sleep 5m` [in `.travis.yml`](https://github.com/leanprover-community/lean/blob/master/.travis.yml#L140-L142) might be failing to terminate and thus causing the build to fail."},{"author":"bryangingechen","date":"2019-09-28T05:34:43Z","comment":"There's now a fix for the travis issue in #68."},{"author":"gebner","date":"2020-03-08T13:50:41Z","comment":"No regressions on mathlib, let's get this in."}],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":66,"state":"closed","open_date":"2019-09-23T22:56:44Z","update_date":"2020-04-07T15:57:11Z","discussion":[{"author":"cipher1024","date":"2019-09-23T23:01:18Z","comment":"Implementing https://github.com/leanprover/lean/issues/1896"},{"author":"gebner","date":"2020-03-08T14:01:12Z","comment":"@cipher1024 The PR looks good to me in principle, but it still fails CI.  My suggestion was stupid, you can just remove the `operator==` declaration.  Please also move the test to the `tests/lean/run/` directory."},{"author":"gebner","date":"2020-03-09T13:03:22Z","comment":"CI still fails."},{"author":"gebner","date":"2020-03-10T10:25:16Z","comment":"The debug build times out as usual. :-/"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":65,"state":"closed","open_date":"2019-09-23T22:08:06Z","update_date":"2020-03-03T11:56:25Z","discussion":[{"author":"digama0","date":"2019-09-23T22:21:44Z","comment":"Should we start a feature branch for the next version? I think the plan is to have 3.5c not break anything, and changing simp lemmas will definitely break things (as much as I would like this PR to land because I've been aware of this problem since Leo first removed mul_comm but not add_comm from the simp set, see https://github.com/leanprover/lean/pull/1894)."},{"author":"digama0","date":"2019-09-23T22:23:04Z","comment":"This would be fixed by the open issue https://github.com/leanprover/lean/issues/1896"},{"author":"cipher1024","date":"2019-09-23T22:27:56Z","comment":"Incidentally, I've accidentally been implementing #1896 all afternoon. That should probably also go in a feature branch."}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":63,"state":"closed","open_date":"2019-08-29T13:01:37Z","update_date":"2019-08-30T17:21:52Z","discussion":[{"author":"cipher1024","date":"2019-08-29T13:30:50Z","comment":"This looks good! Any reasons for the changes outside of `CMakelists.txt`? They look superfluous.\r\n\r\nWhat is the consequence on performance of disabling this feature? I assume it's an optimization."},{"author":"Vtec234","date":"2019-08-29T15:04:22Z","comment":"@cipher1024 I introduced the changes when searching for this bug to silence some annoying `-Wpedantic` warnings. Mostly cosmetic, but they don't hurt. The JSON update did break emscripten, so I reverted it just now.\r\n\r\nI'm not sure how to benchmark of this - I don't suppose we have something like Lean 4's [speedcenter](http://speedcenter.informatik.kit.edu/lean/)? Anyway I can conjecture that this won't have any significant impact, because the flag disables the most specific pass it can - [ifcombine](https://github.com/gcc-mirror/gcc/blob/master/gcc/tree-ssa-ifcombine.c#L51). In effect, statements like `if (a > b) { if (a > c) { ` will not be combined into one, but all the other optimizations will still be done."},{"author":"cipher1024","date":"2019-08-29T15:26:24Z","comment":"I haven't seen that tool used with Lean 3. If you feel like setting it up, that would be great. Otherwise, that explanation sounds good to me."},{"author":"Vtec234","date":"2019-08-29T17:24:53Z","comment":"Oof, I'm afraid setting that up would be outside my jurisdiction. But hopefully there will be no observable difference and anyway we can remove the flag when a fixed GCC is released."},{"author":"cipher1024","date":"2019-08-29T19:55:04Z","comment":"That's alright. Which Travis / appveyor builds test your changes?"},{"author":"Vtec234","date":"2019-08-29T20:20:29Z","comment":"The only build that uses GCC 9.1.0 is [the AppVeyor MinGW one](https://ci.appveyor.com/project/cipher1024/lean-e5aoi/builds/27050814/job/04wbejvc3su9beuc)."},{"author":"cipher1024","date":"2019-08-29T20:25:15Z","comment":"Any chance it might also fix #59?"},{"author":"Vtec234","date":"2019-08-29T20:30:21Z","comment":"It seems to have [failed for the same reason](https://ci.appveyor.com/project/cipher1024/lean-e5aoi/builds/26836597/job/a0p7ulnskt0e1arb), so yeah, probably."},{"author":"cipher1024","date":"2019-08-29T22:40:25Z","comment":"It did solve it, thanks! Can you revert the `;` changes? I'd like to limit the number of files this PR touches. I'll merge after."},{"author":"Vtec234","date":"2019-08-29T23:00:01Z","comment":"Why limit the number of files? I'm not clear on why that would be helpful."},{"author":"cipher1024","date":"2019-08-29T23:03:42Z","comment":"Because the changes create noise in the git history. Minimizing the changes makes it easier to read a commit and see what it's about."},{"author":"Vtec234","date":"2019-08-29T23:12:54Z","comment":"Ah right, that's true. I split it into two commits to make them clearer."},{"author":"cipher1024","date":"2019-08-29T23:49:13Z","comment":"Oh! I didn't think they were necessary! If we need them, that's ok to keep them in one commit. It will encapsulate the whole solution to the problem."},{"author":"Vtec234","date":"2019-08-30T11:39:32Z","comment":"@cipher1024 To be clear, the `;`s were *not* needed for this fix. They just happened to have been the easiest-to-fix out of the warnings I sifted through looking for this bug, being a syntactic change that can't affect program meaning. It should have then been two commits, but I'm personally mildly opposed to trying to keep a pristine git history, because at some point the process adds significant overhead and becomes more trouble than it's worth. So I say a \"good-enough\" history is fine - as long as every meaningful change is noted, sneaking in minutiae like these on the side is acceptable."},{"author":"cipher1024","date":"2019-08-30T17:21:52Z","comment":"Like everything else, there is a point where putting more time cleaning up the git history yields no return. The question is when does this occur. In this situation, I was under the impression that adding the `;` had no effect (as opposed to removing warnings) so it looked like pure noise to me which seems worth dismissing (a bit like an arbitrary change in spacing in an unrelated commit). \r\n\r\nSince getting rid of the warnings was part of your investigation of the bug, I think it's ok to keep them together or separate them. As you say, going on and on about that decision is not that useful."}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":61,"state":"closed","open_date":"2019-08-27T21:35:49Z","update_date":"2019-09-12T22:52:06Z","discussion":[{"author":"Vtec234","date":"2019-08-30T13:01:56Z","comment":"Rebased on the fixes, should be good to go."},{"author":"cipher1024","date":"2019-08-30T17:43:48Z","comment":"Can you add a test file for this feature? I think we should be ready to merge after."},{"author":"Vtec234","date":"2019-09-12T20:32:13Z","comment":"@cipher1024 could we merge this please?"},{"author":"cipher1024","date":"2019-09-12T22:52:06Z","comment":"Sorry for the delays"}],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":59,"state":"closed","open_date":"2019-08-04T20:32:47Z","update_date":"2019-09-12T22:51:27Z","discussion":[{"author":"Vtec234","date":"2019-09-12T20:31:44Z","comment":"@cipher1024 I think this is good to go."}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":56,"state":"closed","open_date":"2019-07-14T06:17:51Z","update_date":"2019-07-15T17:23:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":54,"state":"closed","open_date":"2019-07-05T20:42:31Z","update_date":"2019-11-09T19:00:05Z","discussion":[{"author":"ratmice","date":"2019-07-05T21:39:47Z","comment":"> On a final note, the documentation output format is a bit strange - it looks like Markdown with inline HTML. It seems it could be more useful if Lean could output the docs as a stupid-simple JSON file with module-declaration-docstring mappings to be consumed by a postprocessing stage. Maybe [https://github.com/ratmice/lumpy-leandoc](lumpy-leandoc) (cc @ratmice)?\r\n\r\nNeat, I agree that a stupid-simple JSON file would be easier for post-processing with lumpy-leandoc than the markdown output, One thing sticks to me out in the current output.\r\n\r\n````lean\r\n/-- foo_test is documented it's document includes `code`\r\n    Or perhaps:\r\n    ```\r\n    a long bit of code\r\n    ```\r\n-/\r\ndef foo_test := foo.b foo.a\r\n````\r\nLumpy is going to eventually want to syntax highlight the definition of foo_test using a different theme from the definition of the actual code to differentiate them I haven't tried the branch yet (Will definitely do!), but I imagine this is going to output something of the form.\r\n\r\n````\r\n<a name=\"foo_test\"></a>**Definition** foo_test\r\n```lean\r\ndef foo_test :  foo\r\n```\r\nfoo_test is documented it's documentation includes `code`.\r\n  Or perhaps:\r\n  ```lean\r\n  a longer bit of code\r\n  ```\r\n````\r\n\r\nIt would be great if this JSON kept the definition/documentation in different keys, once they get combined into a string it's difficult to differentiate between these code blocks.\r\n\r\nEdit: I should note it *is* possible to convey this information inline in the commonmark standard:\r\nanything between a space and the end of line at the beginning marker can contain some reader specified \"Info String\", some things accept CSS and the like\r\n````\r\n   ```lean definition=true\r\n       ...\r\n   ```\r\n````\r\n\r\nThe parser lumpy-leandoc depends on currently ignores this information and doesn't convey it to lumpy-leandoc in a way it can be used, That can be fixed however.\r\n"},{"author":"Vtec234","date":"2019-07-05T23:20:54Z","comment":"I pushed a version of leandoc that outputs JSON and marked this WIP so that I can clean up the code later. The output looks like so:\r\n```json\r\n{ \"module\": \"/path/to/module.lean\",\r\n\"doc\": \"4D6F64756C6520646F6320314D6F64756C6520646F632032\",\r\n\"declarations\": [\r\n\r\n\"$ALL_STDLIB_DECLARATIONS\"\r\n\r\n{\r\n\"name\": \"foo\",\r\n\"kind\": \"inductive\",\r\n\"code\": \"6060606C65616E0A696E647563746976652020666F6F203A2020547970650A6060600A2A2A436F6E7374727563746F72733A2A2A0A6060606C65616E0A666F6F2E61203A2020666F6F0A666F6F2E62203A2020666F6F20FFFFFFE2FFFFFF86FFFFFF9220666F6F0A6060600A\",\r\n\"doc\": \"466F6F20697320616E20696E6475637469766520747970652E\"\r\n},\r\n{\r\n\"name\": \"foo_test\",\r\n\"kind\": \"definition\",\r\n\"code\": \"6060606C65616E0A64656620666F6F5F74657374203A2020666F6F0A6060600A\",\r\n\"doc\": \"20666F6F5F7465737420697320646F63756D656E7465642E0A49747320646F63756D656E746174696F6E20696E636C756465732060636F6465600A616E64206D6F726520636F64653A0A6060606C65616E0A236576616C20666F6F5F74657374202D2D20310A606060\"\r\n},\r\n]\r\n},\r\n```\r\nI encoded documentation and code as hex strings to avoid having to escape quotes, but that could be fixed (I'm not sure it's really a problem though, this isn't meant for consumption by humans anyway)."},{"author":"cipher1024","date":"2019-07-06T22:28:31Z","comment":"In your build directory, see what the style check errors are in `lean/build/debug/Testing/Temporary/LastTestFailed.log`\r\n\r\nDo you have a switch to select Markdown vs JSON?"},{"author":"Vtec234","date":"2019-07-09T11:31:13Z","comment":"@cipher1024 No - in fact, on the one hand no one was relying on the Markdown output and on the other, the community has already built tools with better output (leandoc's MD is really bare-bones). With this in mind, I figured it makes more sense to remove the MD code and only output something structured to be consumed by the existing tools. What do you think?\r\n\r\nI pushed a version that disposes of the silly hex strings and uses `nlohmann::json` instead. I will put this PR on hold for now and come back to it later. The biggest issue right now is that `declarations` for each module include everything in the environment, including all imported declarations, which produces a lot of output - I would advise against testing this on large libraries like mathlib."},{"author":"cipher1024","date":"2019-07-09T17:24:20Z","comment":"I'm not sure I'd want to remove that feature completely. Can you put it in ok shape so that it can be improved if we decide to use it for one reason or another?"},{"author":"Vtec234","date":"2019-11-06T17:56:16Z","comment":"I revamped this PR and dropped support for JSON output. Instead, it simply makes sure that module documentation is included in .olean files. This allows lumpy-leandoc to extract module-level docstrings from built modules. Note that there is currently no tactic that exposes module-level docstrings (declaration docs *are* exposed) from imported modules. If a usecase for such a thing appears, it could be added, but for lumpy we just need what's implemented here.  "},{"author":"cipher1024","date":"2019-11-06T18:31:12Z","comment":"So far, are the other doc strings in the olean files? "},{"author":"ratmice","date":"2019-11-06T18:34:47Z","comment":"Yes, at least I haven't run across doc strings except module ones which are not already in olean."},{"author":"cipher1024","date":"2019-11-06T18:41:22Z","comment":"Ok. I think we could merge this. Anything else to add?"},{"author":"ratmice","date":"2019-11-06T18:52:31Z","comment":"I don't believe I have anything else to add, beyond that I agree with Vtec234's self-review that optional<name> would be preferable, and it's unfortunate that it breaks compatibility. \r\n"},{"author":"cipher1024","date":"2019-11-06T18:55:23Z","comment":"@Vtec234: can we get more information on that breakage?"},{"author":"Vtec234","date":"2019-11-06T19:10:19Z","comment":"Hm, I think that .olean files should be just fine - possibly I misinterpreted the GCC 9.2.0 miscompilation bug as being caused by this. But it *will* break `olean-rs`, and it's such a minor cosmetic thing I'd say it's not worth the bother."},{"author":"cipher1024","date":"2019-11-06T19:14:12Z","comment":"That's fair"},{"author":"digama0","date":"2019-11-07T01:40:44Z","comment":"@Vtec234 If it is possible for olean-rs to support this extension backward compatibly, please make a PR for it. I'd hate for it to inhibit progress on the format!"},{"author":"Vtec234","date":"2019-11-08T10:40:27Z","comment":"@digama0 It would definitely be possible to support this in olean-rs, but my point was more that in the end the change itself is not really that useful and would only create additional complexity. If we need to change the .olean format, let's only do it if there is a clear advantage in doing so."}],"tags":[],"pull_requests":[]},{"author":"Vtec234","number":50,"state":"closed","open_date":"2019-06-18T19:36:40Z","update_date":"2019-08-27T21:36:04Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":49,"state":"open","open_date":"2019-06-03T01:59:42Z","update_date":"2022-06-09T08:34:11Z","discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"pull_requests":[]},{"author":"cipher1024","number":48,"state":"closed","open_date":"2019-06-01T20:07:05Z","update_date":"2020-04-07T16:15:17Z","discussion":[{"author":"cipher1024","date":"2020-04-04T19:16:16Z","comment":"Thanks for the comments!\r\n\r\n> The main thing I'm missing here is some motivation: what do you want to use this for? Do you have an application? Is this \"just\" to experiment with the VM?\r\n\r\nNo it's because I wrote (with @avigad and @digama0) a paper on defining inductive and coinductive data types in dependent type theory (paper [here](https://www.andrew.cmu.edu/user/avigad/Papers/qpf.pdf), slides [here](https://itp19.cecs.pdx.edu/wp-content/uploads/2019/09/hudon_slides.pdf)) and the definition for coinductive data types gives inefficient programs and data structures so I want to generate more efficient representations using `vm_override`.\r\n\r\n> Am I right that you can use `attribute [vm_override foo] bar` to back-patch definitions? \r\n\r\nI don't think I'd like to keep back-patching as an option but I haven't come up with a way of blocking it. \r\n\r\n> It should be noted somewhere that this doesn't work for inductives. \r\n\r\nDo  you mean that if you try it the implementation is going to be inconsistent?"},{"author":"gebner","date":"2020-04-04T21:18:14Z","comment":"> > It should be noted somewhere that this doesn't work for inductives.\r\n> \r\n> Do you mean that if you try it the implementation is going to be inconsistent?\r\n\r\nBack-patching inductives doesn't work for the same reason as the inlined calls.  The calls to the recursor and constructors are directly compiled to bytecode.  I don't think there is any reasonable way of making back-patching work here.\r\n\r\nThe result is that already compiled code will completely ignore the overrides.\r\n\r\nI think there just needs to be a big warning that you should not use `vm_override` for back-patching (unless you *really* know what you're doing)."},{"author":"cipher1024","date":"2020-04-04T21:37:37Z","comment":"Even if you know what you're doing, back-patching would make for some fragile code that would be easy to break. I don't know why we would need to allow it."}],"tags":[],"pull_requests":[]},{"author":"agentultra","number":47,"state":"open","open_date":"2019-06-01T19:36:22Z","update_date":"2020-04-03T10:24:29Z","discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"pull_requests":[]},{"author":"EdAyers","number":46,"state":"closed","open_date":"2019-05-28T16:52:20Z","update_date":"2019-06-23T20:35:15Z","discussion":[{"author":"khoek","date":"2019-05-30T13:49:51Z","comment":"Perhaps a test?"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":45,"state":"closed","open_date":"2019-05-20T16:35:45Z","update_date":"2019-11-11T20:12:15Z","discussion":[{"author":"cipher1024","date":"2019-07-12T22:39:22Z","comment":"@EdAyers Are we happy with this PR?"},{"author":"EdAyers","date":"2019-11-11T20:12:15Z","comment":"Closing as it is has become desynchronised from my fork in a strange way. Will reopen."}],"tags":[],"pull_requests":[]},{"author":"agentultra","number":44,"state":"closed","open_date":"2019-05-18T02:20:36Z","update_date":"2019-05-23T01:27:33Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":43,"state":"open","open_date":"2019-05-17T20:08:05Z","update_date":"2022-06-09T08:34:11Z","discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"pull_requests":[]},{"author":"agentultra","number":42,"state":"closed","open_date":"2019-05-17T02:30:16Z","update_date":"2019-05-18T02:00:14Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"ratmice","number":40,"state":"closed","open_date":"2019-05-15T22:07:02Z","update_date":"2019-05-17T17:38:19Z","discussion":[{"author":"ratmice","date":"2019-05-15T22:20:59Z","comment":"Just remembered I forgot to compile mathlib, it quite possibly has the same sort of issue as 00fdee1"},{"author":"cipher1024","date":"2019-05-15T22:21:56Z","comment":"Can you try using this feature to build mathlib? If it doesn't break too badly, we can get this into `3.5.0c`"},{"author":"ratmice","date":"2019-05-15T22:22:55Z","comment":"Will do it in the morning."},{"author":"ratmice","date":"2019-05-17T12:22:55Z","comment":"@cipher1024 \r\nmathlib compiled without issue, the resulting doc_strings in the .olean were the same,\r\nand the rather naive lookahead in the patch didn't appear to affect compile times."},{"author":"cipher1024","date":"2019-05-17T12:45:22Z","comment":"Nice, thank you. It seems like the only thing left to fix is your coding style. Travis gave those errors:\r\n\r\n```\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:132:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:133:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:134:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:135:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:137:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:138:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:139:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:141:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:142:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:144:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:145:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:146:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n/home/travis/build/leanprover-community/lean/src/library/documentation.cpp:147:  Tab found; better to use spaces  [whitespace/tab] [1]\r\n```"},{"author":"ratmice","date":"2019-05-17T16:54:36Z","comment":"@cipher1024 So, that seemed to work, except the 1 error with the clang-3.4, travis image, \r\nbut it doesn't appear to be anything I resolve afaict."}],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":39,"state":"closed","open_date":"2019-05-13T17:57:48Z","update_date":"2019-05-13T18:53:01Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":38,"state":"closed","open_date":"2019-05-13T03:22:39Z","update_date":"2019-05-17T18:34:27Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":37,"state":"closed","open_date":"2019-05-12T20:32:05Z","update_date":"2019-05-14T20:40:59Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"digama0","number":35,"state":"open","open_date":"2019-05-10T00:39:49Z","update_date":"2022-06-09T08:34:11Z","discussion":[],"tags":[{"tag":"WIP","description":"Work in progress"}],"pull_requests":[]},{"author":"khoek","number":33,"state":"closed","open_date":"2019-04-30T09:51:17Z","update_date":"2019-05-15T22:40:44Z","discussion":[{"author":"cipher1024","date":"2019-05-01T19:06:41Z","comment":"Is this ready?"},{"author":"khoek","date":"2019-05-08T05:13:33Z","comment":"Yep, it is. Typeclass resolution and the instances in the last pull do the rest of the job. You can see an example of what you can do now in the tests."},{"author":"cipher1024","date":"2019-05-08T18:55:57Z","comment":"Cool! When you call `./test_single.sh` on it, you can generate a file for the expected output. That would be interesting to have in git and it would be a more complete test. You do it with `./test_single.sh path/to/lean/binary test_file.lean yes`. Please do that and I'll merge."},{"author":"khoek","date":"2019-05-14T08:59:40Z","comment":"@cipher1024 Hopefully I've now done what you wanted. But travis has broken itself with some failed apt-get business "}],"tags":[],"pull_requests":[]},{"author":"khoek","number":31,"state":"closed","open_date":"2019-04-24T06:46:15Z","update_date":"2019-04-28T00:56:58Z","discussion":[{"author":"khoek","date":"2019-04-26T12:13:21Z","comment":"Good to go"}],"tags":[{"tag":"ready-to-merge","description":"Let's merge this"}],"pull_requests":[]},{"author":"khoek","number":30,"state":"closed","open_date":"2019-04-24T04:38:29Z","update_date":"2019-04-24T13:24:17Z","discussion":[{"author":"khoek","date":"2019-04-24T04:39:23Z","comment":"https://github.com/leanprover-community/lean/pull/19 compiles on top of master, so I figure it was just a travis muck up"},{"author":"khoek","date":"2019-04-24T05:35:52Z","comment":"Yeah, it all looks fine to me."},{"author":"khoek","date":"2019-04-24T06:10:54Z","comment":"@digama0 I don't know if that's a joke, but are you able to re-run travis on master? If failed on osx randomly last time"},{"author":"khoek","date":"2019-04-24T06:11:54Z","comment":"Oh ok you did sweet"},{"author":"digama0","date":"2019-04-24T07:02:06Z","comment":"that was a joke."},{"author":"cipher1024","date":"2019-04-24T13:24:17Z","comment":"That's curious. I re-ran it a couple of times before asking for help. "}],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":26,"state":"closed","open_date":"2019-04-23T02:05:10Z","update_date":"2019-05-07T03:39:50Z","discussion":[{"author":"cipher1024","date":"2019-05-01T19:04:45Z","comment":"@kha, @EdAyers, @khoek, @digama0 if you have time, I'd appreciate you having a look at this. I think I'm ready to merge if there's no comment."},{"author":"cipher1024","date":"2019-05-03T22:20:31Z","comment":"This still does not allow the use of:\r\n\r\n * mutually recursive functions\r\n * functions without pattern matching\r\n * unreachable patterns"}],"tags":[],"pull_requests":[]},{"author":"khoek","number":20,"state":"closed","open_date":"2019-04-20T05:08:34Z","update_date":"2019-04-27T18:41:37Z","discussion":[{"author":"cipher1024","date":"2019-04-20T15:09:06Z","comment":"Is this what you would use if you wanted to create a binding for a database (e.g. postgres)?"},{"author":"khoek","date":"2019-04-21T00:35:02Z","comment":"If the database server was running on the same machine, yes."},{"author":"cipher1024","date":"2019-04-21T00:48:07Z","comment":"Perfect! I'll see if I can find some time to build database bindings. That could be useful for web apps and other popular application domains"},{"author":"khoek","date":"2019-04-21T08:28:56Z","comment":"Now you could potentially write a database server in lean as well ;)"},{"author":"cipher1024","date":"2019-04-21T16:42:47Z","comment":"I'd love to see some test cases when you have a moment"},{"author":"khoek","date":"2019-04-22T11:21:11Z","comment":"@cipher1024 Test included, and it runs on windows now too."},{"author":"khoek","date":"2019-04-22T16:31:07Z","comment":"If I used git right, that should be good."},{"author":"cipher1024","date":"2019-04-22T17:28:19Z","comment":"I just saw the tests. They look great! Thank you for writing that!"},{"author":"khoek","date":"2019-04-23T11:35:33Z","comment":"I'm done with this one for now, too. I'll submit a separate pull for inet sockets, which are simple extension of what exists now."},{"author":"khoek","date":"2019-04-23T11:36:13Z","comment":"As a side-effect, `leanpkg` won't break on bare windows anymore, which I think is a great plus"},{"author":"khoek","date":"2019-04-23T11:37:51Z","comment":"(It used to need an `mkdir` with `-p` semantics.)"},{"author":"bryangingechen","date":"2019-04-27T17:38:01Z","comment":"It turns out that this commit has been breaking the emscripten build. Do these features make sense in that context or would it make more sense for me to disable them?"},{"author":"cipher1024","date":"2019-04-27T17:40:55Z","comment":"Maybe they should be disabled or implemented otherwise. @agentultra, any way we can implement sockets with emscripten?"},{"author":"bryangingechen","date":"2019-04-27T18:22:14Z","comment":"It's looking like the other PR is building after I added: `|| defined(LEAN_EMSCRIPTEN))` in a few places. Let's continue the discussion [there](https://github.com/leanprover-community/lean/pull/17)."},{"author":"agentultra","date":"2019-04-27T18:23:46Z","comment":"I’m not too familiar with Emscriptem but unless it has a way to translate the Unix socket API to the Web Socket API then I think the answer would be no. \n\nSent from my mobile\n\n> On Apr 27, 2019, at 1:40 PM, Simon Hudon <notifications@github.com> wrote:\n> \n> Maybe they should be disabled or implemented otherwise. @agentultra, any way we can implement sockets with emscripten?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"},{"author":"bryangingechen","date":"2019-04-27T18:41:37Z","comment":"Apparently it exists, though the only docs I could find on emscripten's socket-to-websocket functionality are hidden in [this open PR](https://github.com/emscripten-core/emscripten/blob/503c7889349c2f28e39e8b20a21dcdea71200c63/site/source/docs/porting/networking.rst#emulated-posix-tcp-sockets-over-websockets)."}],"tags":[],"pull_requests":[]},{"author":"khoek","number":19,"state":"closed","open_date":"2019-04-20T03:53:17Z","update_date":"2019-04-28T00:56:55Z","discussion":[{"author":"digama0","date":"2019-04-20T04:08:21Z","comment":"Do you understand the reason why `itactic` is not a `parser (tactic unit)`? I would certainly prefer that if possible."},{"author":"khoek","date":"2019-04-20T05:12:18Z","comment":"I'll look into if it's (easily) possible."},{"author":"khoek","date":"2019-04-20T05:29:12Z","comment":"@digama0 one real problem is that there is no instance of `reflected (tactic unit)`, which is required to even write `interactive.parse my_parser` for `my_parser : lean.parser (tactic unit)`."},{"author":"khoek","date":"2019-04-20T05:46:32Z","comment":"The definition is\r\n````\r\n@[reducible] meta def parse {α : Type} [has_reflect α] (p : parser α) : Type := α\r\n````\r\nDo you understand why `[has_reflect α]` is there, and why it is used internally? I can happily write\r\n````lean\r\nvariables (α : Type) [inhabited α]\r\nmeta def ppp : lean.parser α := return $ inhabited.default α \r\n````\r\nbut I'll never be able to `parse (ppp random_inhabited_type)` in general?"},{"author":"khoek","date":"2019-04-20T08:36:25Z","comment":"Mario made some comments on Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/has_reflect.20in.20interactive.2Eparse\r\n\r\nI'll implement that"},{"author":"khoek","date":"2019-04-20T13:05:06Z","comment":"@digama0 There we go, implemented!"},{"author":"khoek","date":"2019-04-21T02:50:31Z","comment":"Rebased on master, also better test"},{"author":"khoek","date":"2019-04-21T03:06:47Z","comment":"The way we implement `parse_interactive_param` now actually considerably simplifies the logic compared to vanilla lean."},{"author":"khoek","date":"2019-04-21T12:16:03Z","comment":"Everything passes, but just one more thing---I'm going to rename `[r : reflected val]` (in my own definition) to `[reflect : reflected val]`"},{"author":"khoek","date":"2019-04-21T14:12:07Z","comment":"There we go, done"},{"author":"khoek","date":"2019-04-26T08:24:12Z","comment":"Merge me? :D :dancer: "}],"tags":[],"pull_requests":[]},{"author":"khoek","number":18,"state":"closed","open_date":"2019-04-20T03:46:36Z","update_date":"2019-04-24T06:37:24Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"bryangingechen","number":17,"state":"closed","open_date":"2019-04-20T02:08:52Z","update_date":"2019-05-12T18:01:41Z","discussion":[{"author":"cipher1024","date":"2019-04-20T02:14:26Z","comment":"Can you write a test that will show that your fix works?"},{"author":"bryangingechen","date":"2019-04-20T02:16:54Z","comment":"Not sure how... any suggestions?"},{"author":"cipher1024","date":"2019-04-20T02:23:00Z","comment":"Actually I'm not familiar with emscripten. How do you check whether it works when you're fixing it on your machine?"},{"author":"bryangingechen","date":"2019-04-20T02:30:15Z","comment":"Ah, well it failed to build before (with lots of error messages), and now the build completes successfully. The main check I used is that the JS and wasm files functioned \"properly\" in an instance of lean-web-editor.\r\n\r\nFor the first part, maybe we could set something up with travis? For the second, I'm not sure... maybe there's a way to run lean's tests in node?"},{"author":"bryangingechen","date":"2019-04-20T02:34:20Z","comment":"Maybe this is the way to do emscripten stuff on travis: https://emscripten.org/docs/compiling/Travis.html\r\n\r\nI can look into this but I will probably have some questions."},{"author":"cipher1024","date":"2019-04-20T02:35:49Z","comment":"Thanks for doing that. Feel free to ask questions, I'll do what I can to give something informative."},{"author":"cipher1024","date":"2019-04-20T02:37:03Z","comment":"What time zone are you in?"},{"author":"khoek","date":"2019-04-21T11:55:14Z","comment":"FYI, there is already something called `emscripten_test` in generated in `tests/shell/CTestTestfile.cmake`:\r\n````\r\nadd_test(emscripten_test \"bash\" \"/home/khoek/code/lean/src/tests/shell/test.sh\" \"/home/khoek/code/lean/build/release/tests/shell/shell_test\")\r\n````\r\n"},{"author":"bryangingechen","date":"2019-04-21T17:55:53Z","comment":"Yes, when I try running `ctest`, it seems that almost every test fails with the emscripten build. I'm going to ask for more advice on zulip.\r\n\r\n**edit**: see [here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/emscripten.20build/near/163916548)."},{"author":"bryangingechen","date":"2019-04-25T06:14:13Z","comment":"Made some progress on this - I'm down to 5 broken tests on my machine. Pushing commits now to see whether my Travis script is any good."},{"author":"bryangingechen","date":"2019-04-26T06:48:05Z","comment":"An update:\r\n\r\n- First, I [added some info](https://github.com/leanprover-community/lean/pull/17/commits/216f5466db79f3d1bea6aa5c13c04430e89b08db) to the build docs about the files generated in the emscripten build.\r\n\r\n- I [changed](https://github.com/leanprover-community/lean/pull/17/commits/6d9a71158c778671fb9a07d2179c11f5f0ab6f7c#diff-6655349fbe93a4438c8741015ff60a3aL224) `src/util/path.cpp` so that files built for node and files built for the browser behave differently. This means that in the emscripten build, two versions of the \"util\" target have to be built. **EDIT**: @gebner showed me a better way [here](https://github.com/leanprover-community/lean/pull/17#discussion_r283126033)\r\n\r\n- I tested a build script for Travis locally (on macOS, if that matters) using [the docker container suggested in the emscripten docs](https://hub.docker.com/r/trzeci/emscripten) and everything builds fine there, though there are several failing tests:\r\n  - 14 - leantest_all (Failed)\r\n  - 56 - leantest_1956.lean (Failed)\r\n  - 243 - leantest_io_process_echo.lean (Failed)\r\n  - 869 - leanruntest_io_process_env.lean (Failed)\r\n  - 1281 - shared_test (Failed) *\r\n  - 1284 - c_univ_test (Failed) *\r\n  - 1285 - c_expr_test (Failed) *\r\n  - 1286 - thread_test (Failed)\r\n\r\n  The ones marked by * only fail in the docker container, the others also fail when building outside the container.\r\n\r\n- I was unable to build `lean_js.js`, an obsolete browser version of the lean server (see the above-mentioned docs), inside the docker container, though it builds fine outside of that. I disabled this target in the build scripts [here](https://github.com/leanprover-community/lean/pull/17/commits/f3ef0a07ea683b5e4cee2f6c858a95eb6df29e43).\r\n\r\n~~- Here's where I'm stuck now: the docker build (which works on my computer) [fails on Travis](https://travis-ci.org/leanprover-community/lean/jobs/524780214#L2974). The error message suggests that the build is trying to pull in Windows header files, which I don't understand at all. In fact, I don't understand why the behavior is different at all.~~ The explanation is that Travis automatically merges master into PRs before building. Thanks to @agentultra for helping me debug this!\r\n\r\nAny feedback would be appreciated!"},{"author":"khoek","date":"2019-04-28T04:33:46Z","comment":"You probably know better than me Bryan, but just be aware that jobs which are silent for too long can be killed by travis, and I noticed some pipes to /dev/null in those `cmake` files."},{"author":"bryangingechen","date":"2019-04-28T04:43:48Z","comment":"Thanks Keeley. I'm planning to prepend the `docker exec` calls in `.travis.yml` with `travis_wait 60` which should keep things going if that becomes an issue.\r\n\r\nThe underlying issue is that when the emscripten \"binary\" compiles the standard_lib or the leanpkg files it spams thousands of lines of text and [this also causes travis to kill the job](https://travis-ci.org/leanprover-community/lean/jobs/525502660) (see the bottom of [the raw log](https://api.travis-ci.org/v3/job/525502660/log.txt)). (In fact, I thought I'd already piped the output to /dev/null for that particular build... maybe something strange with docker?)"},{"author":"bryangingechen","date":"2019-04-28T18:29:30Z","comment":"Here's another status update:\r\n\r\n- I split the emscripten build into two and they both now build successfully on Travis: \r\n  - \"Main\": builds the shell utilities and the `lean_js_*` files that are meant for the browser.\r\n  - \"Test\": builds the standalone test binaries.\r\n\r\n- However, the tests are still failing:\r\n  - \"Main\": it takes ~35 minutes for Travis to finish building everything, which leaves a scant 15 minutes for the 1238 tests, so it times out. [See here](https://travis-ci.org/leanprover-community/lean/jobs/525539318#L3136).\r\n  - \"Test\": There are 5 broken tests (out of 55), [see here](https://travis-ci.org/leanprover-community/lean/jobs/525539319#L3504).\r\n\r\nIn principle we could break up the \"Main\" build into several testing stages with Travis's build stage feature, and then it might be interesting for someone more well-versed in emscripten / C++ to look into figuring out all the broken tests.\r\n\r\nFor now, I'm inclined to suggest that we skip running ctest on Travis (and only perform the \"Main\" build) since it's not clear to me that the errors are relevant to the browser version of lean (which is probably the only thing built by emscripten that people will want to use). Note that as part of the \"Main\" build, the standard library is compiled using the emscripten version of lean, so there's already a fair amount of testing going on even before `ctest` is run.\r\n\r\nIf this is OK, I'm going to comment out the various tests and then add some lines to .travis.yml to upload a tarball of the browser JS / wasm files to the lean-nightly repository.  Then it should be possible to automate deployment of a more or less up-to-date `lean-community` version of the lean web editor."},{"author":"bryangingechen","date":"2019-04-29T22:51:35Z","comment":"This should be ready for review."},{"author":"cipher1024","date":"2019-05-11T19:26:08Z","comment":"You may also want to do `before_install: true`"},{"author":"bryangingechen","date":"2019-05-11T19:28:03Z","comment":"I've got the `docker run` command in that phase. Let's see if this works though."},{"author":"cipher1024","date":"2019-05-11T19:30:18Z","comment":"Sorry! I missed that. That's better than what I was suggesting."},{"author":"cipher1024","date":"2019-05-12T17:28:57Z","comment":"I forgot to mention this: there is a daily build to construct a nightly release. Should there be a nightly `emscripten` release? If not, let's disable that build on cron tasks with `if: type != cron` but if we want a release, let's set it up."},{"author":"bryangingechen","date":"2019-05-12T17:31:00Z","comment":"I tried to adapt the nightly release scripts to the emscripten build in this PR, but I haven't been able to test it. See [here](https://github.com/leanprover-community/lean/blob/master/.travis.yml#L137)."},{"author":"bryangingechen","date":"2019-05-12T17:38:34Z","comment":"By the way, thanks for the review @gebner and the quick merge @cipher1024!"},{"author":"cipher1024","date":"2019-05-12T18:00:17Z","comment":"And thank you, @bryangingechen, for taking on the project!"},{"author":"cipher1024","date":"2019-05-12T18:01:41Z","comment":"I started a cron build. We'll see what happens."}],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":12,"state":"closed","open_date":"2019-04-18T21:38:14Z","update_date":"2019-04-19T21:15:02Z","discussion":[{"author":"khoek","date":"2019-04-18T23:57:00Z","comment":"Tiny mistake in your test. It's fixed in https://github.com/khoek/klean/tree/fix-revert"},{"author":"cipher1024","date":"2019-04-19T03:02:48Z","comment":"thanks!"},{"author":"khoek","date":"2019-04-19T10:38:31Z","comment":"Do we have any idea what is going on with the rando-failures? Travis is just killing the `ctest` process, right?"},{"author":"cipher1024","date":"2019-04-19T14:14:47Z","comment":"There's something weird going on with this build. Can anyone see why that is?"}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":11,"state":"closed","open_date":"2019-04-15T12:08:38Z","update_date":"2019-04-20T14:44:20Z","discussion":[{"author":"EdAyers","date":"2019-04-16T18:38:28Z","comment":"Hmm I can't figure out why the build failed."},{"author":"khoek","date":"2019-04-16T23:34:29Z","comment":"I think it might have just been bad luck?"},{"author":"EdAyers","date":"2019-04-17T09:57:52Z","comment":"Is there a way to get it to run again?"},{"author":"khoek","date":"2019-04-17T10:06:45Z","comment":"`````\r\n$ git commit --amend --date=\"$(date)\"\r\n$ git push (yourrepo) HEAD:(yourbranch) --force\r\n`````"}],"tags":[],"pull_requests":[]},{"author":"khoek","number":10,"state":"closed","open_date":"2019-04-11T07:38:06Z","update_date":"2020-04-18T16:56:27Z","discussion":[{"author":"khoek","date":"2019-04-11T10:46:36Z","comment":"Of course this should be non-breaking with mainline `lean`, and the tests + current mathlib building against this version testifies to that."},{"author":"khoek","date":"2019-04-11T15:04:10Z","comment":"(Travis died, let's try that one again)"},{"author":"cipher1024","date":"2019-04-13T02:19:49Z","comment":"@digama0 Are we happy with this PR?"}],"tags":[],"pull_requests":[]},{"author":"khoek","number":8,"state":"closed","open_date":"2019-04-10T09:47:45Z","update_date":"2019-04-24T06:37:54Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"cipher1024","number":7,"state":"closed","open_date":"2019-04-08T18:03:39Z","update_date":"2019-04-09T16:16:08Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"khoek","number":6,"state":"closed","open_date":"2019-04-08T13:23:58Z","update_date":"2019-04-11T02:28:51Z","discussion":[{"author":"cipher1024","date":"2019-04-08T13:36:22Z","comment":"Why does this need to be in Lean itself?"},{"author":"khoek","date":"2019-04-08T14:34:01Z","comment":"Ultimately, speed. After multiple attempts at parsing a string serialised format from within lean (the fastest is on my github under `leancache`), I ran into two major roadblock problems: 1. manipulating strings and in particular doing string IO can be really slow from within lean, for instance appending to a `buffer char` can take ludicrously long times when dealing with megabyte sized stuff (on the order of 5-10 seconds) and 2. even in crafted situations where I could avoid the IO problems, just parsing serialised strings and constructing the nested `expr`s takes a really disappointing amount of time.\r\n\r\nI used to have hard comparison numbers but I'm pretty sure I've lost them(?), but the bottom line is that in my testing C++ serialisation/deserialisation of the same thing vs within lean was a factor of 1000 times faster, with examples taking say 6-10 in editor from within lean, and <10 milliseconds with a native implementation. The 1000 is not an exaggeration, and it was so bad that at the time I totally gave up doing it from within lean.\r\n\r\nActually, to be honest, UTF8 transcoding big pieces of data can suffer from point (1) above too, which is why I didn't end up investing too much time in writing good lean support for it back when I was interested in it."},{"author":"khoek","date":"2019-04-08T14:51:59Z","comment":"On the other hand, the C++ implementation is *really* fast. Massive proofs in tens of milliseconds. I think it could be life-changing."},{"author":"khoek","date":"2019-04-10T02:37:54Z","comment":"Fixed up the whitespace making the linter fail."}],"tags":[],"pull_requests":[]},{"author":"khoek","number":5,"state":"closed","open_date":"2019-04-08T13:22:44Z","update_date":"2019-04-24T06:38:40Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"digama0","number":3,"state":"closed","open_date":"2019-03-12T12:03:17Z","update_date":"2019-04-09T16:16:44Z","discussion":[],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":2,"state":"closed","open_date":"2019-02-26T11:56:12Z","update_date":"2019-05-12T11:17:46Z","discussion":[{"author":"digama0","date":"2019-02-26T12:01:52Z","comment":"I think it should be in the `native` namespace. I'm planning to have the verified version take the name without the `native` namespace, and reference this one. (Although I'm not sure `float` is a smart name these days... C has a lot of bad/ambiguous names for things regarding sized types and I'm not keen on reflecting that in lean.)"},{"author":"cipher1024","date":"2019-02-26T15:14:24Z","comment":"Do we want to expose `native.float` and later relate it to the `float` model through overrides (coming soon if Mario is motivated) or should we hide them completely and \"cheat\" by replacing the model of float under the hood with `native.float`?"},{"author":"digama0","date":"2019-02-26T15:18:40Z","comment":"With the override model, they should appear as separate definitions, one a meta constant and the other a proper definition. With the current sneaky override model, we don't have a proper lean model of floats to sneaky override, so it's just a bunch of meta constants, and I would prefer that the meta constants be called `native.float`. For people who think that the name is too long they can `open native (float)` or define `float := native.float` locally."},{"author":"EdAyers","date":"2019-02-27T12:40:26Z","comment":"Can someone clue me in on 'the override model'?"},{"author":"cipher1024","date":"2019-02-27T12:43:03Z","comment":"The idea is to have some definitions of float for reasoning about it and mark it and its function with `@[override native.float]` so that, in the VM, it gets represented using your float instead of the code generated for the model"},{"author":"EdAyers","date":"2019-02-27T12:50:03Z","comment":"Ah ok. So it's kind of like `DECLARE_VM_BUILTIN` but for lean-side code."},{"author":"cipher1024","date":"2019-02-27T12:58:04Z","comment":"I will take your word for it. I haven't really played with the C++ side of things. But the way you put it, it sounds like it will be pretty simple"},{"author":"digama0","date":"2019-02-27T13:25:58Z","comment":"The hope is that it will be able to replace `DECLARE_VM_BUILTIN`, at least for non-`meta constant` definitions. We can use lean side overrides to redirect a definition like `nat.add` to a meta constant `native.nat.add` which is implemented via `DECLARE_VM_BUILTIN`; this doesn't change much as far as behavior is concerned but it makes it much more obvious what's happening when you look at the lean code."},{"author":"EdAyers","date":"2019-05-10T12:59:11Z","comment":"I think this is good enough for version 0.5 now except for code to convert nats that are too big to fit in to unsigned int to floats.\r\nWishlist:\r\n- make `vm_float.cpp` use templates so that `double` can be used instead of float without any rewrite.\r\n- make a constant to return the mantissa digits in an array.\r\n- code coverage for unit tests could be improved."},{"author":"cipher1024","date":"2019-05-11T15:56:47Z","comment":"I think converting to lambdas was unnecessary and it seems problematic on Windows"},{"author":"EdAyers","date":"2019-05-11T17:29:06Z","comment":"I disagree: having to maintain the code in one place using lambdas rather than two places using an explicit declaration reduces bugs."},{"author":"EdAyers","date":"2019-05-11T17:58:49Z","comment":"Also the root problem is that it doesn't know about `M_PI` and it doesn't know about `pow`."}],"tags":[],"pull_requests":[]},{"author":"EdAyers","number":1,"state":"closed","open_date":"2019-02-10T16:30:04Z","update_date":"2019-04-20T02:38:12Z","discussion":[{"author":"khoek","date":"2019-04-10T09:48:59Z","comment":"I fixed one of the two failing tests in a pull request, but the other has a `[TODO]` in it so I didn't touch it."},{"author":"khoek","date":"2019-04-15T11:14:38Z","comment":"Boo-hoo on the last build failure, but I'm pretty sure that that was caused by bad luck and not a test failure."}],"tags":[],"pull_requests":[]}]