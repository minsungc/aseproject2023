{"author":"CohenCyril","number":808,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":76,"deletions":21},{"file":"mathcomp/algebra/rat.v","status":"M","additions":76,"deletions":21}],"state":"merged","open_date":"2021-10-20T12:54:50Z","update_date":"2021-10-22T13:24:52Z","discussion":[{"author":"pi8027","date":"2021-10-20T13:01:30Z","comment":"> @pi8027 could you test if this is enough to solve the inefficiencies encountered in apery?\r\n\r\nIndeed. I will report ASAP."},{"author":"pi8027","date":"2021-10-20T14:36:19Z","comment":"math-comp/apery#4 compiles without almost any issue! I have just changed one line which was already a bottleneck with MathComp 1.12.\r\n\r\nWith this PR:\r\n```\r\nmake  595.03s user 9.88s system 99% cpu 10:05.20 total\r\n```\r\nWith MathComp 1.12:\r\n```\r\nmake  741.40s user 9.96s system 99% cpu 12:31.72 total\r\n```\r\n\r\nInterestingly, it is now faster than MathComp 1.12, although the result without native compilation could be different..."},{"author":"CohenCyril","date":"2021-10-22T11:36:29Z","comment":"@pi8027 fixed notations `[rat x // y]` and removed `vm_compute` for now and made another pull request #813  for this."},{"author":"CohenCyril","date":"2021-10-22T13:19:32Z","comment":"@pi8027 I think it is ready now..."},{"author":"proux01","date":"2021-10-26T13:12:18Z","comment":"BTW, maybe an alternative to resorting to `30%:Q` would be to have a number notation like `30` (or `3.14`) in scope `rat_scope`?"}],"review_discussion":[{"author":"pi8027","file":"CHANGELOG_UNRELEASED.md","date":"2021-10-20T17:09:54Z","comment":"I guess this is the reason why the compilation of apery becomes faster than MathComp 1.12. But, I'm not sure whether it is necessary because large constants of type `rat` are made opaque in apery. I'm also skeptical about whether it will invite another performance issue or not."},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2021-10-20T18:27:35Z","comment":"I'd rather keep it as is, with it `Eval hnf in 30%:Q.` terminates in less than 3s whereas it was not without it."},{"author":"pi8027","file":"CHANGELOG_UNRELEASED.md","date":"2021-10-21T04:40:24Z","comment":"Do you mean:\r\n```suggestion\r\n  using `rewrite [pattern]vm_compute_eq`.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/ssreflect.v","date":"2021-10-21T04:42:15Z","comment":"Same here. BTW, its definition is a good technique to know!\r\n```suggestion\r\n(* Usage: rewrite [pattern]vm_compute_eq.                               *)\r\n```"},{"author":"pi8027","file":"mathcomp/algebra/rat.v","date":"2021-10-21T04:47:10Z","comment":"Is there any reason to put `_ as x2` and `_ as y2` instead of simply a wildcard `_` here?"},{"author":"pi8027","file":"mathcomp/algebra/rat.v","date":"2021-10-21T04:47:27Z","comment":"Same here."},{"author":"pi8027","file":"CHANGELOG_UNRELEASED.md","date":"2021-10-21T04:50:19Z","comment":"Sure. I agree that this is likely an optimal solution for now, unless we put `GRing.natmul` and `GRing.exp` to the interfaces of `ssralg` structures."},{"author":"CohenCyril","file":"mathcomp/algebra/rat.v","date":"2021-10-21T17:03:43Z","comment":"nop..."},{"author":"CohenCyril","file":"mathcomp/algebra/rat.v","date":"2021-10-21T17:03:44Z","comment":"nop..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/ssreflect.v","date":"2021-10-21T17:04:25Z","comment":"No the rewrite rule `vm_compute` (the `vm_compute_eq` is the name of the typeclass) the problem is elsewhere in the doc."},{"author":"pi8027","file":"mathcomp/ssreflect/ssreflect.v","date":"2021-10-22T05:30:23Z","comment":"I see. So I misunderstood the techniqueðŸ˜… Do you want to improve the doc now?"},{"author":"pi8027","file":"mathcomp/algebra/rat.v","date":"2021-10-22T05:34:04Z","comment":"The scope is missing. Shouldn't we also add a `Reserved Notation` for them?"},{"author":"pi8027","file":"mathcomp/ssreflect/ssreflect.v","date":"2021-10-22T05:40:09Z","comment":"Also, I guess we should backport it to Coq. Right?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/ssreflect.v","date":"2021-10-22T11:37:37Z","comment":"moved to PR #813 for now"}],"tags":[],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"8b8297a6a8774c3d35b23b5453496ed9bbd26c6b","message":"Fine grained addition in rat","date":"2021-10-22T11:38:14Z"}]}