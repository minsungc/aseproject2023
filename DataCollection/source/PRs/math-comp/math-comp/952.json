{"author":"proux01","number":952,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":498,"deletions":0},{"file":"mathcomp/ssreflect/bigop.v","status":"M","additions":498,"deletions":0},{"file":"mathcomp/ssreflect/finset.v","status":"M","additions":498,"deletions":0},{"file":"mathcomp/ssreflect/order.v","status":"M","additions":498,"deletions":0}],"state":"merged","open_date":"2022-12-16T16:10:19Z","update_date":"2023-01-20T12:59:25Z","discussion":[{"author":"proux01","date":"2023-01-04T08:56:29Z","comment":"> PS: BTW @proux01 maybe there should be a Co-Authored-By crediting me, @affeldt-aist and IshiguroYoshihiro and Takafumi Saikawa ?\r\n\r\nIndeed, done"},{"author":"proux01","date":"2023-01-10T16:18:06Z","comment":"> I found that some lemmas have very short names such as `subset_big`. When looking for this lemma for example I could have been tempted to include the substring `le` in my `Search` command. Would it make sense to have a bit longer but more informative name?\r\n\r\n@affeldt-aist  I tend to agree, I added `le_` in bigop lemmas were it was absent. Does that feel better?\r\n\r\n"},{"author":"proux01","date":"2023-01-11T08:55:58Z","comment":"> There are two pending comments, but they are probably the same. The UI does not let me see them.\r\n\r\nHere, I can click on \"show resolved\" on the right to expand them."},{"author":"ybertot","date":"2023-01-11T10:16:09Z","comment":"After discussion in a developer meeting, we chose to support a name with suffix \"_mk_monoid\", so the best name seems to be `big_AC_mk_monoid`"},{"author":"proux01","date":"2023-01-11T10:44:57Z","comment":"Thanks, done"},{"author":"proux01","date":"2023-01-17T15:50:37Z","comment":"@ybertot is that mergeable?"},{"author":"affeldt-aist","date":"2023-01-18T09:41:20Z","comment":"> > I found that some lemmas have very short names such as `subset_big`. When looking for this lemma for example I could have been tempted to include the substring `le` in my `Search` command. Would it make sense to have a bit longer but more informative name?\r\n> \r\n> @affeldt-aist I tend to agree, I added `le_` in bigop lemmas were it was absent. Does that feel better?\r\n\r\nYes, I think it is better this way."},{"author":"thery","date":"2023-01-18T14:36:44Z","comment":"I have a naive question : why big is not defined in such a way that \r\n`big[+%/0]_(i <-  [::x1, .... xn]) f i` is simply ` (f x1 + (f x2 + .. f xn)) `  and \r\n`big[+%/0]_(i <-  [::]) f i` is `0.` \r\nIt would make all this trick about `big_max` not necessary."},{"author":"CohenCyril","date":"2023-01-18T16:23:03Z","comment":"> I have a naive question : why big is not defined in such a way that\r\n> `big[+%/0]_(i <- [::x1, .... xn]) f i` is simply `(f x1 + (f x2 + .. f xn))` and\r\n> `big[+%/0]_(i <- [::]) f i` is `0.`\r\n> It would make all this trick about `big_max` not necessary.\r\n\r\nIt might change lots of other behaviours in the non semi-group case ... We should try though."},{"author":"proux01","date":"2023-01-18T16:36:11Z","comment":"> It might change lots of other behaviours in the non semi-group case ... We should try though.\r\n\r\nEven in the non monoid case? But since many lemmas address the monoid case, this might be bearable, I agree we should try.\r\n\r\nIsn't this point relatively orthogonal to that PR though?\r\n"},{"author":"CohenCyril","date":"2023-01-18T16:45:36Z","comment":"@thery we tested briefely with @affeldt-aist, the new definition would invalidate `big_rec2` and `big_rec3` which have many occurrences, we did not push the experiment forward. AFAIU this changes too much the behaviour of bigop for non-monoids.\r\nCC @ggonthier "},{"author":"thery","date":"2023-01-18T18:07:35Z","comment":"The only drawback I see is that we don Â´t have `big[+%/0]_(i <-  x :: l)  f i = f x + big[+%/0]_(i <- l) f i` anymore."},{"author":"proux01","date":"2023-01-18T19:12:54Z","comment":"It also seem we would loose `big_rec`."},{"author":"thery","date":"2023-01-18T19:18:40Z","comment":"So it was a bad idea, I have learned something today"}],"review_discussion":[{"author":"affeldt-aist","file":"mathcomp/ssreflect/bigop.v","date":"2023-01-10T09:01:04Z","comment":"Shouldn't this be `idem_sub_big` following the pattern of `uniq_sub_big`?"},{"author":"affeldt-aist","file":"mathcomp/ssreflect/bigop.v","date":"2023-01-10T09:01:26Z","comment":"Same comment as for `idem_sub_big`."},{"author":"ybertot","file":"mathcomp/ssreflect/bigop.v","date":"2023-01-10T16:13:32Z","comment":"First instance of // here is useless and can be removed."},{"author":"ybertot","file":"mathcomp/ssreflect/bigop.v","date":"2023-01-10T16:19:28Z","comment":"The first instance of // on this line has no effect and can be removed."}],"tags":[],"commits":[{"author":"proux01","committer":"proux01","hash":"0061dc2fe100f0882c749cef5418e67cdff6b310","message":"Add oAC to turn any AC operator into a commutative monoid\n\nCo-authored-by: Cyril Cohen <cohen@crans.org>","date":"2023-01-11T10:43:07Z"},{"author":"proux01","committer":"proux01","hash":"e74c67c1885e85d9a1953b7e35ecb4d813fb57b1","message":"Add theory of increasing semigroups\n\nCo-authored-by: Cyril Cohen <cohen@crans.org>","date":"2023-01-11T10:43:07Z"},{"author":"proux01","committer":"proux01","hash":"1b4a138cd30722be991fa08760175c236dc73f37","message":"Adding bigmin/max theory\n\nCo-authored-by: Cyril Cohen <cohen@crans.org>\nCo-authored-by: IshiguroYoshihiro\nCo-authored-by: Takafumi Saikawa <tscompor@gmail.com>\nCo-authored-by: Reynald Affeldt <reynald.affeldt@aist.go.jp>","date":"2023-01-11T10:43:07Z"}]}