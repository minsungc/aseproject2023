{"author":"hivert","number":754,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":26,"deletions":1},{"file":"mathcomp/algebra/ssralg.v","status":"M","additions":26,"deletions":1},{"file":"mathcomp/field/separable.v","status":"M","additions":26,"deletions":1}],"state":"merged","open_date":"2021-06-13T10:33:27Z","update_date":"2021-06-15T01:20:54Z","discussion":[{"author":"pi8027","date":"2021-06-13T11:17:28Z","comment":"Also, this is a missing piece to support product rings in [algebra-tactics](https://github.com/math-comp/algebra-tactics). Thanks!"},{"author":"hivert","date":"2021-06-13T11:39:21Z","comment":"> They should be re-exported from here.\r\n\r\nCorrect me if I'm wrong, but all those canonicals have to be re-exported because they were defined in a the Theory module. The new ones are defined outside...\r\n\r\nI'm investigating but the failure seems to be due to a non localized rewrite...\r\n\r\n"},{"author":"hivert","date":"2021-06-13T11:41:36Z","comment":"> Also, this is a missing piece to support product rings in [algebra-tactics](https://github.com/math-comp/algebra-tactics). Thanks!\r\n\r\nI don't understand what you mean here (and know very little about tactic programming)..."},{"author":"pi8027","date":"2021-06-13T12:22:03Z","comment":"> > They should be re-exported from here.\r\n> \r\n> Correct me if I'm wrong, but all those canonicals have to be re-exported because they were defined in a the Theory module. The new ones are defined outside...\r\n\r\nSorry, my bad. Indeed, instances for products are defined after the `GRing` module.\r\n\r\nCould you investigate the breakage in separable.v? I guess you have to add some explicit patterns to specify subterms to rewrite.\r\n\r\n> > Also, this is a missing piece to support product rings in [algebra-tactics](https://github.com/math-comp/algebra-tactics). Thanks!\r\n> \r\n> I don't understand what you mean here (and know very little about tactic programming)...\r\n\r\nNevermind. I just wanted to show my support for this PR. But here are some details in the case you are interested in it: the algebra-tactics library provides ring and field tactics (as in Coq) for MathComp with a work-in-progress feature to support morphisms, e.g., it can prove `f ((x + y) ^+ 2) = f x ^+ 2 + f y ^+ 2 + f x * f y *+ 2` automatically, where `f` is a ring morphism to a `comRingType`. By relying on this feature and the canonical instances added by this PR, it should also be able to prove equations on product rings involving `fst`, `snd`, and `pair`."},{"author":"hivert","date":"2021-06-13T12:33:24Z","comment":"> Could you investigate the breakage in separable.v? I guess you have to add some explicit patterns to specify subterms to rewrite.\r\n\r\nI'm doing it right now, but I must confess it seems more complicated than that I expected that replacing the failing\r\n\r\n    rewrite -!rmorphM\r\n\r\nby\r\n\r\n      rewrite -[X in X + _]rmorphM -[X in _ + X]rmorphM.\r\n\r\nshould work but it doesn't. What is even strange it that \r\n\r\n       set mor := [rmorphism of map_poly at_t].\r\n       rewrite -!(rmorphM mor).\r\n\r\nwork as expected ! However I expect that you won't accept such a crude fix.\r\nThe canonical is here and for some reason Coq fail to find the correct matching. I'm trying some more things, but It may be beyond my skills...\r\n\r\n\r\n> Nevermind. I just wanted to show my support for this PR. \r\n\r\nThanks !\r\n\r\n> But here are some details in the case you are interested in it: the algebra-tactics library provides ring and field tactics (as in Coq) for MathComp with a work-in-progress feature to support morphisms, e.g., it can prove `f ((x * y) ^+ 2) = f x ^+ 2 + f y ^+ 2 + f x * f y *+ 2` automatically, where `f` is a ring morphism to a `comRingType`. By relying on this feature and the canonical instances added by this PR, it should also be able to prove equations on product rings involving `fst`, `snd`, and `pair`.\r\n\r\nThat is indeed very cool ! "},{"author":"hivert","date":"2021-06-13T13:32:31Z","comment":"I just pushed a reasonable fix. However I've no idea why it used to work and it is failing now. I don't know enough about Coq's pattern matching/canonical machinery to investigate further. If someone is able to understand and give me an explanation, please do !"},{"author":"hivert","date":"2021-06-13T15:04:37Z","comment":"The failure seems to be unrelated... I don't know how to relaunch the test to be sure."},{"author":"hivert","date":"2021-06-15T06:33:38Z","comment":"Good ! May I take the occasion to kindly ask the mathcomp project if they could put my name somewhere as an external contributor ? I've now probably more than 15 commit in the project, so that I think I deserve it ;-)"},{"author":"pi8027","date":"2021-06-15T07:21:21Z","comment":"We have a list of contributors for each release in its announcement e-mail. But, I personally think it makes a lot of sense to increase its visibility. I added it to the [topics](https://github.com/math-comp/math-comp/wiki/TopicsNextMeeting) for the next MathComp meeting (10 AM CEST tomorrow)."}],"review_discussion":[{"author":"pi8027","file":"mathcomp/field/separable.v","date":"2021-06-14T02:34:07Z","comment":"After all, I investigated this by myself. The source of the failure here was that it unifies `(u ^ at_t, v ^ at_t).1` with a morphism application and then triggers a canonical structure resolution. Without the morphism instances for `fst`, it unfolds `fst` to obtain `u ^ at_t` and finds the fact that `map_poly` is a morphism, but this behavior changes in presence of the morphism instances for `fst`. So `simpl` before `rewrite -!rmorphM` would be enough here:\r\n```suggestion\r\n  by rewrite /= -!rmorphM -rmorphD Dr /= map_polyC polyC_eqp1.\r\n```"},{"author":"hivert","file":"mathcomp/field/separable.v","date":"2021-06-14T15:58:51Z","comment":"> After all, I investigated this by myself. The source of the failure here was that it unifies `(u ^ at_t, v ^ at_t).1` with a morphism application and then triggers a canonical structure resolution. Without the morphism instances for `fst`, it unfolds `fst` to obtain `u ^ at_t` and finds the fact that `map_poly` is a morphism, but this behavior changes in presence of the morphism instances for `fst`. So `simpl` before `rewrite -!rmorphM` would be enough here:\r\n\r\nThanks for the investigation and the explanation. I just applied your change (squashing the fix in a single commit) and (force) pushed. That should do the job."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"hivert","committer":"hivert","hash":"8a5f000f9da3acc497a0393558f53f79cb20b30f","message":"Canonical additive, linear and rmorphism for fst and snd","date":"2021-06-13T10:30:23Z"},{"author":"hivert","committer":"hivert","hash":"1c0aa2a9b74e648569ffa8a82dad7bad29fabf8e","message":"Fixed failing match in separable.v","date":"2021-06-14T15:56:24Z"}]}