{"author":"pi8027","number":665,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":140,"deletions":71},{"file":"mathcomp/algebra/matrix.v","status":"M","additions":140,"deletions":71},{"file":"mathcomp/field/falgebra.v","status":"M","additions":140,"deletions":71},{"file":"mathcomp/field/separable.v","status":"M","additions":140,"deletions":71},{"file":"mathcomp/ssreflect/path.v","status":"M","additions":140,"deletions":71},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":140,"deletions":71}],"state":"merged","open_date":"2020-11-20T07:54:32Z","update_date":"2020-11-25T17:59:03Z","discussion":[],"review_discussion":[{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T08:20:17Z","comment":"I think the most use-cases of `all1rel` require `r` to be symmetric. This is the case at least in `all_comm_mx`, `ahom_in`, and `Derivation`. But, if it is not the case in general, I would like to put the suffix `_sym` to the names of these lemmas."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:09:54Z","comment":"I prefer `all2rel` ~or `pairwise`~ or **selfrel** than `all1rel`.\r\n@gares, @chdoc, you participated in the first discussion on `allrel`, what do you say about this change and my suggestion?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/path.v","date":"2020-11-20T10:12:00Z","comment":"I'm a bit concerned that the proof looks longer..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:13:51Z","comment":"I had the impression that the convention here was `l` `r` rather than positional (as in `allpairs0l`)"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:17:55Z","comment":"These lemma only make sense when the relation is symmetric anyway, otherwise it can all be obtained by `allrel_cons2` which would be the lemma combining `allrel_consr` and `allrel_consl`."},{"author":"CohenCyril","file":"mathcomp/ssreflect/path.v","date":"2020-11-20T10:18:35Z","comment":"```suggestion\r\nrewrite allrel_cons2 => /and4P [xy' xs2 ys1 s1s2] /andP [hx xs1] /andP [hy ys2].\r\ncase: ifP => xy /=; rewrite (hx, hy) /=.\r\n- by apply: ih1; rewrite ?allrel_consr ?ys1 //= xy xy' implybT.\r\n- by apply: ih2; have:= leT_total x y; rewrite ?allrel_consl ?xs2 ?xy //= => ->.\r\n```\r\nintroducing  `allrel_cons2` as in [a comment below](https://github.com/math-comp/math-comp/pull/665/files#r527593132)\r\n"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:19:53Z","comment":"PS: and maybe that's what shortens the proof of `merge_stable_path` once more, as I tried to exhibit in [another comment](https://github.com/math-comp/math-comp/pull/665/files#r527591337)"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:21:42Z","comment":"```suggestion\r\n\r\nLemma allrel_cons2 x y xs ys :\r\n  allrel (x :: xs) (y :: ys) = [&& r x y, all (r x) ys, all (r^~ y) xs & allrel xs ys].\r\nProof. by rewrite /= all_predI/= -andbA. Qed. (* or something like that *)\r\n\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:42:46Z","comment":"I think we should rather provide a multi-rule rewriting lemma consists of `allrel_(cons|cat)(l|r)`, etc."},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:43:13Z","comment":"How about shortening the description to something along the lines of:\r\n```suggestion\r\n(* allrel r xs ys := all [pred x | all (r x) ys] xs                           *)\r\n(*                == r x y holds whenever x is in xs and y is in ys           *)\r\n```\r\nI don't feel the need to use `proposition` here, as it it actually a boolean. "},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:43:34Z","comment":"I'm in favor of the new definition, I wasn't fond of the `all id ...` to begin with. As to to the naming, don't have much to say."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:51:15Z","comment":"On second thoughts, I prefer to reserve `pairwise` for\r\n```coq\r\nFixpoint pairwise {T} (r : rel T) (xs : seq T) :=\r\n  if xs is x :: xs then all (r x) xs && pairwise r xs else true.\r\n```\r\nThat might come up in mathcomp 1.13 and that will be equivalent to `all2rel` under `reflexive r` and `symmetric r` only..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:54:33Z","comment":"We could have both, but the multi-rule may not lead to the same results modulo simpl :confused: so I'd rather let the user form them themselves at their own risk."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T10:55:56Z","comment":"What about `selfrel` ?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-20T11:05:45Z","comment":"Missing \r\n```coq\r\nLemma eq_allrel {T S : Type} (r r': T -> S -> bool) xs ys :\r\n  r =2 r' -> allrel r xs ys = allrel r' xs ys.\r\nProof. (*...*) Qed.\r\n\r\nLemma eq_in_allrel {T S : Type} (P : {pred T}) (Q : {pred S}) (r r': T -> S -> bool) xs ys :\r\n  all P xs -> all Q ys -> {in P & Q, r =2 r'} -> allrel r xs ys = allrel r' xs ys.\r\nProof. (*...*) Qed.\r\n```\r\n"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-11-21T07:18:42Z","comment":"@CohenCyril I thought your initial suggestion was to name the general version `all2rel` (https://github.com/math-comp/math-comp/issues/662#issuecomment-730807158). This one is fine with me. But, since I preferred to give a shorter name for a general version, I renamed the original `allrel` to `all1rel` (\"1\" stands for unary in the sense of that `all1rel` takes one list). Also, I'm not fond of `selfrel`...\r\n\r\nBut, again, I'm totally fine to keep `allrel` for the unary version and to rename the general version to `all2rel`."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-24T16:16:14Z","comment":"I prefer to keep `allrel` for the general version. But I was considering renaming `all1rel` to `all2rel` (expressing all 2 are related..., while I cannot read `all1rel` in english, besides interpreting `1` as the arity...).\r\nHowever, it does not matter much to me, we can keep `all1rel`, at least for 1.12."},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-11-25T03:21:57Z","comment":"> I prefer to keep `allrel` for the general version. But I was considering renaming `all1rel` to `all2rel` (expressing all 2 are related..., while I cannot read `all1rel` in english, besides interpreting `1` as the arity...).\r\n\r\nSure. Now I think it is fine to rename `all1rel` to `all2rel`."},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-11-25T13:17:43Z","comment":"```suggestion\r\n  + lemmas `all2rel1`, `all2rel2`, and `all2rel_cons`\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-11-25T13:24:12Z","comment":"BTW, `pairwise` is also equivalent to `sorted` under transitivity. Reformulating some lemmas about `sorted` using `pairwise` may allow us to drop the transitivity assumption."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-11-25T13:25:12Z","comment":"That would indeed be a nice thing to do... for mathcomp 1.13.0 :wink: "}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"pi8027","committer":"pi8027","hash":"783631c771ec76baa4ff9d292c1eddfb58f67f4c","message":"Generalize `allrel` to take two lists as arguments","date":"2020-11-25T13:29:54Z"},{"author":"pi8027","committer":"pi8027","hash":"c2b2ea2dce5fa7b8d428a5072f2e86979eeb1d98","message":"Apply suggestions from code review\n\nCo-authored-by: Christian Doczkal <christian.doczkal@inria.fr>","date":"2020-11-25T13:29:54Z"},{"author":"pi8027","committer":"pi8027","hash":"43796130c3e59c0651a283e6654a7d82acbfeed3","message":"Apply suggestions from code review\n\nCo-authored-by: Cyril Cohen <CohenCyril@users.noreply.github.com>","date":"2020-11-25T13:29:54Z"},{"author":"pi8027","committer":"pi8027","hash":"d844896e6418bb00418964bb4ae4219e2bd6b69c","message":"Rename `all1rel` to `all2rel`, restate `eq_allrel`, and add CHANGELOG entries\n\nCo-authored-by: Cyril Cohen <CohenCyril@users.noreply.github.com>","date":"2020-11-25T13:29:55Z"}]}