{"author":"proux01","number":832,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"A","additions":115,"deletions":12},{"file":"mathcomp/Make.test-suite","status":"A","additions":115,"deletions":12},{"file":"mathcomp/Makefile.test-suite.coq.local","status":"A","additions":115,"deletions":12},{"file":"mathcomp/algebra/rat.v","status":"A","additions":115,"deletions":12},{"file":"mathcomp/test_suite/test_rat.v","status":"A","additions":115,"deletions":12},{"file":"mathcomp/test_suite/test_rat.v.out","status":"A","additions":115,"deletions":12}],"state":"merged","open_date":"2022-01-07T11:23:34Z","update_date":"2022-03-04T11:30:43Z","discussion":[{"author":"CohenCyril","date":"2022-01-08T17:40:01Z","comment":"That's awesome! Slightly off topic:\r\n- I'd like the same for `int` in another PR\r\n- Could we have the same for an arbitrary ring."},{"author":"proux01","date":"2022-01-09T11:28:18Z","comment":"> * I'd like the same for `int` in another PR\r\n\r\nSure, that should be an easier PR\r\n\r\n> * Could we have the same for an arbitrary ring.\r\n\r\nUnfortunately not, Coq requires the parsed type to be an inductive or at least a constant (so not a section variable).\r\nI could probably rather easily extend Coq to have `<number>` be parsed (and printed back) just as `<number>%:R` but I don't know if it's worth it (the `GRing.natmul` wouldn't be computed in any case (if only because we wouldn't know how to print back the result)).\r\n"},{"author":"proux01","date":"2022-01-15T19:16:26Z","comment":"Never mind, I just found a hack to do it without modifying Coq itself: #841 "},{"author":"proux01","date":"2022-01-15T19:52:55Z","comment":"> * I'd like the same for `int` in another PR\r\n\r\nHere it is: #842"},{"author":"proux01","date":"2022-02-17T09:10:09Z","comment":"Rebased on top of #842 "}],"review_discussion":[],"tags":[],"commits":[{"author":"proux01","committer":"proux01","hash":"b817afa1c01e794a688dec981fd564dae00023aa","message":"Add number notation for rat","date":"2022-03-04T09:31:14Z"}]}