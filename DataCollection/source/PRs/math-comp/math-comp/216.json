{"author":"CohenCyril","number":216,"diff_summary":[{"file":"ChangeLog","status":"M","additions":61,"deletions":0},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":61,"deletions":0}],"state":"merged","open_date":"2018-08-07T16:05:54Z","update_date":"2018-09-13T16:39:23Z","discussion":[{"author":"CohenCyril","date":"2018-08-07T16:07:00Z","comment":"Depends on #201, please review only commit 0d41046cff37af7b85da0e771e3d25a4c640edbf"},{"author":"CohenCyril","date":"2018-08-12T20:38:11Z","comment":"@gares I could swear I saw a review from you in my notifications about this PR, however I cannot find it here... was I dreaming?"},{"author":"amahboubi","date":"2018-09-03T09:25:25Z","comment":"Hi @CohenCyril. This PR has more content than the title suggests. I see several independent natures of things: 1) lemmas in seq and (yet other) variants of contraposition with equalities 2) homo-mono-morphisms 3) generalization of extremas 4) infrastructures for chains of equivalences. I would agree to approve 1) and also may be 3) right away. I have a few questions about 2) and 4)."},{"author":"CohenCyril","date":"2018-09-03T12:18:49Z","comment":"> Hi @CohenCyril. This PR has more content than the title suggests. I see several independent natures of things: 1) lemmas in seq and (yet other) variants of contraposition with equalities 2) homo-mono-morphisms 3) generalization of extremas 4) infrastructures for chains of equivalences. I would agree to approve 1) and also may be 3) right away. I have a few questions about 2) and 4).\r\n\r\nHi @amahboubi, this is a dependent PR, you can post your comments about 1)2)3) in #201, only comments about 4) may go here.\r\n\r\n"},{"author":"CohenCyril","date":"2018-09-05T08:30:24Z","comment":"Hi @amahboubi, thanks for your comments.\r\nAn example is here: https://github.com/math-comp/finmap/blob/various_improvements/finmap.v#L2964-L2996"},{"author":"CohenCyril","date":"2018-09-10T13:11:20Z","comment":"> I think this is ok, but I would like to see an example of instance before merging. For now, it is a lone piece of infrastructure.\r\n\r\nDo you want to see examples inside the mathcomp library? Or is my finmap example enough?"},{"author":"amahboubi","date":"2018-09-11T16:21:48Z","comment":"Thanks for the pointer, @CohenCyril no I think this one is enough. I guess it is clear enough that the literature features \"the following are equivalent\"-style statements (hence the TFAE acronym naming of the aforementioned thread). May be would it be worth having this exact wording in a comment."},{"author":"CohenCyril","date":"2018-09-12T09:41:03Z","comment":"> May be would it be worth having this exact wording in a comment.\r\n\r\nOK"},{"author":"CohenCyril","date":"2018-09-12T09:43:06Z","comment":"BTW, when I have the time, I also want to contribute an extension of this where, when you want to prove the TFAE, you provide a graph, that can be computationally checked is strongly connected (by dfs, or Tarjan (e.g. https://github.com/CohenCyril/tarjan) :)) and we generate the implications to prove from the arrows of the graph."},{"author":"amahboubi","date":"2018-09-12T09:45:16Z","comment":"I am wondering: is it the appropriate workflow? I would like both to merge this (once you've implemented the 2 minor changes I requested) and to continue the discussion. It probably depend on when you want this to be merged."},{"author":"CohenCyril","date":"2018-09-12T09:51:07Z","comment":"When this pull request is merged, we should move the discussion to an issue we create to continue the discussion and start by refering to this PR for the record. Note also that we must not merge this pull request yet since it depends on PR #201"},{"author":"amahboubi","date":"2018-09-12T09:55:09Z","comment":">  Note also that we must not merge this pull request yet since it depends on PR #201\r\n\r\nBut the code for the \"circular implications\" stuff is in fact independent isn't it?"},{"author":"CohenCyril","date":"2018-09-12T10:39:16Z","comment":"> But the \"circular implication\" code is in fact independent isn't it?\r\n\r\nNo, it relies on `homo_ltn`"},{"author":"amahboubi","date":"2018-09-13T09:37:49Z","comment":"This dependency is blocking an easier merge. Are your sure this is not overkill? \r\nIn my opinion the dependency is not essential: without the machinery introduced by #201, `homo_ltn` is an easy 2-liner:\r\n\r\n```\r\nLemma homo_ltn T (f : nat -> T) (r : T -> T -> Prop) :    \r\n  (forall y x z, r x y -> r y z -> r x z) ->    \r\n  (forall i, r (f i) (f i.+1)) -> {homo f : i j / i < j >-> r i j}.    \r\nProof.    \r\nmove=> rtrans rfS x y; elim: y x => // y ihy x; rewrite ltnS leq_eqVlt.\r\ncase/orP=> [/eqP-> // | ltxy]; apply: rtrans (rfS _); exact: ihy.\r\nQed.\r\n```"},{"author":"CohenCyril","date":"2018-09-13T11:36:33Z","comment":"> This dependency is blocking an easier merge. Are your sure this is not overkill?\r\n\r\nI would not say \"overkill\" is the word (because #201 is way more useful to me than this one in my other developments), but it can be made temporarily independent, yes. I rebased, if you are happy with the modifications, you can merge. I'll fix the proof again in â‚¬201."},{"author":"amahboubi","date":"2018-09-13T12:00:34Z","comment":"Agreed, my \"overkill\" referred to the dependency. Now the PR is much cleaner I think, thanks!\r\n"},{"author":"amahboubi","date":"2018-09-13T12:00:50Z","comment":"Last question before merging (once checks have all completed). I am wondering about how to formalize best the fact that proving any item of a TFAE is proving the conjunction of statements. But if you prefer, I can merge first and ask this question again in an issue."},{"author":"CohenCyril","date":"2018-09-13T14:04:09Z","comment":"> But if you prefer, I can merge first and ask this question again in an issue.\r\n\r\nyes please"}],"review_discussion":[{"author":"amahboubi","file":"mathcomp/ssreflect/seq.v","date":"2018-09-03T12:34:56Z","comment":"Annotate with the sort of the inductive."},{"author":"amahboubi","file":"mathcomp/ssreflect/seq.v","date":"2018-09-03T12:38:33Z","comment":"Provide the type of the P0 argument."},{"author":"amahboubi","file":"mathcomp/ssreflect/seq.v","date":"2018-09-03T12:47:21Z","comment":"What about having also a version of the lemma which does not rely on indices? Something like\r\n`forall P Q P0 Ps, all_iff P0 Ps -> P \\in P0 :: Ps -> Q \\in P0 :: Ps -> P -> Q`."},{"author":"amahboubi","file":"mathcomp/ssreflect/seq.v","date":"2018-09-03T12:55:27Z","comment":"I was about to ask wether it is clear that the coercion should be `all_ifP`, as opposed to `all_iffLR`, but I think it's ok."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2018-09-10T13:08:28Z","comment":"That is impossible, since these are lists of `Prop` and `\\in` is specialized to discrete types."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2018-09-10T13:08:42Z","comment":"I will fix this."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2018-09-10T13:08:48Z","comment":"Ok"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2018-09-10T13:10:40Z","comment":"I also wondered, but I think this is better. (Of course it would even be better if `Hint View` supported this, but it's probably not necessary given the number of usecases...)"},{"author":"amahboubi","file":"mathcomp/ssreflect/seq.v","date":"2018-09-11T16:13:42Z","comment":"Oops, sorry for the noise, I am doing too much classical stuff these days it seems :). Would it make sense to have a boolean version? Interestingly, this morning I found a related thread in the Lean users chat room: \r\nhttps://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/TFAE"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2018-09-11T17:03:17Z","comment":"@amahboubi thanks for the pointer. As for booleans I do not think it would make sense: since it is a small scale reflexion tactic, the `P \\in Ps` should be convertible to true whenever a property is in the list, but is won't ever happen (except for `true` and `false`, which is not very intersting)"},{"author":"amahboubi","file":"mathcomp/ssreflect/seq.v","date":"2018-09-12T08:11:59Z","comment":"I did not mean a boolean version of this particular lemma per se, but more generally a support for boolean TFAE, i.e. a notation for lists of boolean statements that are pairwise equivalent. The expected benefit would not be the computational behaviour but classical reasoning. For instance you can state that they are either all valid, or all wrong."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2018-09-12T09:39:15Z","comment":"Would it a combination of `all_if` together with with `eq_true_iff_eq` to get equalities and with `equivP idP` to get reflects?"},{"author":"amahboubi","file":"mathcomp/ssreflect/seq.v","date":"2018-09-13T14:23:00Z","comment":"alle -> all"},{"author":"amahboubi","file":"mathcomp/ssreflect/seq.v","date":"2018-09-13T14:23:40Z","comment":"spurious '('"},{"author":"amahboubi","file":"mathcomp/ssreflect/seq.v","date":"2018-09-13T14:31:47Z","comment":"I do not understand this comment line. What about:\r\n`We introduce a specific conjunction, used to chain the consecutive items in a circular list of implications.` "}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"8d8432614e3849ff35f03f098b1a17b4ce41651a","message":"Small scale tool for proving \"the following are equivalent\"\n\nTool to prove only P0 -> P1 -> ... -> Pn -> P0\nbut use any implication Pi -> Pj","date":"2018-09-13T14:56:37Z"}]}