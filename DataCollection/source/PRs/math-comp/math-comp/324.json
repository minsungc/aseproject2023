{"author":"ggonthier","number":324,"diff_summary":[{"file":"CHANGELOG.md","status":"M","additions":409,"deletions":266},{"file":"mathcomp/solvable/primitive_action.v","status":"M","additions":409,"deletions":266},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":409,"deletions":266},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":409,"deletions":266}],"state":"merged","open_date":"2019-04-04T14:52:21Z","update_date":"2019-04-08T12:17:43Z","discussion":[{"author":"CohenCyril","date":"2019-04-04T15:54:20Z","comment":"@ggonthier I have a squashed and rebased version with resolved conflicts + cleansed spurious whitespaces. It compiles on my computer with coq 8.8. May I force-push?"},{"author":"ggonthier","date":"2019-04-04T15:56:21Z","comment":"Did you also rebase wrt the ChangeLog upheaval? Otherwise it would make sense to squash wrt that before..."},{"author":"CohenCyril","date":"2019-04-04T15:57:37Z","comment":"> Did you also rebase wrt the ChangeLog upheaval? Otherwise it would make sense to squash wrt that before...\r\n\r\nYes I did"},{"author":"CohenCyril","date":"2019-04-04T16:08:13Z","comment":"@ggonthier the result it here: https://github.com/CohenCyril/math-comp/commits/seq-permutations-allpairs"},{"author":"CohenCyril","date":"2019-04-04T16:11:34Z","comment":"I realize some comments of the commit log do not make sense anymore now it is squashed... so I am taking the liberty to rephrase slightly"},{"author":"ggonthier","date":"2019-04-04T16:11:45Z","comment":"Looks great - good to merge, I'd say; thanks!"},{"author":"CohenCyril","date":"2019-04-04T20:11:14Z","comment":"@erikmd I tried to follow your tutorial #293 but I must have missed something. Could you have a look?"},{"author":"erikmd","date":"2019-04-04T23:29:18Z","comment":"@CohenCyril I just took a look and it seems:\r\n* that your implementation of #293 was very fine: in particular:\r\n    * in https://gitlab.com/math-comp/math-comp/pipelines/55269045 there is the good number of jobs\r\n    * in https://gitlab.com/math-comp/math-comp/-/jobs/190933399 I indeed see\r\n        `$ git rev-parse --verify HEAD`  \r\n        `6fe341242be1d4e55ac23fa6f022e6d115b89bf1`\r\n* that **coqbot** reporting was imprecise because it aggregated failures from different pipelines (this is maybe a very minor issue, but I Cc @Zimmi48 just in case)\r\n* that your patch in the external branch is maybe incomplete: at first sight it should at least modify this line: https://github.com/math-comp/fourcolor/blob/master/theories/configurations.v#L2078"},{"author":"CohenCyril","date":"2019-04-05T10:10:43Z","comment":"Failures are spurious now, one can merge."},{"author":"ggonthier","date":"2019-04-05T10:18:12Z","comment":"Shouldn't we remove the patch commit before merging?"},{"author":"CohenCyril","date":"2019-04-05T10:26:29Z","comment":"> Shouldn't we remove the patch commit before merging?\r\n\r\nWe do not have to, but let's do the cleanup right now indeed."},{"author":"CohenCyril","date":"2019-04-05T12:05:16Z","comment":"Dear @ggonthier, I do not understand what happened here. Did you commit to this pr by accident?"},{"author":"ggonthier","date":"2019-04-05T12:13:02Z","comment":"Yes, and then no: my local sync didn't react too well to all those forced pushes, and then I decided to tweak the RHS of `mem_permutations` while I was at it. I'm looking into another refactoring bit (consistency renaming or `perm` lemmas) which we should do while we're at it. I'll signal when you can straighten things out again..."},{"author":"CohenCyril","date":"2019-04-05T16:01:44Z","comment":"Checks have passed. I will rebase and merge later. (After @ggonthier signals me)"},{"author":"Zimmi48","date":"2019-04-08T12:48:22Z","comment":"@erikmd Cyril pushed the branch `seq-permutations-allpairs` manually on GitLab. Thus, it ran without the overlays (since they are supposed to run only for the branch named `pr-324`). Because the recommendation is to use alternative names for building math-comp, the reported status from the CI run triggered by @coqbot did not override the status reported for the branch. Overall my recommendation is to just not push to GitLab directly unless you have a good reason to."},{"author":"CohenCyril","date":"2019-04-08T16:14:24Z","comment":"@Zimmi48 I do not even know how to push directly on gitlab, so I did not do it, or not on purpose... or at all?"},{"author":"erikmd","date":"2019-04-08T22:47:41Z","comment":"@Zimmi48 thanks for your reply!\r\n\r\nI guess the behavior is the same whether one directly push a branch to GitLab, or to GitHub because branches are mirrored to GitLab… so are you suggesting that all PRs should be opened from forks, rather than from internal, upstream branches on GitHub?\r\n(this PR #324 was indeed in the latter case, as `seq-permutations-allpairs` is an upstream branch)"},{"author":"Zimmi48","date":"2019-04-09T09:06:30Z","comment":"Thanks for the clarification. I did not realize that this branch was mirrored automatically. @erikmd You could modify your instructions in #293 to test for the branch name `pr-xxx` and also the GitHub branch name (similar to what we do in Coq's user overlays https://github.com/coq/coq/tree/master/dev/ci/user-overlays)."}],"review_discussion":[{"author":"erikmd","file":"mathcomp/ssreflect/.#nseq.v","date":"2019-04-05T20:17:53Z","comment":"@ggonthier I guess this file should not be committed"},{"author":"CohenCyril","file":"mathcomp/ssreflect/.#nseq.v","date":"2019-04-05T21:31:38Z","comment":"I will filter it out when I rebase"}],"tags":[],"commits":[{"author":"ggonthier","committer":"CohenCyril","hash":"c0254eaba338a4d308b4e2f200841ff76e6b4b9a","message":"Permutations and other extensions to seq; fintype documentation\n\n- Added `permutations` and some `perm_eq` lemmas suggested by @MrSet\n  in #299 (except the link to the coq lib `Permutation` predicate).\n  Use insertions to construct permutations. This definition is closer\n  to the one proposed by @MrSet, than one using rotations (it adds one\n  line to the definition of `permutations` but the proofs become a\n  little simpler.)\n\n- Added support for casts on `map` comprehension general terms.\n\n- Added `allpairs_map[lr]` suggested by @pi8027 in #314, but with\n  equational proofs; changed `allpairs_comp` to its converse\n  `map_allpairs` for consistency.\n\n- Add three `allpairs` extensionality lemmas: for the non-localised,\n  dependent localised and non-dependent localised cases; as per\n  `eq_in_map`, the latter two are equivalences.\n\n- Documented the `all2` predicate added in #224, and the view\n  combinators added in #202.\n\n- Renamed `seq2_ind` to `seq_ind2`, and weakened the induction\n  hypothesis, adding a `size` equality assumption.\n\n- Corrected the header to use `<=>` for `bool` predicate\n  documentation, and `<->` for `Prop` predicates, following the\n  library’s general convention.\n\n- Replaced the `nosimpl` in `rev` with a `Arguments simpl never`\n  directive, making it possible to merge the `Rev` section into the\n  main `Sequences` section.\n\n- Miscellaneous improvements to proof scripts and file organisation.\n\n- Correct maximal implicits of `constant`.\n\n- Fixes omitted `Prenex Implicit` declaration.\n\n- Other implicits fixes.\n\n- Fix apparent `done` regression It appears `done` now does a weaker\n  form of intros, and this broke the `dtuple_onP` proof. Updated the\n  proof to eliminate the issue.\n\n(Commit log edited by @CohenCyril during the squash.)","date":"2019-04-05T23:54:16Z"}]}