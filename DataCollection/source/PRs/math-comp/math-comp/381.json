{"author":"hivert","number":381,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":63,"deletions":2},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":63,"deletions":2}],"state":"merged","open_date":"2019-09-03T21:11:27Z","update_date":"2019-11-18T08:54:24Z","discussion":[{"author":"amahboubi","date":"2019-10-24T12:37:07Z","comment":"@hivert , thanks for contributing! @pi8027 @anton-trunov thanks for your comments! Are we ready to merge?\r\n"},{"author":"amahboubi","date":"2019-10-24T12:38:28Z","comment":"If so,  @hivert could you add a line to the change log listing the names of the lemmas added by this PR?"},{"author":"CohenCyril","date":"2019-10-24T19:42:30Z","comment":"@hivert thanks for contributing, I asked a few more script changes. Although I did them without Coq, I feel pretty confident. If one (or several) of my suggestions fails, 1. sorry for the inconvenience, 2. Tell me and I will take the time to download and try my changes."},{"author":"hivert","date":"2019-10-27T08:48:13Z","comment":"@CohenCyril I closed the change you requested that I manage to apply I commented the two remaining one. Since they are just minor comment I think I've taken care of all your requests. Please resolve the remaining conversations if you agree. I'm now  updating the changelog as asked by @amahboubi and resubmitting my PR. Thanks for the comments and the tips."},{"author":"CohenCyril","date":"2019-11-06T14:57:11Z","comment":"@hivert thanks for your update. I missed your update of the changelog, I am afraid you have to rebase and solve the conflict in the changelog now, sorry."},{"author":"hivert","date":"2019-11-06T20:21:46Z","comment":"This is a first time I resolve a conflict with the github interface. I hope this is Ok. \r\n\r\nBy the way, do you need me to squash all the change in a unique commit ?"},{"author":"CohenCyril","date":"2019-11-14T11:51:45Z","comment":"@hivert \r\n> This is a first time I resolve a conflict with the github interface. I hope this is Ok.\r\n\r\nAs with any git subtle manipulation done through the github interface, the result is not ok. (indeed it created a merge commit inside the branch). Can you please rebase this branch on top of master instead?\r\n\r\nThanks for your patience."},{"author":"CohenCyril","date":"2019-11-14T11:52:18Z","comment":"> By the way, do you need me to squash all the change in a unique commit ?\r\n\r\nAlso, yes, please squash. :smile: \r\n\r\n"},{"author":"ybertot","date":"2019-11-18T08:54:54Z","comment":"Thanks"}],"review_discussion":[{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T07:12:11Z","comment":"I prefer this one:\r\n```coq\r\nLemma take_take i j s : take i (take j s) = take (minn i j) s.\r\n```\r\n\r\nThen `takeC` can be a corollary of `take_take`.\r\n```coq\r\nLemma takeC i j s : take i (take j s) = take j (take i s).\r\nProof. by rewrite !take_take minnC. Qed.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T07:14:08Z","comment":"We could also have:\r\n```coq\r\nLemma drop_take i j s : drop i (take j s) = take (j - i) (drop i s).\r\n```\r\n\r\nThen `take_drop` can be a corollary of `drop_take`.\r\n```coq\r\nLemma take_drop i j s : take i (drop j s) = drop j (take (i + j) s).\r\nProof. by rewrite drop_take addnK. Qed.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T08:15:42Z","comment":"If `size_take` is changed as follows, we wouldn't need `size_take_leq`. (Indeed this change is backward incompatible.)\r\n```coq\r\nLemma size_take s : size (take n0 s) = minn n0 (size s).\r\n```"},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T08:53:09Z","comment":"In my opinion, my form of statement is slightly easier to use. Indeed, in the other case (i.e. when `i >= j`), one conclude instantaneously with `take_oversize`. Your form of statement is good when you don't know the relative order of `i` and `j` which is the case for  `takeC` but, in my experience, occur very rarely. Hence my choice of statement.\r\n\r\nAnyway, I would gladly put the two statements, provided we agree on the names.\r\n\r\nWhat do you think ?"},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T08:57:40Z","comment":"Again, this second form is only useful when `j >= i` otherwise one conclude with `drop_oversize`. And when `j >= i`, passing from `drop_take` to `take_drop` is just a matter of rewriting with `subnK`...\r\n\r\nAgain, if there is an agreement, I'm ok to add both.  "},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T09:17:03Z","comment":"In my code, I have dozens of occurrence of `size (take n0 s)` under the assumption that `le : n0 <= size s)`.  Currently we have to write \r\n```    rewrite size_map size_take -/(minn _ _) (minn_idPl le).``` \r\nwhich is not so bad, except that I can't manage to remember the name `minn_idPl`. I figured out that \r\n```    rewrite size_take_leq le.``` \r\nwas the easiest and fastest way to do it. With `minn` you'll have to do \r\n```    rewrite size_take_minn (minn_idPl le).```\r\n\r\nAgain, we could include more than one statement if we agree on the name. If the maintainers don't want to have yet another lemma, I'll also fully understand. "},{"author":"ggonthier","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T09:21:52Z","comment":"> In my code, I have dozens of occurrence of `size (take n0 s)` under the assumption that `le : n0 <= size s`.\r\n\r\nYou should be using `size_takel`, then."},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T09:33:03Z","comment":"So true ! Ok ! Let's remove this one."},{"author":"anton-trunov","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T14:51:13Z","comment":"Here is an alternative one-line proof of `take_addn` showing that the lemma currently named `take_take` is useful, because it does not enforce a particular form of one of `take`'s arguments:\r\n```coq\r\nby rewrite take_drop addnC -(take_take i (j + i)) ?leq_addl ?cat_take_drop.\r\n```"},{"author":"anton-trunov","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T15:51:04Z","comment":"I like this proof! By the way, by using `subnKC` it's possible to shave off `addnC` here:\r\n```coq\r\nmove=>/subnKC <-; move: (j-i) => d.\r\nby rewrite nseqD take_size_cat // size_nseq.\r\n```"},{"author":"anton-trunov","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T16:25:45Z","comment":"Let me share a trick I sometimes use. Often times we'd like to weaken our hypothesis on the top of the goal stack in two different ways. We can define a duplicating lemma like this one:\r\n```coq\r\nLemma duP {A : Type} : A -> A * A.\r\nProof. by []. Qed.\r\n```\r\nwhich can be later used like so:\r\n```coq\r\ncase: (leqP i j) => [/subnKC {1}<- | /ltnW /duP[j_le_i /eqP->]].\r\n- by rewrite nseqD drop_size_cat // size_nseq.\r\nby rewrite drop_oversize // size_nseq.\r\n```\r\nThis, admittedly, may result in less readable proofs, but it lets one make less context shuffling steps."},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2019-09-04T21:46:29Z","comment":"I found my old proofs which use my version of `take_take` and `drop_take`. But I really didn't use them so much, and I did know `i <=j` does hold when I use `take_take`, as you said. Now I think both my suggestions were useless, so please close them freely."},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2019-09-05T09:35:31Z","comment":"Now I think `drop_take` is useless, but there is a one-line proof of `take_drop` without using `drop_take`:\r\n```coq\r\nProof. by rewrite addnC; elim: s i j => // x s IHs [|i] [|j] /=. Qed.\r\n```"},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-09-20T19:40:28Z","comment":"Thanks for the short proof ! I'm updated my PR."},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-09-20T19:48:15Z","comment":"Unfortunately at the point of the script where `take_addn` is natural, I can't use `cat_take_drop` without closing and reopening the sequence section. Indeed  `cat_take_drop` only works with the section variable `n0`. Since the induction proof is not that complicated, I decided to stick with it."},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-09-20T19:51:39Z","comment":"Yes ! Thanks ."},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-09-20T19:56:23Z","comment":"Good trick ! However, I'd rather not use such a trick in a single place of the `mathcomp` code. I'll gladly use it provided the `mathcomp` guys agree to make it standard (i.e.: decide where to put your `duP` lemma.   "},{"author":"anton-trunov","file":"mathcomp/ssreflect/seq.v","date":"2019-09-21T08:14:22Z","comment":"Thank you. I'll leave a useful link for the future reference here: when PR #372 is merged we will get that duplicating view (although implemented in a different way) in `ssreflect` -- https://github.com/math-comp/math-comp/pull/372/files#diff-a6f6aa5ebb042f5ccd8936b292342547R172"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-10-24T19:28:31Z","comment":"Just a small comment, you either can write `apply: leq_trans i_le_j` (no parenthesis and no implicit) or else chain with the previous rewrite by rewriting `(leq_trans _ i_le_j)//` (untested)"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-10-24T19:28:55Z","comment":"please put spaces around the `-` symbol"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-10-24T19:30:27Z","comment":"I am not sure why you need to generalize `(j - i)`, without running the code, it seems to me that you could just prove the thing with:Proof.\r\n```coq\r\nProof. by move/subnKC<-; rewrite nseqD take_size_cat// size_nseq. Qed.\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-10-24T19:33:37Z","comment":"The preferred style with two subgoals is no bullet (indent the first subgoal and not the second). Additionally no need to make the detour by `-subn_eq0`, since comparison is convertible to the boolean counterpart of the equation you want to get, so you could solve the last subgoal\r\n`by rewrite  drop_oversize ?size_nseq// (eqP j_le_i).`\r\n(again not tested, sorry)"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-10-24T19:36:12Z","comment":"you could inline the cases in the elim by doing:\r\n```coq\r\nelim: k n H m => [|k IHk] [|n]//= H m; rewrite IHk.\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-10-24T19:37:10Z","comment":"In mathcomp `H` is reserved for names of groups, hypothesis should bare relevant names (here I guess `lt_something_somthing`)"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-10-24T19:37:26Z","comment":"also `by apply:` is abbreviated `exact:`"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-10-24T19:38:35Z","comment":"Since you do a case on n in both cases I guess you could do:\r\n```coq\r\nby elim: k m n => [|k IHk] m [|n]//=; rewrite ?addn0// IHk addSn addnS subSS.\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-10-24T19:40:01Z","comment":"This `ltnS` is maybe not necessary."},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-10-27T08:34:13Z","comment":"@CohenCyril True... Fixed the proof"},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-10-27T08:40:17Z","comment":"@CohenCyril \r\n\r\nThe abbreviation `exact:` for `by apply:` doesn't work if there is something following like in `by apply: take_oversize; rewrite size_iota.` Does it ?"},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-10-27T08:44:01Z","comment":"Just `move => /IHs ->` doesn't work..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-11-14T11:54:21Z","comment":"oh and I just realized `take_addn` should rather be named `takeD`"},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-11-14T23:04:54Z","comment":"This is not consistent with `rot_addn`. It should probably be renamed `rotD`, shouldn't it ?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-11-15T01:25:40Z","comment":"Mmmh, ok my mistake then... can you revert to the previous state? The change of suffix should be done in one go to answer #359 in order to maintain consistency of the whole library..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-11-15T09:10:18Z","comment":"for consistency within this file, I believe this one should be named `nseq_addn`"},{"author":"hivert","file":"mathcomp/ssreflect/seq.v","date":"2019-11-15T20:29:16Z","comment":"Done"}],"tags":[],"commits":[{"author":"hivert","committer":"hivert","hash":"7ea7cd6ef399cdb8ed4eb25485cde1a4d604943f","message":"More lemmas on seqs","date":"2019-11-15T20:28:20Z"}]}