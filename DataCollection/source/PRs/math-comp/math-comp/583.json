{"author":"CohenCyril","number":583,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":132,"deletions":5},{"file":"mathcomp/algebra/matrix.v","status":"M","additions":132,"deletions":5},{"file":"mathcomp/algebra/mxpoly.v","status":"M","additions":132,"deletions":5}],"state":"merged","open_date":"2020-09-08T14:40:31Z","update_date":"2020-10-22T01:31:28Z","discussion":[{"author":"CohenCyril","date":"2020-09-09T11:58:50Z","comment":"@thery, @affeldt-aist I find `commmx` particularily unreadable because of the sequence of three `m`, I just thought I could name it `mxcomm` instead. WDYT?\r\n\r\nEDIT: however, I use e.g. `mx1` and `1mx` to specify sides, how should I fix that? `mxcommx1` vs `mxcomm1x` or `mxcomm1r` vs `mxcomm1l` or  `mxcomm1` vs `mxcom1m`? Or should I just keep `commmx`?"},{"author":"thery","date":"2020-09-09T14:28:33Z","comment":"I'd prefer `comm_mx`  to `mxcomm`"},{"author":"affeldt-aist","date":"2020-09-10T01:03:17Z","comment":"> I'd prefer comm_mx to mxcomm\r\n\r\nIt also seems to me more homogeneous because there seems to be relatively few definitions that start with the `mx` prefix (`mxvec`, `mxtrace`) and even in those cases there seems to be a tendency to put `mx` as a suffix (e.g., Lemma `trace_mx11`)."},{"author":"CohenCyril","date":"2020-09-27T12:54:46Z","comment":"fixed @affeldt-aist @thery "},{"author":"thery","date":"2020-09-28T09:17:12Z","comment":"@CohenCyril do you want to squash your commit before I merge?"},{"author":"CohenCyril","date":"2020-09-28T12:24:07Z","comment":"@thery \r\n\r\n> @CohenCyril do you want to squash your commit before I merge?\r\n\r\ndone"},{"author":"thery","date":"2020-09-29T06:55:36Z","comment":"@affeldt-aist  ok to merge?"},{"author":"affeldt-aist","date":"2020-09-29T07:06:36Z","comment":"> @affeldt-aist ok to merge?\r\n\r\nAren't `scalar_mx_comm` and `comm_mxC` the same lemmas?\r\n"},{"author":"thery","date":"2020-09-29T07:09:09Z","comment":"@affeldt-aist  ok we wait for @CohenCyril reaction"},{"author":"affeldt-aist","date":"2020-09-29T07:12:38Z","comment":"> @affeldt-aist ok we wait for @CohenCyril reaction\r\n\r\nI asked the same question yesterday and was happy with the answer but know I wonder is this answer was really an answer to my question. Anyway, the code has changed in between... Sorry for the poor follow-up. :-(\r\n\r\n"},{"author":"CohenCyril","date":"2020-09-29T10:54:46Z","comment":"> > @affeldt-aist ok we wait for @CohenCyril reaction\r\n> \r\n> I asked the same question yesterday and was happy with the answer but know I wonder is this answer was really an answer to my question. Anyway, the code has changed in between... Sorry for the poor follow-up. :-(\r\n\r\nNo you are right, I misread your question...\r\n"},{"author":"CohenCyril","date":"2020-09-29T10:56:21Z","comment":"`scalar_mx_comm` and `comm_mxC` are exactly the same now! I guess `scalar_mx_comm` should be deprecated in favor of `comm_mxC`. Let me do that, and thanks for insisting."},{"author":"thery","date":"2020-10-21T19:26:04Z","comment":"@affeldt-aist  ok for merging?"},{"author":"affeldt-aist","date":"2020-10-22T01:31:09Z","comment":"> @affeldt-aist ok for merging?\r\n\r\nYes."}],"review_discussion":[{"author":"thery","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T16:06:53Z","comment":"This duplication is really sad. Is this really needed?"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T18:13:45Z","comment":"Unfortunately it is... until we have a structure for abelian categories..."},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T18:14:11Z","comment":"Did you mean the duplication between `GRing.comm` and `commmx` ?"},{"author":"thery","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T19:54:32Z","comment":"yep "},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T19:59:15Z","comment":"Then yes, `GRing.comm` is bound to (non trivial) rings, and matrices form a (non trivial) ring only when they are square and of manifestly positive size. However during proofs in endomorphism reduction, we take restrictions, which are matrices of size `#|V|` (with `V` a matrix space) and it becomes cumbersome to state commutation between restrictions, unless we relax the setting... and this relaxation corresponds to `commmx`..."},{"author":"thery","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T20:06:40Z","comment":"Is this really needed?\r\n"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T20:09:22Z","comment":"Do you see an alternative?"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T20:16:20Z","comment":"You can take a look [here](https://github.com/math-comp/math-comp/pull/207/files) to see the use cases (do not forget to expand collapsed code blocks)"},{"author":"thery","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T20:17:33Z","comment":"It is difficult to say without knowing the application, naively manipulating matrices of size #|V|.-1.+1 would not work?\r\n"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-08T20:22:01Z","comment":"> It is difficult to say without knowing the application, naively manipulating matrices of size #|V|.-1.+1 would not work?\r\n\r\nThis is how I started, but\r\n- since `#|V|` occurs in many matrix sizes and ordinals in the context, it triggers a dependent type  nightmare with sometimes a need for `castmx` and\r\n- since the subspace is not always assumed to be nonzero, it introduces spurious case analyses on `V`'s emptyness,\r\n\r\nAll of this introduces a nonnegligible overhead in already complicated proofs, and this overhead collapses when introducing  `commmx`."},{"author":"affeldt-aist","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-09T03:43:37Z","comment":"Shouldn't the reason for introducing `commmx` be documented in the header file? This question is likely to be asked again. I think that it is almost a matter of copy-pasting the explanations above and maybe add a link to the file of the development where the issue appears and is solved. "},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-09T11:43:01Z","comment":"Maybe not in the header, but where `commmx` is defined."},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-09-09T11:55:13Z","comment":"done"},{"author":"affeldt-aist","file":"mathcomp/algebra/matrix.v","date":"2020-09-28T01:41:05Z","comment":"```suggestion\r\nProof. exact: scalar_mx_comm. Qed.\r\n```"},{"author":"CohenCyril","file":"mathcomp/algebra/matrix.v","date":"2020-09-28T08:37:42Z","comment":"They are not exactly the same, on one side `mul_mx_scalar` is more general (non square matrices), and on the other side, `comm_mx` might be used as a head symbol for automatic proof search (or simply human readability purposes)."},{"author":"affeldt-aist","file":"mathcomp/algebra/matrix.v","date":"2020-09-28T14:00:11Z","comment":"Indeed, they are not the same lemmas, my bad.\r\n\r\nStill, there is one that is more general than the other. What you are saying is that the specialization with a head symbol might be useful for automation purposes but this is not used yet, right?"},{"author":"CohenCyril","file":"mathcomp/algebra/matrix.v","date":"2020-09-29T10:53:18Z","comment":"Yes, actually, a hint resolve might just do the trick... maybe it should be added preemptively..."},{"author":"CohenCyril","file":"mathcomp/algebra/matrix.v","date":"2020-09-29T11:21:28Z","comment":"Actually, my bad, the hint is there."},{"author":"affeldt-aist","file":"mathcomp/algebra/mxpoly.v","date":"2020-10-02T02:49:02Z","comment":"this could be\r\n`Definition horner_mx := horner_morph (comm_mxC^~A).`\r\nprovided that\r\n`Arguments comm_mxC {R n} a A`\r\nis added at the end of the `ComMatrix` section in `matrix.v`"},{"author":"CohenCyril","file":"mathcomp/algebra/mxpoly.v","date":"2020-10-21T14:10:36Z","comment":"ok! fixed"}],"tags":[],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"03cebcaaba3ec9f379b37659e8fc5556c6a9a1b6","message":"Adding matrix commutation and its theory","date":"2020-10-21T14:10:14Z"}]}