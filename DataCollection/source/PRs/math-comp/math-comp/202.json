{"author":"CohenCyril","number":202,"diff_summary":[{"file":"mathcomp/algebra/poly.v","status":"M","additions":111,"deletions":21},{"file":"mathcomp/algebra/ssralg.v","status":"M","additions":111,"deletions":21},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":111,"deletions":21},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":111,"deletions":21}],"state":"merged","open_date":"2018-07-04T14:29:48Z","update_date":"2018-07-19T16:59:10Z","discussion":[],"review_discussion":[{"author":"thery","file":"mathcomp/algebra/ssralg.v","date":"2018-07-11T13:20:57Z","comment":"case: s is sufficient"},{"author":"thery","file":"mathcomp/algebra/ssralg.v","date":"2018-07-11T13:22:11Z","comment":"Maybe this statement could be generalized to\r\nLemma lastr_eq  (s : seq R) (x y z : R) :   x != z -> y != z -> (last x s == z) = (last y s == z)."},{"author":"thery","file":"mathcomp/algebra/poly.v","date":"2018-07-11T13:27:38Z","comment":"why using induction?\r\nby  apply: eq_bigr => i _; rewrite coefZ.\r\n"},{"author":"thery","file":"mathcomp/algebra/poly.v","date":"2018-07-11T14:19:16Z","comment":"It seems reasonable to also add the mul version\r\nLemma size_mul_eq1 p q :\r\n  (size (p * q) == 1%N) = ((size p == 1%N) && (size q == 1%N)).\r\n\r\n"},{"author":"thery","file":"mathcomp/algebra/poly.v","date":"2018-07-11T14:20:10Z","comment":"Why restrict this to finType and not prove the general statement \r\n\r\nLemma size_prod_eq1 \r\n   (I : eqType) (s : seq I) (P : pred I)  (F : I -> {poly R}) :\r\n  (size (\\prod_(i <- s | P i) F i) == 1%N) = \r\n  (all (fun i => size (F i) == 1%N) [seq x <- s | P x])."},{"author":"thery","file":"mathcomp/algebra/poly.v","date":"2018-07-11T14:30:15Z","comment":"should be eqType"},{"author":"thery","file":"mathcomp/algebra/poly.v","date":"2018-07-11T14:44:26Z","comment":"is this new import comes only because you are using big_tnth?"},{"author":"CohenCyril","file":"mathcomp/algebra/ssralg.v","date":"2018-07-13T23:07:20Z","comment":"cool"},{"author":"CohenCyril","file":"mathcomp/algebra/ssralg.v","date":"2018-07-13T23:09:03Z","comment":"I am not sure it is desirable, as `1` is canonical for a `R : ringType`... However, maybe the theorem you mention has its place in `seq.v`"},{"author":"CohenCyril","file":"mathcomp/algebra/poly.v","date":"2018-07-13T23:12:14Z","comment":"yes"},{"author":"CohenCyril","file":"mathcomp/algebra/poly.v","date":"2018-07-14T00:25:34Z","comment":"The proof for `finType` is way easier and not really restrictive (see the proof of `size_prod_seq_eq1`) and the phrasing in terms of [forall (i | P i) ...] is slightly more elegant. I'm quite convinced we want to keep `size_prod_eq1` as such, but I am less sure about `size_prod_seq_eq1`"},{"author":"thery","file":"mathcomp/algebra/poly.v","date":"2018-07-14T08:37:44Z","comment":"Kind of weird you would expect size_mul_eq1 to help proving the summation theorem not the other way around."},{"author":"thery","file":"mathcomp/algebra/poly.v","date":"2018-07-14T08:40:53Z","comment":"Could we have just one theorem?"},{"author":"CohenCyril","file":"mathcomp/algebra/poly.v","date":"2018-07-14T18:45:36Z","comment":"I know, but since the proof is not done by induction... (maybe it would be shorter? I did not try)"},{"author":"thery","file":"mathcomp/algebra/poly.v","date":"2018-07-14T20:52:47Z","comment":"\r\nLemma size_mul_eq1 p q :\r\n  (size (p * q) == 1%N) = ((size p == 1%N) && (size q == 1%N)).\r\nProof.\r\ncase: (p =P 0) => [->|/eqP pNZ]; first by rewrite mul0r size_poly0.\r\ncase: (q =P 0) => [->|/eqP qNZ]; first by rewrite mulr0 size_poly0 andbF.\r\nrewrite size_mul //.\r\nby move: pNZ qNZ; rewrite -!size_poly_gt0; (do 2 case: size) => //= n [|[|]].\r\nQed.\r\n\r\nLemma size_prod_seq_eq1 (I : eqType) (s : seq I) (P : pred I) (F : I -> {poly R}) :\r\n  (size (\\prod_(i <- s | P i) F i) == 1%N) = (all [pred i | P i ==> (size (F i) == 1%N)] s).\r\nProof.\r\nelim: s => [|a s IH /=]; first by rewrite big_nil size_poly1.\r\nrewrite big_cons; case: (P a) => //=.\r\nby rewrite size_mul_eq1 IH.\r\nQed.\r\n\r\nbut maybe size_prod_seq_eq1 should be expressed as a reflect"},{"author":"CohenCyril","file":"mathcomp/algebra/ssralg.v","date":"2018-07-19T15:12:43Z","comment":"I added your last_eq to seq (for an eqType)"}],"tags":[],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"618c9229fecbf6f1e85035aa0033943dcd4f3464","message":"small generalizations in poly","date":"2018-07-04T12:35:54Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"ededc3786a779f26303e9545dc68bd6006b4aae4","message":"Laurent's simplifications","date":"2018-07-14T00:26:16Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"cf1b1123f42d4c8b179d2a5bba557dec94de1888","message":"updated proposition for big_prod_seq_eq1","date":"2018-07-14T00:36:54Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"a4f169772ace822087c9ab6aaac3f81982560b97","message":"poly_size_eq1 phrased with reflect + combinators","date":"2018-07-19T15:11:48Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"47831fdfcc1aa313b722232cebde2d3607f2e9b2","message":"last_eq for exhaustivity","date":"2018-07-19T15:11:59Z"}]}