{"author":"CohenCyril","number":611,"diff_summary":[],"state":"closed","open_date":"2020-10-09T17:38:12Z","update_date":"2020-10-10T15:06:14Z","discussion":[{"author":"pi8027","date":"2020-10-10T13:30:08Z","comment":"I will squash my suggestions and merge when CI passes."},{"author":"pi8027","date":"2020-10-10T15:41:54Z","comment":"Sorry I made a mistake on the merging process but this has been merged (not closed) actually.ðŸ˜”"}],"review_discussion":[{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-10-10T10:25:50Z","comment":"The following alternative seems to be slightly general:\r\n```suggestion\r\nLemma in_mask x m s :\r\n  uniq s -> x \\in mask m s = (x \\in s) && nth false m (index x s).\r\nProof.\r\nelim: s m => [|y s IHs] [|[] m]//= /andP[yNs ?]; rewrite ?in_cons ?IHs //=;\r\nby have [->|neq_xy] //= := eqVneq; rewrite ?andbF // (negPf yNs).\r\nQed.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-10-10T10:27:02Z","comment":"```suggestion\r\nLemma cons_subseq s1 s2 x : subseq (x :: s1) s2 -> subseq s1 s2.\r\nProof. exact/subseq_trans/subseq_cons. Qed.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-10-10T10:31:30Z","comment":"```suggestion\r\nLemma undup_subseq s : subseq (undup s) s.\r\nProof.\r\nelim: s => //= x s; case: (_ \\in _); last by rewrite eqxx.\r\nby case: (undup s) => //= y u; case: (_ == _) => //=; apply: cons_subseq.\r\nQed.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-10-10T10:44:09Z","comment":"This lemma can also be a corollary of `mask_subseq` and the following `undup_mask`.\r\n```coq\r\nLemma undup_mask (T : eqType) (s : seq T) : {m | undup s = mask m s}.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-10-10T11:47:03Z","comment":"```suggestion\r\nexists m; rewrite // -s1'_eq; apply: uniq_perm => // [|x].\r\n  by rewrite filter_uniq ?undup_uniq.\r\nby rewrite mem_filter mem_undup; have [/sub_s1_s2|] := boolP (x \\in s1).\r\n```"}],"tags":[],"commits":[]}