{"author":"affeldt-aist","number":732,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":17,"deletions":0},{"file":"mathcomp/algebra/ssrint.v","status":"M","additions":17,"deletions":0}],"state":"merged","open_date":"2021-03-29T08:16:43Z","update_date":"2021-05-28T08:31:46Z","discussion":[{"author":"pi8027","date":"2021-05-26T11:41:32Z","comment":"To make sure these lemmas are not misnamed, let's summon @CohenCyril anyway."}],"review_discussion":[{"author":"pi8027","file":"mathcomp/algebra/ssrint.v","date":"2021-05-04T10:58:17Z","comment":"```suggestion\r\nProof. by case: (intP m). Qed.\r\n```\r\nor\r\n```suggestion\r\nProof. by rewrite abszE ler_norm. Qed.\r\n```"},{"author":"pi8027","file":"mathcomp/algebra/ssrint.v","date":"2021-05-04T11:20:26Z","comment":"I think that the following lemma could substitute the use of the above lemmas:\r\n```coq\r\nGoal forall (R : numDomainType) (i : int), `|i|%:R = `|i|%:~R :> R.\r\nProof. by move=> R i; rewrite -abszE. Qed.\r\n```\r\nor, more generally\r\n```coq\r\nGoal forall (R : numDomainType) (x : R) (i : int), x *+ `|i| = x *~ `|i|.\r\nProof. by move=> R x i; rewrite -abszE. Qed.\r\n```"},{"author":"affeldt-aist","file":"mathcomp/algebra/ssrint.v","date":"2021-05-07T11:34:42Z","comment":"> I think that the following lemma could substitute the use of the above lemmas:\r\n\r\nI have been told that we could have them all. @CohenCyril \r\n`xyz_norm` lemmas have easy-to-search names, whereas the generic ones look like low-level manipulation of notations."},{"author":"pi8027","file":"mathcomp/algebra/ssrint.v","date":"2021-05-07T17:38:55Z","comment":"Another issue is that `` `|_| `` in these statements are not `GRing.norm` but `absz` and thus their current names seem wrong. I think we could copy almost any lemma involving `GRing.norm` that applies to `int` in this way, but I'm not sure if that's what we want."},{"author":"affeldt-aist","file":"mathcomp/algebra/ssrint.v","date":"2021-05-18T10:41:21Z","comment":"> Another issue is that `` `|_| `` in these statements are not `GRing.norm` but `absz` and\r\n> thus their current names seem wrong.\r\n\r\nIndeed, but the name `gez0_abs` is already taken :-/. To me, the \"_norm\" prefix looked appropriate\r\nfor a lemma intended to be used with a `numDomainType`.\r\n\r\n> I think we could copy almost any lemma involving `GRing.norm` that applies to `int` in this way,\r\n> but I'm not sure if that's what we want.\r\n\r\nIndeed. Rewriting with `gez0_abs` in a context with `numDomainType` still looks cumbersome to me though.\r\n\r\n\r\n"},{"author":"pi8027","file":"mathcomp/algebra/ssrint.v","date":"2021-05-26T03:13:03Z","comment":"If you point me out where you need these lemmas, I will try to propose a fix for that.\r\n\r\n@CohenCyril What do you think?"},{"author":"affeldt-aist","file":"mathcomp/algebra/ssrint.v","date":"2021-05-26T03:54:43Z","comment":"These lemmas are used in https://github.com/math-comp/analysis/blob/lebesgue_measure/theories/measure_wip.v.\r\n\r\nNB: they are part of code under refactoring."},{"author":"CohenCyril","file":"mathcomp/algebra/ssrint.v","date":"2021-05-26T12:05:52Z","comment":"In both these lemmas, the LHS is about `abs` not `norm`, moreover the name for the operation `*+` is `natmul` and the shape `mulr*n` or `mulrn*` is wildely use for lemmas about this (e.g. `mulrIn`) and for `%:R` it is `natr` (as in `natrD` etc), so I'd pick the following names: `mulr_absz` and `natr_absz`."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"affeldt-aist","committer":"affeldt-aist","hash":"8fe3f5512f623e4778d4351228f9f3062a5fd3c0","message":"add lemmas about absz\n\nCo-authored-by: Kazuhiko Sakaguchi <sakaguchi@coins.tsukuba.ac.jp>\n\nCo-authored-by: Cyril Cohen <Cyril.Cohen@inria.fr>","date":"2021-05-27T04:50:59Z"}]}