{"author":"jouvelot","number":854,"diff_summary":[{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":12,"deletions":0}],"state":"closed","open_date":"2022-02-26T13:11:35Z","update_date":"2022-02-28T08:52:29Z","discussion":[{"author":"jouvelot","date":"2022-02-27T09:15:14Z","comment":"For quantifier completeness, maybe we could add the related lemma:\r\n```\r\nLemma not_exists_eqP f1 f2 : reflect (~ (exists x, f1 x = f2 x)) (~~ [exists x, f1 x == f2 x]).\r\n```\r\nalthough I'm not sure there is a use case for it."},{"author":"proux01","date":"2022-02-27T10:21:26Z","comment":"In MathComp, we try when adding a lemma to also add lemmas of the same \"family\", so that would make sense, even if we don't see a use case (yet)."},{"author":"ggonthier","date":"2022-02-27T21:24:32Z","comment":"I'm a little curious about the use case for such lemmas. In principle, they should not be needed, as contrapositives for `reflect` are intended to be covered by the `introN` and `elimN` view hints, i.e., `move/eqfunP` should work the same as `move/not_eqfunP`, unless there's a double negation, as in `~ ~ (f1 =1 f2) -> ...` (was that the issue?). Direct application,\r\nas in `not_eqfunP (neq_fg : ~~ [forall x, f x == g x])` will also work, but the `elimN` hint must be given explicitly (as in `elimN eqfunP neq_fg`), since the default (coercion) is ` elimT`."},{"author":"jouvelot","date":"2022-02-28T08:40:56Z","comment":"Oh, great! I didn't know that reflection would also work \"past\" the negation operator. In this case, my PR can be discarded, unless we want to keep it for the double negation case, as mentioned by Georges. "},{"author":"proux01","date":"2022-02-28T08:52:29Z","comment":"Thanks!"}],"review_discussion":[{"author":"proux01","file":"mathcomp/ssreflect/fintype.v","date":"2022-02-26T17:00:21Z","comment":"\r\n\r\n```suggestion\r\nLemma not_eqfunP f1 f2 : reflect (~ (forall x, f1 x = f2 x)) (~~ [forall x, f1 x == f2 x]).\r\nProof.\r\napply/(iffP idP); first by apply: contraNnot => /eqfunP.\r\nby apply: contra_notN => /eqfunP.\r\nQed.\r\n```"}],"tags":[],"commits":[{"author":"jouvelot","committer":"jouvelot","hash":"c20dadcec6c3f18952b3c72bc4756aaf5ecbf82a","message":"Adding not_eqfunP","date":"2022-02-26T13:04:59Z"},{"author":"jouvelot","committer":"web-flow","hash":"a4bd50f3635424173a4dd8a9353b4e8578888fd0","message":"Update mathcomp/ssreflect/fintype.v\r\n\r\nShorter proof.\n\nCo-authored-by: Pierre Roux <pierre.roux@onera.fr>","date":"2022-02-26T17:32:04Z"},{"author":"jouvelot","committer":"jouvelot","hash":"ec956298adc154b830abf18ad99ba0e512b883bc","message":"Adding not_exists_eqP, for completeness.","date":"2022-02-27T12:48:51Z"}]}