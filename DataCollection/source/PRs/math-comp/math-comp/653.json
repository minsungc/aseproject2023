{"author":"pi8027","number":653,"diff_summary":[{"file":"mathcomp/algebra/vector.v","status":"M","additions":459,"deletions":230},{"file":"mathcomp/field/falgebra.v","status":"M","additions":459,"deletions":230}],"state":"open","open_date":"2020-11-19T05:04:49Z","update_date":"2023-01-11T09:14:46Z","discussion":[{"author":"pi8027","date":"2020-12-26T21:01:22Z","comment":"> *The first obstacle is that `falgebra.v` does not compile since both `prodv` and `capv` (`Order.meet`) distributes over `addv` (`Order.join`) and so `addv_addoid` (in `falgebra.v`) is now redundant with `join_addoid` (in `order.v`).*\r\n\r\nRedefining `Monoid.add_law` as follows would probably solve this issue. But, if there is a multiplication-like operator that distributes over two different addition-like operators, it does not work. Is there any plan to extend the `bigop` hierarchy? https://github.com/math-comp/math-comp/blob/ee410eb85f36f5e366f807207a7dee8f3e1bdf3a/mathcomp/ssreflect/bigop.v#L349-L354\r\n```coq\r\n(* We have to swap its parameter (multiplication) and the first projection    *)\r\n(* (addition) so that its canonical instances can be indexed by constants of  *)\r\n(* multiplication rather than addition.                                       *)\r\nStructure mul_distr_law (add : T -> T -> T) := MulDistrLaw {\r\n  mul_distr_operator : T -> T -> T;\r\n  (* The following two axioms are part of `mul_law`. A telescope cannot be used here anymore. *)\r\n  _ : left_zero idm mul_distr_operator;\r\n  _ : right_zero idm mul_distr_operator;\r\n\r\n  _ : left_distributive mul_distr_operator add;\r\n  _ : right_distributive mul_distr_operator add\r\n}.\r\n```"},{"author":"pi8027","date":"2021-02-10T17:30:33Z","comment":"> But, if there is a multiplication-like operator that distributes over two different addition-like operators, it does not work.\r\n\r\nI self answer this: `muln` distributes over `maxn` and `addn`, and so it does not work."}],"review_discussion":[{"author":"pi8027","file":"mathcomp/algebra/vector.v","date":"2020-11-19T08:51:06Z","comment":"It seems like the names `join_idP(l|r)` are transposed. Should be fixed in 1.12. @CohenCyril https://github.com/math-comp/math-comp/blob/0606b6bf22e258dc3b7cf440f10c108f785904b5/mathcomp/ssreflect/order.v#L3642-L3645"},{"author":"pi8027","file":"mathcomp/algebra/vector.v","date":"2020-11-19T08:55:02Z","comment":"If `_ \\in _` for linear subspaces is defined by using `Order.le` as in intervals, this proof can probably be `exact: lexI`. (I think it requires some more work.) https://github.com/math-comp/math-comp/blob/0606b6bf22e258dc3b7cf440f10c108f785904b5/mathcomp/algebra/interval.v#L493-L494"},{"author":"CohenCyril","file":"mathcomp/algebra/vector.v","date":"2020-11-23T09:14:45Z","comment":"Well spotted!"},{"author":"pi8027","file":"mathcomp/algebra/vector.v","date":"2020-11-23T09:22:47Z","comment":"See #671"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"needs: fix","description":"PR that needs to be fix (generally because reviewers asked to)."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"commits":[{"author":"pi8027","committer":"pi8027","hash":"025cec584564f8d5a79f5d784490e7bb0d48fe02","message":"[WIP] Make linear subspaces canonically a `tbLatticeType`","date":"2021-10-07T10:38:40Z"}]}