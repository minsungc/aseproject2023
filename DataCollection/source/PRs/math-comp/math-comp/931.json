{"author":"pPomCo","number":931,"diff_summary":[{"file":"mathcomp/ssreflect/bigop.v","status":"M","additions":389,"deletions":10},{"file":"mathcomp/ssreflect/eqtype.v","status":"M","additions":389,"deletions":10},{"file":"mathcomp/ssreflect/finfun.v","status":"M","additions":389,"deletions":10},{"file":"mathcomp/ssreflect/finset.v","status":"M","additions":389,"deletions":10},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":389,"deletions":10},{"file":"mathcomp/ssreflect/ssrfun.v","status":"M","additions":389,"deletions":10}],"state":"open","open_date":"2022-09-27T14:51:09Z","update_date":"2022-10-02T23:00:33Z","discussion":[{"author":"proux01","date":"2022-09-28T08:18:45Z","comment":"@pPomCo in order to help reviewing (but again, I can't review myself, being utterly unqualified here), you may want to point to/explain your use case for those new lemmas."},{"author":"erikmd","date":"2022-09-28T22:21:03Z","comment":"> @pPomCo in order to help reviewing (but again, I can't review myself, being utterly unqualified here), you may want to point to/explain your use case for those new lemmas.\r\n\r\nThanks @proux01 for all your comments!\r\n\r\nI believe a bit of history/motivation of a number of lemmas involved in this PR is lacking in the Coq comments, indeed:\r\n\r\nAll the lemmas related to `fprod` (finite product) were developed by me within this older contribution:\r\n\r\n```\r\n@inproceedings{DBLP:conf/types/Martin-DorelS16,\r\n  author    = {{\\'{E}}rik Martin{-}Dorel and\r\n               Sergei Soloviev},\r\n  editor    = {Silvia Ghilezan and\r\n               Herman Geuvers and\r\n               Jelena Ivetic},\r\n  title     = {A Formal Study of Boolean Games with Random Formulas as Payoff Functions},\r\n  booktitle = {22nd International Conference on Types for Proofs and Programs, {TYPES}\r\n               2016, May 23-26, 2016, Novi Sad, Serbia},\r\n  series    = {LIPIcs},\r\n  volume    = {97},\r\n  pages     = {14:1--14:22},\r\n  publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\r\n  year      = {2016},\r\n  url       = {https://doi.org/10.4230/LIPIcs.TYPES.2016.14},\r\n  doi       = {10.4230/LIPIcs.TYPES.2016.14},\r\n  timestamp = {Tue, 11 Feb 2020 15:52:14 +0100},\r\n  biburl    = {https://dblp.org/rec/conf/types/Martin-DorelS16.bib},\r\n  bibsource = {dblp computer science bibliography, https://dblp.org}\r\n}\r\n```\r\n\r\nin order to formalize the dependent product of finTypes, also endowed with a finType canonical structure.\r\n\r\nThe main definition is as follows:\r\n\r\n```coq\r\n(** Definition and cardinal of [fprod] := dependent product of finTypes *)\r\nRecord fprod : predArgType :=\r\n  { fprod_fun : {ffun I -> {i : I & T_ i}} ;\r\n    fprod_prop : [forall i : I, tag (fprod_fun i) == i] }.\r\n```\r\n\r\nand it straightforwardly follows (hopefully in a math-comp idiomatic way) the usual pencil-and-paper construction of dependent products in set theory for example, namely:\r\n\r\n[![https://en.wikipedia.org/wiki/Cartesian_product#Infinite_Cartesian_products](https://wikimedia.org/api/rest_v1/media/math/render/svg/24697ee110c11986a30ca7aa1c8eda0dd5be75f6)](https://en.wikipedia.org/wiki/Cartesian_product#Infinite_Cartesian_products)\r\n\r\nIt happened the review of the TYPES-2016-post-proceedings articles was very long (â‰¥2Y), and at the time we were focusing on submitting a PR for this `fprod` material in math-comp, we noticed Georges' PR https://github.com/math-comp/math-comp/pull/294 in April 2019, which thoroughly generalized non-dependent finfuns to dependent finfuns; making our PR idea useless at first sight.\r\n\r\nHowever, when working with @pPomCo on his [formalization of games of incomplete information](https://github.com/pPomCo/coq-belgames-csl2023/), the fact to have this alternative, layered definition of \"dependent finfuns\" seemed to make several proofs easier, relying on existing math-comp material.\r\n\r\nSo, one part of this PR #931 directly provides this materiel *(BTW @pPomCo we might want to add a `Co-Authored-By: _` clause in this PR, maybe)*\r\nAnd the second part amounts to general, albeit seemingly useful material for {finfun.v, finset.v, fintype.v} (so just to recall @proux01: the current use case is just coq-belgames, from file [general_lemmas.v](https://github.com/pPomCo/coq-belgames-csl2023/blob/main/theories/general_lemmas.v))"},{"author":"CohenCyril","date":"2022-10-02T13:37:16Z","comment":"All right, I did a first pass to see more clearly.\r\nI performed many renamings, simplifications and refactorings.\r\nDoing so I introduced\r\n- the predicate `tagged_with` which was left unnamed in your PR.\r\n- the mutual bijections `tag_with` / `untag_with` between `T_ i` and `{x in tagged_with T_ i}`\r\n- the mutual bijections `to_family_tagged_with` / `of_family_tagged_with` between `fprod T_` and `{x in family (tagged_with T_)`\r\n\r\nThe bijections I introduced suggest two alternative and more concise representations for `fprod` using preexisting ingredients:\r\n- `{x in family (tagged_with T_)}`\r\n- `{dffun forall i : I, {x in tagged_with T_ i}}`\r\nAnd many of my simplification take advantage of these.\r\n\r\nI'm not entirely sure of the purpose of lemma `big_fprod_dep` but it looks like the type of `Q` should be changed (so that the correpondance between `fprod` and other representations is always used in the same direction) but I'm not sure, I must see usecases.\r\n\r\nI also left some succint comments questioning the use of some lemmas.\r\n"},{"author":"erikmd","date":"2022-10-02T23:00:33Z","comment":"Thanks a lot, @CohenCyril !\r\n\r\n@pPomCo and I will take a look at your refined version and try to address your commented questions."}],"review_discussion":[],"tags":[],"commits":[{"author":"pPomCo","committer":"pPomCo","hash":"04e824d3790414ff344e5f309383b6ed4150153a","message":"Contribution to ssreflect/fin*","date":"2022-09-27T14:48:31Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"c8fee749a229025c35b60dca1efdd59d6c06575c","message":"refactoring and simplifications","date":"2022-10-02T14:07:27Z"}]}