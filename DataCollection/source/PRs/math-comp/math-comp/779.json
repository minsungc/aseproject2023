{"author":"ed-hermoreyes","number":779,"diff_summary":[],"state":"closed","open_date":"2021-09-02T10:13:20Z","update_date":"2022-06-24T15:32:06Z","discussion":[{"author":"chdoc","date":"2021-09-02T10:23:34Z","comment":"Can you name one or two of the developers you talked to, as they might be good candidates for code reviews?"},{"author":"ed-hermoreyes","date":"2021-09-02T11:47:13Z","comment":"We talked to Cyril Cohen."},{"author":"mgbedmar","date":"2021-09-06T11:48:45Z","comment":"We've made a general cleanup following your guidelines and we believe the code could be ready now. Let us know if you have any other suggestions."},{"author":"mgbedmar","date":"2021-09-08T13:28:52Z","comment":"> Also, please do not merge 'master' into PRs, instead please crate pull requests from branches that you can freely modify (i.e., usually something other than master) and then just rebase onto master, squashing intermediate commits in the process.\r\n\r\nSorry about that. We're not sure of completely understanding the protocol you just described. Can you confirm that the following steps would fix the current PR?\r\n\r\n1. Create another branch `ed-hermoreyes:subchain` with all the commits we've made until now.\r\n2. Re-establish the state of `ed-hermoreyes:master` to be as `math-comp:master`. \r\n3. Modify this PR so that it goes \"into `math-comp:master` from `ed-hermoreyes:subchain`\".\r\n4. Rebase squashing all our commits to `ed-hermoreyes:subchain` into a single one.\r\n5. Do 4 each time we request review.\r\n\r\n"},{"author":"chdoc","date":"2021-09-08T13:44:11Z","comment":"> Sorry about that. We're not sure of completely understanding the protocol you just described. Can you confirm that the following steps would fix the current PR?\r\n\r\nNo problem. I think this looks like a sound process to fix the current PR, although I do not know how to change the \"from\" branch for an existing PR in GitHub. \r\n\r\nTo be on the safe side, it may be a good idea to implement the changes I proposed before rebase squashing everything. Also, it's not necessary to squash for every review cycle, doing this once when things are (almost) stable can make the the review process more understandable. In the meantime, it may be necessary to rebase (without squashing) in order to resolve conflicts and make the CI run.  In any case, I would suggest only pushing commits you actually want to be reviewed, as every push triggers an email to every member of the core team and a lengthy CI pipeline. "},{"author":"chdoc","date":"2021-09-10T13:01:37Z","comment":"As it comes to the lemma statements and proofs,I'm much happier now than I was initally. And we're down from ~560 to ~330 lines. I will try to make another detailed pass over the weekend. \r\n\r\nI'm still not entirely happy about the naming of things. In particular the double use of `prefix` and `suffix` as indicators for patterns as well as the names of definitions. This leads to confusing names like `prefix_prefix` and `suffix_suffix`. Also, unlike `prefix` and `suffix`, the name `subchain` does not speak to me. Is there maybe an alternative name? \r\n\r\n@CohenCyril Do you maybe have some suggestions?"},{"author":"mgbedmar","date":"2021-09-10T14:41:08Z","comment":"I agree with your objections about the names, we simply didn't find anything better. I even remember that Cyril didn't like `subchain` either. If we keep `prefix` and `suffix` for the names of the predicates, then, following grammar conventions, `subchain` could be renamed as `infix`. But then I have no solution for the double use of `prefix` and `suffix`."},{"author":"chdoc","date":"2021-09-10T15:03:29Z","comment":">  If we keep `prefix` and `suffix` for the names of the predicates, then, following grammar conventions, `subchain` could be renamed as `infix`. \r\n\r\nI won't deny that this idea had already crossed my mind. And, after reading about the grammatical term, I'm actually starting to like it better than `subchain`. :thinking: "},{"author":"chdoc","date":"2021-09-12T18:06:20Z","comment":"I made a pass over the proofs, trying to find some synergies by reordering the lemmas. I hope you're fine with me committing directly to the branch of this PR (another reason why it's preferable to use something other than `master` for the source). I think there are more simplifications to be found. \r\n\r\nI removed `subchain_prefixP`, since the RHS of the disjunction subsumes the LHS. \r\n\r\nI still think that some lemmas can be removed, because they are merely compositions (by transitivity) of other lemmas, even though they are not necessarily proved that way currently. Maybe you can make another pass with this in mind. \r\n\r\n"},{"author":"mgbedmar","date":"2021-09-13T15:03:54Z","comment":"We've been looking at the code. The changes you introduced are nice. Now, to be honest we don't have a clear idea of what the criterion is to decide what lemmas should be kept and which should be removed. The ones that have proofs that are merely compositions of two lemmas are `prefix_subchain` and `suffix_subchain`, but they also exist for `subseq`, so it doesn't feel quite right to remove them. Maybe you can give more concrete directives? Or just remove what you see fit, it's totally okay for you to make changes on the repo."},{"author":"CohenCyril","date":"2021-09-14T09:32:00Z","comment":"> , although I do not know how to change the \"from\" branch for an existing PR in GitHub.\r\n\r\nThe author of the PR might be able to do it using the \"edit\" button next to the title of the PR."},{"author":"chdoc","date":"2021-09-14T10:46:48Z","comment":"On my own PRs, I can only change the target (base) branch but not the source branch. "},{"author":"CohenCyril","date":"2021-10-18T10:51:11Z","comment":"I have several rephrasings to suggest. I will post in the next few days."},{"author":"gares","date":"2021-12-17T12:54:49Z","comment":"> I have several rephrasings to suggest. I will post in the next few days.\r\n\r\nDid you forge to submit the review @CohenCyril ?"},{"author":"chdoc","date":"2022-01-05T16:30:16Z","comment":"@CohenCyril Ping!?"},{"author":"CohenCyril","date":"2022-01-10T10:23:33Z","comment":"@chdoc wrote:\r\n> @CohenCyril Ping!?\r\n\r\n@gares wrote:\r\n> Did you forge to submit the review @CohenCyril ?\r\n\r\nI did a big refactoring in f852b67. It needs some polishing, double-checking and CHANGELOG update.\r\n@ed-hermoreyes @mgbedmar if you are up for it please proceed, otherwise I will do it on my own time, at some point."},{"author":"chdoc","date":"2022-01-10T15:42:12Z","comment":"Thanks for getting back to this @CohenCyril . For now I will wait for the authors to comment or for you to make a cleanup pass. "},{"author":"CohenCyril","date":"2022-03-18T09:17:21Z","comment":"@mgbedmar @ed-hermoreyes any update?"},{"author":"mgbedmar","date":"2022-03-29T09:11:40Z","comment":"We have updated the CHANGELOG and made sure everything was on place. For us this is done, let us know if more changes are needed."},{"author":"proux01","date":"2022-06-08T07:40:41Z","comment":"@chdoc what's the status of this?"},{"author":"proux01","date":"2022-06-15T08:33:28Z","comment":"Will merge next week if no further comments."},{"author":"pi8027","date":"2022-06-15T08:34:52Z","comment":"Shouldn't this PR close #621?"},{"author":"proux01","date":"2022-06-24T15:48:53Z","comment":"Sorry, I messed up with this master branch and can no longer push anything on the original [ed-hermoreyes:master](https://github.com/ed-hermoreyes/math-comp) branch, hence reopen the PR. I'm reopening as https://github.com/math-comp/math-comp/pull/902"},{"author":"proux01","date":"2022-06-25T09:43:31Z","comment":"Merged as #902 , sorry again for the mess."}],"review_discussion":[{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-02T14:03:10Z","comment":"I think it is preferable to use the `if s2 is y::s2' then _ else _` or `if s2 isn't  y::s2' then _ else _` syntax to make these definitions more compact. Likewise for the other definitions. "},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-02T14:14:34Z","comment":"```suggestion\r\nLemma prefix_cons s1 s2 x y :\r\n  prefix (x :: s1) (y :: s2) = (x == y) && prefix s1 s2.\r\nProof.\r\n   (* TODO *)\r\nQed.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-02T15:30:25Z","comment":"```suggestion\r\nProof. exact: prefix_refl. Qed.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-02T15:31:40Z","comment":"(analogous to `prefix_cons`)"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-02T15:59:20Z","comment":"```suggestion\r\nelim: s1 s2 => [|y s2 IHs2] [|x s1] /=.\r\n- by constructor; exists [::].\r\n- by constructor; exists (x :: s1). \r\n- by constructor; case.\r\napply/(iffP idP); first by have [-> /IHs2 [s2' ->]|//] := eqVneq x y; exists s2'.\r\nby move => [s2' [<- ->]]; rewrite eqxx prefix_prefix.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-02T16:02:38Z","comment":"```suggestion\r\n  reflect (exists s2' : seq T, s2 = s1 ++ s2')  (prefix s1 s2).\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-02T16:09:18Z","comment":"```suggestion\r\nLemma suffixP s1 s2 :\r\n  reflect (exists s2' : seq T, s2 = s2' ++ s1) (suffix s1 s2).\r\nProof.\r\napply: (iffP (prefixP _ _)) => [[s2' rev_s2]|[s2' ->]]; exists (rev s2').\r\n  by rewrite -[s2]revK rev_s2 rev_cat revK.\r\nby rewrite rev_cat.\r\nQed.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T12:22:36Z","comment":"```suggestion\r\n  if s2 isn't y :: s2' then s1 == [::] else\r\n  if s1 isn't x :: s1' then true else\r\n    (x == y) && prefix s1' s2'.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T12:22:49Z","comment":"```suggestion\r\nDefinition suffix (s1 s2 : seq T) := prefix (rev s1) (rev s2).\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T12:23:53Z","comment":"```suggestion\r\n  if s2 is y :: s2' then prefix s1 s2 || subchain s1 s2' else s1 == [::].\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T12:27:11Z","comment":"This lemma corresponds directly to the recursive definition of subchain, so if anything there should be a lemma:\r\n```coq\r\nLemma subchain_cons s1 s2 x : \r\n  subchain s1 (x :: s2) = prefix s1 (x :: s2) || subchain s1 s2.\r\nProof. by []. Qed.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T14:17:05Z","comment":"This should follow trivially with subchainP, which can be proved just as simply by not relying on this lemma."},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T14:18:39Z","comment":"```suggestion\r\nelim: s2 s1 => /= [s1|y s2' IHs2 s1].\r\n- apply: (iffP idP) => [/eqP ->|[s] [s'] E]; first by exists [::], [::].\r\n  have: @nilp T [::] by [].\r\n  by rewrite E !cat_nilp => /and3P[/nilP-> /nilP-> /nilP->].\r\napply: (iffP idP).\r\n- case/orP; first by move/prefixP => -[s ->]; exists [::],s.\r\n  by move/IHs2 => [s [s' ->]]; exists (y::s), s'. \r\nmove => [s [s']]. case: s => //= [|x u]. \r\ncase: s1 => //= ? u [<- ->];by rewrite eqxx prefix_prefix.\r\nby move => [-> E]; rewrite (introT (IHs2 _)) ?orbT // E; exists u, s'.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T14:20:57Z","comment":"```suggestion\r\nProof. by rewrite -{2}[s](cat_take_drop i) prefix_prefix. Qed.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T20:06:19Z","comment":"```suggestion\r\nProof. by elim: s1 s2 => [[]//|x s IHs s2 /=]; rewrite eqxx IHs.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T20:18:46Z","comment":"```suggestion\r\nLemma prefix_singleton s x : \r\n  prefix s [:: x] = (s == [::]) || (s == [:: x]). \r\nProof. by case: s => //= y s; rewrite prefixseq0 eqseq_cons. Qed.\r\n\r\nLemma subchain_singleton s x : \r\n  subchain s [:: x] = (s == [::]) || (s == [:: x]).\r\nProof. by rewrite /= prefix_singleton orbC orbA orbb. Qed.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T20:22:55Z","comment":"I think these can be removed, as they are not needed to prove `take_prefix` and `drop_suffix`"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-09-06T20:57:21Z","comment":"```suggestion\r\nFixpoint subchain_index s1 s2 :=\r\n  if prefix s1 s2 then 0 \r\n  else if s2 is y :: s2' then (subchain_index s1 s2').+1 else 1.\r\n```\r\nI think it is very unfortunate that the result `size s2` can be either the index of the empty subchain or the absence of any valid index. I suggest to change the definition as above, using the unambiguous `(size s2).+1` to signal \"no valid index\". This changes the lemmas slightly, mostly making them simpler (more expressive). For instance: \r\n```coq\r\nLemma subchain_indexseq0 s : subchain_index s [::] = (s != [::]).\r\nProof. by rewrite /= prefixseq0; case (_ == _). Qed.\r\n\r\nLemma subchain_index_ltn s1 s2 : \r\n  subchain s1 s2 = (subchain_index s1 s2 < (size s2).+1).\r\nProof. \r\nelim: s2 s1 => [|x s2' IH /=] s1; first by rewrite /= prefixseq0; case s1.\r\nby case: (prefix _ _); rewrite IH !ltnS.\r\nQed.\r\n```"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[]}