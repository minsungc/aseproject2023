{"author":"ggonthier","number":294,"diff_summary":[{"file":".gitlab-ci.yml","status":"M","additions":328,"deletions":161},{"file":"ChangeLog","status":"M","additions":328,"deletions":161},{"file":"mathcomp/character/character.v","status":"M","additions":328,"deletions":161},{"file":"mathcomp/character/integral_char.v","status":"M","additions":328,"deletions":161},{"file":"mathcomp/solvable/burnside_app.v","status":"M","additions":328,"deletions":161},{"file":"mathcomp/ssreflect/binomial.v","status":"M","additions":328,"deletions":161},{"file":"mathcomp/ssreflect/finfun.v","status":"M","additions":328,"deletions":161}],"state":"merged","open_date":"2019-03-04T14:38:46Z","update_date":"2019-04-01T17:55:27Z","discussion":[{"author":"ggonthier","date":"2019-03-05T08:24:28Z","comment":"There may be a problem with the way the CI pipeline is set up, since math-comp/odd-order#11, which fixes the Miller-pattern issue in odd-order, does not seem to be taken into account by the CI pipeline, even though it was merged five hours before the pipeline was restarted."},{"author":"ejgallego","date":"2019-03-05T08:42:12Z","comment":"With the current setup things are a hard to debug, I'd suggest we improve two things in the pipeline:\r\n- output configuration variables `printenv -0 | sort -z | tr '\\0' '\\n'`\r\n- output the commit hash of the contrib after checkout."},{"author":"erikmd","date":"2019-03-05T11:35:18Z","comment":"@ejgallego \r\n\r\n> output the commit hash of the contrib after checkout.\r\n\r\nIndeed! @ggonthier could you add a commit in this PR with the following change?\r\n\r\nAdding the line `- git rev-parse --verify HEAD` after that line:\r\nhttps://github.com/math-comp/math-comp/blob/e5ff94165ab722bfb77d4437a58d49aacc81683d/.gitlab-ci.yml#L112\r\n\r\nHowever I'd vote against the other suggestion by Emilio:\r\n\r\n> output configuration variables `printenv -0 | sort -z | tr '\\0' '\\n'`\r\n\r\nbecause there is some sensitive information (e.g. private tokens) among the environment variables of the build.\r\n\r\nHowever, we could of course add something like this:\r\n\r\n```\r\n- echo COQ_VERSION=${COQ_VERSION}\r\n- echo CONTRIB_URL=${CONTRIB_URL}\r\n- echo CONTRIB_VERSION=${CONTRIB_VERSION}  \r\n```"},{"author":"ejgallego","date":"2019-03-05T11:42:13Z","comment":"> there is some sensitive information (e.g. private tokens) among the environment variables of the build.\r\n\r\nOh indeed, we had this problem in the Coq setup, however note that you are somehow vulnerable if regular users can run code [which is the case here]\r\n\r\nWhat we do now in Coq is to have specific deploy jobs with a restricted `environment`, so deploy will only run in under very controlled conditions. I do indeed suggest that jobs which run \"user code\" should never ever run under an environment with protected variables."},{"author":"erikmd","date":"2019-03-05T11:47:26Z","comment":"Hi, I was not enough specific in my previous comment, yes the math-comp CI setup relies on protected variables, so if some user specifically opens a PR with `printenv`, no private info will be disclosed (unless the PR is merged in master of course)\n\nLe 5 mars 2019 12:42:14 GMT+01:00, \"Emilio Jesús Gallego Arias\" <notifications@github.com> a écrit :\n>> there is some sensitive information (e.g. private tokens) among the\n>environment variables of the build.\n>\n>Oh indeed, we had this problem in the Coq setup, however note that you\n>are somehow vulnerable if regular users can trigger that.\n>\n>What we do now in Coq is to have specific deploy jobs with a restricted\n>`environment`, so deploy will only run in under very controlled\n>conditions. I do indeed suggest that jobs which run \"user code\" should\n>never ever run under an environment with protected variables.\n>\n>-- \n>You are receiving this because you commented.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/math-comp/math-comp/pull/294#issuecomment-469649603\n\n-- \nEnvoyé de mon appareil Android avec K-9 Mail. Veuillez excuser ma brièveté."},{"author":"ejgallego","date":"2019-03-05T12:01:26Z","comment":"Hi @erikmd ,\r\n\r\n> unless the PR is merged in master of course\r\n\r\nindeed I was aware of this part of the setup, but even so, if jobs inheriting from `.ci` do have private variables this is still a big security risk as they are running external code.\r\n\r\nFor example I could take over lemmas overloading and dump the vars from there.\r\n\r\nSo I suggest indeed you do restrict the private variables using `environment` and then adding `printenv` to `.ci` jobs should not be a problem. Jobs that run in the protected env should never ever run any user code [only push artifacts]."},{"author":"erikmd","date":"2019-03-05T12:05:47Z","comment":"Makes sense indeed, thanks @ejgallego! The math-comp CI jobs that clone external repos need not deploying anything...\n\nLe 5 mars 2019 13:01:28 GMT+01:00, \"Emilio Jesús Gallego Arias\" <notifications@github.com> a écrit :\n>Hi @erikmd ,\n>\n>> unless the PR is merged in master of course\n>\n>indeed I was aware of this part of the setup, but even so, if jobs\n>inheriting from `.ci` do have private variables this is still a big\n>security risk as they are running external code.\n>\n>For example I could take over lemmas overloading and dump the vars from\n>there.\n>\n>So I suggest indeed you do restrict the private variables using\n>`environment` and then adding `printenv` to `.ci` jobs should not be a\n>problem. Jobs that run in the protected env should never ever run any\n>user code [only push artifacts].\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/math-comp/math-comp/pull/294#issuecomment-469654667\n\n-- \nEnvoyé de mon appareil Android avec K-9 Mail. Veuillez excuser ma brièveté."},{"author":"ejgallego","date":"2019-03-05T12:12:52Z","comment":"Cool! Let us know if you need help with that, in Coq we had great problems with the secret variables but I think we got the setup right finally.\r\n\r\nThe main invariant is that jobs that declare `enviroment` must be treated as trusted code, and thus need careful review. In jobs that don't set the restricted environment up, people can add whatever they want."},{"author":"CohenCyril","date":"2019-03-21T00:15:12Z","comment":"@ggonthier I plan to finish the review by March 29th."},{"author":"pi8027","date":"2019-03-25T21:17:35Z","comment":"Note: my modification of fintype and finfun have been successfully rebased on top of this PR without losing positivity and structurally decreasing property. So I can use finfuns as arrays whose type of elements depends on indices. https://github.com/pi8027/math-comp/tree/modified-fintype-experimental\r\n> Georges : the proposed modification may not be compatible with the way the new version of finfun works now."},{"author":"ggonthier","date":"2019-03-26T13:01:27Z","comment":"@pi8027 : you are correct, there will be a way to combine this implementation with constant-time indexing of `finTypes`. I think that there are better ways of doing this that what you've experimented with, however, and also that we should put some thought in making the transport reduce, if we want this to be useful for computing directly with matrices. All in all, that change should be a different PR."},{"author":"CohenCyril","date":"2019-03-29T12:09:51Z","comment":"Dear @ggonthier could you please rebase this branch on top of master?"},{"author":"CohenCyril","date":"2019-03-30T20:17:46Z","comment":"Dear @ggonthier there are unresolved merge remaining in the PR hence the failure...\r\nAlso, the best practice is to rebase, I did it with my own copy and resolved the conflict: I can push it if you want. Rebasing was made harder because successive commits of this PR rewrite the same piece of code... I believe this would be a justification to squash them, unless there is a specific reason why you would keep them separate?"},{"author":"ggonthier","date":"2019-03-30T22:42:22Z","comment":"@CohenCyril I've corrected the merge - I'd somehow missed the spurious conflicts in `finfun` for the one in `ChangeLog`. I do plan to squash and merge, but since several of the commits either explore different options, or work around Coq issues, it seemed preferable to keep them distinct during the discussion, and for future reference when the Coq issues are settled and we move to eliminate the work arounds."},{"author":"CohenCyril","date":"2019-04-01T14:54:29Z","comment":"@ggonthier I finally read it completely. I believe the final result would be good to merge.\r\n\r\nOne should:\r\n- [ ] open an issue on mathcomp to remind ourselves that once https://github.com/coq/coq/pull/9690 reaches two released versions of Coq, we should remove the duplication between `dffun` and `ffun`.\r\n- [ ] open an issue or a PR about generalizing `_ =1 _` to the dependent case.\r\n- [x] at least squash 162cb3f67c20d4587a2e57738ffb5b3dbb63565c with the previous commit.\r\n\r\nBut ideally:\r\n- [x] squash/fixup at least 00cadb6aad408447739cddb86dddaf1d98e7b1be, 47254118ac8a28eb1108bcf85cca9c1a1bfa9571 and 6e853635171990d48bed1f129423019860ac3102\r\n- [x] and rebase so that the history looks like (roughly, with more squashable things inside brackets) :\r\n850862dc6475bd48524a294651400df4b5b7ecf3 (master) -- df346ace8c0b5eb61f44b09abcebc193d8a0d6ac -- [ a9edbe27928858540c375c972d709df094c65d69 -- 1296cbd3d39ae04ab1ade2383f2396febb934c13 -- e64978dea1b796df8c4d827bca0fae0279b63724 ] -- 80846bf9d528e378fc2e6d809273aae676ecf964 -- cac497b28f88e8f95a42ee60e3593defcc196bad.\r\n(if so 162cb3f67c20d4587a2e57738ffb5b3dbb63565c should be dealt with during the rebase)\r\n\r\nPlease tell me if you think this is too much..."},{"author":"CohenCyril","date":"2019-04-01T15:28:43Z","comment":"@ggonthier I rebased and did the squashing I mentionned in the last part of my comment. Please tell me if you are ok with it: https://github.com/CohenCyril/math-comp/tree/dependent-positive-finfun (the git diff is empty except for some spurious spaces and one typo)\r\nIf you agree I will force-push it here and merge.\r\n\r\n~~PS: I also noticed I \"stole\" a commit (3099ccafa9c93ebdbdf653edca811f644070903b) from you... I will fix that ASAP.~~"},{"author":"ggonthier","date":"2019-04-01T15:39:04Z","comment":"   @CohenCyril everything looks fine to me now; you're clear to push, and merge after CI passes."},{"author":"ejgallego","date":"2019-04-01T19:26:38Z","comment":"That seems to have created havoc in at least fcsl-pcm https://gitlab.com/coq/coq/-/jobs/188314263"},{"author":"ggonthier","date":"2019-04-01T22:39:41Z","comment":"@ejgallego this is a documented incompatibility: due to the change of representation `fgraph` is no longer be a field accessor, nor a `subType` projector. The failing lemma at the end of `heap.v` can no longer be proved by brute force `destruct`, nor as an instance of `val_inj` (as would have been the proper way to prove it). It can now easily be proved as `can_inj fgraphK`, but if one a proof compatible with all versions, this should be used:\r\n```\r\nby move=> eq_r12; apply/ffunP=> x; rewrite -[x]enum_rankK -!tnth_fgraph eq_r12.\r\n```\r\n@anton-trunov would either be acceptable? Alternatively, we could reinstate the `fgraph` `subType` structure on non-dependent finfuns, so `val_inj` could be used throughout. This would have to be deprecated, though, as the `eqType` structure will not be compatible."}],"review_discussion":[{"author":"CohenCyril","file":"mathcomp/ssreflect/finfun.v","date":"2019-03-21T00:13:23Z","comment":"This test should be moved to a test suite (which disapeared with the integration of ssr in coq, but we should restore it for this purpose, and a few other)"},{"author":"ggonthier","file":"mathcomp/ssreflect/finfun.v","date":"2019-03-21T14:26:26Z","comment":"I'd rather keep this in the file, because it's a working demonstration of the use case mentioned in the header - I ought to have written \"example\" rather than \"test\" in the comment.\r\n  We could legitimately include this code in a test suite, however, as the MathComp library will probably not make use of this feature in the near future, and we ought to be alerted if some change in the Coq positivity or guard rules breaks it."},{"author":"CohenCyril","file":"mathcomp/ssreflect/finfun.v","date":"2019-03-21T15:12:55Z","comment":"Do you mean we should push it to Coq test-suite instead?"},{"author":"ggonthier","file":"mathcomp/ssreflect/finfun.v","date":"2019-03-21T15:43:42Z","comment":"Not really, because you'd need to copy all the `finfun` code and documentation to that test, so Coq devs would understand it. Plus, they might be tempted to fix the test without fixing `finfun`, if there is some string reason for changing the guard rules. If it's in `mathcomp`, which is in the CI anyway, at least we'll be notified."},{"author":"CohenCyril","file":"mathcomp/ssreflect/finfun.v","date":"2019-03-21T18:09:47Z","comment":"I guess I did not understand the \"however\" in\r\n> We could legitimately include this code in a test suite, however, [...]"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"ggonthier","committer":"CohenCyril","hash":"cd958350ffb6836a4e9e02716fc19b1a1d1177cd","message":"Improve CI head tracking\n\nAs per @ejgallego ’s suggestion.","date":"2019-04-01T15:03:44Z"},{"author":"ggonthier","committer":"CohenCyril","hash":"c2c3ceae8a2eabed33028bfff306c5664d0b42f2","message":"Making {fun ...} structural and extending it to dependent functions\n\nConstruct `finfun_of` directly from a bespoke indexed inductive type,\nwhich both makes it structurally positive (and therefore usable as a\ncontainer in an `Inductive` definition), and accommodates naturally\ndependent functions.\n  This is still WIP, because this PR exposed a serious shortcoming of\nthe Coq unification algorithm’s implantation of Miller patterns. This\nbug defeats the inference of `Canonical` structures for `{ffun S -> T}`\nwhen the instances are defined in the dependent case!\n   This causes unmanageable regressions starting in `matrix.v`, so I\nhave not been able to check for any impact past that. I’m pushing this\ncommit so that the Coq issue may be addressed.\n\nMade `fun_of_fin` structurally decreasing: Changed the primitive\naccessor of `finfun_of` from `tfgraph` to the `Funclass` coercion\n`fun_of_fin`. This will make it possible to define recursive functions\non inductive types built using finite functions.  While`tfgraph` is\nstill useful to transport the tuple canonical structures to\n`finfun_of`, it is no longer central to the theory so its role has\nbeen reduced.","date":"2019-04-01T15:42:28Z"},{"author":"ggonthier","committer":"CohenCyril","hash":"8a62590dd06803fca626f429271f9ad578f06a96","message":"Expand sample use as container in Inductive\n\n  Clarified that the sample use provided is an example rather than a\nmisplaced unit test.\n  Added the definition of generic recursors to the examples, for both\nnon-dependent and dependent use cases.","date":"2019-04-01T15:42:37Z"},{"author":"ggonthier","committer":"CohenCyril","hash":"c5763504783b51bb5def88c82f55a0b99ebf9d67","message":"Compatibility fix for Coq issue coq/#9663\n\nCoq currently fails to resolve Miller patterns against open evars\n(issue coq/#9663), in particular it fails to unify `T -> ?R` with\n`forall x : T, ?dR x` even when `?dR` does not have `x` in its context.\nAs a result canonical structures and constructor notations for the\nnew generalised dependent `finfun`s fail for the non-dependent use\ncases, which is an unacceptable regression.\nThis commit mitigates the problem by specialising the canonical\ninstances and most of the constructor notation to the non-dependent\ncase, and introducing an alias of the `finfun_of` type that has\ncanonical instances for the dependent case, to allow experimentation\nwith that feature.\nWith this fix the whole `MathComp` library compiles, with a few\nminor changes. The change in `integral_char` fixes a performance issue\nthat appears to be the consequence of insufficient locking of both\n`finfun_eqType` and `cfIirr`; this will be explored in a further commit.","date":"2019-04-01T15:42:37Z"},{"author":"ggonthier","committer":"CohenCyril","hash":"4d59fa0c4fb418b17394fa53fa8e8ee3f52d840f","message":"locking definitions to address `integral.v` divergence\n\nLine 426 in `integral.v` diverged to over 40 minutes with the new\n`finfun.v`, because matching `mod_Iirr` to `quo_Iirr` goes into\nexponential backtracking. This is currently averted by limiting the\nrepetition of `mod_IirrE` in this `rewrite` line.\nMaking `finfun` mixing opaque brings this down to 40 seconds, and\nlocking `cfIirr` to a tractable 0.15 seconds, hopefully improving the\ninstances. This line also takes 47 seconds to execute in the master\nbranch, so this is likely an undetected Coq performance regression.","date":"2019-04-01T15:42:37Z"},{"author":"ggonthier","committer":"CohenCyril","hash":"0f785cb80a555ce4109255819becb953a968cc8c","message":"ChangeLog update\n\nDescribe extension and warn about incompatibilities.","date":"2019-04-01T15:42:37Z"}]}