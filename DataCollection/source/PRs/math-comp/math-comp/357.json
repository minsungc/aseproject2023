{"author":"lucienRakotomalala","number":357,"diff_summary":[{"file":"mathcomp/algebra/dioid.v","status":"A","additions":1689,"deletions":0},{"file":"mathcomp/algebra/kleene.v","status":"A","additions":1689,"deletions":0}],"state":"closed","open_date":"2019-06-07T09:29:43Z","update_date":"2020-08-26T10:26:05Z","discussion":[{"author":"amahboubi","date":"2019-07-05T11:26:33Z","comment":"Dear @lucienRakotomalala, many thanks for submitting this PR! This work is really nice and looks definitely interesting. However, I think that, at least for now, it would be more relevant to have it as an independent library. Indeed, this is not just an addition to an existing component but rather a proposal for a new component. We would need thus need to evaluate and discuss the relevance of the inclusion first. This is the standard procedure, even for our own (= dev's) contribution. See e.g. the `finmap` project in the organization."},{"author":"amahboubi","date":"2019-07-05T11:33:27Z","comment":"I have nonetheless written a short review with a few style comments on your code. Do not hesitate to ask more questions here, or on [gitter](https://gitter.im/math-comp) or [Discourse](https://coq.discourse.group/).\r\n\r\nFor instance, the two questions you have in the header would fit well in Discourse I think. \r\n\r\n @hivert, main author of the [Coq-Combi](https://github.com/hivert/Coq-Combi) project, might also give feedback about this topic.\r\n\r\n"},{"author":"hivert","date":"2019-07-05T20:46:51Z","comment":"@amahboubi, I'm not sure I've that much to say here. It would be worth to have semi-ring inserted in the algebraic hierarchy if it does not impact performance. Then, part of the matrix theory could be generalized to semirings (everything which doesn't use the minus sign...). \r\n\r\nOn the other hand I'm not familiar with the dioid theory, but a lot of Kleene's result seems be some higher level abstraction of the corresponding result in language theory.   @lucienRakotomalala could your formalized result be applied/reused for some language and automata theory ?\r\n\r\nAnyway: congratulation for the substantial work with a lot of new algebraic structures. This is for me a place where mathcomp is not so easy to extend ! "},{"author":"pi8027","date":"2019-07-24T08:54:16Z","comment":"Hello @lucienRakotomalala,\r\n\r\n> rings are semirings, should we formalize it?\r\n\r\nI would say yes (if we merge this PR to MathComp). So I think that `ringType` should be redefined to inherit `semiRingType`, and moreover, `dioidType` should inherit `porderType` of #270; however, this change makes the join of `porderType` and `semiRingType` ambiguous: `dioidType` or `numDomainType`. So we need to introduce an intermediate structure of \"partially-ordered semirings\" to disambiguate it, but this kind of changes could introduce new performance issues...\r\nAnyway, if you need some help to do those changes, I would like to provide it. But I'm not sure when I can do it."},{"author":"proux01","date":"2019-07-26T15:07:51Z","comment":"@amahboubi thanks for your answer and the detailed comments, @lucienRakotomalala is looking at them.\r\n\r\n> I think that, at least for now, it would be more relevant to have it as an independent library. Indeed, this is not just an addition to an existing component but rather a proposal for a new component. We would need thus need to evaluate and discuss the relevance of the inclusion first. This is the standard procedure, even for our own (= dev's) contribution. See e.g. the finmap project in the organization.\r\n\r\nSure, how would you recommend to proceed in practice ? Close this PR and put the code somewhere else ?\r\n\r\n> Do not hesitate to ask more questions here, or on gitter or Discourse.\r\nFor instance, the two questions you have in the header would fit well in Discourse I think.\r\n\r\nThanks for the advice, we should indeed launch these discussions there.\r\n\r\n@hivert thanks for your answer\r\n> It would be worth to have semi-ring inserted in the algebraic hierarchy if it does not impact performance. Then, part of the matrix theory could be generalized to semirings (everything which doesn't use the minus sign...).\r\n\r\nI guess the only way to know is to try. Do you have an idea of what could be a good benchmark to test the performance impact ? just compiling mathcomp-algebra ?\r\n\r\n> could your formalized result be applied/reused for some language and automata theory ?\r\n\r\nI guess so, although the user would have to assume an eqType/choiceType over (possibly infinite) languages.\r\n\r\n> Anyway: congratulation for the substantial work with a lot of new algebraic structures. This is for me a place where mathcomp is not so easy to extend !\r\n\r\nThe mathcomp book was of great help, as well as this lesson from @CohenCyril http://www-sop.inria.fr/teams/marelle/advanced-coq-16-17/exercise5.html\r\n\r\n@pi8027 \r\n> if you need some help to do those changes, I would like to provide it. But I'm not sure when I can do it.\r\n\r\nThanks for the offer. I'd like to prototype that first. I'll then ask you if I have questions. But don't expect anything before at least next month.\r\n"},{"author":"affeldt-aist","date":"2020-03-25T14:58:02Z","comment":"The release managers for release 1.11.0 are thinking about closing this PR but would like to make sure that the code is still available, e.g., as a opam package. Can you confirm? @proux01 @lucienRakotomalala "},{"author":"thery","date":"2020-08-26T10:26:05Z","comment":"@proux01 @lucienRakotomalala  we have discussed this pull request at the \r\nlast math-comp meeting https://github.com/math-comp/math-comp/wiki/Minutes-August-25-2020\r\nUnfortunately we are not in a situation where we can merge this pull request in the main library\r\neasily. So we are going to close this pull request. We are really sorry about that. \r\nIf you have any question how to turn your code into an external library, don't hesitate to contact us.\r\n"},{"author":"proux01","date":"2020-08-27T14:38:33Z","comment":"Sorry for not responding. I agree this is not mergeable and had to be closed.\r\n\r\nThe main obstacles seem to be:\r\n* addressing above comments (should be easy)\r\n* lack of semirings in `ssralg` (they seem to be a common example for [Hierarchy Builder](https://github.com/math-comp/hierarchy-builder), what are the plans here wrt Mathcomp?)\r\n* lack of complete lattices (since 1.11 we have lattices (binary meet and joins) in `order` which is great but complete lattices (meet and joins over arbitrary sets) would need to be added)\r\n\r\nI also agree this should be distributed separately, hence these two questions:\r\n* how should it be named: `coq-dioids` or `coq-mathcomp-dioids` (@CohenCyril may have an opinion here)\r\n* where should it be hosted: in the [math-comp](https://github.com/math-comp) github organization? anywhere else?\r\n"},{"author":"CohenCyril","date":"2020-08-27T16:30:33Z","comment":"> Sorry for not responding. I agree this is not mergeable and had to be closed.\r\n> \r\n> The main obstacles seem to be:\r\n> \r\n> * addressing above comments (should be easy)\r\n> * lack of semirings in `ssralg` (they seem to be a common example for [Hierarchy Builder](https://github.com/math-comp/hierarchy-builder), what are the plans here wrt Mathcomp?)\r\n\r\nAbout HB and mathcomp, there are long terms plans that must not be blocking any contribution, since for the time being we cannot predict if and when math-comp would rely on HB.\r\n\r\nHowever meanwhile, the addition of an intermediate structure between `eqType` and `fieldExtType` might critically impact the compiltation type of some files (or at least I believe this was the case in the past). One could put that to the test in recent versions of Coq though...\r\n\r\n> * lack of complete lattices (since 1.11 we have lattices (binary meet and joins) in `order` which is great but complete lattices (meet and joins over arbitrary sets) would need to be added)\r\n> \r\n> I also agree this should be distributed separately, hence these two questions:\r\n> \r\n> * how should it be named: `coq-dioids` or `coq-mathcomp-dioids` (@CohenCyril may have an opinion here)\r\n\r\nWe [discussed this in June](https://github.com/math-comp/math-comp/wiki/Minutes-June-16-2020) and there was no consensus. The objective criterion that made it to the minutes is the hosting by the `math-comp` organization (cf next bullet). In my own opinion, every library that depends on mathcomp and brings a library component in mathcomp style should be prefixed by `mathcomp`.\r\n\r\n> * where should it be hosted: in the [math-comp](https://github.com/math-comp) github organization? anywhere else?\r\n\r\nSure we would be glad to open a new repository in the mathcomp organization, we actually made that clearer in [the last meeting actually](https://github.com/math-comp/math-comp/wiki/Minutes-August-25-2020).\r\n\r\n"},{"author":"pi8027","date":"2020-08-27T17:13:55Z","comment":"> However meanwhile, the addition of an intermediate structure between `eqType` and `fieldExtType` might critically impact the compiltation type of some files (or at least I believe this was the case in the past). One could put that to the test in recent versions of Coq though...\r\n\r\nThis issue has been observed in https://github.com/math-comp/math-comp/pull/270#issuecomment-482152101."},{"author":"proux01","date":"2020-08-28T11:44:08Z","comment":"Thanks for the detailed explanations!\r\n\r\n> Sure we would be glad to open a new repository in the mathcomp organization, we actually made that clearer in the last meeting actually.\r\n\r\nGoing this way would be fine for me, I can then maintain it and publish opam packages.\r\n"},{"author":"CohenCyril","date":"2020-08-28T13:56:01Z","comment":"I can open it and name it with the name of your choice (`diod` and make you maintainer)"},{"author":"CohenCyril","date":"2020-08-28T13:57:29Z","comment":"Would you be ok to try to keep it as close as possible to math-comp coding conventions?"},{"author":"proux01","date":"2020-08-28T14:02:10Z","comment":"`dioid` is fine. I'll address Assia's comments above and try to do my best t adhere the coding conventions but feel free to criticize, I'm not perfectly used to them."},{"author":"CohenCyril","date":"2020-08-28T14:07:04Z","comment":"It would be a great opportunity for us to improve https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md"},{"author":"CohenCyril","date":"2020-08-28T14:11:25Z","comment":"https://github.com/math-comp/dioid @proux01 you are admin of this repository now."},{"author":"proux01","date":"2020-08-31T15:39:19Z","comment":"Thanks!\r\n* code imported\r\n* I revised all proofs for coding conventions, according to comments above and the contribution guide\r\n(there may still remain some strange things though, feel free to point them)\r\n* CI set up\r\n* OPAM packages published (`coq-mathcomp-dioid.0.1` and `coq-mathcomp-dioid.dev`)\r\n\r\nI still have to make dioids a `porderType` as pointed above by @pi8027 "}],"review_discussion":[{"author":"amahboubi","file":"mathcomp/algebra/dioid.v","date":"2019-07-05T11:10:40Z","comment":"Why do you feel the need to change the done tactic?"},{"author":"amahboubi","file":"mathcomp/algebra/kleene.v","date":"2019-07-05T11:11:59Z","comment":"The style of  this proof (and of others below) is not idiomatic. E.g. please use the ssreflect bullets and chain tactics so as to take better benefit of the 80 character long line. Ideally, one meaningful proof step takes a single line."},{"author":"amahboubi","file":"mathcomp/algebra/kleene.v","date":"2019-07-05T11:14:06Z","comment":"replace `by apply` by `exact:`"},{"author":"amahboubi","file":"mathcomp/algebra/kleene.v","date":"2019-07-05T11:14:26Z","comment":"Please use `apply:` instead of `apply`"},{"author":"amahboubi","file":"mathcomp/algebra/kleene.v","date":"2019-07-05T11:17:17Z","comment":"This would be better written:\r\n\r\n`elim=> [ | i iHk]; first by rewrite set_add_0`\r\n\r\nSeveral things happen here:\r\n- `move=> i; elim: i` is just `elim`\r\n- `first by` is used to remove one indentation\r\n- the final simplification switch `/=' is superseded by the prefix `by`."},{"author":"amahboubi","file":"mathcomp/algebra/kleene.v","date":"2019-07-05T11:18:11Z","comment":"Deal with the shorted proof first, i.e. do not use `last first` in this case."},{"author":"amahboubi","file":"mathcomp/algebra/kleene.v","date":"2019-07-05T11:19:36Z","comment":"You probably want two lemmas here, one for each component of the conjunction. Otherwise users of the result will always have to break the statement into its two components before starting using it."}],"tags":[],"commits":[{"hash":"7a3384cc6c5ac2cb3cf30771852c89a4916b2fe3","message":"Algebraic structure of dioid","date":"2019-06-07T09:26:41Z"}]}