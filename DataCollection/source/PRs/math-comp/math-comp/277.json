{"author":"MrSet","number":277,"diff_summary":[{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":16,"deletions":0}],"state":"merged","open_date":"2019-02-05T14:04:44Z","update_date":"2019-02-07T19:58:32Z","discussion":[],"review_discussion":[{"author":"ggonthier","file":"mathcomp/ssreflect/seq.v","date":"2019-02-05T14:41:16Z","comment":"This is a good addition, but\r\n   - The variable names should match the rest of `seq.v`, namely `s`, `t` for sequences, and `a`, `b` for predicates.\r\n   - As in the proof of `map_filter` right above it, it's better to simplify before the `elimination` introductions, as this allows to rewrite the induction on-the-fly.\r\n   - `by` should be at the start of a proof line (except in `have` ... `by` ...), and here we have a one-liner.\r\nSuggested code\r\n```\r\nLemma pmap_cat s t : pmap (s ++ t) = pmap s ++ pmap t.\r\nProof. by elim: s => //= x s ->; case/f: x. Qed.\r\n```"},{"author":"ggonthier","file":"mathcomp/ssreflect/seq.v","date":"2019-02-05T17:14:09Z","comment":"Also a good contribution, but which similarly need to be adapted to the conventions of the library:\r\n  - As above, the variable names are wrong (`x` is used for sequence elements in this file).\r\n  - MathComp _never_ uses the Coq default `Hxxx` for naming assumptions or proof steps, because `H` is a conventional name for mathematical objects such as groups.\r\n  - The script following a `have`, `suffices` or `wlog` paragraph is always outdented, never bulleted.\r\n  - The corresponding lemma for `map` is called `perm_map`, so this one should be called `perm_pmap`.\r\n  - The auxiliary equation is a combination of `count_map` and `mapS_filter` so it doesn't need to be proved by induction or case analysis, and indeed doesn't really need to be established as a substep. Indeed by using the lemmas for `count` rather than `perm_eq` then entire proof reduces to a single rewrite.\r\nSuggested code:\r\n```\r\nLemma perm_pmap s t : perm_eq s t -> perm_eq (pmap f s) (pmap f t).\r\nProof.\r\nmove/perm_eqP=> eq_st; apply/perm_eqP=> a; pose oa := oapp a false.\r\nby rewrite -!(count_map Some oa) !pmapS_filter !count_map !count_filter.\r\nQed.\r\n```\r\nOne can get marginally shorter proofs by using either of the `perm_eq` bespoke induction principles, and leveraging you `pmap_cat` identity:\r\n```\r\nmove=> eq_st; apply/perm_eqP=> a; apply/catCA_perm_subst: s t eq_st => s1 s2 s3.\r\nby rewrite !pmap_cat !count_cat addnCA.\r\n```\r\nor, without even using `perm_eqP`\r\n```\r\nmove/catCA_perm_ind=> eq_st; pattern t; apply: eq_st => //{t} t1 t2 t3.\r\nby move/perm_eqPl->; rewrite !pmap_cat perm_catCA.\r\n```\r\nHere the `pattern t` is needed to effect second-order matching of the induction principle for `t` (the vanilla Coq `apply eq_st` does this, but MathComp avoids making use of that quirk). We should be using `elim:` here (as in, `elim/eq_st: (t) => ...`) but this triggers an `Anomaly` in the `ssreflect` plugin for some reason. `perm_catCA` rewrites on the _left_ of a `perm_eq`, by convention, and the `move/perm_eqlP->` is the shortest work around this.\r\nFinally, one can also base this proof on the injectivity of `Some`:\r\n```\r\nmove=> eq_st; apply/(perm_map_inj (@Some_inj _)); rewrite !pmapS_filter.\r\nexact/perm_map/perm_filter.\r\n```\r\nbut this requires adding a `perm_map_inj` lemma at the end of `Section EqMap` (which would be a good idea anyway):\r\n```\r\nLemma perm_map_inj s t : perm_eq (map f s) (map f t) -> perm_eq s t.\r\nProof.\r\nmove/perm_eqP=> Est; apply/allP=> x _ /=.\r\nhave Dx: pred1 x =1 preim f (pred1 (f x)) by move=> y /=; rewrite inj_eq.\r\nby rewrite !(eq_count Dx) -!count_map Est.\r\nQed.\r\n```\r\nThe implicit argument to `Some_inj` has to be given explicitly because `Some_inj` has uncharacteristically 3 maximal implicits, in order to make it easier to use as a view."},{"author":"MrSet","file":"mathcomp/ssreflect/seq.v","date":"2019-02-05T19:06:24Z","comment":"Thank you for the very useful feedback and suggestions. \r\n\r\nI like the idea of basing the proof on the injectivity of `Some`, so if you do not mind will I add `perm_map_inj` to this pull request as well. "},{"author":"MrSet","file":"mathcomp/ssreflect/seq.v","date":"2019-02-05T19:10:36Z","comment":"Thank you for the very useful feedback."}],"tags":[],"commits":[{"author":"MrSet","committer":"MrSet","hash":"0caa81bf59d827abfeceda3e8a3c74ef7c53463d","message":"pmap_cat and pmap_perm added","date":"2019-02-05T13:57:08Z"},{"author":"MrSet","committer":"MrSet","hash":"ebd2297dadfb9f87d58df72e0193683be9debaef","message":"Merge https://github.com/math-comp/math-comp into seq-lemmas","date":"2019-02-05T18:41:42Z"},{"author":"MrSet","committer":"MrSet","hash":"57818497d8c0bccb1a7aa6da466b4af1aa6f3749","message":"updated variable names and perm_map_inj","date":"2019-02-05T19:08:09Z"}]}