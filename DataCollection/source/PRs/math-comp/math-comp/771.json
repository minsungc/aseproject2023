{"author":"eupp","number":771,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":297,"deletions":6},{"file":"mathcomp/ssreflect/bigop.v","status":"M","additions":297,"deletions":6},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":297,"deletions":6},{"file":"mathcomp/ssreflect/tuple.v","status":"M","additions":297,"deletions":6}],"state":"merged","open_date":"2021-07-23T15:56:50Z","update_date":"2021-10-13T11:43:30Z","discussion":[{"author":"eupp","date":"2021-08-02T09:28:17Z","comment":"@CohenCyril thank you for the thoughtful review. \r\n\r\nI've added `card_bseq` lemma. The proof of this lemma utilizes injectivity of `bseq_tagged_tuple` and `tagged_tuple_bseq`. \r\nThe proof of infectivity for `tagged_tuple_bseq` is a bit clumsy because of dependent pairs' trickery and might be a subject to simplification. \r\n\r\nRegarding the usefulness of `bseq_of_seq`. I took it from `infotheo`, so it is better to ask @affeldt-aist whether we should keep it. \r\nNevertheless, I've added lemma `size_bseq_of_seq : size (bseq_of_seq n s) <= size s.`\r\n\r\nI've rechecked other lemmas for `n.-tuple T`. It looks like these lemmas are mostly about `thead`, `tnth`, etc. \r\nThese definitions do not have equivalents for `n.-bseq T`, because bounded sequences have weaker guarantees on the length of sequences, in particular, they do not guarantee non-emptiness.\r\n\r\nI've also updated the docs and changelog. \r\n"}],"review_discussion":[{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-07-27T09:02:25Z","comment":"The canonical declaration subsumes the previous lemma:\r\n```coq\r\nCanonical bseq_subType := Eval hnf in [subType for bseqval].\r\n\r\nLemma bseqval_inj : injective bseqval. Proof. exact: val_inj. Qed.\r\n```\r\n\r\nSo one can simply omit it.\r\n"},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-07-27T09:35:04Z","comment":"```suggestion\r\napply/leq_trans; last exact/(size_bseq bs).\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-07-27T13:29:54Z","comment":"```suggestion\r\nDefinition bseq_of_seq n T (s : seq T) : n.-bseq T := insubd [bseq] s.\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-07-27T13:32:50Z","comment":"This can be replaced by an encoding to tagged tuples:\r\n```suggestion\r\nDefinition bseq_tagged_tuple {n T} (s : n.-bseq T) : {k : 'I_n.+1 & k.-tuple T} :=\r\n  Tagged _ (in_tuple s : (Ordinal (size_bseq s : size s < n.+1)).-tuple _).\r\n\r\nDefinition tagged_tuple_bseq {n T} (t : {k : 'I_n.+1 & k.-tuple T}) : n.-bseq T :=\r\n  widen_bseq (leq_ord (tag t)) (tagged t).\r\n  \r\nLemma bseq_tagged_tupleK n T : cancel (@bseq_tagged_tuple n T) tagged_tuple_bseq.\r\nProof. by move=> t; apply/val_inj. Qed.\r\n\r\nDefinition bseq_finMixin n (T : finType) :=\r\n  CanFinMixin (@bseq_tagged_tupleK n T).\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-07-27T13:42:33Z","comment":"Add some theory of `widen_bseq`:\r\n```suggestion\r\n\r\nDefinition widen_bseq m n T (lemn : m <= n) (bs : m.-bseq T) : n.-bseq T := \r\n  @Bseq n T bs (leq_trans (size_bseq bs) lemn).\r\n\r\nLemma widen_bseq_id n T (lenn : n <= n) (t : n.-bseq T) : widen_bseq lenn t = t.\r\nProof. exact: val_inj. Qed.\r\n\r\nLemma widen_bseqK m n T (lemn : m <= n) (lenm : n <= m) :\r\n   cancel (@widen_bseq m n T lemn) (widen_bseq lenm).\r\nProof. by move=> t; apply: val_inj. Qed.\r\n\r\nLemma widen_bseq_trans m n p T (lemn : m <= n) (lenp : n <= p) (t : m.-bseq T) :\r\n  widen_bseq (leq_trans lemn lenp) t = widen_bseq lenp (widen_bseq lemn t).\r\nProof. exact/val_inj. Qed.\r\n\r\nDefinition in_bseq T (s : seq T) : (size s).-bseq T := Bseq (leqnn (size s)).\r\n\r\nLemma in_nseqE T s : in_bseq s = s :> seq T. Proof. by []. Qed.\r\n\r\nLemma widen_bseq_in_bseq n T (t : n.-bseq T) :\r\n  widen_bseq (size_bseq t) (in_bseq t) = t.\r\nProof. exact: val_inj. Qed.\r\n```\r\n"},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-07-27T13:50:26Z","comment":"Not sure how useful this is though. If there is no lemmas / theorems about it, maybe it should just be removed."},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-08-30T09:32:41Z","comment":"I think it's healthy to distinguish between sequences and bounded sequences through the variable name."},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-08-30T09:33:17Z","comment":"Why are you suggesting to use `Arguments` rather than `{}` inside the definition? "},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-08-30T09:34:02Z","comment":"I am reluctant using `destruct`, I have an even shorter proof using refine that I will push soon."},{"author":"affeldt-aist","file":"CHANGELOG_UNRELEASED.md","date":"2021-08-30T09:36:22Z","comment":"isn't it the \"do not edit former entries\" recommendation?"},{"author":"affeldt-aist","file":"mathcomp/ssreflect/tuple.v","date":"2021-08-30T09:38:32Z","comment":"so do I, but the shorter identifier in this section helps preserving the 80 characters limit"},{"author":"affeldt-aist","file":"mathcomp/ssreflect/tuple.v","date":"2021-08-30T09:38:52Z","comment":"this was also for the 80 characters limit"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2021-08-30T10:31:53Z","comment":"Yes, ok"},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-08-30T10:33:07Z","comment":"Ah, ok, maybe we can pick a single letter which is not `s`, though... like `w` for example? ~~BTW, I am wondering if a good name for `bseq` could be `word`...~~ nop... sorry a word is fixed size not bounded size..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/tuple.v","date":"2021-08-31T09:27:01Z","comment":"I find it interesting that unification with a trivial match on `k_eq` is smarter than `case: _ / k_eq`. The failure of the latter looks legit to me since the occurrence selection is non trivial. The fact that `destruct k_eq` works surprises me though... @gares If you have any insight on this, I'd like to know. Also I was wondering were we were wrt the automatic selection of unifiable occurences of an index, is it implemented for `destruct` and that would be why it works (or is it just an accident)?"},{"author":"gares","file":"mathcomp/ssreflect/tuple.v","date":"2021-10-06T08:16:54Z","comment":"It is not an accident. I guess it is wired into type inference and not the tactic."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"eupp","committer":"CohenCyril","hash":"0b476ebe3a173da0d4cb948ad6480db09535cd42","message":"bounded sequences","date":"2021-10-10T10:21:18Z"},{"author":"eupp","committer":"CohenCyril","hash":"0bc2b5ab9ee321989101a4cf6ca5f05674d31676","message":"apply suggestions from code review\n\nCo-authored-by: Cyril Cohen <CohenCyril@users.noreply.github.com>","date":"2021-10-10T10:21:18Z"},{"author":"eupp","committer":"CohenCyril","hash":"fe3e1b74e82bc9df4604385e60e6872815539369","message":"more lemmas about bseq, update doc and changelog\n\n- card_bseq lemma\n- remove bseqval_inj","date":"2021-10-10T10:21:18Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"3d32b849e985d6a3fb24583471ec959fcc193a08","message":"namechange + typo + changelog\n\n- bseq_of_seq becomes insub_bseq\n- expanded changelog entry\n- fixing typo in_nseqE -> in_bseqE\n- nitpicking","date":"2021-10-10T10:21:18Z"},{"author":"affeldt-aist","committer":"CohenCyril","hash":"c9ea737825fe9026d3acf6ac5678771bd4f30a34","message":"nitpicking","date":"2021-10-10T10:21:18Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"d8da21c4a1b7d89e66ae0fe54e46fad022f5a2e7","message":"shorter proof of `tagged_tuple_bseqK`","date":"2021-10-10T10:21:18Z"}]}