{"author":"jouvelot","number":860,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":38,"deletions":9},{"file":"mathcomp/algebra/ssralg.v","status":"M","additions":38,"deletions":9},{"file":"mathcomp/ssreflect/bigop.v","status":"M","additions":38,"deletions":9}],"state":"merged","open_date":"2022-03-07T17:55:24Z","update_date":"2022-03-19T22:25:14Z","discussion":[{"author":"proux01","date":"2022-03-17T16:55:05Z","comment":"So, looks we are all set, I'll squash and merge by the end of the week if there is no further comment."}],"review_discussion":[{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-15T15:38:55Z","comment":"* Nothing depends on ssralg here, so this could be put at the end of bigop.v.\r\n* When adding definitions, like `shrink` and `empty`, they should be documented. But since they are used in only one lemma, maybe we just don't need specific definitions.\r\n* it seems the `shrink` hypothesis can be simplified to `∀ k, n < k < m → op (f n k) (f k k.+1) = f n k.+1` which leads to the following simplified proof\r\n```suggestion\r\nLemma telescope_op R (idx : R) (op : Monoid.law idx) f n m :\r\n  n <= m -> (n = m -> f n n = idx) ->\r\n  (forall k, n < k < m -> op (f n k) (f k k.+1) = f n k.+1) ->\r\n  \\big[op/idx]_(n <= i < m) f i i.+1 = f n m.\r\nProof.\r\nhave [ltnm _ _ | // | <- _ ->//] := ltngtP; last by rewrite big_geq.\r\nelim: m ltnm => [//| m IHm]; rewrite ltnS.\r\nhave [ltnm _ s | // | <- _ _] := ltngtP; last by rewrite big_nat1.\r\nhave snm : forall q, n < q < m -> op (f n q) (f q q.+1) = f n q.+1.\r\n  by move=> q /andP[nq /leqW qm]; apply/s/andP.\r\nby rewrite big_nat_recr 1?ltnW// IHm// s// ltnm/=.\r\nQed.\r\nArguments telescope_op [R idx op] f [n m].\r\n```\r\n(there might be a way to get rid of the Monoid hypothesis, but I didn't manage that)"},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-15T15:39:27Z","comment":"This should also be in bigop.\r\nIt' also seems inverted to me.\r\n```suggestion\r\nLemma telescope_sumn n m f :\r\n  n <= m -> {in [pred i | n <= i <= m] &, {homo f : x y / x <= y}} ->\r\n  \\sum_(n <= k < m) (f k.+1 - f k) = f m - f n.\r\nProof.\r\nmove=> lenm homof; set f' := fun i j => f j - f i.\r\nrewrite -/(f' n m); under eq_bigr => k _ do rewrite -/(f' k k.+1).\r\napply: telescope_op; rewrite /f' ?subnn//= => k /andP[ltnk ltkm].\r\nrewrite addnBAC ?subnKC//; apply: homof;\r\n  rewrite ?inE ?(ltnW ltnk) ?(ltnW ltkm)//.\r\n- by rewrite (leqW (ltnW ltnk)).\r\n- by rewrite leqnn (ltnW (ltn_trans ltnk ltkm)).\r\nQed.\r\n```"},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-15T16:43:46Z","comment":"The new proof should be shorter\r\n```suggestion\r\nmove=> lenm; apply: (telescope_op (fun i j => f j - f i) lenm (fun=> subrr _)).\r\nby move=> k _ /=; rewrite addrCA addrAC subrr add0r.\r\n```"},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-15T16:44:21Z","comment":"New proof should be shorter\r\n```suggestion\r\nmove=> allu ltnm; rewrite (telescope_op (fun i j => f i / f j) (ltnW ltnm))//.\r\n  by move=> /eqP; rewrite ltn_eqF.\r\nmove=> k nkm; rewrite /= mulrA divrK//; exact: allu.\r\n```\r\n"},{"author":"jouvelot","file":"mathcomp/algebra/ssralg.v","date":"2022-03-15T19:49:09Z","comment":"Thanks for taking the time looking at this PR and all the suggestions :) \r\n\r\n> * Nothing depends on ssralg here, so this could be put at the end of bigop.v.\r\n\r\nI agree that the code should be dispatched somewhere else. I put it in one place, where its application was more meaningful, to make looking at it easier at the start of the review process. Should have I done the dispatch right from the start?\r\n\r\n> * When adding definitions, like `shrink` and `empty`, they should be documented. But since they are used in only one lemma, maybe we just don't need specific definitions.\r\n\r\nIt seems to me that `shrink` could, if deemed sufficiently useful, actually be put in nat.v. (with a better name). This is a simplification I had to do in a project, on nats and also on ints.\r\n\r\n> it seems the `shrink` hypothesis can be simplified to `∀ k, n < k < m → op (f n k) (f k k.+1) = f n k.+1` which leads to the following simplified proof\r\n\r\nThis is what I used at the start, but 1) this equality condition is only needed on a subset of the domain of `f`, which thus makes the subsequent lemmas stronger, and 2) it turned out to be needed, or at least useful, for the variant of the telescope I needed, which operated on ordinals. \r\n\r\n> (there might be a way to get rid of the Monoid hypothesis, but I didn't manage that)\r\n\r\nI thought the Monoid was necessary for the `\\big` construct."},{"author":"jouvelot","file":"mathcomp/algebra/ssralg.v","date":"2022-03-15T19:52:04Z","comment":"> This should also be in bigop. \r\n\r\nI agree.\r\n\r\n> It' also seems inverted to me.\r\n\r\nI followed the pattern already used in ssralg.v, so that I didn't have to change one single line of the file there, just introduce the `telescope_op` abstraction.\r\n\r\n"},{"author":"jouvelot","file":"mathcomp/algebra/ssralg.v","date":"2022-03-15T20:01:48Z","comment":"Should I dispatch the various proof elements in the files we discussed? Any suggestion about where exactly?"},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-16T09:57:55Z","comment":"> I agree that the code should be dispatched somewhere else. I put it in one place, where its application was more meaningful, to make looking at it easier at the start of the review process. Should have I done the dispatch right from the start?\r\n\r\nAs you prefer, that's not needed for a first version of the pull request, just to discuss the change.\r\nBut that would have to be done at some point before merging.\r\n\r\n> It seems to me that `shrink` could, if deemed sufficiently useful, actually be put in nat.v. (with a better name). This is a simplification I had to do in a project, on nats and also on ints.\r\n\r\nMaybe. I currently think that just the `telescope_op` lemma doesn't expose such a need. But if you have other uses that would justify that, feel free to share them.\r\n\r\n> This is what I used at the start, but 1) this equality condition is only needed on a subset of the domain of `f`, which thus makes the subsequent lemmas stronger, and 2) it turned out to be needed, or at least useful, for the variant of the telescope I needed, which operated on ordinals.\r\n\r\nThen maybe add this lemma to the PR. Currently, it feels like proving a lemma under an hypothesis that is more complicated and stronger than needed, which is a shame.\r\n\r\nBTW, I wonder whether the hypothesis about `n` and `m` in `telescope_op` shouldn't be `n < m` rather than `n <= m`, that would remove the need for the `n = m -> f n n = idx` hypothesis, and the equality case can easily be proved when needed (it doesn't depend on `telescope_op` itself).\r\n\r\n> I thought the Monoid was necessary for the `\\big` construct.\r\n\r\nNo (although it is very common), see `big_nat_recl` for instance (compared to `big_nat_recr`)."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-16T10:00:34Z","comment":"> Should I dispatch the various proof elements in the files we discussed? Any suggestion about where exactly?\r\n\r\nI would say at the end of `bigop.v`, there for instance https://github.com/math-comp/math-comp/blob/master/mathcomp/ssreflect/bigop.v#L2056"},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-16T10:03:34Z","comment":"I mean, `telescope_sumr` is in the order `\\sum_(n ≤ k < m) (f k.+1 - f k) = f m - f n`, as well as `telescope_prodf`. Only `telescope_prodr` is in the order `\\prod_(n ≤ k < m) (f k / f k.+1) = f n / f m`, but it holds a comment `(* Due to noncommutativity, fractions are inverted. *)`. So the order you suggested looks to me like \"inverted\" as per the existing code."},{"author":"jouvelot","file":"mathcomp/algebra/ssralg.v","date":"2022-03-16T21:32:53Z","comment":"Oh, I see what you mean. I'm pushing a new version."},{"author":"jouvelot","file":"mathcomp/algebra/ssralg.v","date":"2022-03-16T21:35:25Z","comment":"- I'll try to clean up the lemma on ordinals I have to see whether that would more motivate the constraint in `shrink`. BTW, it seems to me that this added constraint in `shrink` makes `telescope_op` stronger, since the equality property only needs to be true on a subdomain of `shrink`.\r\n- For `n <= m`or `n < m`, I don't know what's best. The lemma is more general with the inequality, and avoids users to prove the `=` case at the price of the `empty` definition. Both cases are present in `ssralg.v`. \r\n- I'll keep the functions in one location for now, and will move them in `bigop.v` once the code is finalized, then. Thanks for the suggestion."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-17T08:35:27Z","comment":"> For n <= mor n < m, I don't know what's best.\r\n\r\nI think we need both: `telescope_op : n < m -> ...` and `telescope_op_leq : n <= m -> (n = m -> f n n = idx) -> ...`"},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-17T08:38:27Z","comment":"```suggestion\r\nLemma telescope_sumn n m f : \r\n```\r\nto be consistent with the other names in ssralg.v"},{"author":"jouvelot","file":"mathcomp/algebra/ssralg.v","date":"2022-03-17T09:39:17Z","comment":"> > For n <= mor n < m, I don't know what's best.\r\n> \r\n> I think we need both: `telescope_op : n < m -> ...` and `telescope_op_leq : n <= m -> (n = m -> f n n = idx) -> ...`\r\n\r\nOk, let's try that. I'm pushing these two versions."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-17T12:25:07Z","comment":"BTW, do we agree that\r\n```forall k, n < k < m -> op (f n k) (f k k.+1) = f n k.+1```\r\nis a weaker hypothesis than\r\n```forall p q r, p < q < r -> (n <= p /\\ r <= m) -> op (f p q) (f q r) = f p r```\r\n(just taking p := n, q := k and r := k+1) thus making the lemma in my suggested change above stronger?"},{"author":"jouvelot","file":"mathcomp/algebra/ssralg.v","date":"2022-03-17T12:41:28Z","comment":"Oh, sorry, I misread your previous question, and thought you were only getting rid of the `(n <= p /\\ r <= m)` condition, which I needed for the ordinal-based lemma I had in a project:\r\n```\r\nVariable (k :nat) (f : 'I_k.+1 -> nat ) (af : {homo f : x y /~ x <= y}).\r\n\r\nDefinition ord_pred m (j : 'I_m) : 'I_m. \r\nhave j1: j.-1 < m by rewrite (leq_ltn_trans _ (ltn_ord j)) // leq_pred.\r\nexact: Ordinal j1.\r\nDefined.\r\n\r\nLemma sum_diffs (l h : 'I_k.+1) : \r\n  l < h -> \\sum_(s < k.+1 | l < s <= h) (f (ord_pred s) - f s) = f l - f h.\r\n```\r\nfor which the bound condition was needed (and where my hunt for a more general solution started). So, yes, indeed, your suggestion is a weaker hypothesis, and probably enough; I'll reuse your shorter proof, and see whether I can make all my use cases work with this."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-17T15:22:06Z","comment":"You can make `f` explicit\r\n```suggestion\r\nArguments telescope_op [R idx op] f [n m].\r\nArguments telescope_op_leq [R idx op] f [n m].\r\n```\r\nto avoid the `@telescope_op _ _ _` below."},{"author":"jouvelot","file":"mathcomp/algebra/ssralg.v","date":"2022-03-17T16:17:54Z","comment":"All the use cases mentioned in the motivation header of this PR can be nicely adapted to the current definitions, except for `sum_diffs`, which deals with ordinals. For this, I had to introduce a (stronger) version of `telescope_sumn`, as follows:\r\n```\r\nLemma telescope_sumn' n m f : \r\n  n <= m -> {in [pred i | n <= i <= m] &, {homo f : x y / x <= y}} ->\r\n  \\sum_(n <= k < m) (f k.+1 - f k) = f m - f n.\r\n```\r\nMaybe it's possible to avoid the (meaningful, btw) restriction on the `homo` constraint, but I'm not sure. Since this provable using `telescope_op_leq`, maybe it's not worth mentioning it."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-03-17T16:54:09Z","comment":"Indeed, we can add this."}],"tags":[],"commits":[{"author":"jouvelot","committer":"proux01","hash":"ab3c61602825fd302a3f34b9f4f585b079f4a2ba","message":"Adding telescope_big, telescope_sumn and telescope_sumn_in\n\nCo-authored-by: Pierre Roux <pierre.roux@onera.fr>\nCo-authored-by: Cyril Cohen <cohen@crans.org>","date":"2022-03-19T20:31:55Z"}]}