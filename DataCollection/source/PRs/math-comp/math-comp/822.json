{"author":"affeldt-aist","number":822,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":31,"deletions":4},{"file":"mathcomp/solvable/abelian.v","status":"M","additions":31,"deletions":4},{"file":"mathcomp/ssreflect/bigop.v","status":"M","additions":31,"deletions":4}],"state":"merged","open_date":"2021-11-15T04:26:35Z","update_date":"2022-06-10T07:13:01Z","discussion":[{"author":"chdoc","date":"2021-11-15T07:49:36Z","comment":"This generalization certainly makes sense. In fact, coq-communnity/reglang uses an eqType version of `bigmax_sup`:\r\n```\r\nLemma bigmax_seq_sup (T : eqType) (s:seq T) (P : pred T) F k m :\r\n  k \\in s -> P k -> m <= F k -> m <= \\max_(i <- s | P i) F i.\r\nProof. move => A B C. by rewrite (big_rem k) //= B leq_max C. Qed.\r\n```\r\nSo maybe it's a good idea do generalize that as well. "},{"author":"affeldt-aist","date":"2021-11-15T07:53:57Z","comment":"Great. I'll look at more potential such generalizations about \\max and turn this draft PR into a genuine one asap. Thank you."},{"author":"proux01","date":"2022-06-07T13:40:30Z","comment":"It seems we reached a consensus here. I'll merge by the end of the week if there is no further comment."}],"review_discussion":[{"author":"proux01","file":"mathcomp/ssreflect/bigop.v","date":"2022-02-20T18:24:27Z","comment":"Isn't this redundant with `leq_bigmax_cond`?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2022-02-25T20:08:19Z","comment":"Here follows the lemma with the \"correct\" generality, which should bear the name `leq_bigmax`\r\n```suggestion\r\nLemma leq_bigmax (I : Type) r (P : {pred I}) F i0 :\r\n  P i0 -> F i0 <= \\max_(i <- r | P i) F i.\r\n```\r\nNow, if you also want the specialization to an `eqType` and the `i0 \\in r`, you can name it `leq_bigmax_seq`."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2022-02-25T20:12:10Z","comment":"I'd keep the former `bigmax_leqP` as such, and add `_seq` variants. And I would prove them using `big_nth`."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2022-02-25T20:13:12Z","comment":"Same as for `leq_bigmax`"},{"author":"affeldt-aist","file":"mathcomp/ssreflect/bigop.v","date":"2022-03-02T08:12:43Z","comment":"One purpose of the `i0 \\in r` was to avoid the empty list which can be used to invalidate this new statement."},{"author":"proux01","file":"mathcomp/ssreflect/bigop.v","date":"2022-03-02T08:30:35Z","comment":"Maybe we can still have this named with `_seq` for uniformity, and no `leq_bigmax`?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2022-03-03T17:55:57Z","comment":"Then use `nilp r`"},{"author":"proux01","file":"mathcomp/ssreflect/bigop.v","date":"2022-03-14T15:23:50Z","comment":"The list being non empty doesn't seem enough for the lamme to hold, it really neeed `i0 \\in r`. I'm afraid, there is no most generic lemma here."},{"author":"ybertot","file":"mathcomp/ssreflect/bigop.v","date":"2022-03-14T15:33:05Z","comment":"How about something like \"has P r\""},{"author":"proux01","file":"mathcomp/ssreflect/bigop.v","date":"2022-03-14T15:40:14Z","comment":"That doesn't ensure that i0 is in r (hence accounted for in the max)."},{"author":"ybertot","file":"mathcomp/ssreflect/bigop.v","date":"2022-03-14T15:45:30Z","comment":"Sorry I misread the statement, I thought i0 was used only in hypotheses."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2022-03-16T14:08:36Z","comment":"I see! I think I did the same mistake as Yves."},{"author":"affeldt-aist","file":"mathcomp/ssreflect/bigop.v","date":"2022-04-14T09:41:03Z","comment":"I have added the `_seq` variants but did not figure out how to prove them using `big_nth`."}],"tags":[],"commits":[{"author":"affeldt-aist","committer":"affeldt-aist","hash":"b12384978fa27f9f56e1c2eb7dc08869bdc5074c","message":"generalize leq_bigmax_cond","date":"2022-04-05T08:34:50Z"}]}