{"author":"proux01","number":980,"diff_summary":[{"file":".github/workflows/nix-action-coq-8.13.yml","status":"D","additions":218,"deletions":4052},{"file":".github/workflows/nix-action-coq-8.14.yml","status":"D","additions":218,"deletions":4052},{"file":".gitlab-ci.yml","status":"D","additions":218,"deletions":4052},{"file":".nix/config.nix","status":"D","additions":218,"deletions":4052},{"file":"CHANGELOG_UNRELEASED.md","status":"D","additions":218,"deletions":4052},{"file":"coq-mathcomp-ssreflect.opam","status":"D","additions":218,"deletions":4052},{"file":"mathcomp/ssreflect/order.v","status":"D","additions":218,"deletions":4052},{"file":"mathcomp/ssreflect/ssrbool.v","status":"D","additions":218,"deletions":4052}],"state":"open","open_date":"2023-03-09T14:15:51Z","update_date":"2023-03-31T09:43:09Z","discussion":[{"author":"pi8027","date":"2023-03-09T14:31:34Z","comment":"While this change seems useful in practice, I have two remarks:\r\n- I think that `order_scope` should not be opened unless you are reasoning about abstract order instances.\r\n- Opening `ring_scope` after `order_scope` seems better in general since it should give precedence to the notations in `ring_scope` in parsing:\r\n  > If a notation is defined in multiple scopes, Coq uses the interpretation from the most recently opened notation scope or declared lonely notation."},{"author":"proux01","date":"2023-03-09T14:50:37Z","comment":">     * I think that `order_scope` should not be opened unless you are reasoning about abstract order instances.\r\n> \r\n>     * Opening `ring_scope` after `order_scope` seems better in general since it should give precedence to the notations in `ring_scope` in parsing:\r\n>       > If a notation is defined in multiple scopes, Coq uses the interpretation from the most recently opened notation scope or declared lonely notation.\r\n\r\nBut then , how would you handle two concrete orders, one being on some numDomainType but not the other?\r\n"},{"author":"pi8027","date":"2023-03-09T15:38:07Z","comment":"> But then, how would you handle two concrete orders, one being on some numDomainType but not the other?\r\n\r\nIn that case, I would open only `ring_scope` and explicitly write `%O` (or another scope delimiter if applicable) for the other."},{"author":"proux01","date":"2023-03-09T15:44:00Z","comment":"That sounds pretty inconvenient, why shouldn't we open `order_scope`? Is there something bad with having a generic `_ <= _` notation for all porder types? or some other reason?"},{"author":"proux01","date":"2023-03-17T09:53:51Z","comment":"@pi8027 I have given a bit more though to this and I realize maybe I'm just messing something up with my displays. Here is my use case:\r\n* orders on `numDomainType` have a notation on `ring_display` that  parses and prints as `(_ <= _)%R`\r\n* in Analysis (c.f. [constructive_ereal.v](https://github.com/math-comp/analysis/blob/master/theories/constructive_ereal.v)), the extended reals have a notation on `ereal_display` that also parses and prints as `(_ <= _)%E`\r\n\r\nMaybe we should just reuse `ring_display` in `constructive_ereal.v` as we don't really want the display to differ from the one of `ring_display` after all? Doing this, I wouldn't have to open `order_scope` (or put `%E` scope annotations everywhere) but only `ring_scope` in my usecase."},{"author":"pi8027","date":"2023-03-17T10:44:41Z","comment":"@proux01 From my superficial understanding, it is safer to have both `ring_display` (resp. `ring_scope`) and `ereal_display` (resp. `ereal_scope`). But `constructive_ereal.v` seems to lack specialized notations for `bottom` and `top` (and thus both `bottom` and `GRing.zero` are printed as `0`?). What about redefining `+oo` and `-oo` as such?"},{"author":"proux01","date":"2023-03-17T10:55:18Z","comment":"> `constructive_ereal.v` seems to lack specialized notations for `bottom` and `top` (and thus both `bottom` and `GRing.zero` are printed as `0`?). What about redefining `+oo` and `-oo` as such?\r\n\r\nI agree, thanks for pointing this out.\r\n\r\n> @proux01 From my superficial understanding, it is safer to have both ring_display (resp. ring_scope) and ereal_display (resp. ereal_scope).\r\n\r\nWell, what's the point of having two different displays with the same... display? When writing pen and paper proofs I write `_ <= _` both for reals and extended reals, I would find it nice if I didn't need to change one to `(_ <= _)%R` or `(_ <= _)%E` when formalizing.\r\n"},{"author":"pi8027","date":"2023-03-17T11:17:57Z","comment":"> > @proux01 From my superficial understanding, it is safer to have both ring_display (resp. ring_scope) and ereal_display (resp. ereal_scope).\r\n> \r\n> Well, what's the point of having two different displays with the same... display? When writing pen and paper proofs I write `_ <= _` both for reals and extended reals, I would find it nice if I didn't need to change one to `(_ <= _)%R` or `(_ <= _)%E` when formalizing.\r\n\r\nI think that mixing `(_ <= _)%R` and `(_ <= _)%E` in printing is potential pitfall, although I don't have any concrete example."},{"author":"proux01","date":"2023-03-17T12:02:51Z","comment":"Could you elaborate on your idea? I just don't grasp it unfortunately."},{"author":"pi8027","date":"2023-03-17T12:51:47Z","comment":"Sure. `(x%:E <= y%:E)%E` should be convertible with `(x <= y)%R`, but we have to unfold `Order.le` in the first term to see this fact. IIUC, keyed matching does not unfold the head symbol to see this kind of fact (it checks whether the arguments are respectively convertible after finding a candidate subterm based on the head symbol). So it seems that ssr tactics may not find the right subterm you expect, unless we have a clear distinction between these two things."},{"author":"pi8027","date":"2023-03-17T12:54:36Z","comment":"To be clear, I'm not against the changes introduced by this PR, but saying that there is a discipline in the use of displays, notation scopes, etc. We can open an issue on the analysis repo and continue the discussion."},{"author":"CohenCyril","date":"2023-03-20T12:16:11Z","comment":"@pi8027 I agree we should have a more general discussion, but I also think the notations `0` and `1` were particularly bad in the first place :sweat_smile: \r\n\r\n@proux01 wow you went a long way to preserve backward compatiblity, but I'm not sure it's desirable, and it's definitely error prone since, unless I'm mistaken, you missed a few rescoping in the notations you added (e.g. ``x `&` y`` in `orderBT_scope` does not rescope `x` and `y` properly and it's not the only the only place).\r\nI would be more aggressive and add `\\bot` and `\\top` and remove `0` and  `1` from `order_scope`, and risk breaking compat and add declarations in the few (I expect) places where it's really necessary.\r\nWe could also add unscoped `0%O` and `1%O` parsing only notations, maybe we can even hack the display to trigger a deprecation warning?\r\n\r\n"},{"author":"proux01","date":"2023-03-20T19:48:17Z","comment":"> @pi8027 I agree we should have a more general discussion\r\n\r\nI added the point to the agenda of the next Analysis meeting (extended reals are still there currently)\r\n\r\n> I would be more aggressive and add `\\bot` and `\\top` and remove `0` and `1` from `order_scope`, and risk breaking compat and add declarations in the few (I expect) places where it's really necessary.\r\n\r\nIndeed, done that\r\n\r\n> We could also add unscoped `0%O` and `1%O` parsing only notations,\r\n\r\nDone, this doesn't work with Coq 8.13 and 8.14 (apparently something got fixed/improved in 8.15), so I think this is a good time to drop support for 8.13 and 8.14, if we agree CI is now green.\r\n\r\n> maybe we can even hack the display to trigger a deprecation warning?\r\n\r\nDidn't manage to get anything along this line but since the notation is parsing only, the printing should already be an indice that something changed (beside it doesn't seem to be much used (apparently only mczify in the CI)).\r\n"},{"author":"pi8027","date":"2023-03-21T14:49:57Z","comment":"Just in case, I opened a PR to fix mczify math-comp/mczify#46."},{"author":"proux01","date":"2023-03-22T12:40:58Z","comment":"Thanks, no hurry, that'll only be actually required when we'll remove the new deprecated `0%O` and `1%O` notations."}],"review_discussion":[],"tags":[{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."},{"tag":"TODO: HB port","description":""}],"commits":[{"author":"proux01","committer":"proux01","hash":"8ea00d190d87ecfc61efaf356a0ecff669988f3e","message":"Drop support for Coq 8.13 and 8.14\n\nThe 0%O notation doesn't work on them.","date":"2023-03-29T15:17:27Z"},{"author":"proux01","committer":"proux01","hash":"400ba6e6bd879c54c6838a272cbbdf18e378d1ef","message":"Add notation `0%O` and `1%O` in order.v\n\nIn order to remove `0` and `1` (for bottom and top of lattices)\nthat are conflicting with neutral elements of rings.","date":"2023-03-29T15:17:27Z"},{"author":"proux01","committer":"proux01","hash":"1d93ebf63ebe1317af24185c98b7bb13440e6d5e","message":"Add notations \\bot and \\top","date":"2023-03-29T15:17:27Z"},{"author":"proux01","committer":"proux01","hash":"49d3cced3171037940a977c3eab12ae39aa1bce0","message":"Replace O / 1 with \\bot / \\top","date":"2023-03-29T15:17:27Z"},{"author":"proux01","committer":"proux01","hash":"c002db59760666959d263f7cea2af8a846745863","message":"Remove notations `0` and `1` in order_scope","date":"2023-03-29T15:17:27Z"}]}