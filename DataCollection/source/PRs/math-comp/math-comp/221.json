{"author":"hivert","number":221,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":262,"deletions":79},{"file":"mathcomp/fingroup/action.v","status":"M","additions":262,"deletions":79},{"file":"mathcomp/fingroup/perm.v","status":"M","additions":262,"deletions":79},{"file":"mathcomp/solvable/finmodule.v","status":"M","additions":262,"deletions":79}],"state":"merged","open_date":"2018-08-26T14:51:36Z","update_date":"2020-04-15T13:45:25Z","discussion":[{"author":"ggonthier","date":"2018-12-10T08:35:24Z","comment":"This contribution addresses an important gap in the finite group library, namely the lack of support for the symmetry groups `Sym(X)`. This is a historical accident: permutations were initially implemented to support matrix operations (mainly, determinants), then support for group automorphism `Aut(X)` was developed, skipping over `Sym(X)` as this was not required for the Odd Order proof. The study of `Alt(X)` was primarily intended as an application, and thus never fully integrated in the library.\r\nThis is too important a topic to be handled piecewise; I suggest we work on a comprehensive PR that fully addresses it, and is consistent with the rest of the library. This means including your results on the decomposition in cycles, as well as support for cycle notation and structure, and n-transitivity. Some work will have to go in renaming: `perm_ong` should really be called `Sym`, `pcycle` in `perm.v` should really be called `porbit`, for instance."},{"author":"hivert","date":"2018-12-10T17:22:13Z","comment":"Dear Georges, \r\n\r\nI'm quite happy that you consider this part of the development worthwhile being included in MathComp. Right now my main question is how to proceed further. I considered the few lemma proposed here as a requirement for the inclusion (in whatever form) of the cycle.v file. "},{"author":"CohenCyril","date":"2018-12-11T10:40:39Z","comment":"Hi @hivert, if I am right, @ggonthier suggests you put all of your contributions to the symmetric group in one single PR (you may amend this one), so as to review and extend it globally rather than bits by bits."},{"author":"ggonthier","date":"2018-12-11T16:03:44Z","comment":"Dear Florian, @CohenCyril is right. Peaking at `Coq-combi`, I think we'll need a few more results (see above) in order to do the topic justice. The finite group library mostly follows Aschbacher's Finite Group Theory textbook, so I'd like to use chapter 5 as a source for results and notation.\r\n  It's clear that some notation from both `perm.v` and your own `cycle.v` will need to be changed. I must confess I didn't put enough thought into names in `perm.v` because I viewed `perm_on`, `pcycle` and `cycles` as mere stepping stones to get to `Aut` and `odd_perm`.\r\n   Reviewing the textbook, a \"cycle\" is a permutation (not its support), so I should have used 'Sym', 'porbit' and 'porbits'. The text uses Fix(A) and Mov(A) to describe the fixed and moved points of a set of permutations, but we could also use `psupport s` for the moved points of a single permutation\r\n(`support s` would conflict with an `ssralg` definition that is used for characters). We should also avoid `cyclic`, which is heavily used for groups; luckily it seems the more modern term is `circular`, which doesn't conflict with anything.\r\n  Finally, I'd like to unify as much as possible the group isomorphism construction, and generalise the one given in `automorphism.v` rather than creating a new one from scratch. We can still have a variety of isomorphism lemmas; my experience is that these are more useful in practice, because it\r\nis usually more efficient to use `isogP` to get a new isomorphism constant than to mess around with explicit instances of a generic construction."},{"author":"amahboubi","date":"2019-02-28T17:19:33Z","comment":"Hi @hivert! We discussed your PR at the MathcompDev meeting today. How\r\ncan we help this PR progress? For instance, would an explicit todo list\r\nhelp? Also, it's absolutely fine if you have no more time left to devote\r\nto this particular PR, in which case we (the devs) could also take over\r\nthe finalization of the work entirely."},{"author":"amahboubi","date":"2019-05-21T09:28:05Z","comment":"Hi @hivert ! @ybertot told us today that the two of you discussed in person, and that you agreed to let us take over this PR. Many thanks!"},{"author":"hivert","date":"2019-05-21T11:49:28Z","comment":"@amahboubi  Sure ! Please take what you want from my code. Sorry, I forgot to reply... "},{"author":"amahboubi","date":"2019-05-21T12:05:14Z","comment":"No worries, once again, thanks for your contribution."},{"author":"affeldt-aist","date":"2020-04-05T18:08:04Z","comment":"I tried to address in a minimal way comments about this PR.\r\n- @amahboubi suggested a simplification of card_Sn, which requires an\r\n  intermediate lemma, relying on a generalization of subsetT (for all\r\n  pred instead of all set) but this generalization requires the\r\n  addition of pred_of_set here and there in the library\r\n- @ggonthier suggested to work on a comprehensive PR to address the\r\n  lack of support for the symmetry group Sym(X). See his comments for\r\n  details. In a nutshell:\r\n  + source for results and notations: Aschbacher's Finite Group Theory Chap. 5\r\n  + use `psupport s` for the moved points of a single permutation\r\n  + use `circular` instead of `cyclic`\r\n  + generalize the group isomorphism construction from `automorphism.v`\r\n"},{"author":"affeldt-aist","date":"2020-04-06T10:02:59Z","comment":"Regarding the suggestion by @ggonthier to work on a comprehensive PR, we would like to reproduce part of the discussion that happened here as a new issue to keep track and eventually trigger a PR."},{"author":"affeldt-aist","date":"2020-04-07T16:36:03Z","comment":"I have updated `CHANGELOG_UNRELEASED` @CohenCyril "},{"author":"affeldt-aist","date":"2020-04-07T19:57:28Z","comment":"> can you doublecheck my suggestions?\r\n\r\ndone"},{"author":"ybertot","date":"2020-04-09T12:26:36Z","comment":"@CohenCyril, can we conclude?"},{"author":"CohenCyril","date":"2020-04-09T13:04:49Z","comment":"> @CohenCyril, can we conclude?\r\n\r\nSome proofs are not in the mathcomp ssreflect style, please merge first and I will quickly submit a PR to fix them."},{"author":"affeldt-aist","date":"2020-04-09T13:14:21Z","comment":"I have recorded the suggestion by @ggonthier as issue #478 for the sake of visibility."},{"author":"amahboubi","date":"2020-04-15T09:31:23Z","comment":"@affeldt-aist @ybertot: you have both recently contacted me offline but I would prefer to discuss here. What are you expecting from my side concerning this PR?\r\n"},{"author":"affeldt-aist","date":"2020-04-15T10:17:56Z","comment":"> @affeldt-aist @ybertot: you have both recently contacted me offline but I would prefer to discuss here. What are you expecting from my side concerning this PR?\r\n\r\nWe did address several of your comments but not all of them.\r\nWe wanted to tell you and make sure whether you think it is reasonable.\r\n\r\nHere are details:\r\nYou suggested a simplification of `card_Sn`, which requires an\r\nintermediate lemma, relying on a generalization of `subsetT` (for all\r\n`pred`s instead of all `set`s) but this generalization requires the\r\naddition of `pred_of_set` here and there in the library so we did not implement it.\r\n(We addressed your other comments about documentation and renamings.)\r\n\r\nRegarding the suggestion by @ggonthier we decided not to address it in this\r\nPR and to record it as an issue for later:\r\nhttps://github.com/math-comp/math-comp/issues/478\r\n(However, we did address the comments about renamings and moved lemmas around\r\nfollowing new suggestions by @CohenCyril .)\r\n"},{"author":"amahboubi","date":"2020-04-15T10:53:30Z","comment":"@affeldt-aist thanks for clarifying. Is there a reason why not creating an issue for my unaddresed suggestion as well? In case no, I just created one using github's facility. \r\nI do not have enough time to allocate to this right now and this should not block the release process."},{"author":"amahboubi","date":"2020-04-15T10:54:49Z","comment":"Note that the link automatically created does not work properly, does anyone know how to properly point to the entire conversation?"},{"author":"CohenCyril","date":"2020-04-15T11:04:51Z","comment":"> Note that the link automatically created does not work properly, does anyone know how to properly point to the entire conversation?\r\n\r\nI did it. (You can click on the \"...\" symbol and then \"copy link\" to get the permalink to any comment in any thread)"},{"author":"affeldt-aist","date":"2020-04-15T11:10:33Z","comment":"> Is there a reason why not creating an issue for my unaddresed suggestion as well?\r\n> In case no, I just created one using github's facility.\r\n\r\nI did not create an issue right away because I was hoping that a solution might have emerged out of this discussion. At this point, recording the issue is the right thing to do imho.\r\n"},{"author":"amahboubi","date":"2020-04-15T12:18:00Z","comment":"> > Note that the link automatically created does not work properly, does anyone know how to properly point to the entire conversation?\r\n> \r\n> I did it. (You can click on the \"...\" symbol and then \"copy link\" to get the permalink to any comment in any thread)\r\n\r\nThanks, and thanks for the tip!"}],"review_discussion":[{"author":"CohenCyril","file":"mathcomp/fingroup/action.v","date":"2018-09-10T12:26:16Z","comment":"Hi @hivert, thanks for the contribution. I would expect this to be the definitional equality, so that it becomes canonically a group anyways... (so `group_set_perm_ong` and `perm_ong_group` would not be needed, if I am correct), and have a proof that `'C(~:S | 'P) = [set s | perm_on S s]` instead. Maybe in this context a name (`perm_ong`) is not needed anymore since `'C(~:S | 'P)` is descriptive and short enough?\r\nI did not try, but does that sound reasonable to you?"},{"author":"hivert","file":"mathcomp/fingroup/action.v","date":"2018-09-10T13:05:14Z","comment":"Hi @CohenCyril. I can give a try on what it change on the rest of the code. I'll get back to you after that."},{"author":"hivert","file":"mathcomp/fingroup/action.v","date":"2018-09-10T15:23:53Z","comment":"I got a little problem using directly `'C(~:S | 'P)`. Indeed rewriting `inE` rewrite it to\r\n```\r\n(s \\in [set: perm_of_finGroupType T]) &&\r\n  (s \\in [set a | ~: S \\subset [set x | ('P)%act x a == x]])\r\n```\r\nwhich is largely unusable. More `rewrite !inE` leads to\r\n```\r\n ~: S \\subset [set x | aperm x s == x]\r\n```\r\nHaving something which directly rewrites to\r\n```\r\nperm_on S s\r\n```\r\nSeems to me much natural.\r\nAs a consequence in my script, I need to be very careful to not rewrite inE before perm_onE on it.\r\n\r\nSee [this commit](https://github.com/hivert/Coq-Combi/commit/cb5975947ad804434831a9fedf6b947ad4a2cc08) if you want to have an idea of the effect. If you are curious the file `permcent.v` aims to compute the structure and therefore the cardinality of the centralizer of a given permutation which ultimately give a formula for the size of a conjugacy class. \r\n\r\nI leave it to you to decide if the ease to have something which simplifies to `perm_on S s` is worth the extra lines (and the time to maintain them)."},{"author":"amahboubi","file":"mathcomp/fingroup/action.v","date":"2018-10-30T09:48:43Z","comment":"Please add the documentation of perm_ong is the header."},{"author":"amahboubi","file":"mathcomp/fingroup/action.v","date":"2018-10-30T09:50:20Z","comment":"It seems you are using 'Proof using.' in a systematic way when starting your proofs. Could you comment on that practice and why you found it useful?"},{"author":"amahboubi","file":"mathcomp/fingroup/perm.v","date":"2018-10-30T10:09:07Z","comment":"Here is an alternative proof:\r\n`Proof. apply: im_perm_on; exact: perm_on1. Qed.`"},{"author":"amahboubi","file":"mathcomp/fingroup/perm.v","date":"2018-10-30T10:52:14Z","comment":"Indeed, this third variant was missing... thanks! If I remember correctly, @thery wrote his own in `alt.v`...\r\nIt seems to me though that the present  proof is going into some low level (point-level) details when it shouldn't. May be is this because we should use the fact that:\r\n\r\n`Lemma Sn_perm_onT n (x : 'S_n) : perm_on setT x`\r\n\r\nI could not find it but this should be a trivial fact. I tried to prove it but my memory of the finset lib is a bit rusty and I had the following problem: I would like to write\r\n\r\n```\r\nLemma Sn_perm_onT n (x : 'S_n) : perm_on setT x.    \r\nProof. by rewrite /perm_on; apply: my_subsetT. Qed.\r\n```\r\n\r\nbut then I need this generalization of subsetT:\r\n\r\n```\r\nLemma my_subsetT  (T : finType) (A : pred T) : A \\subset [set: T].\r\nProof. by apply/subsetP=> x; rewrite inE. Qed.\r\n```\r\nCan someone  tell me what idiom I should use instead?\r\nAnd now we can get the following proof for `card_Sn`:\r\n\r\n```\r\nLemma card_Sn n : #|'S_(n)| = n`!.\r\nProof.\r\nhave /eq_card -> : 'S_(n) =1 perm_on [set: 'I_n] by move=> x; rewrite Sn_perm_onT.\r\nby rewrite card_perm cardsT card_ord. \r\nQed.\r\n```"},{"author":"amahboubi","file":"mathcomp/fingroup/perm.v","date":"2018-10-30T10:53:25Z","comment":"Update the header with the corresponding documentation."},{"author":"hivert","file":"mathcomp/fingroup/action.v","date":"2018-10-30T11:18:14Z","comment":"It was just added automatically by 'Suggest Proof Using' (See [Asynchronous and Parallel Proof Processing](https://coq.inria.fr/refman/addendum/parallel-proof-processing.html)) I understood that this could be used to speedup compiling by building proof terms in parallel. Maybe it's not useful at all but since it was added automatically by a script and didn't clobber that much the file I left it. Moreover it is a simple and nice way to document the section hypothesis dependency which I find useful."},{"author":"hivert","file":"mathcomp/fingroup/perm.v","date":"2018-10-30T11:25:04Z","comment":"I completely agree that one shouldn't need to go to low level. I didn't manage to avoid it. If I remember correctly, there are at least a dozen of instances of this problem in my code. Either I'm missing some shortcut in the library... I'll try to extract another instance of this problem."},{"author":"amahboubi","file":"mathcomp/fingroup/perm.v","date":"2018-10-30T11:34:14Z","comment":"Great! It would be super useful indeed to collect some examples, so as to complete the infrastructure material with the missing pieces."},{"author":"hivert","file":"mathcomp/fingroup/perm.v","date":"2018-10-30T16:32:08Z","comment":"Here is one instance:\r\n\r\n```\r\nNotation \"#{ x }\" :=  #|(x : {set _})|\r\nVariable T : finType.\r\nImplicit Types (A B X : {set T}) (P Q : {set {set T}}).\r\n\r\nLemma count_set_of_card (p : pred nat) P :\r\n  count p [seq #{x} | x in P] = #|P :&: [set x | p #{x}]|.\r\nProof using.\r\nrewrite cardE -size_filter /enum_mem -enumT /=.\r\nrewrite filter_map size_map; congr size.\r\nrewrite -filter_predI -enumT /=; apply eq_filter.\r\nby move=> S; rewrite !inE andbC.\r\nQed.\r\n```"},{"author":"CohenCyril","file":"mathcomp/fingroup/action.v","date":"2020-04-06T13:10:44Z","comment":"```suggestion\r\nLemma SymE : Sym = 'C(~: S | 'P).\r\n```"},{"author":"CohenCyril","file":"mathcomp/fingroup/action.v","date":"2020-04-06T15:43:19Z","comment":"I would put `Sym`, `Sym_group`, and `card_Sym`  in `perm.v` and keep only `SymE ` in `action.v`"},{"author":"CohenCyril","file":"mathcomp/fingroup/perm.v","date":"2020-04-06T15:57:20Z","comment":"```suggestion\r\nLemma imset_perm1 (S : {set T}) : [set (1 : {perm T}) x | x in S] = S.\r\n```\r\nso as not to rely on the coercion's name"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-04-07T16:39:44Z","comment":"```suggestion\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-04-07T16:39:49Z","comment":"```suggestion\r\n```"},{"author":"CohenCyril","file":"mathcomp/fingroup/perm.v","date":"2020-04-07T16:46:22Z","comment":"```suggestion\r\n\r\nLemma permS1 (g : 'S_1) : g = 1%g.\r\n```"},{"author":"CohenCyril","file":"mathcomp/fingroup/perm.v","date":"2020-04-07T16:49:02Z","comment":"```suggestion\r\nLemma porbits_mul_tperm s x y : let t := tperm x y in\r\n```\r\nlooks like a there used to be a typo"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-04-07T16:49:14Z","comment":"```suggestion\r\n- Added definition `cast_perm` with a group morphism canonical structure, and lemmas `permX_fix`, `imset_perm1`,  `permS0`, `permS1`, `cast_perm_id`, `cast_permE`, `cast_permK`, `cast_permKV`, `cast_perm_in`,  and `isom_cast_perm` in `perm` and  `restr_perm_commute` in `action`.\r\n\r\n- Added `porbitP` and `porbitPmin` in `perm`.\r\n\r\n- Added definition `Sym` with a group set canonical structure and lemmas `card_Sn` and `card_Sym` in `perm` and `SymE` in `action`.\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-04-07T16:49:27Z","comment":"```suggestion\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-04-07T16:49:36Z","comment":"```suggestion\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2020-04-07T16:49:43Z","comment":"```suggestion\r\n  + `ncycles_mul_tperm` -> `porbits_mul_tperm`\r\n```"},{"author":"pi8027","file":"CHANGELOG_UNRELEASED.md","date":"2020-04-08T04:35:13Z","comment":"I think we should have deprecation notations for those renamings."},{"author":"affeldt-aist","file":"CHANGELOG_UNRELEASED.md","date":"2020-04-08T14:43:12Z","comment":"DONE"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"hivert","committer":"affeldt-aist","hash":"71f2fc1e08817af19edcedf0e2980a499951fba3","message":"Some more lemmas on permutations","date":"2020-04-15T11:59:28Z"},{"author":"affeldt-aist","committer":"affeldt-aist","hash":"710a449fad7132a6ac89d19159fda44e48718b1d","message":"addressing comments about PR#221 of mathcomp","date":"2020-04-15T12:07:29Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"6dac040b009e10bc4fa0420f7c40ae9134594c86","message":"reworked new lemmas in perm and action and added missing ones\n\nIn particular: rephrased permS0 and permS1 with all_equal_to","date":"2020-04-15T12:20:45Z"}]}