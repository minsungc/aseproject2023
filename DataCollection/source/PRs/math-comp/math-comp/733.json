{"author":"gares","number":733,"diff_summary":[{"file":".github/workflows/nix-action-coq-8.13.yml","status":"A","additions":11049,"deletions":19524},{"file":".github/workflows/nix-action-coq-8.14.yml","status":"A","additions":11049,"deletions":19524},{"file":".github/workflows/nix-action-coq-8.15.yml","status":"A","additions":11049,"deletions":19524},{"file":".github/workflows/nix-action-coq-8.16.yml","status":"A","additions":11049,"deletions":19524},{"file":".github/workflows/nix-action-coq-8.17.yml","status":"A","additions":11049,"deletions":19524},{"file":".github/workflows/nix-action-coq-master.yml","status":"A","additions":11049,"deletions":19524},{"file":".gitignore","status":"A","additions":11049,"deletions":19524},{"file":".gitlab-ci.yml","status":"A","additions":11049,"deletions":19524},{"file":".nix/config.nix","status":"A","additions":11049,"deletions":19524},{"file":".nix/coq-overlays/coquelicot/default.nix","status":"A","additions":11049,"deletions":19524},{"file":".nix/coq-overlays/mathcomp-classical/default.nix","status":"A","additions":11049,"deletions":19524},{"file":".nix/coq-overlays/mathcomp-single/default.nix","status":"A","additions":11049,"deletions":19524},{"file":".nix/coq-overlays/mathcomp/default.nix","status":"A","additions":11049,"deletions":19524},{"file":".vscode/settings.json","status":"A","additions":11049,"deletions":19524},{"file":"Dockerfile.make","status":"A","additions":11049,"deletions":19524},{"file":"coq-mathcomp-ssreflect.opam","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/Make","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/_CoqProject","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/countalg.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/finalg.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/fraction.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/intdiv.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/interval.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/matrix.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/mxalgebra.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/mxpoly.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/poly.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/polyXY.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/polydiv.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/rat.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/ring_quotient.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/ssralg.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/ssrint.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/ssrnum.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/vector.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/algebra/zmodp.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/character/character.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/character/classfun.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/character/inertia.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/character/integral_char.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/character/mxabelem.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/character/mxrepresentation.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/character/vcharacter.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/algC.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/algebraics_fundamentals.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/algnum.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/closed_field.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/cyclotomic.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/falgebra.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/fieldext.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/finfield.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/galois.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/field/separable.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/fingroup/action.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/fingroup/fingroup.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/fingroup/gproduct.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/fingroup/perm.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/fingroup/quotient.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/abelian.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/alt.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/burnside_app.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/center.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/cyclic.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/extraspecial.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/extremal.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/finmodule.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/frobenius.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/gfunctor.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/hall.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/jordanholder.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/maximal.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/nilpotent.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/pgroup.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/primitive_action.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/solvable/sylow.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/bigop.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/binomial.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/choice.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/eqtype.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/finfun.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/finset.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/fintype.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/generic_quotient.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/order.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/seq.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/ssrAC.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/ssrnat.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/ssreflect/tuple.v","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/test_suite/output.v.out","status":"A","additions":11049,"deletions":19524},{"file":"mathcomp/test_suite/test_regular_conv.v","status":"A","additions":11049,"deletions":19524}],"state":"open","open_date":"2021-03-31T09:46:50Z","update_date":"2023-03-09T22:57:43Z","discussion":[{"author":"CohenCyril","date":"2021-03-31T13:12:16Z","comment":"- [x] foo.v finished\r\n  - [ ] :construction: foo.v taken\r\n  - [ ] :white_check_mark: foo.v compiles but needs more work\r\n"},{"author":"gares","date":"2021-06-10T09:42:32Z","comment":"Nix CI is broken:\r\n\r\n> error: value is a list while a set was expected, at /home/runner/work/math-comp/math-comp/default.nix:13:1"},{"author":"gares","date":"2021-07-22T17:30:46Z","comment":"@CohenCyril is this gitlab CI pipeline a new thing?"},{"author":"gares","date":"2021-11-15T11:44:14Z","comment":"@CohenCyril @pi8027 can you check if the recent locking in rat helps this example: https://github.com/math-comp/math-comp/pull/733/commits/5e84326f5a6759b1d227f066088988e39e8538ff\r\nI suspect it just gets slowed in this branch, but that it is already problematic."},{"author":"proux01","date":"2022-04-21T13:48:12Z","comment":"Here is a squashed and rebase branch: https://github.com/math-comp/math-comp/tree/hierarchy-builder-rebased\r\n(but I cannot force push here)"},{"author":"proux01","date":"2022-05-04T13:36:09Z","comment":"Rebase force pushed, the previous state (before squashing everything) is saved in https://github.com/math-comp/math-comp/tree/hierarchy-builder-before-rebase_2022_05_04"},{"author":"proux01","date":"2022-05-06T11:40:33Z","comment":"So, here is the state of the CI:\r\n\r\n* I dropped planB\r\n* coq-dev is borken on Nix CI (I understand that https://github.com/NixOS/nixpkgs/pull/161977 should fix it)\r\n* unfortunately coq-dev is also broken on Docker CI since the lower bound for OCaml was bumped without coordinating with the maintainer of Docker images (https://coq.zulipchat.com/#narrow/stream/237656-Coq-devs-.26-plugin-devs/topic/.3E.3D.204.2E09.20and.20opam/near/280985366) hopefully, this will be fixed soon\r\n* reverse dependencies not ported yet\r\n  * analysis\r\n  * deriving\r\n  * extructures\r\n* other reverse dependencies are working out of the box or with an overlay (c.f. list of overlays at bottom of top PR description):\r\n  * abel\r\n  * addition-chains\r\n  * autosubst\r\n  * bigenough\r\n  * category-theory\r\n  * coqeal\r\n  * coq-bits\r\n  * coquelicot\r\n  * finmap\r\n  * fourcolor\r\n  * gaia\r\n  * graph-theory\r\n  * interval\r\n  * mczify\r\n  * multinomials\r\n  * odd-order\r\n  * QuickChick\r\n  * real-closed\r\n  * reglang\r\n  * verdi"},{"author":"ejgallego","date":"2022-05-19T09:04:20Z","comment":"Out of curiosity, how are compilation times affected?"},{"author":"proux01","date":"2022-05-19T09:13:05Z","comment":"Last figure I remember was nearly a factor two but @gares would know better."},{"author":"proux01","date":"2022-05-24T09:37:42Z","comment":"So, here is the state of the CI:\r\n* Coq master seems fine thanks to @CohenCyril 's branch (https://github.com/NixOS/nixpkgs/pull/173112)\r\n* only remaining broken reverse dependencies are:\r\n  * analysis\r\n  * deriving which uses universe polymorphism (c.f. https://github.com/proux01/deriving/blob/48f613b98bfe8d130431c00bac4fefa1e54576be/theories/base.v#L980-L982 ) not yet implemented in coq-elpi\r\n  * extructures which requires deriving"},{"author":"ejgallego","date":"2022-06-14T15:11:07Z","comment":"> Last figure I remember was nearly a factor two but @gares would know better.\r\n\r\nA 2x increase in compilation time seems a bit surprising (and maybe worrying) . In particular, the amount of time spent in HB code should be just a small fraction of the compilation time.\r\n\r\nIsn't that suspicious? What is the main bottleneck here.\r\n\r\nI think that Coq really needs something like HB, but if users are gonna get a 2x slowdown from it I'm not sure it is ready until it is more optimized."},{"author":"gares","date":"2022-06-14T20:47:22Z","comment":"The difference is that structures are more regular than before, and less manual tweaks. The time spent in HB commands is negligible, or close to so. The code generated is more likely to trigger bad behavior in conversion heuristics. But so far every time I did investigate a little change here or there would change the cost of a few lines of 100x, so I'm not scared, it is just about spending time on it.\r\nAnd for now the (little) energy is in cover the whole ssrnum (not far, but not there yet)."},{"author":"proux01","date":"2022-07-22T11:09:26Z","comment":"@CohenCyril you can now delete yout [hb-ssrnum](https://github.com/CohenCyril/math-comp/tree/hb-ssrnum) branch as it is integrated here\r\n\r\nAs a consequence, we had to drop support for Coq 8.13 and 8.14, this now only works with:\r\n* Coq 8.15 with HB `master` branch\r\n* Coq 8.16+rc1 with HB `master` branch\r\n* Coq master with HB `coq-master` branch"},{"author":"gares","date":"2022-08-27T20:43:38Z","comment":"can we give planB another try? (I'm too bad at nix to bring it back)"},{"author":"proux01","date":"2022-08-29T07:37:05Z","comment":"> can we give planB another try? (I'm too bad at nix to bring it back)\r\n\r\n@CohenCyril do you remember how to set this up in Nix CI? (I probably won't have time to look at it anytime soon)"},{"author":"proux01","date":"2022-10-14T11:19:01Z","comment":"@CohenCyril no hurry, but I may need your Nix expertise with the CI here:\r\n\r\n* `reglang` fails in the CI but I'm not able to reproduce the failure locally, when I type the CI command\r\n```\r\nNIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle \"coq-8.15\" --argstr job \"reglang\"\r\n```\r\non my machine the thing compiles flawlessly\r\n\r\n* `mathcomp-classical` and `mathcomp-analysis`: this works on Analysis CI (https://github.com/math-comp/analysis/pull/698) but not here, in that case I'm able to reproduce locally and it seems Nix is downloading the source of mathcomp (and not mathcomp-analysis) for mathcomp-classical and I don't understand why (I tried adding an overlay for `mathcomp-classical` but without success)"},{"author":"proux01","date":"2022-11-04T16:28:02Z","comment":"@CohenCyril timings to compile OddOrder (`make -j1` on my laptop):\r\n* without semirings: 2074.59user 18.59system 35:21.32elapsed\r\n* with semirings: 2209.54user 13.78system 37:09.35elapsed\r\n\r\nSo, that's about 6% slower.\r\n\r\n(Note: I had to add a dozen pattern selections: https://github.com/proux01/odd-order/commit/bcca2577f882cb85830dd2816f6d80a21cac558c )"},{"author":"gares","date":"2022-11-30T10:03:34Z","comment":"@pi8027 we did review some FIXME in order.v and left some comments, please look at them and decide what to do."},{"author":"CohenCyril","date":"2022-12-01T12:13:24Z","comment":"> @pi8027 we did review some FIXME in order.v and left some comments, please look at them and decide what to do.\r\n\r\nAll of these are problems that should be fixed in HB, not mathcomp."}],"review_discussion":[{"author":"CohenCyril","file":"mathcomp/algebra/mxalgebra.v","date":"2021-04-14T09:02:50Z","comment":"```suggestion\r\n(* FIXME: extra unfold: Gring.unit_subdef had to be unfolded *)\r\n```"},{"author":"CohenCyril","file":"mathcomp/algebra/mxpoly.v","date":"2021-04-14T09:03:43Z","comment":"```suggestion\r\n(* FIXME: rewrite pattern *)\r\nrewrite -[X in (X <= _)%MS]mulr1 => <-; rewrite mulrDr [p * u]mulrC addrC.\r\n```"},{"author":"CohenCyril","file":"mathcomp/algebra/ssrint.v","date":"2021-11-08T15:11:08Z","comment":"You also need to add a `only printing` notation with the holes to preserve the printing upon simplification."},{"author":"gares","file":"mathcomp/ssreflect/tuple.v","date":"2022-11-30T09:20:31Z","comment":"```suggestion\r\n```"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:32:03Z","comment":"```suggestion\r\n#[export]\r\nHB.instance Definition _ (n : nat) (T : finPOrderType disp) :=\r\n  POrder.on (n.-tuple T).\r\n```"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:33:22Z","comment":"```suggestion\r\n(* Transport finitude *)\r\n#[export]\r\nHB.instance Definition _ (n : nat) (T : finPOrderType disp) :=\r\n  POrder.on (n.-tuple T).\r\n#[export]\r\nHB.instance Definition _ (n : nat) (T : finLatticeType disp) :=\r\n  Lattice.on (n.-tuple T).\r\n#[export]\r\nHB.instance Definition _ (n : nat) (T : finDistrLatticeType disp) :=\r\n  DistrLattice.on (n.-tuple T).\r\n#[export]\r\nHB.instance Definition _ (n : nat) (T : finCDistrLatticeType disp) :=\r\n  CTBDistrLattice.on (n.-tuple T).\r\n```"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:35:56Z","comment":"```suggestion\r\n(* Transport finiteness *)\r\n#[export]\r\nHB.instance Definition _ (T : finPOrderType disp1)\r\n  (T' : finPOrderType disp2) := POrder.on (T * T').\r\n```"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:36:37Z","comment":"```suggestion\r\n(* Transport finiteness *)\r\n#[export]\r\nHB.instance Definition _ (T : finPOrderType disp1)\r\n  (T' : T -> finPOrderType disp2) := POrder.on {t : T & T' t}.\r\n```"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:37:10Z","comment":"```suggestion\r\n(* Transport finiteness *)\r\n#[export]\r\nHB.instance Definition _ (T : finPOrderType disp1)\r\n  (T' : finPOrderType disp2) := POrder.on (T * T').\r\n#[export]\r\nHB.instance Definition _ (T : finLatticeType disp1)\r\n  (T' : finLatticeType disp2) := Lattice.on (T * T').\r\n#[export]\r\nHB.instance Definition _ (T : finDistrLatticeType disp1)\r\n  (T' : finDistrLatticeType disp2) := DistrLattice.on (T * T').\r\n#[export]\r\nHB.instance Definition _ (T : finCDistrLatticeType disp1)\r\n  (T' : finCDistrLatticeType disp2) := CTBDistrLattice.on (T * T').\r\n```"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:37:54Z","comment":"```suggestion\r\n#[export]\r\nHB.instance Definition _\r\n  (T : tbDistrLatticeType disp1) (T' : tbDistrLatticeType disp2) :=\r\n  DistrLattice.on (T * T').\r\n```"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:38:08Z","comment":"```suggestion\r\n#[export]\r\nHB.instance Definition _\r\n  (T : bDistrLatticeType disp1) (T' : bDistrLatticeType disp2) :=\r\n  DistrLattice.on (T * T').\r\n```"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:40:55Z","comment":"I don't think this is easy enough to do, and it does not seem regular (the same verbosity arises in other places, and the properties of the parameters don't necessarily transfer to the container)"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:46:24Z","comment":"Sorry for the noise, I think I misunderstood the comment"},{"author":"gares","file":"mathcomp/ssreflect/order.v","date":"2022-11-30T09:52:12Z","comment":"apparently finitude is transported"},{"author":"CohenCyril","file":"mathcomp/ssreflect/order.v","date":"2022-12-01T12:12:09Z","comment":"Yes, but not automatically, this is typically an example of https://github.com/math-comp/hierarchy-builder/issues/197"},{"author":"CohenCyril","file":"mathcomp/ssreflect/order.v","date":"2022-12-01T12:12:10Z","comment":"Same, this is typically an example of https://github.com/math-comp/hierarchy-builder/issues/197"},{"author":"CohenCyril","file":"mathcomp/ssreflect/order.v","date":"2022-12-01T12:12:15Z","comment":"Same, this is typically an example of https://github.com/math-comp/hierarchy-builder/issues/197"},{"author":"CohenCyril","file":"mathcomp/ssreflect/order.v","date":"2022-12-01T12:12:21Z","comment":"Same, this is typically an example of https://github.com/math-comp/hierarchy-builder/issues/197"},{"author":"CohenCyril","file":"mathcomp/ssreflect/order.v","date":"2022-12-01T12:12:28Z","comment":"Same, this is typically an example of https://github.com/math-comp/hierarchy-builder/issues/197"},{"author":"CohenCyril","file":"mathcomp/ssreflect/order.v","date":"2022-12-01T12:12:57Z","comment":"This is a variation of https://github.com/math-comp/hierarchy-builder/issues/197 (as described in the associated zulip conversation)"},{"author":"pi8027","file":"mathcomp/algebra/ssralg.v","date":"2022-12-12T15:52:13Z","comment":"Why don't we remove (or keep) the phantom parameter everywhere? This `apply` does not respect the uniform inheritance condition, and type-checking terms like `RMorphism.apply _ f` (where `f` has type `{rmorphism R -> S}`) leaves the phantom argument as a unification variable."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-12-12T16:10:30Z","comment":"The phantom parameter is indeed removed, this apply thing is only meant for some backward compatibility purpose. Maybe should it be deprecated?"},{"author":"pi8027","file":"mathcomp/algebra/ssralg.v","date":"2022-12-12T16:20:39Z","comment":"Now I see that `RMorphism.apply` is just a compat layer and not really used (except for Algebra Tactics). But, `RMorphism.map` is used in the definition of the `{rmoprhism R -> S}` notation below."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-12-12T16:24:51Z","comment":"I guess we could change the notation from `{additive fUV }` to `{additive U -> V }` with appropriate levels for `U` and `V` without breaking much, but introducing this intermediary `map` just sounds easier."},{"author":"pi8027","file":"mathcomp/algebra/ssralg.v","date":"2022-12-14T10:37:26Z","comment":"That should indeed be possible, but `U` and `V` will be more verbose than before (which is an obvious downside of reverse coercions compared to phantom types)."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-12-14T11:33:36Z","comment":"Indeed, so we should probably keep it as it is."},{"author":"pi8027","file":"mathcomp/algebra/ssralg.v","date":"2022-12-14T15:44:14Z","comment":"Then, I think we should also have the phantom parameter in the record type `RMorphism.type`. I will try to produce an example supporting this claim."},{"author":"pi8027","file":"mathcomp/algebra/ssralg.v","date":"2022-12-14T16:15:54Z","comment":"I managed to produce only a very artificial example, but this shows that we can lose nice notations like `{additive _}` by insertion of coercion:\r\n```coq\r\nFrom mathcomp Require Import all_ssreflect all_algebra.\r\n\r\nSection S.\r\n\r\nVariables (R S : ringType) (f : {rmorphism R -> S}).\r\n\r\nGoal False.\r\nmatch constr:(GRing.raddfD f) with\r\n  | GRing.raddfD ?f =>\r\n    let ty := type of f in idtac ty\r\nend.\r\n(*\r\nIn MathComp 1.15:\r\n{additive R -> S}\r\nIn MathComp 2.0:\r\n(GRing.Additive.type R S)\r\n*)\r\nAbort.\r\n\r\nEnd S.\r\n```"},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-12-14T16:21:28Z","comment":"Maybe we could add an only printing notation? (but at this point it might be better to craft an actual notation for `{additive R -> S}` not using the phantom type)"},{"author":"pi8027","file":"mathcomp/algebra/ssralg.v","date":"2022-12-14T16:26:32Z","comment":"Also, unification does not propagate the phantom parameter.\r\n```coq\r\nGoal False.\r\nevar (R' : zmodType).\r\nevar (S' : zmodType).\r\nevar (ph : phant (?R' -> ?S')).\r\nevar (f' : @Additive.map ?R' ?S' ?ph).\r\nunify (GRing.Additive.sort ?f') (GRing.RMorphism.sort f).\r\n(*\r\n  ph := ?ph : phant (R -> S)\r\n  f' := f : Additive.map (U:=R) (V:=S) ?ph\r\n  ============================\r\n*)\r\n```"},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-12-14T16:37:12Z","comment":"Ok, I'll try the notation without phantom type."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-12-16T08:45:17Z","comment":"@pi8027 I modified the notation to remove the phantom type (or rather, use the ones provided by HB)."},{"author":"proux01","file":"mathcomp/algebra/ssralg.v","date":"2022-12-16T09:10:35Z","comment":"Unfortunately, it doesn't fix your above example since we now have:\r\n```Coq\r\n(GRing.Additive.type_ R S)\r\n```\r\nThe only fix I can think of is the addition of an only printing notation:\r\n```\r\nNotation \"{ 'additive' R -> S }\" := (GRing.Additive.type_ R S) (only printing) : type_scope.\r\n```\r\n(note that then, we should also add a similar only printing notation for polynomials, matrices,...)\r\nNot sure it's worth the effort."},{"author":"pi8027","file":"mathcomp/algebra/ssralg.v","date":"2022-12-16T09:20:30Z","comment":"Thanks! I think that is a bug of HB. :("}],"tags":[],"commits":[{"author":"gares","committer":"proux01","hash":"417b7ec9d8c04d4ac2b81f8c82aca2aff73ae364","message":"Squash HB port\n\nCommit messages prior to squash below:\n\nPartial port to HB\n\nA little less than half the structures have been ported: all of\n`fingroup.v`, `presentation.v`, `morphism.v`, `ssralg.v`, `bigop.v`,\n`ssrfun.v`, `seq.v`, `choice.v`, `binomial.v`, `ssreflect.v`, `div.v`,\n`fintype.v`, `ssrbool.v`, `ssrnat.v`, `eqtype.v`, `tuple.v`,\n`fingraph.v`, `prime.v`, `path.v`, `finset.v`, `ssrnotations.v`,\n`finfun.v`, `ssrmatching.v` have been ported, including 36 structures.\n\nA third of `order.v` has been ported so far, and `generic_quotient.v`,\n`ssrAC.v` and `perm.v` are waiting to be ported: they are the files\nthat `make` fails on and are blocking for all the files that are not\nmentioned above. There may be missing features in HB to address them\nproperly but no way to identify these missing features precisely\nwithout doing the porting. Moreover since multiple failures occur in\nparallel their is a potential for multiple groups to work at the same\ntime. Hence we suggest to have a porting sprint.\n\nCo-Auhtored-By: Cyril Cohen <cyril.cohen@inria.fr>\nCo-Authored-By: Kazuhiko Sakaguchi <pi8027@gmail.com>\n\nBig refactoring\n\n- new convention: mixins are named `${PreRequsite}_Is${Addentum}`\n    e.g. + `IsZmodule` (no prerequisite)\n         + `Zmodule_IsRing` (Zmodule as a prerequisite, completing to Ring)\n- new type aliases `sub_type`, `inj_type`, `can_type` and `pcan_type`\n  which are automatically canonical and which can be used in combination\n  with `Structure.Build` (as in `Structure.Build mytype (sub_type mytype`)\n  to copy instances that are canonical on the alias, to the type itseld.\n- New notations [`Equality of ... <:]`, `[HasDecEq of _ ... <:]`, etc\n  to replace `[eqMixin of ... <:]`, etc\n- removed many detours due to bugs in HB that have been fixed now...\n\nfix compilation of order.v on 8.12.x\n\nremoving some dependencies\n\ncomment order .v in an editor friendly way\n\nwhere editor != emacs\n\nuse the right End Order, and put HB.reexport at the very end\n\nvscode: ignore files that git ignores\n\ncomment order for the sake of the demo\n\nsome work on order.v\n\nCBDistrLattice done.\n\nStart porting generic_quotient.v\n\nzmodule\n\nctbDistrLatticeType\n\nTotal\n\ncountable ring\n\nEqQuotient ported\n\nFinPOrder\n\ncomring\n\nFinLattice + FinDistrLattice.\n\nFinCDistrLattice\n\ncountalg done modulo renaming of structures\n\n- remove the C prefix\n\nFinished porting generic_quotient\n\nFinTotal\n\nPorting perm.v\n\nSomething fishy happening with two proofs that broke, have to further investigate.\n\nStarted POrderTheory\n\nRemove Admitted\n\nFinished POrderTheory\n\nPort automorphism.v\n\nPorting quotient.v\n\nssrAC done\n\nfinish countalg *** upgrade HB ***\n\nFinished TBDistrLatticeTheory\n\nTrivial stuf, up to factories.\n\ncommenting again quotient and automorphism\n\nWorking on factories.\n\nMore factories.\n\nAddition of RingQuotient and UnitRingQuotient structures\n\nStart instances over nat.\n\nremove out of date comment\n\nRecomplete names in countalg\n\nnow that math-comp/hierarchy-builder#201 is merged\n\nRremove C in module names in countalg.v\n\nClosedField was inheriting DecidableField\n\nPorting poly.v\n\nrenamings\n\npartial revert\n\nCanOrders, SubOrders and uniformization of conventions in order.v\n\nForgot to uncomment poly.v in Make\n\nPorting polydiv.v\n\nfix HB build instruction for nix\n\nAdd Zmodule_IsComRing to replace the old ComRingMixin\n\nfix CI 8.12 and 8.11 by backporting a commit to coq-elpi 1.6 and 1.8\n\nfix nix rule for HB shim\n\nStart porting fraction.v\n\nForgotten instances in poly.v\n\nThere are still the countalg one that don't work.\n\nPartly port ordered structures on product type.\n\nClose module and section properly.\n\nFinished SigmaOrder in order.v\n\nnix magic\n\nFix countRing... structures in poly.v\n\nFix equality instance in EqQuotient\n\nWorking on instances (prod order, lex order, etc) with Kazuhiko.\n\nall_ssreflect.v now compiles\n\nfinish all the proofs needed for building fields out of commutative rings\n\nFixing boolean instance and IsOrdered factory\n\nfix ring_quotient\n\nthere were some missing instances on `type_of`\nalways do `type` and copy on `type_of`\n\ncomplete(?) ring_quotient\n\nssralg documentation (wip)\n\n- following experience with ring_quotient.v, poly.v, and fraction.v\n  + btw, remove dulicate factory Zmodule_IsComRing\n- details:\n  + enforce use of historical xxxMixin notations\n    when available (ZmodMixin, RingMixin)\n  + document factories used in ring_quotient.v, poly.v, and fraction.v\n    through their Build functions:\n    - Ring_HasCommutativeMul.Build\n    - Zmodule_IsComRing.Build\n    - ComRing_HasMulInverse.Build\n    - Ring_IsIntegral.Build\n    - Zmodule_IsLmodule.Build\n    - Lmodule_IsLalgebra.Build\n    - is_ComAlgebra.Build\n\nexample on ssralg doc\n\nReexports instances in ring_quotient\n\nUnitRing.on -> ComUnitRIng.on\n\nremove local instances + restore Theory module\n\ndiagnostics in perm.v\n\nHACK: who said that by need is faster than by name?\n\nMC/master compiles with these flags\nMC/hierarchy-builder + HB *master* compiles fine\n\nthis may buy us time and unblock more files for the others\n\ncompile files after perm\n\ntests\n\nfixup perm\n\nall_fingroup compiles\n\nformat xxx.Build correctly\n\ndocument Builds in ssralg up to field excluded\n\ndocument for field in ssralg\n\nfraction.v complete\n\nssralg WIP new factory\n\nFix typos in the documentation of IsField.Build and ComRing_IsField.Build\nAdd documentation for factories for Decidable fields\nAdd documentation for a factory for algebraically closed fields\nRemove duplicate factory field_of_comring (duplicate of ComRing_IsField)\n  --> keeping the most idiomatic one.\n\nFix the HB.reexport related issues in order.v\n\nStart porting finalg.v\n\nremove redundant requirements for IsRing\n\nAdd documentation for PreZmodule.Build\n\nDone order.v except for tagnat\n\nfirst pass on order.v complete\n\nRename Ring_IsIntegral by ComUnitRing_IsIntegral and UnitRing_IsDec by Field_IsDec\n\nPorting gfunctor.v\n\nChange UnitRing_IsDec to Field_IsDec\n\nPort finalg.v\n\nStill a few issues (c.f. FIXMEs)\n\nPort commutator.v\n\nAdding doc for PreStructures in ssralg\n\nFirst pass on zmodp\n\nfix instance in zmodp\n\ncompleted first pass on zmodp\n\nunnecessary space in ssralg\n\nfix [finGroupMixin of ... for ...] notation\n\nprogress in matrix\n\nPort cyclic.v\n\nfixing finalg on top of HB PR 216\n\nsecond pass on pre-structures\n\ncenter.v ported\n\nfix the parameter of mul_comoid to avoid expansion\n\n- to preserve the semantics of rewrite\n\nprogress in matrix\n\npgroup.v ported\n\ngeseries.v done.\n\nPort nilpotent.v\n\nInsert the previous proof.\n\nprimitive_action.v ported\n\nsylow.v ported\n\nall HB.instances done in finmodule, but notations and scopes\nhave issues. some may need fixing in fingroup\n\nmatrix done\n\nOversimplified ssrnum\n\nI temporarily turned NormedZmodule norm into an absolute value, i.e.\n`normedZmodType` does not have a carrier anymore (only a display)\nand if `M : normedZmodType d`, the norm operator now has type `norm : M -> M`\ninstead of `norm : M -> R` (where `R` used to be a parameter of normedZmodType)\n\nThis makes the rest of the file (and mathcomp) portable.\nWhenever you port, please **comment out** the erased parameter `R` of normedZmodType\nrather than simply removing it...\n\nuncomment matrix + remove verbose\n\nAdding new mixin for\n\nmxalgebra done.\n\nuniform and export group instances in finalg\n\nfix finalg notations on structures with parameters\n\nForgotten Bind Scope in ssralg\n\nMinor fixes\n\njordanholder.v ported\n\n- addition of a newMixin notation\n\nFinished mxpoly\n\nOne occurrence selector had to be made explicit, but it was already strange in\nthe master branch.\n\npolyXY was not broken\n\nalt compiles\n\nburnside_app.v ported\n\nsome missing instances for regular R^o\n\nabelian\n\nsolvable\n\nStart porting ssrnum.v\n\nhall\n\nfix jordanholder\n\nFix subMixn and newMixin\n\nFirst port of vector.v\n\nUpdate subtype instances in vector.v.\n\nPort ssrnum.v\n\nwip extremal, perf problem identified but not solved\n\nCompile ssrnum.v\n\nPort frobenius.v\n\nStart porting ssrint.v\n\nfirst pass on rat\n\nForgotten exports in ssrnum.v\n\nPort intdiv.v\n\nStuck in interval\n\nFirst pass on interval\n\ninterval in Make\n\nCompile all_algebra.v\n\nStart porting closed_field.v\n\nKill one missing Canonical in vector.v.\n\nPort falgebra.v\n\nA few things not ported (waiting for port in Vector).\n\nuse HB.exxport to avoid relying on generated names *** update HB ***\n\nForgotten Bind Scope in vector.v\n\nDon't bind scope order_scope\n\nMaybe not the right solution but it wasn't binded before\nso this is more backward compatible and should ease the port.\n\nStarting character : mxrepresentation\n\nFix ssrint.v\n\nPort mxabelem.v\n\nstart fieldext\n\n- but quickly stopped in part for lack of subvs\n\ndoc fix\n\nfinish extremal\n\nadd a Bind Scope group_scope for finite groups\n\nscope fix thanks to Yves\n\ndisplaying `mulg` in the right way\n\nscope fix thanks to Yves\n\nPort extraspecial.v\n\nPorting some algebra instances, the last one segfaults.\n\nWorkaround segfault/stack overflow\n\nRemove some FIXMEs in falgebra.v\n\nuse HB.lock *** upgrade HB ***\n\nnew toolbox version\n\nPort subvs_of in vector.v\n\nbetter toolbox\n\nComplete falgebra.v\n\nPort fieldext.v\n\nPort separable.v\n\nUpdate mathcomp/algebra/mxalgebra.v\n\nUpdate mathcomp/algebra/mxpoly.v\n\nGalois compiles\n\nStill a FIXME\n\nRemove a FIXME in vector (by Cyril)\n\nstarted porting algebraics_fundamentals\n\nFix Hints in ssrnum.v\n\ndocuments the first factory in eqtype, removes uses of EqMixin in the library\n\nComplete regular instances R^o in finalg.v\n\nCodification of FIXMEs\n\nsave planB sources as an artifact\n\nfix nix\n\nMissing instance of FieldExt on regular F^o\n\nSecond pass of algebraic_fundamentals. It compiles but need fixing\n\nFixing indentation\n\ncomment the third Build\n\nFirst pass on algC, it compiles but not sure it is ok\n\nremove Print\n\nSome fixing so algnum compiles\n\nstarting classfun\n\nstuck at the construction of an algebra, where I have no nice way to\ngive the underlying ring\n\nwork around inefficiency in mxalgebra\n\nFirst pass on finfield\n\nSecond pass on classfun : it compiles\n\nFirst pass on character\n\nremove a Check\n\nremove a verbose\n\nnothing to do for inertia\n\nintegral_char goes through\n\n- modulo standard FIXMEs\n\nvcharacter goes through\n\n- module one standard FIXME\n\nall.v\n\nattempt to fix planB\n\nExport normCK\n\nRevert \"attempt to fix planB\"\n\nThis reverts commit d7616c05fc2002027cf4e9d372984df95562e87c.\n\nuse #[infer] in structure FieldExt\n\nfix one more fieldExt\n\nsilly optim\n\nimprove fix\n\neven better fix\n\nbugfix and simplifications\n\nFix mxrepresentation Canonical subType + rVval\n\nremoving some workarounds\n\nsmall simplification in poly\n\nVarious simplifications\n\nidentify (but not fix) perf issue\n\nlock matrix operations hard\n\nlocking\n\nlock separable\n\ncoq-elpi master\n\nfixup\n\nCI: fail-fast = false\n\nCI: do not run on 8.12 and 8.11\n\nlock character.cfDet\n\ngo back to regular \"kernel term sharing\" except for extreme/special groups\n\noptimize algebraic_fundamentals using let in for mixins\n\nspeedup perm by locking porbit\n\nlock generated group\n\nlock set1\n\nThe real thing would be to lock group1. The problem is that\nhints like `x \\in setT` diverge on goals like `1%g \\in 1%G`\nsince the the 1%G of the quotient group is large, and\nsetT = fun _ => true while (mem 1%G) = fun _ => eq_op x\nand Coq tries hard to see if the eq_uo of the quotient group\nis the constant function. I could not lock oneg, but set1 was\nok thanks to the inE \"abstraction\"\n\nmxabelem fixup\n\nSeveral fixes\n\n- fix several local packs\n- (eq|choice|count)Mixin -> factory\n- several global renamings\n- reorganize finalg\n- remove some raw HB.instance\n- fix finfield\n- removed superfluous content\n- use short name attributes\n- various fixes and optims\n\ntwo missing bigop lemmas\n\n- found out while working on mathcomp-analysis\n\nCo-authored-by: Cyril Cohen <cohen@crans.org>\n\ntypo when writing associativity in a comment\ngrammar error in a comment\n\ncompressing some coercions\n\nfixed broken unfold\n\nfixed GRing.unit to avoid stackoverflow\n\nfix extra unfolds\n\nissue in rat unrelated to HB\n\nswtich back to master\n\nnix update\n\nexplicit NFI\n\nuse master\n\nupdate toolbox\n\n1 line attributes, to help planB on 8.13\n\none line attributes in vector\n\nfix deprecation warnings in ssralg\n\none line attributes in galois.v to help planB on 8.13\n\nnix\n\ncleanup\n\nswitch to HB.pack\n\nignore timing files\n\nfix planB\n\nlock mxrank\n\noptim\n\nlocalize the need for unsetting term sharing\n\naestetic change\n\ncleanup/speedup mxrepresentation\n\nfix nix\n\nlock enum_rank_in, helps classfun\n\nuse #[hnf] in gproduct\n\nfix ssrint.IntDist.`| _ - _ | notation by specializing it to int\n\nfixup previous commit\n\nfix notation [vecType of]\n\nspeedup in OOthm\n\nfix missing exports\n\nrat is slow\n\nCo-authored-by: Reynald Affeldt <reynald.affeldt@aist.go.jp>\nCo-authored-by: Xavier Allamigeon <xavier.allamigeon@inria.fr>\nCo-authored-by: Yves Bertot <Yves.Bertot@inria.fr>\nCo-authored-by: Quentin Canu <qcanu17@gmail.com>\nCo-authored-by: Cyril Cohen <cohen@crans.org>\nCo-authored-by: Marie Kerjean <43064157+mkerjean@users.noreply.github.com>\nCo-authored-by: Pierre Roux <pierre.roux@onera.fr>\nCo-authored-by: Kazuhiko Sakaguchi <pi8027@gmail.com>\nCo-authored-by: Enrico Tassi <Enrico.Tassi@Inria.fr>\nCo-authored-by: thery <Laurent.Thery@inria.fr>\nCo-authored-by: Anton Trunov <anton.a.trunov@gmail.com>","date":"2023-03-09T18:11:50Z"},{"author":"proux01","committer":"proux01","hash":"453c4ffd75c69dd086aec12db5ec2fcf9f0ca5f7","message":"\"Fix\" test-suite","date":"2023-03-09T18:11:50Z"},{"author":"proux01","committer":"proux01","hash":"552d9c678f72f7e264846e1ba1fdf49d4af2cf0e","message":"Export ltEsub and leEsub","date":"2023-03-09T18:11:50Z"},{"author":"proux01","committer":"proux01","hash":"0de038b8e6fe90c00ca93204adadbc0f0021149a","message":"Update CI","date":"2023-03-09T18:11:50Z"},{"author":"CohenCyril","committer":"proux01","hash":"368518975e46ed2e3220083e29c7a9fef146de27","message":"Progress in ssrnum","date":"2023-03-09T18:11:50Z"},{"author":"CohenCyril","committer":"proux01","hash":"7f6e2bd56e5238ece59202604a1c9f9dc3f20f9a","message":"fix ssrnum","date":"2023-03-09T18:11:50Z"},{"author":"proux01","committer":"proux01","hash":"9864e2c2ec82128ccc426749e846d6f6f730e809","message":"NormedZmodule only requires a Zmodule","date":"2023-03-09T18:11:50Z"},{"author":"proux01","committer":"proux01","hash":"33da36fc6159c26734fe4ed91fd7a71f191c66e3","message":"Ssrnum requires HB master which requires Coq >= 8.15","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"0a42c2cee9fad7feec0f9fc8862badda8e4fb72d","message":"[CI] Switch to fun_instances branch of HB for Coq 8.15","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"7db92f65e31bc02d6264032f945d1f9634474c32","message":"[CI] Update HB branches","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"27866bc533d6858b92514d5421e87b86cb0ed5d1","message":"[CI] Test Analysis port to HB","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"e364cb64d8c4e732601e6dbce821280367db74aa","message":"Port to HB the Monoid hierarchy in bigop.v","date":"2023-03-09T18:15:20Z"},{"author":"affeldt-aist","committer":"proux01","hash":"04dd9c7c66e0c20da8b273390ead56a56e6e13c7","message":"_Is -> _is; _Has -> _has","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"cd2eb645e1f2f43b4b5c588a0c870f7f39011d3b","message":"Others Is -> is and Has -> has","date":"2023-03-09T18:15:20Z"},{"author":"affeldt-aist","committer":"proux01","hash":"800da128d864127ab82dbb84cb9df14e47f1f904","message":"fix naming","date":"2023-03-09T18:15:20Z"},{"author":"affeldt-aist","committer":"proux01","hash":"3a4042aadf9fd2d812a38cd6134127ead40bdd55","message":"SUB -> Sub","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"befd978d70b8ac820b8da2837b77c9bc3fdb9f2a","message":"More Is -> is, Has -> has","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"14dc526ba29256c86a6182922a0e56d7b9befd0a","message":"Port morphism hierarchy to HB\n\nStill a non forgetful inheritance issue in ssralg.v.\nWill also require a cleaning once HB.pack will be available for functions.","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"f22f50c324b3aa8e3bb0cb32c43111c55535a687","message":"Adapt to Coq 8.15 (no reversible coercions)","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"8f4ae0ced2b9b19b516fd6edfb5086d6dc55c8ff","message":"[CI] Update nix toolbox","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"bc4e3f20cd27f3253c6116377bcb973af031a1d4","message":"Port stability predicates hierarchy to HB\n\nA few details could still be cleaned up.","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"f205e1d512650334c6379be389ef89e24ba14d0e","message":"[CI] Typo in odd-order branch name","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"f1148ca4889a14376e76a2a623ee501e8259348e","message":"Use HB.pack","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"f5e00ea86c66bcff27921ae87543e47af1828abf","message":"Add compound factories","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"8a21dbbf31f5b9abda0876cd2e518fe737f3512d","message":"Adapt to math-comp/hierarchy-builder/pull/311","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"9df76c3e2be56aae07a7c6174623596319de5175","message":"Add non_forgetful_inheritance attribute\n\nAdditive and Scale are not on the same type so it seems hard to have\nany of the two embed the other.","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"2006bc15a521d0e70879295038314f714ccfccd7","message":"Fix warnings","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"334c01467333417abc88d4c5a4a19654ac40c319","message":"Attempt to port linearZ (failed)\n\nlinearZ still requires some additional /= before it\n(see the FIXME in mxpoly.v for instance).","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"76f03acde562fb2bd16e202fad9b089488e790a4","message":"Port forgotten instances","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"5d14bfdf3aeacceb1d27c016e017a0fa8a53de80","message":"[CI] Update Coq Nix toolbox","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"78b3458ce3f9283a164fab5c87b514099b5fa5ed","message":"Fix FIXMEs","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"a251e95f92b09872da350bc3778a16848c26e76b","message":"Simplify overlays","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"348be1973858f73f06606140df30b093b9542ae5","message":"Add SemiGroup to the Monoid hierarchy","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"4b46be5902e3200e972028fe2687a53ec6460d03","message":"Use type_scope in clone notations","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"bf0436ad1c929fd8c8d8a80488ec43783d72a8f3","message":"Add to morphisms an apply with phantom types\n\nThere was one in MathComp 1","date":"2023-03-09T18:15:20Z"},{"author":"CohenCyril","committer":"proux01","hash":"b076e841923aeaa6170b9890bb6573d6498dead0","message":"Finite canonicals on pcan_type and can_type","date":"2023-03-09T18:15:20Z"},{"author":"gares","committer":"proux01","hash":"ce9ae84d381d83806260591bcfd986372609fa93","message":"Update mathcomp/ssreflect/tuple.v","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"954d671c06f8670c6576cef68f579788c0a89c5d","message":"Remove no longer needed Identity Coercion\n\nThis works at least with HB 1.4.0","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"d590abbaa7e31b9664996cef5def3261f650eacf","message":"Actually remove Identity Coercion","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"3b380893145e2e752ae7d5d71ec5bbf7a25aa21c","message":"Fix a TODO","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"87f81c20306268ccaf5cad4b0fe36b933ec6f9ad","message":"Restore tests in test_regular_conv.v","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"3de5ed1714fa457fe93a3a97bded6f27425c7337","message":"Remove phantom in notations for morphism types","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"4ad304ef9260c99222d5208708279187c597abfa","message":"Fix a slowdown in polyXY.v","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"7ef9d56f9616650398d7887834e9c791a20bf8a8","message":"Improve slowdown in closed_field.v","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"1ed47aa9d1f572fb54738ebf6c9615225ebb0b0f","message":"Improve slowdown in galois.v","date":"2023-03-09T18:15:20Z"},{"author":"proux01","committer":"proux01","hash":"204c3b07ab6869e6cf9e8ef53b724672b8227723","message":"Improve slowdown in finfield.v","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"ff6fab45dfa14ba3ad01a46e27b9a38bd6648168","message":"Fix slowdowns in mxrepresentation.v","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"0f54cba3bac07662084397781baef56d980dd7ac","message":"Fix slowdowns in mxalgebra.v","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"bf8388aad5a18514ec5a055cb81d7201f1b49017","message":"Improve slowdowns in matrix.v","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"8208c9462facc2c6cc23958a48f93e97b80c88e4","message":"Fix slowdown in mxabelem.v","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"90545a56a0c3f6d25ffe0ea325f29a76ab4ffdaa","message":"Fix a slowdown in fieldext.v","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"eb4e9a37934895aa2946860b326d355cbfced7d0","message":"Remove old FIXME","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"d8da6f0462fd8104e28bc6c4055557c5bb7e476d","message":"Fix name of is_ComAlgebra factory","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"3dee76e234e8bf69e0dfdebec2cb4917034c59ae","message":"Remove an old FIXME","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"32340e53a8bd0845905d67dd1a4caec4a7b82dfc","message":"Add missing factory","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"e3afda4c37e0622f3f6533b7b26d596856783f3c","message":"Link HB issues in FIXMEs","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"b9cbfb1125de9cdaf8c2ecca53576ed3ea0be976","message":"Add zsemimodType\n\nIn preparation of adding semirings.","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"09db2ade374f963f1c630ed841e0663f8583467f","message":"Add semiRingType","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"28d97abf8877c2ac081d35b5d8ff509e8d14f278","message":"Add SemiAdditive to the ring morphism hierarchy","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"b98aa65e8f02cb66124f4907e53a8dc7e55fa924","message":"Add SRMorphism to the ring morphism hierarchy","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"b2b5ab3d1a1d629f541fd62c89156c2a1a940c72","message":"Add SubZsemimodule","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"a40837048344c3dfd95644509384a60c1de3057c","message":"Add SubSemiRing","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"0240282386d41769a7033432047e96e8d2d61390","message":"Generalize poly to semirings","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"3ffa0d1388099e47e6fc6d6c39448c80bc5dcdc0","message":"Generalize matrices to Zsemimodule","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"9fff150500953a49386a1b89d00cb4132270305e","message":"Generalize matrix to SemiRing","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"2787cabfc86b89aab274ebe53e6b803d5a541009","message":"Add TLattice structure","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"64e590d046f7e53351812d10c7754a385ba483e9","message":"Add order morphism hierarchy","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"cf990d4690dfc5edd3c10dc2f613609ea1232772","message":"Add Lattice predicate closedness hierarchy","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"4654e620cc34d361895ca5698ab29df797fbac1c","message":"Add suborder hierarchy","date":"2023-03-09T18:15:21Z"},{"author":"CohenCyril","committer":"proux01","hash":"7179a3f2a6047eb7c97dbbf7815f04deeb2fa65b","message":"Renaming misnamed factories and eliminating explicit packs","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"9081d5e76a17254c50762267aba7f686421fdbfc","message":"Forgotten export\n\nThis was forgotten two commits before.","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"1942e086ace475e6e7704ae68259a6b5f8963fc7","message":"Add MeetLatticeMorphism and JoinLatticeMorphism","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"9d2932f942c90b7374496ca5c9b498cfe77da4f5","message":"Add MeetLatticeClosed and JoinLatticeClosed","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"509f44ff1959a74a3bc0e6a541aefd2245492b3c","message":"Add MeetSubLattice and JoinSubLattice","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"461cc3330aa3de574a0b8b66f3a24ec36be3d3c4","message":"cleanup","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"27eab9c8ef8813cf7b0d8cfca86bce97d8ca7321","message":"Add missing joins in suborder hierarchy","date":"2023-03-09T18:15:21Z"},{"author":"proux01","committer":"proux01","hash":"a41f4d9a1dadbe384fd25f22c6d75cb41b7ebe52","message":"[CI] Update Nix toolbox","date":"2023-03-09T18:17:58Z"},{"author":"proux01","committer":"proux01","hash":"77098d921abf3419bb1f2b779c9fe8256959286a","message":"Remove two fixmes","date":"2023-03-09T18:17:58Z"},{"author":"gares","committer":"proux01","hash":"8945996444700a0b9b7da0af72471da437b4618c","message":"fix for 8.17, assumption is likely to be stronger","date":"2023-03-09T18:17:58Z"},{"author":"proux01","committer":"proux01","hash":"b26a034dc4ab0b690c62f110960bfafdd6669f5d","message":"Fix notation `|_ - _|","date":"2023-03-09T18:17:58Z"},{"author":"proux01","committer":"proux01","hash":"ef7e118c995b110879e2fbd645e1c6372d2b4f74","message":"Drop support for Coq 8.15","date":"2023-03-09T18:21:21Z"},{"author":"proux01","committer":"proux01","hash":"c7e258a5db404d5fdeb133fb937e9c580e6a12bd","message":"[CI] Add coquelicot overlay","date":"2023-03-09T22:57:30Z"}]}