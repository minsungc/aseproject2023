{"author":"CohenCyril","number":261,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":390,"deletions":59},{"file":"mathcomp/ssreflect/fingraph.v","status":"M","additions":390,"deletions":59},{"file":"mathcomp/ssreflect/path.v","status":"M","additions":390,"deletions":59},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":390,"deletions":59},{"file":"mathcomp/ssreflect/ssrnat.v","status":"M","additions":390,"deletions":59}],"state":"merged","open_date":"2018-12-11T10:05:25Z","update_date":"2019-11-29T09:46:43Z","discussion":[{"author":"CohenCyril","date":"2019-02-05T14:47:33Z","comment":"@ybertot do you plan to work on it in the coming weeks?"},{"author":"ybertot","date":"2019-02-08T16:02:52Z","comment":"I won't be able to work on this in the next two weeks."},{"author":"CohenCyril","date":"2019-02-28T13:40:13Z","comment":"I will address this."},{"author":"amahboubi","date":"2019-10-24T12:57:03Z","comment":"This PR has stalled for long... @ybertot @CohenCyril  what is the status of this one? We need an assignee here. @thery ? @LaurenceRideau ?"},{"author":"amahboubi","date":"2019-10-25T07:51:48Z","comment":"Ping @ybertot @CohenCyril @thery @LaurenceRideau ."},{"author":"CohenCyril","date":"2019-10-25T08:04:28Z","comment":"@amahboubi I will get this PR ready ASAP, there is not much to do. The main part missing is the changelog."},{"author":"amahboubi","date":"2019-10-25T08:16:27Z","comment":"Thanks @CohenCyril . When do you think you will work on this?\r\n"},{"author":"CohenCyril","date":"2019-10-25T08:24:09Z","comment":"Before Thursday Oct 31st"},{"author":"amahboubi","date":"2019-11-14T10:19:35Z","comment":"@CohenCyril what is your updated deadline for this PR?"},{"author":"CohenCyril","date":"2019-11-14T10:27:26Z","comment":"Sorry about that, my updated deadline is November 15th."},{"author":"amahboubi","date":"2019-11-14T10:32:22Z","comment":"Tomorrow?"},{"author":"CohenCyril","date":"2019-11-14T11:43:06Z","comment":"> Tomorrow?\r\n\r\nyes"},{"author":"CohenCyril","date":"2019-11-15T15:07:14Z","comment":"update, I cannot do it for today :disappointed: \r\nNew estimate:  November 19."},{"author":"CohenCyril","date":"2019-11-19T11:37:14Z","comment":"@amahboubi ready for re-reviewing."},{"author":"amahboubi","date":"2019-11-25T16:06:00Z","comment":" This PR is a milestone for Dec. 1st. There are indeed two options:\r\n1) merge as is, be part of the release, and open an issue to fix @pi8027 's remark\r\n2) delay the merge after the release.\r\n\r\n@pi8027 do you agree with 1)?"},{"author":"pi8027","date":"2019-11-25T16:14:28Z","comment":"@amahboubi @CohenCyril I agree with option 1."},{"author":"amahboubi","date":"2019-11-26T15:25:50Z","comment":"This is great, but please keep in mind that the next milestone is due Dec. 1st."},{"author":"CohenCyril","date":"2019-11-27T00:07:12Z","comment":"@pi8027 @amahboubi I did the generalizations that arose from @pi8027 comments."},{"author":"CohenCyril","date":"2019-11-27T14:17:06Z","comment":"@amahboubi @pi8027 comments taken into account except for https://github.com/math-comp/math-comp/pull/261#discussion_r351115595 and squashed my commits (cannot squash further without losing ownership)"},{"author":"amahboubi","date":"2019-11-27T14:19:05Z","comment":"@pi8027 can you open an issue for the remaining comment not addressed by the PR? I will then do the merge."},{"author":"CohenCyril","date":"2019-11-27T14:36:37Z","comment":"I am a bit puzzled by the absence of CI on my latest force pushes...\r\n(Fixed manually)"},{"author":"pi8027","date":"2019-11-27T15:46:42Z","comment":"@amahboubi @CohenCyril I opened a dedicated issue #442 for the remaining comment."},{"author":"CohenCyril","date":"2019-11-28T11:47:50Z","comment":"gitlab CI is down... https://status.gitlab.com/"},{"author":"ybertot","date":"2019-11-29T09:00:56Z","comment":"@amahboubi, @CohenCyril, @pi8027 thank you all for the great work.  Should I understand that the PR is now ready for merge.  I wish to prepare the release today."},{"author":"pi8027","date":"2019-11-29T09:16:18Z","comment":"@ybertot IMO, this PR is good enough to merge as it is. However, since I contributed the second commit of this PR, I am probably not in a position to approve this PR."}],"review_discussion":[{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-23T12:01:43Z","comment":"This script is broken. I think `orbit_stable` has been renamed to `orbit_homo`."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-23T14:36:06Z","comment":"Thanks!"},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T08:11:51Z","comment":"The `core` hint database should be specified here."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T08:25:10Z","comment":"Shouldn't this change be documented in CHANGELOG? `{in S, forall x i, iter i f x \\in S}` and `forall i, {homo iter i f : x / x \\in S}` are inconvertible. Also, I think it's better to relocate `iter_in` to `ssrnat`."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T08:28:32Z","comment":"`apply:` or `exact:`."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T10:28:24Z","comment":"This lemma doesn't depend on `Up : uniq p` as in `fconnect_cycle`. So I think it's better to move it to right after `fconnect_cycle` and to change the comment before `fconnect_cycle` to indicate this fact. Since this lemma seems to be a variant of `next_cycle` that is specific to `fcycle`, I think it's better to name it `nextEfcycle` or `next_fcycle`. Also there is a simpler proof: `exact/esym/eqP/(next_cycle f_p).`"},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T10:32:03Z","comment":"There is a shorter proof: `by move=> x y xp yp /(congr1 (prev p)); rewrite -!nextEcycle ?prev_next.`"},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T14:26:59Z","comment":"Can't we avoid these `: Prop` by redefining the `[<-> ...]` notation? e.g.:\r\n```coq\r\nNotation \"[ '<->' P0 ; P1 ; .. ; Pn ]\" :=\r\n  (all_iff P0 (@cons Prop P1 (.. (@cons Prop Pn nil) ..)))\r\n  (at level 0, format \"[ '<->' '['  P0 ;  '/' P1 ;  '/'  .. ;  '/'  Pn ']' ]\")\r\n  : form_scope.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T14:39:22Z","comment":"`: core`."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T14:39:44Z","comment":"`: core`."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T14:39:55Z","comment":"`: core`."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T14:40:10Z","comment":"`: core`."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-24T14:40:24Z","comment":"`: core`."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-25T14:10:47Z","comment":"I simplified the name to `nextE` in the end."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-25T14:10:57Z","comment":"Thanks"},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-25T15:10:39Z","comment":"Currently, `prevE` does depend on `Up : uniq p`.\r\n```\r\nprevE\r\n     : forall p : seq T, fcycle f p -> uniq p -> forall x : T, x \\in p -> prev p x = finv x\r\n```\r\nIf `prevE` shouldn't use `Up`, `f_finv_cycle` probably shouldn't depend on `Up` too because the proof of `prevE` uses `f_finv_cycle`. (I didn't check whether it's possible to drop this hypothesis or not.)\r\n```\r\nf_finv_cycle\r\n     : forall (T : finType) (f : T -> T) (p : seq T),\r\n       fcycle f p -> uniq p -> {in p, cancel (finv f) f}\r\n```\r\nFurthermore, it's better to split the `orbit_cycle` section into two sections to prevent unexpected uses of `Up`."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-25T15:57:04Z","comment":"@pi8027 it is not obvious that `prevE` and `f_finv_cycle` do not depend on `Up`. I believe there is an alternative proof of this fact, which I may develop in the coming days, using the conjecture that `fcycle f p -> fcycle f (undup p)`.\r\nMeanwhile we may merge the PR with extra assumptions and remove assumptions later on, shouldn't we?"},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T00:52:06Z","comment":"`nextE` does not use the finiteness of `T` and should probably be relocated to `path.v`."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T01:21:51Z","comment":"`inj_cycle` and `homo_cycle` do not use the finiteness of `T`."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T13:35:05Z","comment":"Thanks! And I also managed to get rid of `uniq p` hypothesis in `inj_cycle`."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T13:38:37Z","comment":"Since I found a way to replace the hypothesis `uniq p` of `prev_next` with `fcycle f p`, I can address this. But I'm not sure it's a good idea to generalize `prev_next` (and `next_prev`) like this."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T13:43:07Z","comment":"Oh really! We probably duplicated this generalization effort. ðŸ˜‚"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T14:11:40Z","comment":"And I am almost there for `fcycle f (undup p)` and many other generalizations..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T15:22:45Z","comment":"I do not think so... "},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T23:56:02Z","comment":"done"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T23:56:16Z","comment":"done"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-26T23:56:57Z","comment":"I believe I generalized all possible lemmas that occur in this PR..."},{"author":"pi8027","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T00:17:08Z","comment":"`pathE` -> `fpathE` and `pathP` -> `fpathP`."},{"author":"pi8027","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T04:18:25Z","comment":"We may merge this line with \"Added lemmas `nextE`, `mem_fcycle` and `inj_cycle` in `path.v`\"."},{"author":"pi8027","file":"mathcomp/ssreflect/path.v","date":"2019-11-27T04:24:16Z","comment":"There is a one-liner proof: `Proof. by elim: m => //m IHm in x *; rewrite addSn !trajectS IHm -iterSr. Qed.`"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2019-11-27T04:56:33Z","comment":"Here is a simpler proof that doesn't use `undup_rcons`:\r\n```coq\r\nelim: s => //= x s ->; rewrite mem_cat.\r\nby case: (x \\in s) => //=; case: (x \\in t).\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T05:30:48Z","comment":"Since this `orbit_cycle` section doesn't introduce any variable and hypothesis, you may remove it."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T05:43:24Z","comment":"The first pair of parentheses can be removed: `fcycle f (orbit x)`."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T05:45:20Z","comment":"Parentheses right after `&&` can be removed."},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2019-11-27T05:56:42Z","comment":"I think `flatten (nseq n s)` is easier to understand than `iter n (cat s) [::]` but I'm not sure which one is better."},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T06:33:43Z","comment":"This lemma can be generalized to non-`frel` graphs:\r\n```coq\r\n(* after `Lemma path_connect` *)\r\nLemma connect2cycle p : cycle e p -> {in p &, forall x y, connect x y}.\r\nProof.\r\nmove=> e_p x y p_x p_y; case/splitPr: p_x p_y e_p => {p} p1 p2.\r\nby rewrite mem_cat inE => /or3P [|/eqP -> //|] /splitPr [] ? ?;\r\n  rewrite cycle_catC /= => /path_connect; apply;\r\n  rewrite !(inE, mem_rcons, mem_cat) eqxx /= !orbT.\r\nQed.\r\n```\r\nwhere `cycle_catC` is:\r\n```coq\r\ncycle_catC\r\n     : forall (T : Type) (e : rel T) (p1 p2 : seq T), cycle e (p1 ++ p2) = cycle e (p2 ++ p1)\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T06:39:18Z","comment":"Also one may generalize this lemma by generalizing `order` to non-`frel` graphs (it means the number of reachable elements). But I think this is good enough to merge as it is."},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T10:38:43Z","comment":"done"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T10:38:48Z","comment":"done"},{"author":"CohenCyril","file":"mathcomp/ssreflect/path.v","date":"2019-11-27T10:38:53Z","comment":"thanks"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-11-27T10:38:58Z","comment":"thanks"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T10:39:08Z","comment":"done"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T10:39:20Z","comment":"done"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-11-27T10:39:30Z","comment":"I agree."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T10:39:45Z","comment":"Let's open an issue to do that later on?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T10:39:52Z","comment":"Let's open an issue to do that later on?\r\n\r\n"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T12:12:51Z","comment":"ok I did it, but without `cycle_catC`"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2019-11-27T12:34:50Z","comment":"But I still added it"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2019-11-28T14:36:01Z","comment":"Actually this `do !` seems to repeat infinitely in Coq 8.10 and master. Here is a fix:\r\n```coq\r\nProof. by elim: s => //= x s ->; rewrite mem_cat; do 2 case: in_mem => //=. Qed.\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-11-28T14:47:35Z","comment":"AAah great!"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"commits":[{"author":"ybertot","committer":"CohenCyril","hash":"366b93a0d3b189340eb6a00f63970ee854a99e12","message":"adds relevant theorems when fcycle f (orbit f x) and the needed lemmas","date":"2019-11-28T14:49:01Z"},{"author":"pi8027","committer":"CohenCyril","hash":"a01060b646bb86735807aedc54453f96a5b87034","message":"Generalize f_step lemmas","date":"2019-11-28T14:49:01Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"3824355e20110aa574f305c0d9635b4a26b9a45a","message":"Generalizations, shorter proofs, bugfixes, CHANGELOG\n\n- changelog, renamings and comments\n- renaming `homo_cycle` to `mem_fcycle` and other small renamings\n- name swap `mem_orbit` and `in_orbit`\n- simplifications\n- generalization following @pi8027's comment\n- Getting rid of many uniquness condition in `fingraph.v`\n- added cases to the equivalence `orbitPcycle`\n- added `cycle_catC`","date":"2019-11-28T14:49:47Z"}]}