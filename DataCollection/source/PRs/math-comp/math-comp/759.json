{"author":"ejgallego","number":759,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":6,"deletions":0},{"file":"mathcomp/ssreflect/bigop.v","status":"M","additions":6,"deletions":0}],"state":"merged","open_date":"2021-06-30T14:03:44Z","update_date":"2021-07-01T14:30:17Z","discussion":[{"author":"ejgallego","date":"2021-07-01T09:30:59Z","comment":"Thanks for the comments, good catch about the monoid identity, indeed it should be this way."}],"review_discussion":[{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2021-06-30T14:59:25Z","comment":"@ejgallego would that be a problem for you to require the extra constraint that `op` a commutative monoid?"},{"author":"ejgallego","file":"mathcomp/ssreflect/bigop.v","date":"2021-06-30T15:55:32Z","comment":"No problem at all I think, PR and commit message updated, thanks!\r\n\r\nNow that we have added the commutativity condition on the operator, we could do the proof of this with `big_enumP`, but IMHO it is not worth, but let me know if you would like us to do so."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2021-06-30T17:24:05Z","comment":"No, as long as it is in the file `bigop.v` it's ok to keep this proof. I just do no want to commit to a particular order in the enumeration of `bool` for now... This theorem will stay valid whatever the enumeration."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2021-06-30T17:25:11Z","comment":"BTW, there is no need for the `E`, I think `big_bool` is a good enough name."},{"author":"ejgallego","file":"mathcomp/ssreflect/bigop.v","date":"2021-06-30T21:30:54Z","comment":"Indeed, that was the original name @Amel-Kebbouche picked :) Will amend tomorrow."},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2021-07-01T05:35:24Z","comment":"```suggestion\r\n- in `bigop.v`, added lemma `big_bool`.\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2021-07-01T05:35:33Z","comment":"```suggestion\r\nLemma big_bool R (idx : R) (op : Monoid.com_law idx) (F : bool -> R):\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2021-07-01T05:40:48Z","comment":"BTW since `op` is now a monoid law this can be:\r\n```suggestion\r\n  \\big[op/idx]_(i : bool) F i = op (F true) (F false).\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2021-07-01T05:43:53Z","comment":"```suggestion\r\nProof. by rewrite /index_enum !unlock mulm1. Qed.\r\n```\r\n(untested)"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"ejgallego","committer":"ejgallego","hash":"a15c69a225b4e4a9b2b6242763b95e322825eb35","message":"[bigop] Add lemma for boolean enumeration in bigops\n\nIn some cases, such as in the proof in [1], when we have a bigop\nover the boolean enumeration, we need to open the implementation\ninternals which is not optimal and moreover fragile.\n\nWe instead provide a helper lemma that expands a bigop over the\nbooleans with a concrete enumeration, and which is more\nstraightforward to use than `big_enumP`.\n\nNote we require commutativity of the operator, this is to safeguard\nagainst changes on the low-level `bool_enumP` enumeration.\n\n[1] https://github.com/math-comp/analysis/blob/7b53e30b53b96e5eb3cabe476b0191353191b52c/theories/altreals/distr.v#L336\n\nCo-authored-by: Amel Kebbouche <akebbouc@outlook.fr>","date":"2021-07-01T09:30:17Z"}]}