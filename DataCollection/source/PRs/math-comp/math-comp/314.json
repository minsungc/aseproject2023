{"author":"pi8027","number":314,"diff_summary":[{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":24,"deletions":0}],"state":"closed","open_date":"2019-03-27T12:39:13Z","update_date":"2019-04-08T12:17:43Z","discussion":[{"author":"pi8027","date":"2019-04-03T14:02:53Z","comment":"@CohenCyril If you need to fix and merge this PR asap, I'd like to give you ownership of it. I may not be able to work on this in this week."},{"author":"CohenCyril","date":"2019-04-04T08:21:47Z","comment":"> @CohenCyril If you need to fix and merge this PR asap, I'd like to give you ownership of it. I may not be able to work on this in this week.\r\n\r\nok taking ownership now"},{"author":"ggonthier","date":"2019-04-04T08:28:22Z","comment":"Actually, I've been working on a bit of refactoring of `seq` while looking into implementing some of @MrSet's suggestions #299, which has uncovered a few loose threads in `seq`: missing implicits and documentation. I've also got @pi8027 's `allpairs` extension in, so perhaps I can do the hijacking (leaving out the `permutations` development, which requires a bit more work)."},{"author":"CohenCyril","date":"2019-04-04T11:14:55Z","comment":"> Actually, I've been working on a bit of refactoring of `seq` while looking into implementing some of @MrSet's suggestions #299, which has uncovered a few loose threads in `seq`: missing implicits and documentation. I've also got @pi8027 's `allpairs` extension in, so perhaps I can do the hijacking (leaving out the `permutations` development, which requires a bit more work).\r\n\r\nDo you think it will be ready soon? with @gares we planned to release this afternoon..."},{"author":"CohenCyril","date":"2019-04-04T11:16:37Z","comment":"PS: I did not see your comment, so I did this: https://github.com/CohenCyril/math-comp/blob/allpairs-lemma/mathcomp/ssreflect/seq.v"},{"author":"ggonthier","date":"2019-04-04T11:34:03Z","comment":"I've been working on a separate branch, which I've just published (sew-permutations-allpairs). I'm just checking the MC compile, then you can either push it here or turn it into a PR that replaces this one.\r\n"},{"author":"ggonthier","date":"2019-04-04T11:37:58Z","comment":"There are still improvements I want to explore with `permutations`, but that can become a later PR."},{"author":"CohenCyril","date":"2019-04-04T12:04:23Z","comment":"> I'm just checking the MC compile\r\n\r\nIt does not compile.\r\nCould you please submit a PR rebased on master?"},{"author":"ggonthier","date":"2019-04-04T12:10:35Z","comment":"I did notice, and I'm digging into it because I am merged with master, and things break in an unrelated file."},{"author":"ggonthier","date":"2019-04-04T12:46:19Z","comment":"Fine, @CohenCyril, it's rebased and compiles. Not sure what happened in `primitive_action`; could be an issue with `trivial` rather than `intro`.\r\n   On a separate issue, would it be possible for `hierarchy_test` _NOT_ to dump tons of diagnostics on successful compilations?"},{"author":"CohenCyril","date":"2019-04-04T12:51:59Z","comment":"> On a separate issue, would it be possible for `hierarchy_test` _NOT_ to dump tons of diagnostics on successful compilations?\r\n\r\nyes!"},{"author":"CohenCyril","date":"2019-04-04T13:42:21Z","comment":"Dear @ggonthier, the branch https://github.com/math-comp/math-comp/compare/seq-permutations-allpairs looks like it is *merged* with master and not *rebased* on it.\r\nAdditionally it is failing because of the use of the new ssreflect clear behavior, which was not yet available in 8.7 and 8.8 (we are dropping support for 8.6 in PR #321)."},{"author":"CohenCyril","date":"2019-04-04T14:10:55Z","comment":"> > On a separate issue, would it be possible for `hierarchy_test` _NOT_ to dump tons of diagnostics on successful compilations?\r\n> \r\n> yes!\r\n\r\nI addressed it in #323 "},{"author":"ggonthier","date":"2019-04-04T15:05:00Z","comment":"I've rebased (turns out git had inserted a no-op back merge of the remote, which threw off any further rebasing) and turned a branch into a PR, so I can tell where the offending clear is...\r\nI'll probably en up using the auto squash, since my git -i install on macOS is broken (sic)."},{"author":"CohenCyril","date":"2019-04-04T15:10:40Z","comment":"> I'll probably en up using the auto squash, since my git -i install on macOS is broken (sic).\r\n\r\nI can squash it for you. (I will also chase spurious spaces (some remained in your previous commits))\r\n\r\nAlso, I think you did not take into account my last remark:\r\n\r\n> Additionally it is failing because of the use of the new ssreflect clear behavior, which was not yet available in 8.7 and 8.8 (we are dropping support for 8.6 in PR #321).\r\n\r\nso the CI will fail again on 8.7 and 8.8..."},{"author":"ggonthier","date":"2019-04-04T15:12:35Z","comment":"I did - I'm waiting for the CI to fail so I know what to fix."},{"author":"CohenCyril","date":"2019-04-04T15:14:34Z","comment":"> I did - I'm waiting for the CI to fail so I know what to fix.\r\n\r\nI know what to fix:\r\n\r\n```coq\r\n-elim: s => //= x s IHs /andP[s'x {}/IHs-IHs]; rewrite factS -IHs mulnC.\r\n+elim: s => //= x s IHs /andP[s'x /IHs-{IHs}IHs]; rewrite factS -IHs mulnC.\r\n```\r\n \r\n```coq\r\n-  by move=> m n /subnK<-; elim: {n}(n - m) => // n IHn {}/IHn; apply: PsS.\r\n+  by move=> m n /subnK<-; elim: {n}(n - m) => // n IHn /IHn; apply: PsS.\r\n```"},{"author":"CohenCyril","date":"2019-04-04T15:15:54Z","comment":"maybe you want to fix it in a slightly different way so that no *duplication of clear* warnings are triggered on Coq 8.9 :laughing: "},{"author":"ggonthier","date":"2019-04-04T15:22:40Z","comment":"Ok, fixed (blindly)."},{"author":"ggonthier","date":"2019-04-04T15:58:43Z","comment":"Please do go ahead, then, by all means."}],"review_discussion":[{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-04-03T12:28:46Z","comment":"I think one can omit the `_dep_` here since high order unification in the non-dependent case will fall in Miller pattern unification while rewriting both ways... @ggonthier am I right?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-04-03T12:29:03Z","comment":"same here"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-04-03T12:45:15Z","comment":"the proof is a one liner but the statement can be generalized:\r\n```coq\r\nLemma eq_in_allpairs R (f g : forall x, T x -> R) s t :\r\n  (forall x, x \\in s -> {in t x, f x =1 g x}) <->\r\n  [seq f x y | x <- s, y <- t x] = [seq g x y | x <- s, y <- t x].\r\nProof.\r\nsplit=> fg; first by congr (flatten _); do 2!apply/eq_in_map=> ??; apply: fg.\r\nmove=> x xs; apply/eq_in_map; apply/eq_in_map: x xs.\r\napply: eq_from_flatten_shape => //.\r\nby rewrite /shape -!map_comp/=; apply: eq_map => x/=; rewrite !size_map.\r\nQed.\r\n```\r\nand specialized to extensional equality everywhere\r\n```coq\r\nLemma eq_allpairs R (f g : forall x, T x -> R) s t : (forall x, f x =1 g x) ->\r\n  [seq f x y | x <- s, y <- t x] = [seq g x y | x <- s, y <- t x].\r\nProof. by move=> fg; apply/eq_in_allpairs => ????; apply: fg. Qed.\r\n```\r\n"},{"author":"ggonthier","file":"mathcomp/ssreflect/seq.v","date":"2019-04-03T13:13:08Z","comment":"Correct; also, this should go straight in the `AllPairsDep` section, and the proof should be `rewrite -map_comp`."},{"author":"ggonthier","file":"mathcomp/ssreflect/seq.v","date":"2019-04-03T13:18:38Z","comment":"Likewise, and the proof should be `rewrite -(eq_map (fun=> map_comp _ _))`\r\nAlso, the `allpairs_comp` lemma should be taken out of the section, proved with `rewrite map_flatten allpairs_mapl allpairs_mapr.`, replaced by its converse (exchanging LHS and RHS), and renamed `map_allpairs`: it cannot be used left-to-right, because the `funcomp` constant does not appear."},{"author":"ggonthier","file":"mathcomp/ssreflect/seq.v","date":"2019-04-03T13:23:18Z","comment":"That's not right, because `eq_allpairs` should not require `T : eqType`.\r\nAlso, there is a point to have a non-dependent version of `eq_in_allpairs`, because the function equality can be stated differently in this case as `{in s & t, f =2 g}`, so the lemma above should be called `eq_in_allpairs_dep`."},{"author":"ggonthier","file":"mathcomp/ssreflect/seq.v","date":"2019-04-03T13:27:47Z","comment":"Also, I strongly object to your practice of juxtaposing `?` patterns as in `????` above:\r\n(a) This is inviting trouble should either Coq or user libraries define a `??` symbol.\r\n(b) It forgoes a basically free opportunity to better document the proof script."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2019-04-03T13:48:58Z","comment":"> renamed `map_allpairs`:\r\n\r\nbecause of this, I suggest this goes in 1.8.0 in order not to introduce backward incompatibilities with a future 1.8.1 version"}],"tags":[],"commits":[{"author":"pi8027","committer":"pi8027","hash":"9e2a9d338cd8d29bdce972423f40a290e20d4be9","message":"Add allpairs_dep_map(l|r) and eq_in_allpairs","date":"2019-04-02T08:47:40Z"}]}