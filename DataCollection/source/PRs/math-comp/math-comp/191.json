{"author":"gares","number":191,"diff_summary":[{"file":"mathcomp/field/separable.v","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2018-04-16T14:28:38Z","update_date":"2018-04-23T08:54:45Z","discussion":[{"author":"amahboubi","date":"2018-04-16T14:41:11Z","comment":"The general idea sounds great to me, but there is one thing I do not understand in the change then: shouldn't it be {}/Ks?"},{"author":"amahboubi","date":"2018-04-16T14:42:51Z","comment":"Oh sorry now I understand: this commit is compatible with both and {}/Ks will only be available once your simplification is merged. Sorry for the noise."},{"author":"CohenCyril","date":"2018-04-19T08:16:24Z","comment":"It sounds okay to me to expect a variable cannot be used after it is cleared. In all of my personnal use-cases, delayed clear is used only to wait for the variable not to be used anymore"}],"review_discussion":[],"tags":[],"commits":[{"committer":"web-flow","hash":"fd5f56c9861e6d1f4619f1306b0badc2a5c3f53c","message":"[separable] put clear switch near view\n\nDear devs, in an attempt to simplify the code of intro patterns we came up with a proposal that:\r\n- simplifies the code of the plugin\r\n- breaks only one line in the entire mathcomp, the one fixed by this patch.\r\n\r\nThe code we want to simplify is the one deferring clear switches inside an intro pattern.\r\nThe implementation is tricky because just delaying the clear switch until the end of the pattern is not enough, for example:\r\n```\r\nmove=> {x} /andP[x y].\r\n```\r\nIn this case `x` is both cleared and used. In order to be able to use `x`, given that the clear has not been performed yet, we rename `x` into `_x_` (when `{x}` is executed) so that when `x` is later executed we can use the name `x`, and then `.` is executed clear `_x_` instead of `x`.\r\n\r\nSo systematically \"always rename now & clear later\" seem to be OK, but it is not. The extra complication is that \"rename\" may break later intro pattern using terms as views. Eg\r\n```\r\nmove=> {x} /andP[Ha Hb] /x.\r\n```\r\nWhat the code does today is:\r\n- when `{x}` is execute look-ahead in the patter and see if `x` is used as a name to be introduced\r\n- if so, \"rename\"\r\n- otherwise don't rename (just delay)\r\nThis way of doing things is not only complicated but also incomplete, Eg\r\n```\r\nmove=> {x} /orP[x | /x].\r\n```\r\nwould misbehave, since the look-ahead is not \"semantic\".\r\n\r\nAnyway, the proposed behavior is:\r\n- `{x}` always renames now and clears (the renamed) later\r\n- `{clears}/views` is always \"compiled\" as `/views{clears}` (most of the occurrences in the library are ok with this simpler rule, but for the one fixed in this PR).\r\n- bonus: support `{}/view` (as in `rewrite {}rule`) to signal that the immediately following `view` has to be cleared, that is `{}/v` compiled as `/v{v}`.\r\n\r\nWhat do you think?\r\n```\r\n```","date":"2018-04-16T14:25:09Z"}]}