{"author":"thery","number":823,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":211,"deletions":6},{"file":"mathcomp/ssreflect/prime.v","status":"M","additions":211,"deletions":6}],"state":"merged","open_date":"2021-11-24T02:44:37Z","update_date":"2021-12-10T15:48:05Z","discussion":[{"author":"thery","date":"2021-11-24T02:47:08Z","comment":"I've tried to merge what I had and what @clayrat had. "},{"author":"thery","date":"2021-11-24T02:52:08Z","comment":"need help to improve theorem names ..."},{"author":"proux01","date":"2021-11-24T09:18:32Z","comment":"Is there a good reason for this to be specific to 2?"},{"author":"clayrat","date":"2021-11-24T12:34:54Z","comment":"It appears in complexity theory (required number of bits, various bounds for binary tree-like structures), is often included in standard libraries as a primitive (eg, in C and Matlab), and interacts nicely with 2-based special cases that Mathcomp already has (e.g. `.*2` or `./2`)."},{"author":"thery","date":"2021-11-24T21:32:42Z","comment":"@proux01 ok I've tried to generalize, not sure my assumptions are minimal"},{"author":"thery","date":"2021-12-06T15:03:32Z","comment":"> ```coq\r\n> Lemma up_log_trunc_log p n : 1 < p -> (up_log p n).-1 = trunc_log p n.-1.\r\n> Proof.\r\n> move=> p_gt1.\r\n> case: (leqP (up_log p n) 0).\r\n>   rewrite leqn0 up_log_eq0 leqNgt p_gt1 /=.\r\n>   case: n => [_|[_|//]] /=; first by rewrite up_log0.\r\n>   by rewrite up_log1.\r\n> rewrite up_log_gt0 => /andP[_ n_gt1].\r\n> apply: succn_inj; rewrite prednK ?up_log_gt0 ?p_gt1//.\r\n> apply: up_log_eq => //.\r\n> rewrite -[n]prednK ?ltnS -?pred_Sn ?[0 < n]ltnW//.\r\n> by rewrite trunc_logP ?ltn_predRL// trunc_log_ltn.\r\n> Qed.\r\n> ```\r\n@proux01 Completly overlooked there was such a simple relation. I have added in a slighty different form. Look if it is ok\r\n"},{"author":"proux01","date":"2021-12-06T15:44:19Z","comment":"> I have added in a slighty different form. Look if it is ok\r\n\r\nNice, your form seems much more usable.\r\n"},{"author":"thery","date":"2021-12-06T16:22:58Z","comment":"@proux01 changed the def of `trunc_log`, a bit scare it breaks something :crossed_fingers: "},{"author":"thery","date":"2021-12-06T22:13:04Z","comment":"@proux01 @CohenCyril do you have any idea why `coqeal` is not compiling?"},{"author":"proux01","date":"2021-12-07T07:58:57Z","comment":"There seems to be a dependency issue (missing dependency to real_closed, added recently), maybe we should update the coq-nix-toolbox? (there is still a bit of dark magic there for me)"},{"author":"proux01","date":"2021-12-07T10:46:33Z","comment":"@thery CI should be fixed https://github.com/math-comp/math-comp/pull/826 (except for bigenough on Coq master https://github.com/math-comp/bigenough/pull/5 ), please rebase"},{"author":"thery","date":"2021-12-07T10:53:29Z","comment":"@proux01 Did it. Hope not to get 30 \"failing\" emails like before :roll_eyes:  "},{"author":"thery","date":"2021-12-07T13:20:47Z","comment":"@proux01 Thanks. Seems pretty good only 6 failures but they seem unrelated"},{"author":"proux01","date":"2021-12-07T15:54:24Z","comment":"Indeed, all failures are due to bienough not being compatible with Coq master (c.f. https://github.com/math-comp/bigenough/pull/5 ) so I'll merge by the end of the week if there is no further comment.\r\n\r\nBTW, you may want to remove `trunc_log0n` and `trunc_log1n` since it's now the definition."},{"author":"proux01","date":"2021-12-10T12:14:09Z","comment":"@thery I was about to merge when I realised there seems to be a bunch of unrelated things in the diff of  `CHANGELOG_UNRELEASED.md`, a rebase issue?\r\n"},{"author":"thery","date":"2021-12-10T15:35:51Z","comment":"@proux01 my bad, I've used the github web-interface to fix the conflict and I've clearly messed up. Should be ok now."}],"review_discussion":[{"author":"clayrat","file":"mathcomp/ssreflect/prime.v","date":"2021-11-24T12:37:42Z","comment":"Looks like an extra `_up` & formatting is off"},{"author":"thery","file":"mathcomp/ssreflect/prime.v","date":"2021-11-24T21:31:24Z","comment":"corrected"},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-11-25T08:26:44Z","comment":"Would we also want `0 < up_log p n -> 1 < p` and `0 < up_log p n` which might be more convenient to rewrite `1 < p` or ` 1 < n` to `true`?"},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-11-25T08:29:56Z","comment":"Has the alternative definition such that `p ^ k.-1 <= n < p ^ k` been considered? It may be more convenient, for instance to retrieve the \"required number of bits\" to encode a number (as noted by @clayrat )."},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-11-25T08:33:43Z","comment":"The name may suggest the presence of a minimum, maybe `up_log_ub` or `up_log_le` but I'm not good at names."},{"author":"thery","file":"mathcomp/ssreflect/prime.v","date":"2021-11-25T12:49:09Z","comment":"my idea was to generalize in such a way that I would be the \"proper\" when instanciating with p=2 and with simplification"},{"author":"thery","file":"mathcomp/ssreflect/prime.v","date":"2021-11-25T12:49:14Z","comment":"My main source is the AKS formalzation where they use the round up of the real log. I guess it is pretty standard but I am not an expert. Yours is simply `(trunc_log _).-1`"},{"author":"thery","file":"mathcomp/ssreflect/prime.v","date":"2021-11-25T12:50:03Z","comment":"I just mimic the names that were given in the `trunc_log` but I agree I will have a hard remembering the name "},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-11-25T12:56:54Z","comment":"Indeed, we can then ignore my comment."},{"author":"thery","file":"mathcomp/ssreflect/prime.v","date":"2021-11-25T15:11:27Z","comment":" The `ub` suffix does not seem to be used in the library. I like `up_log_le` or maybe `up_log_leq`. We should also rename `trunc_log_max` then. Another name I find weird is `trunc_logP`."},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-12-04T17:36:37Z","comment":"```suggestion\r\nLemma up_log_eq p n k : 1 < p -> p ^ n < k <= p ^ n.+1 -> up_log p k = n.+1.\r\nProof.\r\nmove=> p_gt1 /andP[npLk kLpn]; apply/anti_leq.\r\nrewrite up_log_min //= -(ltn_exp2l _ _ p_gt1).\r\nby apply: leq_trans npLk (up_logP _ _).\r\ned.\r\n```"},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-12-04T17:39:31Z","comment":"```suggestion\r\nLemma up_logMp p n : 1 < p -> 0 < n -> up_log p (p * n) = (up_log p n).+1.\r\nProof.\r\ncase: p => [//|p] p_gt0.\r\ncase: n => [//|[|n]] _; first by rewrite muln1 up_lognn// up_log1.\r\napply: up_log_eq => //.\r\nrewrite expnS leq_pmul2l// up_logP// andbT.\r\nrewrite -[up_log _ _]prednK ?up_log_gt0 ?p_gt0 //.\r\nby rewrite expnS ltn_pmul2l// up_log_gtn.\r\nQed.\r\n```"},{"author":"thery","file":"mathcomp/ssreflect/prime.v","date":"2021-12-06T15:05:19Z","comment":"Added"},{"author":"proux01","file":"CHANGELOG_UNRELEASED.md","date":"2021-12-06T15:50:54Z","comment":"```suggestion\r\n  + theorems `trunc_log0`, `trunc_log1`, `trunc_log_eq0`,\r\n```\r\n`trunc_logP` was already there (it only moved by a few lines, no idea why)"},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-12-06T15:53:00Z","comment":"BTW, the last part seems incorrect (at least for p = 0, according to `trunc_log0n`), should we fix the doc? (it also doesn't tell anything about p = 1) or the definition?"},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-12-06T15:57:57Z","comment":"bikeshedding\r\n```suggestion\r\nProof. by move=> ? ?; rewrite up_log_trunc_log. Qed.\r\n```"},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-12-06T15:58:20Z","comment":"bikeshedding too\r\n```suggestion\r\nLemma up_log2_double n : 0 < n -> up_log 2 n.*2 = (up_log 2 n).+1.\r\nProof. by move=> n_gt0; rewrite -mul2n up_logMp. Qed.\r\n```"},{"author":"thery","file":"mathcomp/ssreflect/prime.v","date":"2021-12-06T16:12:02Z","comment":"I would prefer to change the def so that it is 0 when it does not make sense"},{"author":"proux01","file":"mathcomp/ssreflect/prime.v","date":"2021-12-06T16:26:22Z","comment":"last bikeshedding\r\n```suggestion\r\n(*  trunc_log p m == the largest e such that p ^ e <= m, or 0 if p <= 1 or    *)\r\n```"}],"tags":[],"commits":[{"author":"thery","committer":"thery","hash":"62af88580709b83bb6032ed86051d6fd5fc4d7a8","message":"adding logarithm in base 2","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"dc6eb1a169fc23ce5eaa4a7e89184c27f6380217","message":"log2n -> log2n_up","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"c358743928b926605626ec8832981cc2a2e5c6da","message":"generalize up_log2 -> up_log p","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"aee55f1f9404ea8c520fc53f5d0d8c5e6be2dd53","message":"Adding Pierre's comment","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"a55f37ff5f2f41df279366fc7b531790824bb414","message":"Adding more Pierre's comments","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"1abdd0b9b76b6761bc5e031e48694604e4f8b75a","message":"typo","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"bb58d4ab8c834750c299c033a4d61933bc1fe99f","message":"Fix CHANGELOG","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"77ba5aaefaf63c18c769805ea5b9e12c74303c39","message":"change trunc_log default value","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"4c6de6f7ac1cc20f6e5e06b0491169b2ff1b5a38","message":"changelog trunc_log","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"765c6b80b51bfdf4e7d425d41ac826b5a1e19a37","message":"space","date":"2021-12-07T10:49:51Z"},{"author":"thery","committer":"thery","hash":"e670b2c6e0364e1911c963dbf7a2cd16f6f7376a","message":"Fix CHANGELOG","date":"2021-12-10T15:32:32Z"}]}