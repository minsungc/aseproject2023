{"author":"anton-trunov","number":248,"diff_summary":[{"file":"ChangeLog","status":"M","additions":924,"deletions":919},{"file":"mathcomp/algebra/countalg.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/algebra/finalg.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/algebra/ring_quotient.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/algebra/ssralg.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/algebra/ssrnum.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/algebra/vector.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/field/falgebra.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/field/fieldext.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/field/finfield.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/field/galois.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/fingroup/fingroup.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/ssreflect/choice.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/ssreflect/eqtype.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":924,"deletions":919},{"file":"mathcomp/ssreflect/generic_quotient.v","status":"M","additions":924,"deletions":919}],"state":"merged","open_date":"2018-11-20T15:12:16Z","update_date":"2018-12-10T17:31:47Z","discussion":[{"author":"anton-trunov","date":"2018-11-22T09:36:35Z","comment":"@CohenCyril Thank you!"},{"author":"thery","date":"2018-11-22T14:54:41Z","comment":"@anton-trunov is this speed-up for the compilation of the library or for Feit-Thompson?"},{"author":"ejgallego","date":"2018-11-22T15:02:42Z","comment":"I am not sure if this is related, just in case: https://github.com/coq/coq/pull/396"},{"author":"gares","date":"2018-11-22T16:20:32Z","comment":"CC @maximedenes @ppedrot \r\n\r\nIIRC these copies of the first argument (replicated at the end of the record) were there to make the term comparison (of the kernel) fail early (since it goes right-to-left).\r\n\r\nMaybe it is never the case that the records touched by this PR needs to be compared as different by the kernel. Is there a way we can check this assertion? Is there a way to keep the parameter still there but ignore it at term comparison time (to be sure this is the place were we gain speed)?"},{"author":"anton-trunov","date":"2018-11-22T17:20:11Z","comment":"> @anton-trunov is this speed-up for the compilation of the library or for Feit-Thompson?\r\n\r\n@thery This is speedup for the compilation of all the packages in *this* repository, I didn't test `odd-order` repository.\r\nI also tested the speedups for each individual package, please see the updated initial message."},{"author":"ppedrot","date":"2018-11-22T18:25:08Z","comment":"The speedup profile looks similar to what was gained with coq/coq#8824, which was dropping useless conversion in match branches. Your patch is probably reducing the number of such conversions, hence the speedup. I'd be curious to see how this PR fares atop of a recent master containing the aforementioned tweak."},{"author":"anton-trunov","date":"2018-11-22T22:34:19Z","comment":">  I'd be curious to see how this PR fares atop of a recent master containing the aforementioned tweak.\r\n\r\n@ppedrot I updated the initial message (see updated table 1 and a new table 3).\r\n\r\nAmazing job the Coq devs did! Congrats!"},{"author":"gares","date":"2018-11-23T07:57:35Z","comment":"So this pr is a 10% speedup on top of the 100% speedup given by the coq patch recently merged, on the field component.\r\n\r\nI believe that it would be relevant to apply this pr, even if it was gaining nothing on the performance side, since it cleans up the structures. 10% is the cherry on top."},{"author":"CohenCyril","date":"2018-11-23T09:31:37Z","comment":"So before merging, I would like to\r\n1. have a benchmark on odd-order too, and\r\n2. have a regression test on failure cases for kernel comparison that used to be too slow... @ggonthier, @gares did you keep such examples somewhere?"},{"author":"anton-trunov","date":"2018-11-23T11:39:40Z","comment":"> have a benchmark on odd-order too\r\n\r\nIt turns out `odd-order` needs a 4-character fix, see [here](https://github.com/anton-trunov/odd-order/commit/10f523ff7d8ed1f52184dd61a56f35410ed18977)) before it can be compiled with this PR.\r\n\r\nWith that fix, I did a benchmark on the aforementioned laptop with Coq 8.10+alpha (coq/coq@8fb01564fba587142c2471708ff18219f1c64903).\r\n- Old: math-comp/odd-order@10f523ff7d8ed1f52184dd61a56f35410ed18977, mathcomp (967088a6f87405a93ce21971392c58996df8c99f)\r\n`make  906,10s user 13,57s system 99% cpu 15:23,02 total`\r\n\r\n- New: math-comp/odd-order@10f523ff7d8ed1f52184dd61a56f35410ed18977, mathcomp (27e3e35be9a6805e126df5b44a9bb5db9a561f5a)\r\n`make  889,57s user 13,55s system 99% cpu 15:06,49 total`\r\n\r\nResulting in 1.86% speedup (probably just noise).\r\n\r\nI hope this helps."},{"author":"ggonthier","date":"2018-11-23T15:27:20Z","comment":"As @gares pointed out, the sentinel repeated type is meant as a safeguard against potential divergence of the kernel comparison heuristic, when trying to compare _different_ structures based on _different_ types. The reason is that the heuristic compares right-to-left, so it would compare the classes before the carrier sort, and the classes of sorts that differ only in parameters (say, arrays of different sizes) will have deeply nested near-identical definitions, on which the heuristic performs very poorly. An example of this occurs in `field ext` where classes with the same sort but different parameters (the scalar field) are compared.\r\n  That said, as this kind of comparison has to fail, it is unlikely to occur during kernel checks, which always succeed. Failing comparisons are more common during matching in tactic interpretation, but that uses a left-to-right order, although it used to call the kernel on ground terms. If it no longer does so this extra precaution would indeed no longer be needed.\r\n  Your experiment seems to show this is the case, in which case this PR would be a welcome simplification.\r\n   That said, the performance figures are surprising and should concern the Coq developers. Since the redundant type also occurs earlier in the structure record, and is likely repeated many times inside the class sub record, it seems unlikely that removing it would result in any measurable performance gain on successful comparisons. It's perhaps the case that, contrary to my expectations, class comparisons can fail more efficiently than that of the corresponding sorts, but it seems more likely that some side-effect of the call-by-need evaluation is playing havoc with the successful comparisons, or else that the universe level assignment is acting out.\r\n  It should be worth checking out what's going on in the files in `field` and `character` where there are observable changes.\r\n  "},{"author":"anton-trunov","date":"2018-12-04T13:32:30Z","comment":"Rebased to fix a conflict with 03ad994dfee48e1a7b2b7091c45dfdcf4402f826"},{"author":"CohenCyril","date":"2018-12-06T10:19:42Z","comment":"Please also add a ChangeLog entry"},{"author":"anton-trunov","date":"2018-12-06T17:02:06Z","comment":"> Please also add a ChangeLog entry\r\n\r\n@CohenCyril Updated. Please let me know if you'd like to expand the entry."}],"review_discussion":[],"tags":[],"commits":[{"author":"anton-trunov","committer":"anton-trunov","hash":"79aa2b1ab5b233f103cd3e402094cd93d9028866","message":"Remove `_ : Type` from packed classes\n\nThis increases performance 10% - 15% for Coq v8.6.1 - v8.9.dev.\nTested on a Debain-based 16-core build server and\na Macbook Pro laptop with 2,3 GHz Intel Core i5.\n\n|                            | Compilation time, old         | Compilation | Speedup |\n|                            | (mathcomp commit 967088a6f87) | time, new   |         |\n| Coq 8.6.1                  | 10min 33s                     | 9min 10s    | 15%     |\n| Coq 8.7.2                  | 10min 12s                     | 8min 50s    | 15%     |\n| Coq 8.8.2                  | 9min 39s                      | 8min 32s    | 13%     |\n| Coq 8.9.dev(05d827c800544) | 9min 12s                      | 8min 16s    | 11%     |\n|                            |                               |             |         |\n\nIt seems Coq at some point fixed the problem `_ : Type` was\nsupposed to solve.","date":"2018-12-04T13:25:53Z"},{"author":"anton-trunov","committer":"anton-trunov","hash":"efbcb84f3ddfea53b7b914284d8fa80fdb7a56fd","message":"Remove pack constructors","date":"2018-12-04T13:25:53Z"},{"author":"anton-trunov","committer":"anton-trunov","hash":"7ae08ee81c6859fb7ee4043207d87572a4bc3bc3","message":"Update ChangeLog","date":"2018-12-06T16:58:41Z"}]}