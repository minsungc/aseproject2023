{"author":"pi8027","number":378,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":51,"deletions":30},{"file":"mathcomp/algebra/polydiv.v","status":"M","additions":51,"deletions":30},{"file":"mathcomp/algebra/ssrint.v","status":"M","additions":51,"deletions":30},{"file":"mathcomp/field/algnum.v","status":"M","additions":51,"deletions":30},{"file":"mathcomp/solvable/abelian.v","status":"M","additions":51,"deletions":30},{"file":"mathcomp/solvable/burnside_app.v","status":"M","additions":51,"deletions":30},{"file":"mathcomp/solvable/extremal.v","status":"M","additions":51,"deletions":30},{"file":"mathcomp/ssreflect/path.v","status":"M","additions":51,"deletions":30},{"file":"mathcomp/ssreflect/prime.v","status":"M","additions":51,"deletions":30},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":51,"deletions":30},{"file":"mathcomp/ssreflect/ssrnat.v","status":"M","additions":51,"deletions":30}],"state":"merged","open_date":"2019-08-30T11:34:43Z","update_date":"2019-10-31T18:07:16Z","discussion":[{"author":"pi8027","date":"2019-09-02T13:39:36Z","comment":"I think we can continue some discussion about the following [Cyril's remark](https://github.com/math-comp/math-comp/pull/270#issuecomment-503000130) here, if needed.\r\n\r\n> But, @ggonthier, @amahboubi, @thery, @gares, @LaurenceRideau, @pi8027 there is an issue for which I cannot take a light decision: `ltgtP` and `ltrgtP` do not follow the same structure as the `ltngtP` lemma from ssrnat:\r\n> in `ltgtP` (and `ltrgtP`) lemma, the operators come in the following order `==`, `<=`, `<` while in `ltngtP` it is `<=`, `<` and `==`. For consistency they should be ordered in the same way, and thus there are now two options:\r\n> \r\n> 1. For (more) backward compatibility they should be in the order  [`<=`, `<`, `==`] (as in `ltngtP`),\r\n> 2. but for the sake of intuition as noted by @thery and @gares in #233 it should rather be [`==`, `<=`, `<`] everywhere (as in `ltgtP`) because the last item is matched first. I think I a missing a part of the history of the lemma in order to take a decision.\r\n> \r\n> Which of 1. and 2. would be best?\r\n> \r\n> Also, in `leqP`, `leP` ..., operators are in the order `<=` first, and `<` while the same intuition as in the paragraph above would lead to think it should be the converse.\r\n\r\nActually this PR fixes `compare_nat` and `ltngtP` as option 2 indicated. As a result, I also needed to patch fourcolor: math-comp/fourcolor#18. Any other libraries haven't been broken in CI."},{"author":"CohenCyril","date":"2019-09-02T14:05:42Z","comment":"I'm fine with your changes"},{"author":"pi8027","date":"2019-09-04T13:47:52Z","comment":"BTW, having `minn` and `maxn` in the arguments of `leqP`, `ltnP`, and `ltngtP` could be nice. But we need to reorder definitions and lemmas in ssrnat. (In this case, how should we order their arguments?)"},{"author":"amahboubi","date":"2019-09-28T20:37:38Z","comment":"Hi. I did not review this PR. What is blocking the merge here?"},{"author":"pi8027","date":"2019-09-30T14:22:33Z","comment":"@amahboubi This is a compatibility breaking change. There was a discussion on this change in #233, but it has never realized before. So we probably should have more discussion before merging. (But personally I'm fine with this change as it is.)"},{"author":"amahboubi","date":"2019-09-30T14:26:07Z","comment":"@pi8027 Thanks for the answer. Could you please add this item to the agenda of the next dev meeting?"},{"author":"pi8027","date":"2019-09-30T14:27:43Z","comment":"@amahboubi Yes, I will do that."},{"author":"pi8027","date":"2019-10-31T15:13:22Z","comment":"I will remove CI overlay before merging."}],"review_discussion":[],"tags":[],"commits":[{"author":"pi8027","committer":"pi8027","hash":"d60c67b8f33f55e11ca159246d2a447102f10f20","message":"Change the order of arguments in `ltngtP`\n\nfrom\n`ltngtP m n : compare_nat m n (m <= n) (n <= m) (m < n) (n < m) (n == m) (m == n)`\nto\n`ltngtP m n : compare_nat m n (n == m) (m == n) (n <= m) (m <= n) (n < m) (m < n)`,\nto make it tries to match subterms with `m < n` first, `m <= n`, then `m == n`.","date":"2019-10-30T22:19:33Z"}]}