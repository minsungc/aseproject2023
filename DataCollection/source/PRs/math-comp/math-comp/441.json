{"author":"ggonthier","number":441,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":224,"deletions":146},{"file":"mathcomp/algebra/mxalgebra.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/algebra/mxpoly.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/algebra/poly.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/algebra/vector.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/character/classfun.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/character/inertia.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/character/integral_char.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/character/vcharacter.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/field/algebraics_fundamentals.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/field/cyclotomic.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/field/finfield.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/field/galois.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/fingroup/fingroup.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/fingroup/gproduct.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/ssreflect/bigop.v","status":"M","additions":224,"deletions":146},{"file":"mathcomp/ssreflect/binomial.v","status":"M","additions":224,"deletions":146}],"state":"merged","open_date":"2019-11-26T16:30:19Z","update_date":"2019-11-27T17:47:28Z","discussion":[{"author":"ggonthier","date":"2019-11-27T15:07:13Z","comment":"I've implemented the documentation and deprecation improvements, and rebased."}],"review_discussion":[{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T12:59:02Z","comment":"- missing opening `` ` `` before `big_enum`\r\n- Make PR an hyper link\r\n\r\n```suggestion\r\n   `filter A (index_enum T)` with more explicit lemmas `big_enumP`, `big_enum`, `big_enum_cond`, `big_image` added to the `bigop` library. This convertibilty, and indeed equality may no longer hold in future `mathcomp` releases when sets over `finType`s are generalised to finite sets over `choiceType`s, so client libraraies should stop relying on this convertibility, as well as the `filter_index_enum` lemma. File `bigop.v` has some boilerplate to help with the port; also see PR [#441](https://github.com/math-comp/math-comp/pull/441) for examples.\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T12:59:25Z","comment":"missing opening `` ` `` before `big_image_cond`\r\n```suggestion\r\n - Restricted `big_image`, `big_image_cond`, `big_image_id` and `big_image_cond_id`\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T13:02:18Z","comment":"Make PR an hyper link\r\n\r\n```suggestion\r\n   This change anticipates an expected evolution of `fintype` to integrate `finmap`. It is likely that the new definition of the `#|A|` notation will hide multiple occurrences of `A`, which will break the `{-2}` induction idiom. Client libraries should update before the 1.11 release (see PR [#434](https://github.com/math-comp/math-comp/pull/434) for examples).\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T13:03:08Z","comment":"> non-abelian instances should be dealt with a combination of `big_map` and `big_enumP`.\r\n\r\nIs there an example of this in the library right now, if so can you indicate the theorem + file in the changelog?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2019-11-27T13:05:57Z","comment":"Should we deprecate this lemma?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2019-11-27T13:08:30Z","comment":"Maybe reference one canonical example of use of this pattern in the existing code?"},{"author":"ggonthier","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T13:20:11Z","comment":"Right; I was expecting markdown to turn the reference into a hyperlink as it does in the comments (viz. #434), but apparently that doesn't work."},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T13:26:11Z","comment":"> Right; I was expecting markdown to turn the reference into a hyperlink as it does in the comments (viz. #434), but apparently that doesn't work.\r\n\r\nit works only on github :wink: but the CHANGELOG is destined to be read independently"},{"author":"ggonthier","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T13:40:33Z","comment":"There isn't, and indeed none of the `big_image` lemmas were used in the library at any point, and almost all the instances where `big_map` + `big_filter` or `enumT` were used as a proxy for `big_image` _were_ in the abelian case, so the PR actually introduces `big_image` there. The only exception is the `split_diagA` technical lemma in `mxpoly`, but it's non-standard because I actually _define_ `diagA` to be the `map` over the enumeration that is meant to be abstracted by `big_enumP`, which means I don't use `big_enumP` to abstract over it right after I use `big_map`, as I normally should. That twist is due to the fact I can't use a lemma like `big_enumP` to create constants at the vernacular level."},{"author":"ggonthier","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T13:43:23Z","comment":"Since we've switched to markdown the CHANGELOG is going to be hard to read outside GitHub anyway.., but it actually doesn't even work when viewing the LOG file on GitHub."},{"author":"ggonthier","file":"mathcomp/ssreflect/bigop.v","date":"2019-11-27T14:15:22Z","comment":"Yes, indeed this did cross my mind, but I thought the bespoke `deprecate` we use (until we can rely on 8.10) would print the wrong indication. You've just reminded me my own contraption can actually be made to do the right thing."},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T15:22:23Z","comment":"The proper syntax for hyperlinks in markdown (to be printed nicely on github) is [text](url).\r\nYou could simply click to commit my suggestion below:\r\n```suggestion\r\n   `filter A (index_enum T)` with more explicit lemmas `big_enumP`, `big_enum`, `big_enum_cond`, `big_image` added to the `bigop` library, and deprecated the `filter_index_enum` lemma that states the corresponding equality. Both convertibility and equality may no longer hold in future `mathcomp` releases when sets over `finType`s are generalised to finite sets over `choiceType`s, so client libraries should stop relying on this identity. File `bigop.v` has some boilerplate to help with the port; also see [PR #441](https://github.com/math-comp/math-comp/pull/441) for examples.\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T15:22:50Z","comment":"The proper syntax for hyperlinks in markdown (to be printed nicely on github) is `[text](url)`.\r\nYou could simply click to commit my suggestion below:\r\n```suggestion\r\n   This change anticipates an expected evolution of `fintype` to integrate `finmap`. It is likely that the new definition of the `#|A|` notation will hide multiple occurrences of `A`, which will break the `{-2}` induction idiom. Client libraries should update before the 1.11 release (see PR [#434](https://github.com/math-comp/math-comp/pull/434) for examples).\r\n```"},{"author":"ggonthier","file":"CHANGELOG_UNRELEASED.md","date":"2019-11-27T15:39:18Z","comment":"Now fixed; I was trying to roll all changes together so I just snarfed the text you suggested, but missed the []. I took the opportunity to put them both around the [PR #nnn] expression."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2019-11-27T15:44:53Z","comment":"Sorry about that I got confused about the description that comes below."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2019-11-27T15:51:22Z","comment":"I believe the lemma you wanted to cite was `big_distr_big_dep`"},{"author":"ggonthier","file":"mathcomp/ssreflect/bigop.v","date":"2019-11-27T16:14:10Z","comment":"Right again (& fixed...)"}],"tags":[],"commits":[{"author":"ggonthier","committer":"ggonthier","hash":"4bd5ba38e4f6c6456a8fcc39364a67b51fde92f2","message":"Explicit `bigop` enumeration handling\n\nAdded lemmas `big_enum_cond`, `big_enum` and `big_enumP` to handle more\nexplicitly big ops iterating over explicit enumerations in a `finType`.\n   The previous practice was to rely on the convertibility between\n`enum A` and `filter A (index_enum T)`, sometimes explicitly via the\n`filter_index_enum` equality, more often than not implicitly.\n  Both are likely to fail after the integration of `finmap`, as the\n`choiceType` theory canâ€™t guarantee that the order in selected\nenumerations is consistent.\n  For this reason `big_enum` and the related (but currently unused)\n`big_image` lemmas are restricted to the abelian case. The `big_enumP`\nlemma can be used to handle enumerations in the non-abelian case, as\nexplained in the `bigop.v` internal documentation.\n  The Changelog entry enjoins clients to stop relying on either\n`filter_index_enum` and convertibility (though this PR still provides\nboth), and warns about the restriction of the `big_image` lemma set to\nthe abelian case, as it it a possible source of incompatibility.","date":"2019-11-27T16:13:20Z"}]}