{"author":"maximedenes","number":129,"diff_summary":[{"file":"mathcomp/Make","status":"A","additions":122,"deletions":9469},{"file":"mathcomp/ssreflect/Makefile.coq-makefile","status":"A","additions":122,"deletions":9469},{"file":"mathcomp/ssreflect/plugin/trunk/ssreflect.ml4","status":"A","additions":122,"deletions":9469},{"file":"mathcomp/ssreflect/ssrbool.v","status":"A","additions":122,"deletions":9469},{"file":"mathcomp/ssreflect/ssreflect.v","status":"A","additions":122,"deletions":9469},{"file":"mathcomp/ssreflect/ssrfun.v","status":"A","additions":122,"deletions":9469},{"file":"mathcomp/ssreflect/ssrnotations.v","status":"A","additions":122,"deletions":9469},{"file":"mathcomp/ssrtest/primproj.v","status":"A","additions":122,"deletions":9469}],"state":"merged","open_date":"2017-06-07T09:18:26Z","update_date":"2017-06-07T09:23:14Z","discussion":[{"author":"maximedenes","date":"2017-06-08T11:44:16Z","comment":"@gares Do you have a suggestion on how to restore 8.6 compatibility at the `.v` level? The current setup requires a `From Coq Require Import ssreflect`."},{"author":"ejgallego","date":"2017-06-08T12:07:33Z","comment":"@maximedenes you could play `LoadPath` tricks, but that won't be fun; otherwise I guess you would need to have a different `ssreflect.v` for 8.5/8.6 and a different one for `master`, that just exports the Coq shipped module."},{"author":"maximedenes","date":"2017-06-08T12:15:22Z","comment":"> otherwise I guess you would need to have a different ssreflect.v for 8.5/8.6 and a different one for master, that just exports the Coq shipped module.\r\n\r\nYep, sure, I was wondering if there was a way to avoid that, but maybe it is ok. The part that is a bit tricky is that mathcomp has a single Makefile that links the appropriate version of the plugin, so it should be extended for that `ssreflect.v` file."},{"author":"ejgallego","date":"2017-06-08T12:21:39Z","comment":"There is an even better option that is to revert to the `mathcomp` prefix, I cannot stress how annoying is now that all my ssreflect examples have to come in two versions..."},{"author":"maximedenes","date":"2017-06-08T12:31:56Z","comment":"> There is an even better option that is to revert to the mathcomp prefix\r\n\r\nIsn't that the same as your loadpath suggestion? I didn't change the prefix in any way, it is just the fact that we moved the files that had this side effect. To compensate for it, we should tweak the loadpath I guess."},{"author":"maximedenes","date":"2017-06-08T12:34:40Z","comment":"Btw, can a prefix be bound to several physical paths?"},{"author":"ejgallego","date":"2017-06-08T12:48:48Z","comment":"> Isn't that the same as your loadpath suggestion?\r\n\r\nThe prefix is set arbitrarily by Coq, (in fact in SerAPI/jsCoq I have to imitate that arbitrary behavior).\r\n\r\nYou could well have a rule that declares `plugins/ssr` to be under prefix `mathcomp`. It is a bit uglier, but compatible."},{"author":"ejgallego","date":"2017-06-08T12:49:56Z","comment":"> Btw, can a prefix be bound to several physical paths?\r\n\r\nit will complain with a warning, `overriding-logical-loadpath` whether it does make sense, I don't know."},{"author":"maximedenes","date":"2017-06-08T13:12:12Z","comment":"So I guess I don't understand your suggestion. You'd loose access to the `mathcomp` libraries, right?"},{"author":"ejgallego","date":"2017-06-08T13:19:13Z","comment":"Likely you would have to put the full `mathcomp.ssreflect` in Coq, the rest should fine, right?"},{"author":"maximedenes","date":"2017-06-08T13:25:59Z","comment":"I don't follow. If the `mathcomp` prefix points to `plugins/ssr`, `From mathcomp Require Import ssralg` will fail. If it points to the place where mathcomp is installed, it is `Require Import mathcomp.ssreflect` that will fail, right?"},{"author":"ejgallego","date":"2017-06-08T13:31:52Z","comment":"The `mathcomp.ssreflect` prefix would point to `plugins/ssr`, `From mathcomp Require Import ssralg` resolves to `mathcomp.algebra.ssralg` I believe.\r\n\r\n`Require Import mathcomp.ssreflect` already fails in 8.6 as far as I can see; it makes no sense with the current organization."},{"author":"ejgallego","date":"2017-06-08T13:36:08Z","comment":"Anyways the current loadpath story seems kinda bogus, the main reason duplication is not allowed is that `find_load_path` can determine the logical path a module uses in `start_library`.\r\n\r\nIMHO this is the wrong approach, as it should be the user of `start_library` who provides that and I even believe that I saw some bug / non-flexible behavior due to that.\r\n\r\nI'm afraid that the whole story with `start/declare_library` is a mess now, including real bugs such as 5556; I  am close to have a first patch ready thou to attack 5556 that in fact will properly pack together libraries with their loadpaths and other metaproperties that are set in an inconsistent way today. This will be done by enriching `Stm.init` so in fact the STM becomes in full control of the notion of \"document/compilation unit\".\r\n\r\nLets see where we arrive."},{"author":"maximedenes","date":"2017-06-08T13:50:17Z","comment":"> The mathcomp.ssreflect prefix would point to plugins/ssr\r\n\r\nOk, now I understand. There will still be an incompatibility for, e.g. `Require Import mathcomp.ssreflect.finfun` and all other files there. But it was recommended to do `From mathcomp Require Import finfun`, and that should still work.\r\n\r\nWhere do you think I should add this binding? Just as an ad-hoc thing in `coqinit.ml`, like it is done for the `Coq` prefix?"},{"author":"ejgallego","date":"2017-06-08T13:56:04Z","comment":"> But it was recommended to do From mathcomp Require Import finfun, and that should still work.\r\n\r\nHow would that work now?"},{"author":"maximedenes","date":"2017-06-08T13:57:03Z","comment":"I thought your suggestion was to bind the `mathcomp.ssreflect` prefix, but not the `mathcomp` one."},{"author":"ejgallego","date":"2017-06-08T14:03:32Z","comment":"Unfortunately my suggestion does require moving the whole of `ssreflect` into Coq with the current state of affairs, what would you bind `mathcomp` to?\r\n\r\nSo I thought indeed the original plan here was to provide a different version of `ssreflect.v` for 8.6/8.7 . IMHO that would be fine, even if we have the pain to have users to install mathcomp even for just the tactics. Well, now you'll have to provide also different versions of `ssrbool` etc... Pity we still don't have cpp support in coq_makefile.\r\n\r\nThe only other alternative I see is to move the full `ssreflect` prefix into `plugins/ssr`; this was my original idea so people could just use the thing without any extra effort in a compatible way.\r\n\r\nI think other alternatives will require rework of the loadpath mode, or adding cpp support to coq_makefile."}],"review_discussion":[{"author":"gares","file":"mathcomp/ssreflect/Makefile.coq-makefile","date":"2017-06-08T10:37:16Z","comment":"no EXTRA here? that is probably a bug"},{"author":"maximedenes","file":"mathcomp/ssreflect/Makefile.coq-makefile","date":"2017-06-08T11:42:38Z","comment":"It is surprising, but was already like that before my PR, right? Do you confirm it's a bug?"}],"tags":[],"commits":[{"author":"maximedenes","committer":"maximedenes","hash":"96a3c59b4586164e8aa80f53f0f9031fd1167ce8","message":"For trunk, use merged ssr plugin.","date":"2017-06-07T09:15:26Z"},{"author":"maximedenes","committer":"maximedenes","hash":"cd7ba12978ee90c2bf1e59584ebf95e9ed275fb2","message":"Change failing test.","date":"2017-06-07T09:15:29Z"}]}