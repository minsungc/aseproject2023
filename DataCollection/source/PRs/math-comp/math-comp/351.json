{"author":"anton-trunov","number":351,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"A","additions":71,"deletions":47},{"file":"mathcomp/algebra/intdiv.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/algebra/matrix.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/algebra/poly.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/algebra/polydiv.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/fingroup/perm.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/solvable/abelian.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/solvable/burnside_app.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/solvable/extraspecial.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/solvable/maximal.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/ssreflect/eqtype.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/ssreflect/finset.v","status":"A","additions":71,"deletions":47},{"file":"mathcomp/ssreflect/seq.v","status":"A","additions":71,"deletions":47}],"state":"merged","open_date":"2019-05-28T20:04:56Z","update_date":"2019-05-29T16:48:39Z","discussion":[{"author":"CohenCyril","date":"2019-05-29T08:16:32Z","comment":"I am in favor of adding this lemma, as it looks useful. But given how many times it is used I would prefer a longer name, that contains the word `sym` rather than just `s`, as in `eqPsym` (which I prefer) or `eq_symP`."},{"author":"anton-trunov","date":"2019-05-29T08:39:10Z","comment":"Thank you @CohenCyril. I'm happy to change names to anything that make more sense than the current preliminary naming.\r\nI've always thought that `P` should be the last character for views. Are there any exceptions in mathcomp?\r\n"},{"author":"CohenCyril","date":"2019-05-29T09:36:12Z","comment":"> I've always thought that `P` should be the last character for views. Are there any exceptions in mathcomp?\r\n\r\nYes, suffixes `Pl` (for left), `Pr` (for right), `Pn` (for neg), and more recently `Pdep`"},{"author":"thery","date":"2019-05-29T09:38:49Z","comment":"we should use machine learning to automatically generate names :smiley:"},{"author":"CohenCyril","date":"2019-05-29T11:34:56Z","comment":"> there is already an eqVneq lemma stating the x=y / x!=y alternative, so replacing that lemma would be preferable.\r\n\r\nI agree, I think it would be great to rename `eqPsym` to `eqVneq` and remove the old `eqVneq` lemma\r\n(and same for `eqsVneq`).\r\n"},{"author":"anton-trunov","date":"2019-05-29T12:18:28Z","comment":"Great suggestions, thank you @ggonthier and @CohenCyril. Please take a look if I missed anything."},{"author":"CohenCyril","date":"2019-05-29T13:31:10Z","comment":"I will squash and merge."},{"author":"anton-trunov","date":"2019-05-29T13:32:07Z","comment":"Great! Thanks to everyone for your time, patience and the great suggestions!"}],"review_discussion":[{"author":"pi8027","file":"mathcomp/ssreflect/eqtype.v","date":"2019-05-28T20:24:03Z","comment":"`case: eqsP` finds the first occurrence of `?y == ?x` and generates a hypothesis `?x = ?y` or `?x <> ?y`. So `eq_xor_neq_sym x y (y == x) (x == y)` might be better as the type of `eqsP`. It could be possible to replace `eqP` with `eqsP` with this small change."},{"author":"anton-trunov","file":"mathcomp/ssreflect/eqtype.v","date":"2019-05-28T20:36:40Z","comment":"@pi8027 Good catch! Thank you very much."},{"author":"CohenCyril","file":"mathcomp/ssreflect/eqtype.v","date":"2019-05-29T09:38:55Z","comment":"Also, the canonical way of expressing dis-equality on an `eqType` is `x != y`, so constructor `NeqNotEqSym` should be modified accordingly. (The reason why it differs from `eqP` here is because `eqP` is a `reflect` lemma, that one should compose with combinators such as `altP`)"},{"author":"anton-trunov","file":"mathcomp/ssreflect/eqtype.v","date":"2019-05-29T10:13:02Z","comment":"Thank you for the feedback, fixed now. I'm keeping recent changes as separate commits to make the review process easier. I'll squash the commits later."},{"author":"CohenCyril","file":"CHANGELOG.md","date":"2019-05-29T12:27:57Z","comment":"I would remove the comparison with `eqP` which is less relevant than the comparison to `eqVneq`."},{"author":"CohenCyril","file":"mathcomp/algebra/polydiv.v","date":"2019-05-29T12:28:41Z","comment":"this can even be shorted to `case: eqVneq => // pn0; case: eqVneq => // qn0`"},{"author":"CohenCyril","file":"mathcomp/ssreflect/eqtype.v","date":"2019-05-29T12:31:50Z","comment":"`by rewrite eq_sym; case: (altP eqP); constructor.`"},{"author":"CohenCyril","file":"mathcomp/solvable/abelian.v","date":"2019-05-29T12:33:11Z","comment":"`case: (trivgVpdiv G) => [/eqP->// | [p p_pr]].`"},{"author":"CohenCyril","file":"CHANGELOG.md","date":"2019-05-29T12:35:08Z","comment":"As per https://github.com/math-comp/math-comp/wiki/Agenda-of-the-April-23rd-2019-meeting-9h30-to-12h30#avoiding-issues-with-changelog new changelog entries now go to `CHANGELOG_UNRELEASED.md`"},{"author":"anton-trunov","file":"CHANGELOG.md","date":"2019-05-29T12:43:49Z","comment":"done"},{"author":"anton-trunov","file":"mathcomp/algebra/polydiv.v","date":"2019-05-29T12:44:08Z","comment":"much better, thanks"},{"author":"anton-trunov","file":"mathcomp/ssreflect/eqtype.v","date":"2019-05-29T12:44:27Z","comment":"I keep forgetting about `altP`, thanks"},{"author":"anton-trunov","file":"mathcomp/solvable/abelian.v","date":"2019-05-29T12:44:46Z","comment":"done"},{"author":"anton-trunov","file":"CHANGELOG.md","date":"2019-05-29T12:46:42Z","comment":"I created the file, keeping `## [Unreleased]` section, which looks a bit weird since the whole file is devoted to unreleased stuff, but I think it should make it easier to move entries from `CHANGELOG_UNRELEASED.md` to `CHANGELOG.md`. I can change that if you'd like, though."},{"author":"CohenCyril","file":"CHANGELOG.md","date":"2019-05-29T12:50:57Z","comment":"I think this is fine"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2019-05-29T12:56:29Z","comment":"One last comment: I do not think this counts as a view, so you could write:\r\n- `eqVneq` lemma is changed from `{x = y} + {x != y}` to `eq_xor_neq x y (y == x) (x == y)`, on which a case analysis performs simultaneous replacement of expressions of the form `x == y` and `y == x` by `true` or `false`, while keeping the ability to use it in the way it was used before."},{"author":"anton-trunov","file":"CHANGELOG_UNRELEASED.md","date":"2019-05-29T13:05:59Z","comment":"done!"}],"tags":[],"commits":[{"author":"anton-trunov","committer":"anton-trunov","hash":"eac1d28204c93f082771dedb90fc5a1edec6e6f8","message":"Add eqsP view to destruct not only x == y, but also y == x","date":"2019-05-28T20:56:19Z"},{"author":"anton-trunov","committer":"anton-trunov","hash":"c7c344f2f08f3910c884d9c3bb1bd5cfe3c2a1d7","message":"Rename eqsP to eqPsym as suggested by @CohenCyril","date":"2019-05-29T09:38:48Z"},{"author":"anton-trunov","committer":"anton-trunov","hash":"1aa27b589c437b88cc6fb556edfceac42da449ea","message":"Canonical way of expressing dis-equality on an eqType is x != y\n\nAddressing a suggestion by @CohenCyril","date":"2019-05-29T09:52:42Z"},{"author":"anton-trunov","committer":"anton-trunov","hash":"42db44ce8df9f24d90c321d57e81e2d5bf83bd48","message":"Replace eqVneq with eqPsym\n\nAlso changed eqsVneq.","date":"2019-05-29T12:17:39Z"},{"author":"anton-trunov","committer":"anton-trunov","hash":"e9c284b97b76e214f417ccc33907853bc0b8aa8e","message":"incorporate new suggestions by @CohenCyril","date":"2019-05-29T12:37:31Z"},{"author":"anton-trunov","committer":"anton-trunov","hash":"3db164c8410dfbb3204c7d02d057356d22044c0d","message":"Move unreleased changelog entries to CHANGELOG_UNRELEASED.md","date":"2019-05-29T12:42:30Z"},{"author":"anton-trunov","committer":"anton-trunov","hash":"ccceb6fbd3bd811b728f6e11dad3cf255a577801","message":"reword entry in CHANGELOG_UNRELEASED.md","date":"2019-05-29T13:05:39Z"}]}