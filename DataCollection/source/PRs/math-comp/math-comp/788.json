{"author":"hivert","number":788,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":16,"deletions":9},{"file":"mathcomp/ssreflect/fingraph.v","status":"M","additions":16,"deletions":9}],"state":"merged","open_date":"2021-09-23T21:13:13Z","update_date":"2021-10-23T17:03:33Z","discussion":[{"author":"hivert","date":"2021-10-14T20:51:52Z","comment":"It seems that the changes in path breaks real closed. I'm reverting them."},{"author":"hivert","date":"2021-10-15T12:53:45Z","comment":"There is still a failure with  coq-8.12 / multinomials. Thinks seems to be fixed for the other versions of Coq."},{"author":"CohenCyril","date":"2021-10-18T08:11:12Z","comment":"> LGTM, although we should probably open an issue to remember investigating why using `[rel x y | e x z]` in path breaks real closed.\r\n\r\nSure but we cannot merge until then."},{"author":"chdoc","date":"2021-10-18T08:44:18Z","comment":"@CohenCyril, The change in `path.v` that breaks real-closed was reverted. The CI failure is due to multinomials and probably unreleated. So I think this can be merged, either as is or using `(fun x y => e y x)` instead of `[rel x y  | e y x]` for consistency. "},{"author":"hivert","date":"2021-10-23T00:26:54Z","comment":"I Just pushed to relaunch the tests."}],"review_discussion":[{"author":"proux01","file":"CHANGELOG_UNRELEASED.md","date":"2021-09-24T12:52:42Z","comment":"```suggestion\r\n- in `fingraph.v`, new lemmas: `connect_rev`, `connect_from_sym`\r\n```"},{"author":"hivert","file":"CHANGELOG_UNRELEASED.md","date":"2021-09-25T07:47:57Z","comment":"Good catch ! Thanks !"},{"author":"chdoc","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-13T13:32:49Z","comment":"```suggestion\r\nLemma connect_rev e : connect [rel x y | e y x] =2 [rel x y | connect e y x].\r\nProof.\r\nsuff crev e': subrel (connect [rel x y | e' y x]) [rel x y | connect e' y x].\r\n```\r\nI think this makes for a much more readable statement that is also shorter. Not sure whether there are any deep considerations regarding `[rel x y | ...]` vs `(fun x y => ...)`. "},{"author":"chdoc","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-13T13:34:24Z","comment":"I'm not exactly trilled by this name. How about something that includes `connect_sym` such as `sym_connect_sym`?"},{"author":"hivert","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-13T15:40:00Z","comment":"Thanks for your careful rereading !\r\n\r\nI agree with you concerning the readability. However, the `e^~` idiom seems to be the one used throughout the files (see e.g. lemmas  `rev_path`, `rev_cycle`, `rev_sorted` in `path.v`). I wrote the statement this way for consistency. I'm not sure if there is a coding convention here. Maybe the statement of the above lemmas should be fixed. Please tell me."},{"author":"hivert","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-13T15:44:18Z","comment":"Again, I've no clear idea of what would be a good name and would happily follow any guideline or community vote. Do you this this should be discussed on zulip or somewhere else ?"},{"author":"affeldt-aist","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-13T15:50:58Z","comment":"There is some information here https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md\r\nSee \"Naming conventions for lemmas\". `sym_connect_sym` indeed seems closer to the pattern\r\n`(condition_)?mainSymbol_suffixes`."},{"author":"proux01","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-13T15:53:03Z","comment":"Maybe `symmetric_connect_sym` to be closer to this pattern? (but I'm bad at names)"},{"author":"hivert","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-13T16:03:14Z","comment":"If we follow `ssrfun.v` then `sym_connect_sym` seem to be the right name. See eg\r\n```\r\nsym_left_transitive\r\n     : forall (T : Type) (R : rel T),\r\n       symmetric R -> transitive R -> left_transitive R\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-13T19:29:03Z","comment":"I don't know whether there is a deeper reason. Maybe @CohenCyril or @gares know, this may date back a while. Note that `same_connect_rev` was already using the IMHO more readable `(fun x y => e y x)`. It may simply be, that all those lemmas predate the `[rel _ _ | _]` notation. "},{"author":"hivert","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-13T21:50:16Z","comment":"I'm waiting a little if there is some input here and Integrate the fix if nothing happens."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-14T13:36:36Z","comment":"Yes let's use `[rel x y | e y x]` this is much more readable."},{"author":"hivert","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-14T17:09:39Z","comment":"Done ! I also fixed path consistently."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fingraph.v","date":"2021-10-15T15:55:59Z","comment":"```suggestion\r\nLemma connect_rev e : connect [rel x y | e y x] =2 [rel x y | connect e y x].\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2021-10-15T15:57:12Z","comment":"```suggestion\r\n```"},{"author":"CohenCyril","file":"CHANGELOG_UNRELEASED.md","date":"2021-10-15T15:58:07Z","comment":"```suggestion\r\n- in `fingraph.v`, new lemmas: `connect_rev`, `sym_connect_sym`\r\n```"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"hivert","committer":"hivert","hash":"fd5fed855959be00e41fd84a7a1e3352f4b5d2a2","message":"connect_rev and symmetry","date":"2021-10-14T17:11:15Z"},{"author":"hivert","committer":"hivert","hash":"95230850a1ac3b98c492d6aeb5aa131760f05661","message":"Undoes (fun z => e^~ z) -> [rel y z | e z y] in path.v","date":"2021-10-15T11:18:35Z"},{"author":"CohenCyril","committer":"web-flow","hash":"ccb8c6aa6ef2ab044511709329b57e8ebb260b1d","message":"Apply suggestions from code review","date":"2021-10-15T15:57:29Z"},{"author":"CohenCyril","committer":"hivert","hash":"7beabf83963e934580a9d08c55b509e7bf931a82","message":"Update CHANGELOG_UNRELEASED.md","date":"2021-10-23T00:19:12Z"}]}