{"author":"gares","number":250,"diff_summary":[{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":1,"deletions":1}],"state":"closed","open_date":"2018-11-22T15:58:31Z","update_date":"2018-12-04T09:01:05Z","discussion":[{"author":"gares","date":"2018-11-22T16:47:08Z","comment":"Unfortunately the fix you propose does not work, since you would keep `s2` but the equation would be `_s_ = ...` not `s2 = ...`. The current script is one line longer, but is way more pedestrian."},{"author":"CohenCyril","date":"2018-11-23T09:25:54Z","comment":"> Unfortunately the fix you propose does not work, since you would keep `s2` but the equation would be `_s_ = ...` not `s2 = ...`. The current script is one line longer, but is way more pedestrian.\r\n\r\nIsn't this another bug? Indeed `elim e : (term) => [...]` should give you an equation between the term you mention and its \"destructs\"..."},{"author":"gares","date":"2018-11-23T15:29:45Z","comment":"Yes, I'll look into that. As I explained to you in person the code is now split into two files, so it may not be trivial to implement correctly. If I manage the right fix could be to just put parentheses in `elim Ds2: (s2)`.\r\n\r\nIf I don't manage, is this PR an acceptable fix? (but for the detail below)"},{"author":"gares","date":"2018-12-03T10:18:50Z","comment":"It looks all green now."},{"author":"gares","date":"2018-12-03T10:40:10Z","comment":"Oh, given that the fix is backward compatible I'd like it to be merged before coq/coq#6705 so that I can remove the overlay file from that PR."},{"author":"ggonthier","date":"2018-12-03T10:56:32Z","comment":"Could one of you clarify what the fix is about? The code that is being changed relies only on the standard behaviour of equation generation for `elim:`, which is to generate an abbreviation for the principal term of the elimination, reusing the name of that term if it has just been cleared by the `:` pseudo-tactical (and defaulting to a generated hidden name if that was not the case).\r\n  I don't recall an exception for non-dependent `elim`, though there might have been one to accommodate `elim`s that behave more like `case`, specifically those that use a view. At any rate, this would not apply here, and the rationale is clearly wrong, because `s2` _is cleared_ here, before being reused.\r\n  If the idea is to align the specific equation-generation behaviour of `elim` to that of `case`, then I would like to object. While it's not used very much in the final library scripts, it is a very useful _debugging_ tool and has been used extensively in producing the scripts in the first place. It's also more useful when doing small-scale reflection style program correctness proofs; there aren't many in MathComp per se, but I recall there are more in the 4-color proof."},{"author":"ggonthier","date":"2018-12-03T11:38:34Z","comment":"  Partly answering myself now (a sure sign of senility) I do recall one feature of `elim` equation generation that may have sparked the confusion: if the cleared eliminated name has somehow been reused before the equation is introduced, then the introduction is done with a generated name. The rationale is that because this is primarily intended as a debugging feature, it should avoid introducing failures of its own.\r\n  I still don't see how the new intro patterns should prevent this from working - it's exactly as if the user had introduced the name again at the point where the equation is introduced."},{"author":"gares","date":"2018-12-03T17:18:02Z","comment":"What I'd like to get rid of is the \"if\" in the code doing \"if the name is not used later on in the intro pattern then reuse the name (when it is a name and not a general term) else pick a fresh name\" since the \"if\" is not very meaningful now that the intro pattern can mention a \"prefix/suffix\" of the actual name.\r\n\r\nI see 3 options:\r\n- never reuse the name: always pick a fresh id for the LHS. This is obviously the simplest, and the one currently implemented in the PR\r\n- always reuse the name (when it is a name, and not a general term): could break scripts and force naming such as `s2'` as in the current proof script.\r\n- reuse the name (when it is a name, and not a general term) if the user did put `()` around it (requesting it not to be cleared). This is what Cyril suggested.\r\n\r\nI'm afraid all options could break scripts. I've no strong opinions.\r\n\r\nI think the choice is about what status to give to elim+equation. If it is a debugging only thing, then I think option 1 is best. If it is a legit proof step, options 2 and 3 are fine but we should also fix the manual (that presents it as a debugging feature)."},{"author":"ggonthier","date":"2018-12-03T17:51:56Z","comment":"As I see it there is no \"used later in the intro pattern\" behaviour that is required. The equation is introduced after the first intro pattern - so the most important question is whether the name has been reused at that very point, not whether it is being reused at some later point, in essence acting as if, after the first intro pattern, one pushes `forall _x_, _x_ = t -> ` on the goal (where `t` is the eliminated term), then insert `x Dx` in the intro pattern, where `x` is the (cleared) original name of the elimination target, and `Dx` the name of the equation. Should this fail because `x` was reused in the meantime, then `_x_` is used instead to avoid a secondary failure.\r\n   It seems to me this should be fairly easy to implement. Yes, it does allow for different behaviour in different branches of the elimination (if the fallback behaviour is only triggered in some branches), as well as some secondary failures (if the elimination name is reused later in the pattern), but I feel these are acceptable limitations.\r\n   I can even imagine ways of avoiding these without static prediction of the names used in an intro pattern, such as creating the equation with a generated name, then renaming it at the end of the intro pattern if no conflict has appeared in any of the branches, similar to how delayed clears are handled. I don't feel it's necessary to go there, however, as the behaviour I outlined above does cover all intended use cases well enough."},{"author":"gares","date":"2018-12-03T21:47:52Z","comment":"Oh, I see. The implementation you suggest is clearly simpler than the previous one and requires no lookahead. Thanks."},{"author":"gares","date":"2018-12-04T09:01:05Z","comment":"coq/coq#6705 updated, there is no need for this anymore"}],"review_discussion":[{"author":"gares","file":"mathcomp/ssreflect/seq.v","date":"2018-11-22T16:00:40Z","comment":"note how the more natural name `s2` was avoided (using `s2'`) in order to have `elim` reuse `s2` for the LHS of `Ds2`.\r\nThe LHS is inaccessible (eg fresh) after coq/coq#6705"},{"author":"gares","file":"mathcomp/ssreflect/seq.v","date":"2018-11-22T16:07:17Z","comment":"FTR: I would have loved to write `first 2 by ...`"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2018-11-22T16:39:17Z","comment":"After discussing with @gares, the fix to still access `s2` is to write `(s2)` instead."},{"author":"gares","file":"mathcomp/ssreflect/seq.v","date":"2018-11-23T15:30:54Z","comment":"the `{}/IHs` syntax is new in 8.9, so I should revert this change or it fails on older versions"},{"author":"ggonthier","file":"mathcomp/ssreflect/seq.v","date":"2018-12-03T11:07:40Z","comment":"If you're going to remove the `elim`  equation idiom (which I'm opposed to, see my general comment), then you should at least propose to replace it with something that is similar in functionality, and not imply that users need to duplicate cases in their scripts. Here the solution could be:\r\n ```\r\npose s := s2; elim: s2 s1 => [|y s2 IHs] [|x s1] //= in s *; try by exists s.\r\n```"},{"author":"gares","file":"mathcomp/ssreflect/seq.v","date":"2018-12-03T17:23:16Z","comment":"thanks for nicer script!"}],"tags":[],"commits":[{"author":"gares","committer":"gares","hash":"cd21cb1a502c8560aff816bcf8235059af4ee39d","message":"do not rely on `elim E: x => i` not clearing `x` if `x` not used in `i`","date":"2018-12-03T17:20:10Z"}]}