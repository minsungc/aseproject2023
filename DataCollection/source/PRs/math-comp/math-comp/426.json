{"author":"pi8027","number":426,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":17,"deletions":1},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":17,"deletions":1}],"state":"merged","open_date":"2019-11-14T23:53:11Z","update_date":"2019-11-22T10:07:50Z","discussion":[{"author":"pi8027","date":"2019-11-22T09:09:29Z","comment":"(Since my use case of this PR also requires #270 and #388, I'm totally fine to target 1.11.0 here.)"},{"author":"amahboubi","date":"2019-11-22T09:09:58Z","comment":"@ybertot should we merge this one now or after releasing?"},{"author":"ybertot","date":"2019-11-22T09:23:34Z","comment":"As I see, this PR is already approved, so it can be integrated (same treatment as #432)."}],"review_discussion":[{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2019-11-15T16:21:18Z","comment":"I believe this is the combination of can_inj_in and enum_rankK_in so no need for a dedicated theorem..."},{"author":"pi8027","file":"mathcomp/ssreflect/fintype.v","date":"2019-11-16T04:21:20Z","comment":"`can_in_inj (enum_rankK_in _)` requires that `Ax` and `Ay` are the same. This `enum_rank_in_inj` is slightly general."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2019-11-18T15:01:48Z","comment":"Well if you really want to be as general as possible you should write instead:\r\n```coq\r\nLemma enum_rank_in_inj (x0 y0 : T) A (Ax0 : x0 \\in A) (Ay0 : y0 \\in A) :\r\n  {in A &, forall x y, enum_rank_in Ax0 x = enum_rank_in Ay0 y -> x = y}.\r\nProof. by move=> x y xA yA /(congr1 enum_val); rewrite !enum_rankK_in. Qed.\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2019-11-18T15:02:49Z","comment":"(Otherwise you restrict witnesses to be equal to the arguments, and it is unlikely to happen often enough...)"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2019-11-18T15:04:59Z","comment":"But then I guess it is better to provide \r\n```coq\r\nLemma eq_enum_rank_in (x0 y0 : T) A (Ax0 : x0 \\in A) (Ay0 : y0 \\in A) :\r\n  {in A, enum_rank_in Ax0 =1 enum_rank_in Ay0}.\r\nProof. by move=> x xA; apply: enum_val_inj; rewrite !enum_rankK_in. Qed.\r\n```\r\ninstead..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2019-11-18T15:05:48Z","comment":"(to give more fine-grained control over the use of different witnesses)"},{"author":"pi8027","file":"mathcomp/ssreflect/fintype.v","date":"2019-11-21T08:52:21Z","comment":"That's so true. Since `eq_enum_rank_in` doesn't match with my use case well, I'd like to put both of those."}],"tags":[],"commits":[{"author":"pi8027","committer":"pi8027","hash":"c27f4625fdeefbf494c3238f94b39a5abcb3b270","message":"Injectivity lemmas in fintype","date":"2019-11-21T08:57:58Z"}]}