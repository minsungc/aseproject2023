{"author":"CohenCyril","number":839,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":7,"deletions":0},{"file":"mathcomp/ssreflect/path.v","status":"M","additions":7,"deletions":0}],"state":"merged","open_date":"2022-01-13T23:09:06Z","update_date":"2022-01-24T09:01:43Z","discussion":[{"author":"ejgallego","date":"2022-01-18T13:28:45Z","comment":"I cc @jouvelot as he has a similar lemma in our codebase and may want to have a look."},{"author":"jouvelot","date":"2022-01-18T13:58:53Z","comment":"Thanks, Emilio: indeed sortedP seems quite natural. I'm not sure this is what you had in mind, but the other lemma I was looking for was the existence of a finite list of (improperly ordered) transpositions that, composed together, would yield a sorted list from an unsorted one (think bubble sort).\n\n> On 18 Jan 2022, at 14:28, Emilio Jesús Gallego Arias ***@***.***> wrote:\n> \n> \n> I cc @jouvelot <https://github.com/jouvelot> as he has a similar lemma in our codebase and may want to have a look.\n> \n> —\n> Reply to this email directly, view it on GitHub <https://github.com/math-comp/math-comp/pull/839#issuecomment-1015412958>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AEH4LNNNKZECO5HP62STDETUWVTJPANCNFSM5L5GLZ7A>.\n> Triage notifications on the go with GitHub Mobile for iOS <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>. \n> You are receiving this because you were mentioned.\n> \n\n"},{"author":"proux01","date":"2022-01-18T14:45:56Z","comment":"@jouvelot I don't think we have that currently in MathComp, so feel free to pen a separate PR."},{"author":"jouvelot","date":"2022-04-22T20:56:40Z","comment":"Hi Pierre (@proux01 ), \r\nI wrote a specification and proof for the following BubbleSort-like lemma:\r\n```\r\nbs_spec\r\n     : forall s : seq nat,\r\n       uniq s ->\r\n       exists ts : seq transposition,\r\n         let '(all_bubbles, s') := swap aperm s ts in \r\n         all_bubbles /\\ up_sorted s'\r\n```\r\nwhich fulfills what I was looking for. Since it's a big complicated, I'm not sure this would be acceptable for a mathcomp PR. Would you please be willing to have a quick look at the file `bubblesort.v` in the public repo [https://github.com/jouvelot/mech.v](https://github.com/jouvelot/mech.v) to give me some advice about this?\r\nThanks."},{"author":"proux01","date":"2022-05-14T14:48:53Z","comment":"Hi @jouvelot , sorry for the late answer. I finally got a look. IINM you want to prove that every permutation of a finite set is the composition of finitely many transpositions. I don't know that part of MathComp very well but it seems to me that this result is already proved as `prod_tpermP` in `perm.v`. Why don't you use that?"},{"author":"jouvelot","date":"2022-05-14T20:13:16Z","comment":"No problem, @proux01. One limitation of `prod_termP` I see comes from the fact that the permutations in `perm.v` for a sequence `s` deal with the values in `s`, while I need to deal with both the values and their indices. The theorem I suggest sees transpositions as pairs of indices. The motivation for this is that one can then limit oneself, to sort upward `s`, to applying transpositions that all have the property of being non-sorted bubbles (i.e., if `i1 < i2`, then `nth s i2 < nth s i1`), which is what bubble sort uses. In addition of providing a specification for a kind of bubble sort algorithm, this theorem is a key ingredient to prove some lemmas in `mech.v`, which is a framework under development to specify auction mechanisms (in the Mechanism Design sense)."},{"author":"proux01","date":"2022-05-15T13:54:37Z","comment":"Interesting. I wonder whether you could only go with indices (as values can be retrieved with `nth`). If it were me, I would probably have a detailed look at the proof of `prod_tpermP` and see if I can mimick it for my (stronger) property.\r\nAnyway, to answer the initial question, \"duplicating\" the definition of transposition and redoing on nat things that were (for a small part) already there on ordinals seems a bit wasteful and I wouldn't consider this ready for a pull request (at least in its current state).\r\n"},{"author":"jouvelot","date":"2022-05-15T18:55:32Z","comment":"I agree with your assessment. \r\n\r\n- I thought using `nat` instead of ordinals would be more useful, since it would have more impact than limiting it to finite types (which is ironic, since I use mostly ordinals and tuples in `mech.v`; in fact, I had to add a layer to map the `nat`-based version of my lemma to ordinals, so that I could use it in `mech.v`). \r\n- I also thought about using \"mathcomp indices\" instead of explicit ones, but they can sometimes be a bit difficult to use when duplicates exist in sequences (I use it nonetheless in the proof, since this issue is not a factor there). \r\n- The duplications you mention are indeed unfortunate, although most of the `max`-based lemmas are not present in `bigop.v` (and may not be applicable to `nat`, anyhow, if they were there). Some of them could in fact be added to `bigop.v`, if deemed useful.\r\n- For now, I'll have, as you suggest, a detailed look at `prod_termP`. \r\n\r\nI managed to get my \"bubble lemma\" to work as expected in my project. In my mind, the question remains of whether getting a nicer-looking version of it would be of value to the mathcomp community, or whether I should limit myself to a finite-type-only version ... or just drop it.\r\n\r\nThanks a lot for your advice."}],"review_discussion":[{"author":"proux01","file":"mathcomp/ssreflect/path.v","date":"2022-01-17T14:58:21Z","comment":"Maybe\r\n```suggestion\r\nLemma sortedP x s :\r\n  reflect (forall i, i.+1 < size s -> e (nth x s i) (nth x s i.+1)) (sorted s).\r\n```\r\n(although it is less convenient for the `Arguments` command below)\r\n"},{"author":"proux01","file":"mathcomp/ssreflect/path.v","date":"2022-01-17T14:58:54Z","comment":"```suggestion\r\nArguments pathP {T e x p}.\r\nArguments sortedP {T e} x {s}.\r\n```\r\nif following previous suggestion"},{"author":"CohenCyril","file":"mathcomp/ssreflect/path.v","date":"2022-01-18T01:34:22Z","comment":"I mimicked the behaviour of `pathP` (`x0` there plays the role of `x` for `sortedP`) and I'd rather stick to it."}],"tags":[],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"fa21aa6aa94e65d28aa1cef6f4e5797c3066975d","message":"Adding lemma sortedP","date":"2022-01-18T15:57:14Z"},{"author":"proux01","committer":"web-flow","hash":"aa55306e8312a850ef2673a5befc6bf846244238","message":"Merge branch 'master' into sortedP","date":"2022-01-22T10:20:39Z"}]}