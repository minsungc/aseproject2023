{"author":"proux01","number":738,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":315,"deletions":1},{"file":"mathcomp/algebra/intdiv.v","status":"M","additions":315,"deletions":1},{"file":"mathcomp/algebra/rat.v","status":"M","additions":315,"deletions":1},{"file":"mathcomp/algebra/ssralg.v","status":"M","additions":315,"deletions":1},{"file":"mathcomp/ssreflect/order.v","status":"M","additions":315,"deletions":1},{"file":"mathcomp/ssreflect/path.v","status":"M","additions":315,"deletions":1},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":315,"deletions":1}],"state":"merged","open_date":"2021-05-05T07:52:11Z","update_date":"2021-05-19T16:03:51Z","discussion":[{"author":"CohenCyril","date":"2021-05-05T09:57:21Z","comment":"@proux01 thanks for your contribution, it's likely all of this will be integrated. I will come back to your PR later to help with the tidying. Just some general remarks about mathcomp style meanwhile:\r\n- do not use `{}` to focus, use the [mathcomp conventions](https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md#indentation-in-proof-scripts) about indentation and terminators instead.\r\n- do not name hypothesis `Hsomething`, as expained [here](https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md#naming-of-variables), give meaningful names based on their scope (the longer the scope the more meaningful the name)."},{"author":"CohenCyril","date":"2021-05-11T16:25:03Z","comment":"@proux01 I committed what we did together (and filled the proofs for the nth sorted lemmas)"},{"author":"pi8027","date":"2021-05-13T15:52:07Z","comment":"I will try to review order.v and path.v as well, but I think it will take some time."},{"author":"proux01","date":"2021-05-13T16:06:11Z","comment":"@pi8027 please wait a bit, I'm still tidying them."},{"author":"proux01","date":"2021-05-14T07:43:06Z","comment":"@pi8027 order.v and path.v should be cleaner now."},{"author":"CohenCyril","date":"2021-05-18T10:06:17Z","comment":"@proux01 you need to rebase as well "},{"author":"CohenCyril","date":"2021-05-19T13:14:39Z","comment":"OK, let's merge as soon as CI passes \\o/"},{"author":"proux01","date":"2021-05-19T16:44:07Z","comment":"Thanks all for your patience! I learned a lot."}],"review_discussion":[{"author":"CohenCyril","file":"mathcomp/algebra/intdiv.v","date":"2021-05-05T09:17:19Z","comment":"```suggestion\r\nby case: d => [[|d]|] _ [] m [] n//; rewrite /divz !mul1r; apply: leq_div2r.\r\n```"},{"author":"proux01","file":"mathcomp/algebra/intdiv.v","date":"2021-05-05T09:26:52Z","comment":"Impressive contraction, I just added a `//` to avoid a warning."},{"author":"CohenCyril","file":"mathcomp/algebra/intdiv.v","date":"2021-05-05T09:35:31Z","comment":"```suggestion\r\nhave [->|m_neq0] := eqVneq m 0; first by rewrite lcm0z.\r\nhave [->|n_neq0] := eqVneq n 0; first by rewrite lcmz0.\r\nby rewrite gt_eqF// [0 < _]lcmn_gt0 !absz_gt0 m_neq0 n_neq0.\r\n```"},{"author":"CohenCyril","file":"mathcomp/algebra/intdiv.v","date":"2021-05-05T09:41:59Z","comment":"@proux01 best practice is to use `have [] := view` instead of `case` for these. Also the choice of `view` is subtle, `eqP` is seldom used. We prefer `eqVneq`, `ifP`, `ifPn`, `ltgtP` and suff like that. Last resort is usually `boolP` or `(altP reflection_lemma)` (where `reflection_lemma` can be `eqP`)."},{"author":"CohenCyril","file":"mathcomp/algebra/intdiv.v","date":"2021-05-05T09:44:50Z","comment":"Another best practice -- rather than assembling the hypotheses like you did -- is to either\r\n- rewrite the goal like I did (backward reasonning)\r\n- or make `have : intermediate_statement` (forward reasoning) and switch back to backward reasoning inside the subgoal,\r\n\r\nMassaging hypothesis should be done with parsimony as it clutters the proof script slightly more than the above techniques. (and it should rather be from complicated to simple)"},{"author":"CohenCyril","file":"mathcomp/algebra/intdiv.v","date":"2021-05-05T09:48:53Z","comment":"```suggestion\r\nby case: d => [[|d]|]// _ [] m [] n //; rewrite /divz !mul1r; apply: leq_div2r.\r\n```\r\n(save 1 char to respect the 80char per line limit)"},{"author":"gares","file":"mathcomp/ssreflect/seq.v","date":"2021-05-05T12:56:04Z","comment":"With no presumption of being correct, since I did not test it, these two lines look like they could be written as\r\n```\r\nrewrite (nth_map O) ?size_iota // (nth_map O) ?size_iota //.\r\n```"},{"author":"proux01","file":"mathcomp/ssreflect/seq.v","date":"2021-05-05T15:06:47Z","comment":"Indeed, you are right."},{"author":"chdoc","file":"mathcomp/ssreflect/path.v","date":"2021-05-05T15:22:58Z","comment":"```suggestion\r\nProof. exact/subseq_path/undup_subseq. Qed.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/path.v","date":"2021-05-05T15:23:56Z","comment":"```suggestion\r\nProof. exact/subseq_sorted/undup_subseq. Qed.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/path.v","date":"2021-05-05T16:21:50Z","comment":"```suggestion\r\nLemma drop_mask i (s : seq T) : \r\n  drop i s = mask (nseq i false ++ nseq (size s - i) true) s.\r\nProof. \r\nelim: i s => [|i IHi] s; last by case: s.\r\nby rewrite drop0 /= mask_true // subn0.\r\nQed.\r\n\r\nLemma sorted_drop s i : sorted leT s -> sorted leT (drop i s).\r\nProof. rewrite drop_mask; exact: sorted_mask. Qed.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/path.v","date":"2021-05-05T16:22:37Z","comment":"The `drop_mask` lemma should probably be moved elsewhere."},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-05-05T16:45:07Z","comment":"If you move this after the MakeSeq section, this can be proved by:\r\n```\r\nby move=> ?; rewrite -[in LHS](mkseq_nth x0 s) -map_take take_iota (minn_idPl _).\r\n```"},{"author":"CohenCyril","file":"mathcomp/ssreflect/path.v","date":"2021-05-05T16:47:49Z","comment":"```\r\nLemma drop_mask i (s : seq T) : \r\n  drop i s = mask (nseq i false ++ nseq (size s - i) true) s.\r\nProof. by elim: i s => [|i IHi] [|//]; rewrite drop0/= mask_true// subn0. Qed.\r\n```\r\n(not tested)"},{"author":"proux01","file":"mathcomp/ssreflect/path.v","date":"2021-05-06T15:13:10Z","comment":"Almost\r\n```\r\nLemma drop_mask i s :\r\n  drop i s = mask (nseq i false ++ nseq (size s - i) true) s.\r\nProof. by elim: i s => [s|? ? []//]; rewrite drop0/= mask_true// subn0. Qed.\r\n```\r\n"},{"author":"proux01","file":"mathcomp/ssreflect/seq.v","date":"2021-05-06T15:14:39Z","comment":"This was 81 chars so I just got the other way around (rewrite RHS instead of LHS)."},{"author":"proux01","file":"mathcomp/ssreflect/path.v","date":"2021-05-06T17:10:28Z","comment":"Unfortunately, this nice proof adds a useless hypothesis `transitive leT` :("},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2021-05-11T16:34:14Z","comment":"As discussed\r\n```suggestion\r\nLemma map_nth_iota T (x0 : T) s i : i <= size s -> [seq nth x0 s j | j <- iota 0 i] = take i s.\r\n```"},{"author":"chdoc","file":"mathcomp/ssreflect/path.v","date":"2021-05-12T08:13:30Z","comment":"If you're upset about the extra assumption, here is another possibility:\r\n```coq\r\nLemma sorted_cat s1 s2 : sorted leT (s1 ++ s2) -> sorted leT s1 /\\ sorted leT s2.\r\nProof.\r\nby move: s1 s2 => [|x s1] [|y s2] //=; rewrite ?cats0 // cat_path /= => /and3P[].\r\nQed.\r\n\r\nLemma sorted_take n s : sorted leT s -> sorted leT (take n s).\r\nProof. by rewrite -[s in sorted _ s](cat_take_drop n) => /sorted_cat[]. Qed.\r\n\r\nLemma sorted_drop n s : sorted leT s -> sorted leT (drop n s).\r\nProof. by rewrite -[s in sorted _ s](cat_take_drop n) => /sorted_cat[]. Qed.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2021-05-13T15:27:27Z","comment":"```suggestion\r\nProof. by rewrite -!size_filter filter_undup size_undup. Qed.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2021-05-13T15:30:44Z","comment":"```suggestion\r\nmove=> s1_eq_s2; rewrite -!size_filter !filter_undup.\r\napply/perm_size/perm_undup => x.\r\nby rewrite !mem_filter; case: (boolP (a x)) => //= /s1_eq_s2.\r\n```"},{"author":"pi8027","file":"mathcomp/algebra/ssralg.v","date":"2021-05-13T15:47:16Z","comment":"Lemmas in `ssralg` have to be exported from `GRing.Theory`. See #440."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2021-05-14T09:04:04Z","comment":"Nice!!!\r\nNitpicking:\r\n- Please remove `%N` since it is inside `seq.v` there is no ambiguity.\r\n- Also I would use `rewrite (@eq_in_filter _ _ pred0) ?filter_pred0// => i` instead of using`under` in this case."},{"author":"CohenCyril","file":"mathcomp/ssreflect/order.v","date":"2021-05-14T09:05:06Z","comment":"```suggestion\r\nmove: (filter_all (>= x) s) => /all_nthP; apply; rewrite size_filter.\r\n```\r\nI'd use `have /all_nthP := filter_all (>= x) s` instead of `move:` since `:`, `=>`, etc. are better suited for \"bureaucratic\" handling of the goal, while `have` marks key steps."},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2021-05-14T09:07:59Z","comment":"Please add `take_mask` then :)"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2021-05-14T09:08:31Z","comment":"I personally prefer the namings `dropEmask` and `takeEmask` though"},{"author":"chdoc","file":"mathcomp/ssreflect/seq.v","date":"2021-05-14T09:59:36Z","comment":"I was about to say that `drop_mask` was badly chosen by me. I agree with the `E` variants."},{"author":"pi8027","file":"mathcomp/ssreflect/order.v","date":"2021-05-18T06:12:59Z","comment":"```suggestion\r\nby rewrite addn0 => ->; rewrite -add1n leq_add2r -has_count has_pred1.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/order.v","date":"2021-05-18T06:13:26Z","comment":"```suggestion\r\nby rewrite -(count_predC (> x)) addKn; apply: eq_count => y; rewrite /= leNgt.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/order.v","date":"2021-05-18T06:13:43Z","comment":"```suggestion\r\nby rewrite -(count_predC (>= x)) addKn; apply: eq_count => y; rewrite /= ltNge.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/path.v","date":"2021-05-18T06:33:05Z","comment":"```suggestion\r\nProof. by rewrite !count_merge !count_cat => -> ->. Qed.\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/path.v","date":"2021-05-18T06:38:29Z","comment":"```suggestion\r\nby case: s => [//| x'' s xlex' /= /andP[x'lex'' ->]]; rewrite (leT_tr xlex').\r\n```"},{"author":"pi8027","file":"mathcomp/ssreflect/order.v","date":"2021-05-18T06:49:18Z","comment":"I think this should be a part of the `TotalTheory` module but it requires us to relocate `dual_orderType`. I can do this in a separate PR."},{"author":"proux01","file":"mathcomp/ssreflect/order.v","date":"2021-05-18T07:45:30Z","comment":"I agree, thanks!"},{"author":"chdoc","file":"mathcomp/ssreflect/order.v","date":"2021-05-18T15:48:15Z","comment":"```suggestion\r\n  (count (< x) s < count (<= x) s)%N = (x \\in s).\r\n```\r\nThe same proof actually proves the equality, so this may be preferable."},{"author":"chdoc","file":"mathcomp/ssreflect/path.v","date":"2021-05-18T16:01:50Z","comment":"This has nothing to do with sorting or ordering. If it is to be kept at all, it should be moved after `rcons_path` as:\r\n```coq\r\nLemma path_take x p i : path x p -> path x (take i p).\r\nProof. by rewrite -{1}[p](cat_take_drop i) cat_path => /andP[->]. Qed.\r\n```\r\n@CohenCyril I'm never quite sure about the naming conventions for `path` lemmas (e.g., `cat_path` or `rcons_path`). So should this be `path_take` or `take_path?`. "},{"author":"CohenCyril","file":"mathcomp/ssreflect/path.v","date":"2021-05-18T19:24:37Z","comment":"Should be `take_path` (well spotted @chdoc).\r\nIndeed unary predicates usually come as a suffix in mathcomp conventions, one can argue whether `path` is unary or binary, but the rest of the library seems to consider `x` as simply an accessory parameter and the only real parameter is `p`."},{"author":"CohenCyril","file":"mathcomp/ssreflect/path.v","date":"2021-05-18T19:24:57Z","comment":"should be `cat_sorted`"},{"author":"CohenCyril","file":"mathcomp/ssreflect/path.v","date":"2021-05-18T19:26:57Z","comment":"Should be `take_sorted` and `drop_sorted`"},{"author":"chdoc","file":"mathcomp/ssreflect/path.v","date":"2021-05-18T20:21:12Z","comment":"Shouldn't there actually also be an `E` somewhere (e.g. `cat_sortedE`) since the name refers to the shape of the premise rather than the conclusion?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/path.v","date":"2021-05-19T09:22:18Z","comment":"@chdoc you are right about the fact this one is misnamed..., I was a bit too eager in my renaming suggestions.\r\nIt would not matter so much if there wasn't a possibly better candidate for being named `cat_sorted`, namely\r\n```coq\r\nLemma cat_sorted x y s1 s2 (s1x := rcons s1 x) (ys2 := y :: s2) :\r\n  sorted leT s1x ys2 = [&& x <= y, sorted leT s1x & sorted leT ys2].\r\n```\r\n\r\nHowever `E` lemma are usually \"elimination equation\" lemmas (taking a symbol to an equivalent definition), this is not the case here, so `car_sortedE` would also be misnamed\r\n\r\nIn this light, I suggest we'd rather name it `cat_sorted2` to signify both (2) sides of the `cat` are sorted, or that we keep `sorted_cat` even thought the name does not respect usual conventions."}],"tags":[],"commits":[{"author":"proux01","committer":"proux01","hash":"61c41a6f77f6ed29435f81cb08c76244a49b241a","message":"A few lemmas in seq.v\n\nCo-authored-by: Christian Doczkal <christian.doczkal@inria.fr>\nCo-authored-by: Cyril Cohen <cyril.cohen@inria.fr>\nCo-authored-by: Kazuhiko Sakaguchi <pi8027@gmail.com>","date":"2021-05-18T10:16:33Z"},{"author":"proux01","committer":"proux01","hash":"a2eb2924ac56fe23c83a0985dcbfcde3f65679bf","message":"A few lemmas in path.v\n\nCo-authored-by: Christian Doczkal <christian.doczkal@inria.fr>\nCo-authored-by: Cyril Cohen <cyril.cohen@inria.fr>\nCo-authored-by: Kazuhiko Sakaguchi <pi8027@gmail.com>","date":"2021-05-19T11:34:44Z"},{"author":"proux01","committer":"proux01","hash":"cab53f0e9318306b1f1b653bb924d051c77eb639","message":"A few lemmas in order.v about counting in sorted lists\n\nCo-authored-by: Cyril Cohen <cyril.cohen@inria.fr>\nCo-authored-by: Kazuhiko Sakaguchi <pi8027@gmail.com>","date":"2021-05-19T11:34:44Z"},{"author":"proux01","committer":"proux01","hash":"7cec020bae40091868d0de063262094134fcc4a6","message":"Add lemma fmorph_eq\n\nCo-authored-by: Kazuhiko Sakaguchi <pi8027@gmail.com>","date":"2021-05-19T11:34:44Z"},{"author":"proux01","committer":"proux01","hash":"298475fea2629943e2172473d5a5cc55a18c541b","message":"Add lemmas minr_rat and maxr_rat","date":"2021-05-19T11:34:44Z"},{"author":"proux01","committer":"proux01","hash":"7063c863308464711979e682334e7543a425bdf1","message":"Add lcmz\n\nCo-authored-by: Cyril Cohen <cyril.cohen@inria.fr>","date":"2021-05-19T11:34:44Z"},{"author":"proux01","committer":"proux01","hash":"4f87255b9dcad84806311b1bf627bde1e6b645b7","message":"Add lemma lez_pdiv2r","date":"2021-05-19T11:34:44Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"874f6836853bc5decb1d5e7a8a4d544cfe24fe2f","message":"Shorter proof + under 80 char limit","date":"2021-05-19T13:12:07Z"}]}