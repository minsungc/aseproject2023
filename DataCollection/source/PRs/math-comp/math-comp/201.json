{"author":"CohenCyril","number":201,"diff_summary":[{"file":"ChangeLog","status":"M","additions":743,"deletions":157},{"file":"mathcomp/algebra/ssrint.v","status":"M","additions":743,"deletions":157},{"file":"mathcomp/algebra/ssrnum.v","status":"M","additions":743,"deletions":157},{"file":"mathcomp/ssreflect/eqtype.v","status":"M","additions":743,"deletions":157},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":743,"deletions":157},{"file":"mathcomp/ssreflect/path.v","status":"M","additions":743,"deletions":157},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":743,"deletions":157},{"file":"mathcomp/ssreflect/ssrnat.v","status":"M","additions":743,"deletions":157}],"state":"merged","open_date":"2018-07-03T11:12:39Z","update_date":"2018-12-19T14:43:32Z","discussion":[{"author":"amahboubi","date":"2018-09-05T14:19:51Z","comment":"I am not sure it is the best place to discuss this but I still think that the litany of lemmas about compatibility with order in `ssrnum` is a nasty issue. For instance I rather often have to use that:\r\n``x >= 0 -> y <= z ->  y * x <= z * x``.  I have never managed to remember that the name of this lemma is ``ler_wpmul2r``, and its statement is: \r\n```Lemma ler_wpmul2r x : 0 <= x -> {homo *%R^~ x : y z / y <= z}.```\r\nwhich is brown belt ssr-style notation (mind the ``%R^~ x``), next to impossible to `Search` and quite hard to teach to a newbie.\r\nIt would be awesome to find a way to improve this..."},{"author":"amahboubi","date":"2018-09-05T14:44:47Z","comment":"Here is another difficult one, this time in `ssrint`:\r\n\r\n```About ler_piexpz2l.```\r\n\r\nwhich answers:\r\n\r\n```ler_piexpz2l :\r\nforall (R : realFieldType) (x : R),\r\n(0 < x)%R ->\r\n(x < 1)%R ->\r\n{in (>= 0)%R &, {mono exprz (R:=R) x : y x2 / (x2 <= y)%R >-> \r\n(y <= x2)%R}}\r\n\r\nExpanded type for implicit arguments\r\nler_piexpz2l :\r\nforall (R : realFieldType) (x : R),\r\n(0 < x)%R ->\r\n(x < 1)%R ->\r\nforall x2 y : int_numDomainType,\r\nx2 \\in (>= 0)%R ->\r\ny \\in (>= 0)%R ->\r\n(fun x3 : R => [eta (>= x3)%R]) (x ^ x2)%R (x ^ y)%R =\r\n(fun y0 : int => <=%R%R^~ y0) x2 y\r\n```\r\n\r\n"},{"author":"amahboubi","date":"2018-09-07T14:28:34Z","comment":"Another caveat: `{homo ... }` lemmas like the aforementionned `ler_wpml2r` should be `apply`ed, but the analogue for the strict relation, `ltr_pmul2r` is formulated as a `{mono ..}` predicate, and is a `rewrite` rule."},{"author":"CohenCyril","date":"2018-09-10T13:24:07Z","comment":"I agree with your three remarks about the difficulty to remember names of these and how exactly to use them. I see no easy way to do so for now, and I believe this is indeed off-topic here and deserves a separate issue."},{"author":"CohenCyril","date":"2018-10-31T13:47:12Z","comment":"> Another caveat: `{homo ... }` lemmas like the aforementionned `ler_wpml2r` should be `apply`ed, [...]\r\n\r\nThis is not completely true, most `{homo ...}` lemma can be rewritten with : they are rules of the form `(_ <= _) = true` with preconditions...\r\n\r\n"},{"author":"CohenCyril","date":"2018-11-19T13:15:49Z","comment":"@amahboubi I addressed your requests, should we merge?"}],"review_discussion":[{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-03T13:06:06Z","comment":"Please add an entry for extremum to the header."},{"author":"amahboubi","file":"mathcomp/ssreflect/path.v","date":"2018-09-03T13:19:15Z","comment":"I am a bit disturbed by the use of \"homomorphism\" here... I am aware that it is inherited from ssrfun, but I do not understand what is an homomorphism without an algebraic structure. This section is \"just\" about (almost) \"sorted\" lists. Changing the notation is a big change, I am just suggesting to rename the section here."},{"author":"amahboubi","file":"mathcomp/ssreflect/ssrnat.v","date":"2018-09-03T13:19:59Z","comment":"Similar remark about homomorphisms here."},{"author":"amahboubi","file":"mathcomp/ssreflect/ssrnat.v","date":"2018-09-03T13:24:37Z","comment":"Why this handful of Let?"},{"author":"amahboubi","file":"ChangeLog","date":"2018-09-03T13:26:48Z","comment":"I think that this line might be misleading (see below). It is not clear what a \"homomorphism\" is. And the `mono` in the {mono...} notation does not stand for monomorphism but for monotonic. If I am correct, a monomorphism is usually something else, e.g. an injective homomorphism. Plus in English there is no final 'e'."},{"author":"amahboubi","file":"mathcomp/algebra/ssrnum.v","date":"2018-09-03T13:28:25Z","comment":"Why this handful of Let (when the abbreviation and the name of the constant coincide)?"},{"author":"amahboubi","file":"ChangeLog","date":"2018-09-03T13:30:16Z","comment":"Please explain in which direction it is generalized (from nat to eqtypes)."},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-03T13:39:50Z","comment":"What is /' doing here? Not a request but a real question :)."},{"author":"amahboubi","file":"mathcomp/algebra/ssrnum.v","date":"2018-09-03T13:43:47Z","comment":"I would suggest \"a value i : T\" minimizing M...\"\r\nAlso, what does the `arg` keyword refer to?"},{"author":"amahboubi","file":"mathcomp/algebra/ssrnum.v","date":"2018-09-03T13:44:09Z","comment":"\"a value i maximizing M...\""},{"author":"CohenCyril","file":"ChangeLog","date":"2018-09-05T09:24:47Z","comment":"Well, if `aR` and`rR` are indeed order relations (as intended) then a `f` which is a `mono` is provably injective: `mono_inj : {mono f : x y / aR x y >-> rR x y} -> injective f.`\r\n\r\nThe naming comes from the category of ordered structures, so both `homo` and `mono` are intended as homomorphism and monomorphism, and such a `f` is a  morphism between the objects (`aT`, `aR`) and (`rT`, `rR`) of the aforementioned category.\r\n\r\nWhen I chose these names, I found the coincidence that `mono` was ambiguous enough to be read both as \"monomorphism\" and \"monotonic\" mildly fortunate, but `mono` really means the former one. However, a \"monomorphism\" happens to be equivalent to \"**strict** monotonicity\" (which ends up \"justifying\" the ambiguity), while a \"homomorphism\" really corresponds to nonstrict \"monotonicity\".\r\n\r\nI'm not sure whether I should include this digression in a file, as a comment in the code? or in a header? If so I guess it should be in ssrfun because the symbol behind the notation, `monomorphism_2`, is defined there anyways..."},{"author":"amahboubi","file":"ChangeLog","date":"2018-09-05T14:11:48Z","comment":"Sure, but I still think that the wording you added to the ChangeLog is misleading. It is not generic: it is about homo/mono morphism of *ordered* structures. See e.g. [homomorphism](https://en.wikipedia.org/wiki/Homomorphism). E.g. there is no equational theory preserved here. Adding that this is about order would address my comment. \r\n\r\nI have no complain about the name of the constants, and the comments in ssrfun are clear that they are about stability/morphism/homomorphism *for unary and binary relations*."},{"author":"CohenCyril","file":"ChangeLog","date":"2018-09-05T16:26:38Z","comment":"> it is about homo/mono morphism of ordered structures\r\n\r\noh, right!"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-10T13:11:38Z","comment":"ok"},{"author":"CohenCyril","file":"mathcomp/ssreflect/ssrnat.v","date":"2018-09-10T13:14:05Z","comment":"This is necessary until we have canonical structures for orders. It allows the subsequent proofs to be oneliners since all the necessary hypotheses are in context and can thus be found by `ssrdone`."},{"author":"CohenCyril","file":"mathcomp/algebra/ssrnum.v","date":"2018-09-10T13:15:08Z","comment":"This is helping `ssrdone` concluding every subsequent proofs. (I definitely should put comments)"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-10T13:16:17Z","comment":"This is a use of the view (`/`) named `'forall_implyP` (`/'` is not a token, the two tokens are `/` and `'forall_` (followed by identifier `implyP`))"},{"author":"CohenCyril","file":"mathcomp/algebra/ssrnum.v","date":"2018-09-10T13:22:09Z","comment":"- I agree with removing the `of` indeed\r\n- I guess `arg` refers to the \"argument\" of `M` seen as a function of `i`.\r\n\r\nI copied `[arg min_(i < i0 | P) M] == a value of i : T minimizing M : nat, subject  [...]` from https://github.com/math-comp/math-comp/blob/master/mathcomp/ssreflect/fintype.v#L136-L144, so I believe that any modification to that description should be backported there."},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-10T13:49:58Z","comment":"Amazing, I did not know this (family of) view(s), or may be I forgot about it. It's been too long since I worked finite objects it seems... Sorry for the noise and thanks for the answer."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-10T14:08:19Z","comment":"Off-topic: this family proved useful to me and should be completed with `'forall_in_`, etc... variants.\r\nAlternatively/Additionally, @bgregoir and @gares have an experiment on automated views using typeclasses that I would much like to see as a PR here."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2018-10-31T13:50:00Z","comment":"@bgregoir @gares do you think you could open a PR about these?"},{"author":"gares","file":"mathcomp/ssreflect/fintype.v","date":"2018-10-31T14:31:31Z","comment":"Benjamin did use it for a while, but it found it unsatisfactory (eg see the vlevel business)\r\nThe code is here: https://github.com/gares/autoview\r\nMaybe you could try to use it here and see how it goes."},{"author":"gares","file":"mathcomp/ssreflect/fintype.v","date":"2018-10-31T14:38:37Z","comment":"The point is: you have 5 variants (only logical, recursive, under binders, ...) but sometimes none fits, eg they go too deep or too shallow :-/\r\nAt least, this was the argument Benjamin communicated me in private.\r\n\r\n For your use case you probably have what you need."},{"author":"gares","file":"mathcomp/ssreflect/fintype.v","date":"2018-10-31T14:39:56Z","comment":"If it works for you I can make a PR and write some doc (the .v file is not too bad).\r\nNow that I think about it, other users were interested."},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-12-19T14:21:07Z","comment":"HI @CohenCyril, @gares, I am about to merge the present PR, but I would like to keep a pointer on this conversion, so that we keep track of this benchmark for the autoview experiment. What is the best way of doing so?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2018-12-19T14:39:33Z","comment":"@amahboubi just keep the following link somewhere https://github.com/math-comp/math-comp/pull/201#discussion_r214692813 (e.g. in a new issue you may open)"},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-12-19T14:43:02Z","comment":"done."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"needs: review","description":"PR that needs more reviews. Please review it."},{"tag":"needs: rebase","description":"PR which is not rebased: check the target is appropriate (generally master) and rebase on top of it."}],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"365f59c2455c7638c4f82af6db67d3bb56be861c","message":"Generalizing homo-mono-morphism lemmas and extremum\n\nsee ChangeLog","date":"2018-12-19T10:45:01Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"ba669fef1e39fddcc2f801b77f1f19e999392fc1","message":"Answering @amahboubi's review.","date":"2018-12-19T10:45:01Z"}]}