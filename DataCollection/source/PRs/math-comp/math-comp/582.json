{"author":"CohenCyril","number":582,"diff_summary":[{"file":"mathcomp/algebra/matrix.v","status":"M","additions":18,"deletions":13}],"state":"merged","open_date":"2020-09-08T01:59:47Z","update_date":"2020-09-29T11:29:41Z","discussion":[{"author":"CohenCyril","date":"2020-09-28T08:42:06Z","comment":"> I think `eq_map_mx_id` might be a better name, but I'm not sure. Except that, it looks good to me.\r\n\r\nThe `eq` in the name is not for the equality in the conclusion, but the equality in the hypothesis. In the same way one reads `map_mx_id` as \"`map_mx` applied to `id` is equal to something\", one should read `map_mx_eq_id` as \"`map_mx` applied to something which is equal to `id`, is equal to something\"."},{"author":"CohenCyril","date":"2020-09-28T12:32:34Z","comment":"Actually, after performing the change in `poly.v` I realized `map_poly_id` was never used, and I revised the uses of `map_mx_id` in my developments. And in fact, as I set the implicits `(map_mx_eq_id id)` does exactly the same job as `map_mx_id` which is used less often.\r\nSo ... I backtrack and I will come back with a new set of lemmas."}],"review_discussion":[{"author":"thery","file":"mathcomp/algebra/matrix.v","date":"2020-09-08T16:14:00Z","comment":"In poly, this theorem is simply called `map_poly_id`. "},{"author":"CohenCyril","file":"mathcomp/algebra/matrix.v","date":"2020-09-08T19:21:28Z","comment":"`map_mx_id` is taken (see [above](https://github.com/math-comp/math-comp/blob/693a9fc82903f19770027d9b26f66de61377f221/mathcomp/algebra/matrix.v#L1051-L1052)), but maybe I could simply replace it, WDYT?"},{"author":"pi8027","file":"mathcomp/algebra/matrix.v","date":"2020-09-09T22:14:56Z","comment":"For me, it seems better to replace `map_mx_id`."},{"author":"pi8027","file":"mathcomp/algebra/matrix.v","date":"2020-09-10T08:39:24Z","comment":"```suggestion\r\nProof. by move/eq_map_mx->; rewrite map_mx_id. Qed.\r\n```"},{"author":"thery","file":"mathcomp/algebra/matrix.v","date":"2020-09-10T09:09:18Z","comment":"can we just remove `map_mx_id`? I think it is not much used and\r\n\r\n```\r\nLemma map_mx_id (R : Type) m n (M : 'M[R]_(m,n)) : M ^ id = M.\r\nProof. by rewrite map_mx_eq_id . Qed.\r\n```\r\n"},{"author":"CohenCyril","file":"mathcomp/algebra/matrix.v","date":"2020-09-26T23:03:34Z","comment":"I'd rather not remove `map_mx_id`, the specialization to `id` makes `rewrite map_mx_id` possible without pointing out which one is `id` (otherwise patterns might be needed)."},{"author":"thery","file":"mathcomp/algebra/matrix.v","date":"2020-09-28T09:02:18Z","comment":"Ok but then rename the theorem in `poly` to match the one in `matrix` "},{"author":"pi8027","file":"mathcomp/algebra/matrix.v","date":"2020-09-28T10:29:01Z","comment":"> Ok but then rename the theorem in `poly` to match the one in `matrix`\r\n\r\nMake sense. @CohenCyril Please let me know whether you plan to do this in this PR or in another PR. IMO, the former is better."},{"author":"CohenCyril","file":"mathcomp/algebra/matrix.v","date":"2020-09-28T12:10:07Z","comment":"I am looking into it right now..."},{"author":"pi8027","file":"mathcomp/algebra/matrix.v","date":"2020-09-29T03:40:14Z","comment":"This lemma was iff before this change. Is it really OK?"},{"author":"pi8027","file":"mathcomp/algebra/matrix.v","date":"2020-09-29T03:51:33Z","comment":"The ordering of `f` and `g` is opposite and `g` is implicit in `eq_map_poly`. Shouldn't it be the same?"},{"author":"CohenCyril","file":"mathcomp/algebra/matrix.v","date":"2020-09-29T11:00:46Z","comment":"The iff has no advantage over `matrixP` lemma itself. But as a forward only view, one can use the rewriting left to right with an explicit `g` to give the target function."},{"author":"CohenCyril","file":"mathcomp/algebra/matrix.v","date":"2020-09-29T11:17:35Z","comment":"It's a trade off, such a lemma can be used in four different styles:\r\n1. rewriting `eq_map_stuff` using an function equality as argument. (the most used for `eq_map_poly`)\r\n2. rewriting `eq_map_stuff` using a function `g` as argument. (the least used, but still used)\r\n3. `apply: eq_map_stuff` (the second most used, for `eq_map_poly`)\r\n4. `move=> /eq_map_stuff` (the third most used, for `eq_map_poly`)\r\n\r\nFor the last two, the choice of implicit arguments has no impact whatsoever (except arguments of type `Type` must be either `nonPropType` or maximal implicit, which I made sure of for `eq_map_mx`).\r\n\r\nNow, for 1. and 2., there is an impact, let's see it:\r\n1. a. If one lets `f` and `g` implicit, then there is no `_` and one can write `rewrite (eq_map_stuff eq_f_g)` directly.\r\nb. Otherwise, if `g` is explicit, then one needs to add one `_`, as in `rewrite (eq_map_stuff _ eq_f_g)`,  which can be bothering but will be nothing compared to what is coming in 2.\r\n2. a. If one lets `f` and `g` implicit, then then one must write `rewrite (@eq_map_stuff _ ... _ g)`. In the case of `eq_map_poly` it's three `_`, but with `eq_map_mx` without swapping the arguments (i.e. `f`, then `g`), it would be five `_` and with swapping, (i.e. `g` then `f`,) only four `_`.\r\nb. Otherwise, if `g` is explicit, one can just write `rewrite (eq_map_stuff g)`.\r\n\r\nHence my preference for option b. for matrices. For polynomials, if I changed something, I suppose it would simply be reordering `g` and `f` so that one needs to put only two `_` to explicit `g`, which would slightly improve the current situation.\r\n\r\n"},{"author":"pi8027","file":"mathcomp/algebra/matrix.v","date":"2020-09-29T11:27:59Z","comment":"OK. I agree."}],"tags":[],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"fab8ceb34957ca4e261a5ba91cf8379f694dd1b8","message":"Update `map_mx_id`, fix some implicits and argument orders\n\n- Fix implicits of `eq_map_mx`, `eq_in_map_mx`, `map_mx_id_in` and `map_mx_id`,\n  in order to give more practical arguments first.\n- Generalized `map_mx_id` to take the shape f =1 id -> M ^ f = M.\n  The previous behaviour can be recovered through `map_mx_id (frefl id)` or `[_ ^ id]map_mx_id`","date":"2020-09-28T14:03:52Z"}]}