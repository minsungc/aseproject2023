{"author":"CohenCyril","number":626,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":6,"deletions":1},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":6,"deletions":1}],"state":"merged","open_date":"2020-10-30T18:48:51Z","update_date":"2020-11-06T15:51:35Z","discussion":[{"author":"chdoc","date":"2020-11-04T14:19:22Z","comment":"I'm a bit surprised that this change does not cause any breakage whatsoever. One reason might be that the lemma, regardless of the premise, is too weak to be of much use. I only found one use for this lemma so far, and that was to prove the following strengthening. (I'm including the comment I added when proving this 18 months ago :smile:)\r\n```coq\r\n(** TOTHINK: [#|P| <= #|aT|] would suffice, the other direction is\r\nimplied. But the same is true for [inj_card_onto]. *)\r\nLemma inj_card_onto_pred (aT rT : finType) (f : aT -> rT) (P : pred rT) : \r\n  injective f -> (forall x, f x \\in P) -> #|aT| = #|P| -> {in P, forall y, y \\in codom f}.\r\nProof.\r\nmove=> f_inj fP E y yP.\r\npose rT' := { y : rT | P y}; pose f' (x:aT) : rT' := Sub (f x) (fP x).\r\nhave/inj_card_onto f'_inj : injective f' by  move => x1 x2 []; apply: f_inj.\r\nrewrite -[#|P|]card_sig in E; have/mapP[x _ [] ->] := f'_inj E (Sub y yP). \r\nexact: codom_f. \r\nQed.\r\n```\r\nThis one I use a handful of times. I guess one could also have a predicate `A` on the argument type and weaken this to {in A&, injective f} and f a homomorphism from A to P. "},{"author":"CohenCyril","date":"2020-11-04T15:17:15Z","comment":"@chdoc note that two lemmas were generalized, and the second one `inj_card_bij`, is used slightly more often. I guess one reason no breakage occurs is that every proof solving `#|T| = #|T'|` can solve `#|T| >= #|T'|` just as easily.\r\nAs for your variation on `inj_card_onto`, I'd say it would be a nice addition indeed, in a subsequent PR.\r\nI suggest the following statements + proofs (rather than going all the way through `inj_card_onto`):\r\n```coq\r\nLemma inj_image_eq (aT rT : finType) (f : aT -> rT) \r\n    (D : {pred aT}) (P : {pred rT}) : \r\n    {in D &, injective f} -> image f D \\subset P -> #|P| <= #|D| ->\r\n  image f D =i P.\r\nProof.\r\nmove=> f_inj fP leP; apply/subset_cardP => //; apply/eqP.\r\nby rewrite eqn_leq subset_leq_card//= (leq_trans leP)// card_in_image.\r\nQed.\r\n\r\nLemma inj_codom_eq (aT rT : finType) (f : aT -> rT) (P : {pred rT}) : \r\n  injective f -> codom f \\subset P -> #|P| <= #|aT| -> codom f =i P.\r\nProof. by move=> f_inj; apply/inj_image_eq; apply: in2W. Qed.\r\n```"},{"author":"chdoc","date":"2020-11-04T20:17:48Z","comment":"> I guess one reason no breakage occurs is that every proof solving `#|T| = #|T'|` can solve `#|T| >= #|T'|` just as easily.\r\n\r\nI was a bit worried that there could be places where the the equality is shown by showing `#|T| >= #|T'|` and `#|T| <= #|T'|` separately, possibly duplicating your argument. But neither lemma is used withing mathcomp (outside of fintype), so even if this is the case, it would be of no concern to this PR. "},{"author":"chdoc","date":"2020-11-06T15:39:22Z","comment":"@pi8027 then please merge, because I cannot :smirk: "}],"review_discussion":[],"tags":[],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"aad2327376b2f76950be51a6bf22b32b0a01b2eb","message":"Generalizing inj_card_onto and inj_card_bij.","date":"2020-11-03T14:14:29Z"}]}