{"author":"CohenCyril","number":471,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"A","additions":15,"deletions":5},{"file":"mathcomp/Make.test-suite","status":"A","additions":15,"deletions":5},{"file":"mathcomp/ssreflect/seq.v","status":"A","additions":15,"deletions":5},{"file":"mathcomp/test_suite/test_guard.v","status":"A","additions":15,"deletions":5}],"state":"merged","open_date":"2020-04-05T23:03:53Z","update_date":"2020-04-10T13:31:35Z","discussion":[{"author":"pi8027","date":"2020-04-09T01:05:06Z","comment":"It would be nice to have a comment about the guard condition not to revert this change later, but this may be more general and placed somewhere else. I think what we should say here, in general, is that we should try to factor out function arguments of higher-order, polymorphic, recursive functions. For example, can we reproduce the same issue with the `map` function?"},{"author":"pi8027","date":"2020-04-09T01:36:34Z","comment":"> For example, can we reproduce the same issue with the `map` function?\r\n\r\nI self-answer this question. It is possible:\r\n```coq\r\nFrom mathcomp Require Import all_ssreflect.\r\n\r\nSet Implicit Arguments.\r\nUnset Strict Implicit.\r\nUnset Printing Implicit Defensive.\r\n\r\nInductive tree (A : Type) := singleton of A | branch of list (tree A).\r\n\r\nModule Bad.\r\n\r\nFixpoint map (A B : Type) (f : A -> B) (xs : list A) : list B :=\r\n  if xs is x :: xs then f x :: map f xs else [::].\r\n\r\nFail Fixpoint tmap (A B : Type) (f : A -> B) (t : tree A) : tree B :=\r\n  match t with\r\n    | singleton x => singleton (f x)\r\n    | branch ts => branch (map (tmap f) ts)\r\n  end.\r\n\r\nEnd Bad.\r\n\r\nModule Good.\r\n\r\nDefinition map (A B : Type) (f : A -> B) :=\r\n  fix map' (xs : list A) := if xs is x :: xs then f x :: map' xs else [::].\r\n\r\nDefinition tmap (A B : Type) (f : A -> B) := fix tmap' (t : tree A) : tree B :=\r\n  match t with\r\n    | singleton x => singleton (f x)\r\n    | branch ts => branch (map tmap' ts)\r\n  end.\r\n\r\nEnd Good.\r\n```\r\n\r\nTo conclude, if this is not a commonly known technique to write terminating functions, it would worth documenting it somewhere."},{"author":"affeldt-aist","date":"2020-04-09T07:31:45Z","comment":"> To conclude, if this is not a commonly known technique to write terminating functions, it would worth\r\n> documenting it somewhere.\r\n\r\nI would say https://github.com/math-comp/math-comp/blob/master/CONTRIBUTING.md."},{"author":"pi8027","date":"2020-04-09T12:21:55Z","comment":"@affeldt-aist Sure. Also, we can do that in a separate PR."},{"author":"CohenCyril","date":"2020-04-09T12:52:07Z","comment":"> ```coq\r\n> Definition tmap (A B : Type) (f : A -> B) := fix tmap' (t : tree A) : tree B :=\r\n>   match t with\r\n>     | singleton x => singleton (f x)\r\n>     | branch ts => branch (map tmap' ts)\r\n>   end.\r\n> ```\r\n> \r\n> To conclude, if this is not a commonly known technique to write terminating functions, it would worth documenting it somewhere.\r\n\r\nI think such code should be added to the test-suite, in order to detect possible reverts..."},{"author":"pi8027","date":"2020-04-09T13:14:50Z","comment":"@CohenCyril \r\n> I think such code should be added to the test-suite, in order to detect possible reverts...\r\n\r\nSo true. Could you add a test case for `all2`? I will add more test cases later."},{"author":"CohenCyril","date":"2020-04-10T09:02:26Z","comment":"> Looks good to me, modulo a test case. Since we can add it later, it should not block the release.\r\n\r\nI added the test case.\r\n"},{"author":"CohenCyril","date":"2020-04-10T13:30:13Z","comment":"@affeldt-aist we reached consensus, you can merge"}],"review_discussion":[{"author":"pi8027","file":"mathcomp/ssreflect/seq.v","date":"2020-04-09T00:58:38Z","comment":"I suggest moving `all2` before `all2E` and use `Variable` to factor out `r`. This allows us to use `Fixpoint` rather than `Definition` and then slightly improves the readability."},{"author":"affeldt-aist","file":"mathcomp/ssreflect/seq.v","date":"2020-04-09T07:19:49Z","comment":"I would agree."},{"author":"affeldt-aist","file":"mathcomp/ssreflect/seq.v","date":"2020-04-09T12:08:19Z","comment":"@CohenCyril Which solution do you think is best? (1) The change proposed by @pi8027 (with a comment to say that it is crucial that the `Fixpoint` be inside a `Section`) or (2) add a comment just before the `Definition` using `fix`?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/seq.v","date":"2020-04-09T12:49:22Z","comment":"The third alternative is to move nothing but add a section variable, as in the new commit I just pushed."}],"tags":[],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"378422bcb7de688ac201a70668a3e33b88bdae42","message":"Make `all2` better wrt the guard condition\n\nfixes #469","date":"2020-04-10T09:00:55Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"b4673a3f6d06a4ff38789fd82f33dd517186eb44","message":"adding guard conditions check to the test_suite","date":"2020-04-10T10:25:12Z"}]}