{"author":"CohenCyril","number":203,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":99,"deletions":0},{"file":"mathcomp/ssreflect/bigop.v","status":"M","additions":99,"deletions":0},{"file":"mathcomp/ssreflect/finset.v","status":"M","additions":99,"deletions":0},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":99,"deletions":0}],"state":"merged","open_date":"2018-07-04T15:45:00Z","update_date":"2019-10-16T16:34:47Z","discussion":[{"author":"gares","date":"2018-08-07T04:15:17Z","comment":"Lgtm. Not sure the fintype stuff is in the right place, other lemmas about the empty ft come earlier"},{"author":"CohenCyril","date":"2018-08-07T07:12:09Z","comment":"> Lgtm. Notte sure the fintype stuff is in the right place, other lemmas about the empty ft come earlier\r\n\r\nyou are right, and moving them at the right place triggered simplifications and more uniform naming, thanks"},{"author":"CohenCyril","date":"2019-02-28T13:01:05Z","comment":"@maximedenes  can you be an assignee?"},{"author":"amahboubi","date":"2019-04-10T14:29:42Z","comment":"@CohenCyril I do not have time to work on this before next dev meeting."},{"author":"CohenCyril","date":"2019-04-10T14:35:20Z","comment":"> @CohenCyril I do not have time to work on this before next dev meeting.\r\n\r\nOK, so maybe @thery or @gares could do a quick review?"},{"author":"CohenCyril","date":"2019-04-10T14:35:56Z","comment":"Or @strub ..."},{"author":"CohenCyril","date":"2019-05-23T17:22:54Z","comment":"@maximedenes Changes made, CI passes, if everyone's not unhappy, let's merge?"},{"author":"maximedenes","date":"2019-10-16T09:13:22Z","comment":"It seems to me all comments have been addressed, and this has been waiting for a long time, so I'll merge today unless reviewers object."}],"review_discussion":[{"author":"amahboubi","file":"mathcomp/ssreflect/bigop.v","date":"2018-09-03T09:30:00Z","comment":"What about big_seq_rmcond?"},{"author":"amahboubi","file":"mathcomp/ssreflect/bigop.v","date":"2018-09-03T09:47:12Z","comment":"I am not sure about the `reindex` prefix, it has a very different meaning in the `finType` section. Plus there is not `big` in the name and I would say it has to. Same remarks aply to the 3 next ones."},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-03T09:57:18Z","comment":"Ok. Not sure about the name here, but I do not have a better proposal. If this one proved useful, one probably also needs `foo A x : A x -> #|A| = 0 -> False.` don't we?"},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-03T10:00:14Z","comment":"Ok, but I do not see a use case not covered by `card1_eq`. Is `all_equal_to` of specific interest somewhere?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-10T13:35:46Z","comment":"This lemma is way easier to apply than `card1_eq` because a rewrite will match any element of type `T` and turn it into `x`, while `card1_eq` needs to be guided with a pattern."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-10T13:38:27Z","comment":"`rewrite card0_eq in ax` where `ax : A x` would do this job... but maybe the lemma you suggest would also be useful... and I am also conflicted about the name..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2018-09-10T13:41:14Z","comment":"Well `reindex` does not have `big` in it and it is exactly `reindex` applied to `enum_val` (+ proofs that this works)"},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2018-09-10T13:41:57Z","comment":"agreed"},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-10T13:57:58Z","comment":"Ok, I agree with you.  In fact my `foo` was wrong: I had in mind the version with hypotheses swapped, as in  `foo A x : #|A| = 0 -> A x -> False`, so as to be able to use `/(foo cardA)` as a view on a term of type `A x`, when `cardA : #|A| = 0` is in context. But I am not sure either."},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-10T14:01:22Z","comment":"Ok."},{"author":"amahboubi","file":"mathcomp/ssreflect/bigop.v","date":"2018-09-10T14:07:35Z","comment":"Ok, thanks for explaining. Since you explained the prefix, I will now question the suffix :). Why `_cond`? Lemmas in the `reindex` family do not feature this suffix."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2018-09-10T14:11:18Z","comment":"Actually, I'm not even sure about that statement, I never used it, I just put it here for completeness because the statement I used most was `fintype1`..."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2018-09-12T14:12:58Z","comment":"@amahboubi `_cond` suffixed lemmas appear in this library when an equation has bigops such as \r\n- there is variable `P` condition, (sometimes in addition to another condition, like `_ in _` or `_ < _`, etc..), \r\n- and the presence of a variable condition `P` makes it less easy to use (most of the time from left to right),\r\n- and there is at the same time a without-`cond` variant which is often as used or more used than the more general variant (and we therefore not want to pay the price that comes with the extra `P` condition.\r\n\r\n(e.g. `big_filter`, `big_seq`, `big_nat`, `big_ord_widen`, `big_ord_narrow`, `big_nseq`)\r\n\r\nThat is the case here: the difficulty comes from the fact that the side condition of the LHS is `P (f x)` and hence does not fall into pattern unification.\r\n\r\nHence I provide both the cond and the nocond variants."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2018-09-12T14:19:34Z","comment":"Well, one could argue that the body of the big does not fall into pattern unification either...  like for `reindex`, which makes my whole point kind of void... :zipper_mouth_face: "},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2018-12-10T17:56:13Z","comment":"@amahboubi we did not converge here."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2018-12-10T17:56:15Z","comment":"@amahboubi we did not converge here."},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2018-12-11T14:31:43Z","comment":"May be should we wait for a use case before trying to find a good name and shape.\r\n"},{"author":"amahboubi","file":"mathcomp/ssreflect/bigop.v","date":"2018-12-11T14:32:29Z","comment":"Let's ask @ggonthier's opinion here."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2019-04-10T14:15:06Z","comment":"Actually I changed my mind, since this theorem is as general as possible and there is no point in specializing it to other frequently used cases, I wish to keep the name as short as possible."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2019-04-10T14:15:24Z","comment":"@ggonthier's advice would still be desirable here."},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2019-04-10T14:15:45Z","comment":"Is this blocking, should I remove it?"},{"author":"CohenCyril","file":"mathcomp/ssreflect/fintype.v","date":"2019-04-10T14:16:01Z","comment":"I turned this into a reflection lemma."},{"author":"CohenCyril","file":"mathcomp/ssreflect/bigop.v","date":"2019-04-10T14:18:35Z","comment":"> my whole point kind of void...\r\n\r\nNot my whole point though, ... the specialized lemma is still easier to use, because `big[op/idx]_(_ in _) _` still hides membership as a LHS of a condition."},{"author":"maximedenes","file":"mathcomp/ssreflect/bigop.v","date":"2019-05-21T08:46:13Z","comment":"@amahboubi is this ok with you?"},{"author":"maximedenes","file":"mathcomp/ssreflect/bigop.v","date":"2019-05-21T08:48:39Z","comment":"@ggonthier It seems your opinion could unblock this :)"},{"author":"maximedenes","file":"mathcomp/ssreflect/fintype.v","date":"2019-05-21T08:49:42Z","comment":"@amahboubi can you clarify what you were expecting @CohenCyril to do?"},{"author":"amahboubi","file":"mathcomp/ssreflect/fintype.v","date":"2019-05-21T08:57:32Z","comment":"Nothing. Sorry it was not clear."},{"author":"amahboubi","file":"mathcomp/ssreflect/bigop.v","date":"2019-05-21T08:57:53Z","comment":"I am fine."},{"author":"ggonthier","file":"mathcomp/ssreflect/bigop.v","date":"2019-05-21T12:59:09Z","comment":"@CohenCyril is correct here: `\\big[op/x]_(i in A | true) F` is _not_ convertible to `\\big[op/x]_(i in A) F`, so the non-`_cond` variants are _not_ subsumed by the `_cond` ones. The `reindex` prefix is already assumed to imply `bigop` earlier in the file, but is not used for reindexing with specific functions, instead we have `big_ord`, `big_sumType`, and so on, so I would rather side with @amahboubi and use the (shorter) `big_` prefix here."},{"author":"pi8027","file":"CHANGELOG.md","date":"2019-10-16T09:18:18Z","comment":"Changelog entries should be moved to `CHANGELOG_UNRELEASED.md`."}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."}],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"948dec69615691de382278609a5b130ad5a485d3","message":"Improving fintype and bigop\n\n\n### Added\n\n- Fintype theorems: `fintype0`, `card_le1P`, `mem_card1`,\n  `card1P`, `fintype_le1P`, `fintype1`, `fintype1P`.\n\n- Bigop theorems: `big_rmcond`, `bigD1_seq`,\n  `reindex_enum_val_cond`, `reindex_enum_rank_cond`,\n  `reindex_enum_val`, `reindex_enum_rank`, `big_set`.","date":"2019-10-16T09:32:41Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"115a253d125015e7622f94c92fbf3d00f5f77e20","message":"renaming new `reindex_` lemmas with prefix `big_`","date":"2019-10-16T09:32:41Z"},{"author":"CohenCyril","committer":"CohenCyril","hash":"530a208ba37e9b333a1bf9196e883657599d2917","message":"shifting to CHANGELOG_UNRELEASED","date":"2019-10-16T09:33:49Z"}]}