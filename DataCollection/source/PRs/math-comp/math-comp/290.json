{"author":"pi8027","number":290,"diff_summary":[{"file":"etc/utils/hierarchy-diagram","status":"A","additions":136,"deletions":0}],"state":"merged","open_date":"2019-02-22T14:38:27Z","update_date":"2019-03-19T13:07:30Z","discussion":[{"author":"pi8027","date":"2019-02-22T16:47:25Z","comment":"I have reimplemented this by using the information of coercion paths between `<module>.type` types. This one works fine.\r\n\r\nOutput: [hierarchy.pdf](https://github.com/math-comp/math-comp/files/2894903/hierarchy.pdf)\r\n"},{"author":"pi8027","date":"2019-02-22T17:01:50Z","comment":"I found that some inheritances are missing (e.g., ~~`FinGroup` -> `Finite`,~~ `FinRing.Zmodule` -> `CountRing.Zmodule`), or... did I misunderstand something?"},{"author":"pi8027","date":"2019-02-25T13:17:34Z","comment":"The edge from `FinGroup` to `Finite` was removed because of my mistake. I found a way to generate a similar diagram from canonical projections. So I will try to improve this as a checking tool detecting missing coercions and canonical projections. @CohenCyril "},{"author":"pi8027","date":"2019-02-25T15:42:34Z","comment":"Red and blue edges are coercions and canonical projections respectively. Canonical projections of join and indirect inheritances are eliminated. Output: [hierarchy.pdf](https://github.com/math-comp/math-comp/files/2901208/hierarchy.pdf)\r\n\r\nThe red edge from `FinRing.Field` to `GRing.DecidableField` seems to be not an inheritance. So checking exhaustiveness of coercions and canonical projections of join by using canonical projections of inheritances would be the right way to implement a checking tool."},{"author":"amahboubi","date":"2019-02-28T14:13:16Z","comment":"This is a great tool, thanks a lot! I guess a short documentation would be useful (e.g. your initial comment). But I do not know what is the appropriate place for this. May be a README.dev ? Or a wiki pages for the tools in the util directory? This is more a question for us I guess, @gares ? @CohenCyril ?"},{"author":"gares","date":"2019-03-04T13:31:42Z","comment":"I agree with @amahboubi it needs some doc.\r\nIMHO you could put a `usage { cat <<EOT .... EOT }` function at the beginning of the file, and if one passes `-h|--help` call this function and exit. The body of the function could contain the PR header, roughly. In this way the doc is on top of the file, if you open it with an editor, and also printed if you pass `-h`."},{"author":"pi8027","date":"2019-03-07T11:38:06Z","comment":"I have resumed this work today. Are there any desirable command line options to control output, e.g., direction, color, disabling coercion edges, libraries to `Require Import`?"},{"author":"amahboubi","date":"2019-03-07T11:57:30Z","comment":"I would say that control of the list of imported libraries would be an important feature. How would you be able to filter coercion edges? by full name? name pattern? type?"},{"author":"pi8027","date":"2019-03-07T12:06:58Z","comment":"@amahboubi I have no good idea on how to filter out some structures and edges. But an option to specify libraries instead of `all.all` can be easily implemented."},{"author":"amahboubi","date":"2019-03-07T12:20:19Z","comment":"That would be great! It would also make the tool of a more general interest than just Mathcomp."},{"author":"pi8027","date":"2019-03-07T16:20:13Z","comment":"I finished to put doc and some options to control output. I changed the direction of edges to make them the same as Fig. 3 of \"Packaging Mathematical Structures\". Examples:\r\n\r\n<pre>\r\n$ ./etc/utils/hierarchy-diagram -canonicals blue -coercions off -R mathcomp mathcomp \\\r\n    -lib ssreflect.all_ssreflect -lib fingroup.all_fingroup -lib algebra.all_algebra \\\r\n  | dot -Tpdf -o <a href=\"https://github.com/math-comp/math-comp/files/2942171/algebra-hierarchy.pdf\">algebra-hierarchy.pdf</a>\r\n$ ./etc/utils/hierarchy-diagram -canonicals blue -coercions red -R mathcomp mathcomp \\\r\n  | dot -Tpdf -o <a href=\"https://github.com/math-comp/math-comp/files/2942172/all-hierarchy.pdf\">all-hierarchy.pdf</a>\r\n</pre>\r\n\r\nI did some ad-hoc things on this utility by assuming some conventions to package mathematical structures in MathComp. Outputs might be easily broken by misimplementation of new structures. A better implementation may be obtained as a plugin. But this is useful enough as it is."},{"author":"CohenCyril","date":"2019-03-19T09:41:06Z","comment":"@gares and @amahboubi happy with the current state?"},{"author":"amahboubi","date":"2019-03-19T09:44:31Z","comment":"I will not have time to review this thoroughly before next week. But I think that merging as is will not hurt so I am fine with it. "}],"review_discussion":[],"tags":[{"tag":"kind: tool","description":"Issue or PR about a tool. (e.g. packager or hierarchy_diagram)"}],"commits":[{"author":"pi8027","committer":"pi8027","hash":"25a1164023a46c035411d4fe3698d1a7c9912c4f","message":"Add a tool to draw the hierarchy diagram","date":"2019-02-22T15:34:55Z"},{"author":"pi8027","committer":"pi8027","hash":"5d0af0cfb61b60a103456138577ec59b032e6133","message":"Reimplement hierarchy-diagram by using coercions between \"<module>.type\" types","date":"2019-02-22T16:44:16Z"},{"author":"pi8027","committer":"pi8027","hash":"059d01303184aaf5762bfca545c50d13ff988f6c","message":"Use both coercions and canonical projections to generate the diagram","date":"2019-03-07T15:36:16Z"},{"author":"pi8027","committer":"pi8027","hash":"45820be9a6bd339882d3fcb539a52cb7d26bdb66","message":"Put documentation and some command line options for hierarchy-diagram","date":"2019-03-07T17:06:13Z"}]}