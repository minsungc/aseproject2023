{"author":"JasonGross","number":790,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":43,"deletions":34},{"file":"mathcomp/ssreflect/fintype.v","status":"M","additions":43,"deletions":34},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":43,"deletions":34}],"state":"merged","open_date":"2021-09-26T01:57:06Z","update_date":"2023-04-06T06:23:53Z","discussion":[{"author":"gares","date":"2021-09-26T06:14:46Z","comment":"Apparently there is a conflict in fintype"},{"author":"JasonGross","date":"2021-09-26T22:45:41Z","comment":"I think I need @herbelin 's help in how to factor notations so that they work:\r\n```coq\r\nRequire Import Coq.Lists.List.\r\nDeclare Scope seq_scope.\r\nOpen Scope seq_scope.\r\nNotation \"[ 'seq' E | i <- s ]\" := (map (fun i => E) s)\r\n  (at level 0, E at level 99, i binder,\r\n   format \"[ '[hv' 'seq'  E '/ '  |  i  <-  s ] ']'\") : seq_scope.\r\nCheck [seq ?[F] i | i <- ?[enum] ?[P] ].\r\nReserved Notation \"[ 'seq' F | x : T ]\"\r\n  (at level 0, F at level 99, x ident,\r\n   format \"'[hv' [ 'seq'  F '/ '  |  x  :  T ] ']'\").\r\nCheck [seq ?[F] i | i <- ?[enum] ?[P] ].\r\n(* Error: Syntax error: ':' expected after [name] (in [term]). *)\r\n```"},{"author":"CohenCyril","date":"2022-01-10T10:21:54Z","comment":"Hi @JasonGross @herbelin any hope to make this PR go forward?"},{"author":"herbelin","date":"2022-01-10T11:45:55Z","comment":"Hi,\r\n\r\nAt first view, supporting `[ 'seq' E | i <- s ]` with `i` a binder would require to change `x` to `binder` also in `[ 'seq' F | x : T ]` but the latter does not seem easy to generalize because the `x : T` has apparently a more complex interpretation than just being a binder, see the `in pred_of_simpl (@pred_of_argType T)` part (what would go wrong actually by replacing this part with `fun x : T => true`, in which case we would get the generalization easily?).\r\n\r\nAssuming that there is no easy way to reformulate `pred_of_simpl (@pred_of_argType T)` under a form referring to `x : T` rather than to only `T`, what could be tried is to only add `[ 'seq' E | ' i <- s ]` with `i` pattern, rather than generalizing `[ 'seq' E | i <- s ]` to `i` binder.\r\n\r\nHoping that it helps.\r\n"},{"author":"herbelin","date":"2022-01-13T08:49:28Z","comment":"@CohenCyril: we would need your help to know if there is a way to reformulate `pred_of_simpl (@pred_of_argType T)` under a form referring to `x : T` rather than to only `T` in notation `[ 'seq' F | x : T ] := [seq F | x : T in pred_of_simpl (@pred_of_argType T)]`."},{"author":"JasonGross","date":"2022-01-13T16:54:07Z","comment":"> reformulate `pred_of_simpl (@pred_of_argType T)` under a form referring to `x : T` rather than to only `T` in notation\r\n\r\n@herbelin What about using the `match` trick for substitution to do `(fun A (a : A) => A) _ (x : T))` in a way that does not leave a beta redex?  (I can code up a solution that does this the next time I'm at a computer; I don't have in my head an accurate model of which zeta-redexs unification will unfold and in what order, when it needs to perform evar unification.)"},{"author":"herbelin","date":"2022-01-13T20:29:39Z","comment":"> @herbelin What about using the `match` trick for substitution to do `(fun A (a : A) => A) _ (x : T))` in a way that does not leave a beta redex? (I can code up a solution that does this the next time I'm at a computer; I don't have in my head an accurate model of which zeta-redexs unification will unfold and in what order, when it needs to perform evar unification.)\r\n\r\nI don't know if that'll work. We need `x : T` to occur in position of binder so that when substituted with something such as `'pat` it continues to make sense,\r\n"},{"author":"JasonGross","date":"2022-01-13T22:52:21Z","comment":"> We need `x : T` to occur in position of binder so that when substituted with something such as `'pat` it continues to make sense,\r\n\r\nWhat about the equivalent of `(fun A (a : A -> True) => A) _ (fun x : T => I)`?"},{"author":"JasonGross","date":"2022-01-13T22:54:55Z","comment":"(Of course the `match` form will never be used for printing, I don't know if that is an issue)"},{"author":"JasonGross","date":"2022-01-14T03:36:41Z","comment":"> What about the equivalent of `(fun A (a : A -> True) => A) _ (fun x : T => I)`?\r\n\r\n```coq\r\nNotation \"'type_of' x\"\r\n  := match _, (fun x => I) with\r\n     | T, f\r\n       => match match f return T -> True with f' => f' end with\r\n          | _ => T\r\n          end\r\n     end\r\n       (x binder, only parsing, at level 20).\r\nCheck type_of x : nat. (* nat *)\r\nCheck type_of '((x, y) : nat * nat). (* (nat * nat)%type *)\r\n```"},{"author":"JasonGross","date":"2022-01-14T03:59:51Z","comment":"Updated PR, seems to be working"},{"author":"JasonGross","date":"2022-01-14T05:22:53Z","comment":"Two issues seem to arise:\r\n1. This change is incompatible with Coq 8.11 and Coq 8.12.  With mathcomp be dropping support for these versions on master anytime soon?\r\n2. multinomials fails with\r\n```\r\nFile \"./src/freeg.v\", line 207, characters 37-38:\r\nError:\r\nIn environment\r\nG : zmodType\r\nK : choiceType\r\ns : seq (G * K)\r\nx : K\r\nThe term \"x\" has type \"Choice.sort K\" while it is expected to have type\r\n \"(?A * ?B)%type\".\r\n```\r\nat https://github.com/math-comp/multinomials/blob/200ef66f7f892814dc7b9254f4f23bc7f59de093/src/freeg.v#L207 which is\r\n```coq\r\nDefinition predom s: seq K := [seq x.2 | x <- s].\r\n```\r\nwith\r\n```coq\r\nVariable G : zmodType.\r\nVariable K : choiceType.\r\nImplicit Types s   : seq (G * K).\r\nImplicit Types x y : K.\r\n```\r\n\r\nThe issue is that Coq now infers `x : K` rather than `x : _ * _`.  There's an easy backwards-compatible fix of changing `x` to `v` on that line; is that acceptable?"},{"author":"CohenCyril","date":"2022-01-14T12:11:40Z","comment":"> 1. This change is incompatible with Coq 8.11 and Coq 8.12.  With mathcomp be dropping support for these versions on master anytime soon?\r\n\r\nCoq 8.11 I think we can do it for the next release, for Coq 8.12 we might have to wait a few more month but eventually yes."},{"author":"JasonGross","date":"2022-01-15T17:56:29Z","comment":"Oops, I closed and reopened to restart the CI, and coqbot removed the 1.15.0 milestone :-("},{"author":"proux01","date":"2022-06-08T07:31:39Z","comment":"@JasonGross mathcomp now requires Coq >= 8.13, does that help here?\r\n"},{"author":"affeldt-aist","date":"2023-01-18T09:54:04Z","comment":"This PR was discussed during the last MathComp meeting (https://github.com/math-comp/math-comp/wiki/Minutes-January-11-2023) and has been considered for merging.\r\n@JasonGross Could you rebase it? Thank you.\r\n\r\n"},{"author":"JasonGross","date":"2023-02-15T03:57:16Z","comment":"Sorry, this fell off my todo list, I'll try to rebase shortly"},{"author":"JasonGross","date":"2023-02-28T21:08:34Z","comment":"I've rebased, but the CI seems extremely unhappy."},{"author":"JasonGross","date":"2023-03-03T01:22:13Z","comment":"And now there is no CI?"},{"author":"JasonGross","date":"2023-03-03T03:28:30Z","comment":"Overlay for monomials: https://github.com/math-comp/multinomials/pull/73"},{"author":"JasonGross","date":"2023-03-03T03:42:39Z","comment":"I'm confused by [the error in odd-order](https://github.com/math-comp/math-comp/actions/runs/4319328583/jobs/7538872530#step:15:559):\r\n[File \"./theories/PFsection3.v\", line 335, characters 17-19](https://github.com/math-comp/odd-order/blob/663e1827836cf0dedebb99f0ab6b232bab9bffd0/theories/PFsection3.v#L335R17-R19):\r\n`Error: Syntax error: ''' or [term level 99] expected after 'seq' (in [term]).`\r\n\r\nI cannot reproduce this locally.  Can anyone else reproduce this?\r\n"},{"author":"JasonGross","date":"2023-04-01T21:30:30Z","comment":"> I'm confused by [the error in odd-order](https://github.com/math-comp/math-comp/actions/runs/4319328583/jobs/7538872530#step:15:559): [File \"./theories/PFsection3.v\", line 335, characters 17-19](https://github.com/math-comp/odd-order/blob/663e1827836cf0dedebb99f0ab6b232bab9bffd0/theories/PFsection3.v#L335R17-R19): `Error: Syntax error: ''' or [term level 99] expected after 'seq' (in [term]).`\r\n> \r\n> I cannot reproduce this locally. Can anyone else reproduce this?\r\n\r\nAh, this only occurs with Coq 8.13.  Is odd-order planning to drop support for Coq 8.13 anytime soon?  (The rest of the ecosystem seems to build fine.)"},{"author":"JasonGross","date":"2023-04-01T21:40:34Z","comment":"Ah, maybe if someone merges https://github.com/math-comp/odd-order/pull/46 then this PR will work (finally) as-is"}],"review_discussion":[],"tags":[],"commits":[{"author":"JasonGross","committer":"JasonGross","hash":"b7fdc22c590c0938177c3ebe7a326eb9713ba60b","message":"Add notations for patterns in [seq ... ] notations\n\nThis allows syntax such as\n```coq\nCheck [seq '(x, y) <- List.combine (List.seq 0 5) (List.seq 0 5) | x == y ].\nCheck [seq x + y | '(x, y) <- List.combine (List.seq 5 5) (List.seq 5 5) ].\n```\nto parse and print.","date":"2023-04-01T21:22:45Z"},{"author":"JasonGross","committer":"JasonGross","hash":"2250278f5c76f10b32dc965b64aece25b8e4fd85","message":"Fix fintype","date":"2023-04-01T21:22:45Z"}]}