{"author":"CohenCyril","number":259,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"A","additions":3785,"deletions":0},{"file":"mathcomp/Make","status":"A","additions":3785,"deletions":0},{"file":"mathcomp/ssreflect/Make","status":"A","additions":3785,"deletions":0},{"file":"mathcomp/ssreflect/all_ssreflect.v","status":"A","additions":3785,"deletions":0},{"file":"mathcomp/ssreflect/finmap.v","status":"A","additions":3785,"deletions":0}],"state":"open","open_date":"2018-12-10T08:18:16Z","update_date":"2021-05-19T08:17:42Z","discussion":[{"author":"amahboubi","date":"2019-06-03T11:21:25Z","comment":"@CohenCyril , it's great to see progress on this front! Could you update the header comment so as to make the roadmap clearer? In particular, it seems that fixpoints-related material have now been actually moved. Are the dependencies now swapped? "},{"author":"CohenCyril","date":"2019-06-03T11:26:06Z","comment":"> In particular, it seems that fixpoints-related material have now been actually moved. Are the dependencies now swapped?\r\n\r\nNo they have not been swapped yet, but I can do it now if you want me to."},{"author":"amahboubi","date":"2019-06-03T11:28:37Z","comment":"I am trying to understand the roadmap for this PR. How do you see it?"},{"author":"CohenCyril","date":"2019-06-03T11:35:10Z","comment":"> I am trying to understand the roadmap for this PR. How do you see it?\r\n\r\nI just updated the orignial post for that purpose.\r\n"},{"author":"amahboubi","date":"2019-06-03T12:14:12Z","comment":"Thanks. However, the post still mentions that only `finmap.v` should be reviewed. Could you confirm, and if so mention explicitly in the post,  that PR #302 includes all the other changes ?"},{"author":"CohenCyril","date":"2019-06-03T12:43:55Z","comment":"> No they have not been swapped yet, but I can do it now if you want me to.\r\n\r\nSince #302 was reviewed and will be integrated very shortly, I will not swap, but expect a rebase that will *not* affect `finmap.v`"},{"author":"CohenCyril","date":"2019-06-13T17:26:32Z","comment":"@amahboubi the dependency in #302 is gone, you may review this PR without interference."},{"author":"amahboubi","date":"2019-07-05T10:49:24Z","comment":"Is finmap supposed to eventually subsume the finset library currently in mathcomp? If not what is the watershed?"},{"author":"ggonthier","date":"2019-07-05T12:02:04Z","comment":"> Is finmap supposed to eventually subsume the finset library currently in mathcomp? If not what is the watershed?\r\n\r\nIt should. But there are technical difficulties in crafting a notion of generic finite predicate that would extend gracefully the notion of generic predicate (on a finite type) that is currently used in `fintype` and `finset` for the `card`, `enum`, `pick`, `image` and `imset` operators. The definition proposed in `finmap` isn't adequate for this purpose (and indeed misuses the `ssrbool` interface).\r\n   I've gotten many of the issues figured out these last days; I'll propose something soon, when I've figured out the last sticking point (namely, display in subgoals). "},{"author":"amahboubi","date":"2019-07-05T12:35:00Z","comment":"Many thanks for the feedback @ggonthier ! And very good news that most issues are now resolved. About the remaining display issue you mention, is it easy enough to provide a quick description of the problem? "},{"author":"ggonthier","date":"2019-07-08T09:52:48Z","comment":"> About the remaining display issue you mention, is it easy enough to provide a quick description of the problem?\r\n  Briefly, the issue is that because finite predicates need to be implemented by a _value_ class, the class object will show up in subgoals produced by applying of rewriting with a generic finite predicate lemma, as happens with instances of `Monoid.law`, `{linear ..}`, etc. The latter are tolerable because they occur during rewriting, where the manifest classes may facilitate further rewriting and are easy to remove with `/=`.\r\n    I'm less comfortable with leaving visible manifest instances in subgoals produced by `apply` or `case`, which is why I set up a \"keyed predicate\" interface for algebraic predicates, which make it possible to display the actual predicate rather than the class object encapsulating its algebraic closure properties. I'm not sure I can use these for finite predicates, however, so I'm trying other solutions.\r\n   In the meantime I've uncovered another issue, which is not easily resolved. Another effect of using value classes is that the parameters of the predicate appear _at least twice_ after type inference: in the expression of the predicate for which a finite class is inferred, and in the expression of that class. In particular, `A` will appear (at least) twice in `#|A|`, and that breaks the common idiom for induction on the order of a set:\r\n```\r\nelim: {A}_.+1 {-2}A (ltnSn #|A|) => // n IHn A leAn.\r\n```\r\nWe'll probably have to phase it out, in favour of more specialised set induction principles or better behaved versions of the idiom that do not rely on counting occurrences. So this PR should require merging a preliminary compatibility PR that does this, as well as other necessary adjustments (in particular, not expecting `enum A` to be _convertible_ to `[seq x in Finite.enum _ | x \\in A]`)."},{"author":"gares","date":"2019-09-24T20:12:13Z","comment":"FTR: https://gitter.im/coq/coq?at=5d8a7140c77f285fb1d7fbf6 "},{"author":"CohenCyril","date":"2019-10-17T14:11:09Z","comment":"Hi @ggonthier if my understanding is correct you are currently rewriting part of this pull request. Could you confirm? If so do you have an estimated date/time for publishing what you did?"},{"author":"amahboubi","date":"2019-10-24T12:59:55Z","comment":"@CohenCyril , if I understand correctly  @ggonthier and you had some written discussion outside from github on the status and possible evolution of the status of (finite) sets in mathcomp. If so, @CohenCyril could you disclose the relevant (parts of) emails as posts here?"},{"author":"CohenCyril","date":"2019-10-24T19:48:27Z","comment":"> @CohenCyril , if I understand correctly @ggonthier and you had some written discussion outside from github on the status and possible evolution of the status of (finite) sets in mathcomp. If so, @CohenCyril could you disclose the relevant (parts of) emails as posts here?\r\n\r\nIt's much less that it looks: I asked for a short update about what @ggonthier was doing on this PR during the summer. I am not sure the mail I got from Georges is still relevant (depending on the progress made since then), but I could publish it here anyway if he agrees."},{"author":"amahboubi","date":"2019-11-14T10:22:04Z","comment":"@CohenCyril @gonthier, we discussed about a missing code snippet this morning. Would it be possible to share it e.g. with a gist? This would surely help preparing our forthcoming meeting on the topic."},{"author":"CohenCyril","date":"2019-11-14T11:47:13Z","comment":"@amahboubi \r\nhere is the code snippet that @ggonthier sent me\r\nhttps://gist.github.com/CohenCyril/7318e91f5b400f00b707baad579f51d2"},{"author":"amahboubi","date":"2019-12-11T15:51:36Z","comment":"@CohenCyril is this PR ready for review?\r\n"},{"author":"CohenCyril","date":"2019-12-11T17:33:54Z","comment":"> @CohenCyril is this PR ready for review?\r\n\r\nIt is not"},{"author":"ybertot","date":"2020-03-25T15:22:08Z","comment":"Now that we plan to work on release 1.11, what is the status of this PR? is it better to move it to 1.12."},{"author":"CohenCyril","date":"2020-03-25T15:29:02Z","comment":"> Now that we plan to work on release 1.11, what is the status of this PR? is it better to move it to 1.12.\r\n\r\nYes, and as said in the last mathcomp meeting @ggonthier is reworking it anyway, I expect this one to be closed when he submits his."},{"author":"CohenCyril","date":"2020-07-08T13:03:20Z","comment":"@ggonthier any news on that front?"},{"author":"gares","date":"2020-11-04T09:50:29Z","comment":"@ggonthier we are planning a release soonish. Shall we consider this PR or you are actively working on a different/alternative one?"},{"author":"chdoc","date":"2020-11-04T10:08:46Z","comment":"@gares would you be willing to self-assign?"},{"author":"CohenCyril","date":"2020-12-07T00:00:50Z","comment":"@pi8027 I forgot to mark this PR as a draft, sorry about that!"}],"review_discussion":[{"author":"pi8027","file":"CHANGELOG_UNRELEASED.md","date":"2020-12-06T22:09:18Z","comment":"The first and last entries (`fixset` and `eqVneq`) are already a part of previous releases. Also, please relocate the second item to the Added section."},{"author":"pi8027","file":"mathcomp/ssreflect/finmap.v","date":"2020-12-06T22:14:36Z","comment":"This can be removed. (But if we have to port/backport things until this PR gets merged, how do we proceed?)"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"kind: refactoring","description":"Issue or PR about a refactoring. (reorganizing the code, reusing theorems, simplifications...)"}],"commits":[{"author":"CohenCyril","committer":"CohenCyril","hash":"df68f4d8ed17dc7f2ae670a442cd730a5e4f3756","message":"Adding finmap to mathcomp","date":"2020-11-26T18:31:33Z"}]}