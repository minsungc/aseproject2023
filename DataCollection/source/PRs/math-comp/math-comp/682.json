{"author":"pi8027","number":682,"diff_summary":[{"file":".gitlab-ci.yml","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/Make","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/algebra/Make","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/algebra/archimedean.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/algebra/intdiv.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/algebra/rat.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/algebra/ssrint.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/algebra/ssrnum.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/character/character.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/character/classfun.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/character/inertia.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/character/integral_char.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/character/vcharacter.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/field/algC.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/field/algebraics_fundamentals.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/field/algnum.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/field/cyclotomic.v","status":"A","additions":2459,"deletions":922},{"file":"mathcomp/field/finfield.v","status":"A","additions":2459,"deletions":922}],"state":"open","open_date":"2020-12-03T22:49:58Z","update_date":"2021-05-31T09:26:08Z","discussion":[{"author":"pi8027","date":"2020-12-04T12:37:51Z","comment":"> Currently, `classfun.v` is broken since it uses `Cint`, but importing `ssrint` adds the infix `^` notation which collides with that of `group_scope`.\r\n\r\nIt seems that group notations and ring notations are mixed almost everywhere in `classfun.v`. So there is no other solution than adding `%g` whenever required. If a scope declaration for arguments of coercion to `Funclass` works, this situation probably becomes better. But this does not work in the current implementation of Coq (see https://github.com/coq/coq/issues/5527#issuecomment-568242128):\r\n```coq\r\nArguments fun_of_cfun [gT] [B] _ _%g.\r\n```"},{"author":"pi8027","date":"2020-12-04T15:43:50Z","comment":"I guess `Qint` and `Qnat` should be deprecated and superseded by `Cint` and `Cnat` respectively. Right? @CohenCyril "},{"author":"CohenCyril","date":"2020-12-04T16:33:07Z","comment":"> I guess `Qint` and `Qnat` should be deprecated and superseded by `Cint` and `Cnat` respectively. Right? @CohenCyril\r\n\r\nYes! And `Cint` and `Cnat` should both be renamed `Num.int` and `Num.nat`."},{"author":"CohenCyril","date":"2020-12-04T16:34:59Z","comment":"> > I guess `Qint` and `Qnat` should be deprecated and superseded by `Cint` and `Cnat` respectively. Right? @CohenCyril\r\n> \r\n> Yes! And `Cint` and `Cnat` should both be renamed `Num.int` and `Num.nat`.\r\n\r\nAnd they should be in the mixin, so as to make the computations for `ssrint` and `rat` faster!"},{"author":"pi8027","date":"2020-12-04T17:38:15Z","comment":"> > Yes! And `Cint` and `Cnat` should both be renamed `Num.int` and `Num.nat`.\r\n> \r\n> And they should be in the mixin, so as to make the computations for `ssrint` and `rat` faster!\r\n\r\nMake sense. Allowing the use of `Cint` without importing `ssrint` would also be nice to get a better fix for `classfun` and `inertia`. But reimplementing `Cint` theory in the absence of `ssrint` would require some more work."},{"author":"pi8027","date":"2020-12-04T23:08:12Z","comment":"@CohenCyril Could you confirm this is what you mean?\r\n```coq\r\n(* Module ArchiNumDomain. *)\r\nRecord mixin_of (R : numDomainType) := Mixin {\r\n  trunc : R -> nat;\r\n  is_nat : pred R;\r\n  is_int : pred R;\r\n  _ : forall x, 0 <= x -> (trunc x)%:R <= x < (trunc x).+1%:R;\r\n  _ : forall x, is_nat x = ((trunc x)%:R == x);\r\n  _ : forall x, is_int x = is_nat x || is_nat (- x);\r\n}.\r\n```"},{"author":"CohenCyril","date":"2020-12-05T00:11:16Z","comment":"> @CohenCyril Could you confirm this is what you mean?\r\n> \r\n> ```coq\r\n> (* Module ArchiNumDomain. *)\r\n> Record mixin_of (R : numDomainType) := Mixin {\r\n>   trunc : R -> nat;\r\n>   is_nat : pred R;\r\n>   is_int : pred R;\r\n>   _ : forall x, 0 <= x -> (trunc x)%:R <= x < (trunc x).+1%:R;\r\n>   _ : forall x, is_nat x = ((trunc x)%:R == x);\r\n>   _ : forall x, is_int x = is_nat x || is_nat (- x);\r\n> }.\r\n> ```\r\n\r\nYes roughly, except the truncation has no reason to be only for non negative numbers, I would prefer the function in the mixin to be more general, knowing that there could be a factory providing opaque `trunc`, `is_nat`, and `is_int` from a `nat` upper bound.\r\n\r\nI had planned to wait for HB to make this kind of changes... I am a bit surprised you are willing to go through so much work while we intend to trivialize all of this...\r\n"},{"author":"pi8027","date":"2020-12-05T01:00:17Z","comment":"> Yes roughly, except the truncation has no reason to be only for non negative numbers, I would prefer the function in the mixin to be more general, knowing that there could be a factory providing opaque `trunc`, `is_nat`, and `is_int` from a `nat` upper bound.\r\n\r\nThe problem is that we have to relocate the basic part of `ssrint` (`int` and `intmul` at least?) to `ssrnum` (or `ssralg`?) in order to generalize the truncation to the negative case. Since the above mixin has been proved equivalent to `Num.archimedean_axiom`, we can provide such a factory.\r\n\r\n> I had planned to wait for HB to make this kind of changes... I am a bit surprised you are willing to go through so much work while we intend to trivialize all of this...\r\n\r\nReworking an existing branch is easier to do now rather than later. Also, IMO actual difficulties appear in places other than the definitions of structures, as in the breakage of `classfun.v`."},{"author":"pi8027","date":"2020-12-10T10:44:39Z","comment":"`Cnat`, `Cint`, `truncC`, and `floorC` have been renamed to `Num.nat`, `Num.int`, `Num.trunc`, and `floorR` respectively. I guess we have to relocate `ssrint.int` (or make the dependency from `ssrint` to `ssrnum` opposite) to rename `floorR` to `Num.floor` anyway."},{"author":"pi8027","date":"2020-12-11T05:36:50Z","comment":"Almost done except that `floorR` is still not a part of the Archimedean mixin and defined in `ssrint`. I'm not sure what to do about this point."},{"author":"pi8027","date":"2020-12-12T12:03:33Z","comment":"Here is a summary of possible solutions:\r\n1. Keeping the dependency relation of libraries as is, placing `truncR`, `Rnat`, and `Rint` in `ssrnum`, and placing `floorR` in `ssrint` (the current situation):\r\n   - Pros: This solution works.\r\n   - Cons: `floorR` cannot be located in `ssrnum.Num` (we can declare another `Num` module in `ssrint` to work around this, but it seems troublesome). The `floorR` functions of `int` and `rat` cannot be as straightforward/efficient as we expect. The `archiNumDomainType` theory has to be separated into two parts (one in `ssrnum` and another in `ssrint`).\r\n2. Keeping the dependency relation of libraries as is, but relocating `int` and `intmul` from `ssrint` to `ssrnum` or before to include `floorR` and related lemmas in `ssrnum`:\r\n   I think this solution does not work, because statements and proofs of some lemmas about `floorR` require, e.g., canonical `ringType` and `orderType` instances of `int`. So we have to relocate a significant part of `ssrint` anyway.\r\n3. Changing the dependency relation of libraries to make `ssrnum` requiring `ssrint`:\r\n   This solution may work. But the canonical `numDomainType` of `int` has to be defined in `ssrnum` or later, and then some lemmas about `int` cannot be stated in `ssrint`, e.g., `abszE` which requires the norm function.\r\n4. Adding another library that requires both `ssrnum` and `ssrint`, and relocating the Archimedean structures and related lemmas to it:\r\n   I think this is the best solution among these, but requires at least two steps of transition."},{"author":"CohenCyril","date":"2020-12-12T12:23:32Z","comment":"Yet another solution: dispatching the contents of ssrint between ssralg and ssrnum."},{"author":"pi8027","date":"2020-12-12T12:30:36Z","comment":"@CohenCyril That is what I meant in solution 3 IIUC."},{"author":"CohenCyril","date":"2020-12-12T12:33:10Z","comment":"> @CohenCyril That is what I meant in solution 3 IIUC.\r\n\r\nIndeed. It was not clear to me whether you were suggesting to remove the file ssrint, which is what I suggest here."},{"author":"CohenCyril","date":"2020-12-12T12:35:43Z","comment":"Anyway, I like solution 4... it makes a lot of sense to me. How would you envision the transitiom though? Having files with new names required by files with old names?"},{"author":"pi8027","date":"2020-12-12T14:16:15Z","comment":"> Indeed. It was not clear to me whether you were suggesting to remove the file ssrint, which is what I suggest here.\r\n\r\nI did not suggest removing `ssrint.v`. So they are actually different. But, anyway...\r\n\r\n> Anyway, I like solution 4... it makes a lot of sense to me. How would you envision the transitiom though? Having files with new names required by files with old names?\r\n\r\nIn the first step, we try to relocate definitions and lemmas about the Archimedean structures as much as possible, to a new file, say `archimedean.v`. Since we have to deprecate `Znat` and related lemmas in `ssrint`, we cannot relocate some of them. So we declare them as `Local` ones in `ssrnum` or `ssrint`, provide deprecation aliases if needed, and also provide non-deprecated aliases in `archimedean.v`. I think this trick is also applicable to definitions of structures. In the second step, we remove deprecation aliases and relocate everything that depends on `archiNumDomainType` to `archimedean.v`."},{"author":"CohenCyril","date":"2020-12-15T16:32:07Z","comment":"The way I saw it was that `ssrnum.v` would be \"fake file\" `Require Export`ing `ssrnum_without_archimedean` (find a proper name e.g. just `num.v`) as well as `archimedean` so that there is no overlay to make for developments that used to depend in `ssrnum` but use archimedean structures."},{"author":"pi8027","date":"2020-12-16T01:44:05Z","comment":"Currently, ssrnum.v defines both numeric and Archimedean structures, but some notations (e.g., archiNumDomainType) are deprecated there and re-exported from archimedean.v without deprecation. I also had to re-export the canonical declarations of closure properties of Num.nat and Num.int from rat.v and algC.v to fix the breakage (Cf the last commit).\nOverlays are required to make hints working and they just insert a few simplifications. I will try to get rid of them if needed."},{"author":"CohenCyril","date":"2021-01-08T17:40:16Z","comment":"I have opened #692 to control the impact of this PR."},{"author":"proux01","date":"2021-01-08T19:33:29Z","comment":"@pi8027 the doc of floor reads\r\n\r\n> Num.floor x == for x \\in Num.real [...] else 0%Z\r\n\r\nis there a lemma stating the else part?"},{"author":"pi8027","date":"2021-01-09T05:24:27Z","comment":"@proux01 That is missing and the `floor` function has to be redefined to prove it. I will do it before the next MathComp call. Thanks!"},{"author":"pi8027","date":"2021-01-26T07:14:02Z","comment":"MathComp Analysis does not compile anymore with this change:\r\n```coq\r\n- File \"./theories/reals.v\", line 486, characters 8-39:\r\n- Error:\r\n- In environment\r\n- R : realType\r\n- x : R\r\n- The term \"- x\" has type \"GRing.Zmodule.sort R\"\r\n- while it is expected to have type \"Num.ArchiNumDomain.sort ?R\".\r\n```\r\nhttps://github.com/math-comp/analysis/blob/339401ed1e340428554fe1e9cd35e3ea5386bd85/theories/reals.v#L479-L486\r\n\r\nIt seems that there is no fix without adding an inheritance from `archiNumDomainType` to `realType`."},{"author":"CohenCyril","date":"2021-01-26T16:02:04Z","comment":"> It seems that there is no fix without adding an inheritance from `archiNumDomainType` to `realType`.\r\n\r\nIndeed, would there be a problem to do so?\r\n\r\nI believe this PR has no chance to be backward compatible unless we make the old and new codes coexist.\r\nI.e. we would keep the old mixin and the old structure as such (keeping `ssrnum.v` intact) and add distinct incompatible mixins and new structures in `archimedean.v` that would be opt-in for now. In this setting there would be a hug difference between legacy code and new code. But maybe that would be ok.\r\n\r\nWe should discuss this in a mathcomp meeting."},{"author":"pi8027","date":"2021-01-27T09:54:38Z","comment":"@CohenCyril I think trying to be backward compatible is a bit painful in this case. Anyway, I agree that we should discuss this in a meeting. Meanwhile, I would like to revise the theory part of archimedean.v. (I have some questions and comments since I did not write everything by myself.)"},{"author":"pi8027","date":"2021-02-10T17:06:33Z","comment":"BTW, why CI disappeared from the checklist here?"},{"author":"CohenCyril","date":"2021-02-12T19:05:20Z","comment":"> BTW, why CI disappeared from the checklist here?\r\n\r\nno idea, that's very strange"},{"author":"CohenCyril","date":"2021-03-08T12:34:09Z","comment":"@pi8027 \r\n> BTW, why CI disappeared from the checklist here?\r\n\r\nThis is now fixed (cf https://github.com/math-comp/math-comp/pull/706#issuecomment-792347741). In principle, if you rebased this PR for example, github would show the status of the CI. Although I believe with the ongoing stuff on HB it would not make sense to rebase it. Just so you know\r\n"}],"review_discussion":[{"author":"gares","file":"mathcomp/ssreflect/ssreflect.v","date":"2020-12-16T09:47:24Z","comment":"yes!"},{"author":"CohenCyril","file":"mathcomp/algebra/archimedean.v","date":"2021-01-18T19:19:07Z","comment":"You could provide a non opaque function instead e.g.\r\n```coq\r\nDefinition floorR x :=\r\n   if x >= 0 then trunc x else let n := trunc (- x) in if x == n%:R then - n%:Z else - n.-1%N.\r\n```\r\nThat way we can still compute (e.g. in Q) without having all the functions in the interface..."},{"author":"pi8027","file":"mathcomp/algebra/archimedean.v","date":"2021-01-22T05:08:28Z","comment":"@CohenCyril My plan is to extend the Archimedean mixin with the floor function in the next step (hopefully MathComp 1.14.0). So I would rather like to keep it opaque for now to prevent future breakages. For example, the floor function of `int` can simply be the identity function `fun n : int => n` which is inconvertible with your general floor function."},{"author":"pi8027","file":"mathcomp/algebra/archimedean.v","date":"2021-01-27T10:11:33Z","comment":"I think we should\r\n1. reformulate this lemma in terms of bigop over a list since it is the most general form of bigop, and\r\n2. factor out the fact `(forall i, P i -> F i \\is a Rnat) -> \\sum_(i | P i) F i = (\\sum_(i | P i) trunc (F i))%:R` as a lemma."},{"author":"pi8027","file":"mathcomp/algebra/archimedean.v","date":"2021-01-27T10:14:48Z","comment":"Same here."},{"author":"pi8027","file":"mathcomp/algebra/archimedean.v","date":"2021-01-27T10:19:06Z","comment":"@proux01 FYI, now this lemma allows us to reason about the nonreal part. So you may want to add some more facts follow from this."},{"author":"pi8027","file":"mathcomp/algebra/archimedean.v","date":"2021-01-27T10:30:23Z","comment":"There is a `ceil` variant of this lemma (`intRK'`). So I think we should rename them to have \"floor\" and \"ceil\" in their names, e.g., `intRKfloor` and `intRKceil`. Also, I don't get why `R` is capital here."},{"author":"pi8027","file":"mathcomp/algebra/archimedean.v","date":"2021-01-27T10:34:19Z","comment":"Similarly, there is a `ceil` variant of this lemma (`Rint_def'`). Also, it is better if `RnatE`, `Rint_def`, and `Rint_def'` have similar names, but `RintE` is already taken."},{"author":"pi8027","file":"mathcomp/algebra/archimedean.v","date":"2021-01-27T10:56:09Z","comment":"These lemmas can be factored out to `x \\is Rreal -> ceil x = floor x + (~~ (x \\is a Rint))%:R`. This can probably be useful in some cases but I'm not sure."},{"author":"pi8027","file":"mathcomp/algebra/archimedean.v","date":"2021-01-27T11:06:32Z","comment":"We should rename these lemmas."},{"author":"pi8027","file":"mathcomp/algebra/archimedean.v","date":"2021-01-27T11:18:41Z","comment":"This should be renamed."},{"author":"proux01","file":"mathcomp/algebra/archimedean.v","date":"2021-03-01T20:11:35Z","comment":"Indeed, here it is: https://github.com/proux01/math-comp/commit/881e7bb8b30d7d3baedb9bf2116bbc772be3a9b5"},{"author":"proux01","file":"mathcomp/algebra/archimedean.v","date":"2021-03-01T20:12:13Z","comment":"Thanks (although I don't see anything to add)"},{"author":"proux01","file":"mathcomp/algebra/archimedean.v","date":"2021-03-01T20:14:26Z","comment":"Maybe Rint_floor?"}],"tags":[{"tag":"kind: enhancement","description":"Issue or PR about addition of features."},{"tag":"drops: coq 8.10","description":"Addressing this issue or merging this PR requires to drop support for coq 8.10"}],"commits":[{"author":"Sobernard","committer":"pi8027","hash":"40476810dce10716dd949c1f363eeeacf8bfc3a1","message":"prepare for pull request : pbs with Hints, mainly for Cint1 and Cnat0","date":"2021-05-31T06:58:00Z"},{"author":"pi8027","committer":"pi8027","hash":"9f4460f6e49e60eb8916bb9047785728fa193d73","message":"Rename the Archimedean structures","date":"2021-05-31T06:58:00Z"},{"author":"pi8027","committer":"pi8027","hash":"6b6efe0d267a1bd1563b03135476d7a7b76867f6","message":"Fix compilation, structure inheritance, and hints","date":"2021-05-31T06:58:00Z"},{"author":"pi8027","committer":"pi8027","hash":"ab2ac1e88bd0b6bce4b34849430825f37181c192","message":"Remove `Qnat` and `Qint` except for names of lemmas","date":"2021-05-31T06:58:00Z"},{"author":"pi8027","committer":"pi8027","hash":"d8446d8e0dd752ba677a64e37f2a7cc9d769cb53","message":"Relocate int/nat subsets of an archiNumDomainType to ssrnum.v","date":"2021-05-31T06:58:00Z"},{"author":"pi8027","committer":"pi8027","hash":"47363b78c1f4f42417f0aabd0b3208e3edfd71a5","message":"Add deprecation aliases","date":"2021-05-31T06:58:00Z"},{"author":"pi8027","committer":"pi8027","hash":"bce9a68e7e843aa8efdff2f60aa9252a6cd35eb6","message":"Deprecate the Archimedean structures/theory in ssrnum.v and re-export them from archimedean.v","date":"2021-05-31T06:58:00Z"},{"author":"proux01","committer":"pi8027","hash":"db14e99f350a345f4561acb74d22632eb3485791","message":"Add a few lemmas about Num.floor","date":"2021-05-31T06:58:00Z"},{"author":"proux01","committer":"pi8027","hash":"11a3595202b6fbc6f55534079364b8d5064e5849","message":"Add Num.ceil","date":"2021-05-31T06:58:00Z"},{"author":"proux01","committer":"pi8027","hash":"26f5261a8b6e7f3edc239baf6e0ae9c77e042aef","message":"ratr commutes with floor and ceil","date":"2021-05-31T06:58:00Z"},{"author":"pi8027","committer":"pi8027","hash":"066de3ec277f29804a9addbb55ae919d2afe956d","message":"Fix Num.floor to reason about the nonreal part","date":"2021-05-31T06:58:00Z"},{"author":"pi8027","committer":"pi8027","hash":"5b56985dae9639e36eef6dc068cdee28d2c779af","message":"Add CI overlays","date":"2021-05-31T06:58:00Z"}]}