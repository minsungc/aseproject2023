{"author":"anton-trunov","number":256,"diff_summary":[{"file":".travis.yml","status":"M","additions":39,"deletions":32}],"state":"closed","open_date":"2018-12-04T21:04:13Z","update_date":"2018-12-20T18:54:37Z","discussion":[{"author":"ejgallego","date":"2018-12-04T21:20:59Z","comment":"See the docs at https://docs.travis-ci.com/user/build-stages/share-docker-image/\r\n\r\nI am not sure if this would work for pull requests tho, I forgot how the permission model works for this."},{"author":"ejgallego","date":"2018-12-04T21:24:20Z","comment":"Yup indeed this won't work for pull requests :S I got used to gitlab where we workaround that."},{"author":"erikmd","date":"2018-12-05T00:20:32Z","comment":"@anton-trunov thanks for working on this.\r\nSo to sum up, the plan of this PR and #245 is to make Travis build at the same time math-comp/math-comp and most math-comp libs, to have some regression testing feedback within the main repo, like Coq's main repo.\r\n\r\n(Afterwards, this could be complemented with some distribution of math-comp stable docker images for which I gave some suggestions in #243, but of course these two things are a bit orthogonal. Also I believe @CohenCyril was also interested in experimenting this stuff)\r\n\r\nAs suggested by @ejgallego you should definitely use some build stages to implement this, cf. https://docs.travis-ci.com/user/build-stages, and indeed Travis CI does not have a Docker registry per se, so you could try to push to Docker Hub or so, but it also seems to me this wouldn't be possible for fork branches, due to the need for (encrypted) private tokens to login into the registry, which can only be decrypted from upstream branches builds, not fork builds.\r\n\r\nHowever I think this is not blocking to achieve what we want: you could have 2 stages \"build\" and \"test\":\r\n- a stage \"build\" obtained by turning the `docker run + docker exec (first part)` command into a single `docker build --pull -t mathcomp:dev .` command, relying on a Dockerfile similar to that of [docker-coq-travis-ci-demo-2](https://github.com/erikmd/docker-coq-travis-ci-demo-2)\r\n- a stage \"test\" obtained by turning the `docker exec (second part)` command into `docker run -d -i --init --name=OddOrder (…) mathcomp:dev` then `docker exec OddOrder /bin/bash --login -c \"(…)\"` (and likewise for other libs to test-build).\r\n\r\nThen, it is one of two things:\r\n1. either the two jobs benefit from Docker's cache and the `mathcomp:dev` image will be available\r\n2. or the `docker run (…)` says `Unable to find image 'mathcomp:dev' locally`, so you should adapt the configuration to manually enable caching without using a Docker registry, relying for example on the commands `docker save` and `docker load`.\r\n\r\nFYI there are some references on the net documenting ways to address point 2. above:\r\n- https://stackoverflow.com/a/41975912/9164010\r\n- https://stackoverflow.com/a/35374332/9164010\r\n- http://rundef.com/fast-travis-ci-docker-build\r\n- https://giorgos.sealabs.net/docker-cache-on-travis-and-docker-112.html\r\n- https://medium.com/mobileforgood/patterns-for-continuous-integration-with-docker-on-travis-ci-71857fff14c5 (but this latter reference uses `docker build --pull --cache-from \"$IMAGE_NAME\" --tag \"$IMAGE_NAME\" .` and `docker push \"${IMAGE_NAME}:${version}\"` so it requires a Docker registry)"},{"author":"erikmd","date":"2018-12-05T00:28:44Z","comment":"@ejgallego I guess one of your suggestions (copied below) was dealing with the naming convention of the \"mathcomp:dev\" image (if it is pushed on Docker Hub at some point) but just to be sure could you give a small example of what you meant here by \"bash array indexed by Coq version\"?\r\n> once done we could study how to factor the versioning. For now you could use a bash array indexed by Coq version if you need version-specific pins."},{"author":"ejgallego","date":"2018-12-05T01:08:42Z","comment":"@erikmd thanks a lot for the links! Oh indeed using the cache could be great! It has to be done with care as to trigger the proper rebuild when it is needed, but indeed could work very well in the end.\r\n\r\nWhat I meant about the array is that for example imagine project `odd-order` that requires a different version for Coq 8.8 and Coq 8.9, then, indeed we could tweak the variables of the matrix to denote Coq version and store the git ref in an array."},{"author":"Zimmi48","date":"2018-12-05T12:35:05Z","comment":"@ejgallego @erikmd If you really want to use stages and push a docker image for math-comp in the first stage, then I strongly encouraged ditching Travis here and using GitLab CI instead. The experience with Coq has been very positive."},{"author":"anton-trunov","date":"2018-12-05T12:52:16Z","comment":"> I strongly encouraged ditching Travis here and using GitLab CI instead\r\n\r\n@Zimmi48 Does one need a Gitlab organization for this?"},{"author":"erikmd","date":"2018-12-05T13:02:14Z","comment":"@Zimmi48 thanks for your feedback! actually I guess the plan consists in both:\r\n\r\n1. building a Docker image of **math-comp master** only once for each master commit, then publish it on Docker Hub or so, and reuse it for subsequent jobs;\r\n2. building a Docker image of **each math-comp PR branch**, then reuse it for subsequent jobs.\r\n\r\nas point 2. doesn't require to push the first Docker image somewhere (the cache could be used to communicate inter-stages) this approach could be feasible using Travis.\r\n\r\nHowever it's true that GitLab CI's Docker support is excellent (the configuration file obtained in the end would certainly be simpler than with Travis, and point 2. above regarding PRs could also be extended with a `docker push` or so to keep somewhere the Docker image that passed tests, improving reproducibility in case of failed or successful build), so it could indeed be a fruitful move!"},{"author":"erikmd","date":"2018-12-05T13:06:39Z","comment":"Hi @ejgallego! you said about the approach of using staged builds with several docker images:\r\n> this won't work for pull requests :S I got used to gitlab where we workaround that.\r\n\r\nbut out of curiosity, do you rely on some dedicated tool for that (related maybe to coqbot), or do you just use a standard GitLab CI feature mentioned in its documentation?"},{"author":"anton-trunov","date":"2018-12-05T13:08:08Z","comment":"Ok, the [docs](https://docs.gitlab.com/ee/ci/ci_cd_for_external_repos/github_integration.html) say that as the first step one should do the following:\r\n> In GitLab create a CI/CD for external repo project and select GitHub.\r\n\r\nWhere do we do this? I guess (@CohenCyril or @gares or @amahboubi) could create a new GitLab organization for this? Or is there some generic org for Coq-related project? Any pointers would be much appreciated."},{"author":"CohenCyril","date":"2018-12-05T15:00:45Z","comment":"> Where do we do this? I guess (@CohenCyril or @gares or @amahboubi) could create a new GitLab organization for this? Or is there some generic org for Coq-related project? Any pointers would be much appreciated.\r\n\r\n@erikmd @anton-trunov @amahboubi @gares Should I create a `math-comp` **group** on http://gitlab.inria.fr?"},{"author":"erikmd","date":"2018-12-05T15:36:18Z","comment":"> Should I create a math-comp group on http://gitlab.inria.fr?\r\n\r\n@CohenCyril I don't know for sure, but it seemed to me that @Zimmi48's suggestion was to create that group on https://gitlab.com/ to benefit from its GitLab CI runners? (like https://gitlab.com/coq/coq)"},{"author":"erikmd","date":"2018-12-05T15:45:59Z","comment":"BTW (in anticipation of #243) you could create a `mathcomp` organization on Docker Hub as well?\r\n(indeed hyphens are not allowed there… but it seems https://hub.docker.com/u/mathcomp is still available)"},{"author":"Zimmi48","date":"2018-12-05T16:14:43Z","comment":"Indeed, I had not thought of the possibility of using the cache of Travis. In the old days when we started using Travis (almost 2 years ago), it was not possible to share the cache between stages."},{"author":"erikmd","date":"2018-12-05T16:32:52Z","comment":"Hi @Zimmi48\r\n> Indeed, I had not thought of the possibility of using the cache of Travis. In the old days when we started using Travis (almost 2 years ago), it was not possible to share the cache between stages.\r\n\r\nOK! Note anyway that I did not experimented the references mentioned in [my comment](https://github.com/math-comp/math-comp/pull/256#issuecomment-444310161) and in particular if this approach would now be applicable between different stages of the same Travis build.\r\n(And Travis' doc doesn't seem to indicate whether this is the case or not…)\r\n\r\nIn any case, relying on gitlab.com CI seems a good choice.\r\n\r\nBTW @Zimmi48 @ejgallego are you aware of specific limitations regarding the CI time of standard runners on gitlab.com CI?"},{"author":"ejgallego","date":"2018-12-05T16:59:23Z","comment":"> BTW @Zimmi48 @ejgallego are you aware of specific limitations regarding the CI time of standard runners on gitlab.com CI?\r\n\r\nNo time limitations that should be relevant for math-comp.\r\n\r\nIndeed I am not sure how caches do work wrt stages."},{"author":"ejgallego","date":"2018-12-06T01:28:14Z","comment":"Caches do seem to work well with stages; another note: gitlab's CI registry allows to get a deploy-only token for read-only access."},{"author":"CohenCyril","date":"2018-12-06T10:07:43Z","comment":"> @CohenCyril I don't know for sure, but it seemed to me that @Zimmi48's suggestion was to create that group on https://gitlab.com/ to benefit from its GitLab CI runners? (like https://gitlab.com/coq/coq)\r\n\r\nDone: https://gitlab.inria.fr/math-comp\r\n\r\nEDIT: Sorry! I did not read carefully. Mistake corrected"},{"author":"erikmd","date":"2018-12-10T08:27:22Z","comment":"Regarding Emilio's answer to my question about GitLab CI time limitations\r\n> No time limitations that should be relevant for math-comp.\r\n\r\nI've looked at https://about.gitlab.com/solutions/github/ and https://about.gitlab.com/pricing/#gitlab-com and it's not clear for me if we'd benefit from 2,000 CI pipeline minutes or 50,000 CI pipeline minutes…\r\n\r\nOut of curiosity, could @Zimmi48 or @ejgallego take a look at the following page to see if that info would be available for https://gitlab.com/coq/coq ?\r\nhttps://gitlab.com/groups/coq/-/pipeline_quota"},{"author":"ejgallego","date":"2018-12-10T08:36:26Z","comment":"Open source projects have no limitations but no guaranteed shared runners either. In practice it works very well as the on-demand approach means that backlog is caught up quickly.\r\n\r\nAlso it is fairly easy to add your own runners, in Coq we have a machine that helps in times of reduced worker availability."},{"author":"erikmd","date":"2018-12-11T00:59:33Z","comment":"Just not to forget and to follow-up the discussion at the visio meeting, you may want to create an organization at https://gitlab.com/math-comp as well.\r\n\r\n(see also that docs link mentioned by @anton-trunov:  \r\nhttps://docs.gitlab.com/ee/ci/ci_cd_for_external_repos/github_integration.html)\r\n\r\nCc @CohenCyril "},{"author":"Zimmi48","date":"2018-12-11T09:26:29Z","comment":"Indeed, as explained by @erikmd the proposal was to create the organization on gitlab.com not on Inria's GitLab."},{"author":"CohenCyril","date":"2018-12-11T10:07:59Z","comment":"@erikmd @Zimmi48  done"},{"author":"erikmd","date":"2018-12-14T15:00:27Z","comment":"Hi @anton-trunov! did you perform more experiments regarding the migration/setup of mathcomp's CI on GitLab? otherwise I can propose to look at this tonight (relying on the [GitLab CI config example](https://gitlab.com/erikmd/docker-coq-gitlab-ci-demo-2/) that I recently simplified to avoid the `sed` hack). However, I am not sure I could add additional commits to this PR #256, so maybe it's better to create another PR(?)"},{"author":"anton-trunov","date":"2018-12-14T15:38:07Z","comment":"@erikmd I was intermittently reading the docs and experimenting with CI on IMDEA's internal Gitlab, since I have the necessary rights there, but I haven't finished yet. Feel free to take over this PR any time, though."},{"author":"erikmd","date":"2018-12-15T16:35:00Z","comment":"Thanks @anton-trunov! so I resumed my experiments as well, diving in GitLab's doc and in some examples of CI setup including that of Coq.\r\nCyril gave me access to the CI-dedicated org https://gitlab.com/math-comp and I expect to have a working configuration for branch builds soon, but I think we'll need Théo and Emilio's help to fully configure the builds for GitHub PRs... I'll let you informed ASAP."},{"author":"Zimmi48","date":"2018-12-17T15:49:39Z","comment":"OK, I might not be very reactive though, but I'll try to help if I can."},{"author":"anton-trunov","date":"2018-12-20T18:54:37Z","comment":"Superseded by #266"}],"review_discussion":[{"author":"ggonthier","file":".travis.yml","date":"2018-12-05T06:49:19Z","comment":"You should also add `math_comp/fourcolor` as that's also a stable (and sizeable) development."},{"author":"anton-trunov","file":".travis.yml","date":"2018-12-05T07:35:15Z","comment":"Will do. I added a TODO list to the original post trying to summarize all the suggestions. Feel free to edit the list adding new items or removing the ones you'd prefer not to test."}],"tags":[{"tag":"kind: CI","description":"Issue or PR about the CI. (Gitlab CI or CI of dependencies problems linked with math-comp)"}],"commits":[{"author":"anton-trunov","committer":"anton-trunov","hash":"02bc3555d3c94d36d84099f0bd905f036d1f2ee8","message":"[ci] Switch to Docker\n\nBased on https://github.com/erikmd/docker-coq-travis-ci-demo-1","date":"2018-12-04T20:01:54Z"},{"author":"anton-trunov","committer":"anton-trunov","hash":"b524b34d22f3990af6c35a66a2c9e5d84206f8ee","message":"[ci] Add odd-order","date":"2018-12-04T20:02:18Z"}]}