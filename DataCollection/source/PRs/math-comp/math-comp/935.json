{"author":"thery","number":935,"diff_summary":[{"file":"CHANGELOG_UNRELEASED.md","status":"M","additions":449,"deletions":12},{"file":"mathcomp/algebra/poly.v","status":"M","additions":449,"deletions":12},{"file":"mathcomp/algebra/polydiv.v","status":"M","additions":449,"deletions":12},{"file":"mathcomp/ssreflect/bigop.v","status":"M","additions":449,"deletions":12},{"file":"mathcomp/ssreflect/seq.v","status":"M","additions":449,"deletions":12},{"file":"mathcomp/ssreflect/ssrbool.v","status":"M","additions":449,"deletions":12},{"file":"mathcomp/ssreflect/ssrnat.v","status":"M","additions":449,"deletions":12}],"state":"merged","open_date":"2022-10-05T15:39:57Z","update_date":"2022-10-14T14:12:10Z","discussion":[{"author":"proux01","date":"2022-10-07T11:58:11Z","comment":"I would also have expected a lemma like `drop_poly_id : drop_poly 0 p = p`"},{"author":"proux01","date":"2022-10-07T12:13:37Z","comment":"It could also be worth adding a lemma in polydiv.v linking `drop_poly` with division?"},{"author":"thery","date":"2022-10-07T14:25:43Z","comment":"\r\n> It could also be worth adding a lemma in polydiv.v linking `drop_poly` with division?\r\n\r\nYes I thought about it. My problem is that polydiv proposes some weak form of division. So I think it would be nice \r\nto have the theorem with (%/ ) but the definition is so intricate that I am quickly lost in the proof. I see if I have more energy in the weekend\r\n"},{"author":"thery","date":"2022-10-07T19:04:35Z","comment":"@proux01  ok I think I have adressed all your issues. Thanks a lot. It was a bit shaky!"},{"author":"thery","date":"2022-10-10T12:22:08Z","comment":"@proux01 thanks for your review, very helpful!"},{"author":"CohenCyril","date":"2022-10-10T12:38:57Z","comment":"I also have a series of corrections to make (if @proux01 didn't take care of them already ^^')"},{"author":"proux01","date":"2022-10-10T13:02:17Z","comment":"@CohenCyril the last point I'm not entirely sure about is the general rule \"put most complicated term on left of equality\", that's not really satisfied by `odd_even_polyE` and `take_drop_polyE`"},{"author":"thery","date":"2022-10-10T15:16:27Z","comment":"@CohenCyril Thanks. Just one remark about `comp_polyXn`and `comp_polyXnr` I was trying to mimic `comp_polyX` and `comp_polyXr`"},{"author":"CohenCyril","date":"2022-10-10T15:30:50Z","comment":"Woops I did not see your message in time...\r\n\r\n> @CohenCyril Thanks. Just one remark about `comp_polyXn`and `comp_polyXnr` I was trying to mimic `comp_polyX` and `comp_polyXr`\r\n\r\nOh I see... I think `Xnr` is confusing because `n` is for natural and `r` right...so it is a weird mixture of type abbreviation and position :-/... I prefer to have is the way I changed it, using the positions of the words `Xn` and `poly` to understand which is on which side..."},{"author":"thery","date":"2022-10-12T14:31:16Z","comment":"@CohenCyril  looks good to me. The only thing I am puzzled about is that I am not sure that  `sum_even_poly` and `sum_odd_poly` are \"useful\" theorems, they seem there only to ease the proof of  `poly_even_odd`.\r\n\r\nI've found a direct  proof of `poly_even_odd` without bigop surgery (using induction). Maybe it is better?\r\n```\r\nLemma poly_even_odd p : even_poly p \\Po 'X^2 + (odd_poly p \\Po 'X^2) * 'X = p.\r\nProof.\r\nelim/poly_ind: p => [|n IH nE]; first by rewrite !linear0 mul0r add0r.\r\nrewrite !linearD /= even_polyMX odd_polyMX.\r\nrewrite even_polyC odd_polyC linear0 addr0 comp_polyC.\r\nrewrite -[in RHS]nE addrAC mulrDl [_ * _ + _]addrC -mulrA -expr2.\r\nby rewrite /comp_poly rmorphM hornerM_comm /comm_poly /= map_polyX hornerX.\r\nQed.\r\n```"},{"author":"proux01","date":"2022-10-12T14:38:50Z","comment":"I do prefer the current proof, the intermediate lemmas `sum_even_poly` and `sum_odd_poly` can be of interest (I guess, I haven't used them)."},{"author":"thery","date":"2022-10-12T14:53:33Z","comment":"They look very technical to me \r\nFor example I am not sure I would want \r\n```\\sum_(n <= i < size p) p`_i *: 'X^i = drop_poly n p * 'X^n``` \r\nbut if you think they are useful no problem to have them."},{"author":"CohenCyril","date":"2022-10-12T15:21:44Z","comment":"> . The only thing I am puzzled about is that I am not sure that `sum_even_poly` and `sum_odd_poly` are \"useful\" theorems, they seem there only to ease the proof of `poly_even_odd`.\r\n\r\nYes I saw your previous proof. The reason why I suggested to add `sum_even_poly` and `sum_odd_poly` is because I thought they were informative and were good test-benches for the more generic additions to the library. I'm not entirely sure if they are useful though, you are right... Are you ok with keeping them?"},{"author":"CohenCyril","date":"2022-10-12T15:39:21Z","comment":"> For example I am not sure I would want\r\n> `` \\sum_(n <= i < size p) p`_i *: 'X^i = drop_poly n p * 'X^n ``\r\n> but if you think they are useful no problem to have them.\r\n\r\nGood idea! I'm quite fond of it actually :)"},{"author":"thery","date":"2022-10-12T17:10:38Z","comment":"> Good idea! I'm quite fond of it actually :)\r\n\r\n@CohenCyril  maybe you could use it to shorten the proof of `poly_take_drop` :smile: \r\n\r\nwould be interested to have a vscode extrensionl that annotates each theorem of the library with  the number of times it is  used in the CI database.\r\n\r\n\r\n\r\n\r\n\r\n"},{"author":"thery","date":"2022-10-14T07:33:13Z","comment":"I could not improve the proof `poly_take_drop`. So I am fine with the current state of the PR"},{"author":"proux01","date":"2022-10-14T07:37:45Z","comment":"Ok, let's merge"}],"review_discussion":[{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:16:42Z","comment":"```suggestion\r\nProof. exact: size_poly. Qed.\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:22:23Z","comment":"```suggestion\r\n  (size p <= s.*2.+1)%N -> odd_poly p = \\poly_(i < s) p`_i.*2.+1.\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:24:21Z","comment":"```suggestion\r\nProof. by apply/polyP => i; rewrite !(coef_odd_poly, coefD). Qed.\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:30:33Z","comment":"I would have expected something like:\r\n```suggestion\r\nDefinition drop_poly m (p : {poly R}) := \\poly_(i < (size p - m)%N) p`_(i + m).\r\n```\r\n"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:35:13Z","comment":"I would have expected\r\n```suggestion\r\nLemma coef_drop_poly m p i : \r\n  (drop_poly m p)`_ i = if (i < size p - m)%N then p`_ (i + m) else 0.\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:38:11Z","comment":"Maybe something more generic like\r\n```suggestion\r\nLemma take_polyMXn m n p : take_poly m (p * 'X^ n) = take_poly (m - n) p.\r\n```\r\nand something like `take_poly0` to handle the cases `m <= n`"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:40:07Z","comment":"If we have a `take_poly0 : take_poly 0 p = 0`, maybe name them `take_poly0l` and `take_poly0r`?"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:41:26Z","comment":"Maybe make it more generic with sum on a sequence and condition?\r\n```Coq\r\n  take_poly m (\\sum_(i <- r | P i) p i) = \\sum_(i <- r | P i) (take_poly m (p i)).\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:44:47Z","comment":"Maybe more generic, something like\r\n```suggestion\r\nLemma drop_polyMXn m n p : drop_poly m (p * 'X^ n) = drop_poly (m - n) p * `X^(n - m).\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:46:21Z","comment":"```suggestion\r\n  drop_poly m (\\sum_(i <- r | P i) p i) = \\sum_(i <- r | P i) (drop_poly m (p i)).\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:50:31Z","comment":"I would have expected\r\n```suggestion\r\n  p = take_poly m p + drop_poly m p * 'X^m.\r\n```\r\nthe name `left_drop_polyE` feels a bit strange, maybe `take_drop_poly`?"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:51:14Z","comment":"```suggestion\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:52:25Z","comment":"```suggestion\r\n(*      odd_poly p    == monomials of odd degree of p                         *)\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:52:59Z","comment":"```suggestion\r\n(*      even_poly p   == monomials of even degree of p                        *)\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:54:42Z","comment":"```suggestion\r\n(*      take_poly n p == polynomial p without its monomials of degree >= n    *)\r\n```"},{"author":"proux01","file":"mathcomp/algebra/poly.v","date":"2022-10-07T11:55:52Z","comment":"```suggestion\r\n(*      drop_poly n p == polynomial p divided by X^n                          *)\r\n```"},{"author":"CohenCyril","file":"mathcomp/algebra/poly.v","date":"2022-10-10T15:16:07Z","comment":"@proux01 sure! I'm tempted to rename it  `poly_even_odd` and swap sides."},{"author":"thery","file":"mathcomp/algebra/poly.v","date":"2022-10-10T15:20:15Z","comment":"maybe `even_odd_poly_eq` like in `divn_eq`"},{"author":"CohenCyril","file":"mathcomp/algebra/poly.v","date":"2022-10-10T15:31:49Z","comment":"For `take_poly` and `drop_poly` I adopted `poly_take_drop` (to mimic `cat_take_drop`), so I was tempted to reuse this shape here too."}],"tags":[],"commits":[{"author":"thery","committer":"proux01","hash":"2088ee343bad11d020f8cf2eff253c03d494d318","message":"Add some surgery operations on polynomial\n\nCo-authored-by: Cyril Cohen <cohen@crans.org>\nCo-authored-by: Pierre Roux <pierre.roux@onera.fr>","date":"2022-10-14T08:56:15Z"}]}