{"author":"pi8027","number":400,"diff_summary":[{"file":"mathcomp/algebra/ssralg.v","status":"M","additions":1,"deletions":1}],"state":"merged","open_date":"2019-10-26T14:37:04Z","update_date":"2019-10-30T13:47:59Z","discussion":[{"author":"ejgallego","date":"2019-10-30T18:35:48Z","comment":"Hi folks,\r\n\r\nthis PR seems to have broken GeoCoq:\r\n```\r\nFile \"./Meta_theory/Models/POF_to_Tarski.v\", line 432, characters 0-61:\r\nError: The RHS of scalerBr\r\n    (_ *: _ - _ *: _)\r\ndoes not match any subterm of the goal\r\n```\r\nwhere the code is:\r\nhttps://github.com/GeoCoq/GeoCoq/blob/ae5b7aecd1ab587e2c039904a20b55610f136753/Meta_theory/Models/POF_to_Tarski.v#L425-L434\r\n```coq\r\nLemma extension_contraction x y z k:\r\n  k != 0 -> extension x y k == z = (contraction x z k == y).\r\nProof.\r\nmove=> k_neq0; rewrite /extension /contraction.\r\nsuffices: (k*:(k^-1 *: (y - x) + x) == k*:z) = (k^-1 *: (y - x) + x == z).\r\n  move<-; rewrite scalerDr scalerA divff // scale1r eq_sym -subr_eq.\r\n  by rewrite -subr_eq opprK -scalerBr.\r\nrewrite -subr_eq0 -[X in _ = X]subr_eq0 -scalerBr scaler_eq0. (* <- bad line *)\r\nby move/negPf: k_neq0 ->; rewrite orFb.\r\nQed.\r\n```\r\nGoal in the broken state is:\r\n```\r\n  (k *: (k^-1 *: (y - x) + x) == k *: z) = (k^-1 *: (y - x) + x == z)\r\n```\r\nIn particular now `-subr_eq0` doesn't match the first `k *: _ == _` as it did before. I wonder what's going on, the fix upstream is easy, just letting you know.\r\n\r\nFixed tactic:\r\n```\r\nrewrite -[k *: _ == _]subr_eq0 -[X in _ = X]subr_eq0 -scalerBr scaler_eq0.\r\n```"},{"author":"pi8027","date":"2019-10-31T22:52:36Z","comment":"Dear @ejgallego, thank you so much for fixing the issue I exposed. This is a variant of the subterm selection problem: #289. `rewrite -[LHS]subr_eq0 -[RHS]subr_eq0 -scalerBr scaler_eq0` might be a smart fix, but anyway, currently we have no solution other than giving patterns explicitly to indicate which subterm to rewrite."}],"review_discussion":[],"tags":[],"commits":[{"author":"pi8027","committer":"pi8027","hash":"a4d04cdad0a52db675eeab21dec3d46468ea657c","message":"Add an explicit type annotation to GRing.scale\n\n`V` was wrongly eta-expanded before:\nGRing.scale\n     : forall (R : ringType) (V : lmodType R),\n       R -> GRing.Zmodule.Pack (GRing.Lmodule.class V) ->\n       GRing.Zmodule.Pack (GRing.Lmodule.class V)","date":"2019-10-26T14:32:30Z"}]}